[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () = MenhirLib.StaticVersion.require_unreleased
module MenhirBasics =
  struct
    exception Error = Parsing.Parse_error
    let _eRR : exn = Error
    type token =
      | UNDERSCORE 
      | UID of string Positions.located 
      | TYPE 
      | TOKEN 
      | TILDE 
      | START 
      | STAR 
      | SEMI 
      | RPAREN 
      | RIGHT 
      | QUESTION 
      | QID of string Positions.located 
      | PUBLIC 
      | PREC 
      | PLUS 
      | PERCENTPERCENT of Stretch.t Lazy.t 
      | PERCENTATTRIBUTE 
      | PARAMETER 
      | ON_ERROR_REDUCE 
      | OCAMLTYPE of Stretch.ocamltype 
      | NONASSOC 
      | LPAREN 
      | LID of string Positions.located 
      | LET 
      | LEFT 
      | INLINE 
      | HEADER of Stretch.t 
      | GRAMMARATTRIBUTE of Syntax.attribute 
      | EQUALEQUAL 
      | EQUAL 
      | EOF 
      | COMMA 
      | COLONEQUAL 
      | COLON 
      | BAR 
      | ATTRIBUTE of Syntax.attribute 
      | ACTION of Syntax.raw_action 
  end
include MenhirBasics
open Stretch
open Syntax
open Positions
let inject (e : symbol_expression located) =
  (Positions.pmap
     (fun pos ->
        fun e ->
          let branch =
            Branch
              ((Positions.with_pos pos (ESingleton e)),
                (ParserAux.new_production_level ())) in
          EChoice [branch]) e : expression)
let rec find s n i =
  assert (i < n);
  if (s.[i]) = '(' then i else (assert ((s.[i]) = ' '); find s n (i + 1))
let unparenthesize (s : string) =
  (let n = String.length s in
   assert ((n >= 2) && ((s.[n - 1]) = ')'));
   (let i = find s n 0 in
    let b = Bytes.of_string s in
    Bytes.set b i ' '; Bytes.set b (n - 1) ' '; Bytes.to_string b) : 
  string)
let unparenthesize (s : Stretch.t) =
  ({ s with stretch_content = (unparenthesize s.stretch_content) } : 
  Stretch.t)
let unparenthesize (o : Stretch.t option) =
  (Option.map unparenthesize o : Stretch.t option)
module Tables =
  struct
    include MenhirBasics
    let token2terminal : token -> int =
      fun _tok ->
        match _tok with
        | ACTION _ -> 37
        | ATTRIBUTE _ -> 36
        | BAR -> 35
        | COLON -> 34
        | COLONEQUAL -> 33
        | COMMA -> 32
        | EOF -> 31
        | EQUAL -> 30
        | EQUALEQUAL -> 29
        | GRAMMARATTRIBUTE _ -> 28
        | HEADER _ -> 27
        | INLINE -> 26
        | LEFT -> 25
        | LET -> 24
        | LID _ -> 23
        | LPAREN -> 22
        | NONASSOC -> 21
        | OCAMLTYPE _ -> 20
        | ON_ERROR_REDUCE -> 19
        | PARAMETER -> 18
        | PERCENTATTRIBUTE -> 17
        | PERCENTPERCENT _ -> 16
        | PLUS -> 15
        | PREC -> 14
        | PUBLIC -> 13
        | QID _ -> 12
        | QUESTION -> 11
        | RIGHT -> 10
        | RPAREN -> 9
        | SEMI -> 8
        | STAR -> 7
        | START -> 6
        | TILDE -> 5
        | TOKEN -> 4
        | TYPE -> 3
        | UID _ -> 2
        | UNDERSCORE -> 1
    and error_terminal = 0
    and token2value : token -> Obj.t =
      fun _tok ->
        match _tok with
        | ACTION _v -> Obj.repr _v
        | ATTRIBUTE _v -> Obj.repr _v
        | BAR -> Obj.repr ()
        | COLON -> Obj.repr ()
        | COLONEQUAL -> Obj.repr ()
        | COMMA -> Obj.repr ()
        | EOF -> Obj.repr ()
        | EQUAL -> Obj.repr ()
        | EQUALEQUAL -> Obj.repr ()
        | GRAMMARATTRIBUTE _v -> Obj.repr _v
        | HEADER _v -> Obj.repr _v
        | INLINE -> Obj.repr ()
        | LEFT -> Obj.repr ()
        | LET -> Obj.repr ()
        | LID _v -> Obj.repr _v
        | LPAREN -> Obj.repr ()
        | NONASSOC -> Obj.repr ()
        | OCAMLTYPE _v -> Obj.repr _v
        | ON_ERROR_REDUCE -> Obj.repr ()
        | PARAMETER -> Obj.repr ()
        | PERCENTATTRIBUTE -> Obj.repr ()
        | PERCENTPERCENT _v -> Obj.repr _v
        | PLUS -> Obj.repr ()
        | PREC -> Obj.repr ()
        | PUBLIC -> Obj.repr ()
        | QID _v -> Obj.repr _v
        | QUESTION -> Obj.repr ()
        | RIGHT -> Obj.repr ()
        | RPAREN -> Obj.repr ()
        | SEMI -> Obj.repr ()
        | STAR -> Obj.repr ()
        | START -> Obj.repr ()
        | TILDE -> Obj.repr ()
        | TOKEN -> Obj.repr ()
        | TYPE -> Obj.repr ()
        | UID _v -> Obj.repr _v
        | UNDERSCORE -> Obj.repr ()
    and default_reduction =
      (8,
        "\000\000\000\127\128~\000\000\127\128~\000\000\000B@A\000q3}\000;|\000;|\000B@AH\000w3}\014\000J\000\000L\000\000'\000\000{\012\000J\000\000\000u\r\020W\021\000~\000\000\000;|\000\000w}\000\000E\018\000\016\000\019X\024V\022\011\017\025\023\000\000\000y\015\000\000\000 \000!\000\0000\000\127\128~\000\000'\000\000\000\000s\000=\000\000N\000\000\000~\000\000\000\000\00091\000\000\000~U^\000\000i\000\000g\000-\000\000'\b\000\000)Y\000\000U\\%\000\000m\000\000\007\000\000Z\000\000)F\000\000\000\127\128~U^\000\000i\000\000\000\000'\000\000\000=\000\027\026\000PQ\000\127\128~U\003\000PQ\000O?\000\000o\000R\000R\000\000\002\000\000\000\000\003\000\000\002\000\000\000\000\0007\000\0004\000\005\000\000\000\000\000\000\000'\130`b\000\006\000B@A3\000\000'\130ec\028\000\000k\000\129_d\0007\000\1294\000\005\000\000\000\000`b\000\006_d\000\000ec\028C/\000TS\"\001\000+")
    and error =
      (38,
        "\026\164\244\249 \000\000 \000\002\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\187\223\127\154\b\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T@\128  \b\001\000\000\005D\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\014\239}~h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000 \000\000\000\000\000\000\b\000\000\000\000:\172\244\249\168\000\000\000\000\007\255\255\255\255\223\255\255\255\255\000\000\000\000\000\234\147\211\230\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\000\000@\000\026\164\245\249\160\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\000@\000\000\000\000\000\000\132d\012\002\"\000\128\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\002\017\144\016\b\136\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\169=>J\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000 \b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\128\016\000\014\171=~h \b\001\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000 \012\129\161\000\128 \006\128\000\000\000\000\000\b\003\000@\000\000\000\000\000\000\1282\006\132\002\000\200\026\016\000\000\000\000\000 \b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\253\255\255\255\255\240\000\000\000\000\000\000\000\128\b \b\001\000\001\255\255\255\255\242\000\128\016\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\002\b\002\128@\005\000\000\000\000\000\128(\004\000R\029\1760)\200\002\000@\000\000\000\000\000\001\255\255\255\255\242\000\160\016\001_\255\255\255\255!\219\001\000\156\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\b\000\002B\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\t\b\002\128@\005\000\000\000\000\000\000\000\000\000R\000\160\016\001@\000\000\000\000 \n\001\000\020\000\000\000\000\007\255\255\255\255\223\255\255\255\255\000\000\000\000\000\000\000\000\000\002\b\160\016\001H\"\128@\005\000\000\000\000\000\000\000\000\000\000\000 \000\001H\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000  \n\001\000\020\000\000\000\000\007\255\255\255\255\200v\192@'\000\000\000\000\001\255\255\255\255\242\b\160\016\001@\000\000\000\000 \140\129\161\000\1302\006\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\130:\006\132B\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \140\129\161\016\128(\004\000P\000\000\000\000\000\000\000 \000\000\000\001\000\001\255\255\255\255\247\255\255\255\255\192\000\000\000\000\000\000\002\004@\128 \004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000\000\025\002\130\192\005\000\000\000\000\000\000\000\000\000\002\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D@\003\000\000\000\000\000\000\000\000\000\000\000\017\016\000\192\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\209\000\000\192\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\134v\014\140f@\160\176\000@\000\000\000\000!\157\129\161\017\144(,\000\023\255\255\255\255\217\002\130\192\005\000\000\000\000\000\007D\b\nf@\160\176\000@\000\000\000\000\001\209\000\000\145\144(,\000\023\255\255\255\255\217\002\130\192\005\000@\000\000\000\000\000\000\000\000\004\000\000\t\025\002\130\192\001\000\000\000\000\000\000\000 \000\016\000\000\000\000\000\000\000\000\128 \bb\000\004\000\000\000\000\000\000\000\000 \b\002\000@\000\001\145\000\000\001\144(,\000\016\000\000\000\000\000\000\000\000\000\127\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \012\129\161\017\144(,\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\164\244\249 \000\000\000\000\000")
    and start = 1
    and action =
      ((16,
         "\005\170\003\216\004\146\000\000\000\000\000\000\003\228\005\020\000\000\000\000\000\000\003\224\005\020\006@\000\000\000\000\000\000\005\020\000\000\000\000\000\000\004\020\000\000\000\000\004<\000\000\000\000\004&\000\000\000\000\000\000\000\000\004\146\000\000\000\000\000\000\000\000\004\026\000\000\004n\004h\000\000\000\003\000\003\000\000\004\240\004n\000\000\000\000\004\156\000\000\004v\0050\004v\000\000\000\000\000\000\000\000\000\000\005\168\000\000\007@\005\020\004\156\000\000\000\000\007\152\005\168\000\000\000\000\004\142\005p\000\000\000\000\004\192\000\000\004\146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\146\004\174\004\146\000\000\000\000\004\222\007\180\007\012\000\000\005\004\000\000\007\180\007\180\000\000\006P\000\000\000\000\000\000\000F\000F\000\000\0046\005\020\000\144\005\020\000\000\004\240\000\000\004\194\007\190\000\000\007\254\005\230\006\156\000\000\000\218\007\254\000\218\006.\004\252\000\000\000\000\004\244\005|\006\170\000\000\000\000\000\000\004\170\007\254\000\000\004J\007\254\000\000\007\254\000\000\001$\001l\000\000\000\000\007\206\007\206\000\000\000\000\005\238\006\156\000\000\000\000\000\000\004\186\007\254\000\000\001$\006T\000\000\001$\007\206\000\000\007b\007b\000\000\000\000\004\252\006\160\007\\\000\000\000\000\000\000\000\000\000\000\006\194\007\254\000\000\005\024\005 \001\180\001\180\000\000\004&\005\020\005J\000\000\003\246\000\000\000\000\006\234\000\000\000\000\007l\000\000\000\000\000\000\000\000\000\000\005p\000\000\000\000\005p\000\000\000\000\001\254\005p\000\000\005X\000\000\005Z\000\000\005\226\006\234\000\000\006x\006\234\002H\007\n\000\000\005\232\007\n\000\000\007\232\007\n\002t\007\n\005l\000\000\005F\007\n\000\000\004\144\000\000\005L\b\006\007<\007\n\001$\002\190\002\190\000\000\000\000\000\000\000\000\003\b\000\000\004h\000\000\000\000\000\000\000\000\003R\003R\000\000\000\000\000\000\000\000\000\000\004\250\007\n\000\000\002\190\000\000\000\000\000\000\005\152\000\000\003R\000\000\000\000\005\002\000\000\005\138\b\006\007L\006\234\000\000\000\000\003\156\000\000\000\000\000\000\007t\006\234\000\000\000\000\000\000\000\000\000\000\004d\000\000\000\000\000\000\000\000\005\170\000\000"),
        (16,
nr\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\002\n\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\003\250\000\149\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\002\170\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\n\000\229\000\229\000\229\000\229\000\229\0002\000\229\000\030\000\229\000\229\000\229\000\229\000\229\000\229\001!\000\229\000\229\000\229\000Z\000\229\001\025\001\213\001\213\002\246\001\213\000r\001\213\002\250\001\213\000v\001\025\001\213\000\154\000z\001\213\001\213\001\213\001\213\000f\001\213\002\230\001\025\001\213\001\213\001\213\001\213\001\213\000\237\001\178\001\213\000~\000\237\001\213\001)\001)\001)\000\162\001)\003\230\001)\000\237\001)\003\234\000\166\001)\004\147\003\238\001)\001)\001)\001)\002*\001)\001\149\000\014\001)\001)\001)\001)\001)\004\151\000\210\001)\001)\000\018\001)\001\002\001)\001\025\001\221\001\221\003r\001\221\001\157\001\221\000\022\001\221\000\202\001\025\001\221\001!\001\173\001\221\001\221\001\221\001\221\001\030\001\221\003~\001\025\001\221\001\221\001\221\001\221\001\221\001.\001\157\001\221\000~\002\030\001\221\001\025\001\229\001\229\002r\001\229\001r\001\229\001\198\001\229\001\206\000y\001\229\001\165\001\250\001\229\001\229\001\229\001\229\000\"\001\229\000y\001\130\001\229\001\229\001\229\001\229\001\229\003\030\000&\001\229\000~\000y\001\229\001\205\001\205\004\022\001\205\002\006\001\205\000*\001\205\002\166\002\210\001\205\003^\002\214\001\205\001\205\001\205\001\205\000\197\001\205\002\238\001\025\001\205\001\205\001\205\001\205\001\205\003J\003R\001\205\000~\003&\001\205\001\r\001\r\003*\001\r\003\150\001\r\000\245\001\r\000\197\003\178\001\r\003\158\001q\001\r\001\r\001\r\001\r\002\n\001\r\003.\0032\001\r\001\r\001\r\001\r\001\r\0042\000\"\001\r\000\006\000\150\001\r\000\198\001\030\000\226\001q\000\230\000&\001q\000\234\004N\000\000\000\165\000\238\001*\0012\000\000\001:\000\242\000\000\001>\001B\001F\001J\001N\000\000\001\245\001R\001\245\000\000\001V\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\001\245\000\000\002^\000\000\001\245\001\245\001\245\001\245\001\245\000\000\000\000\000\000\0019\001\245\001\222\0019\001\245\001\245\001\245\001\245\001\245\001\245\000\025\001i\000\000\001i\000\000\000\025\000\025\000\137\000\000\000\025\000\025\000\000\000\025\000\025\000:\000\000\001\189\001\150\000>\000\029\000\000\000\025\000B\000\000\000\029\000\029\000\141\001\154\000\029\000\029\000\137\000\029\000\029\000\025\000\025\000\025\000\000\001\129\001\158\000F\000\029\000\000\000\209\003f\000\000\000\000\000\209\001\129\001\129\000\141\000\209\001\129\000\029\000\029\000\029\000\"\000\000\001q\001\129\001\129\000\000\001\129\000\"\001q\000\000\000&\001\129\001q\001q\002\170\001\129\001q\000&\000\000\001\157\000\000\001\226\000\000\001q\001q\001\157\001q\000\000\002\014\001\157\001\157\001q\000\000\001\157\000\000\001q\000\000\000\000\003\002\002\174\001\157\001\157\003\006\001\157\000\000\000\000\000\000\000\000\001\157\002\178\000\000\003\n\002\198\000\000\003\002\000\"\000u\003\030\003\006\003\"\003V\000\000\000\000\000\000\000\000\000&\000u\003\n\000\000\000\000\000\000\000\000\003Z\003r\003^\003\"\003v\000u\000%\000\000\001z\000\000\000\229\000\000\000\000\000\209\003\186\000\229\003z\000\209\003~\000\229\000\229\000\209\004V\000\229\002\174\000\209\000\000\000\157\000\000\000\209\000\250\000\229\003\014\002\150\002\178\000\000\000\197\000\157\000\157\000\000\000\229\000\157\003\018\000\000\000\229\002\182\000\197\000\197\000\157\000\157\000\197\000\157\000\000\003\022\001\025\000\000\000\157\000\197\000\197\000:\000\197\000\000\000\000\000>\001\025\000\197\000\000\000B\000q\004v\000\000\000\000\000\000\0011\000\000\001\025\000\000\000\000\000q\001v\000\000\000\157\000\181\0011\000~\0011\000\000\002N\001\213\000q\000!\000\157\001~\000\157\0011\000\000\000\000\000\181\000\000\000\209\003\134\001\129\000\157\000\209\000\000\000\"\001\210\000\209\0011\002\174\000\000\000\000\000\000\000\000\000\157\000&\000\157\000\173\000\000\002\178\000\000\000\000\000\000\000\000\001\129\000\000\001\218\001\129\000\000\000\000\001\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\000\000\000\173"))
    and lhs =
      (8,
        "\000887776655444444444444444332111110///..--,,++***)('&%$$##\"\"!!  \031\031\031\030\029\029\028\027\027\026\026\025\025\024\024\023\023\023\023\022\022\021\020\020\020\019\019\018\018\017\017\016\016\016\016\015\015\015\014\014\r\r\012\012\011\011\n\n\t\t\b\b\007\007\006\006\005\005\004\004\003\003\002\002\002\001\001")
    and goto =
      ((16,
         "\000\021\000\000\000\000\000\000\000\000\000\000\0007\000 \000\000\000\000\000\000\000\003\000\178\000D\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\000\001\016\000\000\000\000\000\000\000\000\000,\000\000\000v\000j\000\000\000X\000^\000\000\000\150\000\224\000\000\000\000\000\222\000\000\001\018\001,\001Z\000\000\000\000\000\000\000\000\000\000\001\208\000\000\001J\000\236\000\000\000\000\000\000\000-\001\218\000\000\000\000\001V\001l\000\000\000\000\000\000\000\000\001\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R\001r\000r\000\000\000\000\000\000\0008\000\000\000\000\000\000\000\000\001Z\001\190\000\000\001\172\000\000\000\000\000\000\001^\001b\000\000\001\138\000\172\000\000\001F\000\000\000\000\000\000\000\000\001\184\000\000\001\\\000\000\001 \000\000\001\170\000\020\001\172\000\000\000\000\000\000\000\000\000\000\001\202\002\b\000\000\000\000\000\000\000\000\002\018\000\000\000\000\000\186\000\000\000\140\000\000\000\002\001\184\000\000\000\000\001\196\001\200\000\000\000\000\001\250\002@\000\000\000\000\000\000\000\000\000\230\000\000\000J\000\000\000\000\000\236\001\240\000\000\001\242\001\244\000\000\000\000\000\000\002*\002R\000\000\000\000\000\000\000\000\000\000\000\000\0026\000\000\000\000\000\000\002\002\002\004\000\000\002 \001T\000\000\000\000\001\254\000\000\000\000\000\170\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\001\020\000\000\000\000\000\000\000\190\000\000\000\000\000\000\000\000\000\000\000\000\001\002\000\000\000\000\0010\002&\000\003\000\000\000\000\001<\000\000\000\000\001j\002(\000:\000\000\000\000\000\000\001\152\000\000\002\002\000\000\000\000\002.\000\000\001\160\000\248\002\024\002\026\000\000\000\000\000\000\000\000\002P\000\000\0016\000\000\000\000\000\000\000\000\002 \002$\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\002&\000\000\000\000\000\000\000\000\000\000\002(\000\000\000\000\002\022\000\000\000\000\002>\000\000\001\206\000\000\000\000\002`\000\000\000\000\000\000\000\000\001\252\000\000\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\198\000\000"),
        (16,
          "\000\225\000\227\000\007\000\028\000!\000D\000%\000\027\000#\000\020\000W\001\012\000|\000\206\000\231\000\233\000$\000F\000\012\000\014\000\234\000~\000\236\000\128\000\129\000\025\000\207\000\135\000\138\000\141\000\225\000\227\000\020\000\024\000\\\000\212\000\240\001\003\001(\001\004\000\146\000\229\001)\000X\000\231\000\233\000[\000\147\000(\001\005\000\234\000\155\000\236\000\151\000\246\000\247\000b\000\156\000c\000X\000\225\000\227\000Z\0001\000\159\000\020\000\240\001\003\000\020\001\004\001$\001\007\000z\000\021\000\231\000\233\000\160\000e\000+\001\005\000\234\000\180\000\236\000\147\000\246\000\247\000\217\000\219\000n\000\141\000.\000\012\000\014\000-\000q\000z\000\240\001\003\000\022\001\004\001\029\001\016\000/\000\012\000\014\000\209\001\017\000\140\001\019\001\005\000\019\000\138\000\141\000\142\000\246\000\247\0000\000|\000\207\000W\000\012\000\014\000\249\001 \000\143\001!\000\158\000@\000\128\000\129\000\217\000\219\000\135\000\138\000\141\001\"\000\151\0004\000\007\000\028\001\024\001\025\000\"\001*\0008\001\016\000z\000\143\000\206\000\020\001\017\001)\001\019\000\217\000\219\000\020\000\155\000\146\000\151\000\225\000\227\000\207\000\156\000\241\000\163\000n\000\249\001\028\001\016\000\159\000\210\000p\000n\001\017\000\233\001\019\000z\0006\000\187\000\234\0007\000\236\000\225\000\227\001\024\001\025\000\253\000\165\000\169\000\249\001\027\000\177\000\138\000\141\000\254\000\240\001\011\000\233\000\162\000B\000J\000b\000\234\000c\000\236\000\225\000\227\001\024\001\025\000\225\000\227\000I\000Y\000\246\000\247\001#\000i\000\151\000\240\001\n\000\233\000l\000e\000k\000\233\000\234\000\180\000\236\000\143\000\234\000s\000\236\000\217\000\219\000>\000C\000\246\000\247\000G\000>\000C\000\240\001\002\000E\000v\000\240\000\245\001\016\000\161\000}\000\134\000b\001\017\000c\001\019\000\217\000\219\000\007\000\028\000\246\000\247\000N\000\133\000\246\000\247\000d\000\145\000z\000\249\001\023\001\016\000\150\000e\000\149\000\154\001\017\000\180\001\019\000\137\000\129\000\238\000\219\000\135\000\138\000\141\000z\001\024\001\025\001\021\000\219\000\153\000\249\001\031\000\164\000\168\000\167\000\179\000\169\000\176\000\175\000\177\000\138\000\141\000\185\000\184\000\189\000\192\000\199\000\151\001\024\001\025\001\014\001\b\000\235\000\244\000\243\000\249\000\248\001\001\000\143\001\000\001\t\001\015\001\018\000\249\001\026\000\151\001'\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143"))
    and semantic_action =
      [|((fun _menhir_env ->
            let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
            let { MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = action;
                  MenhirLib.EngineTypes.startp = _startpos_action_;
                  MenhirLib.EngineTypes.endp = _endpos_action_;
                  MenhirLib.EngineTypes.next = _menhir_stack }
              = _menhir_stack in
            let action : Syntax.raw_action = Obj.magic action in
            let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
            let _startpos = _startpos_action_ in
            let _endpos = _endpos_action_ in
            let _v : Syntax.extended_action = XATraditional action in
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = (Obj.repr _v);
              MenhirLib.EngineTypes.startp = _startpos;
              MenhirLib.EngineTypes.endp = _endpos;
              MenhirLib.EngineTypes.next = _menhir_stack
            }));((fun _menhir_env ->
                    let _menhir_stack =
                      _menhir_env.MenhirLib.EngineTypes.stack in
                    let { MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = action;
                          MenhirLib.EngineTypes.startp = _startpos_action_;
                          MenhirLib.EngineTypes.endp = _endpos_action_;
                          MenhirLib.EngineTypes.next = _menhir_stack }
                      = _menhir_stack in
                    let action : Stretch.ocamltype = Obj.magic action in
                    let _endpos__0_ =
                      _menhir_stack.MenhirLib.EngineTypes.endp in
                    let _startpos = _startpos_action_ in
                    let _endpos = _endpos_action_ in
                    let _v : Syntax.extended_action =
                      let _endpos = _endpos_action_ in
                      let _startpos = _startpos_action_ in
                      let _loc = (_startpos, _endpos) in
                      match ParserAux.validate_pointfree_action action with
                      | os -> XAPointFree (unparenthesize os)
                      | exception Lexpointfree.InvalidPointFreeAction ->
                          Error.error [Positions.import _loc]
                            "A point-free semantic action must consist of a single OCaml identifier." in
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = (Obj.repr _v);
                      MenhirLib.EngineTypes.startp = _startpos;
                      MenhirLib.EngineTypes.endp = _endpos;
                      MenhirLib.EngineTypes.next = _menhir_stack
                    }));((fun _menhir_env ->
                            let _menhir_stack =
                              _menhir_env.MenhirLib.EngineTypes.stack in
                            let { MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = action;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_action_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos_action_;
                                  MenhirLib.EngineTypes.next = _menhir_stack
                                  }
                              = _menhir_stack in
                            let action : Syntax.extended_action =
                              Obj.magic action in
                            let _endpos__0_ =
                              _menhir_stack.MenhirLib.EngineTypes.endp in
                            let _startpos = _startpos_action_ in
                            let _endpos = _endpos_action_ in
                            let _v : Syntax.raw_seq_expression =
                              EAction (action, None) in
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = (Obj.repr _v);
                              MenhirLib.EngineTypes.startp = _startpos;
                              MenhirLib.EngineTypes.endp = _endpos;
                              MenhirLib.EngineTypes.next = _menhir_stack
                            }));((fun _menhir_env ->
                                    let _menhir_stack =
                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                    let { MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = action;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_action_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_action_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv =
                                                prec;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos_prec_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos_prec_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack
                                              }
                                          }
                                      = _menhir_stack in
                                    let action : Syntax.extended_action =
                                      Obj.magic action in
                                    let prec : string Syntax.located =
                                      Obj.magic prec in
                                    let _endpos__0_ =
                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                    let _startpos = _startpos_prec_ in
                                    let _endpos = _endpos_action_ in
                                    let _v : Syntax.raw_seq_expression =
                                      EAction (action, (Some prec)) in
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv =
                                        (Obj.repr _v);
                                      MenhirLib.EngineTypes.startp =
                                        _startpos;
                                      MenhirLib.EngineTypes.endp = _endpos;
                                      MenhirLib.EngineTypes.next =
                                        _menhir_stack
                                    }));((fun _menhir_env ->
                                            let _menhir_stack =
                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                            let {
                                                  MenhirLib.EngineTypes.state
                                                    = _;
                                                  MenhirLib.EngineTypes.semv
                                                    = prec;
                                                  MenhirLib.EngineTypes.startp
                                                    = _startpos_prec_;
                                                  MenhirLib.EngineTypes.endp
                                                    = _endpos_prec_;
                                                  MenhirLib.EngineTypes.next
                                                    =
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _menhir_s;
                                                      MenhirLib.EngineTypes.semv
                                                        = action;
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos_action_;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos_action_;
                                                      MenhirLib.EngineTypes.next
                                                        = _menhir_stack
                                                      }
                                                  }
                                              = _menhir_stack in
                                            let prec : string Syntax.located
                                              = Obj.magic prec in
                                            let action :
                                              Syntax.extended_action =
                                              Obj.magic action in
                                            let _endpos__0_ =
                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                            let _startpos = _startpos_action_ in
                                            let _endpos = _endpos_prec_ in
                                            let _v :
                                              Syntax.raw_seq_expression =
                                              EAction (action, (Some prec)) in
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv =
                                                (Obj.repr _v);
                                              MenhirLib.EngineTypes.startp =
                                                _startpos;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack
                                            }));((fun _menhir_env ->
                                                    let _menhir_stack =
                                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                                    let {
                                                          MenhirLib.EngineTypes.state
                                                            = _;
                                                          MenhirLib.EngineTypes.semv
                                                            = params;
                                                          MenhirLib.EngineTypes.startp
                                                            =
                                                            _startpos_params_;
                                                          MenhirLib.EngineTypes.endp
                                                            = _endpos_params_;
                                                          MenhirLib.EngineTypes.next
                                                            =
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                = symbol;
                                                              MenhirLib.EngineTypes.startp
                                                                =
                                                                _startpos_symbol_;
                                                              MenhirLib.EngineTypes.endp
                                                                =
                                                                _endpos_symbol_;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                              }
                                                          }
                                                      = _menhir_stack in
                                                    let params :
                                                      Syntax.parameters =
                                                      Obj.magic params in
                                                    let symbol :
                                                      string Syntax.located =
                                                      Obj.magic symbol in
                                                    let _endpos__0_ =
                                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                                    let _startpos =
                                                      _startpos_symbol_ in
                                                    let _endpos =
                                                      _endpos_params_ in
                                                    let _v : Syntax.parameter
                                                      =
                                                      let p =
                                                        let actuals = params in
                                                        Parameters.app symbol
                                                          actuals in
                                                      p in
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _menhir_s;
                                                      MenhirLib.EngineTypes.semv
                                                        = (Obj.repr _v);
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos;
                                                      MenhirLib.EngineTypes.next
                                                        = _menhir_stack
                                                    }));((fun _menhir_env ->
                                                            let _menhir_stack
                                                              =
                                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                                            let {
                                                                  MenhirLib.EngineTypes.state
                                                                    = _;
                                                                  MenhirLib.EngineTypes.semv
                                                                    = m;
                                                                  MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_m_;
                                                                  MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_m_;
                                                                  MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = p;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_p_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_p_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                  }
                                                              = _menhir_stack in
                                                            let m :
                                                              string
                                                                Syntax.located
                                                              = Obj.magic m in
                                                            let p :
                                                              Syntax.parameter
                                                              = Obj.magic p in
                                                            let _endpos__0_ =
                                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                                            let _startpos =
                                                              _startpos_p_ in
                                                            let _endpos =
                                                              _endpos_m_ in
                                                            let _v :
                                                              Syntax.parameter
                                                              =
                                                              let p =
                                                                ParameterApp
                                                                  (m, [p]) in
                                                              p in
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                =
                                                                (Obj.repr _v);
                                                              MenhirLib.EngineTypes.startp
                                                                = _startpos;
                                                              MenhirLib.EngineTypes.endp
                                                                = _endpos;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                            }));((fun
                                                                    _menhir_env
                                                                    ->
                                                                    let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                    let _menhir_s
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.current in
                                                                    let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                    let _startpos
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                    let _endpos
                                                                    =
                                                                    _startpos in
                                                                    let _v :
                                                                    bool =
                                                                    false in
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__1_ in
          let _v : bool = true in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = h;
                        MenhirLib.EngineTypes.startp = _startpos_h_;
                        MenhirLib.EngineTypes.endp = _endpos_h_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let h : Stretch.t = Obj.magic h in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_h_ in
                  let _endpos = _endpos_h_ in
                  let _v : Syntax.declaration Syntax.located list =
                    let _endpos = _endpos_h_ in
                    let _startpos = _startpos_h_ in
                    let _loc = (_startpos, _endpos) in
                    [with_loc _loc (DCode h)] in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = xs;
                                MenhirLib.EngineTypes.startp = _startpos_xs_;
                                MenhirLib.EngineTypes.endp = _endpos_xs_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _;
                                    MenhirLib.EngineTypes.semv = ty;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_ty_;
                                    MenhirLib.EngineTypes.endp = _endpos_ty_;
                                    MenhirLib.EngineTypes.next =
                                      {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    }
                                }
                            = _menhir_stack in
                          let xs :
                            (string * Syntax.alias * Syntax.attributes)
                              Syntax.located list
                            = Obj.magic xs in
                          let ty : Stretch.ocamltype option = Obj.magic ty in
                          let _1 : unit = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos_xs_ in
                          let _v : Syntax.declaration Syntax.located list =
                            let ts = xs in
                            List.map
                              (Positions.map
                                 (fun (terminal, alias, attrs) ->
                                    DToken (ty, terminal, alias, attrs))) ts in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = xs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_xs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_xs_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = t;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_t_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_t_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    = _menhir_stack in
                                  let xs : string Syntax.located list =
                                    Obj.magic xs in
                                  let t : Stretch.ocamltype option =
                                    Obj.magic t in
                                  let _1 : unit = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos_xs_ in
                                  let _v :
                                    Syntax.declaration Syntax.located list =
                                    let nts = xs in
                                    match t with
                                    | None ->
                                        List.map
                                          (Positions.map
                                             (fun nonterminal ->
                                                DStart nonterminal)) nts
                                    | Some t ->
                                        Misc.mapd
                                          (fun ntloc ->
                                             Positions.mapd
                                               (fun nt ->
                                                  ((DStart nt),
                                                    (DType
                                                       (t,
                                                         (ParameterVar ntloc)))))
                                               ntloc) nts in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _;
                                                MenhirLib.EngineTypes.semv =
                                                  xs;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_xs_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_xs_;
                                                MenhirLib.EngineTypes.next =
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _;
                                                    MenhirLib.EngineTypes.semv
                                                      = t;
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos_t_;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos_t_;
                                                    MenhirLib.EngineTypes.next
                                                      =
                                                      {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = _1;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__1_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__1_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    }
                                                }
                                            = _menhir_stack in
                                          let xs : Syntax.parameter list =
                                            Obj.magic xs in
                                          let t : Stretch.ocamltype =
                                            Obj.magic t in
                                          let _1 : unit = Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos_xs_ in
                                          let _v :
                                            Syntax.declaration Syntax.located
                                              list
                                            =
                                            let ss = xs in
                                            List.map
                                              (Positions.map
                                                 (fun nt -> DType (t, nt)))
                                              (List.map Parameters.with_pos
                                                 ss) in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = k;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos_k_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos_k_;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs :
                                                    string Syntax.located
                                                      list
                                                    = Obj.magic xs in
                                                  let k :
                                                    Syntax.token_associativity
                                                    = Obj.magic k in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_k_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v :
                                                    Syntax.declaration
                                                      Syntax.located list
                                                    =
                                                    let ss = xs in
                                                    let _loc_k_ =
                                                      (_startpos_k_,
                                                        _endpos_k_) in
                                                    let prec =
                                                      ParserAux.new_precedence_level
                                                        _loc_k_ in
                                                    List.map
                                                      (Positions.map
                                                         (fun symbol ->
                                                            DTokenProperties
                                                              (symbol, k,
                                                                prec))) ss in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = t;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_t_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_t_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                }
                                                            = _menhir_stack in
                                                          let t :
                                                            Stretch.ocamltype
                                                            = Obj.magic t in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos_t_ in
                                                          let _v :
                                                            Syntax.declaration
                                                              Syntax.located
                                                              list
                                                            =
                                                            let _endpos =
                                                              _endpos_t_ in
                                                            let _startpos =
                                                              _startpos__1_ in
                                                            let _loc =
                                                              (_startpos,
                                                                _endpos) in
                                                            [with_loc _loc
                                                               (DParameter t)] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = attr;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_attr_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_attr_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let attr :
                                                                    Syntax.attribute
                                                                    =
                                                                    Obj.magic
                                                                    attr in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_attr_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_attr_ in
                                                                  let _v :
                                                                    Syntax.declaration
                                                                    Syntax.located
                                                                    list =
                                                                    let _endpos
                                                                    =
                                                                    _endpos_attr_ in
                                                                    let _startpos
                                                                    =
                                                                    _startpos_attr_ in
                                                                    let _loc
                                                                    =
                                                                    (_startpos,
                                                                    _endpos) in
                                                                    [
                                                                    with_loc
                                                                    _loc
                                                                    (DGrammarAttribute
                                                                    attr)] in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = attrs;
                MenhirLib.EngineTypes.startp = _startpos_attrs_;
                MenhirLib.EngineTypes.endp = _endpos_attrs_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = xs;
                    MenhirLib.EngineTypes.startp = _startpos_xs_;
                    MenhirLib.EngineTypes.endp = _endpos_xs_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    }
                }
            = _menhir_stack in
          let attrs : Syntax.attributes = Obj.magic attrs in
          let xs : Syntax.parameter list = Obj.magic xs in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos_attrs_ in
          let _v : Syntax.declaration Syntax.located list =
            let actuals = xs in
            let _endpos = _endpos_attrs_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            [with_loc _loc (DSymbolAttributes (actuals, attrs))] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let xs : Syntax.parameter list = Obj.magic xs in
                  let _1 : unit = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos_xs_ in
                  let _v : Syntax.declaration Syntax.located list =
                    let ss = xs in
                    let prec = ParserAux.new_on_error_reduce_level () in
                    List.map
                      (Positions.map (fun nt -> DOnErrorReduce (nt, prec)))
                      (List.map Parameters.with_pos ss) in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = _1;
                                MenhirLib.EngineTypes.startp = _startpos__1_;
                                MenhirLib.EngineTypes.endp = _endpos__1_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let _1 : unit = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__1_ in
                          let _v : Syntax.declaration Syntax.located list =
                            [] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let _1 : unit = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_ in
                                  let _v :
                                    Syntax.declaration Syntax.located list =
                                    let _1 = () in
                                    let _endpos = _endpos__1_ in
                                    let _startpos = _startpos__1_ in
                                    let _loc = (_startpos, _endpos) in
                                    Error.error [Positions.import _loc]
                                      "syntax error inside a declaration.\nDid you perhaps forget the %%%% that separates declarations and rules?" in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : unit = Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v :
                                            Syntax.declaration Syntax.located
                                              list
                                            =
                                            let _1 = () in
                                            let _endpos = _endpos__1_ in
                                            let _startpos = _startpos__1_ in
                                            let _loc = (_startpos, _endpos) in
                                            Error.error
                                              [Positions.import _loc]
                                              "syntax error inside a declaration.\nDid you perhaps forget the %%%% that separates declarations and rules?" in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = _1;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__1_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__1_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let _1 : unit =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__1_ in
                                                  let _v :
                                                    Syntax.declaration
                                                      Syntax.located list
                                                    =
                                                    let _1 = () in
                                                    let _endpos = _endpos__1_ in
                                                    let _startpos =
                                                      _startpos__1_ in
                                                    let _loc =
                                                      (_startpos, _endpos) in
                                                    Error.error
                                                      [Positions.import _loc]
                                                      "syntax error inside a declaration.\nDid you perhaps forget the %%%% that separates declarations and rules?" in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__1_ in
                                                          let _v :
                                                            Syntax.declaration
                                                              Syntax.located
                                                              list
                                                            =
                                                            let _1 = () in
                                                            let _endpos =
                                                              _endpos__1_ in
                                                            let _startpos =
                                                              _startpos__1_ in
                                                            let _loc =
                                                              (_startpos,
                                                                _endpos) in
                                                            Error.error
                                                              [Positions.import
                                                                 _loc]
                                                              "syntax error inside a declaration.\nDid you perhaps forget the %%%% that separates declarations and rules?" in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let _1 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                  let _v :
                                                                    Syntax.declaration
                                                                    Syntax.located
                                                                    list =
                                                                    let _1 =
                                                                    () in
                                                                    let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                    let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                    let _loc
                                                                    =
                                                                    (_startpos,
                                                                    _endpos) in
                                                                    Error.error
                                                                    [
                                                                    Positions.import
                                                                    _loc]
                                                                    "syntax error inside a declaration.\nDid you perhaps forget the %%%% that separates declarations and rules?" in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__1_ in
          let _v : bool = false in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let _1 : unit = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_ in
                  let _v : bool = true in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = e;
                                MenhirLib.EngineTypes.startp = _startpos_e_;
                                MenhirLib.EngineTypes.endp = _endpos_e_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let e : Syntax.choice_expression Syntax.located =
                            Obj.magic e in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_e_ in
                          let _endpos = _endpos_e_ in
                          let _v : Syntax.expression = e in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let _menhir_s =
                                    _menhir_env.MenhirLib.EngineTypes.current in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _endpos = _startpos in
                                  let _v : (bool * bool) = (false, false) in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : unit = Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v : (bool * bool) =
                                            (true, false) in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = _1;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__1_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__1_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let _1 : unit =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__1_ in
                                                  let _v : (bool * bool) =
                                                    (false, true) in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _2;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__2_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__2_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                }
                                                            = _menhir_stack in
                                                          let _2 : unit =
                                                            Obj.magic _2 in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__2_ in
                                                          let _v :
                                                            (bool * bool) =
                                                            (true, true) in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                  let _2 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _2 in
                                                                  let _1 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__2_ in
                                                                  let _v :
                                                                    (bool *
                                                                    bool) =
                                                                    (true,
                                                                    true) in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = rs;
                    MenhirLib.EngineTypes.startp = _startpos_rs_;
                    MenhirLib.EngineTypes.endp = _endpos_rs_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = xss;
                            MenhirLib.EngineTypes.startp = _startpos_xss_;
                            MenhirLib.EngineTypes.endp = _endpos_xss_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    }
                }
            = _menhir_stack in
          let t : Syntax.postlude option = Obj.magic t in
          let rs : Syntax.parameterized_rule list = Obj.magic rs in
          let _2 : Stretch.t Lazy.t = Obj.magic _2 in
          let xss : Syntax.declaration Syntax.located list list =
            Obj.magic xss in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_xss_ in
          let _endpos = _endpos_t_ in
          let _v : Syntax.partial_grammar =
            let ds = List.flatten xss in
            {
              pg_filename = "";
              pg_declarations = ds;
              pg_rules = rs;
              pg_postlude = t
            } in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = params;
                        MenhirLib.EngineTypes.startp = _startpos_params_;
                        MenhirLib.EngineTypes.endp = _endpos_params_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = symbol;
                            MenhirLib.EngineTypes.startp = _startpos_symbol_;
                            MenhirLib.EngineTypes.endp = _endpos_symbol_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let params : Syntax.parameters = Obj.magic params in
                  let symbol : string Syntax.located = Obj.magic symbol in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_symbol_ in
                  let _endpos = _endpos_params_ in
                  let _v : Syntax.parameter =
                    let p =
                      let actuals = params in Parameters.app symbol actuals in
                    p in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = m;
                                MenhirLib.EngineTypes.startp = _startpos_m_;
                                MenhirLib.EngineTypes.endp = _endpos_m_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = p;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_p_;
                                    MenhirLib.EngineTypes.endp = _endpos_p_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let m : string Syntax.located = Obj.magic m in
                          let p : Syntax.parameter = Obj.magic p in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_p_ in
                          let _endpos = _endpos_m_ in
                          let _v : Syntax.parameter =
                            let p = ParameterApp (m, [p]) in p in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = branches;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_branches_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_branches_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let branches :
                                    Syntax.parameterized_branch list
                                      Syntax.located
                                    = Obj.magic branches in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_branches_ in
                                  let _endpos = _endpos_branches_ in
                                  let _v : Syntax.parameter =
                                    ParameterAnonymous branches in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let _menhir_s =
                                            _menhir_env.MenhirLib.EngineTypes.current in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _endpos = _startpos in
                                          let _v : Syntax.attributes = [] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = x;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos_x_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos_x_;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs : Syntax.attributes
                                                    = Obj.magic xs in
                                                  let x : Syntax.attribute =
                                                    Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v : Syntax.attributes
                                                    = x :: xs in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let _menhir_s =
                                                            _menhir_env.MenhirLib.EngineTypes.current in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _endpos =
                                                            _startpos in
                                                          let _v : unit list
                                                            = [] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    unit list
                                                                    =
                                                                    Obj.magic
                                                                    xs in
                                                                  let x :
                                                                    unit =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    unit list
                                                                    = x :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _endpos = _startpos in
          let _v : Syntax.declaration Syntax.located list list = [] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x;
                            MenhirLib.EngineTypes.startp = _startpos_x_;
                            MenhirLib.EngineTypes.endp = _endpos_x_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let xs : Syntax.declaration Syntax.located list list =
                    Obj.magic xs in
                  let x : Syntax.declaration Syntax.located list =
                    Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_xs_ in
                  let _v : Syntax.declaration Syntax.located list list = x ::
                    xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let _menhir_s =
                            _menhir_env.MenhirLib.EngineTypes.current in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _endpos = _startpos in
                          let _v : ParserAux.early_producers = [] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = xs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_xs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_xs_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = x;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_x_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_x_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let xs : ParserAux.early_producers =
                                    Obj.magic xs in
                                  let x : ParserAux.early_producer =
                                    Obj.magic x in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_x_ in
                                  let _endpos = _endpos_xs_ in
                                  let _v : ParserAux.early_producers = x ::
                                    xs in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let _menhir_s =
                                            _menhir_env.MenhirLib.EngineTypes.current in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _endpos = _startpos in
                                          let _v :
                                            Syntax.parameterized_rule list =
                                            [] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = _1;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__1_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__1_;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs :
                                                    Syntax.parameterized_rule
                                                      list
                                                    = Obj.magic xs in
                                                  let _1 :
                                                    Syntax.parameterized_rule
                                                    = Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v :
                                                    Syntax.parameterized_rule
                                                      list
                                                    = let x = _1 in x :: xs in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = xs;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_xs_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_xs_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                }
                                                            = _menhir_stack in
                                                          let xs :
                                                            Syntax.parameterized_rule
                                                              list
                                                            = Obj.magic xs in
                                                          let _1 :
                                                            Syntax.rule =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos_xs_ in
                                                          let _v :
                                                            Syntax.parameterized_rule
                                                              list
                                                            =
                                                            let x =
                                                              NewRuleSyntax.rule
                                                                _1 in
                                                            x :: xs in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = prods;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_prods_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_prods_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let prods :
                                                                    Syntax.parameterized_branch
                                                                    list list
                                                                    =
                                                                    Obj.magic
                                                                    prods in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_prods_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_prods_ in
                                                                  let _v :
                                                                    Syntax.parameterized_branch
                                                                    list
                                                                    Syntax.located
                                                                    =
                                                                    let x =
                                                                    List.flatten
                                                                    prods in
                                                                    let 
                                                                    (_endpos_x_,
                                                                    _startpos_x_)
                                                                    =
                                                                    (_endpos_prods_,
                                                                    _startpos_prods_) in
                                                                    let _endpos
                                                                    =
                                                                    _endpos_x_ in
                                                                    let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                    let _loc
                                                                    =
                                                                    (_startpos,
                                                                    _endpos) in
                                                                    with_loc
                                                                    _loc x in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let xs : Syntax.branch list = Obj.magic xs in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_xs_ in
          let _endpos = _endpos_xs_ in
          let _v : Syntax.choice_expression Syntax.located =
            let x =
              let branches = let xs = List.rev xs in xs in EChoice branches in
            let (_endpos_x_, _startpos_x_) = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            let _loc = (_startpos, _endpos) in with_loc _loc x in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = x;
                        MenhirLib.EngineTypes.startp = _startpos_x_;
                        MenhirLib.EngineTypes.endp = _endpos_x_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let x : string = Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_x_ in
                  let _v : string Syntax.located =
                    let _endpos = _endpos_x_ in
                    let _startpos = _startpos_x_ in
                    let _loc = (_startpos, _endpos) in with_loc _loc x in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let x : Syntax.raw_seq_expression = Obj.magic x in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_x_ in
                          let _endpos = _endpos_x_ in
                          let _v : Syntax.raw_seq_expression Syntax.located =
                            let _endpos = _endpos_x_ in
                            let _startpos = _startpos_x_ in
                            let _loc = (_startpos, _endpos) in
                            with_loc _loc x in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = x;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_x_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_x_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let x : Syntax.symbol_expression =
                                    Obj.magic x in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_x_ in
                                  let _endpos = _endpos_x_ in
                                  let _v :
                                    Syntax.symbol_expression Syntax.located =
                                    let _endpos = _endpos_x_ in
                                    let _startpos = _startpos_x_ in
                                    let _loc = (_startpos, _endpos) in
                                    with_loc _loc x in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let _menhir_s =
                                            _menhir_env.MenhirLib.EngineTypes.current in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _endpos = _startpos in
                                          let _v : Syntax.expression list =
                                            [] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _3;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__3_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__3_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = x;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos_x_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos_x_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let _3 : unit =
                                                    Obj.magic _3 in
                                                  let x :
                                                    Syntax.expression list =
                                                    Obj.magic x in
                                                  let _1 : unit =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__3_ in
                                                  let _v :
                                                    Syntax.expression list =
                                                    let x = x in x in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let _menhir_s =
                                                            _menhir_env.MenhirLib.EngineTypes.current in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _endpos =
                                                            _startpos in
                                                          let _v :
                                                            Syntax.parameters
                                                            = [] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _3;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__3_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__3_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let _3 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _3 in
                                                                  let x :
                                                                    Syntax.parameters
                                                                    =
                                                                    Obj.magic
                                                                    x in
                                                                  let _1 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__3_ in
                                                                  let _v :
                                                                    Syntax.parameters
                                                                    =
                                                                    let x = x in
                                                                    x in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _endpos = _startpos in
          let _v : Syntax.parameters = [] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = x;
                            MenhirLib.EngineTypes.startp = _startpos_x_;
                            MenhirLib.EngineTypes.endp = _endpos_x_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = _1;
                                MenhirLib.EngineTypes.startp = _startpos__1_;
                                MenhirLib.EngineTypes.endp = _endpos__1_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            }
                        }
                    = _menhir_stack in
                  let _3 : unit = Obj.magic _3 in
                  let x : Syntax.parameters = Obj.magic x in
                  let _1 : unit = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__3_ in
                  let _v : Syntax.parameters = let x = x in x in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let _menhir_s =
                            _menhir_env.MenhirLib.EngineTypes.current in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _endpos = _startpos in
                          let _v : string Syntax.located list = [] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = _3;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__3_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__3_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = x;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_x_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_x_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    = _menhir_stack in
                                  let _3 : unit = Obj.magic _3 in
                                  let x : string Syntax.located list =
                                    Obj.magic x in
                                  let _1 : unit = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__3_ in
                                  let _v : string Syntax.located list =
                                    let x = x in x in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let _menhir_s =
                                            _menhir_env.MenhirLib.EngineTypes.current in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _endpos = _startpos in
                                          let _v : Syntax.pattern list = [] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = x;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_x_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_x_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let x : Syntax.pattern list
                                                    = Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_x_ in
                                                  let _v :
                                                    Syntax.pattern list = x in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__1_ in
                                                          let _v : string =
                                                            "option" in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let _1 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                  let _v :
                                                                    string =
                                                                    "nonempty_list" in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__1_ in
          let _v : string = "list" in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = rule_rhs;
                        MenhirLib.EngineTypes.startp = _startpos_rule_rhs_;
                        MenhirLib.EngineTypes.endp = _endpos_rule_rhs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = rule_inline;
                            MenhirLib.EngineTypes.startp =
                              _startpos_rule_inline_;
                            MenhirLib.EngineTypes.endp = _endpos_rule_inline_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = params;
                                MenhirLib.EngineTypes.startp =
                                  _startpos_params_;
                                MenhirLib.EngineTypes.endp = _endpos_params_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _;
                                    MenhirLib.EngineTypes.semv =
                                      rule_attributes;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_rule_attributes_;
                                    MenhirLib.EngineTypes.endp =
                                      _endpos_rule_attributes_;
                                    MenhirLib.EngineTypes.next =
                                      { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = rule_lhs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_rule_lhs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_rule_lhs_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = _2;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__2_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__2_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  rule_public;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_rule_public_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_rule_public_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    = _menhir_stack in
                  let rule_rhs : Syntax.expression = Obj.magic rule_rhs in
                  let rule_inline : bool = Obj.magic rule_inline in
                  let params : string Syntax.located list = Obj.magic params in
                  let rule_attributes : Syntax.attributes =
                    Obj.magic rule_attributes in
                  let rule_lhs : string Positions.located =
                    Obj.magic rule_lhs in
                  let _2 : unit = Obj.magic _2 in
                  let rule_public : bool = Obj.magic rule_public in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_rule_public_ in
                  let _endpos = _endpos_rule_rhs_ in
                  let _v : Syntax.rule =
                    let rule_formals = params in
                    {
                      rule_public;
                      rule_inline;
                      rule_lhs;
                      rule_attributes;
                      rule_formals;
                      rule_rhs
                    } in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let x : Syntax.attribute = Obj.magic x in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_x_ in
                          let _endpos = _endpos_x_ in
                          let _v : Syntax.attributes = [x] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = xs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_xs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_xs_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = x;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_x_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_x_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let xs : Syntax.attributes = Obj.magic xs in
                                  let x : Syntax.attribute = Obj.magic x in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_x_ in
                                  let _endpos = _endpos_xs_ in
                                  let _v : Syntax.attributes = x :: xs in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _;
                                                MenhirLib.EngineTypes.semv =
                                                  _8;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__8_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__8_;
                                                MenhirLib.EngineTypes.next =
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _;
                                                    MenhirLib.EngineTypes.semv
                                                      = prods;
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos_prods_;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos_prods_;
                                                    MenhirLib.EngineTypes.next
                                                      =
                                                      {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _6;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__6_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__6_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _5;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__5_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__5_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = params;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_params_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_params_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    attributes;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_attributes_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_attributes_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = symbol;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_symbol_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_symbol_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = flags;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_flags_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_flags_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            = _menhir_stack in
                                          let _8 : unit list = Obj.magic _8 in
                                          let prods :
                                            Syntax.parameterized_branch list
                                              list
                                            = Obj.magic prods in
                                          let _6 : unit = Obj.magic _6 in
                                          let _5 : unit = Obj.magic _5 in
                                          let params :
                                            string Syntax.located list =
                                            Obj.magic params in
                                          let attributes : Syntax.attributes
                                            = Obj.magic attributes in
                                          let symbol : string Syntax.located
                                            = Obj.magic symbol in
                                          let flags : (bool * bool) =
                                            Obj.magic flags in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_flags_ in
                                          let _endpos = _endpos__8_ in
                                          let _v : Syntax.parameterized_rule
                                            =
                                            let branches = List.flatten prods in
                                            let params = params in
                                            let (public, inline) = flags in
                                            let rule =
                                              {
                                                pr_public_flag = public;
                                                pr_inline_flag = inline;
                                                pr_nt =
                                                  (Positions.value symbol);
                                                pr_positions =
                                                  [Positions.position symbol];
                                                pr_attributes = attributes;
                                                pr_parameters =
                                                  (List.map Positions.value
                                                     params);
                                                pr_branches = branches
                                              } in
                                            rule in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let _menhir_s =
                                                    _menhir_env.MenhirLib.EngineTypes.current in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _endpos = _startpos in
                                                  let _v : unit option = None in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let x : unit =
                                                            Obj.magic x in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_x_ in
                                                          let _endpos =
                                                            _endpos_x_ in
                                                          let _v :
                                                            unit option =
                                                            Some x in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let _menhir_s
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.current in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _endpos
                                                                    =
                                                                    _startpos in
                                                                  let _v :
                                                                    Stretch.ocamltype
                                                                    option =
                                                                    None in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let x : Stretch.ocamltype = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos_x_ in
          let _v : Stretch.ocamltype option = Some x in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _endpos = _startpos in
                  let _v : string Syntax.located option = None in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let x : string Positions.located = Obj.magic x in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_x_ in
                          let _endpos = _endpos_x_ in
                          let _v : string Syntax.located option = Some x in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let _menhir_s =
                                    _menhir_env.MenhirLib.EngineTypes.current in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _endpos = _startpos in
                                  let _v : unit = () in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : unit = Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v : unit = () in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = x;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_x_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_x_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let x :
                                                    string Positions.located
                                                    = Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_x_ in
                                                  let _v : Syntax.pattern =
                                                    SemPatVar x in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__1_ in
                                                          let _v :
                                                            Syntax.pattern =
                                                            SemPatWildcard in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let _1 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                  let _v :
                                                                    Syntax.pattern
                                                                    =
                                                                    let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                    let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                    let _loc
                                                                    =
                                                                    (_startpos,
                                                                    _endpos) in
                                                                    SemPatTilde
                                                                    (Positions.import
                                                                    _loc) in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = xs;
                    MenhirLib.EngineTypes.startp = _startpos_xs_;
                    MenhirLib.EngineTypes.endp = _endpos_xs_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    }
                }
            = _menhir_stack in
          let _3 : unit = Obj.magic _3 in
          let xs : Syntax.pattern list = Obj.magic xs in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__3_ in
          let _v : Syntax.pattern = let ps = xs in SemPatTuple ps in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let _1 : unit = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_ in
                  let _v : Syntax.postlude option = None in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = p;
                                MenhirLib.EngineTypes.startp = _startpos_p_;
                                MenhirLib.EngineTypes.endp = _endpos_p_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let p : Stretch.t Lazy.t = Obj.magic p in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_p_ in
                          let _endpos = _endpos_p_ in
                          let _v : Syntax.postlude option =
                            Some (Lazy.force p) in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = symbol;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_symbol_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_symbol_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = _1;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__1_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__1_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let symbol : string Syntax.located =
                                    Obj.magic symbol in
                                  let _1 : unit = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos_symbol_ in
                                  let _v : string Syntax.located = symbol in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : unit = Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v : Syntax.token_associativity
                                            = LeftAssoc in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = _1;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__1_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__1_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let _1 : unit =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__1_ in
                                                  let _v :
                                                    Syntax.token_associativity
                                                    = RightAssoc in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__1_ in
                                                          let _v :
                                                            Syntax.token_associativity
                                                            = NonAssoc in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _4;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__4_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__4_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = attrs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_attrs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_attrs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = p;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_p_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_p_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let _4 :
                                                                    unit list
                                                                    =
                                                                    Obj.magic
                                                                    _4 in
                                                                  let attrs :
                                                                    Syntax.attributes
                                                                    =
                                                                    Obj.magic
                                                                    attrs in
                                                                  let p :
                                                                    Syntax.parameter
                                                                    =
                                                                    Obj.magic
                                                                    p in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_p_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__4_ in
                                                                  let _v :
                                                                    ParserAux.early_producer
                                                                    =
                                                                    let id =
                                                                    None in
                                                                    let _startpos_id_
                                                                    =
                                                                    _endpos__0_ in
                                                                    let _endpos
                                                                    =
                                                                    _endpos__4_ in
                                                                    let _startpos
                                                                    =
                                                                    _startpos_id_ in
                                                                    let _loc
                                                                    =
                                                                    (_startpos,
                                                                    _endpos) in
                                                                    ((position
                                                                    (with_loc
                                                                    _loc ())),
                                                                    id, p,
                                                                    attrs) in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = attrs;
                    MenhirLib.EngineTypes.startp = _startpos_attrs_;
                    MenhirLib.EngineTypes.endp = _endpos_attrs_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = p;
                        MenhirLib.EngineTypes.startp = _startpos_p_;
                        MenhirLib.EngineTypes.endp = _endpos_p_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            }
                        }
                    }
                }
            = _menhir_stack in
          let _4 : unit list = Obj.magic _4 in
          let attrs : Syntax.attributes = Obj.magic attrs in
          let p : Syntax.parameter = Obj.magic p in
          let _2 : unit = Obj.magic _2 in
          let x : string Positions.located = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos__4_ in
          let _v : ParserAux.early_producer =
            let id = let x = x in Some x in
            let _startpos_id_ = _startpos_x_ in
            let _endpos = _endpos__4_ in
            let _startpos = _startpos_id_ in
            let _loc = (_startpos, _endpos) in
            ((position (with_loc _loc ())), id, p, attrs) in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = producers;
                        MenhirLib.EngineTypes.startp = _startpos_producers_;
                        MenhirLib.EngineTypes.endp = _endpos_producers_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let producers : ParserAux.early_producers =
                    Obj.magic producers in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_producers_ in
                  let _endpos = _endpos_producers_ in
                  let _v : ParserAux.early_production =
                    let oprec = None in
                    let _endpos_oprec_ = _endpos_producers_ in
                    let _endpos = _endpos_oprec_ in
                    let _startpos = _startpos_producers_ in
                    let _loc = (_startpos, _endpos) in
                    (producers, oprec, (ParserAux.new_production_level ()),
                      (Positions.import _loc)) in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = producers;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_producers_;
                                    MenhirLib.EngineTypes.endp =
                                      _endpos_producers_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let x : string Syntax.located = Obj.magic x in
                          let producers : ParserAux.early_producers =
                            Obj.magic producers in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_producers_ in
                          let _endpos = _endpos_x_ in
                          let _v : ParserAux.early_production =
                            let oprec = Some x in
                            let _endpos_oprec_ = _endpos_x_ in
                            let _endpos = _endpos_oprec_ in
                            let _startpos = _startpos_producers_ in
                            let _loc = (_startpos, _endpos) in
                            (producers, oprec,
                              (ParserAux.new_production_level ()),
                              (Positions.import _loc)) in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = action;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_action_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_action_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              productions;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_productions_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_productions_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let action : Syntax.raw_action =
                                    Obj.magic action in
                                  let productions :
                                    ParserAux.early_productions =
                                    Obj.magic productions in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_productions_ in
                                  let _endpos = _endpos_action_ in
                                  let _v : Syntax.parameterized_branch list =
                                    let oprec2 = None in
                                    ParserAux.check_production_group
                                      productions;
                                    List.map
                                      (fun (producers, oprec1, level, pos) ->
                                         let pr_producers =
                                           ParserAux.normalize_producers
                                             producers in
                                         let names =
                                           ParserAux.producer_names producers in
                                         let pr_action =
                                           action Settings.dollars names in
                                         {
                                           pr_producers;
                                           pr_action;
                                           pr_branch_prec_annotation =
                                             (ParserAux.override pos oprec1
                                                oprec2);
                                           pr_branch_production_level = level;
                                           pr_branch_position = pos
                                         }) productions in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _;
                                                MenhirLib.EngineTypes.semv =
                                                  x;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_x_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_x_;
                                                MenhirLib.EngineTypes.next =
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _;
                                                    MenhirLib.EngineTypes.semv
                                                      = action;
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos_action_;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos_action_;
                                                    MenhirLib.EngineTypes.next
                                                      =
                                                      {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = productions;
                                                        MenhirLib.EngineTypes.startp
                                                          =
                                                          _startpos_productions_;
                                                        MenhirLib.EngineTypes.endp
                                                          =
                                                          _endpos_productions_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    }
                                                }
                                            = _menhir_stack in
                                          let x : string Syntax.located =
                                            Obj.magic x in
                                          let action : Syntax.raw_action =
                                            Obj.magic action in
                                          let productions :
                                            ParserAux.early_productions =
                                            Obj.magic productions in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos =
                                            _startpos_productions_ in
                                          let _endpos = _endpos_x_ in
                                          let _v :
                                            Syntax.parameterized_branch list
                                            =
                                            let oprec2 = Some x in
                                            ParserAux.check_production_group
                                              productions;
                                            List.map
                                              (fun
                                                 (producers, oprec1, level,
                                                  pos)
                                                 ->
                                                 let pr_producers =
                                                   ParserAux.normalize_producers
                                                     producers in
                                                 let names =
                                                   ParserAux.producer_names
                                                     producers in
                                                 let pr_action =
                                                   action Settings.dollars
                                                     names in
                                                 {
                                                   pr_producers;
                                                   pr_action;
                                                   pr_branch_prec_annotation
                                                     =
                                                     (ParserAux.override pos
                                                        oprec1 oprec2);
                                                   pr_branch_production_level
                                                     = level;
                                                   pr_branch_position = pos
                                                 }) productions in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = e;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_e_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_e_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _1;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__1_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__1_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = e1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_e1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_e1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let e :
                                                    Syntax.raw_seq_expression
                                                      Syntax.located
                                                    = Obj.magic e in
                                                  let _1 : unit =
                                                    Obj.magic _1 in
                                                  let e1 :
                                                    Syntax.symbol_expression
                                                    = Obj.magic e1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_e1_ in
                                                  let _endpos = _endpos_e_ in
                                                  let _v :
                                                    Syntax.raw_seq_expression
                                                    =
                                                    let e2 = let e2 = e in e2 in
                                                    ECons
                                                      (SemPatWildcard, e1,
                                                        e2) in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = e;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_e_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_e_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = e1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_e1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_e1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = p1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_p1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_p1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } }
                                                                }
                                                            = _menhir_stack in
                                                          let e :
                                                            Syntax.raw_seq_expression
                                                              Syntax.located
                                                            = Obj.magic e in
                                                          let _1 : unit =
                                                            Obj.magic _1 in
                                                          let e1 :
                                                            Syntax.symbol_expression
                                                            = Obj.magic e1 in
                                                          let _2 : unit =
                                                            Obj.magic _2 in
                                                          let p1 :
                                                            Syntax.pattern =
                                                            Obj.magic p1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_p1_ in
                                                          let _endpos =
                                                            _endpos_e_ in
                                                          let _v :
                                                            Syntax.raw_seq_expression
                                                            =
                                                            let e2 =
                                                              let e2 = e in
                                                              e2 in
                                                            ECons
                                                              (p1, e1, e2) in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = e;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_e_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_e_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let e :
                                                                    Syntax.symbol_expression
                                                                    =
                                                                    Obj.magic
                                                                    e in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_e_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_e_ in
                                                                  let _v :
                                                                    Syntax.raw_seq_expression
                                                                    =
                                                                    ESingleton
                                                                    e in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let e : Syntax.raw_seq_expression = Obj.magic e in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_e_ in
          let _endpos = _endpos_e_ in
          let _v : Syntax.raw_seq_expression = e in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = e;
                        MenhirLib.EngineTypes.startp = _startpos_e_;
                        MenhirLib.EngineTypes.endp = _endpos_e_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let e : Syntax.raw_seq_expression Syntax.located =
                    Obj.magic e in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_e_ in
                  let _endpos = _endpos_e_ in
                  let _v : Syntax.branch list =
                    let x =
                      let e = e in
                      Branch (e, (ParserAux.new_production_level ())) in
                    let _1 = None in [x] in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = e;
                                MenhirLib.EngineTypes.startp = _startpos_e_;
                                MenhirLib.EngineTypes.endp = _endpos_e_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = x_inlined1;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_x_inlined1_;
                                    MenhirLib.EngineTypes.endp =
                                      _endpos_x_inlined1_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let e : Syntax.raw_seq_expression Syntax.located =
                            Obj.magic e in
                          let x_inlined1 : unit = Obj.magic x_inlined1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_x_inlined1_ in
                          let _endpos = _endpos_e_ in
                          let _v : Syntax.branch list =
                            let x =
                              let e = e in
                              Branch (e, (ParserAux.new_production_level ())) in
                            let _1 = let x = x_inlined1 in Some x in [x] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = e;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_e_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_e_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = _2;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__2_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__2_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  xs;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_xs_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_xs_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    = _menhir_stack in
                                  let e :
                                    Syntax.raw_seq_expression Syntax.located
                                    = Obj.magic e in
                                  let _2 : unit = Obj.magic _2 in
                                  let xs : Syntax.branch list = Obj.magic xs in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_xs_ in
                                  let _endpos = _endpos_e_ in
                                  let _v : Syntax.branch list =
                                    let x =
                                      let e = e in
                                      Branch
                                        (e,
                                          (ParserAux.new_production_level ())) in
                                    x :: xs in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  x;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_x_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_x_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let x : ParserAux.early_production
                                            = Obj.magic x in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_x_ in
                                          let _endpos = _endpos_x_ in
                                          let _v :
                                            ParserAux.early_productions = 
                                            [x] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _2;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__2_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__2_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs :
                                                    ParserAux.early_productions
                                                    = Obj.magic xs in
                                                  let _2 : unit =
                                                    Obj.magic _2 in
                                                  let x :
                                                    ParserAux.early_production
                                                    = Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v :
                                                    ParserAux.early_productions
                                                    = x :: xs in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let x :
                                                            Syntax.parameterized_branch
                                                              list
                                                            = Obj.magic x in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_x_ in
                                                          let _endpos =
                                                            _endpos_x_ in
                                                          let _v :
                                                            Syntax.parameterized_branch
                                                              list list
                                                            = [x] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    Syntax.parameterized_branch
                                                                    list list
                                                                    =
                                                                    Obj.magic
                                                                    xs in
                                                                  let _2 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _2 in
                                                                  let x :
                                                                    Syntax.parameterized_branch
                                                                    list =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    Syntax.parameterized_branch
                                                                    list list
                                                                    = x :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let x : Syntax.expression = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos_x_ in
          let _v : Syntax.expression list = [x] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            }
                        }
                    = _menhir_stack in
                  let xs : Syntax.expression list = Obj.magic xs in
                  let _2 : unit = Obj.magic _2 in
                  let x : Syntax.expression = Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_xs_ in
                  let _v : Syntax.expression list = x :: xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let x : Syntax.parameter = Obj.magic x in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_x_ in
                          let _endpos = _endpos_x_ in
                          let _v : Syntax.parameters = [x] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = xs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_xs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_xs_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = _2;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__2_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__2_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  x;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_x_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_x_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    = _menhir_stack in
                                  let xs : Syntax.parameters = Obj.magic xs in
                                  let _2 : unit = Obj.magic _2 in
                                  let x : Syntax.parameter = Obj.magic x in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_x_ in
                                  let _endpos = _endpos_xs_ in
                                  let _v : Syntax.parameters = x :: xs in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  x;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_x_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_x_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let x : Syntax.pattern =
                                            Obj.magic x in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_x_ in
                                          let _endpos = _endpos_x_ in
                                          let _v : Syntax.pattern list = [x] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _2;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__2_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__2_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs :
                                                    Syntax.pattern list =
                                                    Obj.magic xs in
                                                  let _2 : unit =
                                                    Obj.magic _2 in
                                                  let x : Syntax.pattern =
                                                    Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v :
                                                    Syntax.pattern list = x
                                                    :: xs in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let x :
                                                            Syntax.parameter
                                                            = Obj.magic x in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_x_ in
                                                          let _endpos =
                                                            _endpos_x_ in
                                                          let _v :
                                                            Syntax.parameters
                                                            = [x] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    Syntax.parameters
                                                                    =
                                                                    Obj.magic
                                                                    xs in
                                                                  let _2 :
                                                                    unit =
                                                                    Obj.magic
                                                                    _2 in
                                                                  let x :
                                                                    Syntax.parameter
                                                                    =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    Syntax.parameters
                                                                    = x :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let x : string Syntax.located = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos_x_ in
          let _v : string Syntax.located list = [x] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x;
                                MenhirLib.EngineTypes.startp = _startpos_x_;
                                MenhirLib.EngineTypes.endp = _endpos_x_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            }
                        }
                    = _menhir_stack in
                  let xs : string Syntax.located list = Obj.magic xs in
                  let _2 : unit = Obj.magic _2 in
                  let x : string Syntax.located = Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_xs_ in
                  let _v : string Syntax.located list = x :: xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = id;
                                MenhirLib.EngineTypes.startp = _startpos_id_;
                                MenhirLib.EngineTypes.endp = _endpos_id_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let id : string Positions.located = Obj.magic id in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_id_ in
                          let _endpos = _endpos_id_ in
                          let _v : string Syntax.located list =
                            let x = id in [x] in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = xs;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_xs_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_xs_;
                                        MenhirLib.EngineTypes.next =
                                          { MenhirLib.EngineTypes.state = _;
                                            MenhirLib.EngineTypes.semv = _2;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__2_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__2_;
                                            MenhirLib.EngineTypes.next =
                                              {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  id;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_id_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_id_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            }
                                        }
                                    = _menhir_stack in
                                  let xs : string Syntax.located list =
                                    Obj.magic xs in
                                  let _2 : unit option = Obj.magic _2 in
                                  let id : string Positions.located =
                                    Obj.magic id in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_id_ in
                                  let _endpos = _endpos_xs_ in
                                  let _v : string Syntax.located list =
                                    let x = id in x :: xs in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  x;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_x_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_x_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let x : Syntax.parameter =
                                            Obj.magic x in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_x_ in
                                          let _endpos = _endpos_x_ in
                                          let _v : Syntax.parameter list =
                                            [x] in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = xs;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_xs_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_xs_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _2;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__2_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__2_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let xs :
                                                    Syntax.parameter list =
                                                    Obj.magic xs in
                                                  let _2 : unit option =
                                                    Obj.magic _2 in
                                                  let x : Syntax.parameter =
                                                    Obj.magic x in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_x_ in
                                                  let _endpos = _endpos_xs_ in
                                                  let _v :
                                                    Syntax.parameter list = x
                                                    :: xs in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = x;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_x_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_x_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let x :
                                                            string
                                                              Syntax.located
                                                            = Obj.magic x in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_x_ in
                                                          let _endpos =
                                                            _endpos_x_ in
                                                          let _v :
                                                            string
                                                              Syntax.located
                                                              list
                                                            = [x] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    string
                                                                    Syntax.located
                                                                    list =
                                                                    Obj.magic
                                                                    xs in
                                                                  let _2 :
                                                                    unit
                                                                    option =
                                                                    Obj.magic
                                                                    _2 in
                                                                  let x :
                                                                    string
                                                                    Syntax.located
                                                                    =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    string
                                                                    Syntax.located
                                                                    list = x
                                                                    :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = attrs;
                MenhirLib.EngineTypes.startp = _startpos_attrs_;
                MenhirLib.EngineTypes.endp = _endpos_attrs_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = alias;
                    MenhirLib.EngineTypes.startp = _startpos_alias_;
                    MenhirLib.EngineTypes.endp = _endpos_alias_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = id;
                        MenhirLib.EngineTypes.startp = _startpos_id_;
                        MenhirLib.EngineTypes.endp = _endpos_id_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    }
                }
            = _menhir_stack in
          let attrs : Syntax.attributes = Obj.magic attrs in
          let alias : string Syntax.located option = Obj.magic alias in
          let id : string Positions.located = Obj.magic id in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_id_ in
          let _endpos = _endpos_attrs_ in
          let _v :
            (string * Syntax.alias * Syntax.attributes) Syntax.located list =
            let x =
              let alias = Option.map Positions.value alias in
              Positions.map (fun uid -> (uid, alias, attrs)) id in
            [x] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next =
                              { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = attrs;
                                MenhirLib.EngineTypes.startp =
                                  _startpos_attrs_;
                                MenhirLib.EngineTypes.endp = _endpos_attrs_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _;
                                    MenhirLib.EngineTypes.semv = alias;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_alias_;
                                    MenhirLib.EngineTypes.endp =
                                      _endpos_alias_;
                                    MenhirLib.EngineTypes.next =
                                      {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = id;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_id_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_id_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    }
                                }
                            }
                        }
                    = _menhir_stack in
                  let xs :
                    (string * Syntax.alias * Syntax.attributes)
                      Syntax.located list
                    = Obj.magic xs in
                  let _2 : unit option = Obj.magic _2 in
                  let attrs : Syntax.attributes = Obj.magic attrs in
                  let alias : string Syntax.located option = Obj.magic alias in
                  let id : string Positions.located = Obj.magic id in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_id_ in
                  let _endpos = _endpos_xs_ in
                  let _v :
                    (string * Syntax.alias * Syntax.attributes)
                      Syntax.located list
                    =
                    let x =
                      let alias = Option.map Positions.value alias in
                      Positions.map (fun uid -> (uid, alias, attrs)) id in
                    x :: xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = params;
                                MenhirLib.EngineTypes.startp =
                                  _startpos_params_;
                                MenhirLib.EngineTypes.endp = _endpos_params_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = symbol;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos_symbol_;
                                    MenhirLib.EngineTypes.endp =
                                      _endpos_symbol_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let params : Syntax.parameters = Obj.magic params in
                          let symbol : string Syntax.located =
                            Obj.magic symbol in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos_symbol_ in
                          let _endpos = _endpos_params_ in
                          let _v : Syntax.parameter =
                            let p =
                              let actuals = params in
                              Parameters.app symbol actuals in
                            p in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv = m;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos_m_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos_m_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = p;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos_p_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos_p_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let m : string Syntax.located = Obj.magic m in
                                  let p : Syntax.parameter = Obj.magic p in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos_p_ in
                                  let _endpos = _endpos_m_ in
                                  let _v : Syntax.parameter =
                                    let p = ParameterApp (m, [p]) in p in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  id;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_id_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_id_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let id : string Positions.located =
                                            Obj.magic id in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_id_ in
                                          let _endpos = _endpos_id_ in
                                          let _v : string Syntax.located = id in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = id;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_id_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_id_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    = _menhir_stack in
                                                  let id :
                                                    string Positions.located
                                                    = Obj.magic id in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_id_ in
                                                  let _endpos = _endpos_id_ in
                                                  let _v :
                                                    string Syntax.located =
                                                    id in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = id;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos_id_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos_id_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            = _menhir_stack in
                                                          let id :
                                                            string
                                                              Positions.located
                                                            = Obj.magic id in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos_id_ in
                                                          let _endpos =
                                                            _endpos_id_ in
                                                          let _v :
                                                            string
                                                              Syntax.located
                                                            = id in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = attrs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_attrs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_attrs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = params;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_params_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_params_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = symbol;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_symbol_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_symbol_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } } =
                                                                    _menhir_stack in
                                                                  let attrs :
                                                                    Syntax.attributes
                                                                    =
                                                                    Obj.magic
                                                                    attrs in
                                                                  let params
                                                                    :
                                                                    Syntax.expression
                                                                    list =
                                                                    Obj.magic
                                                                    params in
                                                                  let symbol
                                                                    :
                                                                    string
                                                                    Syntax.located
                                                                    =
                                                                    Obj.magic
                                                                    symbol in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_symbol_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_attrs_ in
                                                                  let _v :
                                                                    Syntax.symbol_expression
                                                                    =
                                                                    let es =
                                                                    params in
                                                                    ESymbol
                                                                    (symbol,
                                                                    es,
                                                                    attrs) in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = attrs;
                MenhirLib.EngineTypes.startp = _startpos_attrs_;
                MenhirLib.EngineTypes.endp = _endpos_attrs_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = m;
                    MenhirLib.EngineTypes.startp = _startpos_m_;
                    MenhirLib.EngineTypes.endp = _endpos_m_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = e;
                        MenhirLib.EngineTypes.startp = _startpos_e_;
                        MenhirLib.EngineTypes.endp = _endpos_e_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    }
                }
            = _menhir_stack in
          let attrs : Syntax.attributes = Obj.magic attrs in
          let m : string Syntax.located = Obj.magic m in
          let e : Syntax.symbol_expression Syntax.located = Obj.magic e in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_e_ in
          let _endpos = _endpos_attrs_ in
          let _v : Syntax.symbol_expression = ESymbol (m, [inject e], attrs) in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }))|]
    and trace = None
  end
module MenhirInterpreter =
  struct
    module ET = (MenhirLib.TableInterpreter.MakeEngineTable)(Tables)
    module TI = (MenhirLib.Engine.Make)(ET)
    include TI
  end
let grammar lexer lexbuf =
  (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : Syntax.partial_grammar)
module Incremental =
  struct
    let grammar initial_position =
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : Syntax.partial_grammar
                                                                  MenhirInterpreter.checkpoint)
  end
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__

[
  structure_item (demos/calc-new-syntax/lexer.mll[2,40+2]..[2,40+13])
    Pstr_open Fresh
    module_expr (demos/calc-new-syntax/lexer.mll[2,40+7]..[2,40+13])
      Pmod_ident "Parser" (demos/calc-new-syntax/lexer.mll[2,40+7]..[2,40+13])
  structure_item (demos/calc-new-syntax/lexer.mll[4,55+2]..[4,55+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-new-syntax/lexer.mll[4,55+2]..[4,55+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc-new-syntax/lexer.mll[4,55+21]..[4,55+27])
                  Ptyp_constr "string" (demos/calc-new-syntax/lexer.mll[4,55+21]..[4,55+27])
                  []
              ]
              None
  structure_item (demos/calc-new-syntax/lexer.ml[9,122+0]..[104,5623+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[9,122+4]..[9,122+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc-new-syntax/lexer.ml[9,122+4]..[9,122+22])
        expression (demos/calc-new-syntax/lexer.ml[9,122+25]..[104,5623+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc-new-syntax/lexer.ml[10,149+2]..[10,149+17])
              expression (demos/calc-new-syntax/lexer.ml[11,169+3]..[13,309+5])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-new-syntax/lexer.ml[11,169+4]..[13,309+4]),None)
            "Lexing.lex_backtrk" (demos/calc-new-syntax/lexer.ml[14,316+2]..[14,316+20])
              expression (demos/calc-new-syntax/lexer.ml[15,339+3]..[17,479+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-new-syntax/lexer.ml[15,339+4]..[17,479+4]),None)
            "Lexing.lex_default" (demos/calc-new-syntax/lexer.ml[18,486+2]..[18,486+20])
              expression (demos/calc-new-syntax/lexer.ml[19,509+3]..[21,649+5])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-new-syntax/lexer.ml[19,509+4]..[21,649+4]),None)
            "Lexing.lex_trans" (demos/calc-new-syntax/lexer.ml[22,656+2]..[22,656+18])
              expression (demos/calc-new-syntax/lexer.ml[23,677+3]..[56,2987+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-new-syntax/lexer.ml[23,677+4]..[56,2987+52]),None)
            "Lexing.lex_check" (demos/calc-new-syntax/lexer.ml[57,3042+2]..[57,3042+18])
              expression (demos/calc-new-syntax/lexer.ml[58,3063+3]..[91,5373+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-new-syntax/lexer.ml[58,3063+4]..[91,5373+52]),None)
            "Lexing.lex_base_code" (demos/calc-new-syntax/lexer.ml[92,5428+2]..[92,5428+22])
              expression (demos/calc-new-syntax/lexer.ml[93,5453+3]..[93,5453+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[93,5453+4]..[93,5453+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc-new-syntax/lexer.ml[94,5460+2]..[94,5460+25])
              expression (demos/calc-new-syntax/lexer.ml[95,5488+3]..[95,5488+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[95,5488+4]..[95,5488+4]),None)
            "Lexing.lex_default_code" (demos/calc-new-syntax/lexer.ml[96,5495+2]..[96,5495+25])
              expression (demos/calc-new-syntax/lexer.ml[97,5523+3]..[97,5523+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[97,5523+4]..[97,5523+4]),None)
            "Lexing.lex_trans_code" (demos/calc-new-syntax/lexer.ml[98,5530+2]..[98,5530+23])
              expression (demos/calc-new-syntax/lexer.ml[99,5556+3]..[99,5556+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[99,5556+4]..[99,5556+4]),None)
            "Lexing.lex_check_code" (demos/calc-new-syntax/lexer.ml[100,5563+2]..[100,5563+23])
              expression (demos/calc-new-syntax/lexer.ml[101,5589+3]..[101,5589+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[101,5589+4]..[101,5589+4]),None)
            "Lexing.lex_code" (demos/calc-new-syntax/lexer.ml[102,5596+2]..[102,5596+17])
              expression (demos/calc-new-syntax/lexer.ml[103,5616+3]..[103,5616+5])
                Pexp_constant PConst_string("",(demos/calc-new-syntax/lexer.ml[103,5616+4]..[103,5616+4]),None)
          ]
          None
    ]
  structure_item (demos/calc-new-syntax/lexer.ml[106,5626+0]..[198,8201+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[106,5626+8]..[106,5626+12])
          Ppat_var "line" (demos/calc-new-syntax/lexer.ml[106,5626+8]..[106,5626+12])
        expression (demos/calc-new-syntax/lexer.ml[106,5626+13]..[107,5648+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-new-syntax/lexer.ml[106,5626+13]..[106,5626+19])
            Ppat_var "lexbuf" (demos/calc-new-syntax/lexer.ml[106,5626+13]..[106,5626+19])
          expression (demos/calc-new-syntax/lexer.ml[107,5648+3]..[107,5648+32])
            Pexp_apply
            expression (demos/calc-new-syntax/lexer.ml[107,5648+3]..[107,5648+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc-new-syntax/lexer.ml[107,5648+3]..[107,5648+23])
            [
              <arg>
              Nolabel
                expression (demos/calc-new-syntax/lexer.ml[107,5648+24]..[107,5648+30])
                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[107,5648+24]..[107,5648+30])
              <arg>
              Nolabel
                expression (demos/calc-new-syntax/lexer.ml[107,5648+31]..[107,5648+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[108,5681+4]..[108,5681+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc-new-syntax/lexer.ml[108,5681+4]..[108,5681+24])
        expression (demos/calc-new-syntax/lexer.ml[108,5681+25]..[136,6589+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-new-syntax/lexer.ml[108,5681+25]..[108,5681+31])
            Ppat_var "lexbuf" (demos/calc-new-syntax/lexer.ml[108,5681+25]..[108,5681+31])
          expression (demos/calc-new-syntax/lexer.ml[108,5681+32]..[136,6589+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-new-syntax/lexer.ml[108,5681+32]..[108,5681+49])
              Ppat_var "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[108,5681+32]..[108,5681+49])
            expression (demos/calc-new-syntax/lexer.ml[109,5733+2]..[136,6589+51])
              Pexp_match
              expression (demos/calc-new-syntax/lexer.ml[109,5733+8]..[109,5733+65])
                Pexp_apply
                expression (demos/calc-new-syntax/lexer.ml[109,5733+8]..[109,5733+21])
                  Pexp_ident "Lexing.engine" (demos/calc-new-syntax/lexer.ml[109,5733+8]..[109,5733+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[109,5733+22]..[109,5733+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-new-syntax/lexer.ml[109,5733+22]..[109,5733+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[109,5733+41]..[109,5733+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[109,5733+41]..[109,5733+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[109,5733+59]..[109,5733+65])
                      Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[109,5733+59]..[109,5733+65])
                ]
              [
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[110,5804+8]..[110,5804+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-new-syntax/lexer.ml[111,5817+0]..demos/calc-new-syntax/lexer.mll[15,6049+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-new-syntax/lexer.mll[13,5860+21]..[13,5860+25])
                          Ppat_var "line" (demos/calc-new-syntax/lexer.mll[13,5860+21]..[13,5860+25])
                        expression (demos/calc-new-syntax/lexer.ml[115,5925+2]..[115,5925+81])
                          Pexp_apply
                          expression (demos/calc-new-syntax/lexer.ml[115,5925+2]..[115,5925+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-new-syntax/lexer.ml[115,5925+2]..[115,5925+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[115,5925+20]..[115,5925+26])
                                Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[115,5925+20]..[115,5925+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[115,5925+27]..[115,5925+54])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[115,5925+27]..[115,5925+33])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[115,5925+27]..[115,5925+33])
                                "Lexing.lex_start_pos" (demos/calc-new-syntax/lexer.ml[115,5925+34]..[115,5925+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[115,5925+55]..[115,5925+81])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[115,5925+55]..[115,5925+61])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[115,5925+55]..[115,5925+61])
                                "Lexing.lex_curr_pos" (demos/calc-new-syntax/lexer.ml[115,5925+62]..[115,5925+81])
                          ]
                    ]
                    expression (demos/calc-new-syntax/lexer.mll[15,6049+4]..[15,6049+23])
                      Pexp_tuple
                      [
                        expression (demos/calc-new-syntax/lexer.mll[15,6049+6]..[15,6049+15])
                          Pexp_construct "Some" (demos/calc-new-syntax/lexer.mll[15,6049+6]..[15,6049+10])
                          Some
                            expression (demos/calc-new-syntax/lexer.mll[15,6049+11]..[15,6049+15])
                              Pexp_ident "line" (demos/calc-new-syntax/lexer.mll[15,6049+11]..[15,6049+15])
                        expression (demos/calc-new-syntax/lexer.mll[15,6049+17]..[15,6049+21])
                          Pexp_construct "true" (demos/calc-new-syntax/lexer.mll[15,6049+17]..[15,6049+21])
                          None
                      ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[120,6113+4]..[120,6113+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-new-syntax/lexer.mll[18,6161+4]..[18,6161+19])
                    Pexp_tuple
                    [
                      expression (demos/calc-new-syntax/lexer.mll[18,6161+6]..[18,6161+10])
                        Pexp_construct "None" (demos/calc-new-syntax/lexer.mll[18,6161+6]..[18,6161+10])
                        None
                      expression (demos/calc-new-syntax/lexer.mll[18,6161+12]..[18,6161+17])
                        Pexp_construct "false" (demos/calc-new-syntax/lexer.mll[18,6161+12]..[18,6161+17])
                        None
                    ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[125,6221+4]..[125,6221+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-new-syntax/lexer.ml[126,6230+0]..demos/calc-new-syntax/lexer.mll[22,6456+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-new-syntax/lexer.mll[19,6273+15]..[19,6273+19])
                          Ppat_var "line" (demos/calc-new-syntax/lexer.mll[19,6273+15]..[19,6273+19])
                        expression (demos/calc-new-syntax/lexer.ml[130,6332+2]..[130,6332+81])
                          Pexp_apply
                          expression (demos/calc-new-syntax/lexer.ml[130,6332+2]..[130,6332+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-new-syntax/lexer.ml[130,6332+2]..[130,6332+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[130,6332+20]..[130,6332+26])
                                Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[130,6332+20]..[130,6332+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[130,6332+27]..[130,6332+54])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[130,6332+27]..[130,6332+33])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[130,6332+27]..[130,6332+33])
                                "Lexing.lex_start_pos" (demos/calc-new-syntax/lexer.ml[130,6332+34]..[130,6332+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[130,6332+55]..[130,6332+81])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[130,6332+55]..[130,6332+61])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[130,6332+55]..[130,6332+61])
                                "Lexing.lex_curr_pos" (demos/calc-new-syntax/lexer.ml[130,6332+62]..[130,6332+81])
                          ]
                    ]
                    expression (demos/calc-new-syntax/lexer.mll[22,6456+4]..[22,6456+33])
                      Pexp_tuple
                      [
                        expression (demos/calc-new-syntax/lexer.mll[22,6456+6]..[22,6456+24])
                          Pexp_construct "Some" (demos/calc-new-syntax/lexer.mll[22,6456+6]..[22,6456+10])
                          Some
                            expression (demos/calc-new-syntax/lexer.mll[22,6456+11]..[22,6456+24])
                              Pexp_apply
                              expression (demos/calc-new-syntax/lexer.mll[22,6456+17]..[22,6456+18])
                                Pexp_ident "^" (demos/calc-new-syntax/lexer.mll[22,6456+17]..[22,6456+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-new-syntax/lexer.mll[22,6456+12]..[22,6456+16])
                                    Pexp_ident "line" (demos/calc-new-syntax/lexer.mll[22,6456+12]..[22,6456+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc-new-syntax/lexer.mll[22,6456+19]..[22,6456+23])
                                    Pexp_constant PConst_string("\n",(demos/calc-new-syntax/lexer.mll[22,6456+20]..[22,6456+22]),None)
                              ]
                        expression (demos/calc-new-syntax/lexer.mll[22,6456+26]..[22,6456+31])
                          Pexp_construct "false" (demos/calc-new-syntax/lexer.mll[22,6456+26]..[22,6456+31])
                          None
                      ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[135,6530+4]..[135,6530+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[135,6530+4]..[135,6530+21])
                  expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..[136,6589+51])
                    Pexp_sequence
                    expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..[135,6530+57])
                      Pexp_apply
                      expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..[135,6530+50])
                        Pexp_field
                        expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..[135,6530+31])
                          Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[135,6530+25]..[135,6530+31])
                        "Lexing.refill_buff" (demos/calc-new-syntax/lexer.ml[135,6530+32]..[135,6530+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[135,6530+51]..[135,6530+57])
                            Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[135,6530+51]..[135,6530+57])
                      ]
                    expression (demos/calc-new-syntax/lexer.ml[136,6589+6]..[136,6589+51])
                      Pexp_apply
                      expression (demos/calc-new-syntax/lexer.ml[136,6589+6]..[136,6589+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc-new-syntax/lexer.ml[136,6589+6]..[136,6589+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[136,6589+27]..[136,6589+33])
                            Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[136,6589+27]..[136,6589+33])
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[136,6589+34]..[136,6589+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[136,6589+34]..[136,6589+51])
                      ]
              ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[138,6642+4]..[138,6642+9])
          Ppat_var "token" (demos/calc-new-syntax/lexer.ml[138,6642+4]..[138,6642+9])
        expression (demos/calc-new-syntax/lexer.ml[138,6642+10]..[139,6661+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-new-syntax/lexer.ml[138,6642+10]..[138,6642+16])
            Ppat_var "lexbuf" (demos/calc-new-syntax/lexer.ml[138,6642+10]..[138,6642+16])
          expression (demos/calc-new-syntax/lexer.ml[139,6661+3]..[139,6661+33])
            Pexp_apply
            expression (demos/calc-new-syntax/lexer.ml[139,6661+3]..[139,6661+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc-new-syntax/lexer.ml[139,6661+3]..[139,6661+24])
            [
              <arg>
              Nolabel
                expression (demos/calc-new-syntax/lexer.ml[139,6661+25]..[139,6661+31])
                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[139,6661+25]..[139,6661+31])
              <arg>
              Nolabel
                expression (demos/calc-new-syntax/lexer.ml[139,6661+32]..[139,6661+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[140,6695+4]..[140,6695+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc-new-syntax/lexer.ml[140,6695+4]..[140,6695+25])
        expression (demos/calc-new-syntax/lexer.ml[140,6695+26]..[198,8201+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-new-syntax/lexer.ml[140,6695+26]..[140,6695+32])
            Ppat_var "lexbuf" (demos/calc-new-syntax/lexer.ml[140,6695+26]..[140,6695+32])
          expression (demos/calc-new-syntax/lexer.ml[140,6695+33]..[198,8201+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-new-syntax/lexer.ml[140,6695+33]..[140,6695+50])
              Ppat_var "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[140,6695+33]..[140,6695+50])
            expression (demos/calc-new-syntax/lexer.ml[141,6748+2]..[198,8201+52])
              Pexp_match
              expression (demos/calc-new-syntax/lexer.ml[141,6748+8]..[141,6748+65])
                Pexp_apply
                expression (demos/calc-new-syntax/lexer.ml[141,6748+8]..[141,6748+21])
                  Pexp_ident "Lexing.engine" (demos/calc-new-syntax/lexer.ml[141,6748+8]..[141,6748+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[141,6748+22]..[141,6748+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-new-syntax/lexer.ml[141,6748+22]..[141,6748+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[141,6748+41]..[141,6748+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[141,6748+41]..[141,6748+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[141,6748+59]..[141,6748+65])
                      Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[141,6748+59]..[141,6748+65])
                ]
              [
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[142,6819+8]..[142,6819+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-new-syntax/lexer.mll[29,6871+4]..[29,6871+20])
                    Pexp_apply
                    expression (demos/calc-new-syntax/lexer.mll[29,6871+6]..[29,6871+11])
                      Pexp_ident "token" (demos/calc-new-syntax/lexer.mll[29,6871+6]..[29,6871+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-new-syntax/lexer.mll[29,6871+12]..[29,6871+18])
                          Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.mll[29,6871+12]..[29,6871+18])
                    ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[147,6932+4]..[147,6932+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-new-syntax/lexer.mll[31,6980+4]..[31,6980+11])
                    Pexp_construct "EOL" (demos/calc-new-syntax/lexer.mll[31,6980+6]..[31,6980+9])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[152,7032+4]..[152,7032+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-new-syntax/lexer.ml[153,7041+0]..demos/calc-new-syntax/lexer.mll[33,7265+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-new-syntax/lexer.mll[32,7084+16]..[32,7084+17])
                          Ppat_var "i" (demos/calc-new-syntax/lexer.mll[32,7084+16]..[32,7084+17])
                        expression (demos/calc-new-syntax/lexer.ml[157,7141+2]..[157,7141+81])
                          Pexp_apply
                          expression (demos/calc-new-syntax/lexer.ml[157,7141+2]..[157,7141+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-new-syntax/lexer.ml[157,7141+2]..[157,7141+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[157,7141+20]..[157,7141+26])
                                Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[157,7141+20]..[157,7141+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[157,7141+27]..[157,7141+54])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[157,7141+27]..[157,7141+33])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[157,7141+27]..[157,7141+33])
                                "Lexing.lex_start_pos" (demos/calc-new-syntax/lexer.ml[157,7141+34]..[157,7141+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.ml[157,7141+55]..[157,7141+81])
                                Pexp_field
                                expression (demos/calc-new-syntax/lexer.ml[157,7141+55]..[157,7141+61])
                                  Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[157,7141+55]..[157,7141+61])
                                "Lexing.lex_curr_pos" (demos/calc-new-syntax/lexer.ml[157,7141+62]..[157,7141+81])
                          ]
                    ]
                    expression (demos/calc-new-syntax/lexer.mll[33,7265+4]..[33,7265+29])
                      Pexp_construct "INT" (demos/calc-new-syntax/lexer.mll[33,7265+6]..[33,7265+9])
                      Some
                        expression (demos/calc-new-syntax/lexer.mll[33,7265+10]..[33,7265+27])
                          Pexp_apply
                          expression (demos/calc-new-syntax/lexer.mll[33,7265+11]..[33,7265+24])
                            Pexp_ident "int_of_string" (demos/calc-new-syntax/lexer.mll[33,7265+11]..[33,7265+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-new-syntax/lexer.mll[33,7265+25]..[33,7265+26])
                                Pexp_ident "i" (demos/calc-new-syntax/lexer.mll[33,7265+25]..[33,7265+26])
                          ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[162,7335+4]..[162,7335+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc-new-syntax/lexer.mll[35,7383+4]..[35,7383+12])
                    Pexp_construct "PLUS" (demos/calc-new-syntax/lexer.mll[35,7383+6]..[35,7383+10])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[167,7436+4]..[167,7436+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc-new-syntax/lexer.mll[37,7484+4]..[37,7484+13])
                    Pexp_construct "MINUS" (demos/calc-new-syntax/lexer.mll[37,7484+6]..[37,7484+11])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[172,7538+4]..[172,7538+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc-new-syntax/lexer.mll[39,7586+4]..[39,7586+13])
                    Pexp_construct "TIMES" (demos/calc-new-syntax/lexer.mll[39,7586+6]..[39,7586+11])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[177,7640+4]..[177,7640+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc-new-syntax/lexer.mll[41,7688+4]..[41,7688+11])
                    Pexp_construct "DIV" (demos/calc-new-syntax/lexer.mll[41,7688+6]..[41,7688+9])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[182,7740+4]..[182,7740+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc-new-syntax/lexer.mll[43,7788+4]..[43,7788+14])
                    Pexp_construct "LPAREN" (demos/calc-new-syntax/lexer.mll[43,7788+6]..[43,7788+12])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[187,7843+4]..[187,7843+5])
                    Ppat_constant PConst_int (8,None)
                  expression (demos/calc-new-syntax/lexer.mll[45,7891+4]..[45,7891+14])
                    Pexp_construct "RPAREN" (demos/calc-new-syntax/lexer.mll[45,7891+6]..[45,7891+12])
                    None
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[192,7946+4]..[192,7946+5])
                    Ppat_constant PConst_int (9,None)
                  expression (demos/calc-new-syntax/lexer.mll[47,7994+4]..[47,7994+107])
                    Pexp_apply
                    expression (demos/calc-new-syntax/lexer.mll[47,7994+6]..[47,7994+11])
                      Pexp_ident "raise" (demos/calc-new-syntax/lexer.mll[47,7994+6]..[47,7994+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-new-syntax/lexer.mll[47,7994+12]..[47,7994+105])
                          Pexp_construct "Error" (demos/calc-new-syntax/lexer.mll[47,7994+13]..[47,7994+18])
                          Some
                            expression (demos/calc-new-syntax/lexer.mll[47,7994+19]..[47,7994+104])
                              Pexp_apply
                              expression (demos/calc-new-syntax/lexer.mll[47,7994+20]..[47,7994+34])
                                Pexp_ident "Printf.sprintf" (demos/calc-new-syntax/lexer.mll[47,7994+20]..[47,7994+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..[47,7994+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc-new-syntax/lexer.mll[47,7994+36]..[47,7994+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc-new-syntax/lexer.mll[47,7994+75]..[47,7994+103])
                                    Pexp_apply
                                    expression (demos/calc-new-syntax/lexer.mll[47,7994+76]..[47,7994+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc-new-syntax/lexer.mll[47,7994+76]..[47,7994+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc-new-syntax/lexer.mll[47,7994+96]..[47,7994+102])
                                          Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.mll[47,7994+96]..[47,7994+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc-new-syntax/lexer.ml[197,8142+4]..[197,8142+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[197,8142+4]..[197,8142+21])
                  expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..[198,8201+52])
                    Pexp_sequence
                    expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..[197,8142+57])
                      Pexp_apply
                      expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..[197,8142+50])
                        Pexp_field
                        expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..[197,8142+31])
                          Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[197,8142+25]..[197,8142+31])
                        "Lexing.refill_buff" (demos/calc-new-syntax/lexer.ml[197,8142+32]..[197,8142+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[197,8142+51]..[197,8142+57])
                            Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[197,8142+51]..[197,8142+57])
                      ]
                    expression (demos/calc-new-syntax/lexer.ml[198,8201+6]..[198,8201+52])
                      Pexp_apply
                      expression (demos/calc-new-syntax/lexer.ml[198,8201+6]..[198,8201+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc-new-syntax/lexer.ml[198,8201+6]..[198,8201+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[198,8201+28]..[198,8201+34])
                            Pexp_ident "lexbuf" (demos/calc-new-syntax/lexer.ml[198,8201+28]..[198,8201+34])
                        <arg>
                        Nolabel
                          expression (demos/calc-new-syntax/lexer.ml[198,8201+35]..[198,8201+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-new-syntax/lexer.ml[198,8201+35]..[198,8201+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc-new-syntax/lexer.mll[2,40+2]..demos/calc-new-syntax/lexer.mll[2,40+13])
    Tstr_open Fresh
    module_expr (demos/calc-new-syntax/lexer.mll[2,40+7]..demos/calc-new-syntax/lexer.mll[2,40+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (demos/calc-new-syntax/lexer.mll[4,55+2]..demos/calc-new-syntax/lexer.mll[4,55+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-new-syntax/lexer.mll[4,55+2]..demos/calc-new-syntax/lexer.mll[4,55+27])
          pext_name = "Error/275"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc-new-syntax/lexer.mll[4,55+21]..demos/calc-new-syntax/lexer.mll[4,55+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc-new-syntax/lexer.ml[9,122+0]..demos/calc-new-syntax/lexer.ml[104,5623+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[9,122+4]..demos/calc-new-syntax/lexer.ml[9,122+22])
          Tpat_var "__ocaml_lex_tables/276"
        expression (demos/calc-new-syntax/lexer.ml[9,122+25]..demos/calc-new-syntax/lexer.ml[104,5623+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc-new-syntax/lexer.ml[11,169+3]..demos/calc-new-syntax/lexer.ml[13,309+5])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-new-syntax/lexer.ml[11,169+4]..demos/calc-new-syntax/lexer.ml[13,309+4]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc-new-syntax/lexer.ml[15,339+3]..demos/calc-new-syntax/lexer.ml[17,479+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-new-syntax/lexer.ml[15,339+4]..demos/calc-new-syntax/lexer.ml[17,479+4]),None)
                "Lexing.lex_default"
                  expression (demos/calc-new-syntax/lexer.ml[19,509+3]..demos/calc-new-syntax/lexer.ml[21,649+5])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-new-syntax/lexer.ml[19,509+4]..demos/calc-new-syntax/lexer.ml[21,649+4]),None)
                "Lexing.lex_trans"
                  expression (demos/calc-new-syntax/lexer.ml[23,677+3]..demos/calc-new-syntax/lexer.ml[56,2987+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-new-syntax/lexer.ml[23,677+4]..demos/calc-new-syntax/lexer.ml[56,2987+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc-new-syntax/lexer.ml[58,3063+3]..demos/calc-new-syntax/lexer.ml[91,5373+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-new-syntax/lexer.ml[58,3063+4]..demos/calc-new-syntax/lexer.ml[91,5373+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc-new-syntax/lexer.ml[93,5453+3]..demos/calc-new-syntax/lexer.ml[93,5453+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[93,5453+4]..demos/calc-new-syntax/lexer.ml[93,5453+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc-new-syntax/lexer.ml[95,5488+3]..demos/calc-new-syntax/lexer.ml[95,5488+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[95,5488+4]..demos/calc-new-syntax/lexer.ml[95,5488+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc-new-syntax/lexer.ml[97,5523+3]..demos/calc-new-syntax/lexer.ml[97,5523+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[97,5523+4]..demos/calc-new-syntax/lexer.ml[97,5523+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc-new-syntax/lexer.ml[99,5556+3]..demos/calc-new-syntax/lexer.ml[99,5556+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[99,5556+4]..demos/calc-new-syntax/lexer.ml[99,5556+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc-new-syntax/lexer.ml[101,5589+3]..demos/calc-new-syntax/lexer.ml[101,5589+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[101,5589+4]..demos/calc-new-syntax/lexer.ml[101,5589+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc-new-syntax/lexer.ml[103,5616+3]..demos/calc-new-syntax/lexer.ml[103,5616+5])
                    Texp_constant Const_string("",(demos/calc-new-syntax/lexer.ml[103,5616+4]..demos/calc-new-syntax/lexer.ml[103,5616+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc-new-syntax/lexer.ml[106,5626+0]..demos/calc-new-syntax/lexer.ml[198,8201+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[106,5626+8]..demos/calc-new-syntax/lexer.ml[106,5626+12])
          Tpat_var "line/301"
        expression (demos/calc-new-syntax/lexer.ml[106,5626+13]..demos/calc-new-syntax/lexer.ml[107,5648+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-new-syntax/lexer.ml[106,5626+13]..demos/calc-new-syntax/lexer.ml[106,5626+19])
                Tpat_var "lexbuf/305"
              expression (demos/calc-new-syntax/lexer.ml[107,5648+3]..demos/calc-new-syntax/lexer.ml[107,5648+32])
                Texp_apply
                expression (demos/calc-new-syntax/lexer.ml[107,5648+3]..demos/calc-new-syntax/lexer.ml[107,5648+23])
                  Texp_ident "__ocaml_lex_line_rec/302"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[107,5648+24]..demos/calc-new-syntax/lexer.ml[107,5648+30])
                      Texp_ident "lexbuf/305"
                  <arg>
                    Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[107,5648+31]..demos/calc-new-syntax/lexer.ml[107,5648+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[108,5681+4]..demos/calc-new-syntax/lexer.ml[108,5681+24])
          Tpat_var "__ocaml_lex_line_rec/302"
        expression (demos/calc-new-syntax/lexer.ml[108,5681+25]..demos/calc-new-syntax/lexer.ml[136,6589+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-new-syntax/lexer.ml[108,5681+25]..demos/calc-new-syntax/lexer.ml[108,5681+31])
                Tpat_var "lexbuf/306"
              expression (demos/calc-new-syntax/lexer.ml[108,5681+32]..demos/calc-new-syntax/lexer.ml[136,6589+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-new-syntax/lexer.ml[108,5681+32]..demos/calc-new-syntax/lexer.ml[108,5681+49])
                      Tpat_var "__ocaml_lex_state/307"
                    expression (demos/calc-new-syntax/lexer.ml[109,5733+2]..demos/calc-new-syntax/lexer.ml[136,6589+51])
                      Texp_match
                      expression (demos/calc-new-syntax/lexer.ml[109,5733+8]..demos/calc-new-syntax/lexer.ml[109,5733+65])
                        Texp_apply
                        expression (demos/calc-new-syntax/lexer.ml[109,5733+8]..demos/calc-new-syntax/lexer.ml[109,5733+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[109,5733+22]..demos/calc-new-syntax/lexer.ml[109,5733+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[109,5733+41]..demos/calc-new-syntax/lexer.ml[109,5733+58])
                              Texp_ident "__ocaml_lex_state/307"
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[109,5733+59]..demos/calc-new-syntax/lexer.ml[109,5733+65])
                              Texp_ident "lexbuf/306"
                        ]
                      [
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[110,5804+8]..demos/calc-new-syntax/lexer.ml[110,5804+9])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[110,5804+8]..demos/calc-new-syntax/lexer.ml[110,5804+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-new-syntax/lexer.ml[111,5817+0]..demos/calc-new-syntax/lexer.mll[15,6049+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-new-syntax/lexer.mll[13,5860+21]..demos/calc-new-syntax/lexer.mll[13,5860+25])
                                  Tpat_var "line/333"
                                expression (demos/calc-new-syntax/lexer.ml[115,5925+2]..demos/calc-new-syntax/lexer.ml[115,5925+81])
                                  Texp_apply
                                  expression (demos/calc-new-syntax/lexer.ml[115,5925+2]..demos/calc-new-syntax/lexer.ml[115,5925+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[115,5925+20]..demos/calc-new-syntax/lexer.ml[115,5925+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[115,5925+27]..demos/calc-new-syntax/lexer.ml[115,5925+54])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[115,5925+27]..demos/calc-new-syntax/lexer.ml[115,5925+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[115,5925+55]..demos/calc-new-syntax/lexer.ml[115,5925+81])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[115,5925+55]..demos/calc-new-syntax/lexer.ml[115,5925+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-new-syntax/lexer.mll[15,6049+4]..demos/calc-new-syntax/lexer.mll[15,6049+23])
                              Texp_tuple
                              [
                                expression (demos/calc-new-syntax/lexer.mll[15,6049+6]..demos/calc-new-syntax/lexer.mll[15,6049+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-new-syntax/lexer.mll[15,6049+11]..demos/calc-new-syntax/lexer.mll[15,6049+15])
                                      Texp_ident "line/333"
                                  ]
                                expression (demos/calc-new-syntax/lexer.mll[15,6049+17]..demos/calc-new-syntax/lexer.mll[15,6049+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[120,6113+4]..demos/calc-new-syntax/lexer.ml[120,6113+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[120,6113+4]..demos/calc-new-syntax/lexer.ml[120,6113+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-new-syntax/lexer.mll[18,6161+4]..demos/calc-new-syntax/lexer.mll[18,6161+19])
                            Texp_tuple
                            [
                              expression (demos/calc-new-syntax/lexer.mll[18,6161+6]..demos/calc-new-syntax/lexer.mll[18,6161+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc-new-syntax/lexer.mll[18,6161+12]..demos/calc-new-syntax/lexer.mll[18,6161+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[125,6221+4]..demos/calc-new-syntax/lexer.ml[125,6221+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[125,6221+4]..demos/calc-new-syntax/lexer.ml[125,6221+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-new-syntax/lexer.ml[126,6230+0]..demos/calc-new-syntax/lexer.mll[22,6456+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-new-syntax/lexer.mll[19,6273+15]..demos/calc-new-syntax/lexer.mll[19,6273+19])
                                  Tpat_var "line/334"
                                expression (demos/calc-new-syntax/lexer.ml[130,6332+2]..demos/calc-new-syntax/lexer.ml[130,6332+81])
                                  Texp_apply
                                  expression (demos/calc-new-syntax/lexer.ml[130,6332+2]..demos/calc-new-syntax/lexer.ml[130,6332+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[130,6332+20]..demos/calc-new-syntax/lexer.ml[130,6332+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[130,6332+27]..demos/calc-new-syntax/lexer.ml[130,6332+54])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[130,6332+27]..demos/calc-new-syntax/lexer.ml[130,6332+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[130,6332+55]..demos/calc-new-syntax/lexer.ml[130,6332+81])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[130,6332+55]..demos/calc-new-syntax/lexer.ml[130,6332+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-new-syntax/lexer.mll[22,6456+4]..demos/calc-new-syntax/lexer.mll[22,6456+33])
                              Texp_tuple
                              [
                                expression (demos/calc-new-syntax/lexer.mll[22,6456+6]..demos/calc-new-syntax/lexer.mll[22,6456+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-new-syntax/lexer.mll[22,6456+11]..demos/calc-new-syntax/lexer.mll[22,6456+24])
                                      Texp_apply
                                      expression (demos/calc-new-syntax/lexer.mll[22,6456+17]..demos/calc-new-syntax/lexer.mll[22,6456+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-new-syntax/lexer.mll[22,6456+12]..demos/calc-new-syntax/lexer.mll[22,6456+16])
                                            Texp_ident "line/334"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-new-syntax/lexer.mll[22,6456+19]..demos/calc-new-syntax/lexer.mll[22,6456+23])
                                            Texp_constant Const_string("\n",(demos/calc-new-syntax/lexer.mll[22,6456+20]..demos/calc-new-syntax/lexer.mll[22,6456+22]),None)
                                      ]
                                  ]
                                expression (demos/calc-new-syntax/lexer.mll[22,6456+26]..demos/calc-new-syntax/lexer.mll[22,6456+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[135,6530+4]..demos/calc-new-syntax/lexer.ml[135,6530+21])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[135,6530+4]..demos/calc-new-syntax/lexer.ml[135,6530+21])
                              Tpat_var "__ocaml_lex_state/332"
                          expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..demos/calc-new-syntax/lexer.ml[136,6589+51])
                            Texp_sequence
                            expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..demos/calc-new-syntax/lexer.ml[135,6530+57])
                              Texp_apply
                              expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..demos/calc-new-syntax/lexer.ml[135,6530+50])
                                Texp_field
                                expression (demos/calc-new-syntax/lexer.ml[135,6530+25]..demos/calc-new-syntax/lexer.ml[135,6530+31])
                                  Texp_ident "lexbuf/306"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[135,6530+51]..demos/calc-new-syntax/lexer.ml[135,6530+57])
                                    Texp_ident "lexbuf/306"
                              ]
                            expression (demos/calc-new-syntax/lexer.ml[136,6589+6]..demos/calc-new-syntax/lexer.ml[136,6589+51])
                              Texp_apply
                              expression (demos/calc-new-syntax/lexer.ml[136,6589+6]..demos/calc-new-syntax/lexer.ml[136,6589+26])
                                Texp_ident "__ocaml_lex_line_rec/302"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[136,6589+27]..demos/calc-new-syntax/lexer.ml[136,6589+33])
                                    Texp_ident "lexbuf/306"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[136,6589+34]..demos/calc-new-syntax/lexer.ml[136,6589+51])
                                    Texp_ident "__ocaml_lex_state/332"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[138,6642+4]..demos/calc-new-syntax/lexer.ml[138,6642+9])
          Tpat_var "token/303"
        expression (demos/calc-new-syntax/lexer.ml[138,6642+10]..demos/calc-new-syntax/lexer.ml[139,6661+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-new-syntax/lexer.ml[138,6642+10]..demos/calc-new-syntax/lexer.ml[138,6642+16])
                Tpat_var "lexbuf/335"
              expression (demos/calc-new-syntax/lexer.ml[139,6661+3]..demos/calc-new-syntax/lexer.ml[139,6661+33])
                Texp_apply
                expression (demos/calc-new-syntax/lexer.ml[139,6661+3]..demos/calc-new-syntax/lexer.ml[139,6661+24])
                  Texp_ident "__ocaml_lex_token_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[139,6661+25]..demos/calc-new-syntax/lexer.ml[139,6661+31])
                      Texp_ident "lexbuf/335"
                  <arg>
                    Nolabel
                    expression (demos/calc-new-syntax/lexer.ml[139,6661+32]..demos/calc-new-syntax/lexer.ml[139,6661+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc-new-syntax/lexer.ml[140,6695+4]..demos/calc-new-syntax/lexer.ml[140,6695+25])
          Tpat_var "__ocaml_lex_token_rec/304"
        expression (demos/calc-new-syntax/lexer.ml[140,6695+26]..demos/calc-new-syntax/lexer.ml[198,8201+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-new-syntax/lexer.ml[140,6695+26]..demos/calc-new-syntax/lexer.ml[140,6695+32])
                Tpat_var "lexbuf/336"
              expression (demos/calc-new-syntax/lexer.ml[140,6695+33]..demos/calc-new-syntax/lexer.ml[198,8201+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-new-syntax/lexer.ml[140,6695+33]..demos/calc-new-syntax/lexer.ml[140,6695+50])
                      Tpat_var "__ocaml_lex_state/337"
                    expression (demos/calc-new-syntax/lexer.ml[141,6748+2]..demos/calc-new-syntax/lexer.ml[198,8201+52])
                      Texp_match
                      expression (demos/calc-new-syntax/lexer.ml[141,6748+8]..demos/calc-new-syntax/lexer.ml[141,6748+65])
                        Texp_apply
                        expression (demos/calc-new-syntax/lexer.ml[141,6748+8]..demos/calc-new-syntax/lexer.ml[141,6748+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[141,6748+22]..demos/calc-new-syntax/lexer.ml[141,6748+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[141,6748+41]..demos/calc-new-syntax/lexer.ml[141,6748+58])
                              Texp_ident "__ocaml_lex_state/337"
                          <arg>
                            Nolabel
                            expression (demos/calc-new-syntax/lexer.ml[141,6748+59]..demos/calc-new-syntax/lexer.ml[141,6748+65])
                              Texp_ident "lexbuf/336"
                        ]
                      [
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[142,6819+8]..demos/calc-new-syntax/lexer.ml[142,6819+9])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[142,6819+8]..demos/calc-new-syntax/lexer.ml[142,6819+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-new-syntax/lexer.mll[29,6871+4]..demos/calc-new-syntax/lexer.mll[29,6871+20])
                            Texp_apply
                            expression (demos/calc-new-syntax/lexer.mll[29,6871+6]..demos/calc-new-syntax/lexer.mll[29,6871+11])
                              Texp_ident "token/303"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-new-syntax/lexer.mll[29,6871+12]..demos/calc-new-syntax/lexer.mll[29,6871+18])
                                  Texp_ident "lexbuf/336"
                            ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[147,6932+4]..demos/calc-new-syntax/lexer.ml[147,6932+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[147,6932+4]..demos/calc-new-syntax/lexer.ml[147,6932+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-new-syntax/lexer.mll[31,6980+4]..demos/calc-new-syntax/lexer.mll[31,6980+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[152,7032+4]..demos/calc-new-syntax/lexer.ml[152,7032+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[152,7032+4]..demos/calc-new-syntax/lexer.ml[152,7032+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-new-syntax/lexer.ml[153,7041+0]..demos/calc-new-syntax/lexer.mll[33,7265+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-new-syntax/lexer.mll[32,7084+16]..demos/calc-new-syntax/lexer.mll[32,7084+17])
                                  Tpat_var "i/339"
                                expression (demos/calc-new-syntax/lexer.ml[157,7141+2]..demos/calc-new-syntax/lexer.ml[157,7141+81])
                                  Texp_apply
                                  expression (demos/calc-new-syntax/lexer.ml[157,7141+2]..demos/calc-new-syntax/lexer.ml[157,7141+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[157,7141+20]..demos/calc-new-syntax/lexer.ml[157,7141+26])
                                        Texp_ident "lexbuf/336"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[157,7141+27]..demos/calc-new-syntax/lexer.ml[157,7141+54])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[157,7141+27]..demos/calc-new-syntax/lexer.ml[157,7141+33])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.ml[157,7141+55]..demos/calc-new-syntax/lexer.ml[157,7141+81])
                                        Texp_field
                                        expression (demos/calc-new-syntax/lexer.ml[157,7141+55]..demos/calc-new-syntax/lexer.ml[157,7141+61])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-new-syntax/lexer.mll[33,7265+4]..demos/calc-new-syntax/lexer.mll[33,7265+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc-new-syntax/lexer.mll[33,7265+10]..demos/calc-new-syntax/lexer.mll[33,7265+27])
                                  Texp_apply
                                  expression (demos/calc-new-syntax/lexer.mll[33,7265+11]..demos/calc-new-syntax/lexer.mll[33,7265+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-new-syntax/lexer.mll[33,7265+25]..demos/calc-new-syntax/lexer.mll[33,7265+26])
                                        Texp_ident "i/339"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[162,7335+4]..demos/calc-new-syntax/lexer.ml[162,7335+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[162,7335+4]..demos/calc-new-syntax/lexer.ml[162,7335+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc-new-syntax/lexer.mll[35,7383+4]..demos/calc-new-syntax/lexer.mll[35,7383+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[167,7436+4]..demos/calc-new-syntax/lexer.ml[167,7436+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[167,7436+4]..demos/calc-new-syntax/lexer.ml[167,7436+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc-new-syntax/lexer.mll[37,7484+4]..demos/calc-new-syntax/lexer.mll[37,7484+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[172,7538+4]..demos/calc-new-syntax/lexer.ml[172,7538+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[172,7538+4]..demos/calc-new-syntax/lexer.ml[172,7538+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc-new-syntax/lexer.mll[39,7586+4]..demos/calc-new-syntax/lexer.mll[39,7586+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[177,7640+4]..demos/calc-new-syntax/lexer.ml[177,7640+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[177,7640+4]..demos/calc-new-syntax/lexer.ml[177,7640+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc-new-syntax/lexer.mll[41,7688+4]..demos/calc-new-syntax/lexer.mll[41,7688+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[182,7740+4]..demos/calc-new-syntax/lexer.ml[182,7740+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[182,7740+4]..demos/calc-new-syntax/lexer.ml[182,7740+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc-new-syntax/lexer.mll[43,7788+4]..demos/calc-new-syntax/lexer.mll[43,7788+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[187,7843+4]..demos/calc-new-syntax/lexer.ml[187,7843+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[187,7843+4]..demos/calc-new-syntax/lexer.ml[187,7843+5])
                              Tpat_constant Const_int 8
                          expression (demos/calc-new-syntax/lexer.mll[45,7891+4]..demos/calc-new-syntax/lexer.mll[45,7891+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[192,7946+4]..demos/calc-new-syntax/lexer.ml[192,7946+5])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[192,7946+4]..demos/calc-new-syntax/lexer.ml[192,7946+5])
                              Tpat_constant Const_int 9
                          expression (demos/calc-new-syntax/lexer.mll[47,7994+4]..demos/calc-new-syntax/lexer.mll[47,7994+107])
                            Texp_apply
                            expression (demos/calc-new-syntax/lexer.mll[47,7994+6]..demos/calc-new-syntax/lexer.mll[47,7994+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-new-syntax/lexer.mll[47,7994+12]..demos/calc-new-syntax/lexer.mll[47,7994+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc-new-syntax/lexer.mll[47,7994+19]..demos/calc-new-syntax/lexer.mll[47,7994+104])
                                      Texp_apply
                                      expression (demos/calc-new-syntax/lexer.mll[47,7994+20]..demos/calc-new-syntax/lexer.mll[47,7994+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost,None)
                                                  expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost,None)
                                                          expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc-new-syntax/lexer.mll[47,7994+35]..demos/calc-new-syntax/lexer.mll[47,7994+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-new-syntax/lexer.mll[47,7994+75]..demos/calc-new-syntax/lexer.mll[47,7994+103])
                                            Texp_apply
                                            expression (demos/calc-new-syntax/lexer.mll[47,7994+76]..demos/calc-new-syntax/lexer.mll[47,7994+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc-new-syntax/lexer.mll[47,7994+96]..demos/calc-new-syntax/lexer.mll[47,7994+102])
                                                  Texp_ident "lexbuf/336"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc-new-syntax/lexer.ml[197,8142+4]..demos/calc-new-syntax/lexer.ml[197,8142+21])
                            Tpat_value
                            pattern (demos/calc-new-syntax/lexer.ml[197,8142+4]..demos/calc-new-syntax/lexer.ml[197,8142+21])
                              Tpat_var "__ocaml_lex_state/338"
                          expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..demos/calc-new-syntax/lexer.ml[198,8201+52])
                            Texp_sequence
                            expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..demos/calc-new-syntax/lexer.ml[197,8142+57])
                              Texp_apply
                              expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..demos/calc-new-syntax/lexer.ml[197,8142+50])
                                Texp_field
                                expression (demos/calc-new-syntax/lexer.ml[197,8142+25]..demos/calc-new-syntax/lexer.ml[197,8142+31])
                                  Texp_ident "lexbuf/336"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[197,8142+51]..demos/calc-new-syntax/lexer.ml[197,8142+57])
                                    Texp_ident "lexbuf/336"
                              ]
                            expression (demos/calc-new-syntax/lexer.ml[198,8201+6]..demos/calc-new-syntax/lexer.ml[198,8201+52])
                              Texp_apply
                              expression (demos/calc-new-syntax/lexer.ml[198,8201+6]..demos/calc-new-syntax/lexer.ml[198,8201+27])
                                Texp_ident "__ocaml_lex_token_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[198,8201+28]..demos/calc-new-syntax/lexer.ml[198,8201+34])
                                    Texp_ident "lexbuf/336"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-new-syntax/lexer.ml[198,8201+35]..demos/calc-new-syntax/lexer.ml[198,8201+52])
                                    Texp_ident "__ocaml_lex_state/338"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(setglobal Dune__exe__Lexer!
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (letrec
      (line/301
         (function lexbuf/305
           (funct-body Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(106)<ghost>:5639-5680
             (before Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(107):5651-5680
               (after Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(107):5651-5680
                 (apply __ocaml_lex_line_rec/302 lexbuf/305 0)))))
        __ocaml_lex_line_rec/302
          (function lexbuf/306 __ocaml_lex_state/307[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(108)<ghost>:5706-6640
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(109):5735-6640
                (let
                  (__ocaml_lex_state/332 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(109):5741-5798
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/307
                         lexbuf/306)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/332) (exit 1)
                      (switch* __ocaml_lex_state/332
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(111):5817-6072
                          (let
                            (line/333 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(115):5927-6006
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/306 (field_int 4 lexbuf/306)
                                   (field_int 5 lexbuf/306))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(15):6053-6072
                              (makeblock 0 (*,int) (makeblock 0 line/333) 1))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(18):6165-6180
                          [0: 0 0])
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(126):6230-6489
                          (let
                            (line/334 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(130):6334-6413
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/306 (field_int 4 lexbuf/306)
                                   (field_int 5 lexbuf/306))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(22):6460-6489
                              (makeblock 0 (*,int)
                                (makeblock 0
                                  (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(22):6467-6480
                                    (apply (field_imm 27 (global Stdlib!))
                                      line/334 "\n")))
                                0))))))
                   with (1)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(135):6555-6640
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(135):6555-6587
                          (apply (field_imm 0 lexbuf/306) lexbuf/306))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(136):6595-6640
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(136):6595-6640
                            (apply __ocaml_lex_line_rec/302 lexbuf/306
                              __ocaml_lex_state/332))))))))))
        token/303
          (function lexbuf/335
            (funct-body Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(138)<ghost>:6652-6694
              (before Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(139):6664-6694
                (after Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(139):6664-6694
                  (apply __ocaml_lex_token_rec/304 lexbuf/335 5)))))
        __ocaml_lex_token_rec/304
          (function lexbuf/336 __ocaml_lex_state/337[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(140)<ghost>:6721-8253
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(141):6750-8253
                (let
                  (__ocaml_lex_state/338 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(141):6756-6813
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/337
                         lexbuf/336)))
                  (catch
                    (if (isout 9 __ocaml_lex_state/338) (exit 2)
                      (switch* __ocaml_lex_state/338
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(29):6875-6891
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(29):6875-6891
                            (apply token/303 lexbuf/336)))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(31):6984-6991
                          5)
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(153):7041-7294
                          (let
                            (i/339 =
                               (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(157):7143-7222
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/336 (field_int 4 lexbuf/336)
                                   (field_int 5 lexbuf/336))))
                            (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(33):7269-7294
                              (makeblock 0 (int)
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(33):7275-7292
                                  (caml_int_of_string i/339))))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(35):7387-7395
                          2)
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(37):7488-7497
                          3)
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(39):7590-7599
                          0)
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(41):7692-7699
                          6)
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(43):7792-7802
                          4)
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(45):7895-7905
                          1)
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):7998-8101
                          (raise
                            (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):7998-8101
                              (makeblock 0 Error/275
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):8013-8098
                                  (apply
                                    (field_imm 3 (global Stdlib__Printf!))
                                    [0:
                                     [11:
                                      "At offset "
                                      [4:
                                       0 0 0
                                       [11: ": unexpected character.\n" 0]]]
                                     "At offset %d: unexpected character.\n"]
                                    (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):8069-8097
                                      (apply
                                        (field_imm 9
                                          (global Stdlib__Lexing!))
                                        lexbuf/336))))))))))
                   with (2)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(197):8167-8253
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(197):8167-8199
                          (apply (field_imm 0 lexbuf/336) lexbuf/336))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(198):8207-8253
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(198):8207-8253
                            (apply __ocaml_lex_token_rec/304 lexbuf/336
                              __ocaml_lex_state/338)))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/275 __ocaml_lex_tables/276 line/301
          __ocaml_lex_line_rec/302 token/303 __ocaml_lex_token_rec/304)))))
(setglobal Dune__exe__Lexer!
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (letrec
      (line/301
         (function lexbuf/305
           (funct-body Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(106)<ghost>:5639-5680
             (before Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(107):5651-5680
               (after Dune__exe__Lexer.line demos/calc-new-syntax/lexer.ml(107):5651-5680
                 (apply __ocaml_lex_line_rec/302 lexbuf/305 0)))))
        __ocaml_lex_line_rec/302
          (function lexbuf/306 __ocaml_lex_state/307[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(108)<ghost>:5706-6640
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(109):5735-6640
                (let
                  (__ocaml_lex_state/332 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(109):5741-5798
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/307
                         lexbuf/306)))
                  (if (isout 2 __ocaml_lex_state/332)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(135):6555-6640
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(135):6555-6587
                          (apply (field_imm 0 lexbuf/306) lexbuf/306))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(136):6595-6640
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(136):6595-6640
                            (apply __ocaml_lex_line_rec/302 lexbuf/306
                              __ocaml_lex_state/332)))))
                    (switch* __ocaml_lex_state/332
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(111):5817-6072
                        (let
                          (line/333 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(115):5927-6006
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/306 (field_int 4 lexbuf/306)
                                 (field_int 5 lexbuf/306))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(15):6053-6072
                            (makeblock 0 (*,int) (makeblock 0 line/333) 1))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(18):6165-6180
                        [0: 0 0])
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(126):6230-6489
                        (let
                          (line/334 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.ml(130):6334-6413
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/306 (field_int 4 lexbuf/306)
                                 (field_int 5 lexbuf/306))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(22):6460-6489
                            (makeblock 0 (*,int)
                              (makeblock 0
                                (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-new-syntax/lexer.mll(22):6467-6480
                                  (apply (field_imm 27 (global Stdlib!))
                                    line/334 "\n")))
                              0))))))))))
        token/303
          (function lexbuf/335
            (funct-body Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(138)<ghost>:6652-6694
              (before Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(139):6664-6694
                (after Dune__exe__Lexer.token demos/calc-new-syntax/lexer.ml(139):6664-6694
                  (apply __ocaml_lex_token_rec/304 lexbuf/335 5)))))
        __ocaml_lex_token_rec/304
          (function lexbuf/336 __ocaml_lex_state/337[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(140)<ghost>:6721-8253
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(141):6750-8253
                (let
                  (__ocaml_lex_state/338 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(141):6756-6813
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/337
                         lexbuf/336)))
                  (if (isout 9 __ocaml_lex_state/338)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(197):8167-8253
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(197):8167-8199
                          (apply (field_imm 0 lexbuf/336) lexbuf/336))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(198):8207-8253
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(198):8207-8253
                            (apply __ocaml_lex_token_rec/304 lexbuf/336
                              __ocaml_lex_state/338)))))
                    (switch* __ocaml_lex_state/338
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(29):6875-6891
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(29):6875-6891
                          (apply token/303 lexbuf/336)))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(31):6984-6991
                        5)
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(153):7041-7294
                        (let
                          (i/339 =
                             (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.ml(157):7143-7222
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/336 (field_int 4 lexbuf/336)
                                 (field_int 5 lexbuf/336))))
                          (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(33):7269-7294
                            (makeblock 0 (int)
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(33):7275-7292
                                (caml_int_of_string i/339))))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(35):7387-7395
                        2)
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(37):7488-7497
                        3)
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(39):7590-7599
                        0)
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(41):7692-7699
                        6)
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(43):7792-7802
                        4)
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(45):7895-7905
                        1)
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):7998-8101
                        (raise
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):7998-8101
                            (makeblock 0 Error/275
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):8013-8098
                                (apply (field_imm 3 (global Stdlib__Printf!))
                                  [0:
                                   [11:
                                    "At offset "
                                    [4:
                                     0 0 0
                                     [11: ": unexpected character.\n" 0]]]
                                   "At offset %d: unexpected character.\n"]
                                  (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-new-syntax/lexer.mll(47):8069-8097
                                    (apply
                                      (field_imm 9 (global Stdlib__Lexing!))
                                      lexbuf/336)))))))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/275 __ocaml_lex_tables/276 line/301
          __ocaml_lex_line_rec/302 token/303 __ocaml_lex_token_rec/304)))))

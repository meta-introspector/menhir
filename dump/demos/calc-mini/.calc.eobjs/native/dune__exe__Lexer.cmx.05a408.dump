[
  structure_item (demos/calc-mini/lexer.mll[2,34+2]..[2,34+13])
    Pstr_open Fresh
    module_expr (demos/calc-mini/lexer.mll[2,34+7]..[2,34+13])
      Pmod_ident "Parser" (demos/calc-mini/lexer.mll[2,34+7]..[2,34+13])
  structure_item (demos/calc-mini/lexer.mll[4,49+2]..[4,49+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-mini/lexer.mll[4,49+2]..[4,49+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc-mini/lexer.mll[4,49+21]..[4,49+27])
                  Ptyp_constr "string" (demos/calc-mini/lexer.mll[4,49+21]..[4,49+27])
                  []
              ]
              None
  structure_item (demos/calc-mini/lexer.ml[9,110+0]..[101,5545+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc-mini/lexer.ml[9,110+4]..[9,110+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc-mini/lexer.ml[9,110+4]..[9,110+22])
        expression (demos/calc-mini/lexer.ml[9,110+25]..[101,5545+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc-mini/lexer.ml[10,137+2]..[10,137+17])
              expression (demos/calc-mini/lexer.ml[11,157+3]..[12,227+53])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-mini/lexer.ml[11,157+4]..[12,227+52]),None)
            "Lexing.lex_backtrk" (demos/calc-mini/lexer.ml[13,282+2]..[13,282+20])
              expression (demos/calc-mini/lexer.ml[14,305+3]..[15,375+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-mini/lexer.ml[14,305+4]..[15,375+52]),None)
            "Lexing.lex_default" (demos/calc-mini/lexer.ml[16,430+2]..[16,430+20])
              expression (demos/calc-mini/lexer.ml[17,453+3]..[18,523+53])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-mini/lexer.ml[17,453+4]..[18,523+52]),None)
            "Lexing.lex_trans" (demos/calc-mini/lexer.ml[19,578+2]..[19,578+18])
              expression (demos/calc-mini/lexer.ml[20,599+3]..[53,2909+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\r\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\t\000\ndemos/calc-mini/lexer.ml[20,599+4]..[53,2909+52]),None)
            "Lexing.lex_check" (demos/calc-mini/lexer.ml[54,2964+2]..[54,2964+18])
              expression (demos/calc-mini/lexer.ml[55,2985+3]..[88,5295+53])
                Pexp_constant PConst_stringdemos/calc-mini/lexer.ml[55,2985+4]..[88,5295+52]),None)
            "Lexing.lex_base_code" (demos/calc-mini/lexer.ml[89,5350+2]..[89,5350+22])
              expression (demos/calc-mini/lexer.ml[90,5375+3]..[90,5375+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[90,5375+4]..[90,5375+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc-mini/lexer.ml[91,5382+2]..[91,5382+25])
              expression (demos/calc-mini/lexer.ml[92,5410+3]..[92,5410+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[92,5410+4]..[92,5410+4]),None)
            "Lexing.lex_default_code" (demos/calc-mini/lexer.ml[93,5417+2]..[93,5417+25])
              expression (demos/calc-mini/lexer.ml[94,5445+3]..[94,5445+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[94,5445+4]..[94,5445+4]),None)
            "Lexing.lex_trans_code" (demos/calc-mini/lexer.ml[95,5452+2]..[95,5452+23])
              expression (demos/calc-mini/lexer.ml[96,5478+3]..[96,5478+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[96,5478+4]..[96,5478+4]),None)
            "Lexing.lex_check_code" (demos/calc-mini/lexer.ml[97,5485+2]..[97,5485+23])
              expression (demos/calc-mini/lexer.ml[98,5511+3]..[98,5511+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[98,5511+4]..[98,5511+4]),None)
            "Lexing.lex_code" (demos/calc-mini/lexer.ml[99,5518+2]..[99,5518+17])
              expression (demos/calc-mini/lexer.ml[100,5538+3]..[100,5538+5])
                Pexp_constant PConst_string("",(demos/calc-mini/lexer.ml[100,5538+4]..[100,5538+4]),None)
          ]
          None
    ]
  structure_item (demos/calc-mini/lexer.ml[103,5548+0]..[185,7753+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc-mini/lexer.ml[103,5548+8]..[103,5548+12])
          Ppat_var "line" (demos/calc-mini/lexer.ml[103,5548+8]..[103,5548+12])
        expression (demos/calc-mini/lexer.ml[103,5548+13]..[104,5570+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-mini/lexer.ml[103,5548+13]..[103,5548+19])
            Ppat_var "lexbuf" (demos/calc-mini/lexer.ml[103,5548+13]..[103,5548+19])
          expression (demos/calc-mini/lexer.ml[104,5570+3]..[104,5570+32])
            Pexp_apply
            expression (demos/calc-mini/lexer.ml[104,5570+3]..[104,5570+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc-mini/lexer.ml[104,5570+3]..[104,5570+23])
            [
              <arg>
              Nolabel
                expression (demos/calc-mini/lexer.ml[104,5570+24]..[104,5570+30])
                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[104,5570+24]..[104,5570+30])
              <arg>
              Nolabel
                expression (demos/calc-mini/lexer.ml[104,5570+31]..[104,5570+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc-mini/lexer.ml[105,5603+4]..[105,5603+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc-mini/lexer.ml[105,5603+4]..[105,5603+24])
        expression (demos/calc-mini/lexer.ml[105,5603+25]..[133,6451+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-mini/lexer.ml[105,5603+25]..[105,5603+31])
            Ppat_var "lexbuf" (demos/calc-mini/lexer.ml[105,5603+25]..[105,5603+31])
          expression (demos/calc-mini/lexer.ml[105,5603+32]..[133,6451+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-mini/lexer.ml[105,5603+32]..[105,5603+49])
              Ppat_var "__ocaml_lex_state" (demos/calc-mini/lexer.ml[105,5603+32]..[105,5603+49])
            expression (demos/calc-mini/lexer.ml[106,5655+2]..[133,6451+51])
              Pexp_match
              expression (demos/calc-mini/lexer.ml[106,5655+8]..[106,5655+65])
                Pexp_apply
                expression (demos/calc-mini/lexer.ml[106,5655+8]..[106,5655+21])
                  Pexp_ident "Lexing.engine" (demos/calc-mini/lexer.ml[106,5655+8]..[106,5655+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[106,5655+22]..[106,5655+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-mini/lexer.ml[106,5655+22]..[106,5655+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[106,5655+41]..[106,5655+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-mini/lexer.ml[106,5655+41]..[106,5655+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[106,5655+59]..[106,5655+65])
                      Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[106,5655+59]..[106,5655+65])
                ]
              [
                <case>
                  pattern (demos/calc-mini/lexer.ml[107,5726+8]..[107,5726+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-mini/lexer.ml[108,5739+0]..demos/calc-mini/lexer.mll[15,5953+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-mini/lexer.mll[13,5776+21]..[13,5776+25])
                          Ppat_var "line" (demos/calc-mini/lexer.mll[13,5776+21]..[13,5776+25])
                        expression (demos/calc-mini/lexer.ml[112,5835+2]..[112,5835+81])
                          Pexp_apply
                          expression (demos/calc-mini/lexer.ml[112,5835+2]..[112,5835+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-mini/lexer.ml[112,5835+2]..[112,5835+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[112,5835+20]..[112,5835+26])
                                Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[112,5835+20]..[112,5835+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[112,5835+27]..[112,5835+54])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[112,5835+27]..[112,5835+33])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[112,5835+27]..[112,5835+33])
                                "Lexing.lex_start_pos" (demos/calc-mini/lexer.ml[112,5835+34]..[112,5835+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[112,5835+55]..[112,5835+81])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[112,5835+55]..[112,5835+61])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[112,5835+55]..[112,5835+61])
                                "Lexing.lex_curr_pos" (demos/calc-mini/lexer.ml[112,5835+62]..[112,5835+81])
                          ]
                    ]
                    expression (demos/calc-mini/lexer.mll[15,5953+4]..[15,5953+23])
                      Pexp_tuple
                      [
                        expression (demos/calc-mini/lexer.mll[15,5953+6]..[15,5953+15])
                          Pexp_construct "Some" (demos/calc-mini/lexer.mll[15,5953+6]..[15,5953+10])
                          Some
                            expression (demos/calc-mini/lexer.mll[15,5953+11]..[15,5953+15])
                              Pexp_ident "line" (demos/calc-mini/lexer.mll[15,5953+11]..[15,5953+15])
                        expression (demos/calc-mini/lexer.mll[15,5953+17]..[15,5953+21])
                          Pexp_construct "true" (demos/calc-mini/lexer.mll[15,5953+17]..[15,5953+21])
                          None
                      ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[117,6011+4]..[117,6011+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-mini/lexer.mll[18,6053+4]..[18,6053+19])
                    Pexp_tuple
                    [
                      expression (demos/calc-mini/lexer.mll[18,6053+6]..[18,6053+10])
                        Pexp_construct "None" (demos/calc-mini/lexer.mll[18,6053+6]..[18,6053+10])
                        None
                      expression (demos/calc-mini/lexer.mll[18,6053+12]..[18,6053+17])
                        Pexp_construct "false" (demos/calc-mini/lexer.mll[18,6053+12]..[18,6053+17])
                        None
                    ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[122,6107+4]..[122,6107+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-mini/lexer.ml[123,6116+0]..demos/calc-mini/lexer.mll[22,6324+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-mini/lexer.mll[19,6153+15]..[19,6153+19])
                          Ppat_var "line" (demos/calc-mini/lexer.mll[19,6153+15]..[19,6153+19])
                        expression (demos/calc-mini/lexer.ml[127,6206+2]..[127,6206+81])
                          Pexp_apply
                          expression (demos/calc-mini/lexer.ml[127,6206+2]..[127,6206+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-mini/lexer.ml[127,6206+2]..[127,6206+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[127,6206+20]..[127,6206+26])
                                Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[127,6206+20]..[127,6206+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[127,6206+27]..[127,6206+54])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[127,6206+27]..[127,6206+33])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[127,6206+27]..[127,6206+33])
                                "Lexing.lex_start_pos" (demos/calc-mini/lexer.ml[127,6206+34]..[127,6206+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[127,6206+55]..[127,6206+81])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[127,6206+55]..[127,6206+61])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[127,6206+55]..[127,6206+61])
                                "Lexing.lex_curr_pos" (demos/calc-mini/lexer.ml[127,6206+62]..[127,6206+81])
                          ]
                    ]
                    expression (demos/calc-mini/lexer.mll[22,6324+4]..[22,6324+33])
                      Pexp_tuple
                      [
                        expression (demos/calc-mini/lexer.mll[22,6324+6]..[22,6324+24])
                          Pexp_construct "Some" (demos/calc-mini/lexer.mll[22,6324+6]..[22,6324+10])
                          Some
                            expression (demos/calc-mini/lexer.mll[22,6324+11]..[22,6324+24])
                              Pexp_apply
                              expression (demos/calc-mini/lexer.mll[22,6324+17]..[22,6324+18])
                                Pexp_ident "^" (demos/calc-mini/lexer.mll[22,6324+17]..[22,6324+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-mini/lexer.mll[22,6324+12]..[22,6324+16])
                                    Pexp_ident "line" (demos/calc-mini/lexer.mll[22,6324+12]..[22,6324+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc-mini/lexer.mll[22,6324+19]..[22,6324+23])
                                    Pexp_constant PConst_string("\n",(demos/calc-mini/lexer.mll[22,6324+20]..[22,6324+22]),None)
                              ]
                        expression (demos/calc-mini/lexer.mll[22,6324+26]..[22,6324+31])
                          Pexp_construct "false" (demos/calc-mini/lexer.mll[22,6324+26]..[22,6324+31])
                          None
                      ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[132,6392+4]..[132,6392+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-mini/lexer.ml[132,6392+4]..[132,6392+21])
                  expression (demos/calc-mini/lexer.ml[132,6392+25]..[133,6451+51])
                    Pexp_sequence
                    expression (demos/calc-mini/lexer.ml[132,6392+25]..[132,6392+57])
                      Pexp_apply
                      expression (demos/calc-mini/lexer.ml[132,6392+25]..[132,6392+50])
                        Pexp_field
                        expression (demos/calc-mini/lexer.ml[132,6392+25]..[132,6392+31])
                          Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[132,6392+25]..[132,6392+31])
                        "Lexing.refill_buff" (demos/calc-mini/lexer.ml[132,6392+32]..[132,6392+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[132,6392+51]..[132,6392+57])
                            Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[132,6392+51]..[132,6392+57])
                      ]
                    expression (demos/calc-mini/lexer.ml[133,6451+6]..[133,6451+51])
                      Pexp_apply
                      expression (demos/calc-mini/lexer.ml[133,6451+6]..[133,6451+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc-mini/lexer.ml[133,6451+6]..[133,6451+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[133,6451+27]..[133,6451+33])
                            Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[133,6451+27]..[133,6451+33])
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[133,6451+34]..[133,6451+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-mini/lexer.ml[133,6451+34]..[133,6451+51])
                      ]
              ]
      <def>
        pattern (demos/calc-mini/lexer.ml[135,6504+4]..[135,6504+9])
          Ppat_var "token" (demos/calc-mini/lexer.ml[135,6504+4]..[135,6504+9])
        expression (demos/calc-mini/lexer.ml[135,6504+10]..[136,6523+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-mini/lexer.ml[135,6504+10]..[135,6504+16])
            Ppat_var "lexbuf" (demos/calc-mini/lexer.ml[135,6504+10]..[135,6504+16])
          expression (demos/calc-mini/lexer.ml[136,6523+3]..[136,6523+33])
            Pexp_apply
            expression (demos/calc-mini/lexer.ml[136,6523+3]..[136,6523+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc-mini/lexer.ml[136,6523+3]..[136,6523+24])
            [
              <arg>
              Nolabel
                expression (demos/calc-mini/lexer.ml[136,6523+25]..[136,6523+31])
                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[136,6523+25]..[136,6523+31])
              <arg>
              Nolabel
                expression (demos/calc-mini/lexer.ml[136,6523+32]..[136,6523+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc-mini/lexer.ml[137,6557+4]..[137,6557+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc-mini/lexer.ml[137,6557+4]..[137,6557+25])
        expression (demos/calc-mini/lexer.ml[137,6557+26]..[185,7753+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-mini/lexer.ml[137,6557+26]..[137,6557+32])
            Ppat_var "lexbuf" (demos/calc-mini/lexer.ml[137,6557+26]..[137,6557+32])
          expression (demos/calc-mini/lexer.ml[137,6557+33]..[185,7753+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-mini/lexer.ml[137,6557+33]..[137,6557+50])
              Ppat_var "__ocaml_lex_state" (demos/calc-mini/lexer.ml[137,6557+33]..[137,6557+50])
            expression (demos/calc-mini/lexer.ml[138,6610+2]..[185,7753+52])
              Pexp_match
              expression (demos/calc-mini/lexer.ml[138,6610+8]..[138,6610+65])
                Pexp_apply
                expression (demos/calc-mini/lexer.ml[138,6610+8]..[138,6610+21])
                  Pexp_ident "Lexing.engine" (demos/calc-mini/lexer.ml[138,6610+8]..[138,6610+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[138,6610+22]..[138,6610+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-mini/lexer.ml[138,6610+22]..[138,6610+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[138,6610+41]..[138,6610+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-mini/lexer.ml[138,6610+41]..[138,6610+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-mini/lexer.ml[138,6610+59]..[138,6610+65])
                      Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[138,6610+59]..[138,6610+65])
                ]
              [
                <case>
                  pattern (demos/calc-mini/lexer.ml[139,6681+8]..[139,6681+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-mini/lexer.mll[29,6727+4]..[29,6727+20])
                    Pexp_apply
                    expression (demos/calc-mini/lexer.mll[29,6727+6]..[29,6727+11])
                      Pexp_ident "token" (demos/calc-mini/lexer.mll[29,6727+6]..[29,6727+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-mini/lexer.mll[29,6727+12]..[29,6727+18])
                          Pexp_ident "lexbuf" (demos/calc-mini/lexer.mll[29,6727+12]..[29,6727+18])
                    ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[144,6782+4]..[144,6782+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-mini/lexer.mll[31,6824+4]..[31,6824+11])
                    Pexp_construct "EOL" (demos/calc-mini/lexer.mll[31,6824+6]..[31,6824+9])
                    None
                <case>
                  pattern (demos/calc-mini/lexer.ml[149,6870+4]..[149,6870+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-mini/lexer.ml[150,6879+0]..demos/calc-mini/lexer.mll[33,7085+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-mini/lexer.mll[32,6916+16]..[32,6916+17])
                          Ppat_var "i" (demos/calc-mini/lexer.mll[32,6916+16]..[32,6916+17])
                        expression (demos/calc-mini/lexer.ml[154,6967+2]..[154,6967+81])
                          Pexp_apply
                          expression (demos/calc-mini/lexer.ml[154,6967+2]..[154,6967+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-mini/lexer.ml[154,6967+2]..[154,6967+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[154,6967+20]..[154,6967+26])
                                Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[154,6967+20]..[154,6967+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[154,6967+27]..[154,6967+54])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[154,6967+27]..[154,6967+33])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[154,6967+27]..[154,6967+33])
                                "Lexing.lex_start_pos" (demos/calc-mini/lexer.ml[154,6967+34]..[154,6967+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.ml[154,6967+55]..[154,6967+81])
                                Pexp_field
                                expression (demos/calc-mini/lexer.ml[154,6967+55]..[154,6967+61])
                                  Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[154,6967+55]..[154,6967+61])
                                "Lexing.lex_curr_pos" (demos/calc-mini/lexer.ml[154,6967+62]..[154,6967+81])
                          ]
                    ]
                    expression (demos/calc-mini/lexer.mll[33,7085+4]..[33,7085+29])
                      Pexp_construct "INT" (demos/calc-mini/lexer.mll[33,7085+6]..[33,7085+9])
                      Some
                        expression (demos/calc-mini/lexer.mll[33,7085+10]..[33,7085+27])
                          Pexp_apply
                          expression (demos/calc-mini/lexer.mll[33,7085+11]..[33,7085+24])
                            Pexp_ident "int_of_string" (demos/calc-mini/lexer.mll[33,7085+11]..[33,7085+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-mini/lexer.mll[33,7085+25]..[33,7085+26])
                                Pexp_ident "i" (demos/calc-mini/lexer.mll[33,7085+25]..[33,7085+26])
                          ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[159,7149+4]..[159,7149+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc-mini/lexer.mll[35,7191+4]..[35,7191+12])
                    Pexp_construct "PLUS" (demos/calc-mini/lexer.mll[35,7191+6]..[35,7191+10])
                    None
                <case>
                  pattern (demos/calc-mini/lexer.ml[164,7238+4]..[164,7238+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc-mini/lexer.mll[37,7280+4]..[37,7280+13])
                    Pexp_construct "TIMES" (demos/calc-mini/lexer.mll[37,7280+6]..[37,7280+11])
                    None
                <case>
                  pattern (demos/calc-mini/lexer.ml[169,7328+4]..[169,7328+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc-mini/lexer.mll[39,7370+4]..[39,7370+14])
                    Pexp_construct "LPAREN" (demos/calc-mini/lexer.mll[39,7370+6]..[39,7370+12])
                    None
                <case>
                  pattern (demos/calc-mini/lexer.ml[174,7419+4]..[174,7419+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc-mini/lexer.mll[41,7461+4]..[41,7461+14])
                    Pexp_construct "RPAREN" (demos/calc-mini/lexer.mll[41,7461+6]..[41,7461+12])
                    None
                <case>
                  pattern (demos/calc-mini/lexer.ml[179,7510+4]..[179,7510+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc-mini/lexer.mll[43,7552+4]..[43,7552+107])
                    Pexp_apply
                    expression (demos/calc-mini/lexer.mll[43,7552+6]..[43,7552+11])
                      Pexp_ident "raise" (demos/calc-mini/lexer.mll[43,7552+6]..[43,7552+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-mini/lexer.mll[43,7552+12]..[43,7552+105])
                          Pexp_construct "Error" (demos/calc-mini/lexer.mll[43,7552+13]..[43,7552+18])
                          Some
                            expression (demos/calc-mini/lexer.mll[43,7552+19]..[43,7552+104])
                              Pexp_apply
                              expression (demos/calc-mini/lexer.mll[43,7552+20]..[43,7552+34])
                                Pexp_ident "Printf.sprintf" (demos/calc-mini/lexer.mll[43,7552+20]..[43,7552+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-mini/lexer.mll[43,7552+35]..[43,7552+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc-mini/lexer.mll[43,7552+36]..[43,7552+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc-mini/lexer.mll[43,7552+75]..[43,7552+103])
                                    Pexp_apply
                                    expression (demos/calc-mini/lexer.mll[43,7552+76]..[43,7552+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc-mini/lexer.mll[43,7552+76]..[43,7552+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc-mini/lexer.mll[43,7552+96]..[43,7552+102])
                                          Pexp_ident "lexbuf" (demos/calc-mini/lexer.mll[43,7552+96]..[43,7552+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc-mini/lexer.ml[184,7694+4]..[184,7694+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-mini/lexer.ml[184,7694+4]..[184,7694+21])
                  expression (demos/calc-mini/lexer.ml[184,7694+25]..[185,7753+52])
                    Pexp_sequence
                    expression (demos/calc-mini/lexer.ml[184,7694+25]..[184,7694+57])
                      Pexp_apply
                      expression (demos/calc-mini/lexer.ml[184,7694+25]..[184,7694+50])
                        Pexp_field
                        expression (demos/calc-mini/lexer.ml[184,7694+25]..[184,7694+31])
                          Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[184,7694+25]..[184,7694+31])
                        "Lexing.refill_buff" (demos/calc-mini/lexer.ml[184,7694+32]..[184,7694+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[184,7694+51]..[184,7694+57])
                            Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[184,7694+51]..[184,7694+57])
                      ]
                    expression (demos/calc-mini/lexer.ml[185,7753+6]..[185,7753+52])
                      Pexp_apply
                      expression (demos/calc-mini/lexer.ml[185,7753+6]..[185,7753+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc-mini/lexer.ml[185,7753+6]..[185,7753+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[185,7753+28]..[185,7753+34])
                            Pexp_ident "lexbuf" (demos/calc-mini/lexer.ml[185,7753+28]..[185,7753+34])
                        <arg>
                        Nolabel
                          expression (demos/calc-mini/lexer.ml[185,7753+35]..[185,7753+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-mini/lexer.ml[185,7753+35]..[185,7753+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\r\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\t\000\n
    Lexing.lex_check =

    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> TIMES
  | 5 -> LPAREN
  | 6 -> RPAREN
  | 7 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc-mini/lexer.mll[2,34+2]..demos/calc-mini/lexer.mll[2,34+13])
    Tstr_open Fresh
    module_expr (demos/calc-mini/lexer.mll[2,34+7]..demos/calc-mini/lexer.mll[2,34+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (demos/calc-mini/lexer.mll[4,49+2]..demos/calc-mini/lexer.mll[4,49+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-mini/lexer.mll[4,49+2]..demos/calc-mini/lexer.mll[4,49+27])
          pext_name = "Error/275"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc-mini/lexer.mll[4,49+21]..demos/calc-mini/lexer.mll[4,49+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc-mini/lexer.ml[9,110+0]..demos/calc-mini/lexer.ml[101,5545+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc-mini/lexer.ml[9,110+4]..demos/calc-mini/lexer.ml[9,110+22])
          Tpat_var "__ocaml_lex_tables/276"
        expression (demos/calc-mini/lexer.ml[9,110+25]..demos/calc-mini/lexer.ml[101,5545+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc-mini/lexer.ml[11,157+3]..demos/calc-mini/lexer.ml[12,227+53])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-mini/lexer.ml[11,157+4]..demos/calc-mini/lexer.ml[12,227+52]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc-mini/lexer.ml[14,305+3]..demos/calc-mini/lexer.ml[15,375+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-mini/lexer.ml[14,305+4]..demos/calc-mini/lexer.ml[15,375+52]),None)
                "Lexing.lex_default"
                  expression (demos/calc-mini/lexer.ml[17,453+3]..demos/calc-mini/lexer.ml[18,523+53])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-mini/lexer.ml[17,453+4]..demos/calc-mini/lexer.ml[18,523+52]),None)
                "Lexing.lex_trans"
                  expression (demos/calc-mini/lexer.ml[20,599+3]..demos/calc-mini/lexer.ml[53,2909+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\r\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\t\000\ndemos/calc-mini/lexer.ml[20,599+4]..demos/calc-mini/lexer.ml[53,2909+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc-mini/lexer.ml[55,2985+3]..demos/calc-mini/lexer.ml[88,5295+53])
                    Texp_constant Const_stringdemos/calc-mini/lexer.ml[55,2985+4]..demos/calc-mini/lexer.ml[88,5295+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc-mini/lexer.ml[90,5375+3]..demos/calc-mini/lexer.ml[90,5375+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[90,5375+4]..demos/calc-mini/lexer.ml[90,5375+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc-mini/lexer.ml[92,5410+3]..demos/calc-mini/lexer.ml[92,5410+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[92,5410+4]..demos/calc-mini/lexer.ml[92,5410+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc-mini/lexer.ml[94,5445+3]..demos/calc-mini/lexer.ml[94,5445+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[94,5445+4]..demos/calc-mini/lexer.ml[94,5445+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc-mini/lexer.ml[96,5478+3]..demos/calc-mini/lexer.ml[96,5478+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[96,5478+4]..demos/calc-mini/lexer.ml[96,5478+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc-mini/lexer.ml[98,5511+3]..demos/calc-mini/lexer.ml[98,5511+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[98,5511+4]..demos/calc-mini/lexer.ml[98,5511+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc-mini/lexer.ml[100,5538+3]..demos/calc-mini/lexer.ml[100,5538+5])
                    Texp_constant Const_string("",(demos/calc-mini/lexer.ml[100,5538+4]..demos/calc-mini/lexer.ml[100,5538+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc-mini/lexer.ml[103,5548+0]..demos/calc-mini/lexer.ml[185,7753+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc-mini/lexer.ml[103,5548+8]..demos/calc-mini/lexer.ml[103,5548+12])
          Tpat_var "line/301"
        expression (demos/calc-mini/lexer.ml[103,5548+13]..demos/calc-mini/lexer.ml[104,5570+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-mini/lexer.ml[103,5548+13]..demos/calc-mini/lexer.ml[103,5548+19])
                Tpat_var "lexbuf/305"
              expression (demos/calc-mini/lexer.ml[104,5570+3]..demos/calc-mini/lexer.ml[104,5570+32])
                Texp_apply
                expression (demos/calc-mini/lexer.ml[104,5570+3]..demos/calc-mini/lexer.ml[104,5570+23])
                  Texp_ident "__ocaml_lex_line_rec/302"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-mini/lexer.ml[104,5570+24]..demos/calc-mini/lexer.ml[104,5570+30])
                      Texp_ident "lexbuf/305"
                  <arg>
                    Nolabel
                    expression (demos/calc-mini/lexer.ml[104,5570+31]..demos/calc-mini/lexer.ml[104,5570+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc-mini/lexer.ml[105,5603+4]..demos/calc-mini/lexer.ml[105,5603+24])
          Tpat_var "__ocaml_lex_line_rec/302"
        expression (demos/calc-mini/lexer.ml[105,5603+25]..demos/calc-mini/lexer.ml[133,6451+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-mini/lexer.ml[105,5603+25]..demos/calc-mini/lexer.ml[105,5603+31])
                Tpat_var "lexbuf/306"
              expression (demos/calc-mini/lexer.ml[105,5603+32]..demos/calc-mini/lexer.ml[133,6451+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-mini/lexer.ml[105,5603+32]..demos/calc-mini/lexer.ml[105,5603+49])
                      Tpat_var "__ocaml_lex_state/307"
                    expression (demos/calc-mini/lexer.ml[106,5655+2]..demos/calc-mini/lexer.ml[133,6451+51])
                      Texp_match
                      expression (demos/calc-mini/lexer.ml[106,5655+8]..demos/calc-mini/lexer.ml[106,5655+65])
                        Texp_apply
                        expression (demos/calc-mini/lexer.ml[106,5655+8]..demos/calc-mini/lexer.ml[106,5655+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[106,5655+22]..demos/calc-mini/lexer.ml[106,5655+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[106,5655+41]..demos/calc-mini/lexer.ml[106,5655+58])
                              Texp_ident "__ocaml_lex_state/307"
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[106,5655+59]..demos/calc-mini/lexer.ml[106,5655+65])
                              Texp_ident "lexbuf/306"
                        ]
                      [
                        <case>
                          pattern (demos/calc-mini/lexer.ml[107,5726+8]..demos/calc-mini/lexer.ml[107,5726+9])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[107,5726+8]..demos/calc-mini/lexer.ml[107,5726+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-mini/lexer.ml[108,5739+0]..demos/calc-mini/lexer.mll[15,5953+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-mini/lexer.mll[13,5776+21]..demos/calc-mini/lexer.mll[13,5776+25])
                                  Tpat_var "line/333"
                                expression (demos/calc-mini/lexer.ml[112,5835+2]..demos/calc-mini/lexer.ml[112,5835+81])
                                  Texp_apply
                                  expression (demos/calc-mini/lexer.ml[112,5835+2]..demos/calc-mini/lexer.ml[112,5835+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[112,5835+20]..demos/calc-mini/lexer.ml[112,5835+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[112,5835+27]..demos/calc-mini/lexer.ml[112,5835+54])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[112,5835+27]..demos/calc-mini/lexer.ml[112,5835+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[112,5835+55]..demos/calc-mini/lexer.ml[112,5835+81])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[112,5835+55]..demos/calc-mini/lexer.ml[112,5835+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-mini/lexer.mll[15,5953+4]..demos/calc-mini/lexer.mll[15,5953+23])
                              Texp_tuple
                              [
                                expression (demos/calc-mini/lexer.mll[15,5953+6]..demos/calc-mini/lexer.mll[15,5953+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-mini/lexer.mll[15,5953+11]..demos/calc-mini/lexer.mll[15,5953+15])
                                      Texp_ident "line/333"
                                  ]
                                expression (demos/calc-mini/lexer.mll[15,5953+17]..demos/calc-mini/lexer.mll[15,5953+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[117,6011+4]..demos/calc-mini/lexer.ml[117,6011+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[117,6011+4]..demos/calc-mini/lexer.ml[117,6011+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-mini/lexer.mll[18,6053+4]..demos/calc-mini/lexer.mll[18,6053+19])
                            Texp_tuple
                            [
                              expression (demos/calc-mini/lexer.mll[18,6053+6]..demos/calc-mini/lexer.mll[18,6053+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc-mini/lexer.mll[18,6053+12]..demos/calc-mini/lexer.mll[18,6053+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[122,6107+4]..demos/calc-mini/lexer.ml[122,6107+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[122,6107+4]..demos/calc-mini/lexer.ml[122,6107+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-mini/lexer.ml[123,6116+0]..demos/calc-mini/lexer.mll[22,6324+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-mini/lexer.mll[19,6153+15]..demos/calc-mini/lexer.mll[19,6153+19])
                                  Tpat_var "line/334"
                                expression (demos/calc-mini/lexer.ml[127,6206+2]..demos/calc-mini/lexer.ml[127,6206+81])
                                  Texp_apply
                                  expression (demos/calc-mini/lexer.ml[127,6206+2]..demos/calc-mini/lexer.ml[127,6206+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[127,6206+20]..demos/calc-mini/lexer.ml[127,6206+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[127,6206+27]..demos/calc-mini/lexer.ml[127,6206+54])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[127,6206+27]..demos/calc-mini/lexer.ml[127,6206+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[127,6206+55]..demos/calc-mini/lexer.ml[127,6206+81])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[127,6206+55]..demos/calc-mini/lexer.ml[127,6206+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-mini/lexer.mll[22,6324+4]..demos/calc-mini/lexer.mll[22,6324+33])
                              Texp_tuple
                              [
                                expression (demos/calc-mini/lexer.mll[22,6324+6]..demos/calc-mini/lexer.mll[22,6324+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-mini/lexer.mll[22,6324+11]..demos/calc-mini/lexer.mll[22,6324+24])
                                      Texp_apply
                                      expression (demos/calc-mini/lexer.mll[22,6324+17]..demos/calc-mini/lexer.mll[22,6324+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-mini/lexer.mll[22,6324+12]..demos/calc-mini/lexer.mll[22,6324+16])
                                            Texp_ident "line/334"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-mini/lexer.mll[22,6324+19]..demos/calc-mini/lexer.mll[22,6324+23])
                                            Texp_constant Const_string("\n",(demos/calc-mini/lexer.mll[22,6324+20]..demos/calc-mini/lexer.mll[22,6324+22]),None)
                                      ]
                                  ]
                                expression (demos/calc-mini/lexer.mll[22,6324+26]..demos/calc-mini/lexer.mll[22,6324+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[132,6392+4]..demos/calc-mini/lexer.ml[132,6392+21])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[132,6392+4]..demos/calc-mini/lexer.ml[132,6392+21])
                              Tpat_var "__ocaml_lex_state/332"
                          expression (demos/calc-mini/lexer.ml[132,6392+25]..demos/calc-mini/lexer.ml[133,6451+51])
                            Texp_sequence
                            expression (demos/calc-mini/lexer.ml[132,6392+25]..demos/calc-mini/lexer.ml[132,6392+57])
                              Texp_apply
                              expression (demos/calc-mini/lexer.ml[132,6392+25]..demos/calc-mini/lexer.ml[132,6392+50])
                                Texp_field
                                expression (demos/calc-mini/lexer.ml[132,6392+25]..demos/calc-mini/lexer.ml[132,6392+31])
                                  Texp_ident "lexbuf/306"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[132,6392+51]..demos/calc-mini/lexer.ml[132,6392+57])
                                    Texp_ident "lexbuf/306"
                              ]
                            expression (demos/calc-mini/lexer.ml[133,6451+6]..demos/calc-mini/lexer.ml[133,6451+51])
                              Texp_apply
                              expression (demos/calc-mini/lexer.ml[133,6451+6]..demos/calc-mini/lexer.ml[133,6451+26])
                                Texp_ident "__ocaml_lex_line_rec/302"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[133,6451+27]..demos/calc-mini/lexer.ml[133,6451+33])
                                    Texp_ident "lexbuf/306"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[133,6451+34]..demos/calc-mini/lexer.ml[133,6451+51])
                                    Texp_ident "__ocaml_lex_state/332"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc-mini/lexer.ml[135,6504+4]..demos/calc-mini/lexer.ml[135,6504+9])
          Tpat_var "token/303"
        expression (demos/calc-mini/lexer.ml[135,6504+10]..demos/calc-mini/lexer.ml[136,6523+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-mini/lexer.ml[135,6504+10]..demos/calc-mini/lexer.ml[135,6504+16])
                Tpat_var "lexbuf/335"
              expression (demos/calc-mini/lexer.ml[136,6523+3]..demos/calc-mini/lexer.ml[136,6523+33])
                Texp_apply
                expression (demos/calc-mini/lexer.ml[136,6523+3]..demos/calc-mini/lexer.ml[136,6523+24])
                  Texp_ident "__ocaml_lex_token_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-mini/lexer.ml[136,6523+25]..demos/calc-mini/lexer.ml[136,6523+31])
                      Texp_ident "lexbuf/335"
                  <arg>
                    Nolabel
                    expression (demos/calc-mini/lexer.ml[136,6523+32]..demos/calc-mini/lexer.ml[136,6523+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc-mini/lexer.ml[137,6557+4]..demos/calc-mini/lexer.ml[137,6557+25])
          Tpat_var "__ocaml_lex_token_rec/304"
        expression (demos/calc-mini/lexer.ml[137,6557+26]..demos/calc-mini/lexer.ml[185,7753+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-mini/lexer.ml[137,6557+26]..demos/calc-mini/lexer.ml[137,6557+32])
                Tpat_var "lexbuf/336"
              expression (demos/calc-mini/lexer.ml[137,6557+33]..demos/calc-mini/lexer.ml[185,7753+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-mini/lexer.ml[137,6557+33]..demos/calc-mini/lexer.ml[137,6557+50])
                      Tpat_var "__ocaml_lex_state/337"
                    expression (demos/calc-mini/lexer.ml[138,6610+2]..demos/calc-mini/lexer.ml[185,7753+52])
                      Texp_match
                      expression (demos/calc-mini/lexer.ml[138,6610+8]..demos/calc-mini/lexer.ml[138,6610+65])
                        Texp_apply
                        expression (demos/calc-mini/lexer.ml[138,6610+8]..demos/calc-mini/lexer.ml[138,6610+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[138,6610+22]..demos/calc-mini/lexer.ml[138,6610+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[138,6610+41]..demos/calc-mini/lexer.ml[138,6610+58])
                              Texp_ident "__ocaml_lex_state/337"
                          <arg>
                            Nolabel
                            expression (demos/calc-mini/lexer.ml[138,6610+59]..demos/calc-mini/lexer.ml[138,6610+65])
                              Texp_ident "lexbuf/336"
                        ]
                      [
                        <case>
                          pattern (demos/calc-mini/lexer.ml[139,6681+8]..demos/calc-mini/lexer.ml[139,6681+9])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[139,6681+8]..demos/calc-mini/lexer.ml[139,6681+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-mini/lexer.mll[29,6727+4]..demos/calc-mini/lexer.mll[29,6727+20])
                            Texp_apply
                            expression (demos/calc-mini/lexer.mll[29,6727+6]..demos/calc-mini/lexer.mll[29,6727+11])
                              Texp_ident "token/303"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-mini/lexer.mll[29,6727+12]..demos/calc-mini/lexer.mll[29,6727+18])
                                  Texp_ident "lexbuf/336"
                            ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[144,6782+4]..demos/calc-mini/lexer.ml[144,6782+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[144,6782+4]..demos/calc-mini/lexer.ml[144,6782+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-mini/lexer.mll[31,6824+4]..demos/calc-mini/lexer.mll[31,6824+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc-mini/lexer.ml[149,6870+4]..demos/calc-mini/lexer.ml[149,6870+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[149,6870+4]..demos/calc-mini/lexer.ml[149,6870+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-mini/lexer.ml[150,6879+0]..demos/calc-mini/lexer.mll[33,7085+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-mini/lexer.mll[32,6916+16]..demos/calc-mini/lexer.mll[32,6916+17])
                                  Tpat_var "i/339"
                                expression (demos/calc-mini/lexer.ml[154,6967+2]..demos/calc-mini/lexer.ml[154,6967+81])
                                  Texp_apply
                                  expression (demos/calc-mini/lexer.ml[154,6967+2]..demos/calc-mini/lexer.ml[154,6967+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[154,6967+20]..demos/calc-mini/lexer.ml[154,6967+26])
                                        Texp_ident "lexbuf/336"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[154,6967+27]..demos/calc-mini/lexer.ml[154,6967+54])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[154,6967+27]..demos/calc-mini/lexer.ml[154,6967+33])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.ml[154,6967+55]..demos/calc-mini/lexer.ml[154,6967+81])
                                        Texp_field
                                        expression (demos/calc-mini/lexer.ml[154,6967+55]..demos/calc-mini/lexer.ml[154,6967+61])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-mini/lexer.mll[33,7085+4]..demos/calc-mini/lexer.mll[33,7085+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc-mini/lexer.mll[33,7085+10]..demos/calc-mini/lexer.mll[33,7085+27])
                                  Texp_apply
                                  expression (demos/calc-mini/lexer.mll[33,7085+11]..demos/calc-mini/lexer.mll[33,7085+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-mini/lexer.mll[33,7085+25]..demos/calc-mini/lexer.mll[33,7085+26])
                                        Texp_ident "i/339"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[159,7149+4]..demos/calc-mini/lexer.ml[159,7149+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[159,7149+4]..demos/calc-mini/lexer.ml[159,7149+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc-mini/lexer.mll[35,7191+4]..demos/calc-mini/lexer.mll[35,7191+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc-mini/lexer.ml[164,7238+4]..demos/calc-mini/lexer.ml[164,7238+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[164,7238+4]..demos/calc-mini/lexer.ml[164,7238+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc-mini/lexer.mll[37,7280+4]..demos/calc-mini/lexer.mll[37,7280+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc-mini/lexer.ml[169,7328+4]..demos/calc-mini/lexer.ml[169,7328+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[169,7328+4]..demos/calc-mini/lexer.ml[169,7328+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc-mini/lexer.mll[39,7370+4]..demos/calc-mini/lexer.mll[39,7370+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc-mini/lexer.ml[174,7419+4]..demos/calc-mini/lexer.ml[174,7419+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[174,7419+4]..demos/calc-mini/lexer.ml[174,7419+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc-mini/lexer.mll[41,7461+4]..demos/calc-mini/lexer.mll[41,7461+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc-mini/lexer.ml[179,7510+4]..demos/calc-mini/lexer.ml[179,7510+5])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[179,7510+4]..demos/calc-mini/lexer.ml[179,7510+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc-mini/lexer.mll[43,7552+4]..demos/calc-mini/lexer.mll[43,7552+107])
                            Texp_apply
                            expression (demos/calc-mini/lexer.mll[43,7552+6]..demos/calc-mini/lexer.mll[43,7552+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-mini/lexer.mll[43,7552+12]..demos/calc-mini/lexer.mll[43,7552+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc-mini/lexer.mll[43,7552+19]..demos/calc-mini/lexer.mll[43,7552+104])
                                      Texp_apply
                                      expression (demos/calc-mini/lexer.mll[43,7552+20]..demos/calc-mini/lexer.mll[43,7552+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost,None)
                                                  expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost,None)
                                                          expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc-mini/lexer.mll[43,7552+35]..demos/calc-mini/lexer.mll[43,7552+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-mini/lexer.mll[43,7552+75]..demos/calc-mini/lexer.mll[43,7552+103])
                                            Texp_apply
                                            expression (demos/calc-mini/lexer.mll[43,7552+76]..demos/calc-mini/lexer.mll[43,7552+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc-mini/lexer.mll[43,7552+96]..demos/calc-mini/lexer.mll[43,7552+102])
                                                  Texp_ident "lexbuf/336"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc-mini/lexer.ml[184,7694+4]..demos/calc-mini/lexer.ml[184,7694+21])
                            Tpat_value
                            pattern (demos/calc-mini/lexer.ml[184,7694+4]..demos/calc-mini/lexer.ml[184,7694+21])
                              Tpat_var "__ocaml_lex_state/338"
                          expression (demos/calc-mini/lexer.ml[184,7694+25]..demos/calc-mini/lexer.ml[185,7753+52])
                            Texp_sequence
                            expression (demos/calc-mini/lexer.ml[184,7694+25]..demos/calc-mini/lexer.ml[184,7694+57])
                              Texp_apply
                              expression (demos/calc-mini/lexer.ml[184,7694+25]..demos/calc-mini/lexer.ml[184,7694+50])
                                Texp_field
                                expression (demos/calc-mini/lexer.ml[184,7694+25]..demos/calc-mini/lexer.ml[184,7694+31])
                                  Texp_ident "lexbuf/336"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[184,7694+51]..demos/calc-mini/lexer.ml[184,7694+57])
                                    Texp_ident "lexbuf/336"
                              ]
                            expression (demos/calc-mini/lexer.ml[185,7753+6]..demos/calc-mini/lexer.ml[185,7753+52])
                              Texp_apply
                              expression (demos/calc-mini/lexer.ml[185,7753+6]..demos/calc-mini/lexer.ml[185,7753+27])
                                Texp_ident "__ocaml_lex_token_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[185,7753+28]..demos/calc-mini/lexer.ml[185,7753+34])
                                    Texp_ident "lexbuf/336"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-mini/lexer.ml[185,7753+35]..demos/calc-mini/lexer.ml[185,7753+52])
                                    Texp_ident "__ocaml_lex_state/338"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\r\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\t\000\n

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (catch
              (if (isout 2 __ocaml_lex_state/332) (exit 1)
                (switch* __ocaml_lex_state/332
                 case int 0:
                  (let
                    (line/333 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int) (makeblock 0 line/333) 1))
                 case int 1: [0: 0 0]
                 case int 2:
                  (let
                    (line/334 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int)
                      (makeblock 0
                        (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                      0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332)))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (catch
              (if (isout 7 __ocaml_lex_state/338) (exit 2)
                (switch* __ocaml_lex_state/338
                 case int 0: (apply token/303 lexbuf/336)
                 case int 1: 4
                 case int 2:
                  (let
                    (i/339 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/336 (field_int 4 lexbuf/336)
                         (field_int 5 lexbuf/336)))
                    (makeblock 0 (int) (caml_int_of_string i/339)))
                 case int 3: 2
                 case int 4: 0
                 case int 5: 3
                 case int 6: 1
                 case int 7:
                  (raise
                    (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0:
                         [11:
                          "At offset "
                          [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                         "At offset %d: unexpected character.\n"]
                        (apply (field_imm 9 (global Stdlib__Lexing!))
                          lexbuf/336))))))
             with (2)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)
(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\r\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\t\000\n

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (if (isout 2 __ocaml_lex_state/332)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332))
              (switch* __ocaml_lex_state/332
               case int 0:
                (let
                  (line/333 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int) (makeblock 0 line/333) 1))
               case int 1: [0: 0 0]
               case int 2:
                (let
                  (line/334 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int)
                    (makeblock 0
                      (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                    0))))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (if (isout 7 __ocaml_lex_state/338)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))
              (switch* __ocaml_lex_state/338
               case int 0: (apply token/303 lexbuf/336)
               case int 1: 4
               case int 2:
                (let
                  (i/339 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/336 (field_int 4 lexbuf/336)
                       (field_int 5 lexbuf/336)))
                  (makeblock 0 (int) (caml_int_of_string i/339)))
               case int 3: 2
               case int 4: 0
               case int 5: 3
               case int 6: 1
               case int 7:
                (raise
                  (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [11:
                        "At offset "
                        [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                       "At offset %d: unexpected character.\n"]
                      (apply (field_imm 9 (global Stdlib__Lexing!))
                        lexbuf/336)))))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)

[
  structure_item (demos/calc/lexer.mll[2,29+2]..[2,29+13])
    Pstr_open Fresh
    module_expr (demos/calc/lexer.mll[2,29+7]..[2,29+13])
      Pmod_ident "Parser" (demos/calc/lexer.mll[2,29+7]..[2,29+13])
  structure_item (demos/calc/lexer.mll[4,44+2]..[4,44+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc/lexer.mll[4,44+2]..[4,44+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc/lexer.mll[4,44+21]..[4,44+27])
                  Ptyp_constr "string" (demos/calc/lexer.mll[4,44+21]..[4,44+27])
                  []
              ]
              None
  structure_item (demos/calc/lexer.ml[9,100+0]..[104,5601+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc/lexer.ml[9,100+4]..[9,100+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc/lexer.ml[9,100+4]..[9,100+22])
        expression (demos/calc/lexer.ml[9,100+25]..[104,5601+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc/lexer.ml[10,127+2]..[10,127+17])
              expression (demos/calc/lexer.ml[11,147+3]..[13,287+5])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc/lexer.ml[11,147+4]..[13,287+4]),None)
            "Lexing.lex_backtrk" (demos/calc/lexer.ml[14,294+2]..[14,294+20])
              expression (demos/calc/lexer.ml[15,317+3]..[17,457+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc/lexer.ml[15,317+4]..[17,457+4]),None)
            "Lexing.lex_default" (demos/calc/lexer.ml[18,464+2]..[18,464+20])
              expression (demos/calc/lexer.ml[19,487+3]..[21,627+5])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc/lexer.ml[19,487+4]..[21,627+4]),None)
            "Lexing.lex_trans" (demos/calc/lexer.ml[22,634+2]..[22,634+18])
              expression (demos/calc/lexer.ml[23,655+3]..[56,2965+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc/lexer.ml[23,655+4]..[56,2965+52]),None)
            "Lexing.lex_check" (demos/calc/lexer.ml[57,3020+2]..[57,3020+18])
              expression (demos/calc/lexer.ml[58,3041+3]..[91,5351+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc/lexer.ml[58,3041+4]..[91,5351+52]),None)
            "Lexing.lex_base_code" (demos/calc/lexer.ml[92,5406+2]..[92,5406+22])
              expression (demos/calc/lexer.ml[93,5431+3]..[93,5431+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[93,5431+4]..[93,5431+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc/lexer.ml[94,5438+2]..[94,5438+25])
              expression (demos/calc/lexer.ml[95,5466+3]..[95,5466+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[95,5466+4]..[95,5466+4]),None)
            "Lexing.lex_default_code" (demos/calc/lexer.ml[96,5473+2]..[96,5473+25])
              expression (demos/calc/lexer.ml[97,5501+3]..[97,5501+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[97,5501+4]..[97,5501+4]),None)
            "Lexing.lex_trans_code" (demos/calc/lexer.ml[98,5508+2]..[98,5508+23])
              expression (demos/calc/lexer.ml[99,5534+3]..[99,5534+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[99,5534+4]..[99,5534+4]),None)
            "Lexing.lex_check_code" (demos/calc/lexer.ml[100,5541+2]..[100,5541+23])
              expression (demos/calc/lexer.ml[101,5567+3]..[101,5567+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[101,5567+4]..[101,5567+4]),None)
            "Lexing.lex_code" (demos/calc/lexer.ml[102,5574+2]..[102,5574+17])
              expression (demos/calc/lexer.ml[103,5594+3]..[103,5594+5])
                Pexp_constant PConst_string("",(demos/calc/lexer.ml[103,5594+4]..[103,5594+4]),None)
          ]
          None
    ]
  structure_item (demos/calc/lexer.ml[106,5604+0]..[198,7827+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc/lexer.ml[106,5604+8]..[106,5604+12])
          Ppat_var "line" (demos/calc/lexer.ml[106,5604+8]..[106,5604+12])
        expression (demos/calc/lexer.ml[106,5604+13]..[107,5626+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc/lexer.ml[106,5604+13]..[106,5604+19])
            Ppat_var "lexbuf" (demos/calc/lexer.ml[106,5604+13]..[106,5604+19])
          expression (demos/calc/lexer.ml[107,5626+3]..[107,5626+32])
            Pexp_apply
            expression (demos/calc/lexer.ml[107,5626+3]..[107,5626+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc/lexer.ml[107,5626+3]..[107,5626+23])
            [
              <arg>
              Nolabel
                expression (demos/calc/lexer.ml[107,5626+24]..[107,5626+30])
                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[107,5626+24]..[107,5626+30])
              <arg>
              Nolabel
                expression (demos/calc/lexer.ml[107,5626+31]..[107,5626+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc/lexer.ml[108,5659+4]..[108,5659+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc/lexer.ml[108,5659+4]..[108,5659+24])
        expression (demos/calc/lexer.ml[108,5659+25]..[136,6457+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc/lexer.ml[108,5659+25]..[108,5659+31])
            Ppat_var "lexbuf" (demos/calc/lexer.ml[108,5659+25]..[108,5659+31])
          expression (demos/calc/lexer.ml[108,5659+32]..[136,6457+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc/lexer.ml[108,5659+32]..[108,5659+49])
              Ppat_var "__ocaml_lex_state" (demos/calc/lexer.ml[108,5659+32]..[108,5659+49])
            expression (demos/calc/lexer.ml[109,5711+2]..[136,6457+51])
              Pexp_match
              expression (demos/calc/lexer.ml[109,5711+8]..[109,5711+65])
                Pexp_apply
                expression (demos/calc/lexer.ml[109,5711+8]..[109,5711+21])
                  Pexp_ident "Lexing.engine" (demos/calc/lexer.ml[109,5711+8]..[109,5711+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[109,5711+22]..[109,5711+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc/lexer.ml[109,5711+22]..[109,5711+40])
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[109,5711+41]..[109,5711+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc/lexer.ml[109,5711+41]..[109,5711+58])
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[109,5711+59]..[109,5711+65])
                      Pexp_ident "lexbuf" (demos/calc/lexer.ml[109,5711+59]..[109,5711+65])
                ]
              [
                <case>
                  pattern (demos/calc/lexer.ml[110,5782+8]..[110,5782+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc/lexer.ml[111,5795+0]..demos/calc/lexer.mll[15,5994+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc/lexer.mll[13,5827+21]..[13,5827+25])
                          Ppat_var "line" (demos/calc/lexer.mll[13,5827+21]..[13,5827+25])
                        expression (demos/calc/lexer.ml[115,5881+2]..[115,5881+81])
                          Pexp_apply
                          expression (demos/calc/lexer.ml[115,5881+2]..[115,5881+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc/lexer.ml[115,5881+2]..[115,5881+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[115,5881+20]..[115,5881+26])
                                Pexp_ident "lexbuf" (demos/calc/lexer.ml[115,5881+20]..[115,5881+26])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[115,5881+27]..[115,5881+54])
                                Pexp_field
                                expression (demos/calc/lexer.ml[115,5881+27]..[115,5881+33])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[115,5881+27]..[115,5881+33])
                                "Lexing.lex_start_pos" (demos/calc/lexer.ml[115,5881+34]..[115,5881+54])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[115,5881+55]..[115,5881+81])
                                Pexp_field
                                expression (demos/calc/lexer.ml[115,5881+55]..[115,5881+61])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[115,5881+55]..[115,5881+61])
                                "Lexing.lex_curr_pos" (demos/calc/lexer.ml[115,5881+62]..[115,5881+81])
                          ]
                    ]
                    expression (demos/calc/lexer.mll[15,5994+4]..[15,5994+23])
                      Pexp_tuple
                      [
                        expression (demos/calc/lexer.mll[15,5994+6]..[15,5994+15])
                          Pexp_construct "Some" (demos/calc/lexer.mll[15,5994+6]..[15,5994+10])
                          Some
                            expression (demos/calc/lexer.mll[15,5994+11]..[15,5994+15])
                              Pexp_ident "line" (demos/calc/lexer.mll[15,5994+11]..[15,5994+15])
                        expression (demos/calc/lexer.mll[15,5994+17]..[15,5994+21])
                          Pexp_construct "true" (demos/calc/lexer.mll[15,5994+17]..[15,5994+21])
                          None
                      ]
                <case>
                  pattern (demos/calc/lexer.ml[120,6047+4]..[120,6047+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc/lexer.mll[18,6084+4]..[18,6084+19])
                    Pexp_tuple
                    [
                      expression (demos/calc/lexer.mll[18,6084+6]..[18,6084+10])
                        Pexp_construct "None" (demos/calc/lexer.mll[18,6084+6]..[18,6084+10])
                        None
                      expression (demos/calc/lexer.mll[18,6084+12]..[18,6084+17])
                        Pexp_construct "false" (demos/calc/lexer.mll[18,6084+12]..[18,6084+17])
                        None
                    ]
                <case>
                  pattern (demos/calc/lexer.ml[125,6133+4]..[125,6133+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc/lexer.ml[126,6142+0]..demos/calc/lexer.mll[22,6335+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc/lexer.mll[19,6174+15]..[19,6174+19])
                          Ppat_var "line" (demos/calc/lexer.mll[19,6174+15]..[19,6174+19])
                        expression (demos/calc/lexer.ml[130,6222+2]..[130,6222+81])
                          Pexp_apply
                          expression (demos/calc/lexer.ml[130,6222+2]..[130,6222+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc/lexer.ml[130,6222+2]..[130,6222+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[130,6222+20]..[130,6222+26])
                                Pexp_ident "lexbuf" (demos/calc/lexer.ml[130,6222+20]..[130,6222+26])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[130,6222+27]..[130,6222+54])
                                Pexp_field
                                expression (demos/calc/lexer.ml[130,6222+27]..[130,6222+33])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[130,6222+27]..[130,6222+33])
                                "Lexing.lex_start_pos" (demos/calc/lexer.ml[130,6222+34]..[130,6222+54])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[130,6222+55]..[130,6222+81])
                                Pexp_field
                                expression (demos/calc/lexer.ml[130,6222+55]..[130,6222+61])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[130,6222+55]..[130,6222+61])
                                "Lexing.lex_curr_pos" (demos/calc/lexer.ml[130,6222+62]..[130,6222+81])
                          ]
                    ]
                    expression (demos/calc/lexer.mll[22,6335+4]..[22,6335+33])
                      Pexp_tuple
                      [
                        expression (demos/calc/lexer.mll[22,6335+6]..[22,6335+24])
                          Pexp_construct "Some" (demos/calc/lexer.mll[22,6335+6]..[22,6335+10])
                          Some
                            expression (demos/calc/lexer.mll[22,6335+11]..[22,6335+24])
                              Pexp_apply
                              expression (demos/calc/lexer.mll[22,6335+17]..[22,6335+18])
                                Pexp_ident "^" (demos/calc/lexer.mll[22,6335+17]..[22,6335+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc/lexer.mll[22,6335+12]..[22,6335+16])
                                    Pexp_ident "line" (demos/calc/lexer.mll[22,6335+12]..[22,6335+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc/lexer.mll[22,6335+19]..[22,6335+23])
                                    Pexp_constant PConst_string("\n",(demos/calc/lexer.mll[22,6335+20]..[22,6335+22]),None)
                              ]
                        expression (demos/calc/lexer.mll[22,6335+26]..[22,6335+31])
                          Pexp_construct "false" (demos/calc/lexer.mll[22,6335+26]..[22,6335+31])
                          None
                      ]
                <case>
                  pattern (demos/calc/lexer.ml[135,6398+4]..[135,6398+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc/lexer.ml[135,6398+4]..[135,6398+21])
                  expression (demos/calc/lexer.ml[135,6398+25]..[136,6457+51])
                    Pexp_sequence
                    expression (demos/calc/lexer.ml[135,6398+25]..[135,6398+57])
                      Pexp_apply
                      expression (demos/calc/lexer.ml[135,6398+25]..[135,6398+50])
                        Pexp_field
                        expression (demos/calc/lexer.ml[135,6398+25]..[135,6398+31])
                          Pexp_ident "lexbuf" (demos/calc/lexer.ml[135,6398+25]..[135,6398+31])
                        "Lexing.refill_buff" (demos/calc/lexer.ml[135,6398+32]..[135,6398+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[135,6398+51]..[135,6398+57])
                            Pexp_ident "lexbuf" (demos/calc/lexer.ml[135,6398+51]..[135,6398+57])
                      ]
                    expression (demos/calc/lexer.ml[136,6457+6]..[136,6457+51])
                      Pexp_apply
                      expression (demos/calc/lexer.ml[136,6457+6]..[136,6457+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc/lexer.ml[136,6457+6]..[136,6457+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[136,6457+27]..[136,6457+33])
                            Pexp_ident "lexbuf" (demos/calc/lexer.ml[136,6457+27]..[136,6457+33])
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[136,6457+34]..[136,6457+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc/lexer.ml[136,6457+34]..[136,6457+51])
                      ]
              ]
      <def>
        pattern (demos/calc/lexer.ml[138,6510+4]..[138,6510+9])
          Ppat_var "token" (demos/calc/lexer.ml[138,6510+4]..[138,6510+9])
        expression (demos/calc/lexer.ml[138,6510+10]..[139,6529+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc/lexer.ml[138,6510+10]..[138,6510+16])
            Ppat_var "lexbuf" (demos/calc/lexer.ml[138,6510+10]..[138,6510+16])
          expression (demos/calc/lexer.ml[139,6529+3]..[139,6529+33])
            Pexp_apply
            expression (demos/calc/lexer.ml[139,6529+3]..[139,6529+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc/lexer.ml[139,6529+3]..[139,6529+24])
            [
              <arg>
              Nolabel
                expression (demos/calc/lexer.ml[139,6529+25]..[139,6529+31])
                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[139,6529+25]..[139,6529+31])
              <arg>
              Nolabel
                expression (demos/calc/lexer.ml[139,6529+32]..[139,6529+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc/lexer.ml[140,6563+4]..[140,6563+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc/lexer.ml[140,6563+4]..[140,6563+25])
        expression (demos/calc/lexer.ml[140,6563+26]..[198,7827+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc/lexer.ml[140,6563+26]..[140,6563+32])
            Ppat_var "lexbuf" (demos/calc/lexer.ml[140,6563+26]..[140,6563+32])
          expression (demos/calc/lexer.ml[140,6563+33]..[198,7827+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc/lexer.ml[140,6563+33]..[140,6563+50])
              Ppat_var "__ocaml_lex_state" (demos/calc/lexer.ml[140,6563+33]..[140,6563+50])
            expression (demos/calc/lexer.ml[141,6616+2]..[198,7827+52])
              Pexp_match
              expression (demos/calc/lexer.ml[141,6616+8]..[141,6616+65])
                Pexp_apply
                expression (demos/calc/lexer.ml[141,6616+8]..[141,6616+21])
                  Pexp_ident "Lexing.engine" (demos/calc/lexer.ml[141,6616+8]..[141,6616+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[141,6616+22]..[141,6616+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc/lexer.ml[141,6616+22]..[141,6616+40])
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[141,6616+41]..[141,6616+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc/lexer.ml[141,6616+41]..[141,6616+58])
                  <arg>
                  Nolabel
                    expression (demos/calc/lexer.ml[141,6616+59]..[141,6616+65])
                      Pexp_ident "lexbuf" (demos/calc/lexer.ml[141,6616+59]..[141,6616+65])
                ]
              [
                <case>
                  pattern (demos/calc/lexer.ml[142,6687+8]..[142,6687+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc/lexer.mll[29,6728+4]..[29,6728+20])
                    Pexp_apply
                    expression (demos/calc/lexer.mll[29,6728+6]..[29,6728+11])
                      Pexp_ident "token" (demos/calc/lexer.mll[29,6728+6]..[29,6728+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc/lexer.mll[29,6728+12]..[29,6728+18])
                          Pexp_ident "lexbuf" (demos/calc/lexer.mll[29,6728+12]..[29,6728+18])
                    ]
                <case>
                  pattern (demos/calc/lexer.ml[147,6778+4]..[147,6778+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc/lexer.mll[31,6815+4]..[31,6815+11])
                    Pexp_construct "EOL" (demos/calc/lexer.mll[31,6815+6]..[31,6815+9])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[152,6856+4]..[152,6856+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc/lexer.ml[153,6865+0]..demos/calc/lexer.mll[33,7056+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc/lexer.mll[32,6897+16]..[32,6897+17])
                          Ppat_var "i" (demos/calc/lexer.mll[32,6897+16]..[32,6897+17])
                        expression (demos/calc/lexer.ml[157,6943+2]..[157,6943+81])
                          Pexp_apply
                          expression (demos/calc/lexer.ml[157,6943+2]..[157,6943+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc/lexer.ml[157,6943+2]..[157,6943+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[157,6943+20]..[157,6943+26])
                                Pexp_ident "lexbuf" (demos/calc/lexer.ml[157,6943+20]..[157,6943+26])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[157,6943+27]..[157,6943+54])
                                Pexp_field
                                expression (demos/calc/lexer.ml[157,6943+27]..[157,6943+33])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[157,6943+27]..[157,6943+33])
                                "Lexing.lex_start_pos" (demos/calc/lexer.ml[157,6943+34]..[157,6943+54])
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.ml[157,6943+55]..[157,6943+81])
                                Pexp_field
                                expression (demos/calc/lexer.ml[157,6943+55]..[157,6943+61])
                                  Pexp_ident "lexbuf" (demos/calc/lexer.ml[157,6943+55]..[157,6943+61])
                                "Lexing.lex_curr_pos" (demos/calc/lexer.ml[157,6943+62]..[157,6943+81])
                          ]
                    ]
                    expression (demos/calc/lexer.mll[33,7056+4]..[33,7056+29])
                      Pexp_construct "INT" (demos/calc/lexer.mll[33,7056+6]..[33,7056+9])
                      Some
                        expression (demos/calc/lexer.mll[33,7056+10]..[33,7056+27])
                          Pexp_apply
                          expression (demos/calc/lexer.mll[33,7056+11]..[33,7056+24])
                            Pexp_ident "int_of_string" (demos/calc/lexer.mll[33,7056+11]..[33,7056+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc/lexer.mll[33,7056+25]..[33,7056+26])
                                Pexp_ident "i" (demos/calc/lexer.mll[33,7056+25]..[33,7056+26])
                          ]
                <case>
                  pattern (demos/calc/lexer.ml[162,7115+4]..[162,7115+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc/lexer.mll[35,7152+4]..[35,7152+12])
                    Pexp_construct "PLUS" (demos/calc/lexer.mll[35,7152+6]..[35,7152+10])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[167,7194+4]..[167,7194+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc/lexer.mll[37,7231+4]..[37,7231+13])
                    Pexp_construct "MINUS" (demos/calc/lexer.mll[37,7231+6]..[37,7231+11])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[172,7274+4]..[172,7274+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc/lexer.mll[39,7311+4]..[39,7311+13])
                    Pexp_construct "TIMES" (demos/calc/lexer.mll[39,7311+6]..[39,7311+11])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[177,7354+4]..[177,7354+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc/lexer.mll[41,7391+4]..[41,7391+11])
                    Pexp_construct "DIV" (demos/calc/lexer.mll[41,7391+6]..[41,7391+9])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[182,7432+4]..[182,7432+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc/lexer.mll[43,7469+4]..[43,7469+14])
                    Pexp_construct "LPAREN" (demos/calc/lexer.mll[43,7469+6]..[43,7469+12])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[187,7513+4]..[187,7513+5])
                    Ppat_constant PConst_int (8,None)
                  expression (demos/calc/lexer.mll[45,7550+4]..[45,7550+14])
                    Pexp_construct "RPAREN" (demos/calc/lexer.mll[45,7550+6]..[45,7550+12])
                    None
                <case>
                  pattern (demos/calc/lexer.ml[192,7594+4]..[192,7594+5])
                    Ppat_constant PConst_int (9,None)
                  expression (demos/calc/lexer.mll[47,7631+4]..[47,7631+107])
                    Pexp_apply
                    expression (demos/calc/lexer.mll[47,7631+6]..[47,7631+11])
                      Pexp_ident "raise" (demos/calc/lexer.mll[47,7631+6]..[47,7631+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc/lexer.mll[47,7631+12]..[47,7631+105])
                          Pexp_construct "Error" (demos/calc/lexer.mll[47,7631+13]..[47,7631+18])
                          Some
                            expression (demos/calc/lexer.mll[47,7631+19]..[47,7631+104])
                              Pexp_apply
                              expression (demos/calc/lexer.mll[47,7631+20]..[47,7631+34])
                                Pexp_ident "Printf.sprintf" (demos/calc/lexer.mll[47,7631+20]..[47,7631+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc/lexer.mll[47,7631+35]..[47,7631+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc/lexer.mll[47,7631+36]..[47,7631+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc/lexer.mll[47,7631+75]..[47,7631+103])
                                    Pexp_apply
                                    expression (demos/calc/lexer.mll[47,7631+76]..[47,7631+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc/lexer.mll[47,7631+76]..[47,7631+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc/lexer.mll[47,7631+96]..[47,7631+102])
                                          Pexp_ident "lexbuf" (demos/calc/lexer.mll[47,7631+96]..[47,7631+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc/lexer.ml[197,7768+4]..[197,7768+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc/lexer.ml[197,7768+4]..[197,7768+21])
                  expression (demos/calc/lexer.ml[197,7768+25]..[198,7827+52])
                    Pexp_sequence
                    expression (demos/calc/lexer.ml[197,7768+25]..[197,7768+57])
                      Pexp_apply
                      expression (demos/calc/lexer.ml[197,7768+25]..[197,7768+50])
                        Pexp_field
                        expression (demos/calc/lexer.ml[197,7768+25]..[197,7768+31])
                          Pexp_ident "lexbuf" (demos/calc/lexer.ml[197,7768+25]..[197,7768+31])
                        "Lexing.refill_buff" (demos/calc/lexer.ml[197,7768+32]..[197,7768+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[197,7768+51]..[197,7768+57])
                            Pexp_ident "lexbuf" (demos/calc/lexer.ml[197,7768+51]..[197,7768+57])
                      ]
                    expression (demos/calc/lexer.ml[198,7827+6]..[198,7827+52])
                      Pexp_apply
                      expression (demos/calc/lexer.ml[198,7827+6]..[198,7827+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc/lexer.ml[198,7827+6]..[198,7827+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[198,7827+28]..[198,7827+34])
                            Pexp_ident "lexbuf" (demos/calc/lexer.ml[198,7827+28]..[198,7827+34])
                        <arg>
                        Nolabel
                          expression (demos/calc/lexer.ml[198,7827+35]..[198,7827+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc/lexer.ml[198,7827+35]..[198,7827+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc/lexer.mll[2,29+2]..demos/calc/lexer.mll[2,29+13])
    Tstr_open Fresh
    module_expr (demos/calc/lexer.mll[2,29+7]..demos/calc/lexer.mll[2,29+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (demos/calc/lexer.mll[4,44+2]..demos/calc/lexer.mll[4,44+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc/lexer.mll[4,44+2]..demos/calc/lexer.mll[4,44+27])
          pext_name = "Error/275"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc/lexer.mll[4,44+21]..demos/calc/lexer.mll[4,44+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc/lexer.ml[9,100+0]..demos/calc/lexer.ml[104,5601+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc/lexer.ml[9,100+4]..demos/calc/lexer.ml[9,100+22])
          Tpat_var "__ocaml_lex_tables/276"
        expression (demos/calc/lexer.ml[9,100+25]..demos/calc/lexer.ml[104,5601+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc/lexer.ml[11,147+3]..demos/calc/lexer.ml[13,287+5])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc/lexer.ml[11,147+4]..demos/calc/lexer.ml[13,287+4]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc/lexer.ml[15,317+3]..demos/calc/lexer.ml[17,457+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc/lexer.ml[15,317+4]..demos/calc/lexer.ml[17,457+4]),None)
                "Lexing.lex_default"
                  expression (demos/calc/lexer.ml[19,487+3]..demos/calc/lexer.ml[21,627+5])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc/lexer.ml[19,487+4]..demos/calc/lexer.ml[21,627+4]),None)
                "Lexing.lex_trans"
                  expression (demos/calc/lexer.ml[23,655+3]..demos/calc/lexer.ml[56,2965+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc/lexer.ml[23,655+4]..demos/calc/lexer.ml[56,2965+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc/lexer.ml[58,3041+3]..demos/calc/lexer.ml[91,5351+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc/lexer.ml[58,3041+4]..demos/calc/lexer.ml[91,5351+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc/lexer.ml[93,5431+3]..demos/calc/lexer.ml[93,5431+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[93,5431+4]..demos/calc/lexer.ml[93,5431+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc/lexer.ml[95,5466+3]..demos/calc/lexer.ml[95,5466+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[95,5466+4]..demos/calc/lexer.ml[95,5466+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc/lexer.ml[97,5501+3]..demos/calc/lexer.ml[97,5501+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[97,5501+4]..demos/calc/lexer.ml[97,5501+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc/lexer.ml[99,5534+3]..demos/calc/lexer.ml[99,5534+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[99,5534+4]..demos/calc/lexer.ml[99,5534+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc/lexer.ml[101,5567+3]..demos/calc/lexer.ml[101,5567+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[101,5567+4]..demos/calc/lexer.ml[101,5567+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc/lexer.ml[103,5594+3]..demos/calc/lexer.ml[103,5594+5])
                    Texp_constant Const_string("",(demos/calc/lexer.ml[103,5594+4]..demos/calc/lexer.ml[103,5594+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc/lexer.ml[106,5604+0]..demos/calc/lexer.ml[198,7827+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc/lexer.ml[106,5604+8]..demos/calc/lexer.ml[106,5604+12])
          Tpat_var "line/301"
        expression (demos/calc/lexer.ml[106,5604+13]..demos/calc/lexer.ml[107,5626+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc/lexer.ml[106,5604+13]..demos/calc/lexer.ml[106,5604+19])
                Tpat_var "lexbuf/305"
              expression (demos/calc/lexer.ml[107,5626+3]..demos/calc/lexer.ml[107,5626+32])
                Texp_apply
                expression (demos/calc/lexer.ml[107,5626+3]..demos/calc/lexer.ml[107,5626+23])
                  Texp_ident "__ocaml_lex_line_rec/302"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc/lexer.ml[107,5626+24]..demos/calc/lexer.ml[107,5626+30])
                      Texp_ident "lexbuf/305"
                  <arg>
                    Nolabel
                    expression (demos/calc/lexer.ml[107,5626+31]..demos/calc/lexer.ml[107,5626+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc/lexer.ml[108,5659+4]..demos/calc/lexer.ml[108,5659+24])
          Tpat_var "__ocaml_lex_line_rec/302"
        expression (demos/calc/lexer.ml[108,5659+25]..demos/calc/lexer.ml[136,6457+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc/lexer.ml[108,5659+25]..demos/calc/lexer.ml[108,5659+31])
                Tpat_var "lexbuf/306"
              expression (demos/calc/lexer.ml[108,5659+32]..demos/calc/lexer.ml[136,6457+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc/lexer.ml[108,5659+32]..demos/calc/lexer.ml[108,5659+49])
                      Tpat_var "__ocaml_lex_state/307"
                    expression (demos/calc/lexer.ml[109,5711+2]..demos/calc/lexer.ml[136,6457+51])
                      Texp_match
                      expression (demos/calc/lexer.ml[109,5711+8]..demos/calc/lexer.ml[109,5711+65])
                        Texp_apply
                        expression (demos/calc/lexer.ml[109,5711+8]..demos/calc/lexer.ml[109,5711+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[109,5711+22]..demos/calc/lexer.ml[109,5711+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[109,5711+41]..demos/calc/lexer.ml[109,5711+58])
                              Texp_ident "__ocaml_lex_state/307"
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[109,5711+59]..demos/calc/lexer.ml[109,5711+65])
                              Texp_ident "lexbuf/306"
                        ]
                      [
                        <case>
                          pattern (demos/calc/lexer.ml[110,5782+8]..demos/calc/lexer.ml[110,5782+9])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[110,5782+8]..demos/calc/lexer.ml[110,5782+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc/lexer.ml[111,5795+0]..demos/calc/lexer.mll[15,5994+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc/lexer.mll[13,5827+21]..demos/calc/lexer.mll[13,5827+25])
                                  Tpat_var "line/333"
                                expression (demos/calc/lexer.ml[115,5881+2]..demos/calc/lexer.ml[115,5881+81])
                                  Texp_apply
                                  expression (demos/calc/lexer.ml[115,5881+2]..demos/calc/lexer.ml[115,5881+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[115,5881+20]..demos/calc/lexer.ml[115,5881+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[115,5881+27]..demos/calc/lexer.ml[115,5881+54])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[115,5881+27]..demos/calc/lexer.ml[115,5881+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[115,5881+55]..demos/calc/lexer.ml[115,5881+81])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[115,5881+55]..demos/calc/lexer.ml[115,5881+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc/lexer.mll[15,5994+4]..demos/calc/lexer.mll[15,5994+23])
                              Texp_tuple
                              [
                                expression (demos/calc/lexer.mll[15,5994+6]..demos/calc/lexer.mll[15,5994+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc/lexer.mll[15,5994+11]..demos/calc/lexer.mll[15,5994+15])
                                      Texp_ident "line/333"
                                  ]
                                expression (demos/calc/lexer.mll[15,5994+17]..demos/calc/lexer.mll[15,5994+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc/lexer.ml[120,6047+4]..demos/calc/lexer.ml[120,6047+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[120,6047+4]..demos/calc/lexer.ml[120,6047+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc/lexer.mll[18,6084+4]..demos/calc/lexer.mll[18,6084+19])
                            Texp_tuple
                            [
                              expression (demos/calc/lexer.mll[18,6084+6]..demos/calc/lexer.mll[18,6084+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc/lexer.mll[18,6084+12]..demos/calc/lexer.mll[18,6084+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc/lexer.ml[125,6133+4]..demos/calc/lexer.ml[125,6133+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[125,6133+4]..demos/calc/lexer.ml[125,6133+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc/lexer.ml[126,6142+0]..demos/calc/lexer.mll[22,6335+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc/lexer.mll[19,6174+15]..demos/calc/lexer.mll[19,6174+19])
                                  Tpat_var "line/334"
                                expression (demos/calc/lexer.ml[130,6222+2]..demos/calc/lexer.ml[130,6222+81])
                                  Texp_apply
                                  expression (demos/calc/lexer.ml[130,6222+2]..demos/calc/lexer.ml[130,6222+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[130,6222+20]..demos/calc/lexer.ml[130,6222+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[130,6222+27]..demos/calc/lexer.ml[130,6222+54])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[130,6222+27]..demos/calc/lexer.ml[130,6222+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[130,6222+55]..demos/calc/lexer.ml[130,6222+81])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[130,6222+55]..demos/calc/lexer.ml[130,6222+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc/lexer.mll[22,6335+4]..demos/calc/lexer.mll[22,6335+33])
                              Texp_tuple
                              [
                                expression (demos/calc/lexer.mll[22,6335+6]..demos/calc/lexer.mll[22,6335+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc/lexer.mll[22,6335+11]..demos/calc/lexer.mll[22,6335+24])
                                      Texp_apply
                                      expression (demos/calc/lexer.mll[22,6335+17]..demos/calc/lexer.mll[22,6335+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc/lexer.mll[22,6335+12]..demos/calc/lexer.mll[22,6335+16])
                                            Texp_ident "line/334"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc/lexer.mll[22,6335+19]..demos/calc/lexer.mll[22,6335+23])
                                            Texp_constant Const_string("\n",(demos/calc/lexer.mll[22,6335+20]..demos/calc/lexer.mll[22,6335+22]),None)
                                      ]
                                  ]
                                expression (demos/calc/lexer.mll[22,6335+26]..demos/calc/lexer.mll[22,6335+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc/lexer.ml[135,6398+4]..demos/calc/lexer.ml[135,6398+21])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[135,6398+4]..demos/calc/lexer.ml[135,6398+21])
                              Tpat_var "__ocaml_lex_state/332"
                          expression (demos/calc/lexer.ml[135,6398+25]..demos/calc/lexer.ml[136,6457+51])
                            Texp_sequence
                            expression (demos/calc/lexer.ml[135,6398+25]..demos/calc/lexer.ml[135,6398+57])
                              Texp_apply
                              expression (demos/calc/lexer.ml[135,6398+25]..demos/calc/lexer.ml[135,6398+50])
                                Texp_field
                                expression (demos/calc/lexer.ml[135,6398+25]..demos/calc/lexer.ml[135,6398+31])
                                  Texp_ident "lexbuf/306"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[135,6398+51]..demos/calc/lexer.ml[135,6398+57])
                                    Texp_ident "lexbuf/306"
                              ]
                            expression (demos/calc/lexer.ml[136,6457+6]..demos/calc/lexer.ml[136,6457+51])
                              Texp_apply
                              expression (demos/calc/lexer.ml[136,6457+6]..demos/calc/lexer.ml[136,6457+26])
                                Texp_ident "__ocaml_lex_line_rec/302"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[136,6457+27]..demos/calc/lexer.ml[136,6457+33])
                                    Texp_ident "lexbuf/306"
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[136,6457+34]..demos/calc/lexer.ml[136,6457+51])
                                    Texp_ident "__ocaml_lex_state/332"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc/lexer.ml[138,6510+4]..demos/calc/lexer.ml[138,6510+9])
          Tpat_var "token/303"
        expression (demos/calc/lexer.ml[138,6510+10]..demos/calc/lexer.ml[139,6529+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc/lexer.ml[138,6510+10]..demos/calc/lexer.ml[138,6510+16])
                Tpat_var "lexbuf/335"
              expression (demos/calc/lexer.ml[139,6529+3]..demos/calc/lexer.ml[139,6529+33])
                Texp_apply
                expression (demos/calc/lexer.ml[139,6529+3]..demos/calc/lexer.ml[139,6529+24])
                  Texp_ident "__ocaml_lex_token_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc/lexer.ml[139,6529+25]..demos/calc/lexer.ml[139,6529+31])
                      Texp_ident "lexbuf/335"
                  <arg>
                    Nolabel
                    expression (demos/calc/lexer.ml[139,6529+32]..demos/calc/lexer.ml[139,6529+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc/lexer.ml[140,6563+4]..demos/calc/lexer.ml[140,6563+25])
          Tpat_var "__ocaml_lex_token_rec/304"
        expression (demos/calc/lexer.ml[140,6563+26]..demos/calc/lexer.ml[198,7827+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc/lexer.ml[140,6563+26]..demos/calc/lexer.ml[140,6563+32])
                Tpat_var "lexbuf/336"
              expression (demos/calc/lexer.ml[140,6563+33]..demos/calc/lexer.ml[198,7827+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc/lexer.ml[140,6563+33]..demos/calc/lexer.ml[140,6563+50])
                      Tpat_var "__ocaml_lex_state/337"
                    expression (demos/calc/lexer.ml[141,6616+2]..demos/calc/lexer.ml[198,7827+52])
                      Texp_match
                      expression (demos/calc/lexer.ml[141,6616+8]..demos/calc/lexer.ml[141,6616+65])
                        Texp_apply
                        expression (demos/calc/lexer.ml[141,6616+8]..demos/calc/lexer.ml[141,6616+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[141,6616+22]..demos/calc/lexer.ml[141,6616+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[141,6616+41]..demos/calc/lexer.ml[141,6616+58])
                              Texp_ident "__ocaml_lex_state/337"
                          <arg>
                            Nolabel
                            expression (demos/calc/lexer.ml[141,6616+59]..demos/calc/lexer.ml[141,6616+65])
                              Texp_ident "lexbuf/336"
                        ]
                      [
                        <case>
                          pattern (demos/calc/lexer.ml[142,6687+8]..demos/calc/lexer.ml[142,6687+9])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[142,6687+8]..demos/calc/lexer.ml[142,6687+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc/lexer.mll[29,6728+4]..demos/calc/lexer.mll[29,6728+20])
                            Texp_apply
                            expression (demos/calc/lexer.mll[29,6728+6]..demos/calc/lexer.mll[29,6728+11])
                              Texp_ident "token/303"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc/lexer.mll[29,6728+12]..demos/calc/lexer.mll[29,6728+18])
                                  Texp_ident "lexbuf/336"
                            ]
                        <case>
                          pattern (demos/calc/lexer.ml[147,6778+4]..demos/calc/lexer.ml[147,6778+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[147,6778+4]..demos/calc/lexer.ml[147,6778+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc/lexer.mll[31,6815+4]..demos/calc/lexer.mll[31,6815+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[152,6856+4]..demos/calc/lexer.ml[152,6856+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[152,6856+4]..demos/calc/lexer.ml[152,6856+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc/lexer.ml[153,6865+0]..demos/calc/lexer.mll[33,7056+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc/lexer.mll[32,6897+16]..demos/calc/lexer.mll[32,6897+17])
                                  Tpat_var "i/339"
                                expression (demos/calc/lexer.ml[157,6943+2]..demos/calc/lexer.ml[157,6943+81])
                                  Texp_apply
                                  expression (demos/calc/lexer.ml[157,6943+2]..demos/calc/lexer.ml[157,6943+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[157,6943+20]..demos/calc/lexer.ml[157,6943+26])
                                        Texp_ident "lexbuf/336"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[157,6943+27]..demos/calc/lexer.ml[157,6943+54])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[157,6943+27]..demos/calc/lexer.ml[157,6943+33])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.ml[157,6943+55]..demos/calc/lexer.ml[157,6943+81])
                                        Texp_field
                                        expression (demos/calc/lexer.ml[157,6943+55]..demos/calc/lexer.ml[157,6943+61])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc/lexer.mll[33,7056+4]..demos/calc/lexer.mll[33,7056+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc/lexer.mll[33,7056+10]..demos/calc/lexer.mll[33,7056+27])
                                  Texp_apply
                                  expression (demos/calc/lexer.mll[33,7056+11]..demos/calc/lexer.mll[33,7056+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc/lexer.mll[33,7056+25]..demos/calc/lexer.mll[33,7056+26])
                                        Texp_ident "i/339"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc/lexer.ml[162,7115+4]..demos/calc/lexer.ml[162,7115+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[162,7115+4]..demos/calc/lexer.ml[162,7115+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc/lexer.mll[35,7152+4]..demos/calc/lexer.mll[35,7152+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[167,7194+4]..demos/calc/lexer.ml[167,7194+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[167,7194+4]..demos/calc/lexer.ml[167,7194+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc/lexer.mll[37,7231+4]..demos/calc/lexer.mll[37,7231+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[172,7274+4]..demos/calc/lexer.ml[172,7274+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[172,7274+4]..demos/calc/lexer.ml[172,7274+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc/lexer.mll[39,7311+4]..demos/calc/lexer.mll[39,7311+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[177,7354+4]..demos/calc/lexer.ml[177,7354+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[177,7354+4]..demos/calc/lexer.ml[177,7354+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc/lexer.mll[41,7391+4]..demos/calc/lexer.mll[41,7391+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[182,7432+4]..demos/calc/lexer.ml[182,7432+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[182,7432+4]..demos/calc/lexer.ml[182,7432+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc/lexer.mll[43,7469+4]..demos/calc/lexer.mll[43,7469+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[187,7513+4]..demos/calc/lexer.ml[187,7513+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[187,7513+4]..demos/calc/lexer.ml[187,7513+5])
                              Tpat_constant Const_int 8
                          expression (demos/calc/lexer.mll[45,7550+4]..demos/calc/lexer.mll[45,7550+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc/lexer.ml[192,7594+4]..demos/calc/lexer.ml[192,7594+5])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[192,7594+4]..demos/calc/lexer.ml[192,7594+5])
                              Tpat_constant Const_int 9
                          expression (demos/calc/lexer.mll[47,7631+4]..demos/calc/lexer.mll[47,7631+107])
                            Texp_apply
                            expression (demos/calc/lexer.mll[47,7631+6]..demos/calc/lexer.mll[47,7631+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc/lexer.mll[47,7631+12]..demos/calc/lexer.mll[47,7631+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc/lexer.mll[47,7631+19]..demos/calc/lexer.mll[47,7631+104])
                                      Texp_apply
                                      expression (demos/calc/lexer.mll[47,7631+20]..demos/calc/lexer.mll[47,7631+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost,None)
                                                  expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost,None)
                                                          expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc/lexer.mll[47,7631+35]..demos/calc/lexer.mll[47,7631+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc/lexer.mll[47,7631+75]..demos/calc/lexer.mll[47,7631+103])
                                            Texp_apply
                                            expression (demos/calc/lexer.mll[47,7631+76]..demos/calc/lexer.mll[47,7631+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc/lexer.mll[47,7631+96]..demos/calc/lexer.mll[47,7631+102])
                                                  Texp_ident "lexbuf/336"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc/lexer.ml[197,7768+4]..demos/calc/lexer.ml[197,7768+21])
                            Tpat_value
                            pattern (demos/calc/lexer.ml[197,7768+4]..demos/calc/lexer.ml[197,7768+21])
                              Tpat_var "__ocaml_lex_state/338"
                          expression (demos/calc/lexer.ml[197,7768+25]..demos/calc/lexer.ml[198,7827+52])
                            Texp_sequence
                            expression (demos/calc/lexer.ml[197,7768+25]..demos/calc/lexer.ml[197,7768+57])
                              Texp_apply
                              expression (demos/calc/lexer.ml[197,7768+25]..demos/calc/lexer.ml[197,7768+50])
                                Texp_field
                                expression (demos/calc/lexer.ml[197,7768+25]..demos/calc/lexer.ml[197,7768+31])
                                  Texp_ident "lexbuf/336"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[197,7768+51]..demos/calc/lexer.ml[197,7768+57])
                                    Texp_ident "lexbuf/336"
                              ]
                            expression (demos/calc/lexer.ml[198,7827+6]..demos/calc/lexer.ml[198,7827+52])
                              Texp_apply
                              expression (demos/calc/lexer.ml[198,7827+6]..demos/calc/lexer.ml[198,7827+27])
                                Texp_ident "__ocaml_lex_token_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[198,7827+28]..demos/calc/lexer.ml[198,7827+34])
                                    Texp_ident "lexbuf/336"
                                <arg>
                                  Nolabel
                                  expression (demos/calc/lexer.ml[198,7827+35]..demos/calc/lexer.ml[198,7827+52])
                                    Texp_ident "__ocaml_lex_state/338"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(setglobal Dune__exe__Lexer!
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (letrec
      (line/301
         (function lexbuf/305
           (funct-body Dune__exe__Lexer.line demos/calc/lexer.ml(106)<ghost>:5617-5658
             (before Dune__exe__Lexer.line demos/calc/lexer.ml(107):5629-5658
               (after Dune__exe__Lexer.line demos/calc/lexer.ml(107):5629-5658
                 (apply __ocaml_lex_line_rec/302 lexbuf/305 0)))))
        __ocaml_lex_line_rec/302
          (function lexbuf/306 __ocaml_lex_state/307[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(108)<ghost>:5684-6508
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(109):5713-6508
                (let
                  (__ocaml_lex_state/332 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(109):5719-5776
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/307
                         lexbuf/306)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/332) (exit 1)
                      (switch* __ocaml_lex_state/332
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(111):5795-6017
                          (let
                            (line/333 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(115):5883-5962
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/306 (field_int 4 lexbuf/306)
                                   (field_int 5 lexbuf/306))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(15):5998-6017
                              (makeblock 0 (*,int) (makeblock 0 line/333) 1))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(18):6088-6103
                          [0: 0 0])
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(126):6142-6368
                          (let
                            (line/334 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(130):6224-6303
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/306 (field_int 4 lexbuf/306)
                                   (field_int 5 lexbuf/306))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(22):6339-6368
                              (makeblock 0 (*,int)
                                (makeblock 0
                                  (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(22):6346-6359
                                    (apply (field_imm 27 (global Stdlib!))
                                      line/334 "\n")))
                                0))))))
                   with (1)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(135):6423-6508
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(135):6423-6455
                          (apply (field_imm 0 lexbuf/306) lexbuf/306))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(136):6463-6508
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(136):6463-6508
                            (apply __ocaml_lex_line_rec/302 lexbuf/306
                              __ocaml_lex_state/332))))))))))
        token/303
          (function lexbuf/335
            (funct-body Dune__exe__Lexer.token demos/calc/lexer.ml(138)<ghost>:6520-6562
              (before Dune__exe__Lexer.token demos/calc/lexer.ml(139):6532-6562
                (after Dune__exe__Lexer.token demos/calc/lexer.ml(139):6532-6562
                  (apply __ocaml_lex_token_rec/304 lexbuf/335 5)))))
        __ocaml_lex_token_rec/304
          (function lexbuf/336 __ocaml_lex_state/337[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(140)<ghost>:6589-7879
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(141):6618-7879
                (let
                  (__ocaml_lex_state/338 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(141):6624-6681
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/337
                         lexbuf/336)))
                  (catch
                    (if (isout 9 __ocaml_lex_state/338) (exit 2)
                      (switch* __ocaml_lex_state/338
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(29):6732-6748
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(29):6732-6748
                            (apply token/303 lexbuf/336)))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(31):6819-6826
                          5)
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(153):6865-7085
                          (let
                            (i/339 =
                               (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(157):6945-7024
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/336 (field_int 4 lexbuf/336)
                                   (field_int 5 lexbuf/336))))
                            (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(33):7060-7085
                              (makeblock 0 (int)
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(33):7066-7083
                                  (caml_int_of_string i/339))))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(35):7156-7164
                          2)
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(37):7235-7244
                          3)
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(39):7315-7324
                          0)
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(41):7395-7402
                          6)
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(43):7473-7483
                          4)
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(45):7554-7564
                          1)
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7635-7738
                          (raise
                            (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7635-7738
                              (makeblock 0 Error/275
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7650-7735
                                  (apply
                                    (field_imm 3 (global Stdlib__Printf!))
                                    [0:
                                     [11:
                                      "At offset "
                                      [4:
                                       0 0 0
                                       [11: ": unexpected character.\n" 0]]]
                                     "At offset %d: unexpected character.\n"]
                                    (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7706-7734
                                      (apply
                                        (field_imm 9
                                          (global Stdlib__Lexing!))
                                        lexbuf/336))))))))))
                   with (2)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(197):7793-7879
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(197):7793-7825
                          (apply (field_imm 0 lexbuf/336) lexbuf/336))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(198):7833-7879
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(198):7833-7879
                            (apply __ocaml_lex_token_rec/304 lexbuf/336
                              __ocaml_lex_state/338)))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/275 __ocaml_lex_tables/276 line/301
          __ocaml_lex_line_rec/302 token/303 __ocaml_lex_token_rec/304)))))
(setglobal Dune__exe__Lexer!
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (letrec
      (line/301
         (function lexbuf/305
           (funct-body Dune__exe__Lexer.line demos/calc/lexer.ml(106)<ghost>:5617-5658
             (before Dune__exe__Lexer.line demos/calc/lexer.ml(107):5629-5658
               (after Dune__exe__Lexer.line demos/calc/lexer.ml(107):5629-5658
                 (apply __ocaml_lex_line_rec/302 lexbuf/305 0)))))
        __ocaml_lex_line_rec/302
          (function lexbuf/306 __ocaml_lex_state/307[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(108)<ghost>:5684-6508
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(109):5713-6508
                (let
                  (__ocaml_lex_state/332 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(109):5719-5776
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/307
                         lexbuf/306)))
                  (if (isout 2 __ocaml_lex_state/332)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(135):6423-6508
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(135):6423-6455
                          (apply (field_imm 0 lexbuf/306) lexbuf/306))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(136):6463-6508
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(136):6463-6508
                            (apply __ocaml_lex_line_rec/302 lexbuf/306
                              __ocaml_lex_state/332)))))
                    (switch* __ocaml_lex_state/332
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(111):5795-6017
                        (let
                          (line/333 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(115):5883-5962
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/306 (field_int 4 lexbuf/306)
                                 (field_int 5 lexbuf/306))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(15):5998-6017
                            (makeblock 0 (*,int) (makeblock 0 line/333) 1))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(18):6088-6103
                        [0: 0 0])
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(126):6142-6368
                        (let
                          (line/334 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.ml(130):6224-6303
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/306 (field_int 4 lexbuf/306)
                                 (field_int 5 lexbuf/306))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(22):6339-6368
                            (makeblock 0 (*,int)
                              (makeblock 0
                                (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc/lexer.mll(22):6346-6359
                                  (apply (field_imm 27 (global Stdlib!))
                                    line/334 "\n")))
                              0))))))))))
        token/303
          (function lexbuf/335
            (funct-body Dune__exe__Lexer.token demos/calc/lexer.ml(138)<ghost>:6520-6562
              (before Dune__exe__Lexer.token demos/calc/lexer.ml(139):6532-6562
                (after Dune__exe__Lexer.token demos/calc/lexer.ml(139):6532-6562
                  (apply __ocaml_lex_token_rec/304 lexbuf/335 5)))))
        __ocaml_lex_token_rec/304
          (function lexbuf/336 __ocaml_lex_state/337[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(140)<ghost>:6589-7879
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(141):6618-7879
                (let
                  (__ocaml_lex_state/338 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(141):6624-6681
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/276 __ocaml_lex_state/337
                         lexbuf/336)))
                  (if (isout 9 __ocaml_lex_state/338)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(197):7793-7879
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(197):7793-7825
                          (apply (field_imm 0 lexbuf/336) lexbuf/336))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(198):7833-7879
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(198):7833-7879
                            (apply __ocaml_lex_token_rec/304 lexbuf/336
                              __ocaml_lex_state/338)))))
                    (switch* __ocaml_lex_state/338
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(29):6732-6748
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(29):6732-6748
                          (apply token/303 lexbuf/336)))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(31):6819-6826
                        5)
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(153):6865-7085
                        (let
                          (i/339 =
                             (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.ml(157):6945-7024
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/336 (field_int 4 lexbuf/336)
                                 (field_int 5 lexbuf/336))))
                          (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(33):7060-7085
                            (makeblock 0 (int)
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(33):7066-7083
                                (caml_int_of_string i/339))))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(35):7156-7164
                        2)
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(37):7235-7244
                        3)
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(39):7315-7324
                        0)
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(41):7395-7402
                        6)
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(43):7473-7483
                        4)
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(45):7554-7564
                        1)
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7635-7738
                        (raise
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7635-7738
                            (makeblock 0 Error/275
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7650-7735
                                (apply (field_imm 3 (global Stdlib__Printf!))
                                  [0:
                                   [11:
                                    "At offset "
                                    [4:
                                     0 0 0
                                     [11: ": unexpected character.\n" 0]]]
                                   "At offset %d: unexpected character.\n"]
                                  (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc/lexer.mll(47):7706-7734
                                    (apply
                                      (field_imm 9 (global Stdlib__Lexing!))
                                      lexbuf/336)))))))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/275 __ocaml_lex_tables/276 line/301
          __ocaml_lex_line_rec/302 token/303 __ocaml_lex_token_rec/304)))))

[
  structure_item (demos/calc-incremental/lexer.mll[2,41+2]..[2,41+13])
    Pstr_open Fresh
    module_expr (demos/calc-incremental/lexer.mll[2,41+7]..[2,41+13])
      Pmod_ident "Parser" (demos/calc-incremental/lexer.mll[2,41+7]..[2,41+13])
  structure_item (demos/calc-incremental/lexer.mll[4,56+2]..[4,56+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-incremental/lexer.mll[4,56+2]..[4,56+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc-incremental/lexer.mll[4,56+21]..[4,56+27])
                  Ptyp_constr "string" (demos/calc-incremental/lexer.mll[4,56+21]..[4,56+27])
                  []
              ]
              None
  structure_item (demos/calc-incremental/lexer.ml[9,124+0]..[104,5625+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc-incremental/lexer.ml[9,124+4]..[9,124+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc-incremental/lexer.ml[9,124+4]..[9,124+22])
        expression (demos/calc-incremental/lexer.ml[9,124+25]..[104,5625+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc-incremental/lexer.ml[10,151+2]..[10,151+17])
              expression (demos/calc-incremental/lexer.ml[11,171+3]..[13,311+5])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-incremental/lexer.ml[11,171+4]..[13,311+4]),None)
            "Lexing.lex_backtrk" (demos/calc-incremental/lexer.ml[14,318+2]..[14,318+20])
              expression (demos/calc-incremental/lexer.ml[15,341+3]..[17,481+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-incremental/lexer.ml[15,341+4]..[17,481+4]),None)
            "Lexing.lex_default" (demos/calc-incremental/lexer.ml[18,488+2]..[18,488+20])
              expression (demos/calc-incremental/lexer.ml[19,511+3]..[21,651+5])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-incremental/lexer.ml[19,511+4]..[21,651+4]),None)
            "Lexing.lex_trans" (demos/calc-incremental/lexer.ml[22,658+2]..[22,658+18])
              expression (demos/calc-incremental/lexer.ml[23,679+3]..[56,2989+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-incremental/lexer.ml[23,679+4]..[56,2989+52]),None)
            "Lexing.lex_check" (demos/calc-incremental/lexer.ml[57,3044+2]..[57,3044+18])
              expression (demos/calc-incremental/lexer.ml[58,3065+3]..[91,5375+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-incremental/lexer.ml[58,3065+4]..[91,5375+52]),None)
            "Lexing.lex_base_code" (demos/calc-incremental/lexer.ml[92,5430+2]..[92,5430+22])
              expression (demos/calc-incremental/lexer.ml[93,5455+3]..[93,5455+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[93,5455+4]..[93,5455+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc-incremental/lexer.ml[94,5462+2]..[94,5462+25])
              expression (demos/calc-incremental/lexer.ml[95,5490+3]..[95,5490+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[95,5490+4]..[95,5490+4]),None)
            "Lexing.lex_default_code" (demos/calc-incremental/lexer.ml[96,5497+2]..[96,5497+25])
              expression (demos/calc-incremental/lexer.ml[97,5525+3]..[97,5525+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[97,5525+4]..[97,5525+4]),None)
            "Lexing.lex_trans_code" (demos/calc-incremental/lexer.ml[98,5532+2]..[98,5532+23])
              expression (demos/calc-incremental/lexer.ml[99,5558+3]..[99,5558+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[99,5558+4]..[99,5558+4]),None)
            "Lexing.lex_check_code" (demos/calc-incremental/lexer.ml[100,5565+2]..[100,5565+23])
              expression (demos/calc-incremental/lexer.ml[101,5591+3]..[101,5591+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[101,5591+4]..[101,5591+4]),None)
            "Lexing.lex_code" (demos/calc-incremental/lexer.ml[102,5598+2]..[102,5598+17])
              expression (demos/calc-incremental/lexer.ml[103,5618+3]..[103,5618+5])
                Pexp_constant PConst_string("",(demos/calc-incremental/lexer.ml[103,5618+4]..[103,5618+4]),None)
          ]
          None
    ]
  structure_item (demos/calc-incremental/lexer.ml[106,5628+0]..[198,8235+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc-incremental/lexer.ml[106,5628+8]..[106,5628+12])
          Ppat_var "line" (demos/calc-incremental/lexer.ml[106,5628+8]..[106,5628+12])
        expression (demos/calc-incremental/lexer.ml[106,5628+13]..[107,5650+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-incremental/lexer.ml[106,5628+13]..[106,5628+19])
            Ppat_var "lexbuf" (demos/calc-incremental/lexer.ml[106,5628+13]..[106,5628+19])
          expression (demos/calc-incremental/lexer.ml[107,5650+3]..[107,5650+32])
            Pexp_apply
            expression (demos/calc-incremental/lexer.ml[107,5650+3]..[107,5650+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc-incremental/lexer.ml[107,5650+3]..[107,5650+23])
            [
              <arg>
              Nolabel
                expression (demos/calc-incremental/lexer.ml[107,5650+24]..[107,5650+30])
                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[107,5650+24]..[107,5650+30])
              <arg>
              Nolabel
                expression (demos/calc-incremental/lexer.ml[107,5650+31]..[107,5650+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[108,5683+4]..[108,5683+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc-incremental/lexer.ml[108,5683+4]..[108,5683+24])
        expression (demos/calc-incremental/lexer.ml[108,5683+25]..[136,6601+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-incremental/lexer.ml[108,5683+25]..[108,5683+31])
            Ppat_var "lexbuf" (demos/calc-incremental/lexer.ml[108,5683+25]..[108,5683+31])
          expression (demos/calc-incremental/lexer.ml[108,5683+32]..[136,6601+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-incremental/lexer.ml[108,5683+32]..[108,5683+49])
              Ppat_var "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[108,5683+32]..[108,5683+49])
            expression (demos/calc-incremental/lexer.ml[109,5735+2]..[136,6601+51])
              Pexp_match
              expression (demos/calc-incremental/lexer.ml[109,5735+8]..[109,5735+65])
                Pexp_apply
                expression (demos/calc-incremental/lexer.ml[109,5735+8]..[109,5735+21])
                  Pexp_ident "Lexing.engine" (demos/calc-incremental/lexer.ml[109,5735+8]..[109,5735+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[109,5735+22]..[109,5735+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-incremental/lexer.ml[109,5735+22]..[109,5735+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[109,5735+41]..[109,5735+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[109,5735+41]..[109,5735+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[109,5735+59]..[109,5735+65])
                      Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[109,5735+59]..[109,5735+65])
                ]
              [
                <case>
                  pattern (demos/calc-incremental/lexer.ml[110,5806+8]..[110,5806+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-incremental/lexer.ml[111,5819+0]..demos/calc-incremental/lexer.mll[15,6054+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-incremental/lexer.mll[13,5863+21]..[13,5863+25])
                          Ppat_var "line" (demos/calc-incremental/lexer.mll[13,5863+21]..[13,5863+25])
                        expression (demos/calc-incremental/lexer.ml[115,5929+2]..[115,5929+81])
                          Pexp_apply
                          expression (demos/calc-incremental/lexer.ml[115,5929+2]..[115,5929+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-incremental/lexer.ml[115,5929+2]..[115,5929+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[115,5929+20]..[115,5929+26])
                                Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[115,5929+20]..[115,5929+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[115,5929+27]..[115,5929+54])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[115,5929+27]..[115,5929+33])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[115,5929+27]..[115,5929+33])
                                "Lexing.lex_start_pos" (demos/calc-incremental/lexer.ml[115,5929+34]..[115,5929+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[115,5929+55]..[115,5929+81])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[115,5929+55]..[115,5929+61])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[115,5929+55]..[115,5929+61])
                                "Lexing.lex_curr_pos" (demos/calc-incremental/lexer.ml[115,5929+62]..[115,5929+81])
                          ]
                    ]
                    expression (demos/calc-incremental/lexer.mll[15,6054+4]..[15,6054+23])
                      Pexp_tuple
                      [
                        expression (demos/calc-incremental/lexer.mll[15,6054+6]..[15,6054+15])
                          Pexp_construct "Some" (demos/calc-incremental/lexer.mll[15,6054+6]..[15,6054+10])
                          Some
                            expression (demos/calc-incremental/lexer.mll[15,6054+11]..[15,6054+15])
                              Pexp_ident "line" (demos/calc-incremental/lexer.mll[15,6054+11]..[15,6054+15])
                        expression (demos/calc-incremental/lexer.mll[15,6054+17]..[15,6054+21])
                          Pexp_construct "true" (demos/calc-incremental/lexer.mll[15,6054+17]..[15,6054+21])
                          None
                      ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[120,6119+4]..[120,6119+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-incremental/lexer.mll[18,6168+4]..[18,6168+19])
                    Pexp_tuple
                    [
                      expression (demos/calc-incremental/lexer.mll[18,6168+6]..[18,6168+10])
                        Pexp_construct "None" (demos/calc-incremental/lexer.mll[18,6168+6]..[18,6168+10])
                        None
                      expression (demos/calc-incremental/lexer.mll[18,6168+12]..[18,6168+17])
                        Pexp_construct "false" (demos/calc-incremental/lexer.mll[18,6168+12]..[18,6168+17])
                        None
                    ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[125,6229+4]..[125,6229+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-incremental/lexer.ml[126,6238+0]..demos/calc-incremental/lexer.mll[22,6467+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-incremental/lexer.mll[19,6282+15]..[19,6282+19])
                          Ppat_var "line" (demos/calc-incremental/lexer.mll[19,6282+15]..[19,6282+19])
                        expression (demos/calc-incremental/lexer.ml[130,6342+2]..[130,6342+81])
                          Pexp_apply
                          expression (demos/calc-incremental/lexer.ml[130,6342+2]..[130,6342+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-incremental/lexer.ml[130,6342+2]..[130,6342+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[130,6342+20]..[130,6342+26])
                                Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[130,6342+20]..[130,6342+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[130,6342+27]..[130,6342+54])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[130,6342+27]..[130,6342+33])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[130,6342+27]..[130,6342+33])
                                "Lexing.lex_start_pos" (demos/calc-incremental/lexer.ml[130,6342+34]..[130,6342+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[130,6342+55]..[130,6342+81])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[130,6342+55]..[130,6342+61])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[130,6342+55]..[130,6342+61])
                                "Lexing.lex_curr_pos" (demos/calc-incremental/lexer.ml[130,6342+62]..[130,6342+81])
                          ]
                    ]
                    expression (demos/calc-incremental/lexer.mll[22,6467+4]..[22,6467+33])
                      Pexp_tuple
                      [
                        expression (demos/calc-incremental/lexer.mll[22,6467+6]..[22,6467+24])
                          Pexp_construct "Some" (demos/calc-incremental/lexer.mll[22,6467+6]..[22,6467+10])
                          Some
                            expression (demos/calc-incremental/lexer.mll[22,6467+11]..[22,6467+24])
                              Pexp_apply
                              expression (demos/calc-incremental/lexer.mll[22,6467+17]..[22,6467+18])
                                Pexp_ident "^" (demos/calc-incremental/lexer.mll[22,6467+17]..[22,6467+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-incremental/lexer.mll[22,6467+12]..[22,6467+16])
                                    Pexp_ident "line" (demos/calc-incremental/lexer.mll[22,6467+12]..[22,6467+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc-incremental/lexer.mll[22,6467+19]..[22,6467+23])
                                    Pexp_constant PConst_string("\n",(demos/calc-incremental/lexer.mll[22,6467+20]..[22,6467+22]),None)
                              ]
                        expression (demos/calc-incremental/lexer.mll[22,6467+26]..[22,6467+31])
                          Pexp_construct "false" (demos/calc-incremental/lexer.mll[22,6467+26]..[22,6467+31])
                          None
                      ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[135,6542+4]..[135,6542+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[135,6542+4]..[135,6542+21])
                  expression (demos/calc-incremental/lexer.ml[135,6542+25]..[136,6601+51])
                    Pexp_sequence
                    expression (demos/calc-incremental/lexer.ml[135,6542+25]..[135,6542+57])
                      Pexp_apply
                      expression (demos/calc-incremental/lexer.ml[135,6542+25]..[135,6542+50])
                        Pexp_field
                        expression (demos/calc-incremental/lexer.ml[135,6542+25]..[135,6542+31])
                          Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[135,6542+25]..[135,6542+31])
                        "Lexing.refill_buff" (demos/calc-incremental/lexer.ml[135,6542+32]..[135,6542+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[135,6542+51]..[135,6542+57])
                            Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[135,6542+51]..[135,6542+57])
                      ]
                    expression (demos/calc-incremental/lexer.ml[136,6601+6]..[136,6601+51])
                      Pexp_apply
                      expression (demos/calc-incremental/lexer.ml[136,6601+6]..[136,6601+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc-incremental/lexer.ml[136,6601+6]..[136,6601+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[136,6601+27]..[136,6601+33])
                            Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[136,6601+27]..[136,6601+33])
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[136,6601+34]..[136,6601+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[136,6601+34]..[136,6601+51])
                      ]
              ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[138,6654+4]..[138,6654+9])
          Ppat_var "token" (demos/calc-incremental/lexer.ml[138,6654+4]..[138,6654+9])
        expression (demos/calc-incremental/lexer.ml[138,6654+10]..[139,6673+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-incremental/lexer.ml[138,6654+10]..[138,6654+16])
            Ppat_var "lexbuf" (demos/calc-incremental/lexer.ml[138,6654+10]..[138,6654+16])
          expression (demos/calc-incremental/lexer.ml[139,6673+3]..[139,6673+33])
            Pexp_apply
            expression (demos/calc-incremental/lexer.ml[139,6673+3]..[139,6673+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc-incremental/lexer.ml[139,6673+3]..[139,6673+24])
            [
              <arg>
              Nolabel
                expression (demos/calc-incremental/lexer.ml[139,6673+25]..[139,6673+31])
                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[139,6673+25]..[139,6673+31])
              <arg>
              Nolabel
                expression (demos/calc-incremental/lexer.ml[139,6673+32]..[139,6673+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[140,6707+4]..[140,6707+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc-incremental/lexer.ml[140,6707+4]..[140,6707+25])
        expression (demos/calc-incremental/lexer.ml[140,6707+26]..[198,8235+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-incremental/lexer.ml[140,6707+26]..[140,6707+32])
            Ppat_var "lexbuf" (demos/calc-incremental/lexer.ml[140,6707+26]..[140,6707+32])
          expression (demos/calc-incremental/lexer.ml[140,6707+33]..[198,8235+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-incremental/lexer.ml[140,6707+33]..[140,6707+50])
              Ppat_var "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[140,6707+33]..[140,6707+50])
            expression (demos/calc-incremental/lexer.ml[141,6760+2]..[198,8235+52])
              Pexp_match
              expression (demos/calc-incremental/lexer.ml[141,6760+8]..[141,6760+65])
                Pexp_apply
                expression (demos/calc-incremental/lexer.ml[141,6760+8]..[141,6760+21])
                  Pexp_ident "Lexing.engine" (demos/calc-incremental/lexer.ml[141,6760+8]..[141,6760+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[141,6760+22]..[141,6760+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-incremental/lexer.ml[141,6760+22]..[141,6760+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[141,6760+41]..[141,6760+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[141,6760+41]..[141,6760+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-incremental/lexer.ml[141,6760+59]..[141,6760+65])
                      Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[141,6760+59]..[141,6760+65])
                ]
              [
                <case>
                  pattern (demos/calc-incremental/lexer.ml[142,6831+8]..[142,6831+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-incremental/lexer.mll[29,6884+4]..[29,6884+20])
                    Pexp_apply
                    expression (demos/calc-incremental/lexer.mll[29,6884+6]..[29,6884+11])
                      Pexp_ident "token" (demos/calc-incremental/lexer.mll[29,6884+6]..[29,6884+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-incremental/lexer.mll[29,6884+12]..[29,6884+18])
                          Pexp_ident "lexbuf" (demos/calc-incremental/lexer.mll[29,6884+12]..[29,6884+18])
                    ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[147,6946+4]..[147,6946+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-incremental/lexer.mll[31,6995+4]..[31,6995+11])
                    Pexp_construct "EOL" (demos/calc-incremental/lexer.mll[31,6995+6]..[31,6995+9])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[152,7048+4]..[152,7048+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-incremental/lexer.ml[153,7057+0]..demos/calc-incremental/lexer.mll[33,7284+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-incremental/lexer.mll[32,7101+16]..[32,7101+17])
                          Ppat_var "i" (demos/calc-incremental/lexer.mll[32,7101+16]..[32,7101+17])
                        expression (demos/calc-incremental/lexer.ml[157,7159+2]..[157,7159+81])
                          Pexp_apply
                          expression (demos/calc-incremental/lexer.ml[157,7159+2]..[157,7159+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-incremental/lexer.ml[157,7159+2]..[157,7159+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[157,7159+20]..[157,7159+26])
                                Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[157,7159+20]..[157,7159+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[157,7159+27]..[157,7159+54])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[157,7159+27]..[157,7159+33])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[157,7159+27]..[157,7159+33])
                                "Lexing.lex_start_pos" (demos/calc-incremental/lexer.ml[157,7159+34]..[157,7159+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.ml[157,7159+55]..[157,7159+81])
                                Pexp_field
                                expression (demos/calc-incremental/lexer.ml[157,7159+55]..[157,7159+61])
                                  Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[157,7159+55]..[157,7159+61])
                                "Lexing.lex_curr_pos" (demos/calc-incremental/lexer.ml[157,7159+62]..[157,7159+81])
                          ]
                    ]
                    expression (demos/calc-incremental/lexer.mll[33,7284+4]..[33,7284+29])
                      Pexp_construct "INT" (demos/calc-incremental/lexer.mll[33,7284+6]..[33,7284+9])
                      Some
                        expression (demos/calc-incremental/lexer.mll[33,7284+10]..[33,7284+27])
                          Pexp_apply
                          expression (demos/calc-incremental/lexer.mll[33,7284+11]..[33,7284+24])
                            Pexp_ident "int_of_string" (demos/calc-incremental/lexer.mll[33,7284+11]..[33,7284+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-incremental/lexer.mll[33,7284+25]..[33,7284+26])
                                Pexp_ident "i" (demos/calc-incremental/lexer.mll[33,7284+25]..[33,7284+26])
                          ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[162,7355+4]..[162,7355+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc-incremental/lexer.mll[35,7404+4]..[35,7404+12])
                    Pexp_construct "PLUS" (demos/calc-incremental/lexer.mll[35,7404+6]..[35,7404+10])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[167,7458+4]..[167,7458+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc-incremental/lexer.mll[37,7507+4]..[37,7507+13])
                    Pexp_construct "MINUS" (demos/calc-incremental/lexer.mll[37,7507+6]..[37,7507+11])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[172,7562+4]..[172,7562+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc-incremental/lexer.mll[39,7611+4]..[39,7611+13])
                    Pexp_construct "TIMES" (demos/calc-incremental/lexer.mll[39,7611+6]..[39,7611+11])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[177,7666+4]..[177,7666+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc-incremental/lexer.mll[41,7715+4]..[41,7715+11])
                    Pexp_construct "DIV" (demos/calc-incremental/lexer.mll[41,7715+6]..[41,7715+9])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[182,7768+4]..[182,7768+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc-incremental/lexer.mll[43,7817+4]..[43,7817+14])
                    Pexp_construct "LPAREN" (demos/calc-incremental/lexer.mll[43,7817+6]..[43,7817+12])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[187,7873+4]..[187,7873+5])
                    Ppat_constant PConst_int (8,None)
                  expression (demos/calc-incremental/lexer.mll[45,7922+4]..[45,7922+14])
                    Pexp_construct "RPAREN" (demos/calc-incremental/lexer.mll[45,7922+6]..[45,7922+12])
                    None
                <case>
                  pattern (demos/calc-incremental/lexer.ml[192,7978+4]..[192,7978+5])
                    Ppat_constant PConst_int (9,None)
                  expression (demos/calc-incremental/lexer.mll[47,8027+4]..[47,8027+107])
                    Pexp_apply
                    expression (demos/calc-incremental/lexer.mll[47,8027+6]..[47,8027+11])
                      Pexp_ident "raise" (demos/calc-incremental/lexer.mll[47,8027+6]..[47,8027+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-incremental/lexer.mll[47,8027+12]..[47,8027+105])
                          Pexp_construct "Error" (demos/calc-incremental/lexer.mll[47,8027+13]..[47,8027+18])
                          Some
                            expression (demos/calc-incremental/lexer.mll[47,8027+19]..[47,8027+104])
                              Pexp_apply
                              expression (demos/calc-incremental/lexer.mll[47,8027+20]..[47,8027+34])
                                Pexp_ident "Printf.sprintf" (demos/calc-incremental/lexer.mll[47,8027+20]..[47,8027+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-incremental/lexer.mll[47,8027+35]..[47,8027+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc-incremental/lexer.mll[47,8027+36]..[47,8027+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc-incremental/lexer.mll[47,8027+75]..[47,8027+103])
                                    Pexp_apply
                                    expression (demos/calc-incremental/lexer.mll[47,8027+76]..[47,8027+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc-incremental/lexer.mll[47,8027+76]..[47,8027+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc-incremental/lexer.mll[47,8027+96]..[47,8027+102])
                                          Pexp_ident "lexbuf" (demos/calc-incremental/lexer.mll[47,8027+96]..[47,8027+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc-incremental/lexer.ml[197,8176+4]..[197,8176+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[197,8176+4]..[197,8176+21])
                  expression (demos/calc-incremental/lexer.ml[197,8176+25]..[198,8235+52])
                    Pexp_sequence
                    expression (demos/calc-incremental/lexer.ml[197,8176+25]..[197,8176+57])
                      Pexp_apply
                      expression (demos/calc-incremental/lexer.ml[197,8176+25]..[197,8176+50])
                        Pexp_field
                        expression (demos/calc-incremental/lexer.ml[197,8176+25]..[197,8176+31])
                          Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[197,8176+25]..[197,8176+31])
                        "Lexing.refill_buff" (demos/calc-incremental/lexer.ml[197,8176+32]..[197,8176+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[197,8176+51]..[197,8176+57])
                            Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[197,8176+51]..[197,8176+57])
                      ]
                    expression (demos/calc-incremental/lexer.ml[198,8235+6]..[198,8235+52])
                      Pexp_apply
                      expression (demos/calc-incremental/lexer.ml[198,8235+6]..[198,8235+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc-incremental/lexer.ml[198,8235+6]..[198,8235+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[198,8235+28]..[198,8235+34])
                            Pexp_ident "lexbuf" (demos/calc-incremental/lexer.ml[198,8235+28]..[198,8235+34])
                        <arg>
                        Nolabel
                          expression (demos/calc-incremental/lexer.ml[198,8235+35]..[198,8235+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-incremental/lexer.ml[198,8235+35]..[198,8235+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc-incremental/lexer.mll[2,41+2]..demos/calc-incremental/lexer.mll[2,41+13])
    Tstr_open Fresh
    module_expr (demos/calc-incremental/lexer.mll[2,41+7]..demos/calc-incremental/lexer.mll[2,41+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (demos/calc-incremental/lexer.mll[4,56+2]..demos/calc-incremental/lexer.mll[4,56+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-incremental/lexer.mll[4,56+2]..demos/calc-incremental/lexer.mll[4,56+27])
          pext_name = "Error/277"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc-incremental/lexer.mll[4,56+21]..demos/calc-incremental/lexer.mll[4,56+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc-incremental/lexer.ml[9,124+0]..demos/calc-incremental/lexer.ml[104,5625+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc-incremental/lexer.ml[9,124+4]..demos/calc-incremental/lexer.ml[9,124+22])
          Tpat_var "__ocaml_lex_tables/278"
        expression (demos/calc-incremental/lexer.ml[9,124+25]..demos/calc-incremental/lexer.ml[104,5625+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc-incremental/lexer.ml[11,171+3]..demos/calc-incremental/lexer.ml[13,311+5])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-incremental/lexer.ml[11,171+4]..demos/calc-incremental/lexer.ml[13,311+4]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc-incremental/lexer.ml[15,341+3]..demos/calc-incremental/lexer.ml[17,481+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-incremental/lexer.ml[15,341+4]..demos/calc-incremental/lexer.ml[17,481+4]),None)
                "Lexing.lex_default"
                  expression (demos/calc-incremental/lexer.ml[19,511+3]..demos/calc-incremental/lexer.ml[21,651+5])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-incremental/lexer.ml[19,511+4]..demos/calc-incremental/lexer.ml[21,651+4]),None)
                "Lexing.lex_trans"
                  expression (demos/calc-incremental/lexer.ml[23,679+3]..demos/calc-incremental/lexer.ml[56,2989+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-incremental/lexer.ml[23,679+4]..demos/calc-incremental/lexer.ml[56,2989+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc-incremental/lexer.ml[58,3065+3]..demos/calc-incremental/lexer.ml[91,5375+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-incremental/lexer.ml[58,3065+4]..demos/calc-incremental/lexer.ml[91,5375+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc-incremental/lexer.ml[93,5455+3]..demos/calc-incremental/lexer.ml[93,5455+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[93,5455+4]..demos/calc-incremental/lexer.ml[93,5455+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc-incremental/lexer.ml[95,5490+3]..demos/calc-incremental/lexer.ml[95,5490+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[95,5490+4]..demos/calc-incremental/lexer.ml[95,5490+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc-incremental/lexer.ml[97,5525+3]..demos/calc-incremental/lexer.ml[97,5525+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[97,5525+4]..demos/calc-incremental/lexer.ml[97,5525+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc-incremental/lexer.ml[99,5558+3]..demos/calc-incremental/lexer.ml[99,5558+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[99,5558+4]..demos/calc-incremental/lexer.ml[99,5558+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc-incremental/lexer.ml[101,5591+3]..demos/calc-incremental/lexer.ml[101,5591+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[101,5591+4]..demos/calc-incremental/lexer.ml[101,5591+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc-incremental/lexer.ml[103,5618+3]..demos/calc-incremental/lexer.ml[103,5618+5])
                    Texp_constant Const_string("",(demos/calc-incremental/lexer.ml[103,5618+4]..demos/calc-incremental/lexer.ml[103,5618+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc-incremental/lexer.ml[106,5628+0]..demos/calc-incremental/lexer.ml[198,8235+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc-incremental/lexer.ml[106,5628+8]..demos/calc-incremental/lexer.ml[106,5628+12])
          Tpat_var "line/303"
        expression (demos/calc-incremental/lexer.ml[106,5628+13]..demos/calc-incremental/lexer.ml[107,5650+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-incremental/lexer.ml[106,5628+13]..demos/calc-incremental/lexer.ml[106,5628+19])
                Tpat_var "lexbuf/307"
              expression (demos/calc-incremental/lexer.ml[107,5650+3]..demos/calc-incremental/lexer.ml[107,5650+32])
                Texp_apply
                expression (demos/calc-incremental/lexer.ml[107,5650+3]..demos/calc-incremental/lexer.ml[107,5650+23])
                  Texp_ident "__ocaml_lex_line_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-incremental/lexer.ml[107,5650+24]..demos/calc-incremental/lexer.ml[107,5650+30])
                      Texp_ident "lexbuf/307"
                  <arg>
                    Nolabel
                    expression (demos/calc-incremental/lexer.ml[107,5650+31]..demos/calc-incremental/lexer.ml[107,5650+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[108,5683+4]..demos/calc-incremental/lexer.ml[108,5683+24])
          Tpat_var "__ocaml_lex_line_rec/304"
        expression (demos/calc-incremental/lexer.ml[108,5683+25]..demos/calc-incremental/lexer.ml[136,6601+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-incremental/lexer.ml[108,5683+25]..demos/calc-incremental/lexer.ml[108,5683+31])
                Tpat_var "lexbuf/308"
              expression (demos/calc-incremental/lexer.ml[108,5683+32]..demos/calc-incremental/lexer.ml[136,6601+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-incremental/lexer.ml[108,5683+32]..demos/calc-incremental/lexer.ml[108,5683+49])
                      Tpat_var "__ocaml_lex_state/309"
                    expression (demos/calc-incremental/lexer.ml[109,5735+2]..demos/calc-incremental/lexer.ml[136,6601+51])
                      Texp_match
                      expression (demos/calc-incremental/lexer.ml[109,5735+8]..demos/calc-incremental/lexer.ml[109,5735+65])
                        Texp_apply
                        expression (demos/calc-incremental/lexer.ml[109,5735+8]..demos/calc-incremental/lexer.ml[109,5735+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[109,5735+22]..demos/calc-incremental/lexer.ml[109,5735+40])
                              Texp_ident "__ocaml_lex_tables/278"
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[109,5735+41]..demos/calc-incremental/lexer.ml[109,5735+58])
                              Texp_ident "__ocaml_lex_state/309"
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[109,5735+59]..demos/calc-incremental/lexer.ml[109,5735+65])
                              Texp_ident "lexbuf/308"
                        ]
                      [
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[110,5806+8]..demos/calc-incremental/lexer.ml[110,5806+9])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[110,5806+8]..demos/calc-incremental/lexer.ml[110,5806+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-incremental/lexer.ml[111,5819+0]..demos/calc-incremental/lexer.mll[15,6054+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-incremental/lexer.mll[13,5863+21]..demos/calc-incremental/lexer.mll[13,5863+25])
                                  Tpat_var "line/335"
                                expression (demos/calc-incremental/lexer.ml[115,5929+2]..demos/calc-incremental/lexer.ml[115,5929+81])
                                  Texp_apply
                                  expression (demos/calc-incremental/lexer.ml[115,5929+2]..demos/calc-incremental/lexer.ml[115,5929+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[115,5929+20]..demos/calc-incremental/lexer.ml[115,5929+26])
                                        Texp_ident "lexbuf/308"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[115,5929+27]..demos/calc-incremental/lexer.ml[115,5929+54])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[115,5929+27]..demos/calc-incremental/lexer.ml[115,5929+33])
                                          Texp_ident "lexbuf/308"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[115,5929+55]..demos/calc-incremental/lexer.ml[115,5929+81])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[115,5929+55]..demos/calc-incremental/lexer.ml[115,5929+61])
                                          Texp_ident "lexbuf/308"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-incremental/lexer.mll[15,6054+4]..demos/calc-incremental/lexer.mll[15,6054+23])
                              Texp_tuple
                              [
                                expression (demos/calc-incremental/lexer.mll[15,6054+6]..demos/calc-incremental/lexer.mll[15,6054+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-incremental/lexer.mll[15,6054+11]..demos/calc-incremental/lexer.mll[15,6054+15])
                                      Texp_ident "line/335"
                                  ]
                                expression (demos/calc-incremental/lexer.mll[15,6054+17]..demos/calc-incremental/lexer.mll[15,6054+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[120,6119+4]..demos/calc-incremental/lexer.ml[120,6119+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[120,6119+4]..demos/calc-incremental/lexer.ml[120,6119+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-incremental/lexer.mll[18,6168+4]..demos/calc-incremental/lexer.mll[18,6168+19])
                            Texp_tuple
                            [
                              expression (demos/calc-incremental/lexer.mll[18,6168+6]..demos/calc-incremental/lexer.mll[18,6168+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc-incremental/lexer.mll[18,6168+12]..demos/calc-incremental/lexer.mll[18,6168+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[125,6229+4]..demos/calc-incremental/lexer.ml[125,6229+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[125,6229+4]..demos/calc-incremental/lexer.ml[125,6229+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-incremental/lexer.ml[126,6238+0]..demos/calc-incremental/lexer.mll[22,6467+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-incremental/lexer.mll[19,6282+15]..demos/calc-incremental/lexer.mll[19,6282+19])
                                  Tpat_var "line/336"
                                expression (demos/calc-incremental/lexer.ml[130,6342+2]..demos/calc-incremental/lexer.ml[130,6342+81])
                                  Texp_apply
                                  expression (demos/calc-incremental/lexer.ml[130,6342+2]..demos/calc-incremental/lexer.ml[130,6342+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[130,6342+20]..demos/calc-incremental/lexer.ml[130,6342+26])
                                        Texp_ident "lexbuf/308"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[130,6342+27]..demos/calc-incremental/lexer.ml[130,6342+54])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[130,6342+27]..demos/calc-incremental/lexer.ml[130,6342+33])
                                          Texp_ident "lexbuf/308"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[130,6342+55]..demos/calc-incremental/lexer.ml[130,6342+81])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[130,6342+55]..demos/calc-incremental/lexer.ml[130,6342+61])
                                          Texp_ident "lexbuf/308"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-incremental/lexer.mll[22,6467+4]..demos/calc-incremental/lexer.mll[22,6467+33])
                              Texp_tuple
                              [
                                expression (demos/calc-incremental/lexer.mll[22,6467+6]..demos/calc-incremental/lexer.mll[22,6467+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-incremental/lexer.mll[22,6467+11]..demos/calc-incremental/lexer.mll[22,6467+24])
                                      Texp_apply
                                      expression (demos/calc-incremental/lexer.mll[22,6467+17]..demos/calc-incremental/lexer.mll[22,6467+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-incremental/lexer.mll[22,6467+12]..demos/calc-incremental/lexer.mll[22,6467+16])
                                            Texp_ident "line/336"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-incremental/lexer.mll[22,6467+19]..demos/calc-incremental/lexer.mll[22,6467+23])
                                            Texp_constant Const_string("\n",(demos/calc-incremental/lexer.mll[22,6467+20]..demos/calc-incremental/lexer.mll[22,6467+22]),None)
                                      ]
                                  ]
                                expression (demos/calc-incremental/lexer.mll[22,6467+26]..demos/calc-incremental/lexer.mll[22,6467+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[135,6542+4]..demos/calc-incremental/lexer.ml[135,6542+21])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[135,6542+4]..demos/calc-incremental/lexer.ml[135,6542+21])
                              Tpat_var "__ocaml_lex_state/334"
                          expression (demos/calc-incremental/lexer.ml[135,6542+25]..demos/calc-incremental/lexer.ml[136,6601+51])
                            Texp_sequence
                            expression (demos/calc-incremental/lexer.ml[135,6542+25]..demos/calc-incremental/lexer.ml[135,6542+57])
                              Texp_apply
                              expression (demos/calc-incremental/lexer.ml[135,6542+25]..demos/calc-incremental/lexer.ml[135,6542+50])
                                Texp_field
                                expression (demos/calc-incremental/lexer.ml[135,6542+25]..demos/calc-incremental/lexer.ml[135,6542+31])
                                  Texp_ident "lexbuf/308"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[135,6542+51]..demos/calc-incremental/lexer.ml[135,6542+57])
                                    Texp_ident "lexbuf/308"
                              ]
                            expression (demos/calc-incremental/lexer.ml[136,6601+6]..demos/calc-incremental/lexer.ml[136,6601+51])
                              Texp_apply
                              expression (demos/calc-incremental/lexer.ml[136,6601+6]..demos/calc-incremental/lexer.ml[136,6601+26])
                                Texp_ident "__ocaml_lex_line_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[136,6601+27]..demos/calc-incremental/lexer.ml[136,6601+33])
                                    Texp_ident "lexbuf/308"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[136,6601+34]..demos/calc-incremental/lexer.ml[136,6601+51])
                                    Texp_ident "__ocaml_lex_state/334"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[138,6654+4]..demos/calc-incremental/lexer.ml[138,6654+9])
          Tpat_var "token/305"
        expression (demos/calc-incremental/lexer.ml[138,6654+10]..demos/calc-incremental/lexer.ml[139,6673+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-incremental/lexer.ml[138,6654+10]..demos/calc-incremental/lexer.ml[138,6654+16])
                Tpat_var "lexbuf/337"
              expression (demos/calc-incremental/lexer.ml[139,6673+3]..demos/calc-incremental/lexer.ml[139,6673+33])
                Texp_apply
                expression (demos/calc-incremental/lexer.ml[139,6673+3]..demos/calc-incremental/lexer.ml[139,6673+24])
                  Texp_ident "__ocaml_lex_token_rec/306"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-incremental/lexer.ml[139,6673+25]..demos/calc-incremental/lexer.ml[139,6673+31])
                      Texp_ident "lexbuf/337"
                  <arg>
                    Nolabel
                    expression (demos/calc-incremental/lexer.ml[139,6673+32]..demos/calc-incremental/lexer.ml[139,6673+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc-incremental/lexer.ml[140,6707+4]..demos/calc-incremental/lexer.ml[140,6707+25])
          Tpat_var "__ocaml_lex_token_rec/306"
        expression (demos/calc-incremental/lexer.ml[140,6707+26]..demos/calc-incremental/lexer.ml[198,8235+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-incremental/lexer.ml[140,6707+26]..demos/calc-incremental/lexer.ml[140,6707+32])
                Tpat_var "lexbuf/338"
              expression (demos/calc-incremental/lexer.ml[140,6707+33]..demos/calc-incremental/lexer.ml[198,8235+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-incremental/lexer.ml[140,6707+33]..demos/calc-incremental/lexer.ml[140,6707+50])
                      Tpat_var "__ocaml_lex_state/339"
                    expression (demos/calc-incremental/lexer.ml[141,6760+2]..demos/calc-incremental/lexer.ml[198,8235+52])
                      Texp_match
                      expression (demos/calc-incremental/lexer.ml[141,6760+8]..demos/calc-incremental/lexer.ml[141,6760+65])
                        Texp_apply
                        expression (demos/calc-incremental/lexer.ml[141,6760+8]..demos/calc-incremental/lexer.ml[141,6760+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[141,6760+22]..demos/calc-incremental/lexer.ml[141,6760+40])
                              Texp_ident "__ocaml_lex_tables/278"
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[141,6760+41]..demos/calc-incremental/lexer.ml[141,6760+58])
                              Texp_ident "__ocaml_lex_state/339"
                          <arg>
                            Nolabel
                            expression (demos/calc-incremental/lexer.ml[141,6760+59]..demos/calc-incremental/lexer.ml[141,6760+65])
                              Texp_ident "lexbuf/338"
                        ]
                      [
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[142,6831+8]..demos/calc-incremental/lexer.ml[142,6831+9])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[142,6831+8]..demos/calc-incremental/lexer.ml[142,6831+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-incremental/lexer.mll[29,6884+4]..demos/calc-incremental/lexer.mll[29,6884+20])
                            Texp_apply
                            expression (demos/calc-incremental/lexer.mll[29,6884+6]..demos/calc-incremental/lexer.mll[29,6884+11])
                              Texp_ident "token/305"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-incremental/lexer.mll[29,6884+12]..demos/calc-incremental/lexer.mll[29,6884+18])
                                  Texp_ident "lexbuf/338"
                            ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[147,6946+4]..demos/calc-incremental/lexer.ml[147,6946+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[147,6946+4]..demos/calc-incremental/lexer.ml[147,6946+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-incremental/lexer.mll[31,6995+4]..demos/calc-incremental/lexer.mll[31,6995+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[152,7048+4]..demos/calc-incremental/lexer.ml[152,7048+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[152,7048+4]..demos/calc-incremental/lexer.ml[152,7048+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-incremental/lexer.ml[153,7057+0]..demos/calc-incremental/lexer.mll[33,7284+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-incremental/lexer.mll[32,7101+16]..demos/calc-incremental/lexer.mll[32,7101+17])
                                  Tpat_var "i/341"
                                expression (demos/calc-incremental/lexer.ml[157,7159+2]..demos/calc-incremental/lexer.ml[157,7159+81])
                                  Texp_apply
                                  expression (demos/calc-incremental/lexer.ml[157,7159+2]..demos/calc-incremental/lexer.ml[157,7159+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[157,7159+20]..demos/calc-incremental/lexer.ml[157,7159+26])
                                        Texp_ident "lexbuf/338"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[157,7159+27]..demos/calc-incremental/lexer.ml[157,7159+54])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[157,7159+27]..demos/calc-incremental/lexer.ml[157,7159+33])
                                          Texp_ident "lexbuf/338"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.ml[157,7159+55]..demos/calc-incremental/lexer.ml[157,7159+81])
                                        Texp_field
                                        expression (demos/calc-incremental/lexer.ml[157,7159+55]..demos/calc-incremental/lexer.ml[157,7159+61])
                                          Texp_ident "lexbuf/338"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-incremental/lexer.mll[33,7284+4]..demos/calc-incremental/lexer.mll[33,7284+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc-incremental/lexer.mll[33,7284+10]..demos/calc-incremental/lexer.mll[33,7284+27])
                                  Texp_apply
                                  expression (demos/calc-incremental/lexer.mll[33,7284+11]..demos/calc-incremental/lexer.mll[33,7284+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-incremental/lexer.mll[33,7284+25]..demos/calc-incremental/lexer.mll[33,7284+26])
                                        Texp_ident "i/341"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[162,7355+4]..demos/calc-incremental/lexer.ml[162,7355+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[162,7355+4]..demos/calc-incremental/lexer.ml[162,7355+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc-incremental/lexer.mll[35,7404+4]..demos/calc-incremental/lexer.mll[35,7404+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[167,7458+4]..demos/calc-incremental/lexer.ml[167,7458+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[167,7458+4]..demos/calc-incremental/lexer.ml[167,7458+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc-incremental/lexer.mll[37,7507+4]..demos/calc-incremental/lexer.mll[37,7507+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[172,7562+4]..demos/calc-incremental/lexer.ml[172,7562+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[172,7562+4]..demos/calc-incremental/lexer.ml[172,7562+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc-incremental/lexer.mll[39,7611+4]..demos/calc-incremental/lexer.mll[39,7611+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[177,7666+4]..demos/calc-incremental/lexer.ml[177,7666+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[177,7666+4]..demos/calc-incremental/lexer.ml[177,7666+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc-incremental/lexer.mll[41,7715+4]..demos/calc-incremental/lexer.mll[41,7715+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[182,7768+4]..demos/calc-incremental/lexer.ml[182,7768+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[182,7768+4]..demos/calc-incremental/lexer.ml[182,7768+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc-incremental/lexer.mll[43,7817+4]..demos/calc-incremental/lexer.mll[43,7817+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[187,7873+4]..demos/calc-incremental/lexer.ml[187,7873+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[187,7873+4]..demos/calc-incremental/lexer.ml[187,7873+5])
                              Tpat_constant Const_int 8
                          expression (demos/calc-incremental/lexer.mll[45,7922+4]..demos/calc-incremental/lexer.mll[45,7922+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[192,7978+4]..demos/calc-incremental/lexer.ml[192,7978+5])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[192,7978+4]..demos/calc-incremental/lexer.ml[192,7978+5])
                              Tpat_constant Const_int 9
                          expression (demos/calc-incremental/lexer.mll[47,8027+4]..demos/calc-incremental/lexer.mll[47,8027+107])
                            Texp_apply
                            expression (demos/calc-incremental/lexer.mll[47,8027+6]..demos/calc-incremental/lexer.mll[47,8027+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-incremental/lexer.mll[47,8027+12]..demos/calc-incremental/lexer.mll[47,8027+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc-incremental/lexer.mll[47,8027+19]..demos/calc-incremental/lexer.mll[47,8027+104])
                                      Texp_apply
                                      expression (demos/calc-incremental/lexer.mll[47,8027+20]..demos/calc-incremental/lexer.mll[47,8027+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost,None)
                                                  expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost,None)
                                                          expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc-incremental/lexer.mll[47,8027+35]..demos/calc-incremental/lexer.mll[47,8027+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-incremental/lexer.mll[47,8027+75]..demos/calc-incremental/lexer.mll[47,8027+103])
                                            Texp_apply
                                            expression (demos/calc-incremental/lexer.mll[47,8027+76]..demos/calc-incremental/lexer.mll[47,8027+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc-incremental/lexer.mll[47,8027+96]..demos/calc-incremental/lexer.mll[47,8027+102])
                                                  Texp_ident "lexbuf/338"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc-incremental/lexer.ml[197,8176+4]..demos/calc-incremental/lexer.ml[197,8176+21])
                            Tpat_value
                            pattern (demos/calc-incremental/lexer.ml[197,8176+4]..demos/calc-incremental/lexer.ml[197,8176+21])
                              Tpat_var "__ocaml_lex_state/340"
                          expression (demos/calc-incremental/lexer.ml[197,8176+25]..demos/calc-incremental/lexer.ml[198,8235+52])
                            Texp_sequence
                            expression (demos/calc-incremental/lexer.ml[197,8176+25]..demos/calc-incremental/lexer.ml[197,8176+57])
                              Texp_apply
                              expression (demos/calc-incremental/lexer.ml[197,8176+25]..demos/calc-incremental/lexer.ml[197,8176+50])
                                Texp_field
                                expression (demos/calc-incremental/lexer.ml[197,8176+25]..demos/calc-incremental/lexer.ml[197,8176+31])
                                  Texp_ident "lexbuf/338"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[197,8176+51]..demos/calc-incremental/lexer.ml[197,8176+57])
                                    Texp_ident "lexbuf/338"
                              ]
                            expression (demos/calc-incremental/lexer.ml[198,8235+6]..demos/calc-incremental/lexer.ml[198,8235+52])
                              Texp_apply
                              expression (demos/calc-incremental/lexer.ml[198,8235+6]..demos/calc-incremental/lexer.ml[198,8235+27])
                                Texp_ident "__ocaml_lex_token_rec/306"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[198,8235+28]..demos/calc-incremental/lexer.ml[198,8235+34])
                                    Texp_ident "lexbuf/338"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-incremental/lexer.ml[198,8235+35]..demos/calc-incremental/lexer.ml[198,8235+52])
                                    Texp_ident "__ocaml_lex_state/340"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(setglobal Dune__exe__Lexer!
  (let
    (Error/277 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/278 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255"
        "" "" "" "" "" ""])
    (letrec
      (line/303
         (function lexbuf/307
           (funct-body Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(106)<ghost>:5641-5682
             (before Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(107):5653-5682
               (after Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(107):5653-5682
                 (apply __ocaml_lex_line_rec/304 lexbuf/307 0)))))
        __ocaml_lex_line_rec/304
          (function lexbuf/308 __ocaml_lex_state/309[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(108)<ghost>:5708-6652
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(109):5737-6652
                (let
                  (__ocaml_lex_state/334 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(109):5743-5800
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/278 __ocaml_lex_state/309
                         lexbuf/308)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/334) (exit 1)
                      (switch* __ocaml_lex_state/334
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(111):5819-6077
                          (let
                            (line/335 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(115):5931-6010
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/308 (field_int 4 lexbuf/308)
                                   (field_int 5 lexbuf/308))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(15):6058-6077
                              (makeblock 0 (*,int) (makeblock 0 line/335) 1))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(18):6172-6187
                          [0: 0 0])
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(126):6238-6500
                          (let
                            (line/336 =
                               (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(130):6344-6423
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/308 (field_int 4 lexbuf/308)
                                   (field_int 5 lexbuf/308))))
                            (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(22):6471-6500
                              (makeblock 0 (*,int)
                                (makeblock 0
                                  (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(22):6478-6491
                                    (apply (field_imm 27 (global Stdlib!))
                                      line/336 "\n")))
                                0))))))
                   with (1)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(135):6567-6652
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(135):6567-6599
                          (apply (field_imm 0 lexbuf/308) lexbuf/308))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(136):6607-6652
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(136):6607-6652
                            (apply __ocaml_lex_line_rec/304 lexbuf/308
                              __ocaml_lex_state/334))))))))))
        token/305
          (function lexbuf/337
            (funct-body Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(138)<ghost>:6664-6706
              (before Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(139):6676-6706
                (after Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(139):6676-6706
                  (apply __ocaml_lex_token_rec/306 lexbuf/337 5)))))
        __ocaml_lex_token_rec/306
          (function lexbuf/338 __ocaml_lex_state/339[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(140)<ghost>:6733-8287
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(141):6762-8287
                (let
                  (__ocaml_lex_state/340 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(141):6768-6825
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/278 __ocaml_lex_state/339
                         lexbuf/338)))
                  (catch
                    (if (isout 9 __ocaml_lex_state/340) (exit 2)
                      (switch* __ocaml_lex_state/340
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(29):6888-6904
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(29):6888-6904
                            (apply token/305 lexbuf/338)))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(31):6999-7006
                          5)
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(153):7057-7313
                          (let
                            (i/341 =
                               (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(157):7161-7240
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/338 (field_int 4 lexbuf/338)
                                   (field_int 5 lexbuf/338))))
                            (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(33):7288-7313
                              (makeblock 0 (int)
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(33):7294-7311
                                  (caml_int_of_string i/341))))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(35):7408-7416
                          2)
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(37):7511-7520
                          3)
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(39):7615-7624
                          0)
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(41):7719-7726
                          6)
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(43):7821-7831
                          4)
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(45):7926-7936
                          1)
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8031-8134
                          (raise
                            (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8031-8134
                              (makeblock 0 Error/277
                                (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8046-8131
                                  (apply
                                    (field_imm 3 (global Stdlib__Printf!))
                                    [0:
                                     [11:
                                      "At offset "
                                      [4:
                                       0 0 0
                                       [11: ": unexpected character.\n" 0]]]
                                     "At offset %d: unexpected character.\n"]
                                    (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8102-8130
                                      (apply
                                        (field_imm 9
                                          (global Stdlib__Lexing!))
                                        lexbuf/338))))))))))
                   with (2)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(197):8201-8287
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(197):8201-8233
                          (apply (field_imm 0 lexbuf/338) lexbuf/338))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(198):8241-8287
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(198):8241-8287
                            (apply __ocaml_lex_token_rec/306 lexbuf/338
                              __ocaml_lex_state/340)))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/277 __ocaml_lex_tables/278 line/303
          __ocaml_lex_line_rec/304 token/305 __ocaml_lex_token_rec/306)))))
(setglobal Dune__exe__Lexer!
  (let
    (Error/277 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0))
     __ocaml_lex_tables/278 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (letrec
      (line/303
         (function lexbuf/307
           (funct-body Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(106)<ghost>:5641-5682
             (before Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(107):5653-5682
               (after Dune__exe__Lexer.line demos/calc-incremental/lexer.ml(107):5653-5682
                 (apply __ocaml_lex_line_rec/304 lexbuf/307 0)))))
        __ocaml_lex_line_rec/304
          (function lexbuf/308 __ocaml_lex_state/309[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(108)<ghost>:5708-6652
              (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(109):5737-6652
                (let
                  (__ocaml_lex_state/334 =
                     (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(109):5743-5800
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/278 __ocaml_lex_state/309
                         lexbuf/308)))
                  (if (isout 2 __ocaml_lex_state/334)
                    (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(135):6567-6652
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(135):6567-6599
                          (apply (field_imm 0 lexbuf/308) lexbuf/308))
                        (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(136):6607-6652
                          (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(136):6607-6652
                            (apply __ocaml_lex_line_rec/304 lexbuf/308
                              __ocaml_lex_state/334)))))
                    (switch* __ocaml_lex_state/334
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(111):5819-6077
                        (let
                          (line/335 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(115):5931-6010
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/308 (field_int 4 lexbuf/308)
                                 (field_int 5 lexbuf/308))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(15):6058-6077
                            (makeblock 0 (*,int) (makeblock 0 line/335) 1))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(18):6172-6187
                        [0: 0 0])
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(126):6238-6500
                        (let
                          (line/336 =
                             (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.ml(130):6344-6423
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/308 (field_int 4 lexbuf/308)
                                 (field_int 5 lexbuf/308))))
                          (before Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(22):6471-6500
                            (makeblock 0 (*,int)
                              (makeblock 0
                                (after Dune__exe__Lexer.__ocaml_lex_line_rec demos/calc-incremental/lexer.mll(22):6478-6491
                                  (apply (field_imm 27 (global Stdlib!))
                                    line/336 "\n")))
                              0))))))))))
        token/305
          (function lexbuf/337
            (funct-body Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(138)<ghost>:6664-6706
              (before Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(139):6676-6706
                (after Dune__exe__Lexer.token demos/calc-incremental/lexer.ml(139):6676-6706
                  (apply __ocaml_lex_token_rec/306 lexbuf/337 5)))))
        __ocaml_lex_token_rec/306
          (function lexbuf/338 __ocaml_lex_state/339[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(140)<ghost>:6733-8287
              (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(141):6762-8287
                (let
                  (__ocaml_lex_state/340 =
                     (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(141):6768-6825
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/278 __ocaml_lex_state/339
                         lexbuf/338)))
                  (if (isout 9 __ocaml_lex_state/340)
                    (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(197):8201-8287
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(197):8201-8233
                          (apply (field_imm 0 lexbuf/338) lexbuf/338))
                        (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(198):8241-8287
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(198):8241-8287
                            (apply __ocaml_lex_token_rec/306 lexbuf/338
                              __ocaml_lex_state/340)))))
                    (switch* __ocaml_lex_state/340
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(29):6888-6904
                        (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(29):6888-6904
                          (apply token/305 lexbuf/338)))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(31):6999-7006
                        5)
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(153):7057-7313
                        (let
                          (i/341 =
                             (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.ml(157):7161-7240
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/338 (field_int 4 lexbuf/338)
                                 (field_int 5 lexbuf/338))))
                          (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(33):7288-7313
                            (makeblock 0 (int)
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(33):7294-7311
                                (caml_int_of_string i/341))))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(35):7408-7416
                        2)
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(37):7511-7520
                        3)
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(39):7615-7624
                        0)
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(41):7719-7726
                        6)
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(43):7821-7831
                        4)
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(45):7926-7936
                        1)
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8031-8134
                        (raise
                          (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8031-8134
                            (makeblock 0 Error/277
                              (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8046-8131
                                (apply (field_imm 3 (global Stdlib__Printf!))
                                  [0:
                                   [11:
                                    "At offset "
                                    [4:
                                     0 0 0
                                     [11: ": unexpected character.\n" 0]]]
                                   "At offset %d: unexpected character.\n"]
                                  (after Dune__exe__Lexer.__ocaml_lex_token_rec demos/calc-incremental/lexer.mll(47):8102-8130
                                    (apply
                                      (field_imm 9 (global Stdlib__Lexing!))
                                      lexbuf/338)))))))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/277 __ocaml_lex_tables/278 line/303
          __ocaml_lex_line_rec/304 token/305 __ocaml_lex_token_rec/306)))))

[
  structure_item (demos/calc-param/lexer.mll[2,35+2]..[2,35+13])
    Pstr_open Fresh
    module_expr (demos/calc-param/lexer.mll[2,35+7]..[2,35+13])
      Pmod_ident "Tokens" (demos/calc-param/lexer.mll[2,35+7]..[2,35+13])
  structure_item (demos/calc-param/lexer.mll[4,50+2]..[4,50+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-param/lexer.mll[4,50+2]..[4,50+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc-param/lexer.mll[4,50+21]..[4,50+27])
                  Ptyp_constr "string" (demos/calc-param/lexer.mll[4,50+21]..[4,50+27])
                  []
              ]
              None
  structure_item (demos/calc-param/lexer.ml[9,112+0]..[104,5613+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc-param/lexer.ml[9,112+4]..[9,112+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc-param/lexer.ml[9,112+4]..[9,112+22])
        expression (demos/calc-param/lexer.ml[9,112+25]..[104,5613+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc-param/lexer.ml[10,139+2]..[10,139+17])
              expression (demos/calc-param/lexer.ml[11,159+3]..[13,299+5])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-param/lexer.ml[11,159+4]..[13,299+4]),None)
            "Lexing.lex_backtrk" (demos/calc-param/lexer.ml[14,306+2]..[14,306+20])
              expression (demos/calc-param/lexer.ml[15,329+3]..[17,469+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-param/lexer.ml[15,329+4]..[17,469+4]),None)
            "Lexing.lex_default" (demos/calc-param/lexer.ml[18,476+2]..[18,476+20])
              expression (demos/calc-param/lexer.ml[19,499+3]..[21,639+5])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-param/lexer.ml[19,499+4]..[21,639+4]),None)
            "Lexing.lex_trans" (demos/calc-param/lexer.ml[22,646+2]..[22,646+18])
              expression (demos/calc-param/lexer.ml[23,667+3]..[56,2977+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-param/lexer.ml[23,667+4]..[56,2977+52]),None)
            "Lexing.lex_check" (demos/calc-param/lexer.ml[57,3032+2]..[57,3032+18])
              expression (demos/calc-param/lexer.ml[58,3053+3]..[91,5363+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-param/lexer.ml[58,3053+4]..[91,5363+52]),None)
            "Lexing.lex_base_code" (demos/calc-param/lexer.ml[92,5418+2]..[92,5418+22])
              expression (demos/calc-param/lexer.ml[93,5443+3]..[93,5443+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[93,5443+4]..[93,5443+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc-param/lexer.ml[94,5450+2]..[94,5450+25])
              expression (demos/calc-param/lexer.ml[95,5478+3]..[95,5478+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[95,5478+4]..[95,5478+4]),None)
            "Lexing.lex_default_code" (demos/calc-param/lexer.ml[96,5485+2]..[96,5485+25])
              expression (demos/calc-param/lexer.ml[97,5513+3]..[97,5513+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[97,5513+4]..[97,5513+4]),None)
            "Lexing.lex_trans_code" (demos/calc-param/lexer.ml[98,5520+2]..[98,5520+23])
              expression (demos/calc-param/lexer.ml[99,5546+3]..[99,5546+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[99,5546+4]..[99,5546+4]),None)
            "Lexing.lex_check_code" (demos/calc-param/lexer.ml[100,5553+2]..[100,5553+23])
              expression (demos/calc-param/lexer.ml[101,5579+3]..[101,5579+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[101,5579+4]..[101,5579+4]),None)
            "Lexing.lex_code" (demos/calc-param/lexer.ml[102,5586+2]..[102,5586+17])
              expression (demos/calc-param/lexer.ml[103,5606+3]..[103,5606+5])
                Pexp_constant PConst_string("",(demos/calc-param/lexer.ml[103,5606+4]..[103,5606+4]),None)
          ]
          None
    ]
  structure_item (demos/calc-param/lexer.ml[106,5616+0]..[198,8031+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc-param/lexer.ml[106,5616+8]..[106,5616+12])
          Ppat_var "line" (demos/calc-param/lexer.ml[106,5616+8]..[106,5616+12])
        expression (demos/calc-param/lexer.ml[106,5616+13]..[107,5638+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-param/lexer.ml[106,5616+13]..[106,5616+19])
            Ppat_var "lexbuf" (demos/calc-param/lexer.ml[106,5616+13]..[106,5616+19])
          expression (demos/calc-param/lexer.ml[107,5638+3]..[107,5638+32])
            Pexp_apply
            expression (demos/calc-param/lexer.ml[107,5638+3]..[107,5638+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc-param/lexer.ml[107,5638+3]..[107,5638+23])
            [
              <arg>
              Nolabel
                expression (demos/calc-param/lexer.ml[107,5638+24]..[107,5638+30])
                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[107,5638+24]..[107,5638+30])
              <arg>
              Nolabel
                expression (demos/calc-param/lexer.ml[107,5638+31]..[107,5638+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc-param/lexer.ml[108,5671+4]..[108,5671+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc-param/lexer.ml[108,5671+4]..[108,5671+24])
        expression (demos/calc-param/lexer.ml[108,5671+25]..[136,6529+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-param/lexer.ml[108,5671+25]..[108,5671+31])
            Ppat_var "lexbuf" (demos/calc-param/lexer.ml[108,5671+25]..[108,5671+31])
          expression (demos/calc-param/lexer.ml[108,5671+32]..[136,6529+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-param/lexer.ml[108,5671+32]..[108,5671+49])
              Ppat_var "__ocaml_lex_state" (demos/calc-param/lexer.ml[108,5671+32]..[108,5671+49])
            expression (demos/calc-param/lexer.ml[109,5723+2]..[136,6529+51])
              Pexp_match
              expression (demos/calc-param/lexer.ml[109,5723+8]..[109,5723+65])
                Pexp_apply
                expression (demos/calc-param/lexer.ml[109,5723+8]..[109,5723+21])
                  Pexp_ident "Lexing.engine" (demos/calc-param/lexer.ml[109,5723+8]..[109,5723+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[109,5723+22]..[109,5723+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-param/lexer.ml[109,5723+22]..[109,5723+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[109,5723+41]..[109,5723+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-param/lexer.ml[109,5723+41]..[109,5723+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[109,5723+59]..[109,5723+65])
                      Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[109,5723+59]..[109,5723+65])
                ]
              [
                <case>
                  pattern (demos/calc-param/lexer.ml[110,5794+8]..[110,5794+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-param/lexer.ml[111,5807+0]..demos/calc-param/lexer.mll[15,6024+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-param/lexer.mll[13,5845+21]..[13,5845+25])
                          Ppat_var "line" (demos/calc-param/lexer.mll[13,5845+21]..[13,5845+25])
                        expression (demos/calc-param/lexer.ml[115,5905+2]..[115,5905+81])
                          Pexp_apply
                          expression (demos/calc-param/lexer.ml[115,5905+2]..[115,5905+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-param/lexer.ml[115,5905+2]..[115,5905+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[115,5905+20]..[115,5905+26])
                                Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[115,5905+20]..[115,5905+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[115,5905+27]..[115,5905+54])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[115,5905+27]..[115,5905+33])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[115,5905+27]..[115,5905+33])
                                "Lexing.lex_start_pos" (demos/calc-param/lexer.ml[115,5905+34]..[115,5905+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[115,5905+55]..[115,5905+81])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[115,5905+55]..[115,5905+61])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[115,5905+55]..[115,5905+61])
                                "Lexing.lex_curr_pos" (demos/calc-param/lexer.ml[115,5905+62]..[115,5905+81])
                          ]
                    ]
                    expression (demos/calc-param/lexer.mll[15,6024+4]..[15,6024+23])
                      Pexp_tuple
                      [
                        expression (demos/calc-param/lexer.mll[15,6024+6]..[15,6024+15])
                          Pexp_construct "Some" (demos/calc-param/lexer.mll[15,6024+6]..[15,6024+10])
                          Some
                            expression (demos/calc-param/lexer.mll[15,6024+11]..[15,6024+15])
                              Pexp_ident "line" (demos/calc-param/lexer.mll[15,6024+11]..[15,6024+15])
                        expression (demos/calc-param/lexer.mll[15,6024+17]..[15,6024+21])
                          Pexp_construct "true" (demos/calc-param/lexer.mll[15,6024+17]..[15,6024+21])
                          None
                      ]
                <case>
                  pattern (demos/calc-param/lexer.ml[120,6083+4]..[120,6083+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-param/lexer.mll[18,6126+4]..[18,6126+19])
                    Pexp_tuple
                    [
                      expression (demos/calc-param/lexer.mll[18,6126+6]..[18,6126+10])
                        Pexp_construct "None" (demos/calc-param/lexer.mll[18,6126+6]..[18,6126+10])
                        None
                      expression (demos/calc-param/lexer.mll[18,6126+12]..[18,6126+17])
                        Pexp_construct "false" (demos/calc-param/lexer.mll[18,6126+12]..[18,6126+17])
                        None
                    ]
                <case>
                  pattern (demos/calc-param/lexer.ml[125,6181+4]..[125,6181+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-param/lexer.ml[126,6190+0]..demos/calc-param/lexer.mll[22,6401+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-param/lexer.mll[19,6228+15]..[19,6228+19])
                          Ppat_var "line" (demos/calc-param/lexer.mll[19,6228+15]..[19,6228+19])
                        expression (demos/calc-param/lexer.ml[130,6282+2]..[130,6282+81])
                          Pexp_apply
                          expression (demos/calc-param/lexer.ml[130,6282+2]..[130,6282+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-param/lexer.ml[130,6282+2]..[130,6282+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[130,6282+20]..[130,6282+26])
                                Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[130,6282+20]..[130,6282+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[130,6282+27]..[130,6282+54])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[130,6282+27]..[130,6282+33])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[130,6282+27]..[130,6282+33])
                                "Lexing.lex_start_pos" (demos/calc-param/lexer.ml[130,6282+34]..[130,6282+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[130,6282+55]..[130,6282+81])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[130,6282+55]..[130,6282+61])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[130,6282+55]..[130,6282+61])
                                "Lexing.lex_curr_pos" (demos/calc-param/lexer.ml[130,6282+62]..[130,6282+81])
                          ]
                    ]
                    expression (demos/calc-param/lexer.mll[22,6401+4]..[22,6401+33])
                      Pexp_tuple
                      [
                        expression (demos/calc-param/lexer.mll[22,6401+6]..[22,6401+24])
                          Pexp_construct "Some" (demos/calc-param/lexer.mll[22,6401+6]..[22,6401+10])
                          Some
                            expression (demos/calc-param/lexer.mll[22,6401+11]..[22,6401+24])
                              Pexp_apply
                              expression (demos/calc-param/lexer.mll[22,6401+17]..[22,6401+18])
                                Pexp_ident "^" (demos/calc-param/lexer.mll[22,6401+17]..[22,6401+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-param/lexer.mll[22,6401+12]..[22,6401+16])
                                    Pexp_ident "line" (demos/calc-param/lexer.mll[22,6401+12]..[22,6401+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc-param/lexer.mll[22,6401+19]..[22,6401+23])
                                    Pexp_constant PConst_string("\n",(demos/calc-param/lexer.mll[22,6401+20]..[22,6401+22]),None)
                              ]
                        expression (demos/calc-param/lexer.mll[22,6401+26]..[22,6401+31])
                          Pexp_construct "false" (demos/calc-param/lexer.mll[22,6401+26]..[22,6401+31])
                          None
                      ]
                <case>
                  pattern (demos/calc-param/lexer.ml[135,6470+4]..[135,6470+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-param/lexer.ml[135,6470+4]..[135,6470+21])
                  expression (demos/calc-param/lexer.ml[135,6470+25]..[136,6529+51])
                    Pexp_sequence
                    expression (demos/calc-param/lexer.ml[135,6470+25]..[135,6470+57])
                      Pexp_apply
                      expression (demos/calc-param/lexer.ml[135,6470+25]..[135,6470+50])
                        Pexp_field
                        expression (demos/calc-param/lexer.ml[135,6470+25]..[135,6470+31])
                          Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[135,6470+25]..[135,6470+31])
                        "Lexing.refill_buff" (demos/calc-param/lexer.ml[135,6470+32]..[135,6470+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[135,6470+51]..[135,6470+57])
                            Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[135,6470+51]..[135,6470+57])
                      ]
                    expression (demos/calc-param/lexer.ml[136,6529+6]..[136,6529+51])
                      Pexp_apply
                      expression (demos/calc-param/lexer.ml[136,6529+6]..[136,6529+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc-param/lexer.ml[136,6529+6]..[136,6529+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[136,6529+27]..[136,6529+33])
                            Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[136,6529+27]..[136,6529+33])
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[136,6529+34]..[136,6529+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-param/lexer.ml[136,6529+34]..[136,6529+51])
                      ]
              ]
      <def>
        pattern (demos/calc-param/lexer.ml[138,6582+4]..[138,6582+9])
          Ppat_var "token" (demos/calc-param/lexer.ml[138,6582+4]..[138,6582+9])
        expression (demos/calc-param/lexer.ml[138,6582+10]..[139,6601+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-param/lexer.ml[138,6582+10]..[138,6582+16])
            Ppat_var "lexbuf" (demos/calc-param/lexer.ml[138,6582+10]..[138,6582+16])
          expression (demos/calc-param/lexer.ml[139,6601+3]..[139,6601+33])
            Pexp_apply
            expression (demos/calc-param/lexer.ml[139,6601+3]..[139,6601+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc-param/lexer.ml[139,6601+3]..[139,6601+24])
            [
              <arg>
              Nolabel
                expression (demos/calc-param/lexer.ml[139,6601+25]..[139,6601+31])
                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[139,6601+25]..[139,6601+31])
              <arg>
              Nolabel
                expression (demos/calc-param/lexer.ml[139,6601+32]..[139,6601+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc-param/lexer.ml[140,6635+4]..[140,6635+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc-param/lexer.ml[140,6635+4]..[140,6635+25])
        expression (demos/calc-param/lexer.ml[140,6635+26]..[198,8031+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-param/lexer.ml[140,6635+26]..[140,6635+32])
            Ppat_var "lexbuf" (demos/calc-param/lexer.ml[140,6635+26]..[140,6635+32])
          expression (demos/calc-param/lexer.ml[140,6635+33]..[198,8031+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-param/lexer.ml[140,6635+33]..[140,6635+50])
              Ppat_var "__ocaml_lex_state" (demos/calc-param/lexer.ml[140,6635+33]..[140,6635+50])
            expression (demos/calc-param/lexer.ml[141,6688+2]..[198,8031+52])
              Pexp_match
              expression (demos/calc-param/lexer.ml[141,6688+8]..[141,6688+65])
                Pexp_apply
                expression (demos/calc-param/lexer.ml[141,6688+8]..[141,6688+21])
                  Pexp_ident "Lexing.engine" (demos/calc-param/lexer.ml[141,6688+8]..[141,6688+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[141,6688+22]..[141,6688+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-param/lexer.ml[141,6688+22]..[141,6688+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[141,6688+41]..[141,6688+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-param/lexer.ml[141,6688+41]..[141,6688+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-param/lexer.ml[141,6688+59]..[141,6688+65])
                      Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[141,6688+59]..[141,6688+65])
                ]
              [
                <case>
                  pattern (demos/calc-param/lexer.ml[142,6759+8]..[142,6759+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-param/lexer.mll[29,6806+4]..[29,6806+20])
                    Pexp_apply
                    expression (demos/calc-param/lexer.mll[29,6806+6]..[29,6806+11])
                      Pexp_ident "token" (demos/calc-param/lexer.mll[29,6806+6]..[29,6806+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-param/lexer.mll[29,6806+12]..[29,6806+18])
                          Pexp_ident "lexbuf" (demos/calc-param/lexer.mll[29,6806+12]..[29,6806+18])
                    ]
                <case>
                  pattern (demos/calc-param/lexer.ml[147,6862+4]..[147,6862+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-param/lexer.mll[31,6905+4]..[31,6905+11])
                    Pexp_construct "EOL" (demos/calc-param/lexer.mll[31,6905+6]..[31,6905+9])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[152,6952+4]..[152,6952+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-param/lexer.ml[153,6961+0]..demos/calc-param/lexer.mll[33,7170+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-param/lexer.mll[32,6999+16]..[32,6999+17])
                          Ppat_var "i" (demos/calc-param/lexer.mll[32,6999+16]..[32,6999+17])
                        expression (demos/calc-param/lexer.ml[157,7051+2]..[157,7051+81])
                          Pexp_apply
                          expression (demos/calc-param/lexer.ml[157,7051+2]..[157,7051+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-param/lexer.ml[157,7051+2]..[157,7051+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[157,7051+20]..[157,7051+26])
                                Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[157,7051+20]..[157,7051+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[157,7051+27]..[157,7051+54])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[157,7051+27]..[157,7051+33])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[157,7051+27]..[157,7051+33])
                                "Lexing.lex_start_pos" (demos/calc-param/lexer.ml[157,7051+34]..[157,7051+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.ml[157,7051+55]..[157,7051+81])
                                Pexp_field
                                expression (demos/calc-param/lexer.ml[157,7051+55]..[157,7051+61])
                                  Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[157,7051+55]..[157,7051+61])
                                "Lexing.lex_curr_pos" (demos/calc-param/lexer.ml[157,7051+62]..[157,7051+81])
                          ]
                    ]
                    expression (demos/calc-param/lexer.mll[33,7170+4]..[33,7170+29])
                      Pexp_construct "INT" (demos/calc-param/lexer.mll[33,7170+6]..[33,7170+9])
                      Some
                        expression (demos/calc-param/lexer.mll[33,7170+10]..[33,7170+27])
                          Pexp_apply
                          expression (demos/calc-param/lexer.mll[33,7170+11]..[33,7170+24])
                            Pexp_ident "int_of_string" (demos/calc-param/lexer.mll[33,7170+11]..[33,7170+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-param/lexer.mll[33,7170+25]..[33,7170+26])
                                Pexp_ident "i" (demos/calc-param/lexer.mll[33,7170+25]..[33,7170+26])
                          ]
                <case>
                  pattern (demos/calc-param/lexer.ml[162,7235+4]..[162,7235+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc-param/lexer.mll[35,7278+4]..[35,7278+12])
                    Pexp_construct "PLUS" (demos/calc-param/lexer.mll[35,7278+6]..[35,7278+10])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[167,7326+4]..[167,7326+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc-param/lexer.mll[37,7369+4]..[37,7369+13])
                    Pexp_construct "MINUS" (demos/calc-param/lexer.mll[37,7369+6]..[37,7369+11])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[172,7418+4]..[172,7418+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc-param/lexer.mll[39,7461+4]..[39,7461+13])
                    Pexp_construct "TIMES" (demos/calc-param/lexer.mll[39,7461+6]..[39,7461+11])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[177,7510+4]..[177,7510+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc-param/lexer.mll[41,7553+4]..[41,7553+11])
                    Pexp_construct "DIV" (demos/calc-param/lexer.mll[41,7553+6]..[41,7553+9])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[182,7600+4]..[182,7600+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc-param/lexer.mll[43,7643+4]..[43,7643+14])
                    Pexp_construct "LPAREN" (demos/calc-param/lexer.mll[43,7643+6]..[43,7643+12])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[187,7693+4]..[187,7693+5])
                    Ppat_constant PConst_int (8,None)
                  expression (demos/calc-param/lexer.mll[45,7736+4]..[45,7736+14])
                    Pexp_construct "RPAREN" (demos/calc-param/lexer.mll[45,7736+6]..[45,7736+12])
                    None
                <case>
                  pattern (demos/calc-param/lexer.ml[192,7786+4]..[192,7786+5])
                    Ppat_constant PConst_int (9,None)
                  expression (demos/calc-param/lexer.mll[47,7829+4]..[47,7829+107])
                    Pexp_apply
                    expression (demos/calc-param/lexer.mll[47,7829+6]..[47,7829+11])
                      Pexp_ident "raise" (demos/calc-param/lexer.mll[47,7829+6]..[47,7829+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-param/lexer.mll[47,7829+12]..[47,7829+105])
                          Pexp_construct "Error" (demos/calc-param/lexer.mll[47,7829+13]..[47,7829+18])
                          Some
                            expression (demos/calc-param/lexer.mll[47,7829+19]..[47,7829+104])
                              Pexp_apply
                              expression (demos/calc-param/lexer.mll[47,7829+20]..[47,7829+34])
                                Pexp_ident "Printf.sprintf" (demos/calc-param/lexer.mll[47,7829+20]..[47,7829+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-param/lexer.mll[47,7829+35]..[47,7829+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc-param/lexer.mll[47,7829+36]..[47,7829+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc-param/lexer.mll[47,7829+75]..[47,7829+103])
                                    Pexp_apply
                                    expression (demos/calc-param/lexer.mll[47,7829+76]..[47,7829+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc-param/lexer.mll[47,7829+76]..[47,7829+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc-param/lexer.mll[47,7829+96]..[47,7829+102])
                                          Pexp_ident "lexbuf" (demos/calc-param/lexer.mll[47,7829+96]..[47,7829+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc-param/lexer.ml[197,7972+4]..[197,7972+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-param/lexer.ml[197,7972+4]..[197,7972+21])
                  expression (demos/calc-param/lexer.ml[197,7972+25]..[198,8031+52])
                    Pexp_sequence
                    expression (demos/calc-param/lexer.ml[197,7972+25]..[197,7972+57])
                      Pexp_apply
                      expression (demos/calc-param/lexer.ml[197,7972+25]..[197,7972+50])
                        Pexp_field
                        expression (demos/calc-param/lexer.ml[197,7972+25]..[197,7972+31])
                          Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[197,7972+25]..[197,7972+31])
                        "Lexing.refill_buff" (demos/calc-param/lexer.ml[197,7972+32]..[197,7972+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[197,7972+51]..[197,7972+57])
                            Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[197,7972+51]..[197,7972+57])
                      ]
                    expression (demos/calc-param/lexer.ml[198,8031+6]..[198,8031+52])
                      Pexp_apply
                      expression (demos/calc-param/lexer.ml[198,8031+6]..[198,8031+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc-param/lexer.ml[198,8031+6]..[198,8031+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[198,8031+28]..[198,8031+34])
                            Pexp_ident "lexbuf" (demos/calc-param/lexer.ml[198,8031+28]..[198,8031+34])
                        <arg>
                        Nolabel
                          expression (demos/calc-param/lexer.ml[198,8031+35]..[198,8031+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-param/lexer.ml[198,8031+35]..[198,8031+52])
                      ]
              ]
    ]
]

open Tokens
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc-param/lexer.mll[2,35+2]..demos/calc-param/lexer.mll[2,35+13])
    Tstr_open Fresh
    module_expr (demos/calc-param/lexer.mll[2,35+7]..demos/calc-param/lexer.mll[2,35+13])
      Tmod_ident "Dune__exe!.Tokens"
  structure_item (demos/calc-param/lexer.mll[4,50+2]..demos/calc-param/lexer.mll[4,50+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-param/lexer.mll[4,50+2]..demos/calc-param/lexer.mll[4,50+27])
          pext_name = "Error/274"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc-param/lexer.mll[4,50+21]..demos/calc-param/lexer.mll[4,50+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc-param/lexer.ml[9,112+0]..demos/calc-param/lexer.ml[104,5613+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc-param/lexer.ml[9,112+4]..demos/calc-param/lexer.ml[9,112+22])
          Tpat_var "__ocaml_lex_tables/275"
        expression (demos/calc-param/lexer.ml[9,112+25]..demos/calc-param/lexer.ml[104,5613+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc-param/lexer.ml[11,159+3]..demos/calc-param/lexer.ml[13,299+5])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-param/lexer.ml[11,159+4]..demos/calc-param/lexer.ml[13,299+4]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc-param/lexer.ml[15,329+3]..demos/calc-param/lexer.ml[17,469+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-param/lexer.ml[15,329+4]..demos/calc-param/lexer.ml[17,469+4]),None)
                "Lexing.lex_default"
                  expression (demos/calc-param/lexer.ml[19,499+3]..demos/calc-param/lexer.ml[21,639+5])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-param/lexer.ml[19,499+4]..demos/calc-param/lexer.ml[21,639+4]),None)
                "Lexing.lex_trans"
                  expression (demos/calc-param/lexer.ml[23,667+3]..demos/calc-param/lexer.ml[56,2977+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-param/lexer.ml[23,667+4]..demos/calc-param/lexer.ml[56,2977+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc-param/lexer.ml[58,3053+3]..demos/calc-param/lexer.ml[91,5363+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-param/lexer.ml[58,3053+4]..demos/calc-param/lexer.ml[91,5363+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc-param/lexer.ml[93,5443+3]..demos/calc-param/lexer.ml[93,5443+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[93,5443+4]..demos/calc-param/lexer.ml[93,5443+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc-param/lexer.ml[95,5478+3]..demos/calc-param/lexer.ml[95,5478+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[95,5478+4]..demos/calc-param/lexer.ml[95,5478+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc-param/lexer.ml[97,5513+3]..demos/calc-param/lexer.ml[97,5513+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[97,5513+4]..demos/calc-param/lexer.ml[97,5513+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc-param/lexer.ml[99,5546+3]..demos/calc-param/lexer.ml[99,5546+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[99,5546+4]..demos/calc-param/lexer.ml[99,5546+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc-param/lexer.ml[101,5579+3]..demos/calc-param/lexer.ml[101,5579+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[101,5579+4]..demos/calc-param/lexer.ml[101,5579+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc-param/lexer.ml[103,5606+3]..demos/calc-param/lexer.ml[103,5606+5])
                    Texp_constant Const_string("",(demos/calc-param/lexer.ml[103,5606+4]..demos/calc-param/lexer.ml[103,5606+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc-param/lexer.ml[106,5616+0]..demos/calc-param/lexer.ml[198,8031+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc-param/lexer.ml[106,5616+8]..demos/calc-param/lexer.ml[106,5616+12])
          Tpat_var "line/300"
        expression (demos/calc-param/lexer.ml[106,5616+13]..demos/calc-param/lexer.ml[107,5638+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-param/lexer.ml[106,5616+13]..demos/calc-param/lexer.ml[106,5616+19])
                Tpat_var "lexbuf/304"
              expression (demos/calc-param/lexer.ml[107,5638+3]..demos/calc-param/lexer.ml[107,5638+32])
                Texp_apply
                expression (demos/calc-param/lexer.ml[107,5638+3]..demos/calc-param/lexer.ml[107,5638+23])
                  Texp_ident "__ocaml_lex_line_rec/301"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-param/lexer.ml[107,5638+24]..demos/calc-param/lexer.ml[107,5638+30])
                      Texp_ident "lexbuf/304"
                  <arg>
                    Nolabel
                    expression (demos/calc-param/lexer.ml[107,5638+31]..demos/calc-param/lexer.ml[107,5638+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc-param/lexer.ml[108,5671+4]..demos/calc-param/lexer.ml[108,5671+24])
          Tpat_var "__ocaml_lex_line_rec/301"
        expression (demos/calc-param/lexer.ml[108,5671+25]..demos/calc-param/lexer.ml[136,6529+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-param/lexer.ml[108,5671+25]..demos/calc-param/lexer.ml[108,5671+31])
                Tpat_var "lexbuf/305"
              expression (demos/calc-param/lexer.ml[108,5671+32]..demos/calc-param/lexer.ml[136,6529+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-param/lexer.ml[108,5671+32]..demos/calc-param/lexer.ml[108,5671+49])
                      Tpat_var "__ocaml_lex_state/306"
                    expression (demos/calc-param/lexer.ml[109,5723+2]..demos/calc-param/lexer.ml[136,6529+51])
                      Texp_match
                      expression (demos/calc-param/lexer.ml[109,5723+8]..demos/calc-param/lexer.ml[109,5723+65])
                        Texp_apply
                        expression (demos/calc-param/lexer.ml[109,5723+8]..demos/calc-param/lexer.ml[109,5723+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[109,5723+22]..demos/calc-param/lexer.ml[109,5723+40])
                              Texp_ident "__ocaml_lex_tables/275"
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[109,5723+41]..demos/calc-param/lexer.ml[109,5723+58])
                              Texp_ident "__ocaml_lex_state/306"
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[109,5723+59]..demos/calc-param/lexer.ml[109,5723+65])
                              Texp_ident "lexbuf/305"
                        ]
                      [
                        <case>
                          pattern (demos/calc-param/lexer.ml[110,5794+8]..demos/calc-param/lexer.ml[110,5794+9])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[110,5794+8]..demos/calc-param/lexer.ml[110,5794+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-param/lexer.ml[111,5807+0]..demos/calc-param/lexer.mll[15,6024+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-param/lexer.mll[13,5845+21]..demos/calc-param/lexer.mll[13,5845+25])
                                  Tpat_var "line/332"
                                expression (demos/calc-param/lexer.ml[115,5905+2]..demos/calc-param/lexer.ml[115,5905+81])
                                  Texp_apply
                                  expression (demos/calc-param/lexer.ml[115,5905+2]..demos/calc-param/lexer.ml[115,5905+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[115,5905+20]..demos/calc-param/lexer.ml[115,5905+26])
                                        Texp_ident "lexbuf/305"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[115,5905+27]..demos/calc-param/lexer.ml[115,5905+54])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[115,5905+27]..demos/calc-param/lexer.ml[115,5905+33])
                                          Texp_ident "lexbuf/305"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[115,5905+55]..demos/calc-param/lexer.ml[115,5905+81])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[115,5905+55]..demos/calc-param/lexer.ml[115,5905+61])
                                          Texp_ident "lexbuf/305"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-param/lexer.mll[15,6024+4]..demos/calc-param/lexer.mll[15,6024+23])
                              Texp_tuple
                              [
                                expression (demos/calc-param/lexer.mll[15,6024+6]..demos/calc-param/lexer.mll[15,6024+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-param/lexer.mll[15,6024+11]..demos/calc-param/lexer.mll[15,6024+15])
                                      Texp_ident "line/332"
                                  ]
                                expression (demos/calc-param/lexer.mll[15,6024+17]..demos/calc-param/lexer.mll[15,6024+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[120,6083+4]..demos/calc-param/lexer.ml[120,6083+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[120,6083+4]..demos/calc-param/lexer.ml[120,6083+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-param/lexer.mll[18,6126+4]..demos/calc-param/lexer.mll[18,6126+19])
                            Texp_tuple
                            [
                              expression (demos/calc-param/lexer.mll[18,6126+6]..demos/calc-param/lexer.mll[18,6126+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc-param/lexer.mll[18,6126+12]..demos/calc-param/lexer.mll[18,6126+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[125,6181+4]..demos/calc-param/lexer.ml[125,6181+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[125,6181+4]..demos/calc-param/lexer.ml[125,6181+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-param/lexer.ml[126,6190+0]..demos/calc-param/lexer.mll[22,6401+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-param/lexer.mll[19,6228+15]..demos/calc-param/lexer.mll[19,6228+19])
                                  Tpat_var "line/333"
                                expression (demos/calc-param/lexer.ml[130,6282+2]..demos/calc-param/lexer.ml[130,6282+81])
                                  Texp_apply
                                  expression (demos/calc-param/lexer.ml[130,6282+2]..demos/calc-param/lexer.ml[130,6282+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[130,6282+20]..demos/calc-param/lexer.ml[130,6282+26])
                                        Texp_ident "lexbuf/305"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[130,6282+27]..demos/calc-param/lexer.ml[130,6282+54])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[130,6282+27]..demos/calc-param/lexer.ml[130,6282+33])
                                          Texp_ident "lexbuf/305"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[130,6282+55]..demos/calc-param/lexer.ml[130,6282+81])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[130,6282+55]..demos/calc-param/lexer.ml[130,6282+61])
                                          Texp_ident "lexbuf/305"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-param/lexer.mll[22,6401+4]..demos/calc-param/lexer.mll[22,6401+33])
                              Texp_tuple
                              [
                                expression (demos/calc-param/lexer.mll[22,6401+6]..demos/calc-param/lexer.mll[22,6401+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-param/lexer.mll[22,6401+11]..demos/calc-param/lexer.mll[22,6401+24])
                                      Texp_apply
                                      expression (demos/calc-param/lexer.mll[22,6401+17]..demos/calc-param/lexer.mll[22,6401+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-param/lexer.mll[22,6401+12]..demos/calc-param/lexer.mll[22,6401+16])
                                            Texp_ident "line/333"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-param/lexer.mll[22,6401+19]..demos/calc-param/lexer.mll[22,6401+23])
                                            Texp_constant Const_string("\n",(demos/calc-param/lexer.mll[22,6401+20]..demos/calc-param/lexer.mll[22,6401+22]),None)
                                      ]
                                  ]
                                expression (demos/calc-param/lexer.mll[22,6401+26]..demos/calc-param/lexer.mll[22,6401+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[135,6470+4]..demos/calc-param/lexer.ml[135,6470+21])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[135,6470+4]..demos/calc-param/lexer.ml[135,6470+21])
                              Tpat_var "__ocaml_lex_state/331"
                          expression (demos/calc-param/lexer.ml[135,6470+25]..demos/calc-param/lexer.ml[136,6529+51])
                            Texp_sequence
                            expression (demos/calc-param/lexer.ml[135,6470+25]..demos/calc-param/lexer.ml[135,6470+57])
                              Texp_apply
                              expression (demos/calc-param/lexer.ml[135,6470+25]..demos/calc-param/lexer.ml[135,6470+50])
                                Texp_field
                                expression (demos/calc-param/lexer.ml[135,6470+25]..demos/calc-param/lexer.ml[135,6470+31])
                                  Texp_ident "lexbuf/305"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[135,6470+51]..demos/calc-param/lexer.ml[135,6470+57])
                                    Texp_ident "lexbuf/305"
                              ]
                            expression (demos/calc-param/lexer.ml[136,6529+6]..demos/calc-param/lexer.ml[136,6529+51])
                              Texp_apply
                              expression (demos/calc-param/lexer.ml[136,6529+6]..demos/calc-param/lexer.ml[136,6529+26])
                                Texp_ident "__ocaml_lex_line_rec/301"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[136,6529+27]..demos/calc-param/lexer.ml[136,6529+33])
                                    Texp_ident "lexbuf/305"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[136,6529+34]..demos/calc-param/lexer.ml[136,6529+51])
                                    Texp_ident "__ocaml_lex_state/331"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc-param/lexer.ml[138,6582+4]..demos/calc-param/lexer.ml[138,6582+9])
          Tpat_var "token/302"
        expression (demos/calc-param/lexer.ml[138,6582+10]..demos/calc-param/lexer.ml[139,6601+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-param/lexer.ml[138,6582+10]..demos/calc-param/lexer.ml[138,6582+16])
                Tpat_var "lexbuf/334"
              expression (demos/calc-param/lexer.ml[139,6601+3]..demos/calc-param/lexer.ml[139,6601+33])
                Texp_apply
                expression (demos/calc-param/lexer.ml[139,6601+3]..demos/calc-param/lexer.ml[139,6601+24])
                  Texp_ident "__ocaml_lex_token_rec/303"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-param/lexer.ml[139,6601+25]..demos/calc-param/lexer.ml[139,6601+31])
                      Texp_ident "lexbuf/334"
                  <arg>
                    Nolabel
                    expression (demos/calc-param/lexer.ml[139,6601+32]..demos/calc-param/lexer.ml[139,6601+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc-param/lexer.ml[140,6635+4]..demos/calc-param/lexer.ml[140,6635+25])
          Tpat_var "__ocaml_lex_token_rec/303"
        expression (demos/calc-param/lexer.ml[140,6635+26]..demos/calc-param/lexer.ml[198,8031+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-param/lexer.ml[140,6635+26]..demos/calc-param/lexer.ml[140,6635+32])
                Tpat_var "lexbuf/335"
              expression (demos/calc-param/lexer.ml[140,6635+33]..demos/calc-param/lexer.ml[198,8031+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-param/lexer.ml[140,6635+33]..demos/calc-param/lexer.ml[140,6635+50])
                      Tpat_var "__ocaml_lex_state/336"
                    expression (demos/calc-param/lexer.ml[141,6688+2]..demos/calc-param/lexer.ml[198,8031+52])
                      Texp_match
                      expression (demos/calc-param/lexer.ml[141,6688+8]..demos/calc-param/lexer.ml[141,6688+65])
                        Texp_apply
                        expression (demos/calc-param/lexer.ml[141,6688+8]..demos/calc-param/lexer.ml[141,6688+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[141,6688+22]..demos/calc-param/lexer.ml[141,6688+40])
                              Texp_ident "__ocaml_lex_tables/275"
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[141,6688+41]..demos/calc-param/lexer.ml[141,6688+58])
                              Texp_ident "__ocaml_lex_state/336"
                          <arg>
                            Nolabel
                            expression (demos/calc-param/lexer.ml[141,6688+59]..demos/calc-param/lexer.ml[141,6688+65])
                              Texp_ident "lexbuf/335"
                        ]
                      [
                        <case>
                          pattern (demos/calc-param/lexer.ml[142,6759+8]..demos/calc-param/lexer.ml[142,6759+9])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[142,6759+8]..demos/calc-param/lexer.ml[142,6759+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-param/lexer.mll[29,6806+4]..demos/calc-param/lexer.mll[29,6806+20])
                            Texp_apply
                            expression (demos/calc-param/lexer.mll[29,6806+6]..demos/calc-param/lexer.mll[29,6806+11])
                              Texp_ident "token/302"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-param/lexer.mll[29,6806+12]..demos/calc-param/lexer.mll[29,6806+18])
                                  Texp_ident "lexbuf/335"
                            ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[147,6862+4]..demos/calc-param/lexer.ml[147,6862+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[147,6862+4]..demos/calc-param/lexer.ml[147,6862+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-param/lexer.mll[31,6905+4]..demos/calc-param/lexer.mll[31,6905+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[152,6952+4]..demos/calc-param/lexer.ml[152,6952+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[152,6952+4]..demos/calc-param/lexer.ml[152,6952+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-param/lexer.ml[153,6961+0]..demos/calc-param/lexer.mll[33,7170+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-param/lexer.mll[32,6999+16]..demos/calc-param/lexer.mll[32,6999+17])
                                  Tpat_var "i/338"
                                expression (demos/calc-param/lexer.ml[157,7051+2]..demos/calc-param/lexer.ml[157,7051+81])
                                  Texp_apply
                                  expression (demos/calc-param/lexer.ml[157,7051+2]..demos/calc-param/lexer.ml[157,7051+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[157,7051+20]..demos/calc-param/lexer.ml[157,7051+26])
                                        Texp_ident "lexbuf/335"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[157,7051+27]..demos/calc-param/lexer.ml[157,7051+54])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[157,7051+27]..demos/calc-param/lexer.ml[157,7051+33])
                                          Texp_ident "lexbuf/335"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.ml[157,7051+55]..demos/calc-param/lexer.ml[157,7051+81])
                                        Texp_field
                                        expression (demos/calc-param/lexer.ml[157,7051+55]..demos/calc-param/lexer.ml[157,7051+61])
                                          Texp_ident "lexbuf/335"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-param/lexer.mll[33,7170+4]..demos/calc-param/lexer.mll[33,7170+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc-param/lexer.mll[33,7170+10]..demos/calc-param/lexer.mll[33,7170+27])
                                  Texp_apply
                                  expression (demos/calc-param/lexer.mll[33,7170+11]..demos/calc-param/lexer.mll[33,7170+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-param/lexer.mll[33,7170+25]..demos/calc-param/lexer.mll[33,7170+26])
                                        Texp_ident "i/338"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[162,7235+4]..demos/calc-param/lexer.ml[162,7235+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[162,7235+4]..demos/calc-param/lexer.ml[162,7235+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc-param/lexer.mll[35,7278+4]..demos/calc-param/lexer.mll[35,7278+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[167,7326+4]..demos/calc-param/lexer.ml[167,7326+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[167,7326+4]..demos/calc-param/lexer.ml[167,7326+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc-param/lexer.mll[37,7369+4]..demos/calc-param/lexer.mll[37,7369+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[172,7418+4]..demos/calc-param/lexer.ml[172,7418+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[172,7418+4]..demos/calc-param/lexer.ml[172,7418+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc-param/lexer.mll[39,7461+4]..demos/calc-param/lexer.mll[39,7461+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[177,7510+4]..demos/calc-param/lexer.ml[177,7510+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[177,7510+4]..demos/calc-param/lexer.ml[177,7510+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc-param/lexer.mll[41,7553+4]..demos/calc-param/lexer.mll[41,7553+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[182,7600+4]..demos/calc-param/lexer.ml[182,7600+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[182,7600+4]..demos/calc-param/lexer.ml[182,7600+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc-param/lexer.mll[43,7643+4]..demos/calc-param/lexer.mll[43,7643+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[187,7693+4]..demos/calc-param/lexer.ml[187,7693+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[187,7693+4]..demos/calc-param/lexer.ml[187,7693+5])
                              Tpat_constant Const_int 8
                          expression (demos/calc-param/lexer.mll[45,7736+4]..demos/calc-param/lexer.mll[45,7736+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc-param/lexer.ml[192,7786+4]..demos/calc-param/lexer.ml[192,7786+5])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[192,7786+4]..demos/calc-param/lexer.ml[192,7786+5])
                              Tpat_constant Const_int 9
                          expression (demos/calc-param/lexer.mll[47,7829+4]..demos/calc-param/lexer.mll[47,7829+107])
                            Texp_apply
                            expression (demos/calc-param/lexer.mll[47,7829+6]..demos/calc-param/lexer.mll[47,7829+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-param/lexer.mll[47,7829+12]..demos/calc-param/lexer.mll[47,7829+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc-param/lexer.mll[47,7829+19]..demos/calc-param/lexer.mll[47,7829+104])
                                      Texp_apply
                                      expression (demos/calc-param/lexer.mll[47,7829+20]..demos/calc-param/lexer.mll[47,7829+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost,None)
                                                  expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost,None)
                                                          expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc-param/lexer.mll[47,7829+35]..demos/calc-param/lexer.mll[47,7829+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-param/lexer.mll[47,7829+75]..demos/calc-param/lexer.mll[47,7829+103])
                                            Texp_apply
                                            expression (demos/calc-param/lexer.mll[47,7829+76]..demos/calc-param/lexer.mll[47,7829+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc-param/lexer.mll[47,7829+96]..demos/calc-param/lexer.mll[47,7829+102])
                                                  Texp_ident "lexbuf/335"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc-param/lexer.ml[197,7972+4]..demos/calc-param/lexer.ml[197,7972+21])
                            Tpat_value
                            pattern (demos/calc-param/lexer.ml[197,7972+4]..demos/calc-param/lexer.ml[197,7972+21])
                              Tpat_var "__ocaml_lex_state/337"
                          expression (demos/calc-param/lexer.ml[197,7972+25]..demos/calc-param/lexer.ml[198,8031+52])
                            Texp_sequence
                            expression (demos/calc-param/lexer.ml[197,7972+25]..demos/calc-param/lexer.ml[197,7972+57])
                              Texp_apply
                              expression (demos/calc-param/lexer.ml[197,7972+25]..demos/calc-param/lexer.ml[197,7972+50])
                                Texp_field
                                expression (demos/calc-param/lexer.ml[197,7972+25]..demos/calc-param/lexer.ml[197,7972+31])
                                  Texp_ident "lexbuf/335"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[197,7972+51]..demos/calc-param/lexer.ml[197,7972+57])
                                    Texp_ident "lexbuf/335"
                              ]
                            expression (demos/calc-param/lexer.ml[198,8031+6]..demos/calc-param/lexer.ml[198,8031+52])
                              Texp_apply
                              expression (demos/calc-param/lexer.ml[198,8031+6]..demos/calc-param/lexer.ml[198,8031+27])
                                Texp_ident "__ocaml_lex_token_rec/303"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[198,8031+28]..demos/calc-param/lexer.ml[198,8031+34])
                                    Texp_ident "lexbuf/335"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-param/lexer.ml[198,8031+35]..demos/calc-param/lexer.ml[198,8031+52])
                                    Texp_ident "__ocaml_lex_state/337"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(seq
  (let
    (Error/274 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/274))
  (let
    (__ocaml_lex_tables/275 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/275))
  (letrec
    (line/300
       (function lexbuf/304 (apply __ocaml_lex_line_rec/301 lexbuf/304 0))
      __ocaml_lex_line_rec/301
        (function lexbuf/305 __ocaml_lex_state/306[int]
          (let
            (__ocaml_lex_state/331 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/306 lexbuf/305))
            (catch
              (if (isout 2 __ocaml_lex_state/331) (exit 1)
                (switch* __ocaml_lex_state/331
                 case int 0:
                  (let
                    (line/332 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/305 (field_int 4 lexbuf/305)
                         (field_int 5 lexbuf/305)))
                    (makeblock 0 (*,int) (makeblock 0 line/332) 1))
                 case int 1: [0: 0 0]
                 case int 2:
                  (let
                    (line/333 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/305 (field_int 4 lexbuf/305)
                         (field_int 5 lexbuf/305)))
                    (makeblock 0 (*,int)
                      (makeblock 0
                        (apply (field_imm 27 (global Stdlib!)) line/333 "\n"))
                      0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/305) lexbuf/305)
                (apply __ocaml_lex_line_rec/301 lexbuf/305
                  __ocaml_lex_state/331)))))
      token/302
        (function lexbuf/334 (apply __ocaml_lex_token_rec/303 lexbuf/334 5))
      __ocaml_lex_token_rec/303
        (function lexbuf/335 __ocaml_lex_state/336[int]
          (let
            (__ocaml_lex_state/337 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/336 lexbuf/335))
            (catch
              (if (isout 9 __ocaml_lex_state/337) (exit 2)
                (switch* __ocaml_lex_state/337
                 case int 0: (apply token/302 lexbuf/335)
                 case int 1: 5
                 case int 2:
                  (let
                    (i/338 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/335 (field_int 4 lexbuf/335)
                         (field_int 5 lexbuf/335)))
                    (makeblock 0 (int) (caml_int_of_string i/338)))
                 case int 3: 2
                 case int 4: 3
                 case int 5: 0
                 case int 6: 6
                 case int 7: 4
                 case int 8: 1
                 case int 9:
                  (raise
                    (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0:
                         [11:
                          "At offset "
                          [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                         "At offset %d: unexpected character.\n"]
                        (apply (field_imm 9 (global Stdlib__Lexing!))
                          lexbuf/335))))))
             with (2)
              (seq (apply (field_imm 0 lexbuf/335) lexbuf/335)
                (apply __ocaml_lex_token_rec/303 lexbuf/335
                  __ocaml_lex_state/337))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/300)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/301)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/302)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/303)))
  0)
(seq
  (let
    (Error/274 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/274))
  (let
    (__ocaml_lex_tables/275 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/275))
  (letrec
    (line/300
       (function lexbuf/304 (apply __ocaml_lex_line_rec/301 lexbuf/304 0))
      __ocaml_lex_line_rec/301
        (function lexbuf/305 __ocaml_lex_state/306[int]
          (let
            (__ocaml_lex_state/331 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/306 lexbuf/305))
            (if (isout 2 __ocaml_lex_state/331)
              (seq (apply (field_imm 0 lexbuf/305) lexbuf/305)
                (apply __ocaml_lex_line_rec/301 lexbuf/305
                  __ocaml_lex_state/331))
              (switch* __ocaml_lex_state/331
               case int 0:
                (let
                  (line/332 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/305 (field_int 4 lexbuf/305)
                       (field_int 5 lexbuf/305)))
                  (makeblock 0 (*,int) (makeblock 0 line/332) 1))
               case int 1: [0: 0 0]
               case int 2:
                (let
                  (line/333 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/305 (field_int 4 lexbuf/305)
                       (field_int 5 lexbuf/305)))
                  (makeblock 0 (*,int)
                    (makeblock 0
                      (apply (field_imm 27 (global Stdlib!)) line/333 "\n"))
                    0))))))
      token/302
        (function lexbuf/334 (apply __ocaml_lex_token_rec/303 lexbuf/334 5))
      __ocaml_lex_token_rec/303
        (function lexbuf/335 __ocaml_lex_state/336[int]
          (let
            (__ocaml_lex_state/337 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/336 lexbuf/335))
            (if (isout 9 __ocaml_lex_state/337)
              (seq (apply (field_imm 0 lexbuf/335) lexbuf/335)
                (apply __ocaml_lex_token_rec/303 lexbuf/335
                  __ocaml_lex_state/337))
              (switch* __ocaml_lex_state/337
               case int 0: (apply token/302 lexbuf/335)
               case int 1: 5
               case int 2:
                (let
                  (i/338 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/335 (field_int 4 lexbuf/335)
                       (field_int 5 lexbuf/335)))
                  (makeblock 0 (int) (caml_int_of_string i/338)))
               case int 3: 2
               case int 4: 3
               case int 5: 0
               case int 6: 6
               case int 7: 4
               case int 8: 1
               case int 9:
                (raise
                  (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [11:
                        "At offset "
                        [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                       "At offset %d: unexpected character.\n"]
                      (apply (field_imm 9 (global Stdlib__Lexing!))
                        lexbuf/335)))))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/300)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/301)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/302)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/303)))
  0)

[
  structure_item (demos/calc-two/lexer.mll[2,33+2]..[2,33+13])
    Pstr_open Fresh
    module_expr (demos/calc-two/lexer.mll[2,33+7]..[2,33+13])
      Pmod_ident "Tokens" (demos/calc-two/lexer.mll[2,33+7]..[2,33+13])
  structure_item (demos/calc-two/lexer.mll[4,48+2]..[4,48+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-two/lexer.mll[4,48+2]..[4,48+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (demos/calc-two/lexer.mll[4,48+21]..[4,48+27])
                  Ptyp_constr "string" (demos/calc-two/lexer.mll[4,48+21]..[4,48+27])
                  []
              ]
              None
  structure_item (demos/calc-two/lexer.ml[9,108+0]..[104,5609+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (demos/calc-two/lexer.ml[9,108+4]..[9,108+22])
          Ppat_var "__ocaml_lex_tables" (demos/calc-two/lexer.ml[9,108+4]..[9,108+22])
        expression (demos/calc-two/lexer.ml[9,108+25]..[104,5609+1])
          Pexp_record
          [
            "Lexing.lex_base" (demos/calc-two/lexer.ml[10,135+2]..[10,135+17])
              expression (demos/calc-two/lexer.ml[11,155+3]..[13,295+5])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-two/lexer.ml[11,155+4]..[13,295+4]),None)
            "Lexing.lex_backtrk" (demos/calc-two/lexer.ml[14,302+2]..[14,302+20])
              expression (demos/calc-two/lexer.ml[15,325+3]..[17,465+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-two/lexer.ml[15,325+4]..[17,465+4]),None)
            "Lexing.lex_default" (demos/calc-two/lexer.ml[18,472+2]..[18,472+20])
              expression (demos/calc-two/lexer.ml[19,495+3]..[21,635+5])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-two/lexer.ml[19,495+4]..[21,635+4]),None)
            "Lexing.lex_trans" (demos/calc-two/lexer.ml[22,642+2]..[22,642+18])
              expression (demos/calc-two/lexer.ml[23,663+3]..[56,2973+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-two/lexer.ml[23,663+4]..[56,2973+52]),None)
            "Lexing.lex_check" (demos/calc-two/lexer.ml[57,3028+2]..[57,3028+18])
              expression (demos/calc-two/lexer.ml[58,3049+3]..[91,5359+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-two/lexer.ml[58,3049+4]..[91,5359+52]),None)
            "Lexing.lex_base_code" (demos/calc-two/lexer.ml[92,5414+2]..[92,5414+22])
              expression (demos/calc-two/lexer.ml[93,5439+3]..[93,5439+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[93,5439+4]..[93,5439+4]),None)
            "Lexing.lex_backtrk_code" (demos/calc-two/lexer.ml[94,5446+2]..[94,5446+25])
              expression (demos/calc-two/lexer.ml[95,5474+3]..[95,5474+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[95,5474+4]..[95,5474+4]),None)
            "Lexing.lex_default_code" (demos/calc-two/lexer.ml[96,5481+2]..[96,5481+25])
              expression (demos/calc-two/lexer.ml[97,5509+3]..[97,5509+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[97,5509+4]..[97,5509+4]),None)
            "Lexing.lex_trans_code" (demos/calc-two/lexer.ml[98,5516+2]..[98,5516+23])
              expression (demos/calc-two/lexer.ml[99,5542+3]..[99,5542+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[99,5542+4]..[99,5542+4]),None)
            "Lexing.lex_check_code" (demos/calc-two/lexer.ml[100,5549+2]..[100,5549+23])
              expression (demos/calc-two/lexer.ml[101,5575+3]..[101,5575+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[101,5575+4]..[101,5575+4]),None)
            "Lexing.lex_code" (demos/calc-two/lexer.ml[102,5582+2]..[102,5582+17])
              expression (demos/calc-two/lexer.ml[103,5602+3]..[103,5602+5])
                Pexp_constant PConst_string("",(demos/calc-two/lexer.ml[103,5602+4]..[103,5602+4]),None)
          ]
          None
    ]
  structure_item (demos/calc-two/lexer.ml[106,5612+0]..[198,7963+52])
    Pstr_value Rec
    [
      <def>
        pattern (demos/calc-two/lexer.ml[106,5612+8]..[106,5612+12])
          Ppat_var "line" (demos/calc-two/lexer.ml[106,5612+8]..[106,5612+12])
        expression (demos/calc-two/lexer.ml[106,5612+13]..[107,5634+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-two/lexer.ml[106,5612+13]..[106,5612+19])
            Ppat_var "lexbuf" (demos/calc-two/lexer.ml[106,5612+13]..[106,5612+19])
          expression (demos/calc-two/lexer.ml[107,5634+3]..[107,5634+32])
            Pexp_apply
            expression (demos/calc-two/lexer.ml[107,5634+3]..[107,5634+23])
              Pexp_ident "__ocaml_lex_line_rec" (demos/calc-two/lexer.ml[107,5634+3]..[107,5634+23])
            [
              <arg>
              Nolabel
                expression (demos/calc-two/lexer.ml[107,5634+24]..[107,5634+30])
                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[107,5634+24]..[107,5634+30])
              <arg>
              Nolabel
                expression (demos/calc-two/lexer.ml[107,5634+31]..[107,5634+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (demos/calc-two/lexer.ml[108,5667+4]..[108,5667+24])
          Ppat_var "__ocaml_lex_line_rec" (demos/calc-two/lexer.ml[108,5667+4]..[108,5667+24])
        expression (demos/calc-two/lexer.ml[108,5667+25]..[136,6505+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-two/lexer.ml[108,5667+25]..[108,5667+31])
            Ppat_var "lexbuf" (demos/calc-two/lexer.ml[108,5667+25]..[108,5667+31])
          expression (demos/calc-two/lexer.ml[108,5667+32]..[136,6505+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-two/lexer.ml[108,5667+32]..[108,5667+49])
              Ppat_var "__ocaml_lex_state" (demos/calc-two/lexer.ml[108,5667+32]..[108,5667+49])
            expression (demos/calc-two/lexer.ml[109,5719+2]..[136,6505+51])
              Pexp_match
              expression (demos/calc-two/lexer.ml[109,5719+8]..[109,5719+65])
                Pexp_apply
                expression (demos/calc-two/lexer.ml[109,5719+8]..[109,5719+21])
                  Pexp_ident "Lexing.engine" (demos/calc-two/lexer.ml[109,5719+8]..[109,5719+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[109,5719+22]..[109,5719+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-two/lexer.ml[109,5719+22]..[109,5719+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[109,5719+41]..[109,5719+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-two/lexer.ml[109,5719+41]..[109,5719+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[109,5719+59]..[109,5719+65])
                      Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[109,5719+59]..[109,5719+65])
                ]
              [
                <case>
                  pattern (demos/calc-two/lexer.ml[110,5790+8]..[110,5790+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-two/lexer.ml[111,5803+0]..demos/calc-two/lexer.mll[15,6014+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-two/lexer.mll[13,5839+21]..[13,5839+25])
                          Ppat_var "line" (demos/calc-two/lexer.mll[13,5839+21]..[13,5839+25])
                        expression (demos/calc-two/lexer.ml[115,5897+2]..[115,5897+81])
                          Pexp_apply
                          expression (demos/calc-two/lexer.ml[115,5897+2]..[115,5897+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-two/lexer.ml[115,5897+2]..[115,5897+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[115,5897+20]..[115,5897+26])
                                Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[115,5897+20]..[115,5897+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[115,5897+27]..[115,5897+54])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[115,5897+27]..[115,5897+33])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[115,5897+27]..[115,5897+33])
                                "Lexing.lex_start_pos" (demos/calc-two/lexer.ml[115,5897+34]..[115,5897+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[115,5897+55]..[115,5897+81])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[115,5897+55]..[115,5897+61])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[115,5897+55]..[115,5897+61])
                                "Lexing.lex_curr_pos" (demos/calc-two/lexer.ml[115,5897+62]..[115,5897+81])
                          ]
                    ]
                    expression (demos/calc-two/lexer.mll[15,6014+4]..[15,6014+23])
                      Pexp_tuple
                      [
                        expression (demos/calc-two/lexer.mll[15,6014+6]..[15,6014+15])
                          Pexp_construct "Some" (demos/calc-two/lexer.mll[15,6014+6]..[15,6014+10])
                          Some
                            expression (demos/calc-two/lexer.mll[15,6014+11]..[15,6014+15])
                              Pexp_ident "line" (demos/calc-two/lexer.mll[15,6014+11]..[15,6014+15])
                        expression (demos/calc-two/lexer.mll[15,6014+17]..[15,6014+21])
                          Pexp_construct "true" (demos/calc-two/lexer.mll[15,6014+17]..[15,6014+21])
                          None
                      ]
                <case>
                  pattern (demos/calc-two/lexer.ml[120,6071+4]..[120,6071+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-two/lexer.mll[18,6112+4]..[18,6112+19])
                    Pexp_tuple
                    [
                      expression (demos/calc-two/lexer.mll[18,6112+6]..[18,6112+10])
                        Pexp_construct "None" (demos/calc-two/lexer.mll[18,6112+6]..[18,6112+10])
                        None
                      expression (demos/calc-two/lexer.mll[18,6112+12]..[18,6112+17])
                        Pexp_construct "false" (demos/calc-two/lexer.mll[18,6112+12]..[18,6112+17])
                        None
                    ]
                <case>
                  pattern (demos/calc-two/lexer.ml[125,6165+4]..[125,6165+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-two/lexer.ml[126,6174+0]..demos/calc-two/lexer.mll[22,6379+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-two/lexer.mll[19,6210+15]..[19,6210+19])
                          Ppat_var "line" (demos/calc-two/lexer.mll[19,6210+15]..[19,6210+19])
                        expression (demos/calc-two/lexer.ml[130,6262+2]..[130,6262+81])
                          Pexp_apply
                          expression (demos/calc-two/lexer.ml[130,6262+2]..[130,6262+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-two/lexer.ml[130,6262+2]..[130,6262+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[130,6262+20]..[130,6262+26])
                                Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[130,6262+20]..[130,6262+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[130,6262+27]..[130,6262+54])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[130,6262+27]..[130,6262+33])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[130,6262+27]..[130,6262+33])
                                "Lexing.lex_start_pos" (demos/calc-two/lexer.ml[130,6262+34]..[130,6262+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[130,6262+55]..[130,6262+81])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[130,6262+55]..[130,6262+61])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[130,6262+55]..[130,6262+61])
                                "Lexing.lex_curr_pos" (demos/calc-two/lexer.ml[130,6262+62]..[130,6262+81])
                          ]
                    ]
                    expression (demos/calc-two/lexer.mll[22,6379+4]..[22,6379+33])
                      Pexp_tuple
                      [
                        expression (demos/calc-two/lexer.mll[22,6379+6]..[22,6379+24])
                          Pexp_construct "Some" (demos/calc-two/lexer.mll[22,6379+6]..[22,6379+10])
                          Some
                            expression (demos/calc-two/lexer.mll[22,6379+11]..[22,6379+24])
                              Pexp_apply
                              expression (demos/calc-two/lexer.mll[22,6379+17]..[22,6379+18])
                                Pexp_ident "^" (demos/calc-two/lexer.mll[22,6379+17]..[22,6379+18])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-two/lexer.mll[22,6379+12]..[22,6379+16])
                                    Pexp_ident "line" (demos/calc-two/lexer.mll[22,6379+12]..[22,6379+16])
                                <arg>
                                Nolabel
                                  expression (demos/calc-two/lexer.mll[22,6379+19]..[22,6379+23])
                                    Pexp_constant PConst_string("\n",(demos/calc-two/lexer.mll[22,6379+20]..[22,6379+22]),None)
                              ]
                        expression (demos/calc-two/lexer.mll[22,6379+26]..[22,6379+31])
                          Pexp_construct "false" (demos/calc-two/lexer.mll[22,6379+26]..[22,6379+31])
                          None
                      ]
                <case>
                  pattern (demos/calc-two/lexer.ml[135,6446+4]..[135,6446+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-two/lexer.ml[135,6446+4]..[135,6446+21])
                  expression (demos/calc-two/lexer.ml[135,6446+25]..[136,6505+51])
                    Pexp_sequence
                    expression (demos/calc-two/lexer.ml[135,6446+25]..[135,6446+57])
                      Pexp_apply
                      expression (demos/calc-two/lexer.ml[135,6446+25]..[135,6446+50])
                        Pexp_field
                        expression (demos/calc-two/lexer.ml[135,6446+25]..[135,6446+31])
                          Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[135,6446+25]..[135,6446+31])
                        "Lexing.refill_buff" (demos/calc-two/lexer.ml[135,6446+32]..[135,6446+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[135,6446+51]..[135,6446+57])
                            Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[135,6446+51]..[135,6446+57])
                      ]
                    expression (demos/calc-two/lexer.ml[136,6505+6]..[136,6505+51])
                      Pexp_apply
                      expression (demos/calc-two/lexer.ml[136,6505+6]..[136,6505+26])
                        Pexp_ident "__ocaml_lex_line_rec" (demos/calc-two/lexer.ml[136,6505+6]..[136,6505+26])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[136,6505+27]..[136,6505+33])
                            Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[136,6505+27]..[136,6505+33])
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[136,6505+34]..[136,6505+51])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-two/lexer.ml[136,6505+34]..[136,6505+51])
                      ]
              ]
      <def>
        pattern (demos/calc-two/lexer.ml[138,6558+4]..[138,6558+9])
          Ppat_var "token" (demos/calc-two/lexer.ml[138,6558+4]..[138,6558+9])
        expression (demos/calc-two/lexer.ml[138,6558+10]..[139,6577+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-two/lexer.ml[138,6558+10]..[138,6558+16])
            Ppat_var "lexbuf" (demos/calc-two/lexer.ml[138,6558+10]..[138,6558+16])
          expression (demos/calc-two/lexer.ml[139,6577+3]..[139,6577+33])
            Pexp_apply
            expression (demos/calc-two/lexer.ml[139,6577+3]..[139,6577+24])
              Pexp_ident "__ocaml_lex_token_rec" (demos/calc-two/lexer.ml[139,6577+3]..[139,6577+24])
            [
              <arg>
              Nolabel
                expression (demos/calc-two/lexer.ml[139,6577+25]..[139,6577+31])
                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[139,6577+25]..[139,6577+31])
              <arg>
              Nolabel
                expression (demos/calc-two/lexer.ml[139,6577+32]..[139,6577+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (demos/calc-two/lexer.ml[140,6611+4]..[140,6611+25])
          Ppat_var "__ocaml_lex_token_rec" (demos/calc-two/lexer.ml[140,6611+4]..[140,6611+25])
        expression (demos/calc-two/lexer.ml[140,6611+26]..[198,7963+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (demos/calc-two/lexer.ml[140,6611+26]..[140,6611+32])
            Ppat_var "lexbuf" (demos/calc-two/lexer.ml[140,6611+26]..[140,6611+32])
          expression (demos/calc-two/lexer.ml[140,6611+33]..[198,7963+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (demos/calc-two/lexer.ml[140,6611+33]..[140,6611+50])
              Ppat_var "__ocaml_lex_state" (demos/calc-two/lexer.ml[140,6611+33]..[140,6611+50])
            expression (demos/calc-two/lexer.ml[141,6664+2]..[198,7963+52])
              Pexp_match
              expression (demos/calc-two/lexer.ml[141,6664+8]..[141,6664+65])
                Pexp_apply
                expression (demos/calc-two/lexer.ml[141,6664+8]..[141,6664+21])
                  Pexp_ident "Lexing.engine" (demos/calc-two/lexer.ml[141,6664+8]..[141,6664+21])
                [
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[141,6664+22]..[141,6664+40])
                      Pexp_ident "__ocaml_lex_tables" (demos/calc-two/lexer.ml[141,6664+22]..[141,6664+40])
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[141,6664+41]..[141,6664+58])
                      Pexp_ident "__ocaml_lex_state" (demos/calc-two/lexer.ml[141,6664+41]..[141,6664+58])
                  <arg>
                  Nolabel
                    expression (demos/calc-two/lexer.ml[141,6664+59]..[141,6664+65])
                      Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[141,6664+59]..[141,6664+65])
                ]
              [
                <case>
                  pattern (demos/calc-two/lexer.ml[142,6735+8]..[142,6735+9])
                    Ppat_constant PConst_int (0,None)
                  expression (demos/calc-two/lexer.mll[29,6780+4]..[29,6780+20])
                    Pexp_apply
                    expression (demos/calc-two/lexer.mll[29,6780+6]..[29,6780+11])
                      Pexp_ident "token" (demos/calc-two/lexer.mll[29,6780+6]..[29,6780+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-two/lexer.mll[29,6780+12]..[29,6780+18])
                          Pexp_ident "lexbuf" (demos/calc-two/lexer.mll[29,6780+12]..[29,6780+18])
                    ]
                <case>
                  pattern (demos/calc-two/lexer.ml[147,6834+4]..[147,6834+5])
                    Ppat_constant PConst_int (1,None)
                  expression (demos/calc-two/lexer.mll[31,6875+4]..[31,6875+11])
                    Pexp_construct "EOL" (demos/calc-two/lexer.mll[31,6875+6]..[31,6875+9])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[152,6920+4]..[152,6920+5])
                    Ppat_constant PConst_int (2,None)
                  expression (demos/calc-two/lexer.ml[153,6929+0]..demos/calc-two/lexer.mll[33,7132+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (demos/calc-two/lexer.mll[32,6965+16]..[32,6965+17])
                          Ppat_var "i" (demos/calc-two/lexer.mll[32,6965+16]..[32,6965+17])
                        expression (demos/calc-two/lexer.ml[157,7015+2]..[157,7015+81])
                          Pexp_apply
                          expression (demos/calc-two/lexer.ml[157,7015+2]..[157,7015+19])
                            Pexp_ident "Lexing.sub_lexeme" (demos/calc-two/lexer.ml[157,7015+2]..[157,7015+19])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[157,7015+20]..[157,7015+26])
                                Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[157,7015+20]..[157,7015+26])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[157,7015+27]..[157,7015+54])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[157,7015+27]..[157,7015+33])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[157,7015+27]..[157,7015+33])
                                "Lexing.lex_start_pos" (demos/calc-two/lexer.ml[157,7015+34]..[157,7015+54])
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.ml[157,7015+55]..[157,7015+81])
                                Pexp_field
                                expression (demos/calc-two/lexer.ml[157,7015+55]..[157,7015+61])
                                  Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[157,7015+55]..[157,7015+61])
                                "Lexing.lex_curr_pos" (demos/calc-two/lexer.ml[157,7015+62]..[157,7015+81])
                          ]
                    ]
                    expression (demos/calc-two/lexer.mll[33,7132+4]..[33,7132+29])
                      Pexp_construct "INT" (demos/calc-two/lexer.mll[33,7132+6]..[33,7132+9])
                      Some
                        expression (demos/calc-two/lexer.mll[33,7132+10]..[33,7132+27])
                          Pexp_apply
                          expression (demos/calc-two/lexer.mll[33,7132+11]..[33,7132+24])
                            Pexp_ident "int_of_string" (demos/calc-two/lexer.mll[33,7132+11]..[33,7132+24])
                          [
                            <arg>
                            Nolabel
                              expression (demos/calc-two/lexer.mll[33,7132+25]..[33,7132+26])
                                Pexp_ident "i" (demos/calc-two/lexer.mll[33,7132+25]..[33,7132+26])
                          ]
                <case>
                  pattern (demos/calc-two/lexer.ml[162,7195+4]..[162,7195+5])
                    Ppat_constant PConst_int (3,None)
                  expression (demos/calc-two/lexer.mll[35,7236+4]..[35,7236+12])
                    Pexp_construct "PLUS" (demos/calc-two/lexer.mll[35,7236+6]..[35,7236+10])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[167,7282+4]..[167,7282+5])
                    Ppat_constant PConst_int (4,None)
                  expression (demos/calc-two/lexer.mll[37,7323+4]..[37,7323+13])
                    Pexp_construct "MINUS" (demos/calc-two/lexer.mll[37,7323+6]..[37,7323+11])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[172,7370+4]..[172,7370+5])
                    Ppat_constant PConst_int (5,None)
                  expression (demos/calc-two/lexer.mll[39,7411+4]..[39,7411+13])
                    Pexp_construct "TIMES" (demos/calc-two/lexer.mll[39,7411+6]..[39,7411+11])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[177,7458+4]..[177,7458+5])
                    Ppat_constant PConst_int (6,None)
                  expression (demos/calc-two/lexer.mll[41,7499+4]..[41,7499+11])
                    Pexp_construct "DIV" (demos/calc-two/lexer.mll[41,7499+6]..[41,7499+9])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[182,7544+4]..[182,7544+5])
                    Ppat_constant PConst_int (7,None)
                  expression (demos/calc-two/lexer.mll[43,7585+4]..[43,7585+14])
                    Pexp_construct "LPAREN" (demos/calc-two/lexer.mll[43,7585+6]..[43,7585+12])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[187,7633+4]..[187,7633+5])
                    Ppat_constant PConst_int (8,None)
                  expression (demos/calc-two/lexer.mll[45,7674+4]..[45,7674+14])
                    Pexp_construct "RPAREN" (demos/calc-two/lexer.mll[45,7674+6]..[45,7674+12])
                    None
                <case>
                  pattern (demos/calc-two/lexer.ml[192,7722+4]..[192,7722+5])
                    Ppat_constant PConst_int (9,None)
                  expression (demos/calc-two/lexer.mll[47,7763+4]..[47,7763+107])
                    Pexp_apply
                    expression (demos/calc-two/lexer.mll[47,7763+6]..[47,7763+11])
                      Pexp_ident "raise" (demos/calc-two/lexer.mll[47,7763+6]..[47,7763+11])
                    [
                      <arg>
                      Nolabel
                        expression (demos/calc-two/lexer.mll[47,7763+12]..[47,7763+105])
                          Pexp_construct "Error" (demos/calc-two/lexer.mll[47,7763+13]..[47,7763+18])
                          Some
                            expression (demos/calc-two/lexer.mll[47,7763+19]..[47,7763+104])
                              Pexp_apply
                              expression (demos/calc-two/lexer.mll[47,7763+20]..[47,7763+34])
                                Pexp_ident "Printf.sprintf" (demos/calc-two/lexer.mll[47,7763+20]..[47,7763+34])
                              [
                                <arg>
                                Nolabel
                                  expression (demos/calc-two/lexer.mll[47,7763+35]..[47,7763+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(demos/calc-two/lexer.mll[47,7763+36]..[47,7763+73]),None)
                                <arg>
                                Nolabel
                                  expression (demos/calc-two/lexer.mll[47,7763+75]..[47,7763+103])
                                    Pexp_apply
                                    expression (demos/calc-two/lexer.mll[47,7763+76]..[47,7763+95])
                                      Pexp_ident "Lexing.lexeme_start" (demos/calc-two/lexer.mll[47,7763+76]..[47,7763+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (demos/calc-two/lexer.mll[47,7763+96]..[47,7763+102])
                                          Pexp_ident "lexbuf" (demos/calc-two/lexer.mll[47,7763+96]..[47,7763+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (demos/calc-two/lexer.ml[197,7904+4]..[197,7904+21])
                    Ppat_var "__ocaml_lex_state" (demos/calc-two/lexer.ml[197,7904+4]..[197,7904+21])
                  expression (demos/calc-two/lexer.ml[197,7904+25]..[198,7963+52])
                    Pexp_sequence
                    expression (demos/calc-two/lexer.ml[197,7904+25]..[197,7904+57])
                      Pexp_apply
                      expression (demos/calc-two/lexer.ml[197,7904+25]..[197,7904+50])
                        Pexp_field
                        expression (demos/calc-two/lexer.ml[197,7904+25]..[197,7904+31])
                          Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[197,7904+25]..[197,7904+31])
                        "Lexing.refill_buff" (demos/calc-two/lexer.ml[197,7904+32]..[197,7904+50])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[197,7904+51]..[197,7904+57])
                            Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[197,7904+51]..[197,7904+57])
                      ]
                    expression (demos/calc-two/lexer.ml[198,7963+6]..[198,7963+52])
                      Pexp_apply
                      expression (demos/calc-two/lexer.ml[198,7963+6]..[198,7963+27])
                        Pexp_ident "__ocaml_lex_token_rec" (demos/calc-two/lexer.ml[198,7963+6]..[198,7963+27])
                      [
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[198,7963+28]..[198,7963+34])
                            Pexp_ident "lexbuf" (demos/calc-two/lexer.ml[198,7963+28]..[198,7963+34])
                        <arg>
                        Nolabel
                          expression (demos/calc-two/lexer.ml[198,7963+35]..[198,7963+52])
                            Pexp_ident "__ocaml_lex_state" (demos/calc-two/lexer.ml[198,7963+35]..[198,7963+52])
                      ]
              ]
    ]
]

open Tokens
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (demos/calc-two/lexer.mll[2,33+2]..demos/calc-two/lexer.mll[2,33+13])
    Tstr_open Fresh
    module_expr (demos/calc-two/lexer.mll[2,33+7]..demos/calc-two/lexer.mll[2,33+13])
      Tmod_ident "Dune__exe!.Tokens"
  structure_item (demos/calc-two/lexer.mll[4,48+2]..demos/calc-two/lexer.mll[4,48+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (demos/calc-two/lexer.mll[4,48+2]..demos/calc-two/lexer.mll[4,48+27])
          pext_name = "Error/275"
          pext_kind =
            Text_decl
              [
                core_type (demos/calc-two/lexer.mll[4,48+21]..demos/calc-two/lexer.mll[4,48+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (demos/calc-two/lexer.ml[9,108+0]..demos/calc-two/lexer.ml[104,5609+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (demos/calc-two/lexer.ml[9,108+4]..demos/calc-two/lexer.ml[9,108+22])
          Tpat_var "__ocaml_lex_tables/276"
        expression (demos/calc-two/lexer.ml[9,108+25]..demos/calc-two/lexer.ml[104,5609+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (demos/calc-two/lexer.ml[11,155+3]..demos/calc-two/lexer.ml[13,295+5])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(demos/calc-two/lexer.ml[11,155+4]..demos/calc-two/lexer.ml[13,295+4]),None)
                "Lexing.lex_backtrk"
                  expression (demos/calc-two/lexer.ml[15,325+3]..demos/calc-two/lexer.ml[17,465+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(demos/calc-two/lexer.ml[15,325+4]..demos/calc-two/lexer.ml[17,465+4]),None)
                "Lexing.lex_default"
                  expression (demos/calc-two/lexer.ml[19,495+3]..demos/calc-two/lexer.ml[21,635+5])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(demos/calc-two/lexer.ml[19,495+4]..demos/calc-two/lexer.ml[21,635+4]),None)
                "Lexing.lex_trans"
                  expression (demos/calc-two/lexer.ml[23,663+3]..demos/calc-two/lexer.ml[56,2973+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-two/lexer.ml[23,663+4]..demos/calc-two/lexer.ml[56,2973+52]),None)
                "Lexing.lex_check"
                  expression (demos/calc-two/lexer.ml[58,3049+3]..demos/calc-two/lexer.ml[91,5359+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\rdemos/calc-two/lexer.ml[58,3049+4]..demos/calc-two/lexer.ml[91,5359+52]),None)
                "Lexing.lex_base_code"
                  expression (demos/calc-two/lexer.ml[93,5439+3]..demos/calc-two/lexer.ml[93,5439+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[93,5439+4]..demos/calc-two/lexer.ml[93,5439+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (demos/calc-two/lexer.ml[95,5474+3]..demos/calc-two/lexer.ml[95,5474+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[95,5474+4]..demos/calc-two/lexer.ml[95,5474+4]),None)
                "Lexing.lex_default_code"
                  expression (demos/calc-two/lexer.ml[97,5509+3]..demos/calc-two/lexer.ml[97,5509+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[97,5509+4]..demos/calc-two/lexer.ml[97,5509+4]),None)
                "Lexing.lex_trans_code"
                  expression (demos/calc-two/lexer.ml[99,5542+3]..demos/calc-two/lexer.ml[99,5542+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[99,5542+4]..demos/calc-two/lexer.ml[99,5542+4]),None)
                "Lexing.lex_check_code"
                  expression (demos/calc-two/lexer.ml[101,5575+3]..demos/calc-two/lexer.ml[101,5575+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[101,5575+4]..demos/calc-two/lexer.ml[101,5575+4]),None)
                "Lexing.lex_code"
                  expression (demos/calc-two/lexer.ml[103,5602+3]..demos/calc-two/lexer.ml[103,5602+5])
                    Texp_constant Const_string("",(demos/calc-two/lexer.ml[103,5602+4]..demos/calc-two/lexer.ml[103,5602+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (demos/calc-two/lexer.ml[106,5612+0]..demos/calc-two/lexer.ml[198,7963+52])
    Tstr_value Rec
    [
      <def>
        pattern (demos/calc-two/lexer.ml[106,5612+8]..demos/calc-two/lexer.ml[106,5612+12])
          Tpat_var "line/301"
        expression (demos/calc-two/lexer.ml[106,5612+13]..demos/calc-two/lexer.ml[107,5634+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-two/lexer.ml[106,5612+13]..demos/calc-two/lexer.ml[106,5612+19])
                Tpat_var "lexbuf/305"
              expression (demos/calc-two/lexer.ml[107,5634+3]..demos/calc-two/lexer.ml[107,5634+32])
                Texp_apply
                expression (demos/calc-two/lexer.ml[107,5634+3]..demos/calc-two/lexer.ml[107,5634+23])
                  Texp_ident "__ocaml_lex_line_rec/302"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-two/lexer.ml[107,5634+24]..demos/calc-two/lexer.ml[107,5634+30])
                      Texp_ident "lexbuf/305"
                  <arg>
                    Nolabel
                    expression (demos/calc-two/lexer.ml[107,5634+31]..demos/calc-two/lexer.ml[107,5634+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (demos/calc-two/lexer.ml[108,5667+4]..demos/calc-two/lexer.ml[108,5667+24])
          Tpat_var "__ocaml_lex_line_rec/302"
        expression (demos/calc-two/lexer.ml[108,5667+25]..demos/calc-two/lexer.ml[136,6505+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-two/lexer.ml[108,5667+25]..demos/calc-two/lexer.ml[108,5667+31])
                Tpat_var "lexbuf/306"
              expression (demos/calc-two/lexer.ml[108,5667+32]..demos/calc-two/lexer.ml[136,6505+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-two/lexer.ml[108,5667+32]..demos/calc-two/lexer.ml[108,5667+49])
                      Tpat_var "__ocaml_lex_state/307"
                    expression (demos/calc-two/lexer.ml[109,5719+2]..demos/calc-two/lexer.ml[136,6505+51])
                      Texp_match
                      expression (demos/calc-two/lexer.ml[109,5719+8]..demos/calc-two/lexer.ml[109,5719+65])
                        Texp_apply
                        expression (demos/calc-two/lexer.ml[109,5719+8]..demos/calc-two/lexer.ml[109,5719+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[109,5719+22]..demos/calc-two/lexer.ml[109,5719+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[109,5719+41]..demos/calc-two/lexer.ml[109,5719+58])
                              Texp_ident "__ocaml_lex_state/307"
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[109,5719+59]..demos/calc-two/lexer.ml[109,5719+65])
                              Texp_ident "lexbuf/306"
                        ]
                      [
                        <case>
                          pattern (demos/calc-two/lexer.ml[110,5790+8]..demos/calc-two/lexer.ml[110,5790+9])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[110,5790+8]..demos/calc-two/lexer.ml[110,5790+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-two/lexer.ml[111,5803+0]..demos/calc-two/lexer.mll[15,6014+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-two/lexer.mll[13,5839+21]..demos/calc-two/lexer.mll[13,5839+25])
                                  Tpat_var "line/333"
                                expression (demos/calc-two/lexer.ml[115,5897+2]..demos/calc-two/lexer.ml[115,5897+81])
                                  Texp_apply
                                  expression (demos/calc-two/lexer.ml[115,5897+2]..demos/calc-two/lexer.ml[115,5897+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[115,5897+20]..demos/calc-two/lexer.ml[115,5897+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[115,5897+27]..demos/calc-two/lexer.ml[115,5897+54])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[115,5897+27]..demos/calc-two/lexer.ml[115,5897+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[115,5897+55]..demos/calc-two/lexer.ml[115,5897+81])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[115,5897+55]..demos/calc-two/lexer.ml[115,5897+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-two/lexer.mll[15,6014+4]..demos/calc-two/lexer.mll[15,6014+23])
                              Texp_tuple
                              [
                                expression (demos/calc-two/lexer.mll[15,6014+6]..demos/calc-two/lexer.mll[15,6014+15])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-two/lexer.mll[15,6014+11]..demos/calc-two/lexer.mll[15,6014+15])
                                      Texp_ident "line/333"
                                  ]
                                expression (demos/calc-two/lexer.mll[15,6014+17]..demos/calc-two/lexer.mll[15,6014+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[120,6071+4]..demos/calc-two/lexer.ml[120,6071+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[120,6071+4]..demos/calc-two/lexer.ml[120,6071+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-two/lexer.mll[18,6112+4]..demos/calc-two/lexer.mll[18,6112+19])
                            Texp_tuple
                            [
                              expression (demos/calc-two/lexer.mll[18,6112+6]..demos/calc-two/lexer.mll[18,6112+10])
                                Texp_construct "None"
                                []
                              expression (demos/calc-two/lexer.mll[18,6112+12]..demos/calc-two/lexer.mll[18,6112+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[125,6165+4]..demos/calc-two/lexer.ml[125,6165+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[125,6165+4]..demos/calc-two/lexer.ml[125,6165+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-two/lexer.ml[126,6174+0]..demos/calc-two/lexer.mll[22,6379+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-two/lexer.mll[19,6210+15]..demos/calc-two/lexer.mll[19,6210+19])
                                  Tpat_var "line/334"
                                expression (demos/calc-two/lexer.ml[130,6262+2]..demos/calc-two/lexer.ml[130,6262+81])
                                  Texp_apply
                                  expression (demos/calc-two/lexer.ml[130,6262+2]..demos/calc-two/lexer.ml[130,6262+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[130,6262+20]..demos/calc-two/lexer.ml[130,6262+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[130,6262+27]..demos/calc-two/lexer.ml[130,6262+54])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[130,6262+27]..demos/calc-two/lexer.ml[130,6262+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[130,6262+55]..demos/calc-two/lexer.ml[130,6262+81])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[130,6262+55]..demos/calc-two/lexer.ml[130,6262+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-two/lexer.mll[22,6379+4]..demos/calc-two/lexer.mll[22,6379+33])
                              Texp_tuple
                              [
                                expression (demos/calc-two/lexer.mll[22,6379+6]..demos/calc-two/lexer.mll[22,6379+24])
                                  Texp_construct "Some"
                                  [
                                    expression (demos/calc-two/lexer.mll[22,6379+11]..demos/calc-two/lexer.mll[22,6379+24])
                                      Texp_apply
                                      expression (demos/calc-two/lexer.mll[22,6379+17]..demos/calc-two/lexer.mll[22,6379+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-two/lexer.mll[22,6379+12]..demos/calc-two/lexer.mll[22,6379+16])
                                            Texp_ident "line/334"
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-two/lexer.mll[22,6379+19]..demos/calc-two/lexer.mll[22,6379+23])
                                            Texp_constant Const_string("\n",(demos/calc-two/lexer.mll[22,6379+20]..demos/calc-two/lexer.mll[22,6379+22]),None)
                                      ]
                                  ]
                                expression (demos/calc-two/lexer.mll[22,6379+26]..demos/calc-two/lexer.mll[22,6379+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[135,6446+4]..demos/calc-two/lexer.ml[135,6446+21])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[135,6446+4]..demos/calc-two/lexer.ml[135,6446+21])
                              Tpat_var "__ocaml_lex_state/332"
                          expression (demos/calc-two/lexer.ml[135,6446+25]..demos/calc-two/lexer.ml[136,6505+51])
                            Texp_sequence
                            expression (demos/calc-two/lexer.ml[135,6446+25]..demos/calc-two/lexer.ml[135,6446+57])
                              Texp_apply
                              expression (demos/calc-two/lexer.ml[135,6446+25]..demos/calc-two/lexer.ml[135,6446+50])
                                Texp_field
                                expression (demos/calc-two/lexer.ml[135,6446+25]..demos/calc-two/lexer.ml[135,6446+31])
                                  Texp_ident "lexbuf/306"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[135,6446+51]..demos/calc-two/lexer.ml[135,6446+57])
                                    Texp_ident "lexbuf/306"
                              ]
                            expression (demos/calc-two/lexer.ml[136,6505+6]..demos/calc-two/lexer.ml[136,6505+51])
                              Texp_apply
                              expression (demos/calc-two/lexer.ml[136,6505+6]..demos/calc-two/lexer.ml[136,6505+26])
                                Texp_ident "__ocaml_lex_line_rec/302"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[136,6505+27]..demos/calc-two/lexer.ml[136,6505+33])
                                    Texp_ident "lexbuf/306"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[136,6505+34]..demos/calc-two/lexer.ml[136,6505+51])
                                    Texp_ident "__ocaml_lex_state/332"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (demos/calc-two/lexer.ml[138,6558+4]..demos/calc-two/lexer.ml[138,6558+9])
          Tpat_var "token/303"
        expression (demos/calc-two/lexer.ml[138,6558+10]..demos/calc-two/lexer.ml[139,6577+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-two/lexer.ml[138,6558+10]..demos/calc-two/lexer.ml[138,6558+16])
                Tpat_var "lexbuf/335"
              expression (demos/calc-two/lexer.ml[139,6577+3]..demos/calc-two/lexer.ml[139,6577+33])
                Texp_apply
                expression (demos/calc-two/lexer.ml[139,6577+3]..demos/calc-two/lexer.ml[139,6577+24])
                  Texp_ident "__ocaml_lex_token_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (demos/calc-two/lexer.ml[139,6577+25]..demos/calc-two/lexer.ml[139,6577+31])
                      Texp_ident "lexbuf/335"
                  <arg>
                    Nolabel
                    expression (demos/calc-two/lexer.ml[139,6577+32]..demos/calc-two/lexer.ml[139,6577+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (demos/calc-two/lexer.ml[140,6611+4]..demos/calc-two/lexer.ml[140,6611+25])
          Tpat_var "__ocaml_lex_token_rec/304"
        expression (demos/calc-two/lexer.ml[140,6611+26]..demos/calc-two/lexer.ml[198,7963+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (demos/calc-two/lexer.ml[140,6611+26]..demos/calc-two/lexer.ml[140,6611+32])
                Tpat_var "lexbuf/336"
              expression (demos/calc-two/lexer.ml[140,6611+33]..demos/calc-two/lexer.ml[198,7963+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (demos/calc-two/lexer.ml[140,6611+33]..demos/calc-two/lexer.ml[140,6611+50])
                      Tpat_var "__ocaml_lex_state/337"
                    expression (demos/calc-two/lexer.ml[141,6664+2]..demos/calc-two/lexer.ml[198,7963+52])
                      Texp_match
                      expression (demos/calc-two/lexer.ml[141,6664+8]..demos/calc-two/lexer.ml[141,6664+65])
                        Texp_apply
                        expression (demos/calc-two/lexer.ml[141,6664+8]..demos/calc-two/lexer.ml[141,6664+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[141,6664+22]..demos/calc-two/lexer.ml[141,6664+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[141,6664+41]..demos/calc-two/lexer.ml[141,6664+58])
                              Texp_ident "__ocaml_lex_state/337"
                          <arg>
                            Nolabel
                            expression (demos/calc-two/lexer.ml[141,6664+59]..demos/calc-two/lexer.ml[141,6664+65])
                              Texp_ident "lexbuf/336"
                        ]
                      [
                        <case>
                          pattern (demos/calc-two/lexer.ml[142,6735+8]..demos/calc-two/lexer.ml[142,6735+9])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[142,6735+8]..demos/calc-two/lexer.ml[142,6735+9])
                              Tpat_constant Const_int 0
                          expression (demos/calc-two/lexer.mll[29,6780+4]..demos/calc-two/lexer.mll[29,6780+20])
                            Texp_apply
                            expression (demos/calc-two/lexer.mll[29,6780+6]..demos/calc-two/lexer.mll[29,6780+11])
                              Texp_ident "token/303"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-two/lexer.mll[29,6780+12]..demos/calc-two/lexer.mll[29,6780+18])
                                  Texp_ident "lexbuf/336"
                            ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[147,6834+4]..demos/calc-two/lexer.ml[147,6834+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[147,6834+4]..demos/calc-two/lexer.ml[147,6834+5])
                              Tpat_constant Const_int 1
                          expression (demos/calc-two/lexer.mll[31,6875+4]..demos/calc-two/lexer.mll[31,6875+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[152,6920+4]..demos/calc-two/lexer.ml[152,6920+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[152,6920+4]..demos/calc-two/lexer.ml[152,6920+5])
                              Tpat_constant Const_int 2
                          expression (demos/calc-two/lexer.ml[153,6929+0]..demos/calc-two/lexer.mll[33,7132+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (demos/calc-two/lexer.mll[32,6965+16]..demos/calc-two/lexer.mll[32,6965+17])
                                  Tpat_var "i/339"
                                expression (demos/calc-two/lexer.ml[157,7015+2]..demos/calc-two/lexer.ml[157,7015+81])
                                  Texp_apply
                                  expression (demos/calc-two/lexer.ml[157,7015+2]..demos/calc-two/lexer.ml[157,7015+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[157,7015+20]..demos/calc-two/lexer.ml[157,7015+26])
                                        Texp_ident "lexbuf/336"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[157,7015+27]..demos/calc-two/lexer.ml[157,7015+54])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[157,7015+27]..demos/calc-two/lexer.ml[157,7015+33])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.ml[157,7015+55]..demos/calc-two/lexer.ml[157,7015+81])
                                        Texp_field
                                        expression (demos/calc-two/lexer.ml[157,7015+55]..demos/calc-two/lexer.ml[157,7015+61])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (demos/calc-two/lexer.mll[33,7132+4]..demos/calc-two/lexer.mll[33,7132+29])
                              Texp_construct "INT"
                              [
                                expression (demos/calc-two/lexer.mll[33,7132+10]..demos/calc-two/lexer.mll[33,7132+27])
                                  Texp_apply
                                  expression (demos/calc-two/lexer.mll[33,7132+11]..demos/calc-two/lexer.mll[33,7132+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (demos/calc-two/lexer.mll[33,7132+25]..demos/calc-two/lexer.mll[33,7132+26])
                                        Texp_ident "i/339"
                                  ]
                              ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[162,7195+4]..demos/calc-two/lexer.ml[162,7195+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[162,7195+4]..demos/calc-two/lexer.ml[162,7195+5])
                              Tpat_constant Const_int 3
                          expression (demos/calc-two/lexer.mll[35,7236+4]..demos/calc-two/lexer.mll[35,7236+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[167,7282+4]..demos/calc-two/lexer.ml[167,7282+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[167,7282+4]..demos/calc-two/lexer.ml[167,7282+5])
                              Tpat_constant Const_int 4
                          expression (demos/calc-two/lexer.mll[37,7323+4]..demos/calc-two/lexer.mll[37,7323+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[172,7370+4]..demos/calc-two/lexer.ml[172,7370+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[172,7370+4]..demos/calc-two/lexer.ml[172,7370+5])
                              Tpat_constant Const_int 5
                          expression (demos/calc-two/lexer.mll[39,7411+4]..demos/calc-two/lexer.mll[39,7411+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[177,7458+4]..demos/calc-two/lexer.ml[177,7458+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[177,7458+4]..demos/calc-two/lexer.ml[177,7458+5])
                              Tpat_constant Const_int 6
                          expression (demos/calc-two/lexer.mll[41,7499+4]..demos/calc-two/lexer.mll[41,7499+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[182,7544+4]..demos/calc-two/lexer.ml[182,7544+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[182,7544+4]..demos/calc-two/lexer.ml[182,7544+5])
                              Tpat_constant Const_int 7
                          expression (demos/calc-two/lexer.mll[43,7585+4]..demos/calc-two/lexer.mll[43,7585+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[187,7633+4]..demos/calc-two/lexer.ml[187,7633+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[187,7633+4]..demos/calc-two/lexer.ml[187,7633+5])
                              Tpat_constant Const_int 8
                          expression (demos/calc-two/lexer.mll[45,7674+4]..demos/calc-two/lexer.mll[45,7674+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (demos/calc-two/lexer.ml[192,7722+4]..demos/calc-two/lexer.ml[192,7722+5])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[192,7722+4]..demos/calc-two/lexer.ml[192,7722+5])
                              Tpat_constant Const_int 9
                          expression (demos/calc-two/lexer.mll[47,7763+4]..demos/calc-two/lexer.mll[47,7763+107])
                            Texp_apply
                            expression (demos/calc-two/lexer.mll[47,7763+6]..demos/calc-two/lexer.mll[47,7763+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (demos/calc-two/lexer.mll[47,7763+12]..demos/calc-two/lexer.mll[47,7763+105])
                                  Texp_construct "Error"
                                  [
                                    expression (demos/calc-two/lexer.mll[47,7763+19]..demos/calc-two/lexer.mll[47,7763+104])
                                      Texp_apply
                                      expression (demos/calc-two/lexer.mll[47,7763+20]..demos/calc-two/lexer.mll[47,7763+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                    Texp_constant Const_string("At offset ",(demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost,None)
                                                  expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost,None)
                                                          expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(demos/calc-two/lexer.mll[47,7763+35]..demos/calc-two/lexer.mll[47,7763+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (demos/calc-two/lexer.mll[47,7763+75]..demos/calc-two/lexer.mll[47,7763+103])
                                            Texp_apply
                                            expression (demos/calc-two/lexer.mll[47,7763+76]..demos/calc-two/lexer.mll[47,7763+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (demos/calc-two/lexer.mll[47,7763+96]..demos/calc-two/lexer.mll[47,7763+102])
                                                  Texp_ident "lexbuf/336"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (demos/calc-two/lexer.ml[197,7904+4]..demos/calc-two/lexer.ml[197,7904+21])
                            Tpat_value
                            pattern (demos/calc-two/lexer.ml[197,7904+4]..demos/calc-two/lexer.ml[197,7904+21])
                              Tpat_var "__ocaml_lex_state/338"
                          expression (demos/calc-two/lexer.ml[197,7904+25]..demos/calc-two/lexer.ml[198,7963+52])
                            Texp_sequence
                            expression (demos/calc-two/lexer.ml[197,7904+25]..demos/calc-two/lexer.ml[197,7904+57])
                              Texp_apply
                              expression (demos/calc-two/lexer.ml[197,7904+25]..demos/calc-two/lexer.ml[197,7904+50])
                                Texp_field
                                expression (demos/calc-two/lexer.ml[197,7904+25]..demos/calc-two/lexer.ml[197,7904+31])
                                  Texp_ident "lexbuf/336"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[197,7904+51]..demos/calc-two/lexer.ml[197,7904+57])
                                    Texp_ident "lexbuf/336"
                              ]
                            expression (demos/calc-two/lexer.ml[198,7963+6]..demos/calc-two/lexer.ml[198,7963+52])
                              Texp_apply
                              expression (demos/calc-two/lexer.ml[198,7963+6]..demos/calc-two/lexer.ml[198,7963+27])
                                Texp_ident "__ocaml_lex_token_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[198,7963+28]..demos/calc-two/lexer.ml[198,7963+34])
                                    Texp_ident "lexbuf/336"
                                <arg>
                                  Nolabel
                                  expression (demos/calc-two/lexer.ml[198,7963+35]..demos/calc-two/lexer.ml[198,7963+52])
                                    Texp_ident "__ocaml_lex_state/338"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (catch
              (if (isout 2 __ocaml_lex_state/332) (exit 1)
                (switch* __ocaml_lex_state/332
                 case int 0:
                  (let
                    (line/333 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int) (makeblock 0 line/333) 1))
                 case int 1: [0: 0 0]
                 case int 2:
                  (let
                    (line/334 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int)
                      (makeblock 0
                        (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                      0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332)))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (catch
              (if (isout 9 __ocaml_lex_state/338) (exit 2)
                (switch* __ocaml_lex_state/338
                 case int 0: (apply token/303 lexbuf/336)
                 case int 1: 5
                 case int 2:
                  (let
                    (i/339 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/336 (field_int 4 lexbuf/336)
                         (field_int 5 lexbuf/336)))
                    (makeblock 0 (int) (caml_int_of_string i/339)))
                 case int 3: 2
                 case int 4: 3
                 case int 5: 0
                 case int 6: 6
                 case int 7: 4
                 case int 8: 1
                 case int 9:
                  (raise
                    (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0:
                         [11:
                          "At offset "
                          [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                         "At offset %d: unexpected character.\n"]
                        (apply (field_imm 9 (global Stdlib__Lexing!))
                          lexbuf/336))))))
             with (2)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)
(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\007\000\n\000\012\000\000\000\011\000\000\000\t\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\255\255\005\000\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (if (isout 2 __ocaml_lex_state/332)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332))
              (switch* __ocaml_lex_state/332
               case int 0:
                (let
                  (line/333 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int) (makeblock 0 line/333) 1))
               case int 1: [0: 0 0]
               case int 2:
                (let
                  (line/334 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int)
                    (makeblock 0
                      (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                    0))))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (if (isout 9 __ocaml_lex_state/338)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))
              (switch* __ocaml_lex_state/338
               case int 0: (apply token/303 lexbuf/336)
               case int 1: 5
               case int 2:
                (let
                  (i/339 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/336 (field_int 4 lexbuf/336)
                       (field_int 5 lexbuf/336)))
                  (makeblock 0 (int) (caml_int_of_string i/339)))
               case int 3: 2
               case int 4: 3
               case int 5: 0
               case int 6: 6
               case int 7: 4
               case int 8: 1
               case int 9:
                (raise
                  (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [11:
                        "At offset "
                        [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                       "At offset %d: unexpected character.\n"]
                      (apply (field_imm 9 (global Stdlib__Lexing!))
                        lexbuf/336)))))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)

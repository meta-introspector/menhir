[
  structure_item (test/dynamic/misc/variants/lexer.ml[1,0+0]..[88,4957+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[1,0+4]..[1,0+22])
          Ppat_var "__ocaml_lex_tables" (test/dynamic/misc/variants/lexer.ml[1,0+4]..[1,0+22])
        expression (test/dynamic/misc/variants/lexer.ml[1,0+25]..[88,4957+1])
          Pexp_record
          [
            "Lexing.lex_base" (test/dynamic/misc/variants/lexer.ml[2,27+2]..[2,27+17])
              expression (test/dynamic/misc/variants/lexer.ml[3,47+3]..[3,47+37])
                Pexp_constant PConst_string("\000\000\253\255\254\255\255\255",(test/dynamic/misc/variants/lexer.ml[3,47+4]..[3,47+36]),None)
            "Lexing.lex_backtrk" (test/dynamic/misc/variants/lexer.ml[4,86+2]..[4,86+20])
              expression (test/dynamic/misc/variants/lexer.ml[5,109+3]..[5,109+37])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255",(test/dynamic/misc/variants/lexer.ml[5,109+4]..[5,109+36]),None)
            "Lexing.lex_default" (test/dynamic/misc/variants/lexer.ml[6,148+2]..[6,148+20])
              expression (test/dynamic/misc/variants/lexer.ml[7,171+3]..[7,171+37])
                Pexp_constant PConst_string("\002\000\000\000\000\000\000\000",(test/dynamic/misc/variants/lexer.ml[7,171+4]..[7,171+36]),None)
            "Lexing.lex_trans" (test/dynamic/misc/variants/lexer.ml[8,210+2]..[8,210+18])
              expression (test/dynamic/misc/variants/lexer.ml[9,231+3]..[41,2471+13])
                Pexp_constant PConst_stringtest/dynamic/misc/variants/lexer.ml[9,231+4]..[41,2471+12]),None)
            "Lexing.lex_check" (test/dynamic/misc/variants/lexer.ml[42,2486+2]..[42,2486+18])
              expression (test/dynamic/misc/variants/lexer.ml[43,2507+3]..[75,4747+13])
                Pexp_constant PConst_stringtest/dynamic/misc/variants/lexer.ml[43,2507+4]..[75,4747+12]),None)
            "Lexing.lex_base_code" (test/dynamic/misc/variants/lexer.ml[76,4762+2]..[76,4762+22])
              expression (test/dynamic/misc/variants/lexer.ml[77,4787+3]..[77,4787+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[77,4787+4]..[77,4787+4]),None)
            "Lexing.lex_backtrk_code" (test/dynamic/misc/variants/lexer.ml[78,4794+2]..[78,4794+25])
              expression (test/dynamic/misc/variants/lexer.ml[79,4822+3]..[79,4822+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[79,4822+4]..[79,4822+4]),None)
            "Lexing.lex_default_code" (test/dynamic/misc/variants/lexer.ml[80,4829+2]..[80,4829+25])
              expression (test/dynamic/misc/variants/lexer.ml[81,4857+3]..[81,4857+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[81,4857+4]..[81,4857+4]),None)
            "Lexing.lex_trans_code" (test/dynamic/misc/variants/lexer.ml[82,4864+2]..[82,4864+23])
              expression (test/dynamic/misc/variants/lexer.ml[83,4890+3]..[83,4890+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[83,4890+4]..[83,4890+4]),None)
            "Lexing.lex_check_code" (test/dynamic/misc/variants/lexer.ml[84,4897+2]..[84,4897+23])
              expression (test/dynamic/misc/variants/lexer.ml[85,4923+3]..[85,4923+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[85,4923+4]..[85,4923+4]),None)
            "Lexing.lex_code" (test/dynamic/misc/variants/lexer.ml[86,4930+2]..[86,4930+17])
              expression (test/dynamic/misc/variants/lexer.ml[87,4950+3]..[87,4950+5])
                Pexp_constant PConst_string("",(test/dynamic/misc/variants/lexer.ml[87,4950+4]..[87,4950+4]),None)
          ]
          None
    ]
  structure_item (test/dynamic/misc/variants/lexer.ml[90,4960+0]..[110,5601+51])
    Pstr_value Rec
    [
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[90,4960+8]..[90,4960+12])
          Ppat_var "read" (test/dynamic/misc/variants/lexer.ml[90,4960+8]..[90,4960+12])
        expression (test/dynamic/misc/variants/lexer.ml[90,4960+13]..[91,4982+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/misc/variants/lexer.ml[90,4960+13]..[90,4960+19])
            Ppat_var "lexbuf" (test/dynamic/misc/variants/lexer.ml[90,4960+13]..[90,4960+19])
          expression (test/dynamic/misc/variants/lexer.ml[91,4982+3]..[91,4982+32])
            Pexp_apply
            expression (test/dynamic/misc/variants/lexer.ml[91,4982+3]..[91,4982+23])
              Pexp_ident "__ocaml_lex_read_rec" (test/dynamic/misc/variants/lexer.ml[91,4982+3]..[91,4982+23])
            [
              <arg>
              Nolabel
                expression (test/dynamic/misc/variants/lexer.ml[91,4982+24]..[91,4982+30])
                  Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.ml[91,4982+24]..[91,4982+30])
              <arg>
              Nolabel
                expression (test/dynamic/misc/variants/lexer.ml[91,4982+31]..[91,4982+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[92,5015+4]..[92,5015+24])
          Ppat_var "__ocaml_lex_read_rec" (test/dynamic/misc/variants/lexer.ml[92,5015+4]..[92,5015+24])
        expression (test/dynamic/misc/variants/lexer.ml[92,5015+25]..[110,5601+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/misc/variants/lexer.ml[92,5015+25]..[92,5015+31])
            Ppat_var "lexbuf" (test/dynamic/misc/variants/lexer.ml[92,5015+25]..[92,5015+31])
          expression (test/dynamic/misc/variants/lexer.ml[92,5015+32]..[110,5601+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (test/dynamic/misc/variants/lexer.ml[92,5015+32]..[92,5015+49])
              Ppat_var "__ocaml_lex_state" (test/dynamic/misc/variants/lexer.ml[92,5015+32]..[92,5015+49])
            expression (test/dynamic/misc/variants/lexer.ml[93,5067+2]..[110,5601+51])
              Pexp_match
              expression (test/dynamic/misc/variants/lexer.ml[93,5067+8]..[93,5067+65])
                Pexp_apply
                expression (test/dynamic/misc/variants/lexer.ml[93,5067+8]..[93,5067+21])
                  Pexp_ident "Lexing.engine" (test/dynamic/misc/variants/lexer.ml[93,5067+8]..[93,5067+21])
                [
                  <arg>
                  Nolabel
                    expression (test/dynamic/misc/variants/lexer.ml[93,5067+22]..[93,5067+40])
                      Pexp_ident "__ocaml_lex_tables" (test/dynamic/misc/variants/lexer.ml[93,5067+22]..[93,5067+40])
                  <arg>
                  Nolabel
                    expression (test/dynamic/misc/variants/lexer.ml[93,5067+41]..[93,5067+58])
                      Pexp_ident "__ocaml_lex_state" (test/dynamic/misc/variants/lexer.ml[93,5067+41]..[93,5067+58])
                  <arg>
                  Nolabel
                    expression (test/dynamic/misc/variants/lexer.ml[93,5067+59]..[93,5067+65])
                      Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.ml[93,5067+59]..[93,5067+65])
                ]
              [
                <case>
                  pattern (test/dynamic/misc/variants/lexer.ml[94,5138+8]..[94,5138+9])
                    Ppat_constant PConst_int (0,None)
                  expression (test/dynamic/misc/variants/lexer.mll[3,5194+8]..[3,5194+20])
                    Pexp_construct "Parser.T" (test/dynamic/misc/variants/lexer.mll[3,5194+10]..[3,5194+18])
                    None
                <case>
                  pattern (test/dynamic/misc/variants/lexer.ml[99,5259+4]..[99,5259+5])
                    Ppat_constant PConst_int (1,None)
                  expression (test/dynamic/misc/variants/lexer.mll[4,5311+8]..[4,5311+65])
                    Pexp_apply
                    expression (test/dynamic/misc/variants/lexer.mll[4,5311+10]..[4,5311+18])
                      Pexp_ident "failwith" (test/dynamic/misc/variants/lexer.mll[4,5311+10]..[4,5311+18])
                    [
                      <arg>
                      Nolabel
                        expression (test/dynamic/misc/variants/lexer.mll[4,5311+19]..[4,5311+63])
                          Pexp_apply
                          expression (test/dynamic/misc/variants/lexer.mll[4,5311+40]..[4,5311+41])
                            Pexp_ident "^" (test/dynamic/misc/variants/lexer.mll[4,5311+40]..[4,5311+41])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/misc/variants/lexer.mll[4,5311+20]..[4,5311+39])
                                Pexp_constant PConst_string("Unexpected char: ",(test/dynamic/misc/variants/lexer.mll[4,5311+21]..[4,5311+38]),None)
                            <arg>
                            Nolabel
                              expression (test/dynamic/misc/variants/lexer.mll[4,5311+42]..[4,5311+62])
                                Pexp_apply
                                expression (test/dynamic/misc/variants/lexer.mll[4,5311+42]..[4,5311+55])
                                  Pexp_ident "Lexing.lexeme" (test/dynamic/misc/variants/lexer.mll[4,5311+42]..[4,5311+55])
                                [
                                  <arg>
                                  Nolabel
                                    expression (test/dynamic/misc/variants/lexer.mll[4,5311+56]..[4,5311+62])
                                      Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.mll[4,5311+56]..[4,5311+62])
                                ]
                          ]
                    ]
                <case>
                  pattern (test/dynamic/misc/variants/lexer.ml[104,5422+4]..[104,5422+5])
                    Ppat_constant PConst_int (2,None)
                  expression (test/dynamic/misc/variants/lexer.mll[5,5474+8]..[5,5474+22])
                    Pexp_construct "Parser.EOF" (test/dynamic/misc/variants/lexer.mll[5,5474+10]..[5,5474+20])
                    None
                <case>
                  pattern (test/dynamic/misc/variants/lexer.ml[109,5542+4]..[109,5542+21])
                    Ppat_var "__ocaml_lex_state" (test/dynamic/misc/variants/lexer.ml[109,5542+4]..[109,5542+21])
                  expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..[110,5601+51])
                    Pexp_sequence
                    expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..[109,5542+57])
                      Pexp_apply
                      expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..[109,5542+50])
                        Pexp_field
                        expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..[109,5542+31])
                          Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.ml[109,5542+25]..[109,5542+31])
                        "Lexing.refill_buff" (test/dynamic/misc/variants/lexer.ml[109,5542+32]..[109,5542+50])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/misc/variants/lexer.ml[109,5542+51]..[109,5542+57])
                            Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.ml[109,5542+51]..[109,5542+57])
                      ]
                    expression (test/dynamic/misc/variants/lexer.ml[110,5601+6]..[110,5601+51])
                      Pexp_apply
                      expression (test/dynamic/misc/variants/lexer.ml[110,5601+6]..[110,5601+26])
                        Pexp_ident "__ocaml_lex_read_rec" (test/dynamic/misc/variants/lexer.ml[110,5601+6]..[110,5601+26])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/misc/variants/lexer.ml[110,5601+27]..[110,5601+33])
                            Pexp_ident "lexbuf" (test/dynamic/misc/variants/lexer.ml[110,5601+27]..[110,5601+33])
                        <arg>
                        Nolabel
                          expression (test/dynamic/misc/variants/lexer.ml[110,5601+34]..[110,5601+51])
                            Pexp_ident "__ocaml_lex_state" (test/dynamic/misc/variants/lexer.ml[110,5601+34]..[110,5601+51])
                      ]
              ]
    ]
]

let __ocaml_lex_tables =
  {
    Lexing.lex_base = "\000\000\253\255\254\255\255\255";
    Lexing.lex_backtrk = "\255\255\255\255\255\255\255\255";
    Lexing.lex_default = "\002\000\000\000\000\000\000\000";
    Lexing.lex_trans =

    Lexing.lex_check =

    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec read lexbuf = __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Parser.T
  | 1 -> failwith ("Unexpected char: " ^ (Lexing.lexeme lexbuf))
  | 2 -> Parser.EOF
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_read_rec lexbuf __ocaml_lex_state)
[
  structure_item (test/dynamic/misc/variants/lexer.ml[1,0+0]..test/dynamic/misc/variants/lexer.ml[88,4957+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[1,0+4]..test/dynamic/misc/variants/lexer.ml[1,0+22])
          Tpat_var "__ocaml_lex_tables/272"
        expression (test/dynamic/misc/variants/lexer.ml[1,0+25]..test/dynamic/misc/variants/lexer.ml[88,4957+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (test/dynamic/misc/variants/lexer.ml[3,47+3]..test/dynamic/misc/variants/lexer.ml[3,47+37])
                    Texp_constant Const_string("\000\000\253\255\254\255\255\255",(test/dynamic/misc/variants/lexer.ml[3,47+4]..test/dynamic/misc/variants/lexer.ml[3,47+36]),None)
                "Lexing.lex_backtrk"
                  expression (test/dynamic/misc/variants/lexer.ml[5,109+3]..test/dynamic/misc/variants/lexer.ml[5,109+37])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255",(test/dynamic/misc/variants/lexer.ml[5,109+4]..test/dynamic/misc/variants/lexer.ml[5,109+36]),None)
                "Lexing.lex_default"
                  expression (test/dynamic/misc/variants/lexer.ml[7,171+3]..test/dynamic/misc/variants/lexer.ml[7,171+37])
                    Texp_constant Const_string("\002\000\000\000\000\000\000\000",(test/dynamic/misc/variants/lexer.ml[7,171+4]..test/dynamic/misc/variants/lexer.ml[7,171+36]),None)
                "Lexing.lex_trans"
                  expression (test/dynamic/misc/variants/lexer.ml[9,231+3]..test/dynamic/misc/variants/lexer.ml[41,2471+13])
                    Texp_constant Const_stringtest/dynamic/misc/variants/lexer.ml[9,231+4]..test/dynamic/misc/variants/lexer.ml[41,2471+12]),None)
                "Lexing.lex_check"
                  expression (test/dynamic/misc/variants/lexer.ml[43,2507+3]..test/dynamic/misc/variants/lexer.ml[75,4747+13])
                    Texp_constant Const_stringtest/dynamic/misc/variants/lexer.ml[43,2507+4]..test/dynamic/misc/variants/lexer.ml[75,4747+12]),None)
                "Lexing.lex_base_code"
                  expression (test/dynamic/misc/variants/lexer.ml[77,4787+3]..test/dynamic/misc/variants/lexer.ml[77,4787+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[77,4787+4]..test/dynamic/misc/variants/lexer.ml[77,4787+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (test/dynamic/misc/variants/lexer.ml[79,4822+3]..test/dynamic/misc/variants/lexer.ml[79,4822+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[79,4822+4]..test/dynamic/misc/variants/lexer.ml[79,4822+4]),None)
                "Lexing.lex_default_code"
                  expression (test/dynamic/misc/variants/lexer.ml[81,4857+3]..test/dynamic/misc/variants/lexer.ml[81,4857+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[81,4857+4]..test/dynamic/misc/variants/lexer.ml[81,4857+4]),None)
                "Lexing.lex_trans_code"
                  expression (test/dynamic/misc/variants/lexer.ml[83,4890+3]..test/dynamic/misc/variants/lexer.ml[83,4890+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[83,4890+4]..test/dynamic/misc/variants/lexer.ml[83,4890+4]),None)
                "Lexing.lex_check_code"
                  expression (test/dynamic/misc/variants/lexer.ml[85,4923+3]..test/dynamic/misc/variants/lexer.ml[85,4923+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[85,4923+4]..test/dynamic/misc/variants/lexer.ml[85,4923+4]),None)
                "Lexing.lex_code"
                  expression (test/dynamic/misc/variants/lexer.ml[87,4950+3]..test/dynamic/misc/variants/lexer.ml[87,4950+5])
                    Texp_constant Const_string("",(test/dynamic/misc/variants/lexer.ml[87,4950+4]..test/dynamic/misc/variants/lexer.ml[87,4950+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (test/dynamic/misc/variants/lexer.ml[90,4960+0]..test/dynamic/misc/variants/lexer.ml[110,5601+51])
    Tstr_value Rec
    [
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[90,4960+8]..test/dynamic/misc/variants/lexer.ml[90,4960+12])
          Tpat_var "read/297"
        expression (test/dynamic/misc/variants/lexer.ml[90,4960+13]..test/dynamic/misc/variants/lexer.ml[91,4982+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/misc/variants/lexer.ml[90,4960+13]..test/dynamic/misc/variants/lexer.ml[90,4960+19])
                Tpat_var "lexbuf/299"
              expression (test/dynamic/misc/variants/lexer.ml[91,4982+3]..test/dynamic/misc/variants/lexer.ml[91,4982+32])
                Texp_apply
                expression (test/dynamic/misc/variants/lexer.ml[91,4982+3]..test/dynamic/misc/variants/lexer.ml[91,4982+23])
                  Texp_ident "__ocaml_lex_read_rec/298"
                [
                  <arg>
                    Nolabel
                    expression (test/dynamic/misc/variants/lexer.ml[91,4982+24]..test/dynamic/misc/variants/lexer.ml[91,4982+30])
                      Texp_ident "lexbuf/299"
                  <arg>
                    Nolabel
                    expression (test/dynamic/misc/variants/lexer.ml[91,4982+31]..test/dynamic/misc/variants/lexer.ml[91,4982+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (test/dynamic/misc/variants/lexer.ml[92,5015+4]..test/dynamic/misc/variants/lexer.ml[92,5015+24])
          Tpat_var "__ocaml_lex_read_rec/298"
        expression (test/dynamic/misc/variants/lexer.ml[92,5015+25]..test/dynamic/misc/variants/lexer.ml[110,5601+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/misc/variants/lexer.ml[92,5015+25]..test/dynamic/misc/variants/lexer.ml[92,5015+31])
                Tpat_var "lexbuf/300"
              expression (test/dynamic/misc/variants/lexer.ml[92,5015+32]..test/dynamic/misc/variants/lexer.ml[110,5601+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (test/dynamic/misc/variants/lexer.ml[92,5015+32]..test/dynamic/misc/variants/lexer.ml[92,5015+49])
                      Tpat_var "__ocaml_lex_state/301"
                    expression (test/dynamic/misc/variants/lexer.ml[93,5067+2]..test/dynamic/misc/variants/lexer.ml[110,5601+51])
                      Texp_match
                      expression (test/dynamic/misc/variants/lexer.ml[93,5067+8]..test/dynamic/misc/variants/lexer.ml[93,5067+65])
                        Texp_apply
                        expression (test/dynamic/misc/variants/lexer.ml[93,5067+8]..test/dynamic/misc/variants/lexer.ml[93,5067+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (test/dynamic/misc/variants/lexer.ml[93,5067+22]..test/dynamic/misc/variants/lexer.ml[93,5067+40])
                              Texp_ident "__ocaml_lex_tables/272"
                          <arg>
                            Nolabel
                            expression (test/dynamic/misc/variants/lexer.ml[93,5067+41]..test/dynamic/misc/variants/lexer.ml[93,5067+58])
                              Texp_ident "__ocaml_lex_state/301"
                          <arg>
                            Nolabel
                            expression (test/dynamic/misc/variants/lexer.ml[93,5067+59]..test/dynamic/misc/variants/lexer.ml[93,5067+65])
                              Texp_ident "lexbuf/300"
                        ]
                      [
                        <case>
                          pattern (test/dynamic/misc/variants/lexer.ml[94,5138+8]..test/dynamic/misc/variants/lexer.ml[94,5138+9])
                            Tpat_value
                            pattern (test/dynamic/misc/variants/lexer.ml[94,5138+8]..test/dynamic/misc/variants/lexer.ml[94,5138+9])
                              Tpat_constant Const_int 0
                          expression (test/dynamic/misc/variants/lexer.mll[3,5194+8]..test/dynamic/misc/variants/lexer.mll[3,5194+20])
                            Texp_construct "Parser.T"
                            []
                        <case>
                          pattern (test/dynamic/misc/variants/lexer.ml[99,5259+4]..test/dynamic/misc/variants/lexer.ml[99,5259+5])
                            Tpat_value
                            pattern (test/dynamic/misc/variants/lexer.ml[99,5259+4]..test/dynamic/misc/variants/lexer.ml[99,5259+5])
                              Tpat_constant Const_int 1
                          expression (test/dynamic/misc/variants/lexer.mll[4,5311+8]..test/dynamic/misc/variants/lexer.mll[4,5311+65])
                            Texp_apply
                            expression (test/dynamic/misc/variants/lexer.mll[4,5311+10]..test/dynamic/misc/variants/lexer.mll[4,5311+18])
                              Texp_ident "Stdlib!.failwith"
                            [
                              <arg>
                                Nolabel
                                expression (test/dynamic/misc/variants/lexer.mll[4,5311+19]..test/dynamic/misc/variants/lexer.mll[4,5311+63])
                                  Texp_apply
                                  expression (test/dynamic/misc/variants/lexer.mll[4,5311+40]..test/dynamic/misc/variants/lexer.mll[4,5311+41])
                                    Texp_ident "Stdlib!.^"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/misc/variants/lexer.mll[4,5311+20]..test/dynamic/misc/variants/lexer.mll[4,5311+39])
                                        Texp_constant Const_string("Unexpected char: ",(test/dynamic/misc/variants/lexer.mll[4,5311+21]..test/dynamic/misc/variants/lexer.mll[4,5311+38]),None)
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/misc/variants/lexer.mll[4,5311+42]..test/dynamic/misc/variants/lexer.mll[4,5311+62])
                                        Texp_apply
                                        expression (test/dynamic/misc/variants/lexer.mll[4,5311+42]..test/dynamic/misc/variants/lexer.mll[4,5311+55])
                                          Texp_ident "Stdlib!.Lexing.lexeme"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (test/dynamic/misc/variants/lexer.mll[4,5311+56]..test/dynamic/misc/variants/lexer.mll[4,5311+62])
                                              Texp_ident "lexbuf/300"
                                        ]
                                  ]
                            ]
                        <case>
                          pattern (test/dynamic/misc/variants/lexer.ml[104,5422+4]..test/dynamic/misc/variants/lexer.ml[104,5422+5])
                            Tpat_value
                            pattern (test/dynamic/misc/variants/lexer.ml[104,5422+4]..test/dynamic/misc/variants/lexer.ml[104,5422+5])
                              Tpat_constant Const_int 2
                          expression (test/dynamic/misc/variants/lexer.mll[5,5474+8]..test/dynamic/misc/variants/lexer.mll[5,5474+22])
                            Texp_construct "Parser.EOF"
                            []
                        <case>
                          pattern (test/dynamic/misc/variants/lexer.ml[109,5542+4]..test/dynamic/misc/variants/lexer.ml[109,5542+21])
                            Tpat_value
                            pattern (test/dynamic/misc/variants/lexer.ml[109,5542+4]..test/dynamic/misc/variants/lexer.ml[109,5542+21])
                              Tpat_var "__ocaml_lex_state/326"
                          expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..test/dynamic/misc/variants/lexer.ml[110,5601+51])
                            Texp_sequence
                            expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..test/dynamic/misc/variants/lexer.ml[109,5542+57])
                              Texp_apply
                              expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..test/dynamic/misc/variants/lexer.ml[109,5542+50])
                                Texp_field
                                expression (test/dynamic/misc/variants/lexer.ml[109,5542+25]..test/dynamic/misc/variants/lexer.ml[109,5542+31])
                                  Texp_ident "lexbuf/300"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/misc/variants/lexer.ml[109,5542+51]..test/dynamic/misc/variants/lexer.ml[109,5542+57])
                                    Texp_ident "lexbuf/300"
                              ]
                            expression (test/dynamic/misc/variants/lexer.ml[110,5601+6]..test/dynamic/misc/variants/lexer.ml[110,5601+51])
                              Texp_apply
                              expression (test/dynamic/misc/variants/lexer.ml[110,5601+6]..test/dynamic/misc/variants/lexer.ml[110,5601+26])
                                Texp_ident "__ocaml_lex_read_rec/298"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/misc/variants/lexer.ml[110,5601+27]..test/dynamic/misc/variants/lexer.ml[110,5601+33])
                                    Texp_ident "lexbuf/300"
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/misc/variants/lexer.ml[110,5601+34]..test/dynamic/misc/variants/lexer.ml[110,5601+51])
                                    Texp_ident "__ocaml_lex_state/326"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "__ocaml_lex_read_rec"[value] -> <Dune__exe__Lexer.2>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.0>;
 "read"[value] -> <Dune__exe__Lexer.1>;
 }

(seq
  (let
    (__ocaml_lex_tables/272 =
       [0:
        "\000\000\253\255\254\255\255\255" "\255\255\255\255\255\255\255\255"
        "\002\000\000\000\000\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000"
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/272))
  (letrec
    (read/297
       (function lexbuf/299 : int
         (apply __ocaml_lex_read_rec/298 lexbuf/299 0))
      __ocaml_lex_read_rec/298
        (function lexbuf/300 __ocaml_lex_state/301[int] : int
          (let
            (__ocaml_lex_state/326 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/301 lexbuf/300))
            (catch
              (if (isout 2 __ocaml_lex_state/326) (exit 1)
                (switch* __ocaml_lex_state/326
                 case int 0: 0
                 case int 1:
                  (apply (field_imm 1 (global Stdlib!))
                    (apply (field_imm 27 (global Stdlib!))
                      "Unexpected char: "
                      (apply (field_imm 7 (global Stdlib__Lexing!))
                        lexbuf/300)))
                 case int 2: 1))
             with (1)
              (seq (apply (field_imm 0 lexbuf/300) lexbuf/300)
                (apply __ocaml_lex_read_rec/298 lexbuf/300
                  __ocaml_lex_state/326))))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!) read/297)
      (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!)
        __ocaml_lex_read_rec/298)))
  0)
(seq
  (let
    (__ocaml_lex_tables/272 =
       [0:
        "\000\000\253\255\254\255\255\255" "\255\255\255\255\255\255\255\255"
        "\002\000\000\000\000\000\000\000"


        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/272))
  (letrec
    (read/297
       (function lexbuf/299 : int
         (apply __ocaml_lex_read_rec/298 lexbuf/299 0))
      __ocaml_lex_read_rec/298
        (function lexbuf/300 __ocaml_lex_state/301[int] : int
          (let
            (__ocaml_lex_state/326 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/301 lexbuf/300))
            (if (isout 2 __ocaml_lex_state/326)
              (seq (apply (field_imm 0 lexbuf/300) lexbuf/300)
                (apply __ocaml_lex_read_rec/298 lexbuf/300
                  __ocaml_lex_state/326))
              (switch* __ocaml_lex_state/326
               case int 0: 0
               case int 1:
                (apply (field_imm 1 (global Stdlib!))
                  (apply (field_imm 27 (global Stdlib!)) "Unexpected char: "
                    (apply (field_imm 7 (global Stdlib__Lexing!)) lexbuf/300)))
               case int 2: 1)))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!) read/297)
      (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!)
        __ocaml_lex_read_rec/298)))
  0)

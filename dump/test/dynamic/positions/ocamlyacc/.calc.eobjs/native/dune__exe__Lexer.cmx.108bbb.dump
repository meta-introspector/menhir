[
  structure_item (test/dynamic/positions/src/lexer.mll[3,46+2]..[3,46+13])
    Pstr_open Fresh
    module_expr (test/dynamic/positions/src/lexer.mll[3,46+7]..[3,46+13])
      Pmod_ident "Parser" (test/dynamic/positions/src/lexer.mll[3,46+7]..[3,46+13])
  structure_item (test/dynamic/positions/src/lexer.mll[5,61+2]..[5,61+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (test/dynamic/positions/src/lexer.mll[5,61+2]..[5,61+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (test/dynamic/positions/src/lexer.mll[5,61+21]..[5,61+27])
                  Ptyp_constr "string" (test/dynamic/positions/src/lexer.mll[5,61+21]..[5,61+27])
                  []
              ]
              None
  structure_item (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+0]..[105,5689+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+4]..[10,140+22])
          Ppat_var "__ocaml_lex_tables" (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+4]..[10,140+22])
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+25]..[105,5689+1])
          Pexp_record
          [
            "Lexing.lex_base" (test/dynamic/positions/ocamlyacc/lexer.ml[11,167+2]..[11,167+17])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[12,187+3]..[14,327+21])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(test/dynamic/positions/ocamlyacc/lexer.ml[12,187+4]..[14,327+20]),None)
            "Lexing.lex_backtrk" (test/dynamic/positions/ocamlyacc/lexer.ml[15,350+2]..[15,350+20])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[16,373+3]..[18,513+21])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(test/dynamic/positions/ocamlyacc/lexer.ml[16,373+4]..[18,513+20]),None)
            "Lexing.lex_default" (test/dynamic/positions/ocamlyacc/lexer.ml[19,536+2]..[19,536+20])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[20,559+3]..[22,699+21])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(test/dynamic/positions/ocamlyacc/lexer.ml[20,559+4]..[22,699+20]),None)
            "Lexing.lex_trans" (test/dynamic/positions/ocamlyacc/lexer.ml[23,722+2]..[23,722+18])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[24,743+3]..[57,3053+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\btest/dynamic/positions/ocamlyacc/lexer.ml[24,743+4]..[57,3053+52]),None)
            "Lexing.lex_check" (test/dynamic/positions/ocamlyacc/lexer.ml[58,3108+2]..[58,3108+18])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[59,3129+3]..[92,5439+53])
                Pexp_constant PConst_stringtest/dynamic/positions/ocamlyacc/lexer.ml[59,3129+4]..[92,5439+52]),None)
            "Lexing.lex_base_code" (test/dynamic/positions/ocamlyacc/lexer.ml[93,5494+2]..[93,5494+22])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+3]..[94,5519+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+4]..[94,5519+4]),None)
            "Lexing.lex_backtrk_code" (test/dynamic/positions/ocamlyacc/lexer.ml[95,5526+2]..[95,5526+25])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+3]..[96,5554+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+4]..[96,5554+4]),None)
            "Lexing.lex_default_code" (test/dynamic/positions/ocamlyacc/lexer.ml[97,5561+2]..[97,5561+25])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+3]..[98,5589+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+4]..[98,5589+4]),None)
            "Lexing.lex_trans_code" (test/dynamic/positions/ocamlyacc/lexer.ml[99,5596+2]..[99,5596+23])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+3]..[100,5622+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+4]..[100,5622+4]),None)
            "Lexing.lex_check_code" (test/dynamic/positions/ocamlyacc/lexer.ml[101,5629+2]..[101,5629+23])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+3]..[102,5655+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+4]..[102,5655+4]),None)
            "Lexing.lex_code" (test/dynamic/positions/ocamlyacc/lexer.ml[103,5662+2]..[103,5662+17])
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+3]..[104,5682+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+4]..[104,5682+4]),None)
          ]
          None
    ]
  structure_item (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+0]..[209,8759+52])
    Pstr_value Rec
    [
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+8]..[107,5692+12])
          Ppat_var "line" (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+8]..[107,5692+12])
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+13]..[108,5714+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+13]..[107,5692+19])
            Ppat_var "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+13]..[107,5692+19])
          expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+3]..[108,5714+32])
            Pexp_apply
            expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+3]..[108,5714+23])
              Pexp_ident "__ocaml_lex_line_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+3]..[108,5714+23])
            [
              <arg>
              Nolabel
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+24]..[108,5714+30])
                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+24]..[108,5714+30])
              <arg>
              Nolabel
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+31]..[108,5714+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+4]..[109,5747+24])
          Ppat_var "__ocaml_lex_line_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+4]..[109,5747+24])
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+25]..[137,6735+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+25]..[109,5747+31])
            Ppat_var "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+25]..[109,5747+31])
          expression (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+32]..[137,6735+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+32]..[109,5747+49])
              Ppat_var "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+32]..[109,5747+49])
            expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+2]..[137,6735+51])
              Pexp_match
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+8]..[110,5799+65])
                Pexp_apply
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+8]..[110,5799+21])
                  Pexp_ident "Lexing.engine" (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+8]..[110,5799+21])
                [
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+22]..[110,5799+40])
                      Pexp_ident "__ocaml_lex_tables" (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+22]..[110,5799+40])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+41]..[110,5799+58])
                      Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+41]..[110,5799+58])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+59]..[110,5799+65])
                      Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+59]..[110,5799+65])
                ]
              [
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[111,5870+8]..[111,5870+9])
                    Ppat_constant PConst_int (0,None)
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[112,5883+0]..test/dynamic/positions/src/lexer.mll[16,6136+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[14,5931+21]..[14,5931+25])
                          Ppat_var "line" (test/dynamic/positions/src/lexer.mll[14,5931+21]..[14,5931+25])
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+2]..[116,6007+81])
                          Pexp_apply
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+2]..[116,6007+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+2]..[116,6007+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+20]..[116,6007+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+20]..[116,6007+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+27]..[116,6007+54])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+27]..[116,6007+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+27]..[116,6007+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+34]..[116,6007+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+55]..[116,6007+81])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+55]..[116,6007+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+55]..[116,6007+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+62]..[116,6007+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[16,6136+4]..[16,6136+23])
                      Pexp_tuple
                      [
                        expression (test/dynamic/positions/src/lexer.mll[16,6136+6]..[16,6136+15])
                          Pexp_construct "Some" (test/dynamic/positions/src/lexer.mll[16,6136+6]..[16,6136+10])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[16,6136+11]..[16,6136+15])
                              Pexp_ident "line" (test/dynamic/positions/src/lexer.mll[16,6136+11]..[16,6136+15])
                        expression (test/dynamic/positions/src/lexer.mll[16,6136+17]..[16,6136+21])
                          Pexp_construct "true" (test/dynamic/positions/src/lexer.mll[16,6136+17]..[16,6136+21])
                          None
                      ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[121,6211+4]..[121,6211+5])
                    Ppat_constant PConst_int (1,None)
                  expression (test/dynamic/positions/src/lexer.mll[19,6264+4]..[19,6264+19])
                    Pexp_tuple
                    [
                      expression (test/dynamic/positions/src/lexer.mll[19,6264+6]..[19,6264+10])
                        Pexp_construct "None" (test/dynamic/positions/src/lexer.mll[19,6264+6]..[19,6264+10])
                        None
                      expression (test/dynamic/positions/src/lexer.mll[19,6264+12]..[19,6264+17])
                        Pexp_construct "false" (test/dynamic/positions/src/lexer.mll[19,6264+12]..[19,6264+17])
                        None
                    ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[126,6335+4]..[126,6335+5])
                    Ppat_constant PConst_int (2,None)
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[127,6344+0]..test/dynamic/positions/src/lexer.mll[23,6591+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[20,6392+15]..[20,6392+19])
                          Ppat_var "line" (test/dynamic/positions/src/lexer.mll[20,6392+15]..[20,6392+19])
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+2]..[131,6462+81])
                          Pexp_apply
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+2]..[131,6462+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+2]..[131,6462+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+20]..[131,6462+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+20]..[131,6462+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+27]..[131,6462+54])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+27]..[131,6462+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+27]..[131,6462+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+34]..[131,6462+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+55]..[131,6462+81])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+55]..[131,6462+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+55]..[131,6462+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+62]..[131,6462+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[23,6591+4]..[23,6591+33])
                      Pexp_tuple
                      [
                        expression (test/dynamic/positions/src/lexer.mll[23,6591+6]..[23,6591+24])
                          Pexp_construct "Some" (test/dynamic/positions/src/lexer.mll[23,6591+6]..[23,6591+10])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[23,6591+11]..[23,6591+24])
                              Pexp_apply
                              expression (test/dynamic/positions/src/lexer.mll[23,6591+17]..[23,6591+18])
                                Pexp_ident "^" (test/dynamic/positions/src/lexer.mll[23,6591+17]..[23,6591+18])
                              [
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[23,6591+12]..[23,6591+16])
                                    Pexp_ident "line" (test/dynamic/positions/src/lexer.mll[23,6591+12]..[23,6591+16])
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[23,6591+19]..[23,6591+23])
                                    Pexp_constant PConst_string("\n",(test/dynamic/positions/src/lexer.mll[23,6591+20]..[23,6591+22]),None)
                              ]
                        expression (test/dynamic/positions/src/lexer.mll[23,6591+26]..[23,6591+31])
                          Pexp_construct "false" (test/dynamic/positions/src/lexer.mll[23,6591+26]..[23,6591+31])
                          None
                      ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+4]..[136,6676+21])
                    Ppat_var "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+4]..[136,6676+21])
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..[137,6735+51])
                    Pexp_sequence
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..[136,6676+57])
                      Pexp_apply
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..[136,6676+50])
                        Pexp_field
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..[136,6676+31])
                          Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..[136,6676+31])
                        "Lexing.refill_buff" (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+32]..[136,6676+50])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+51]..[136,6676+57])
                            Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+51]..[136,6676+57])
                      ]
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+6]..[137,6735+51])
                      Pexp_apply
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+6]..[137,6735+26])
                        Pexp_ident "__ocaml_lex_line_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+6]..[137,6735+26])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+27]..[137,6735+33])
                            Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+27]..[137,6735+33])
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+34]..[137,6735+51])
                            Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+34]..[137,6735+51])
                      ]
              ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+4]..[139,6788+9])
          Ppat_var "token" (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+4]..[139,6788+9])
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+10]..[140,6807+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+10]..[139,6788+16])
            Ppat_var "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+10]..[139,6788+16])
          expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+3]..[140,6807+33])
            Pexp_apply
            expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+3]..[140,6807+24])
              Pexp_ident "__ocaml_lex_token_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+3]..[140,6807+24])
            [
              <arg>
              Nolabel
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+25]..[140,6807+31])
                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+25]..[140,6807+31])
              <arg>
              Nolabel
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+32]..[140,6807+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+4]..[141,6841+25])
          Ppat_var "__ocaml_lex_token_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+4]..[141,6841+25])
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+26]..[209,8759+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+26]..[141,6841+32])
            Ppat_var "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+26]..[141,6841+32])
          expression (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+33]..[209,8759+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+33]..[141,6841+50])
              Ppat_var "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+33]..[141,6841+50])
            expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+2]..[209,8759+52])
              Pexp_match
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+8]..[142,6894+65])
                Pexp_apply
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+8]..[142,6894+21])
                  Pexp_ident "Lexing.engine" (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+8]..[142,6894+21])
                [
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+22]..[142,6894+40])
                      Pexp_ident "__ocaml_lex_tables" (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+22]..[142,6894+40])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+41]..[142,6894+58])
                      Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+41]..[142,6894+58])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+59]..[142,6894+65])
                      Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+59]..[142,6894+65])
                ]
              [
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[143,6965+8]..[143,6965+9])
                    Ppat_constant PConst_int (0,None)
                  expression (test/dynamic/positions/src/lexer.mll[30,7022+4]..[30,7022+20])
                    Pexp_apply
                    expression (test/dynamic/positions/src/lexer.mll[30,7022+6]..[30,7022+11])
                      Pexp_ident "token" (test/dynamic/positions/src/lexer.mll[30,7022+6]..[30,7022+11])
                    [
                      <arg>
                      Nolabel
                        expression (test/dynamic/positions/src/lexer.mll[30,7022+12]..[30,7022+18])
                          Pexp_ident "lexbuf" (test/dynamic/positions/src/lexer.mll[30,7022+12]..[30,7022+18])
                    ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[148,7094+4]..[148,7094+5])
                    Ppat_constant PConst_int (1,None)
                  expression (test/dynamic/positions/src/lexer.mll[32,7147+4]..[32,7147+11])
                    Pexp_construct "EOL" (test/dynamic/positions/src/lexer.mll[32,7147+6]..[32,7147+9])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[153,7210+4]..[153,7210+5])
                    Ppat_constant PConst_int (2,None)
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[154,7219+0]..test/dynamic/positions/src/lexer.mll[34,7464+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[33,7267+16]..[33,7267+17])
                          Ppat_var "i" (test/dynamic/positions/src/lexer.mll[33,7267+16]..[33,7267+17])
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+2]..[158,7335+81])
                          Pexp_apply
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+2]..[158,7335+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+2]..[158,7335+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+20]..[158,7335+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+20]..[158,7335+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+27]..[158,7335+54])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+27]..[158,7335+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+27]..[158,7335+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+34]..[158,7335+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+55]..[158,7335+81])
                                Pexp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+55]..[158,7335+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+55]..[158,7335+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+62]..[158,7335+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[34,7464+4]..[34,7464+29])
                      Pexp_construct "INT" (test/dynamic/positions/src/lexer.mll[34,7464+6]..[34,7464+9])
                      Some
                        expression (test/dynamic/positions/src/lexer.mll[34,7464+10]..[34,7464+27])
                          Pexp_apply
                          expression (test/dynamic/positions/src/lexer.mll[34,7464+11]..[34,7464+24])
                            Pexp_ident "int_of_string" (test/dynamic/positions/src/lexer.mll[34,7464+11]..[34,7464+24])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/src/lexer.mll[34,7464+25]..[34,7464+26])
                                Pexp_ident "i" (test/dynamic/positions/src/lexer.mll[34,7464+25]..[34,7464+26])
                          ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[163,7545+4]..[163,7545+5])
                    Ppat_constant PConst_int (3,None)
                  expression (test/dynamic/positions/src/lexer.mll[36,7598+4]..[36,7598+12])
                    Pexp_construct "PLUS" (test/dynamic/positions/src/lexer.mll[36,7598+6]..[36,7598+10])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[168,7662+4]..[168,7662+5])
                    Ppat_constant PConst_int (4,None)
                  expression (test/dynamic/positions/src/lexer.mll[38,7715+4]..[38,7715+13])
                    Pexp_construct "MINUS" (test/dynamic/positions/src/lexer.mll[38,7715+6]..[38,7715+11])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[173,7780+4]..[173,7780+5])
                    Ppat_constant PConst_int (5,None)
                  expression (test/dynamic/positions/src/lexer.mll[40,7833+4]..[40,7833+13])
                    Pexp_construct "TIMES" (test/dynamic/positions/src/lexer.mll[40,7833+6]..[40,7833+11])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[178,7898+4]..[178,7898+5])
                    Ppat_constant PConst_int (6,None)
                  expression (test/dynamic/positions/src/lexer.mll[42,7951+4]..[42,7951+11])
                    Pexp_construct "DIV" (test/dynamic/positions/src/lexer.mll[42,7951+6]..[42,7951+9])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[183,8014+4]..[183,8014+5])
                    Ppat_constant PConst_int (7,None)
                  expression (test/dynamic/positions/src/lexer.mll[44,8067+4]..[44,8067+14])
                    Pexp_construct "LPAREN" (test/dynamic/positions/src/lexer.mll[44,8067+6]..[44,8067+12])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[188,8133+4]..[188,8133+5])
                    Ppat_constant PConst_int (8,None)
                  expression (test/dynamic/positions/src/lexer.mll[46,8186+4]..[46,8186+14])
                    Pexp_construct "RPAREN" (test/dynamic/positions/src/lexer.mll[46,8186+6]..[46,8186+12])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[193,8252+4]..[193,8252+5])
                    Ppat_constant PConst_int (9,None)
                  expression (test/dynamic/positions/src/lexer.mll[48,8305+4]..[48,8305+11])
                    Pexp_construct "DOT" (test/dynamic/positions/src/lexer.mll[48,8305+6]..[48,8305+9])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[198,8368+4]..[198,8368+6])
                    Ppat_constant PConst_int (10,None)
                  expression (test/dynamic/positions/src/lexer.mll[50,8422+4]..[50,8422+13])
                    Pexp_construct "COMMA" (test/dynamic/positions/src/lexer.mll[50,8422+6]..[50,8422+11])
                    None
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[203,8487+4]..[203,8487+6])
                    Ppat_constant PConst_int (11,None)
                  expression (test/dynamic/positions/src/lexer.mll[52,8541+4]..[52,8541+107])
                    Pexp_apply
                    expression (test/dynamic/positions/src/lexer.mll[52,8541+6]..[52,8541+11])
                      Pexp_ident "raise" (test/dynamic/positions/src/lexer.mll[52,8541+6]..[52,8541+11])
                    [
                      <arg>
                      Nolabel
                        expression (test/dynamic/positions/src/lexer.mll[52,8541+12]..[52,8541+105])
                          Pexp_construct "Error" (test/dynamic/positions/src/lexer.mll[52,8541+13]..[52,8541+18])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[52,8541+19]..[52,8541+104])
                              Pexp_apply
                              expression (test/dynamic/positions/src/lexer.mll[52,8541+20]..[52,8541+34])
                                Pexp_ident "Printf.sprintf" (test/dynamic/positions/src/lexer.mll[52,8541+20]..[52,8541+34])
                              [
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..[52,8541+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8541+36]..[52,8541+73]),None)
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[52,8541+75]..[52,8541+103])
                                    Pexp_apply
                                    expression (test/dynamic/positions/src/lexer.mll[52,8541+76]..[52,8541+95])
                                      Pexp_ident "Lexing.lexeme_start" (test/dynamic/positions/src/lexer.mll[52,8541+76]..[52,8541+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (test/dynamic/positions/src/lexer.mll[52,8541+96]..[52,8541+102])
                                          Pexp_ident "lexbuf" (test/dynamic/positions/src/lexer.mll[52,8541+96]..[52,8541+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+4]..[208,8700+21])
                    Ppat_var "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+4]..[208,8700+21])
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..[209,8759+52])
                    Pexp_sequence
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..[208,8700+57])
                      Pexp_apply
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..[208,8700+50])
                        Pexp_field
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..[208,8700+31])
                          Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..[208,8700+31])
                        "Lexing.refill_buff" (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+32]..[208,8700+50])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+51]..[208,8700+57])
                            Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+51]..[208,8700+57])
                      ]
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+6]..[209,8759+52])
                      Pexp_apply
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+6]..[209,8759+27])
                        Pexp_ident "__ocaml_lex_token_rec" (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+6]..[209,8759+27])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+28]..[209,8759+34])
                            Pexp_ident "lexbuf" (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+28]..[209,8759+34])
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+35]..[209,8759+52])
                            Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+35]..[209,8759+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255";
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 -> DOT
  | 10 -> COMMA
  | 11 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (test/dynamic/positions/src/lexer.mll[3,46+2]..test/dynamic/positions/src/lexer.mll[3,46+13])
    Tstr_open Fresh
    module_expr (test/dynamic/positions/src/lexer.mll[3,46+7]..test/dynamic/positions/src/lexer.mll[3,46+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (test/dynamic/positions/src/lexer.mll[5,61+2]..test/dynamic/positions/src/lexer.mll[5,61+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (test/dynamic/positions/src/lexer.mll[5,61+2]..test/dynamic/positions/src/lexer.mll[5,61+27])
          pext_name = "Error/275"
          pext_kind =
            Text_decl
              [
                core_type (test/dynamic/positions/src/lexer.mll[5,61+21]..test/dynamic/positions/src/lexer.mll[5,61+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+0]..test/dynamic/positions/ocamlyacc/lexer.ml[105,5689+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+4]..test/dynamic/positions/ocamlyacc/lexer.ml[10,140+22])
          Tpat_var "__ocaml_lex_tables/276"
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[10,140+25]..test/dynamic/positions/ocamlyacc/lexer.ml[105,5689+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[12,187+3]..test/dynamic/positions/ocamlyacc/lexer.ml[14,327+21])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(test/dynamic/positions/ocamlyacc/lexer.ml[12,187+4]..test/dynamic/positions/ocamlyacc/lexer.ml[14,327+20]),None)
                "Lexing.lex_backtrk"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[16,373+3]..test/dynamic/positions/ocamlyacc/lexer.ml[18,513+21])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(test/dynamic/positions/ocamlyacc/lexer.ml[16,373+4]..test/dynamic/positions/ocamlyacc/lexer.ml[18,513+20]),None)
                "Lexing.lex_default"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[20,559+3]..test/dynamic/positions/ocamlyacc/lexer.ml[22,699+21])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(test/dynamic/positions/ocamlyacc/lexer.ml[20,559+4]..test/dynamic/positions/ocamlyacc/lexer.ml[22,699+20]),None)
                "Lexing.lex_trans"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[24,743+3]..test/dynamic/positions/ocamlyacc/lexer.ml[57,3053+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\btest/dynamic/positions/ocamlyacc/lexer.ml[24,743+4]..test/dynamic/positions/ocamlyacc/lexer.ml[57,3053+52]),None)
                "Lexing.lex_check"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[59,3129+3]..test/dynamic/positions/ocamlyacc/lexer.ml[92,5439+53])
                    Texp_constant Const_stringtest/dynamic/positions/ocamlyacc/lexer.ml[59,3129+4]..test/dynamic/positions/ocamlyacc/lexer.ml[92,5439+52]),None)
                "Lexing.lex_base_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+3]..test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+4]..test/dynamic/positions/ocamlyacc/lexer.ml[94,5519+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+3]..test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+4]..test/dynamic/positions/ocamlyacc/lexer.ml[96,5554+4]),None)
                "Lexing.lex_default_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+3]..test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+4]..test/dynamic/positions/ocamlyacc/lexer.ml[98,5589+4]),None)
                "Lexing.lex_trans_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+3]..test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+4]..test/dynamic/positions/ocamlyacc/lexer.ml[100,5622+4]),None)
                "Lexing.lex_check_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+3]..test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+4]..test/dynamic/positions/ocamlyacc/lexer.ml[102,5655+4]),None)
                "Lexing.lex_code"
                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+3]..test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+5])
                    Texp_constant Const_string("",(test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+4]..test/dynamic/positions/ocamlyacc/lexer.ml[104,5682+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+0]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52])
    Tstr_value Rec
    [
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+8]..test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+12])
          Tpat_var "line/301"
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+13]..test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+13]..test/dynamic/positions/ocamlyacc/lexer.ml[107,5692+19])
                Tpat_var "lexbuf/305"
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+3]..test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+32])
                Texp_apply
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+3]..test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+23])
                  Texp_ident "__ocaml_lex_line_rec/302"
                [
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+24]..test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+30])
                      Texp_ident "lexbuf/305"
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+31]..test/dynamic/positions/ocamlyacc/lexer.ml[108,5714+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+4]..test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+24])
          Tpat_var "__ocaml_lex_line_rec/302"
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+25]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+25]..test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+31])
                Tpat_var "lexbuf/306"
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+32]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+32]..test/dynamic/positions/ocamlyacc/lexer.ml[109,5747+49])
                      Tpat_var "__ocaml_lex_state/307"
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+2]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51])
                      Texp_match
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+8]..test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+65])
                        Texp_apply
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+8]..test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+22]..test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+41]..test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+58])
                              Texp_ident "__ocaml_lex_state/307"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+59]..test/dynamic/positions/ocamlyacc/lexer.ml[110,5799+65])
                              Texp_ident "lexbuf/306"
                        ]
                      [
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[111,5870+8]..test/dynamic/positions/ocamlyacc/lexer.ml[111,5870+9])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[111,5870+8]..test/dynamic/positions/ocamlyacc/lexer.ml[111,5870+9])
                              Tpat_constant Const_int 0
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[112,5883+0]..test/dynamic/positions/src/lexer.mll[16,6136+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[14,5931+21]..test/dynamic/positions/src/lexer.mll[14,5931+25])
                                  Tpat_var "line/333"
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+2]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+2]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+20]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+27]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+54])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+27]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+55]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+81])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+55]..test/dynamic/positions/ocamlyacc/lexer.ml[116,6007+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[16,6136+4]..test/dynamic/positions/src/lexer.mll[16,6136+23])
                              Texp_tuple
                              [
                                expression (test/dynamic/positions/src/lexer.mll[16,6136+6]..test/dynamic/positions/src/lexer.mll[16,6136+15])
                                  Texp_construct "Some"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[16,6136+11]..test/dynamic/positions/src/lexer.mll[16,6136+15])
                                      Texp_ident "line/333"
                                  ]
                                expression (test/dynamic/positions/src/lexer.mll[16,6136+17]..test/dynamic/positions/src/lexer.mll[16,6136+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[121,6211+4]..test/dynamic/positions/ocamlyacc/lexer.ml[121,6211+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[121,6211+4]..test/dynamic/positions/ocamlyacc/lexer.ml[121,6211+5])
                              Tpat_constant Const_int 1
                          expression (test/dynamic/positions/src/lexer.mll[19,6264+4]..test/dynamic/positions/src/lexer.mll[19,6264+19])
                            Texp_tuple
                            [
                              expression (test/dynamic/positions/src/lexer.mll[19,6264+6]..test/dynamic/positions/src/lexer.mll[19,6264+10])
                                Texp_construct "None"
                                []
                              expression (test/dynamic/positions/src/lexer.mll[19,6264+12]..test/dynamic/positions/src/lexer.mll[19,6264+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[126,6335+4]..test/dynamic/positions/ocamlyacc/lexer.ml[126,6335+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[126,6335+4]..test/dynamic/positions/ocamlyacc/lexer.ml[126,6335+5])
                              Tpat_constant Const_int 2
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[127,6344+0]..test/dynamic/positions/src/lexer.mll[23,6591+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[20,6392+15]..test/dynamic/positions/src/lexer.mll[20,6392+19])
                                  Tpat_var "line/334"
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+2]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+2]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+20]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+26])
                                        Texp_ident "lexbuf/306"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+27]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+54])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+27]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+33])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+55]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+81])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+55]..test/dynamic/positions/ocamlyacc/lexer.ml[131,6462+61])
                                          Texp_ident "lexbuf/306"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[23,6591+4]..test/dynamic/positions/src/lexer.mll[23,6591+33])
                              Texp_tuple
                              [
                                expression (test/dynamic/positions/src/lexer.mll[23,6591+6]..test/dynamic/positions/src/lexer.mll[23,6591+24])
                                  Texp_construct "Some"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[23,6591+11]..test/dynamic/positions/src/lexer.mll[23,6591+24])
                                      Texp_apply
                                      expression (test/dynamic/positions/src/lexer.mll[23,6591+17]..test/dynamic/positions/src/lexer.mll[23,6591+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[23,6591+12]..test/dynamic/positions/src/lexer.mll[23,6591+16])
                                            Texp_ident "line/334"
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[23,6591+19]..test/dynamic/positions/src/lexer.mll[23,6591+23])
                                            Texp_constant Const_string("\n",(test/dynamic/positions/src/lexer.mll[23,6591+20]..test/dynamic/positions/src/lexer.mll[23,6591+22]),None)
                                      ]
                                  ]
                                expression (test/dynamic/positions/src/lexer.mll[23,6591+26]..test/dynamic/positions/src/lexer.mll[23,6591+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+4]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+21])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+4]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+21])
                              Tpat_var "__ocaml_lex_state/332"
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51])
                            Texp_sequence
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+57])
                              Texp_apply
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+50])
                                Texp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+25]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+31])
                                  Texp_ident "lexbuf/306"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+51]..test/dynamic/positions/ocamlyacc/lexer.ml[136,6676+57])
                                    Texp_ident "lexbuf/306"
                              ]
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+6]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51])
                              Texp_apply
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+6]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+26])
                                Texp_ident "__ocaml_lex_line_rec/302"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+27]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+33])
                                    Texp_ident "lexbuf/306"
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+34]..test/dynamic/positions/ocamlyacc/lexer.ml[137,6735+51])
                                    Texp_ident "__ocaml_lex_state/332"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+4]..test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+9])
          Tpat_var "token/303"
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+10]..test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+10]..test/dynamic/positions/ocamlyacc/lexer.ml[139,6788+16])
                Tpat_var "lexbuf/335"
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+3]..test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+33])
                Texp_apply
                expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+3]..test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+24])
                  Texp_ident "__ocaml_lex_token_rec/304"
                [
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+25]..test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+31])
                      Texp_ident "lexbuf/335"
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+32]..test/dynamic/positions/ocamlyacc/lexer.ml[140,6807+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+4]..test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+25])
          Tpat_var "__ocaml_lex_token_rec/304"
        expression (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+26]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+26]..test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+32])
                Tpat_var "lexbuf/336"
              expression (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+33]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+33]..test/dynamic/positions/ocamlyacc/lexer.ml[141,6841+50])
                      Tpat_var "__ocaml_lex_state/337"
                    expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+2]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52])
                      Texp_match
                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+8]..test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+65])
                        Texp_apply
                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+8]..test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+22]..test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+40])
                              Texp_ident "__ocaml_lex_tables/276"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+41]..test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+58])
                              Texp_ident "__ocaml_lex_state/337"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+59]..test/dynamic/positions/ocamlyacc/lexer.ml[142,6894+65])
                              Texp_ident "lexbuf/336"
                        ]
                      [
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[143,6965+8]..test/dynamic/positions/ocamlyacc/lexer.ml[143,6965+9])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[143,6965+8]..test/dynamic/positions/ocamlyacc/lexer.ml[143,6965+9])
                              Tpat_constant Const_int 0
                          expression (test/dynamic/positions/src/lexer.mll[30,7022+4]..test/dynamic/positions/src/lexer.mll[30,7022+20])
                            Texp_apply
                            expression (test/dynamic/positions/src/lexer.mll[30,7022+6]..test/dynamic/positions/src/lexer.mll[30,7022+11])
                              Texp_ident "token/303"
                            [
                              <arg>
                                Nolabel
                                expression (test/dynamic/positions/src/lexer.mll[30,7022+12]..test/dynamic/positions/src/lexer.mll[30,7022+18])
                                  Texp_ident "lexbuf/336"
                            ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[148,7094+4]..test/dynamic/positions/ocamlyacc/lexer.ml[148,7094+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[148,7094+4]..test/dynamic/positions/ocamlyacc/lexer.ml[148,7094+5])
                              Tpat_constant Const_int 1
                          expression (test/dynamic/positions/src/lexer.mll[32,7147+4]..test/dynamic/positions/src/lexer.mll[32,7147+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[153,7210+4]..test/dynamic/positions/ocamlyacc/lexer.ml[153,7210+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[153,7210+4]..test/dynamic/positions/ocamlyacc/lexer.ml[153,7210+5])
                              Tpat_constant Const_int 2
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[154,7219+0]..test/dynamic/positions/src/lexer.mll[34,7464+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[33,7267+16]..test/dynamic/positions/src/lexer.mll[33,7267+17])
                                  Tpat_var "i/339"
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+2]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+2]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+20]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+26])
                                        Texp_ident "lexbuf/336"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+27]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+54])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+27]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+33])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+55]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+81])
                                        Texp_field
                                        expression (test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+55]..test/dynamic/positions/ocamlyacc/lexer.ml[158,7335+61])
                                          Texp_ident "lexbuf/336"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[34,7464+4]..test/dynamic/positions/src/lexer.mll[34,7464+29])
                              Texp_construct "INT"
                              [
                                expression (test/dynamic/positions/src/lexer.mll[34,7464+10]..test/dynamic/positions/src/lexer.mll[34,7464+27])
                                  Texp_apply
                                  expression (test/dynamic/positions/src/lexer.mll[34,7464+11]..test/dynamic/positions/src/lexer.mll[34,7464+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/src/lexer.mll[34,7464+25]..test/dynamic/positions/src/lexer.mll[34,7464+26])
                                        Texp_ident "i/339"
                                  ]
                              ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[163,7545+4]..test/dynamic/positions/ocamlyacc/lexer.ml[163,7545+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[163,7545+4]..test/dynamic/positions/ocamlyacc/lexer.ml[163,7545+5])
                              Tpat_constant Const_int 3
                          expression (test/dynamic/positions/src/lexer.mll[36,7598+4]..test/dynamic/positions/src/lexer.mll[36,7598+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[168,7662+4]..test/dynamic/positions/ocamlyacc/lexer.ml[168,7662+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[168,7662+4]..test/dynamic/positions/ocamlyacc/lexer.ml[168,7662+5])
                              Tpat_constant Const_int 4
                          expression (test/dynamic/positions/src/lexer.mll[38,7715+4]..test/dynamic/positions/src/lexer.mll[38,7715+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[173,7780+4]..test/dynamic/positions/ocamlyacc/lexer.ml[173,7780+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[173,7780+4]..test/dynamic/positions/ocamlyacc/lexer.ml[173,7780+5])
                              Tpat_constant Const_int 5
                          expression (test/dynamic/positions/src/lexer.mll[40,7833+4]..test/dynamic/positions/src/lexer.mll[40,7833+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[178,7898+4]..test/dynamic/positions/ocamlyacc/lexer.ml[178,7898+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[178,7898+4]..test/dynamic/positions/ocamlyacc/lexer.ml[178,7898+5])
                              Tpat_constant Const_int 6
                          expression (test/dynamic/positions/src/lexer.mll[42,7951+4]..test/dynamic/positions/src/lexer.mll[42,7951+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[183,8014+4]..test/dynamic/positions/ocamlyacc/lexer.ml[183,8014+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[183,8014+4]..test/dynamic/positions/ocamlyacc/lexer.ml[183,8014+5])
                              Tpat_constant Const_int 7
                          expression (test/dynamic/positions/src/lexer.mll[44,8067+4]..test/dynamic/positions/src/lexer.mll[44,8067+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[188,8133+4]..test/dynamic/positions/ocamlyacc/lexer.ml[188,8133+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[188,8133+4]..test/dynamic/positions/ocamlyacc/lexer.ml[188,8133+5])
                              Tpat_constant Const_int 8
                          expression (test/dynamic/positions/src/lexer.mll[46,8186+4]..test/dynamic/positions/src/lexer.mll[46,8186+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[193,8252+4]..test/dynamic/positions/ocamlyacc/lexer.ml[193,8252+5])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[193,8252+4]..test/dynamic/positions/ocamlyacc/lexer.ml[193,8252+5])
                              Tpat_constant Const_int 9
                          expression (test/dynamic/positions/src/lexer.mll[48,8305+4]..test/dynamic/positions/src/lexer.mll[48,8305+11])
                            Texp_construct "DOT"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[198,8368+4]..test/dynamic/positions/ocamlyacc/lexer.ml[198,8368+6])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[198,8368+4]..test/dynamic/positions/ocamlyacc/lexer.ml[198,8368+6])
                              Tpat_constant Const_int 10
                          expression (test/dynamic/positions/src/lexer.mll[50,8422+4]..test/dynamic/positions/src/lexer.mll[50,8422+13])
                            Texp_construct "COMMA"
                            []
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[203,8487+4]..test/dynamic/positions/ocamlyacc/lexer.ml[203,8487+6])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[203,8487+4]..test/dynamic/positions/ocamlyacc/lexer.ml[203,8487+6])
                              Tpat_constant Const_int 11
                          expression (test/dynamic/positions/src/lexer.mll[52,8541+4]..test/dynamic/positions/src/lexer.mll[52,8541+107])
                            Texp_apply
                            expression (test/dynamic/positions/src/lexer.mll[52,8541+6]..test/dynamic/positions/src/lexer.mll[52,8541+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (test/dynamic/positions/src/lexer.mll[52,8541+12]..test/dynamic/positions/src/lexer.mll[52,8541+105])
                                  Texp_construct "Error"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[52,8541+19]..test/dynamic/positions/src/lexer.mll[52,8541+104])
                                      Texp_apply
                                      expression (test/dynamic/positions/src/lexer.mll[52,8541+20]..test/dynamic/positions/src/lexer.mll[52,8541+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                    Texp_constant Const_string("At offset ",(test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost,None)
                                                  expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost,None)
                                                          expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8541+35]..test/dynamic/positions/src/lexer.mll[52,8541+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[52,8541+75]..test/dynamic/positions/src/lexer.mll[52,8541+103])
                                            Texp_apply
                                            expression (test/dynamic/positions/src/lexer.mll[52,8541+76]..test/dynamic/positions/src/lexer.mll[52,8541+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (test/dynamic/positions/src/lexer.mll[52,8541+96]..test/dynamic/positions/src/lexer.mll[52,8541+102])
                                                  Texp_ident "lexbuf/336"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+4]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+21])
                            Tpat_value
                            pattern (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+4]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+21])
                              Tpat_var "__ocaml_lex_state/338"
                          expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52])
                            Texp_sequence
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+57])
                              Texp_apply
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+50])
                                Texp_field
                                expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+25]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+31])
                                  Texp_ident "lexbuf/336"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+51]..test/dynamic/positions/ocamlyacc/lexer.ml[208,8700+57])
                                    Texp_ident "lexbuf/336"
                              ]
                            expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+6]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52])
                              Texp_apply
                              expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+6]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+27])
                                Texp_ident "__ocaml_lex_token_rec/304"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+28]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+34])
                                    Texp_ident "lexbuf/336"
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+35]..test/dynamic/positions/ocamlyacc/lexer.ml[209,8759+52])
                                    Texp_ident "__ocaml_lex_state/338"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\003\000\255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255"
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (catch
              (if (isout 2 __ocaml_lex_state/332) (exit 1)
                (switch* __ocaml_lex_state/332
                 case int 0:
                  (let
                    (line/333 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int) (makeblock 0 line/333) 1))
                 case int 1: [0: 0 0]
                 case int 2:
                  (let
                    (line/334 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/306 (field_int 4 lexbuf/306)
                         (field_int 5 lexbuf/306)))
                    (makeblock 0 (*,int)
                      (makeblock 0
                        (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                      0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332)))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (catch
              (if (isout 11 __ocaml_lex_state/338) (exit 2)
                (switch* __ocaml_lex_state/338
                 case int 0: (apply token/303 lexbuf/336)
                 case int 1: 6
                 case int 2:
                  (let
                    (i/339 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/336 (field_int 4 lexbuf/336)
                         (field_int 5 lexbuf/336)))
                    (makeblock 0 (int) (caml_int_of_string i/339)))
                 case int 3: 0
                 case int 4: 1
                 case int 5: 2
                 case int 6: 3
                 case int 7: 4
                 case int 8: 5
                 case int 9: 7
                 case int 10: 8
                 case int 11:
                  (raise
                    (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0:
                         [11:
                          "At offset "
                          [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                         "At offset %d: unexpected character.\n"]
                        (apply (field_imm 9 (global Stdlib__Lexing!))
                          lexbuf/336))))))
             with (2)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)
(seq
  (let
    (Error/275 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/275))
  (let
    (__ocaml_lex_tables/276 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/276))
  (letrec
    (line/301
       (function lexbuf/305 (apply __ocaml_lex_line_rec/302 lexbuf/305 0))
      __ocaml_lex_line_rec/302
        (function lexbuf/306 __ocaml_lex_state/307[int]
          (let
            (__ocaml_lex_state/332 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/307 lexbuf/306))
            (if (isout 2 __ocaml_lex_state/332)
              (seq (apply (field_imm 0 lexbuf/306) lexbuf/306)
                (apply __ocaml_lex_line_rec/302 lexbuf/306
                  __ocaml_lex_state/332))
              (switch* __ocaml_lex_state/332
               case int 0:
                (let
                  (line/333 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int) (makeblock 0 line/333) 1))
               case int 1: [0: 0 0]
               case int 2:
                (let
                  (line/334 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/306 (field_int 4 lexbuf/306)
                       (field_int 5 lexbuf/306)))
                  (makeblock 0 (*,int)
                    (makeblock 0
                      (apply (field_imm 27 (global Stdlib!)) line/334 "\n"))
                    0))))))
      token/303
        (function lexbuf/335 (apply __ocaml_lex_token_rec/304 lexbuf/335 5))
      __ocaml_lex_token_rec/304
        (function lexbuf/336 __ocaml_lex_state/337[int]
          (let
            (__ocaml_lex_state/338 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/337 lexbuf/336))
            (if (isout 11 __ocaml_lex_state/338)
              (seq (apply (field_imm 0 lexbuf/336) lexbuf/336)
                (apply __ocaml_lex_token_rec/304 lexbuf/336
                  __ocaml_lex_state/338))
              (switch* __ocaml_lex_state/338
               case int 0: (apply token/303 lexbuf/336)
               case int 1: 6
               case int 2:
                (let
                  (i/339 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/336 (field_int 4 lexbuf/336)
                       (field_int 5 lexbuf/336)))
                  (makeblock 0 (int) (caml_int_of_string i/339)))
               case int 3: 0
               case int 4: 1
               case int 5: 2
               case int 6: 3
               case int 7: 4
               case int 8: 5
               case int 9: 7
               case int 10: 8
               case int 11:
                (raise
                  (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [11:
                        "At offset "
                        [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                       "At offset %d: unexpected character.\n"]
                      (apply (field_imm 9 (global Stdlib__Lexing!))
                        lexbuf/336)))))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/301)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/302)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/303)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/304)))
  0)

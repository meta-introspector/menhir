[
  structure_item (test/dynamic/positions/src/lexer.mll[3,46+2]..[3,46+13])
    Pstr_open Fresh
    module_expr (test/dynamic/positions/src/lexer.mll[3,46+7]..[3,46+13])
      Pmod_ident "Parser" (test/dynamic/positions/src/lexer.mll[3,46+7]..[3,46+13])
  structure_item (test/dynamic/positions/src/lexer.mll[5,61+2]..[5,61+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (test/dynamic/positions/src/lexer.mll[5,61+2]..[5,61+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (test/dynamic/positions/src/lexer.mll[5,61+21]..[5,61+27])
                  Ptyp_constr "string" (test/dynamic/positions/src/lexer.mll[5,61+21]..[5,61+27])
                  []
              ]
              None
  structure_item (test/dynamic/positions/menhir_code/lexer.ml[10,142+0]..[105,5691+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[10,142+4]..[10,142+22])
          Ppat_var "__ocaml_lex_tables" (test/dynamic/positions/menhir_code/lexer.ml[10,142+4]..[10,142+22])
        expression (test/dynamic/positions/menhir_code/lexer.ml[10,142+25]..[105,5691+1])
          Pexp_record
          [
            "Lexing.lex_base" (test/dynamic/positions/menhir_code/lexer.ml[11,169+2]..[11,169+17])
              expression (test/dynamic/positions/menhir_code/lexer.ml[12,189+3]..[14,329+21])
                Pexp_constant PConst_string("\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(test/dynamic/positions/menhir_code/lexer.ml[12,189+4]..[14,329+20]),None)
            "Lexing.lex_backtrk" (test/dynamic/positions/menhir_code/lexer.ml[15,352+2]..[15,352+20])
              expression (test/dynamic/positions/menhir_code/lexer.ml[16,375+3]..[18,515+21])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(test/dynamic/positions/menhir_code/lexer.ml[16,375+4]..[18,515+20]),None)
            "Lexing.lex_default" (test/dynamic/positions/menhir_code/lexer.ml[19,538+2]..[19,538+20])
              expression (test/dynamic/positions/menhir_code/lexer.ml[20,561+3]..[22,701+21])
                Pexp_constant PConst_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(test/dynamic/positions/menhir_code/lexer.ml[20,561+4]..[22,701+20]),None)
            "Lexing.lex_trans" (test/dynamic/positions/menhir_code/lexer.ml[23,724+2]..[23,724+18])
              expression (test/dynamic/positions/menhir_code/lexer.ml[24,745+3]..[57,3055+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\btest/dynamic/positions/menhir_code/lexer.ml[24,745+4]..[57,3055+52]),None)
            "Lexing.lex_check" (test/dynamic/positions/menhir_code/lexer.ml[58,3110+2]..[58,3110+18])
              expression (test/dynamic/positions/menhir_code/lexer.ml[59,3131+3]..[92,5441+53])
                Pexp_constant PConst_stringtest/dynamic/positions/menhir_code/lexer.ml[59,3131+4]..[92,5441+52]),None)
            "Lexing.lex_base_code" (test/dynamic/positions/menhir_code/lexer.ml[93,5496+2]..[93,5496+22])
              expression (test/dynamic/positions/menhir_code/lexer.ml[94,5521+3]..[94,5521+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[94,5521+4]..[94,5521+4]),None)
            "Lexing.lex_backtrk_code" (test/dynamic/positions/menhir_code/lexer.ml[95,5528+2]..[95,5528+25])
              expression (test/dynamic/positions/menhir_code/lexer.ml[96,5556+3]..[96,5556+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[96,5556+4]..[96,5556+4]),None)
            "Lexing.lex_default_code" (test/dynamic/positions/menhir_code/lexer.ml[97,5563+2]..[97,5563+25])
              expression (test/dynamic/positions/menhir_code/lexer.ml[98,5591+3]..[98,5591+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[98,5591+4]..[98,5591+4]),None)
            "Lexing.lex_trans_code" (test/dynamic/positions/menhir_code/lexer.ml[99,5598+2]..[99,5598+23])
              expression (test/dynamic/positions/menhir_code/lexer.ml[100,5624+3]..[100,5624+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[100,5624+4]..[100,5624+4]),None)
            "Lexing.lex_check_code" (test/dynamic/positions/menhir_code/lexer.ml[101,5631+2]..[101,5631+23])
              expression (test/dynamic/positions/menhir_code/lexer.ml[102,5657+3]..[102,5657+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[102,5657+4]..[102,5657+4]),None)
            "Lexing.lex_code" (test/dynamic/positions/menhir_code/lexer.ml[103,5664+2]..[103,5664+17])
              expression (test/dynamic/positions/menhir_code/lexer.ml[104,5684+3]..[104,5684+5])
                Pexp_constant PConst_string("",(test/dynamic/positions/menhir_code/lexer.ml[104,5684+4]..[104,5684+4]),None)
          ]
          None
    ]
  structure_item (test/dynamic/positions/menhir_code/lexer.ml[107,5694+0]..[209,8797+52])
    Pstr_value Rec
    [
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[107,5694+8]..[107,5694+12])
          Ppat_var "line" (test/dynamic/positions/menhir_code/lexer.ml[107,5694+8]..[107,5694+12])
        expression (test/dynamic/positions/menhir_code/lexer.ml[107,5694+13]..[108,5716+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/menhir_code/lexer.ml[107,5694+13]..[107,5694+19])
            Ppat_var "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[107,5694+13]..[107,5694+19])
          expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+3]..[108,5716+32])
            Pexp_apply
            expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+3]..[108,5716+23])
              Pexp_ident "__ocaml_lex_line_rec" (test/dynamic/positions/menhir_code/lexer.ml[108,5716+3]..[108,5716+23])
            [
              <arg>
              Nolabel
                expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+24]..[108,5716+30])
                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[108,5716+24]..[108,5716+30])
              <arg>
              Nolabel
                expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+31]..[108,5716+32])
                  Pexp_constant PConst_int (0,None)
            ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+4]..[109,5749+24])
          Ppat_var "__ocaml_lex_line_rec" (test/dynamic/positions/menhir_code/lexer.ml[109,5749+4]..[109,5749+24])
        expression (test/dynamic/positions/menhir_code/lexer.ml[109,5749+25]..[137,6747+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+25]..[109,5749+31])
            Ppat_var "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[109,5749+25]..[109,5749+31])
          expression (test/dynamic/positions/menhir_code/lexer.ml[109,5749+32]..[137,6747+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+32]..[109,5749+49])
              Ppat_var "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[109,5749+32]..[109,5749+49])
            expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+2]..[137,6747+51])
              Pexp_match
              expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+8]..[110,5801+65])
                Pexp_apply
                expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+8]..[110,5801+21])
                  Pexp_ident "Lexing.engine" (test/dynamic/positions/menhir_code/lexer.ml[110,5801+8]..[110,5801+21])
                [
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+22]..[110,5801+40])
                      Pexp_ident "__ocaml_lex_tables" (test/dynamic/positions/menhir_code/lexer.ml[110,5801+22]..[110,5801+40])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+41]..[110,5801+58])
                      Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[110,5801+41]..[110,5801+58])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+59]..[110,5801+65])
                      Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[110,5801+59]..[110,5801+65])
                ]
              [
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[111,5872+8]..[111,5872+9])
                    Ppat_constant PConst_int (0,None)
                  expression (test/dynamic/positions/menhir_code/lexer.ml[112,5885+0]..test/dynamic/positions/src/lexer.mll[16,6140+23])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[14,5933+21]..[14,5933+25])
                          Ppat_var "line" (test/dynamic/positions/src/lexer.mll[14,5933+21]..[14,5933+25])
                        expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+2]..[116,6011+81])
                          Pexp_apply
                          expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+2]..[116,6011+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+2]..[116,6011+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+20]..[116,6011+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+20]..[116,6011+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+27]..[116,6011+54])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+27]..[116,6011+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+27]..[116,6011+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+34]..[116,6011+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+55]..[116,6011+81])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+55]..[116,6011+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+55]..[116,6011+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/menhir_code/lexer.ml[116,6011+62]..[116,6011+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[16,6140+4]..[16,6140+23])
                      Pexp_tuple
                      [
                        expression (test/dynamic/positions/src/lexer.mll[16,6140+6]..[16,6140+15])
                          Pexp_construct "Some" (test/dynamic/positions/src/lexer.mll[16,6140+6]..[16,6140+10])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[16,6140+11]..[16,6140+15])
                              Pexp_ident "line" (test/dynamic/positions/src/lexer.mll[16,6140+11]..[16,6140+15])
                        expression (test/dynamic/positions/src/lexer.mll[16,6140+17]..[16,6140+21])
                          Pexp_construct "true" (test/dynamic/positions/src/lexer.mll[16,6140+17]..[16,6140+21])
                          None
                      ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[121,6217+4]..[121,6217+5])
                    Ppat_constant PConst_int (1,None)
                  expression (test/dynamic/positions/src/lexer.mll[19,6270+4]..[19,6270+19])
                    Pexp_tuple
                    [
                      expression (test/dynamic/positions/src/lexer.mll[19,6270+6]..[19,6270+10])
                        Pexp_construct "None" (test/dynamic/positions/src/lexer.mll[19,6270+6]..[19,6270+10])
                        None
                      expression (test/dynamic/positions/src/lexer.mll[19,6270+12]..[19,6270+17])
                        Pexp_construct "false" (test/dynamic/positions/src/lexer.mll[19,6270+12]..[19,6270+17])
                        None
                    ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[126,6343+4]..[126,6343+5])
                    Ppat_constant PConst_int (2,None)
                  expression (test/dynamic/positions/menhir_code/lexer.ml[127,6352+0]..test/dynamic/positions/src/lexer.mll[23,6601+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[20,6400+15]..[20,6400+19])
                          Ppat_var "line" (test/dynamic/positions/src/lexer.mll[20,6400+15]..[20,6400+19])
                        expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+2]..[131,6472+81])
                          Pexp_apply
                          expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+2]..[131,6472+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+2]..[131,6472+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+20]..[131,6472+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+20]..[131,6472+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+27]..[131,6472+54])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+27]..[131,6472+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+27]..[131,6472+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+34]..[131,6472+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+55]..[131,6472+81])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+55]..[131,6472+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+55]..[131,6472+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/menhir_code/lexer.ml[131,6472+62]..[131,6472+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[23,6601+4]..[23,6601+33])
                      Pexp_tuple
                      [
                        expression (test/dynamic/positions/src/lexer.mll[23,6601+6]..[23,6601+24])
                          Pexp_construct "Some" (test/dynamic/positions/src/lexer.mll[23,6601+6]..[23,6601+10])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[23,6601+11]..[23,6601+24])
                              Pexp_apply
                              expression (test/dynamic/positions/src/lexer.mll[23,6601+17]..[23,6601+18])
                                Pexp_ident "^" (test/dynamic/positions/src/lexer.mll[23,6601+17]..[23,6601+18])
                              [
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[23,6601+12]..[23,6601+16])
                                    Pexp_ident "line" (test/dynamic/positions/src/lexer.mll[23,6601+12]..[23,6601+16])
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[23,6601+19]..[23,6601+23])
                                    Pexp_constant PConst_string("\n",(test/dynamic/positions/src/lexer.mll[23,6601+20]..[23,6601+22]),None)
                              ]
                        expression (test/dynamic/positions/src/lexer.mll[23,6601+26]..[23,6601+31])
                          Pexp_construct "false" (test/dynamic/positions/src/lexer.mll[23,6601+26]..[23,6601+31])
                          None
                      ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[136,6688+4]..[136,6688+21])
                    Ppat_var "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[136,6688+4]..[136,6688+21])
                  expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..[137,6747+51])
                    Pexp_sequence
                    expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..[136,6688+57])
                      Pexp_apply
                      expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..[136,6688+50])
                        Pexp_field
                        expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..[136,6688+31])
                          Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..[136,6688+31])
                        "Lexing.refill_buff" (test/dynamic/positions/menhir_code/lexer.ml[136,6688+32]..[136,6688+50])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+51]..[136,6688+57])
                            Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[136,6688+51]..[136,6688+57])
                      ]
                    expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+6]..[137,6747+51])
                      Pexp_apply
                      expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+6]..[137,6747+26])
                        Pexp_ident "__ocaml_lex_line_rec" (test/dynamic/positions/menhir_code/lexer.ml[137,6747+6]..[137,6747+26])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+27]..[137,6747+33])
                            Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[137,6747+27]..[137,6747+33])
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+34]..[137,6747+51])
                            Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[137,6747+34]..[137,6747+51])
                      ]
              ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[139,6800+4]..[139,6800+9])
          Ppat_var "token" (test/dynamic/positions/menhir_code/lexer.ml[139,6800+4]..[139,6800+9])
        expression (test/dynamic/positions/menhir_code/lexer.ml[139,6800+10]..[140,6819+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/menhir_code/lexer.ml[139,6800+10]..[139,6800+16])
            Ppat_var "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[139,6800+10]..[139,6800+16])
          expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+3]..[140,6819+33])
            Pexp_apply
            expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+3]..[140,6819+24])
              Pexp_ident "__ocaml_lex_token_rec" (test/dynamic/positions/menhir_code/lexer.ml[140,6819+3]..[140,6819+24])
            [
              <arg>
              Nolabel
                expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+25]..[140,6819+31])
                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[140,6819+25]..[140,6819+31])
              <arg>
              Nolabel
                expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+32]..[140,6819+33])
                  Pexp_constant PConst_int (5,None)
            ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+4]..[141,6853+25])
          Ppat_var "__ocaml_lex_token_rec" (test/dynamic/positions/menhir_code/lexer.ml[141,6853+4]..[141,6853+25])
        expression (test/dynamic/positions/menhir_code/lexer.ml[141,6853+26]..[209,8797+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+26]..[141,6853+32])
            Ppat_var "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[141,6853+26]..[141,6853+32])
          expression (test/dynamic/positions/menhir_code/lexer.ml[141,6853+33]..[209,8797+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+33]..[141,6853+50])
              Ppat_var "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[141,6853+33]..[141,6853+50])
            expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+2]..[209,8797+52])
              Pexp_match
              expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+8]..[142,6906+65])
                Pexp_apply
                expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+8]..[142,6906+21])
                  Pexp_ident "Lexing.engine" (test/dynamic/positions/menhir_code/lexer.ml[142,6906+8]..[142,6906+21])
                [
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+22]..[142,6906+40])
                      Pexp_ident "__ocaml_lex_tables" (test/dynamic/positions/menhir_code/lexer.ml[142,6906+22]..[142,6906+40])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+41]..[142,6906+58])
                      Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[142,6906+41]..[142,6906+58])
                  <arg>
                  Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+59]..[142,6906+65])
                      Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[142,6906+59]..[142,6906+65])
                ]
              [
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[143,6977+8]..[143,6977+9])
                    Ppat_constant PConst_int (0,None)
                  expression (test/dynamic/positions/src/lexer.mll[30,7034+4]..[30,7034+20])
                    Pexp_apply
                    expression (test/dynamic/positions/src/lexer.mll[30,7034+6]..[30,7034+11])
                      Pexp_ident "token" (test/dynamic/positions/src/lexer.mll[30,7034+6]..[30,7034+11])
                    [
                      <arg>
                      Nolabel
                        expression (test/dynamic/positions/src/lexer.mll[30,7034+12]..[30,7034+18])
                          Pexp_ident "lexbuf" (test/dynamic/positions/src/lexer.mll[30,7034+12]..[30,7034+18])
                    ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[148,7108+4]..[148,7108+5])
                    Ppat_constant PConst_int (1,None)
                  expression (test/dynamic/positions/src/lexer.mll[32,7161+4]..[32,7161+11])
                    Pexp_construct "EOL" (test/dynamic/positions/src/lexer.mll[32,7161+6]..[32,7161+9])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[153,7226+4]..[153,7226+5])
                    Ppat_constant PConst_int (2,None)
                  expression (test/dynamic/positions/menhir_code/lexer.ml[154,7235+0]..test/dynamic/positions/src/lexer.mll[34,7482+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (test/dynamic/positions/src/lexer.mll[33,7283+16]..[33,7283+17])
                          Ppat_var "i" (test/dynamic/positions/src/lexer.mll[33,7283+16]..[33,7283+17])
                        expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+2]..[158,7353+81])
                          Pexp_apply
                          expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+2]..[158,7353+19])
                            Pexp_ident "Lexing.sub_lexeme" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+2]..[158,7353+19])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+20]..[158,7353+26])
                                Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+20]..[158,7353+26])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+27]..[158,7353+54])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+27]..[158,7353+33])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+27]..[158,7353+33])
                                "Lexing.lex_start_pos" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+34]..[158,7353+54])
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+55]..[158,7353+81])
                                Pexp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+55]..[158,7353+61])
                                  Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+55]..[158,7353+61])
                                "Lexing.lex_curr_pos" (test/dynamic/positions/menhir_code/lexer.ml[158,7353+62]..[158,7353+81])
                          ]
                    ]
                    expression (test/dynamic/positions/src/lexer.mll[34,7482+4]..[34,7482+29])
                      Pexp_construct "INT" (test/dynamic/positions/src/lexer.mll[34,7482+6]..[34,7482+9])
                      Some
                        expression (test/dynamic/positions/src/lexer.mll[34,7482+10]..[34,7482+27])
                          Pexp_apply
                          expression (test/dynamic/positions/src/lexer.mll[34,7482+11]..[34,7482+24])
                            Pexp_ident "int_of_string" (test/dynamic/positions/src/lexer.mll[34,7482+11]..[34,7482+24])
                          [
                            <arg>
                            Nolabel
                              expression (test/dynamic/positions/src/lexer.mll[34,7482+25]..[34,7482+26])
                                Pexp_ident "i" (test/dynamic/positions/src/lexer.mll[34,7482+25]..[34,7482+26])
                          ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[163,7565+4]..[163,7565+5])
                    Ppat_constant PConst_int (3,None)
                  expression (test/dynamic/positions/src/lexer.mll[36,7618+4]..[36,7618+12])
                    Pexp_construct "PLUS" (test/dynamic/positions/src/lexer.mll[36,7618+6]..[36,7618+10])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[168,7684+4]..[168,7684+5])
                    Ppat_constant PConst_int (4,None)
                  expression (test/dynamic/positions/src/lexer.mll[38,7737+4]..[38,7737+13])
                    Pexp_construct "MINUS" (test/dynamic/positions/src/lexer.mll[38,7737+6]..[38,7737+11])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[173,7804+4]..[173,7804+5])
                    Ppat_constant PConst_int (5,None)
                  expression (test/dynamic/positions/src/lexer.mll[40,7857+4]..[40,7857+13])
                    Pexp_construct "TIMES" (test/dynamic/positions/src/lexer.mll[40,7857+6]..[40,7857+11])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[178,7924+4]..[178,7924+5])
                    Ppat_constant PConst_int (6,None)
                  expression (test/dynamic/positions/src/lexer.mll[42,7977+4]..[42,7977+11])
                    Pexp_construct "DIV" (test/dynamic/positions/src/lexer.mll[42,7977+6]..[42,7977+9])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[183,8042+4]..[183,8042+5])
                    Ppat_constant PConst_int (7,None)
                  expression (test/dynamic/positions/src/lexer.mll[44,8095+4]..[44,8095+14])
                    Pexp_construct "LPAREN" (test/dynamic/positions/src/lexer.mll[44,8095+6]..[44,8095+12])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[188,8163+4]..[188,8163+5])
                    Ppat_constant PConst_int (8,None)
                  expression (test/dynamic/positions/src/lexer.mll[46,8216+4]..[46,8216+14])
                    Pexp_construct "RPAREN" (test/dynamic/positions/src/lexer.mll[46,8216+6]..[46,8216+12])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[193,8284+4]..[193,8284+5])
                    Ppat_constant PConst_int (9,None)
                  expression (test/dynamic/positions/src/lexer.mll[48,8337+4]..[48,8337+11])
                    Pexp_construct "DOT" (test/dynamic/positions/src/lexer.mll[48,8337+6]..[48,8337+9])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[198,8402+4]..[198,8402+6])
                    Ppat_constant PConst_int (10,None)
                  expression (test/dynamic/positions/src/lexer.mll[50,8456+4]..[50,8456+13])
                    Pexp_construct "COMMA" (test/dynamic/positions/src/lexer.mll[50,8456+6]..[50,8456+11])
                    None
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[203,8523+4]..[203,8523+6])
                    Ppat_constant PConst_int (11,None)
                  expression (test/dynamic/positions/src/lexer.mll[52,8577+4]..[52,8577+107])
                    Pexp_apply
                    expression (test/dynamic/positions/src/lexer.mll[52,8577+6]..[52,8577+11])
                      Pexp_ident "raise" (test/dynamic/positions/src/lexer.mll[52,8577+6]..[52,8577+11])
                    [
                      <arg>
                      Nolabel
                        expression (test/dynamic/positions/src/lexer.mll[52,8577+12]..[52,8577+105])
                          Pexp_construct "Error" (test/dynamic/positions/src/lexer.mll[52,8577+13]..[52,8577+18])
                          Some
                            expression (test/dynamic/positions/src/lexer.mll[52,8577+19]..[52,8577+104])
                              Pexp_apply
                              expression (test/dynamic/positions/src/lexer.mll[52,8577+20]..[52,8577+34])
                                Pexp_ident "Printf.sprintf" (test/dynamic/positions/src/lexer.mll[52,8577+20]..[52,8577+34])
                              [
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..[52,8577+74])
                                    Pexp_constant PConst_string("At offset %d: unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8577+36]..[52,8577+73]),None)
                                <arg>
                                Nolabel
                                  expression (test/dynamic/positions/src/lexer.mll[52,8577+75]..[52,8577+103])
                                    Pexp_apply
                                    expression (test/dynamic/positions/src/lexer.mll[52,8577+76]..[52,8577+95])
                                      Pexp_ident "Lexing.lexeme_start" (test/dynamic/positions/src/lexer.mll[52,8577+76]..[52,8577+95])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (test/dynamic/positions/src/lexer.mll[52,8577+96]..[52,8577+102])
                                          Pexp_ident "lexbuf" (test/dynamic/positions/src/lexer.mll[52,8577+96]..[52,8577+102])
                                    ]
                              ]
                    ]
                <case>
                  pattern (test/dynamic/positions/menhir_code/lexer.ml[208,8738+4]..[208,8738+21])
                    Ppat_var "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[208,8738+4]..[208,8738+21])
                  expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..[209,8797+52])
                    Pexp_sequence
                    expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..[208,8738+57])
                      Pexp_apply
                      expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..[208,8738+50])
                        Pexp_field
                        expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..[208,8738+31])
                          Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..[208,8738+31])
                        "Lexing.refill_buff" (test/dynamic/positions/menhir_code/lexer.ml[208,8738+32]..[208,8738+50])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+51]..[208,8738+57])
                            Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[208,8738+51]..[208,8738+57])
                      ]
                    expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+6]..[209,8797+52])
                      Pexp_apply
                      expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+6]..[209,8797+27])
                        Pexp_ident "__ocaml_lex_token_rec" (test/dynamic/positions/menhir_code/lexer.ml[209,8797+6]..[209,8797+27])
                      [
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+28]..[209,8797+34])
                            Pexp_ident "lexbuf" (test/dynamic/positions/menhir_code/lexer.ml[209,8797+28]..[209,8797+34])
                        <arg>
                        Nolabel
                          expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+35]..[209,8797+52])
                            Pexp_ident "__ocaml_lex_state" (test/dynamic/positions/menhir_code/lexer.ml[209,8797+35]..[209,8797+52])
                      ]
              ]
    ]
]

open Parser
exception Error of string 
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255";
    Lexing.lex_default =
      "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b
    Lexing.lex_check =

    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec line lexbuf = __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some line), true)
  | 1 -> (None, false)
  | 2 ->
      let line =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      ((Some (line ^ "\n")), false)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_line_rec lexbuf __ocaml_lex_state)
and token lexbuf = __ocaml_lex_token_rec lexbuf 5
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> token lexbuf
  | 1 -> EOL
  | 2 ->
      let i =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      INT (int_of_string i)
  | 3 -> PLUS
  | 4 -> MINUS
  | 5 -> TIMES
  | 6 -> DIV
  | 7 -> LPAREN
  | 8 -> RPAREN
  | 9 -> DOT
  | 10 -> COMMA
  | 11 ->
      raise
        (Error
           (Printf.sprintf "At offset %d: unexpected character.\n"
              (Lexing.lexeme_start lexbuf)))
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_token_rec lexbuf __ocaml_lex_state)
[
  structure_item (test/dynamic/positions/src/lexer.mll[3,46+2]..test/dynamic/positions/src/lexer.mll[3,46+13])
    Tstr_open Fresh
    module_expr (test/dynamic/positions/src/lexer.mll[3,46+7]..test/dynamic/positions/src/lexer.mll[3,46+13])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (test/dynamic/positions/src/lexer.mll[5,61+2]..test/dynamic/positions/src/lexer.mll[5,61+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (test/dynamic/positions/src/lexer.mll[5,61+2]..test/dynamic/positions/src/lexer.mll[5,61+27])
          pext_name = "Error/276"
          pext_kind =
            Text_decl
              [
                core_type (test/dynamic/positions/src/lexer.mll[5,61+21]..test/dynamic/positions/src/lexer.mll[5,61+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (test/dynamic/positions/menhir_code/lexer.ml[10,142+0]..test/dynamic/positions/menhir_code/lexer.ml[105,5691+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[10,142+4]..test/dynamic/positions/menhir_code/lexer.ml[10,142+22])
          Tpat_var "__ocaml_lex_tables/277"
        expression (test/dynamic/positions/menhir_code/lexer.ml[10,142+25]..test/dynamic/positions/menhir_code/lexer.ml[105,5691+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[12,189+3]..test/dynamic/positions/menhir_code/lexer.ml[14,329+21])
                    Texp_constant Const_string("\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255",(test/dynamic/positions/menhir_code/lexer.ml[12,189+4]..test/dynamic/positions/menhir_code/lexer.ml[14,329+20]),None)
                "Lexing.lex_backtrk"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[16,375+3]..test/dynamic/positions/menhir_code/lexer.ml[18,515+21])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255",(test/dynamic/positions/menhir_code/lexer.ml[16,375+4]..test/dynamic/positions/menhir_code/lexer.ml[18,515+20]),None)
                "Lexing.lex_default"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[20,561+3]..test/dynamic/positions/menhir_code/lexer.ml[22,701+21])
                    Texp_constant Const_string("\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000",(test/dynamic/positions/menhir_code/lexer.ml[20,561+4]..test/dynamic/positions/menhir_code/lexer.ml[22,701+20]),None)
                "Lexing.lex_trans"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[24,745+3]..test/dynamic/positions/menhir_code/lexer.ml[57,3055+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\btest/dynamic/positions/menhir_code/lexer.ml[24,745+4]..test/dynamic/positions/menhir_code/lexer.ml[57,3055+52]),None)
                "Lexing.lex_check"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[59,3131+3]..test/dynamic/positions/menhir_code/lexer.ml[92,5441+53])
                    Texp_constant Const_stringtest/dynamic/positions/menhir_code/lexer.ml[59,3131+4]..test/dynamic/positions/menhir_code/lexer.ml[92,5441+52]),None)
                "Lexing.lex_base_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[94,5521+3]..test/dynamic/positions/menhir_code/lexer.ml[94,5521+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[94,5521+4]..test/dynamic/positions/menhir_code/lexer.ml[94,5521+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[96,5556+3]..test/dynamic/positions/menhir_code/lexer.ml[96,5556+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[96,5556+4]..test/dynamic/positions/menhir_code/lexer.ml[96,5556+4]),None)
                "Lexing.lex_default_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[98,5591+3]..test/dynamic/positions/menhir_code/lexer.ml[98,5591+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[98,5591+4]..test/dynamic/positions/menhir_code/lexer.ml[98,5591+4]),None)
                "Lexing.lex_trans_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[100,5624+3]..test/dynamic/positions/menhir_code/lexer.ml[100,5624+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[100,5624+4]..test/dynamic/positions/menhir_code/lexer.ml[100,5624+4]),None)
                "Lexing.lex_check_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[102,5657+3]..test/dynamic/positions/menhir_code/lexer.ml[102,5657+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[102,5657+4]..test/dynamic/positions/menhir_code/lexer.ml[102,5657+4]),None)
                "Lexing.lex_code"
                  expression (test/dynamic/positions/menhir_code/lexer.ml[104,5684+3]..test/dynamic/positions/menhir_code/lexer.ml[104,5684+5])
                    Texp_constant Const_string("",(test/dynamic/positions/menhir_code/lexer.ml[104,5684+4]..test/dynamic/positions/menhir_code/lexer.ml[104,5684+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (test/dynamic/positions/menhir_code/lexer.ml[107,5694+0]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52])
    Tstr_value Rec
    [
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[107,5694+8]..test/dynamic/positions/menhir_code/lexer.ml[107,5694+12])
          Tpat_var "line/302"
        expression (test/dynamic/positions/menhir_code/lexer.ml[107,5694+13]..test/dynamic/positions/menhir_code/lexer.ml[108,5716+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/menhir_code/lexer.ml[107,5694+13]..test/dynamic/positions/menhir_code/lexer.ml[107,5694+19])
                Tpat_var "lexbuf/306"
              expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+3]..test/dynamic/positions/menhir_code/lexer.ml[108,5716+32])
                Texp_apply
                expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+3]..test/dynamic/positions/menhir_code/lexer.ml[108,5716+23])
                  Texp_ident "__ocaml_lex_line_rec/303"
                [
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+24]..test/dynamic/positions/menhir_code/lexer.ml[108,5716+30])
                      Texp_ident "lexbuf/306"
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[108,5716+31]..test/dynamic/positions/menhir_code/lexer.ml[108,5716+32])
                      Texp_constant Const_int 0
                ]
          ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+4]..test/dynamic/positions/menhir_code/lexer.ml[109,5749+24])
          Tpat_var "__ocaml_lex_line_rec/303"
        expression (test/dynamic/positions/menhir_code/lexer.ml[109,5749+25]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+25]..test/dynamic/positions/menhir_code/lexer.ml[109,5749+31])
                Tpat_var "lexbuf/307"
              expression (test/dynamic/positions/menhir_code/lexer.ml[109,5749+32]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (test/dynamic/positions/menhir_code/lexer.ml[109,5749+32]..test/dynamic/positions/menhir_code/lexer.ml[109,5749+49])
                      Tpat_var "__ocaml_lex_state/308"
                    expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+2]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51])
                      Texp_match
                      expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+8]..test/dynamic/positions/menhir_code/lexer.ml[110,5801+65])
                        Texp_apply
                        expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+8]..test/dynamic/positions/menhir_code/lexer.ml[110,5801+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+22]..test/dynamic/positions/menhir_code/lexer.ml[110,5801+40])
                              Texp_ident "__ocaml_lex_tables/277"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+41]..test/dynamic/positions/menhir_code/lexer.ml[110,5801+58])
                              Texp_ident "__ocaml_lex_state/308"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[110,5801+59]..test/dynamic/positions/menhir_code/lexer.ml[110,5801+65])
                              Texp_ident "lexbuf/307"
                        ]
                      [
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[111,5872+8]..test/dynamic/positions/menhir_code/lexer.ml[111,5872+9])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[111,5872+8]..test/dynamic/positions/menhir_code/lexer.ml[111,5872+9])
                              Tpat_constant Const_int 0
                          expression (test/dynamic/positions/menhir_code/lexer.ml[112,5885+0]..test/dynamic/positions/src/lexer.mll[16,6140+23])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[14,5933+21]..test/dynamic/positions/src/lexer.mll[14,5933+25])
                                  Tpat_var "line/334"
                                expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+2]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+2]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+20]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+26])
                                        Texp_ident "lexbuf/307"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+27]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+54])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+27]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+33])
                                          Texp_ident "lexbuf/307"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+55]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+81])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[116,6011+55]..test/dynamic/positions/menhir_code/lexer.ml[116,6011+61])
                                          Texp_ident "lexbuf/307"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[16,6140+4]..test/dynamic/positions/src/lexer.mll[16,6140+23])
                              Texp_tuple
                              [
                                expression (test/dynamic/positions/src/lexer.mll[16,6140+6]..test/dynamic/positions/src/lexer.mll[16,6140+15])
                                  Texp_construct "Some"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[16,6140+11]..test/dynamic/positions/src/lexer.mll[16,6140+15])
                                      Texp_ident "line/334"
                                  ]
                                expression (test/dynamic/positions/src/lexer.mll[16,6140+17]..test/dynamic/positions/src/lexer.mll[16,6140+21])
                                  Texp_construct "true"
                                  []
                              ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[121,6217+4]..test/dynamic/positions/menhir_code/lexer.ml[121,6217+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[121,6217+4]..test/dynamic/positions/menhir_code/lexer.ml[121,6217+5])
                              Tpat_constant Const_int 1
                          expression (test/dynamic/positions/src/lexer.mll[19,6270+4]..test/dynamic/positions/src/lexer.mll[19,6270+19])
                            Texp_tuple
                            [
                              expression (test/dynamic/positions/src/lexer.mll[19,6270+6]..test/dynamic/positions/src/lexer.mll[19,6270+10])
                                Texp_construct "None"
                                []
                              expression (test/dynamic/positions/src/lexer.mll[19,6270+12]..test/dynamic/positions/src/lexer.mll[19,6270+17])
                                Texp_construct "false"
                                []
                            ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[126,6343+4]..test/dynamic/positions/menhir_code/lexer.ml[126,6343+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[126,6343+4]..test/dynamic/positions/menhir_code/lexer.ml[126,6343+5])
                              Tpat_constant Const_int 2
                          expression (test/dynamic/positions/menhir_code/lexer.ml[127,6352+0]..test/dynamic/positions/src/lexer.mll[23,6601+33])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[20,6400+15]..test/dynamic/positions/src/lexer.mll[20,6400+19])
                                  Tpat_var "line/335"
                                expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+2]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+2]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+20]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+26])
                                        Texp_ident "lexbuf/307"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+27]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+54])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+27]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+33])
                                          Texp_ident "lexbuf/307"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+55]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+81])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[131,6472+55]..test/dynamic/positions/menhir_code/lexer.ml[131,6472+61])
                                          Texp_ident "lexbuf/307"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[23,6601+4]..test/dynamic/positions/src/lexer.mll[23,6601+33])
                              Texp_tuple
                              [
                                expression (test/dynamic/positions/src/lexer.mll[23,6601+6]..test/dynamic/positions/src/lexer.mll[23,6601+24])
                                  Texp_construct "Some"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[23,6601+11]..test/dynamic/positions/src/lexer.mll[23,6601+24])
                                      Texp_apply
                                      expression (test/dynamic/positions/src/lexer.mll[23,6601+17]..test/dynamic/positions/src/lexer.mll[23,6601+18])
                                        Texp_ident "Stdlib!.^"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[23,6601+12]..test/dynamic/positions/src/lexer.mll[23,6601+16])
                                            Texp_ident "line/335"
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[23,6601+19]..test/dynamic/positions/src/lexer.mll[23,6601+23])
                                            Texp_constant Const_string("\n",(test/dynamic/positions/src/lexer.mll[23,6601+20]..test/dynamic/positions/src/lexer.mll[23,6601+22]),None)
                                      ]
                                  ]
                                expression (test/dynamic/positions/src/lexer.mll[23,6601+26]..test/dynamic/positions/src/lexer.mll[23,6601+31])
                                  Texp_construct "false"
                                  []
                              ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[136,6688+4]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+21])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[136,6688+4]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+21])
                              Tpat_var "__ocaml_lex_state/333"
                          expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51])
                            Texp_sequence
                            expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+57])
                              Texp_apply
                              expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+50])
                                Texp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+25]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+31])
                                  Texp_ident "lexbuf/307"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[136,6688+51]..test/dynamic/positions/menhir_code/lexer.ml[136,6688+57])
                                    Texp_ident "lexbuf/307"
                              ]
                            expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+6]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51])
                              Texp_apply
                              expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+6]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+26])
                                Texp_ident "__ocaml_lex_line_rec/303"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+27]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+33])
                                    Texp_ident "lexbuf/307"
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[137,6747+34]..test/dynamic/positions/menhir_code/lexer.ml[137,6747+51])
                                    Texp_ident "__ocaml_lex_state/333"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[139,6800+4]..test/dynamic/positions/menhir_code/lexer.ml[139,6800+9])
          Tpat_var "token/304"
        expression (test/dynamic/positions/menhir_code/lexer.ml[139,6800+10]..test/dynamic/positions/menhir_code/lexer.ml[140,6819+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/menhir_code/lexer.ml[139,6800+10]..test/dynamic/positions/menhir_code/lexer.ml[139,6800+16])
                Tpat_var "lexbuf/336"
              expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+3]..test/dynamic/positions/menhir_code/lexer.ml[140,6819+33])
                Texp_apply
                expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+3]..test/dynamic/positions/menhir_code/lexer.ml[140,6819+24])
                  Texp_ident "__ocaml_lex_token_rec/305"
                [
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+25]..test/dynamic/positions/menhir_code/lexer.ml[140,6819+31])
                      Texp_ident "lexbuf/336"
                  <arg>
                    Nolabel
                    expression (test/dynamic/positions/menhir_code/lexer.ml[140,6819+32]..test/dynamic/positions/menhir_code/lexer.ml[140,6819+33])
                      Texp_constant Const_int 5
                ]
          ]
      <def>
        pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+4]..test/dynamic/positions/menhir_code/lexer.ml[141,6853+25])
          Tpat_var "__ocaml_lex_token_rec/305"
        expression (test/dynamic/positions/menhir_code/lexer.ml[141,6853+26]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+26]..test/dynamic/positions/menhir_code/lexer.ml[141,6853+32])
                Tpat_var "lexbuf/337"
              expression (test/dynamic/positions/menhir_code/lexer.ml[141,6853+33]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (test/dynamic/positions/menhir_code/lexer.ml[141,6853+33]..test/dynamic/positions/menhir_code/lexer.ml[141,6853+50])
                      Tpat_var "__ocaml_lex_state/338"
                    expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+2]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52])
                      Texp_match
                      expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+8]..test/dynamic/positions/menhir_code/lexer.ml[142,6906+65])
                        Texp_apply
                        expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+8]..test/dynamic/positions/menhir_code/lexer.ml[142,6906+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+22]..test/dynamic/positions/menhir_code/lexer.ml[142,6906+40])
                              Texp_ident "__ocaml_lex_tables/277"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+41]..test/dynamic/positions/menhir_code/lexer.ml[142,6906+58])
                              Texp_ident "__ocaml_lex_state/338"
                          <arg>
                            Nolabel
                            expression (test/dynamic/positions/menhir_code/lexer.ml[142,6906+59]..test/dynamic/positions/menhir_code/lexer.ml[142,6906+65])
                              Texp_ident "lexbuf/337"
                        ]
                      [
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[143,6977+8]..test/dynamic/positions/menhir_code/lexer.ml[143,6977+9])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[143,6977+8]..test/dynamic/positions/menhir_code/lexer.ml[143,6977+9])
                              Tpat_constant Const_int 0
                          expression (test/dynamic/positions/src/lexer.mll[30,7034+4]..test/dynamic/positions/src/lexer.mll[30,7034+20])
                            Texp_apply
                            expression (test/dynamic/positions/src/lexer.mll[30,7034+6]..test/dynamic/positions/src/lexer.mll[30,7034+11])
                              Texp_ident "token/304"
                            [
                              <arg>
                                Nolabel
                                expression (test/dynamic/positions/src/lexer.mll[30,7034+12]..test/dynamic/positions/src/lexer.mll[30,7034+18])
                                  Texp_ident "lexbuf/337"
                            ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[148,7108+4]..test/dynamic/positions/menhir_code/lexer.ml[148,7108+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[148,7108+4]..test/dynamic/positions/menhir_code/lexer.ml[148,7108+5])
                              Tpat_constant Const_int 1
                          expression (test/dynamic/positions/src/lexer.mll[32,7161+4]..test/dynamic/positions/src/lexer.mll[32,7161+11])
                            Texp_construct "EOL"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[153,7226+4]..test/dynamic/positions/menhir_code/lexer.ml[153,7226+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[153,7226+4]..test/dynamic/positions/menhir_code/lexer.ml[153,7226+5])
                              Tpat_constant Const_int 2
                          expression (test/dynamic/positions/menhir_code/lexer.ml[154,7235+0]..test/dynamic/positions/src/lexer.mll[34,7482+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (test/dynamic/positions/src/lexer.mll[33,7283+16]..test/dynamic/positions/src/lexer.mll[33,7283+17])
                                  Tpat_var "i/340"
                                expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+2]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+81])
                                  Texp_apply
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+2]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+20]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+26])
                                        Texp_ident "lexbuf/337"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+27]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+54])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+27]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+33])
                                          Texp_ident "lexbuf/337"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+55]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+81])
                                        Texp_field
                                        expression (test/dynamic/positions/menhir_code/lexer.ml[158,7353+55]..test/dynamic/positions/menhir_code/lexer.ml[158,7353+61])
                                          Texp_ident "lexbuf/337"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (test/dynamic/positions/src/lexer.mll[34,7482+4]..test/dynamic/positions/src/lexer.mll[34,7482+29])
                              Texp_construct "INT"
                              [
                                expression (test/dynamic/positions/src/lexer.mll[34,7482+10]..test/dynamic/positions/src/lexer.mll[34,7482+27])
                                  Texp_apply
                                  expression (test/dynamic/positions/src/lexer.mll[34,7482+11]..test/dynamic/positions/src/lexer.mll[34,7482+24])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (test/dynamic/positions/src/lexer.mll[34,7482+25]..test/dynamic/positions/src/lexer.mll[34,7482+26])
                                        Texp_ident "i/340"
                                  ]
                              ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[163,7565+4]..test/dynamic/positions/menhir_code/lexer.ml[163,7565+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[163,7565+4]..test/dynamic/positions/menhir_code/lexer.ml[163,7565+5])
                              Tpat_constant Const_int 3
                          expression (test/dynamic/positions/src/lexer.mll[36,7618+4]..test/dynamic/positions/src/lexer.mll[36,7618+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[168,7684+4]..test/dynamic/positions/menhir_code/lexer.ml[168,7684+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[168,7684+4]..test/dynamic/positions/menhir_code/lexer.ml[168,7684+5])
                              Tpat_constant Const_int 4
                          expression (test/dynamic/positions/src/lexer.mll[38,7737+4]..test/dynamic/positions/src/lexer.mll[38,7737+13])
                            Texp_construct "MINUS"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[173,7804+4]..test/dynamic/positions/menhir_code/lexer.ml[173,7804+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[173,7804+4]..test/dynamic/positions/menhir_code/lexer.ml[173,7804+5])
                              Tpat_constant Const_int 5
                          expression (test/dynamic/positions/src/lexer.mll[40,7857+4]..test/dynamic/positions/src/lexer.mll[40,7857+13])
                            Texp_construct "TIMES"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[178,7924+4]..test/dynamic/positions/menhir_code/lexer.ml[178,7924+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[178,7924+4]..test/dynamic/positions/menhir_code/lexer.ml[178,7924+5])
                              Tpat_constant Const_int 6
                          expression (test/dynamic/positions/src/lexer.mll[42,7977+4]..test/dynamic/positions/src/lexer.mll[42,7977+11])
                            Texp_construct "DIV"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[183,8042+4]..test/dynamic/positions/menhir_code/lexer.ml[183,8042+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[183,8042+4]..test/dynamic/positions/menhir_code/lexer.ml[183,8042+5])
                              Tpat_constant Const_int 7
                          expression (test/dynamic/positions/src/lexer.mll[44,8095+4]..test/dynamic/positions/src/lexer.mll[44,8095+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[188,8163+4]..test/dynamic/positions/menhir_code/lexer.ml[188,8163+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[188,8163+4]..test/dynamic/positions/menhir_code/lexer.ml[188,8163+5])
                              Tpat_constant Const_int 8
                          expression (test/dynamic/positions/src/lexer.mll[46,8216+4]..test/dynamic/positions/src/lexer.mll[46,8216+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[193,8284+4]..test/dynamic/positions/menhir_code/lexer.ml[193,8284+5])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[193,8284+4]..test/dynamic/positions/menhir_code/lexer.ml[193,8284+5])
                              Tpat_constant Const_int 9
                          expression (test/dynamic/positions/src/lexer.mll[48,8337+4]..test/dynamic/positions/src/lexer.mll[48,8337+11])
                            Texp_construct "DOT"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[198,8402+4]..test/dynamic/positions/menhir_code/lexer.ml[198,8402+6])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[198,8402+4]..test/dynamic/positions/menhir_code/lexer.ml[198,8402+6])
                              Tpat_constant Const_int 10
                          expression (test/dynamic/positions/src/lexer.mll[50,8456+4]..test/dynamic/positions/src/lexer.mll[50,8456+13])
                            Texp_construct "COMMA"
                            []
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[203,8523+4]..test/dynamic/positions/menhir_code/lexer.ml[203,8523+6])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[203,8523+4]..test/dynamic/positions/menhir_code/lexer.ml[203,8523+6])
                              Tpat_constant Const_int 11
                          expression (test/dynamic/positions/src/lexer.mll[52,8577+4]..test/dynamic/positions/src/lexer.mll[52,8577+107])
                            Texp_apply
                            expression (test/dynamic/positions/src/lexer.mll[52,8577+6]..test/dynamic/positions/src/lexer.mll[52,8577+11])
                              Texp_ident "Stdlib!.raise"
                            [
                              <arg>
                                Nolabel
                                expression (test/dynamic/positions/src/lexer.mll[52,8577+12]..test/dynamic/positions/src/lexer.mll[52,8577+105])
                                  Texp_construct "Error"
                                  [
                                    expression (test/dynamic/positions/src/lexer.mll[52,8577+19]..test/dynamic/positions/src/lexer.mll[52,8577+104])
                                      Texp_apply
                                      expression (test/dynamic/positions/src/lexer.mll[52,8577+20]..test/dynamic/positions/src/lexer.mll[52,8577+34])
                                        Texp_ident "Stdlib!.Printf.sprintf"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                    Texp_constant Const_string("At offset ",(test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost,None)
                                                  expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                            Texp_constant Const_string(": unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost,None)
                                                          expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost
                                                Texp_constant Const_string("At offset %d: unexpected character.\n",(test/dynamic/positions/src/lexer.mll[52,8577+35]..test/dynamic/positions/src/lexer.mll[52,8577+74]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (test/dynamic/positions/src/lexer.mll[52,8577+75]..test/dynamic/positions/src/lexer.mll[52,8577+103])
                                            Texp_apply
                                            expression (test/dynamic/positions/src/lexer.mll[52,8577+76]..test/dynamic/positions/src/lexer.mll[52,8577+95])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (test/dynamic/positions/src/lexer.mll[52,8577+96]..test/dynamic/positions/src/lexer.mll[52,8577+102])
                                                  Texp_ident "lexbuf/337"
                                            ]
                                      ]
                                  ]
                            ]
                        <case>
                          pattern (test/dynamic/positions/menhir_code/lexer.ml[208,8738+4]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+21])
                            Tpat_value
                            pattern (test/dynamic/positions/menhir_code/lexer.ml[208,8738+4]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+21])
                              Tpat_var "__ocaml_lex_state/339"
                          expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52])
                            Texp_sequence
                            expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+57])
                              Texp_apply
                              expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+50])
                                Texp_field
                                expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+25]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+31])
                                  Texp_ident "lexbuf/337"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[208,8738+51]..test/dynamic/positions/menhir_code/lexer.ml[208,8738+57])
                                    Texp_ident "lexbuf/337"
                              ]
                            expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+6]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52])
                              Texp_apply
                              expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+6]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+27])
                                Texp_ident "__ocaml_lex_token_rec/305"
                              [
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+28]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+34])
                                    Texp_ident "lexbuf/337"
                                <arg>
                                  Nolabel
                                  expression (test/dynamic/positions/menhir_code/lexer.ml[209,8797+35]..test/dynamic/positions/menhir_code/lexer.ml[209,8797+52])
                                    Texp_ident "__ocaml_lex_state/339"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "Error"[extension constructor] -> <Dune__exe__Lexer.0>;
 "__ocaml_lex_line_rec"[value] -> <Dune__exe__Lexer.3>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.1>;
 "__ocaml_lex_token_rec"[value] -> <Dune__exe__Lexer.5>;
 "line"[value] -> <Dune__exe__Lexer.2>;
 "token"[value] -> <Dune__exe__Lexer.4>;
 }

(seq
  (let
    (Error/276 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/276))
  (let
    (__ocaml_lex_tables/277 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/277))
  (letrec
    (line/302
       (function lexbuf/306 (apply __ocaml_lex_line_rec/303 lexbuf/306 0))
      __ocaml_lex_line_rec/303
        (function lexbuf/307 __ocaml_lex_state/308[int]
          (let
            (__ocaml_lex_state/333 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/308 lexbuf/307))
            (catch
              (if (isout 2 __ocaml_lex_state/333) (exit 1)
                (switch* __ocaml_lex_state/333
                 case int 0:
                  (let
                    (line/334 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/307 (field_int 4 lexbuf/307)
                         (field_int 5 lexbuf/307)))
                    (makeblock 0 (*,int) (makeblock 0 line/334) 1))
                 case int 1: [0: 0 0]
                 case int 2:
                  (let
                    (line/335 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/307 (field_int 4 lexbuf/307)
                         (field_int 5 lexbuf/307)))
                    (makeblock 0 (*,int)
                      (makeblock 0
                        (apply (field_imm 27 (global Stdlib!)) line/335 "\n"))
                      0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/307) lexbuf/307)
                (apply __ocaml_lex_line_rec/303 lexbuf/307
                  __ocaml_lex_state/333)))))
      token/304
        (function lexbuf/336 (apply __ocaml_lex_token_rec/305 lexbuf/336 5))
      __ocaml_lex_token_rec/305
        (function lexbuf/337 __ocaml_lex_state/338[int]
          (let
            (__ocaml_lex_state/339 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/338 lexbuf/337))
            (catch
              (if (isout 11 __ocaml_lex_state/339) (exit 2)
                (switch* __ocaml_lex_state/339
                 case int 0: (apply token/304 lexbuf/337)
                 case int 1: 5
                 case int 2:
                  (let
                    (i/340 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/337 (field_int 4 lexbuf/337)
                         (field_int 5 lexbuf/337)))
                    (makeblock 0 (int) (caml_int_of_string i/340)))
                 case int 3: 2
                 case int 4: 3
                 case int 5: 0
                 case int 6: 7
                 case int 7: 4
                 case int 8: 1
                 case int 9: 6
                 case int 10: 8
                 case int 11:
                  (raise
                    (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0:
                         [11:
                          "At offset "
                          [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                         "At offset %d: unexpected character.\n"]
                        (apply (field_imm 9 (global Stdlib__Lexing!))
                          lexbuf/337))))))
             with (2)
              (seq (apply (field_imm 0 lexbuf/337) lexbuf/337)
                (apply __ocaml_lex_token_rec/305 lexbuf/337
                  __ocaml_lex_state/339))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/302)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/303)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/304)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/305)))
  0)
(seq
  (let
    (Error/276 =
       (makeblock 248 "Dune__exe__Lexer.Error" (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Lexer!) Error/276))
  (let
    (__ocaml_lex_tables/277 =
       [0:
        "\000\000\254\255\255\255\001\000\253\255\003\000\244\255\245\255\246\255\247\255\248\255\249\255\250\255\251\255\252\255\r\000\254\255\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255"
        "\003\000\000\000\000\000\003\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\017\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\t\000\012\000\014\000\007\000\r\000\b

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 1 (global Dune__exe__Lexer!)
      __ocaml_lex_tables/277))
  (letrec
    (line/302
       (function lexbuf/306 (apply __ocaml_lex_line_rec/303 lexbuf/306 0))
      __ocaml_lex_line_rec/303
        (function lexbuf/307 __ocaml_lex_state/308[int]
          (let
            (__ocaml_lex_state/333 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/308 lexbuf/307))
            (if (isout 2 __ocaml_lex_state/333)
              (seq (apply (field_imm 0 lexbuf/307) lexbuf/307)
                (apply __ocaml_lex_line_rec/303 lexbuf/307
                  __ocaml_lex_state/333))
              (switch* __ocaml_lex_state/333
               case int 0:
                (let
                  (line/334 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/307 (field_int 4 lexbuf/307)
                       (field_int 5 lexbuf/307)))
                  (makeblock 0 (*,int) (makeblock 0 line/334) 1))
               case int 1: [0: 0 0]
               case int 2:
                (let
                  (line/335 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/307 (field_int 4 lexbuf/307)
                       (field_int 5 lexbuf/307)))
                  (makeblock 0 (*,int)
                    (makeblock 0
                      (apply (field_imm 27 (global Stdlib!)) line/335 "\n"))
                    0))))))
      token/304
        (function lexbuf/336 (apply __ocaml_lex_token_rec/305 lexbuf/336 5))
      __ocaml_lex_token_rec/305
        (function lexbuf/337 __ocaml_lex_state/338[int]
          (let
            (__ocaml_lex_state/339 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 1 (global Dune__exe__Lexer!))
                 __ocaml_lex_state/338 lexbuf/337))
            (if (isout 11 __ocaml_lex_state/339)
              (seq (apply (field_imm 0 lexbuf/337) lexbuf/337)
                (apply __ocaml_lex_token_rec/305 lexbuf/337
                  __ocaml_lex_state/339))
              (switch* __ocaml_lex_state/339
               case int 0: (apply token/304 lexbuf/337)
               case int 1: 5
               case int 2:
                (let
                  (i/340 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/337 (field_int 4 lexbuf/337)
                       (field_int 5 lexbuf/337)))
                  (makeblock 0 (int) (caml_int_of_string i/340)))
               case int 3: 2
               case int 4: 3
               case int 5: 0
               case int 6: 7
               case int 7: 4
               case int 8: 1
               case int 9: 6
               case int 10: 8
               case int 11:
                (raise
                  (makeblock 0 (field_imm 0 (global Dune__exe__Lexer!))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [11:
                        "At offset "
                        [4: 0 0 0 [11: ": unexpected character.\n" 0]]]
                       "At offset %d: unexpected character.\n"]
                      (apply (field_imm 9 (global Stdlib__Lexing!))
                        lexbuf/337)))))))))
    (seq (setfield_ptr(root-init) 2 (global Dune__exe__Lexer!) line/302)
      (setfield_ptr(root-init) 3 (global Dune__exe__Lexer!)
        __ocaml_lex_line_rec/303)
      (setfield_ptr(root-init) 4 (global Dune__exe__Lexer!) token/304)
      (setfield_ptr(root-init) 5 (global Dune__exe__Lexer!)
        __ocaml_lex_token_rec/305)))
  0)

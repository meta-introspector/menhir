[
  structure_item (src/sentenceParser.ml[1,28+0]..[19,389+1])
    Pstr_type Rec
    [
      type_declaration "token" (src/sentenceParser.ml[1,28+5]..[1,28+10]) (src/sentenceParser.ml[1,28+0]..[19,389+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/sentenceParser.ml[2,41+2]..[2,41+9])
                "COLON" (src/sentenceParser.ml[2,41+4]..[2,41+9])
                []
                None
              (src/sentenceParser.ml[3,51+2]..[3,51+7])
                "EOF" (src/sentenceParser.ml[3,51+4]..[3,51+7])
                []
                None
              (src/sentenceParser.ml[4,59+2]..[4,59+7])
                "EOL" (src/sentenceParser.ml[4,59+4]..[4,59+7])
                []
                None
              (src/sentenceParser.ml[5,67+2]..[9,179+1])
                "TERMINAL" (src/sentenceParser.ml[5,67+4]..[5,67+12])
                [
                  core_type (src/sentenceParser.mly[29,115+7]..[29,115+35])
                    Ptyp_constr "SentenceParserAux.raw_symbol" (src/sentenceParser.mly[29,115+7]..[29,115+35])
                    []
                ]
                None
              (src/sentenceParser.ml[10,181+2]..[14,297+1])
                "NONTERMINAL" (src/sentenceParser.ml[10,181+4]..[10,181+15])
                [
                  core_type (src/sentenceParser.mly[30,232+7]..[30,232+35])
                    Ptyp_constr "SentenceParserAux.raw_symbol" (src/sentenceParser.mly[30,232+7]..[30,232+35])
                    []
                ]
                None
              (src/sentenceParser.ml[15,299+2]..[19,389+1])
                "COMMENT" (src/sentenceParser.ml[15,299+4]..[15,299+11])
                [
                  core_type (src/sentenceParser.mly[31,346+7]..[31,346+13])
                    Ptyp_constr "string" (src/sentenceParser.mly[31,346+7]..[31,346+13])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/sentenceParser.ml[21,392+0]..[21,392+12])
    Pstr_open Fresh
    module_expr (src/sentenceParser.ml[21,392+5]..[21,392+12])
      Pmod_ident "Parsing" (src/sentenceParser.ml[21,392+5]..[21,392+12])
  structure_item (src/sentenceParser.ml[22,405+0]..[22,405+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[22,405+4]..[22,405+5])
          Ppat_any
        expression (src/sentenceParser.ml[22,405+8]..[22,405+19])
          Pexp_ident "parse_error" (src/sentenceParser.ml[22,405+8]..[22,405+19])
    ]
  structure_item (src/sentenceParser.mly[39,458+2]..[39,458+24])
    Pstr_open Fresh
    module_expr (src/sentenceParser.mly[39,458+7]..[39,458+24])
      Pmod_ident "SentenceParserAux" (src/sentenceParser.mly[39,458+7]..[39,458+24])
  structure_item (src/sentenceParser.mly[43,546+2]..[60,1053+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.mly[43,546+6]..[43,546+21])
          Ppat_var "locate_sentence" (src/sentenceParser.mly[43,546+6]..[43,546+21])
        expression (src/sentenceParser.mly[43,546+22]..[60,1053+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/sentenceParser.mly[43,546+22]..[43,546+38])
            Ppat_tuple
            [
              pattern (src/sentenceParser.mly[43,546+23]..[43,546+26])
                Ppat_var "nto" (src/sentenceParser.mly[43,546+23]..[43,546+26])
              pattern (src/sentenceParser.mly[43,546+28]..[43,546+37])
                Ppat_var "terminals" (src/sentenceParser.mly[43,546+28]..[43,546+37])
            ]
          expression (src/sentenceParser.mly[44,587+4]..[60,1053+20])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/sentenceParser.mly[44,587+8]..[44,587+15])
                  Ppat_var "opening" (src/sentenceParser.mly[44,587+8]..[44,587+15])
                expression (src/sentenceParser.mly[45,605+6]..[50,745+26])
                  Pexp_match
                  expression (src/sentenceParser.mly[45,605+12]..[45,605+26])
                    Pexp_tuple
                    [
                      expression (src/sentenceParser.mly[45,605+12]..[45,605+15])
                        Pexp_ident "nto" (src/sentenceParser.mly[45,605+12]..[45,605+15])
                      expression (src/sentenceParser.mly[45,605+17]..[45,605+26])
                        Pexp_ident "terminals" (src/sentenceParser.mly[45,605+17]..[45,605+26])
                    ]
                  [
                    <case>
                      pattern (src/sentenceParser.mly[46,637+8]..[47,669+34])
                        Ppat_or
                        pattern (src/sentenceParser.mly[46,637+8]..[46,637+31])
                          Ppat_tuple
                          [
                            pattern (src/sentenceParser.mly[46,637+8]..[46,637+28])
                              Ppat_construct "Some" (src/sentenceParser.mly[46,637+8]..[46,637+12])
                              Some
                                []
                                pattern (src/sentenceParser.mly[46,637+13]..[46,637+28])
                                  Ppat_tuple
                                  [
                                    pattern (src/sentenceParser.mly[46,637+14]..[46,637+15])
                                      Ppat_any
                                    pattern (src/sentenceParser.mly[46,637+17]..[46,637+24])
                                      Ppat_var "opening" (src/sentenceParser.mly[46,637+17]..[46,637+24])
                                    pattern (src/sentenceParser.mly[46,637+26]..[46,637+27])
                                      Ppat_any
                                  ]
                            pattern (src/sentenceParser.mly[46,637+30]..[46,637+31])
                              Ppat_any
                          ]
                        pattern (src/sentenceParser.mly[47,669+8]..[47,669+34])
                          Ppat_tuple
                          [
                            pattern (src/sentenceParser.mly[47,669+8]..[47,669+12])
                              Ppat_construct "None" (src/sentenceParser.mly[47,669+8]..[47,669+12])
                              None
                            pattern (src/sentenceParser.mly[47,669+14]..[47,669+34])
                              Ppat_construct "::" (src/sentenceParser.mly[47,669+30]..[47,669+32])
                              Some
                                []
                                pattern (src/sentenceParser.mly[47,669+14]..[47,669+34]) ghost
                                  Ppat_tuple
                                  [
                                    pattern (src/sentenceParser.mly[47,669+14]..[47,669+29])
                                      Ppat_tuple
                                      [
                                        pattern (src/sentenceParser.mly[47,669+15]..[47,669+16])
                                          Ppat_any
                                        pattern (src/sentenceParser.mly[47,669+18]..[47,669+25])
                                          Ppat_var "opening" (src/sentenceParser.mly[47,669+18]..[47,669+25])
                                        pattern (src/sentenceParser.mly[47,669+27]..[47,669+28])
                                          Ppat_any
                                      ]
                                    pattern (src/sentenceParser.mly[47,669+33]..[47,669+34])
                                      Ppat_any
                                  ]
                          ]
                      expression (src/sentenceParser.mly[48,707+10]..[48,707+17])
                        Pexp_ident "opening" (src/sentenceParser.mly[48,707+10]..[48,707+17])
                    <case>
                      pattern (src/sentenceParser.mly[49,725+8]..[49,725+16])
                        Ppat_tuple
                        [
                          pattern (src/sentenceParser.mly[49,725+8]..[49,725+12])
                            Ppat_construct "None" (src/sentenceParser.mly[49,725+8]..[49,725+12])
                            None
                          pattern (src/sentenceParser.mly[49,725+14]..[49,725+16])
                            Ppat_construct "[]" (src/sentenceParser.mly[49,725+14]..[49,725+16])
                            None
                        ]
                      expression (src/sentenceParser.mly[50,745+10]..[50,745+26])
                        Pexp_ident "Lexing.dummy_pos" (src/sentenceParser.mly[50,745+10]..[50,745+26])
                  ]
              <def>
                pattern (src/sentenceParser.mly[51,792+8]..[51,792+15])
                  Ppat_var "closing" (src/sentenceParser.mly[51,792+8]..[51,792+15])
                expression (src/sentenceParser.mly[52,810+6]..[57,956+26])
                  Pexp_match
                  expression (src/sentenceParser.mly[52,810+12]..[52,810+35])
                    Pexp_tuple
                    [
                      expression (src/sentenceParser.mly[52,810+12]..[52,810+15])
                        Pexp_ident "nto" (src/sentenceParser.mly[52,810+12]..[52,810+15])
                      expression (src/sentenceParser.mly[52,810+17]..[52,810+35])
                        Pexp_apply
                        expression (src/sentenceParser.mly[52,810+17]..[52,810+25])
                          Pexp_ident "List.rev" (src/sentenceParser.mly[52,810+17]..[52,810+25])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.mly[52,810+26]..[52,810+35])
                              Pexp_ident "terminals" (src/sentenceParser.mly[52,810+26]..[52,810+35])
                        ]
                    ]
                  [
                    <case>
                      pattern (src/sentenceParser.mly[53,851+8]..[54,883+31])
                        Ppat_or
                        pattern (src/sentenceParser.mly[53,851+8]..[53,851+31])
                          Ppat_tuple
                          [
                            pattern (src/sentenceParser.mly[53,851+8]..[53,851+9])
                              Ppat_any
                            pattern (src/sentenceParser.mly[53,851+11]..[53,851+31])
                              Ppat_construct "::" (src/sentenceParser.mly[53,851+27]..[53,851+29])
                              Some
                                []
                                pattern (src/sentenceParser.mly[53,851+11]..[53,851+31]) ghost
                                  Ppat_tuple
                                  [
                                    pattern (src/sentenceParser.mly[53,851+11]..[53,851+26])
                                      Ppat_tuple
                                      [
                                        pattern (src/sentenceParser.mly[53,851+12]..[53,851+13])
                                          Ppat_any
                                        pattern (src/sentenceParser.mly[53,851+15]..[53,851+16])
                                          Ppat_any
                                        pattern (src/sentenceParser.mly[53,851+18]..[53,851+25])
                                          Ppat_var "closing" (src/sentenceParser.mly[53,851+18]..[53,851+25])
                                      ]
                                    pattern (src/sentenceParser.mly[53,851+30]..[53,851+31])
                                      Ppat_any
                                  ]
                          ]
                        pattern (src/sentenceParser.mly[54,883+8]..[54,883+31])
                          Ppat_tuple
                          [
                            pattern (src/sentenceParser.mly[54,883+8]..[54,883+28])
                              Ppat_construct "Some" (src/sentenceParser.mly[54,883+8]..[54,883+12])
                              Some
                                []
                                pattern (src/sentenceParser.mly[54,883+13]..[54,883+28])
                                  Ppat_tuple
                                  [
                                    pattern (src/sentenceParser.mly[54,883+14]..[54,883+15])
                                      Ppat_any
                                    pattern (src/sentenceParser.mly[54,883+17]..[54,883+18])
                                      Ppat_any
                                    pattern (src/sentenceParser.mly[54,883+20]..[54,883+27])
                                      Ppat_var "closing" (src/sentenceParser.mly[54,883+20]..[54,883+27])
                                  ]
                            pattern (src/sentenceParser.mly[54,883+30]..[54,883+31])
                              Ppat_any
                          ]
                      expression (src/sentenceParser.mly[55,918+10]..[55,918+17])
                        Pexp_ident "closing" (src/sentenceParser.mly[55,918+10]..[55,918+17])
                    <case>
                      pattern (src/sentenceParser.mly[56,936+8]..[56,936+16])
                        Ppat_tuple
                        [
                          pattern (src/sentenceParser.mly[56,936+8]..[56,936+12])
                            Ppat_construct "None" (src/sentenceParser.mly[56,936+8]..[56,936+12])
                            None
                          pattern (src/sentenceParser.mly[56,936+14]..[56,936+16])
                            Ppat_construct "[]" (src/sentenceParser.mly[56,936+14]..[56,936+16])
                            None
                        ]
                      expression (src/sentenceParser.mly[57,956+10]..[57,956+26])
                        Pexp_ident "Lexing.dummy_pos" (src/sentenceParser.mly[57,956+10]..[57,956+26])
                  ]
            ]
            expression (src/sentenceParser.mly[59,1010+4]..[60,1053+20])
              Pexp_tuple
              [
                expression (src/sentenceParser.mly[59,1010+4]..[59,1010+41])
                  Pexp_construct "::" (src/sentenceParser.mly[59,1010+5]..[59,1010+41]) ghost
                  Some
                    expression (src/sentenceParser.mly[59,1010+5]..[59,1010+41]) ghost
                      Pexp_tuple
                      [
                        expression (src/sentenceParser.mly[59,1010+5]..[59,1010+40])
                          Pexp_apply
                          expression (src/sentenceParser.mly[59,1010+5]..[59,1010+21])
                            Pexp_ident "Positions.import" (src/sentenceParser.mly[59,1010+5]..[59,1010+21])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.mly[59,1010+22]..[59,1010+40])
                                Pexp_tuple
                                [
                                  expression (src/sentenceParser.mly[59,1010+23]..[59,1010+30])
                                    Pexp_ident "opening" (src/sentenceParser.mly[59,1010+23]..[59,1010+30])
                                  expression (src/sentenceParser.mly[59,1010+32]..[59,1010+39])
                                    Pexp_ident "closing" (src/sentenceParser.mly[59,1010+32]..[59,1010+39])
                                ]
                          ]
                        expression (src/sentenceParser.mly[59,1010+40]..[59,1010+41]) ghost
                          Pexp_construct "[]" (src/sentenceParser.mly[59,1010+40]..[59,1010+41]) ghost
                          None
                      ]
                expression (src/sentenceParser.mly[60,1053+4]..[60,1053+20])
                  Pexp_tuple
                  [
                    expression (src/sentenceParser.mly[60,1053+5]..[60,1053+8])
                      Pexp_ident "nto" (src/sentenceParser.mly[60,1053+5]..[60,1053+8])
                    expression (src/sentenceParser.mly[60,1053+10]..[60,1053+19])
                      Pexp_ident "terminals" (src/sentenceParser.mly[60,1053+10]..[60,1053+19])
                  ]
              ]
    ]
  structure_item (src/sentenceParser.ml[49,1104+0]..[53,1181+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[49,1104+4]..[49,1104+18])
          Ppat_var "yytransl_const" (src/sentenceParser.ml[49,1104+4]..[49,1104+18])
        expression (src/sentenceParser.ml[49,1104+21]..[53,1181+7])
          Pexp_array
          [
            expression (src/sentenceParser.ml[50,1128+2]..[50,1128+5])
              Pexp_constant PConst_int (257,None)
            expression (src/sentenceParser.ml[51,1147+4]..[51,1147+5])
              Pexp_constant PConst_int (0,None)
            expression (src/sentenceParser.ml[52,1164+2]..[52,1164+5])
              Pexp_constant PConst_int (258,None)
            expression (src/sentenceParser.ml[53,1181+4]..[53,1181+5])
              Pexp_constant PConst_int (0,None)
          ]
    ]
  structure_item (src/sentenceParser.ml[55,1190+0]..[59,1282+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[55,1190+4]..[55,1190+18])
          Ppat_var "yytransl_block" (src/sentenceParser.ml[55,1190+4]..[55,1190+18])
        expression (src/sentenceParser.ml[55,1190+21]..[59,1282+7])
          Pexp_array
          [
            expression (src/sentenceParser.ml[56,1214+2]..[56,1214+5])
              Pexp_constant PConst_int (259,None)
            expression (src/sentenceParser.ml[57,1236+2]..[57,1236+5])
              Pexp_constant PConst_int (260,None)
            expression (src/sentenceParser.ml[58,1261+2]..[58,1261+5])
              Pexp_constant PConst_int (261,None)
            expression (src/sentenceParser.ml[59,1282+4]..[59,1282+5])
              Pexp_constant PConst_int (0,None)
          ]
    ]
  structure_item (src/sentenceParser.ml[61,1291+0]..[63,1380+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[61,1291+4]..[61,1291+9])
          Ppat_var "yylhs" (src/sentenceParser.ml[61,1291+4]..[61,1291+9])
        expression (src/sentenceParser.ml[61,1291+12]..[63,1380+41])
          Pexp_constant PConst_string("\255\255\004\000\005\000\005\000\005\000\002\000\003\000\003\000\001\000\001\000\006\000\006\000\000\000\000\000",(src/sentenceParser.ml[61,1291+13]..[63,1380+40]),None)
    ]
  structure_item (src/sentenceParser.ml[65,1423+0]..[67,1512+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[65,1423+4]..[65,1423+9])
          Ppat_var "yylen" (src/sentenceParser.ml[65,1423+4]..[65,1423+9])
        expression (src/sentenceParser.ml[65,1423+12]..[67,1512+41])
          Pexp_constant PConst_string("\002\000\002\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\002\000\000\000\002\000\002\000\002\000",(src/sentenceParser.ml[65,1423+13]..[67,1512+40]),None)
    ]
  structure_item (src/sentenceParser.ml[69,1555+0]..[72,1713+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[69,1555+4]..[69,1555+12])
          Ppat_var "yydefred" (src/sentenceParser.ml[69,1555+4]..[69,1555+12])
        expression (src/sentenceParser.ml[69,1555+15]..[72,1713+49])
          Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\012\000\000\000\000\000\005\000\000\000\r\000\000\000\011\000\000\000\t\000\004\000\003\000\001\000\000\000\b\000",(src/sentenceParser.ml[69,1555+16]..[72,1713+48]),None)
    ]
  structure_item (src/sentenceParser.ml[74,1764+0]..[75,1789+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[74,1764+4]..[74,1764+11])
          Ppat_var "yydgoto" (src/sentenceParser.ml[74,1764+4]..[74,1764+11])
        expression (src/sentenceParser.ml[74,1764+14]..[75,1789+49])
          Pexp_constant PConst_string("\003\000\011\000\012\000\b\000\r\000\014\000\t\000",(src/sentenceParser.ml[74,1764+15]..[75,1789+48]),None)
    ]
  structure_item (src/sentenceParser.ml[77,1840+0]..[80,1998+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[77,1840+4]..[77,1840+12])
          Ppat_var "yysindex" (src/sentenceParser.ml[77,1840+4]..[77,1840+12])
        expression (src/sentenceParser.ml[77,1840+15]..[80,1998+49])
          Pexp_constant PConst_string("\011\000\001\000\002\255\000\000\000\000\255\254\b\255\000\000\000\000\001\255\002\255\000\000\002\255\000\000\014\000\000\000\255\254\000\000\000\000\000\000\000\000\r\255\000\000",(src/sentenceParser.ml[77,1840+16]..[80,1998+48]),None)
    ]
  structure_item (src/sentenceParser.ml[82,2049+0]..[85,2207+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[82,2049+4]..[82,2049+12])
          Ppat_var "yyrindex" (src/sentenceParser.ml[82,2049+4]..[82,2049+12])
        expression (src/sentenceParser.ml[82,2049+15]..[85,2207+49])
          Pexp_constant PConst_string("\000\000\014\255\004\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000",(src/sentenceParser.ml[82,2049+16]..[85,2207+48]),None)
    ]
  structure_item (src/sentenceParser.ml[87,2258+0]..[88,2284+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[87,2258+4]..[87,2258+12])
          Ppat_var "yygindex" (src/sentenceParser.ml[87,2258+4]..[87,2258+12])
        expression (src/sentenceParser.ml[87,2258+15]..[88,2284+49])
          Pexp_constant PConst_string("\000\000\016\000\000\000\000\000\000\000\254\255\251\255",(src/sentenceParser.ml[87,2258+16]..[88,2284+48]),None)
    ]
  structure_item (src/sentenceParser.ml[90,2335+0]..[90,2335+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[90,2335+4]..[90,2335+15])
          Ppat_var "yytablesize" (src/sentenceParser.ml[90,2335+4]..[90,2335+15])
        expression (src/sentenceParser.ml[90,2335+18]..[90,2335+21])
          Pexp_constant PConst_int (262,None)
    ]
  structure_item (src/sentenceParser.ml[91,2357+0]..[124,4494+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[91,2357+4]..[91,2357+11])
          Ppat_var "yytable" (src/sentenceParser.ml[91,2357+4]..[91,2357+11])
        expression (src/sentenceParser.ml[91,2357+14]..[124,4494+49])
          Pexp_constant PConst_string("\015\000\004\000\005\000\017\000\002\000\005\000\006\000\n\000\018\000\016\000\019\000\021\000\001\000\002\000\020\000\022\000\nn\000",(src/sentenceParser.ml[91,2357+15]..[124,4494+48]),None)
    ]
  structure_item (src/sentenceParser.ml[126,4545+0]..[159,6682+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[126,4545+4]..[126,4545+11])
          Ppat_var "yycheck" (src/sentenceParser.ml[126,4545+4]..[126,4545+11])
        expression (src/sentenceParser.ml[126,4545+14]..[159,6682+49])
          Pexp_constant PConst_string("\005\000\000\000\003\001\002\001\000\000\003\001\004\001\005\001\nsrc/sentenceParser.ml[126,4545+15]..[159,6682+48]),None)
    ]
  structure_item (src/sentenceParser.ml[161,6733+0]..[165,6791+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[161,6733+4]..[161,6733+17])
          Ppat_var "yynames_const" (src/sentenceParser.ml[161,6733+4]..[161,6733+17])
        expression (src/sentenceParser.ml[161,6733+20]..[165,6791+3])
          Pexp_constant PConst_string("COLON\000EOF\000EOL\000",(src/sentenceParser.ml[161,6733+21]..[165,6791+2]),None)
    ]
  structure_item (src/sentenceParser.ml[167,6796+0]..[171,6869+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[167,6796+4]..[167,6796+17])
          Ppat_var "yynames_block" (src/sentenceParser.ml[167,6796+4]..[167,6796+17])
        expression (src/sentenceParser.ml[167,6796+20]..[171,6869+3])
          Pexp_constant PConst_string("TERMINAL\000NONTERMINAL\000COMMENT\000",(src/sentenceParser.ml[167,6796+21]..[171,6869+2]),None)
    ]
  structure_item (src/sentenceParser.ml[173,6874+0]..[257,9995+2])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[173,6874+4]..[173,6874+9])
          Ppat_var "yyact" (src/sentenceParser.ml[173,6874+4]..[173,6874+9])
        expression (src/sentenceParser.ml[173,6874+12]..[257,9995+2])
          Pexp_array
          [
            expression (src/sentenceParser.ml[174,6889+2]..[174,6889+30])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[174,6889+7]..[174,6889+8])
                Ppat_any
              expression (src/sentenceParser.ml[174,6889+12]..[174,6889+29])
                Pexp_apply
                expression (src/sentenceParser.ml[174,6889+12]..[174,6889+20])
                  Pexp_ident "failwith" (src/sentenceParser.ml[174,6889+12]..[174,6889+20])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[174,6889+21]..[174,6889+29])
                      Pexp_constant PConst_string("parser",(src/sentenceParser.ml[174,6889+22]..[174,6889+28]),None)
                ]
            expression (src/sentenceParser.ml[175,6920+2]..[181,7119+91])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[175,6920+7]..[175,6920+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[175,6920+7]..[175,6920+24])
              expression (src/sentenceParser.ml[176,6948+4]..[181,7119+90])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[176,6948+8]..[176,6948+10])
                      Ppat_var "_1" (src/sentenceParser.ml[176,6948+8]..[176,6948+10])
                    expression (src/sentenceParser.ml[176,6948+13]..[176,6948+84])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[176,6948+14]..[176,6948+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[176,6948+14]..[176,6948+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[176,6948+14]..[176,6948+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[176,6948+31]..[176,6948+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[176,6948+31]..[176,6948+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[176,6948+49]..[176,6948+50])
                              Pexp_constant PConst_int (1,None)
                        ]
                      core_type (src/sentenceParser.ml[176,6948+53]..[176,6948+83])
                        Ptyp_var located_sentences_or_comments
                ]
                expression (src/sentenceParser.ml[177,7036+4]..[181,7119+90])
                  Pexp_apply
                  expression (src/sentenceParser.ml[177,7036+4]..[177,7036+12])
                    Pexp_ident "Obj.repr" (src/sentenceParser.ml[177,7036+4]..[177,7036+12])
                  [
                    <arg>
                    Nolabel
                      expression (src/sentenceParser.ml[177,7036+12]..[181,7119+90])
                        Pexp_constraint
                        expression (src/sentenceParser.mly[81,7080+2]..[81,7080+8])
                          Pexp_ident "_1" (src/sentenceParser.mly[81,7080+4]..[81,7080+6])
                        core_type (src/sentenceParser.ml[181,7119+17]..[181,7119+89])
                          Ptyp_constr "list" (src/sentenceParser.ml[181,7119+85]..[181,7119+89])
                          [
                            core_type (src/sentenceParser.ml[181,7119+17]..[181,7119+84])
                              Ptyp_constr "SentenceParserAux.or_comment" (src/sentenceParser.ml[181,7119+56]..[181,7119+84])
                              [
                                core_type (src/sentenceParser.ml[181,7119+17]..[181,7119+55])
                                  Ptyp_constr "SentenceParserAux.located_raw_sentence" (src/sentenceParser.ml[181,7119+17]..[181,7119+55])
                                  []
                              ]
                          ]
                  ]
            expression (src/sentenceParser.ml[182,7211+2]..[187,7322+49])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[182,7211+7]..[182,7211+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[182,7211+7]..[182,7211+24])
              expression (src/sentenceParser.ml[183,7239+4]..[187,7322+48])
                Pexp_apply
                expression (src/sentenceParser.ml[183,7239+4]..[183,7239+12])
                  Pexp_ident "Obj.repr" (src/sentenceParser.ml[183,7239+4]..[183,7239+12])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[183,7239+12]..[187,7322+48])
                      Pexp_constraint
                      expression (src/sentenceParser.mly[85,7283+2]..[85,7283+8])
                        Pexp_construct "[]" (src/sentenceParser.mly[85,7283+4]..[85,7283+6])
                        None
                      core_type (src/sentenceParser.ml[187,7322+17]..[187,7322+47])
                        Ptyp_var located_sentences_or_comments
                ]
            expression (src/sentenceParser.ml[188,7372+2]..[195,7710+49])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[188,7372+7]..[188,7372+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[188,7372+7]..[188,7372+24])
              expression (src/sentenceParser.ml[189,7400+4]..[195,7710+48])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[189,7400+8]..[189,7400+10])
                      Ppat_var "_1" (src/sentenceParser.ml[189,7400+8]..[189,7400+10])
                    expression (src/sentenceParser.ml[189,7400+13]..[189,7400+74])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[189,7400+14]..[189,7400+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[189,7400+14]..[189,7400+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[189,7400+14]..[189,7400+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[189,7400+31]..[189,7400+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[189,7400+31]..[189,7400+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[189,7400+49]..[189,7400+50])
                              Pexp_constant PConst_int (1,None)
                        ]
                      core_type (src/sentenceParser.ml[189,7400+53]..[189,7400+73])
                        Ptyp_constr "located_raw_sentence" (src/sentenceParser.ml[189,7400+53]..[189,7400+73])
                        []
                ]
                expression (src/sentenceParser.ml[190,7478+4]..[195,7710+48])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/sentenceParser.ml[190,7478+8]..[190,7478+10])
                        Ppat_var "_2" (src/sentenceParser.ml[190,7478+8]..[190,7478+10])
                      expression (src/sentenceParser.ml[190,7478+13]..[190,7478+84])
                        Pexp_constraint
                        expression (src/sentenceParser.ml[190,7478+14]..[190,7478+50])
                          Pexp_apply
                          expression (src/sentenceParser.ml[190,7478+14]..[190,7478+30])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[190,7478+14]..[190,7478+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[190,7478+31]..[190,7478+48])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[190,7478+31]..[190,7478+48])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[190,7478+49]..[190,7478+50])
                                Pexp_constant PConst_int (0,None)
                          ]
                        core_type (src/sentenceParser.ml[190,7478+53]..[190,7478+83])
                          Ptyp_var located_sentences_or_comments
                  ]
                  expression (src/sentenceParser.ml[191,7566+4]..[195,7710+48])
                    Pexp_apply
                    expression (src/sentenceParser.ml[191,7566+4]..[191,7566+12])
                      Pexp_ident "Obj.repr" (src/sentenceParser.ml[191,7566+4]..[191,7566+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/sentenceParser.ml[191,7566+12]..[195,7710+48])
                          Pexp_constraint
                          expression (src/sentenceParser.mly[86,7610+49]..[86,7610+69])
                            Pexp_construct "::" (src/sentenceParser.mly[86,7610+62]..[86,7610+64])
                            Some
                              expression (src/sentenceParser.mly[86,7610+51]..[86,7610+67]) ghost
                                Pexp_tuple
                                [
                                  expression (src/sentenceParser.mly[86,7610+51]..[86,7610+61])
                                    Pexp_construct "Thing" (src/sentenceParser.mly[86,7610+51]..[86,7610+56])
                                    Some
                                      expression (src/sentenceParser.mly[86,7610+59]..[86,7610+61])
                                        Pexp_ident "_1" (src/sentenceParser.mly[86,7610+59]..[86,7610+61])
                                  expression (src/sentenceParser.mly[86,7610+65]..[86,7610+67])
                                    Pexp_ident "_2" (src/sentenceParser.mly[86,7610+65]..[86,7610+67])
                                ]
                          core_type (src/sentenceParser.ml[195,7710+17]..[195,7710+47])
                            Ptyp_var located_sentences_or_comments
                    ]
            expression (src/sentenceParser.ml[196,7760+2]..[203,8084+49])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[196,7760+7]..[196,7760+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[196,7760+7]..[196,7760+24])
              expression (src/sentenceParser.ml[197,7788+4]..[203,8084+48])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[197,7788+8]..[197,7788+10])
                      Ppat_var "_1" (src/sentenceParser.ml[197,7788+8]..[197,7788+10])
                    expression (src/sentenceParser.ml[197,7788+13]..[197,7788+60])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[197,7788+14]..[197,7788+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[197,7788+14]..[197,7788+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[197,7788+14]..[197,7788+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[197,7788+31]..[197,7788+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[197,7788+31]..[197,7788+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[197,7788+49]..[197,7788+50])
                              Pexp_constant PConst_int (1,None)
                        ]
                      core_type (src/sentenceParser.ml[197,7788+53]..[197,7788+59])
                        Ptyp_constr "string" (src/sentenceParser.ml[197,7788+53]..[197,7788+59])
                        []
                ]
                expression (src/sentenceParser.ml[198,7852+4]..[203,8084+48])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/sentenceParser.ml[198,7852+8]..[198,7852+10])
                        Ppat_var "_2" (src/sentenceParser.ml[198,7852+8]..[198,7852+10])
                      expression (src/sentenceParser.ml[198,7852+13]..[198,7852+84])
                        Pexp_constraint
                        expression (src/sentenceParser.ml[198,7852+14]..[198,7852+50])
                          Pexp_apply
                          expression (src/sentenceParser.ml[198,7852+14]..[198,7852+30])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[198,7852+14]..[198,7852+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[198,7852+31]..[198,7852+48])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[198,7852+31]..[198,7852+48])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[198,7852+49]..[198,7852+50])
                                Pexp_constant PConst_int (0,None)
                          ]
                        core_type (src/sentenceParser.ml[198,7852+53]..[198,7852+83])
                          Ptyp_var located_sentences_or_comments
                  ]
                  expression (src/sentenceParser.ml[199,7940+4]..[203,8084+48])
                    Pexp_apply
                    expression (src/sentenceParser.ml[199,7940+4]..[199,7940+12])
                      Pexp_ident "Obj.repr" (src/sentenceParser.ml[199,7940+4]..[199,7940+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/sentenceParser.ml[199,7940+12]..[203,8084+48])
                          Pexp_constraint
                          expression (src/sentenceParser.mly[87,7984+49]..[87,7984+69])
                            Pexp_construct "::" (src/sentenceParser.mly[87,7984+62]..[87,7984+64])
                            Some
                              expression (src/sentenceParser.mly[87,7984+51]..[87,7984+67]) ghost
                                Pexp_tuple
                                [
                                  expression (src/sentenceParser.mly[87,7984+51]..[87,7984+61])
                                    Pexp_construct "Comment" (src/sentenceParser.mly[87,7984+51]..[87,7984+58])
                                    Some
                                      expression (src/sentenceParser.mly[87,7984+59]..[87,7984+61])
                                        Pexp_ident "_1" (src/sentenceParser.mly[87,7984+59]..[87,7984+61])
                                  expression (src/sentenceParser.mly[87,7984+65]..[87,7984+67])
                                    Pexp_ident "_2" (src/sentenceParser.mly[87,7984+65]..[87,7984+67])
                                ]
                          core_type (src/sentenceParser.ml[203,8084+17]..[203,8084+47])
                            Ptyp_var located_sentences_or_comments
                    ]
            expression (src/sentenceParser.ml[204,8134+2]..[210,8331+39])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[204,8134+7]..[204,8134+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[204,8134+7]..[204,8134+24])
              expression (src/sentenceParser.ml[205,8162+4]..[210,8331+38])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[205,8162+8]..[205,8162+10])
                      Ppat_var "_1" (src/sentenceParser.ml[205,8162+8]..[205,8162+10])
                    expression (src/sentenceParser.ml[205,8162+13]..[205,8162+66])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[205,8162+14]..[205,8162+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[205,8162+14]..[205,8162+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[205,8162+14]..[205,8162+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[205,8162+31]..[205,8162+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[205,8162+31]..[205,8162+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[205,8162+49]..[205,8162+50])
                              Pexp_constant PConst_int (0,None)
                        ]
                      core_type (src/sentenceParser.ml[205,8162+53]..[205,8162+65])
                        Ptyp_constr "raw_sentence" (src/sentenceParser.ml[205,8162+53]..[205,8162+65])
                        []
                ]
                expression (src/sentenceParser.ml[206,8232+4]..[210,8331+38])
                  Pexp_apply
                  expression (src/sentenceParser.ml[206,8232+4]..[206,8232+12])
                    Pexp_ident "Obj.repr" (src/sentenceParser.ml[206,8232+4]..[206,8232+12])
                  [
                    <arg>
                    Nolabel
                      expression (src/sentenceParser.ml[206,8232+12]..[210,8331+38])
                        Pexp_constraint
                        expression (src/sentenceParser.mly[91,8276+2]..[91,8276+24])
                          Pexp_apply
                          expression (src/sentenceParser.mly[91,8276+4]..[91,8276+19])
                            Pexp_ident "locate_sentence" (src/sentenceParser.mly[91,8276+4]..[91,8276+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.mly[91,8276+20]..[91,8276+22])
                                Pexp_ident "_1" (src/sentenceParser.mly[91,8276+20]..[91,8276+22])
                          ]
                        core_type (src/sentenceParser.ml[210,8331+17]..[210,8331+37])
                          Ptyp_constr "located_raw_sentence" (src/sentenceParser.ml[210,8331+17]..[210,8331+37])
                          []
                  ]
            expression (src/sentenceParser.ml[211,8371+2]..[216,8486+56])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[211,8371+7]..[211,8371+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[211,8371+7]..[211,8371+24])
              expression (src/sentenceParser.ml[212,8399+4]..[216,8486+55])
                Pexp_apply
                expression (src/sentenceParser.ml[212,8399+4]..[212,8399+12])
                  Pexp_ident "Obj.repr" (src/sentenceParser.ml[212,8399+4]..[212,8399+12])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[212,8399+12]..[216,8486+55])
                      Pexp_constraint
                      expression (src/sentenceParser.mly[96,8443+4]..[96,8443+12])
                        Pexp_construct "None" (src/sentenceParser.mly[96,8443+6]..[96,8443+10])
                        None
                      core_type (src/sentenceParser.ml[216,8486+17]..[216,8486+54])
                        Ptyp_constr "option" (src/sentenceParser.ml[216,8486+48]..[216,8486+54])
                        [
                          core_type (src/sentenceParser.ml[216,8486+17]..[216,8486+47])
                            Ptyp_constr "SentenceParserAux.raw_sentence" (src/sentenceParser.ml[216,8486+17]..[216,8486+47])
                            []
                        ]
                ]
            expression (src/sentenceParser.ml[217,8543+2]..[223,8731+56])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[217,8543+7]..[217,8543+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[217,8543+7]..[217,8543+24])
              expression (src/sentenceParser.ml[218,8571+4]..[223,8731+55])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[218,8571+8]..[218,8571+10])
                      Ppat_var "_1" (src/sentenceParser.ml[218,8571+8]..[218,8571+10])
                    expression (src/sentenceParser.ml[218,8571+13]..[218,8571+66])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[218,8571+14]..[218,8571+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[218,8571+14]..[218,8571+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[218,8571+14]..[218,8571+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[218,8571+31]..[218,8571+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[218,8571+31]..[218,8571+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[218,8571+49]..[218,8571+50])
                              Pexp_constant PConst_int (0,None)
                        ]
                      core_type (src/sentenceParser.ml[218,8571+53]..[218,8571+65])
                        Ptyp_constr "raw_sentence" (src/sentenceParser.ml[218,8571+53]..[218,8571+65])
                        []
                ]
                expression (src/sentenceParser.ml[219,8641+4]..[223,8731+55])
                  Pexp_apply
                  expression (src/sentenceParser.ml[219,8641+4]..[219,8641+12])
                    Pexp_ident "Obj.repr" (src/sentenceParser.ml[219,8641+4]..[219,8641+12])
                  [
                    <arg>
                    Nolabel
                      expression (src/sentenceParser.ml[219,8641+12]..[223,8731+55])
                        Pexp_constraint
                        expression (src/sentenceParser.mly[98,8685+4]..[98,8685+15])
                          Pexp_construct "Some" (src/sentenceParser.mly[98,8685+6]..[98,8685+10])
                          Some
                            expression (src/sentenceParser.mly[98,8685+11]..[98,8685+13])
                              Pexp_ident "_1" (src/sentenceParser.mly[98,8685+11]..[98,8685+13])
                        core_type (src/sentenceParser.ml[223,8731+17]..[223,8731+54])
                          Ptyp_constr "option" (src/sentenceParser.ml[223,8731+48]..[223,8731+54])
                          [
                            core_type (src/sentenceParser.ml[223,8731+17]..[223,8731+47])
                              Ptyp_constr "SentenceParserAux.raw_sentence" (src/sentenceParser.ml[223,8731+17]..[223,8731+47])
                              []
                          ]
                  ]
            expression (src/sentenceParser.ml[224,8788+2]..[231,9065+31])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[224,8788+7]..[224,8788+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[224,8788+7]..[224,8788+24])
              expression (src/sentenceParser.ml[225,8816+4]..[231,9065+30])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[225,8816+8]..[225,8816+10])
                      Ppat_var "_1" (src/sentenceParser.ml[225,8816+8]..[225,8816+10])
                    expression (src/sentenceParser.ml[225,8816+13]..[225,8816+82])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[225,8816+14]..[225,8816+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[225,8816+14]..[225,8816+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[225,8816+14]..[225,8816+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[225,8816+31]..[225,8816+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[225,8816+31]..[225,8816+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[225,8816+49]..[225,8816+50])
                              Pexp_constant PConst_int (3,None)
                        ]
                      core_type (src/sentenceParser.ml[225,8816+53]..[225,8816+81])
                        Ptyp_constr "SentenceParserAux.raw_symbol" (src/sentenceParser.ml[225,8816+53]..[225,8816+81])
                        []
                ]
                expression (src/sentenceParser.ml[226,8902+4]..[231,9065+30])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/sentenceParser.ml[226,8902+8]..[226,8902+10])
                        Ppat_var "_3" (src/sentenceParser.ml[226,8902+8]..[226,8902+10])
                      expression (src/sentenceParser.ml[226,8902+13]..[226,8902+64])
                        Pexp_constraint
                        expression (src/sentenceParser.ml[226,8902+14]..[226,8902+50])
                          Pexp_apply
                          expression (src/sentenceParser.ml[226,8902+14]..[226,8902+30])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[226,8902+14]..[226,8902+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[226,8902+31]..[226,8902+48])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[226,8902+31]..[226,8902+48])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[226,8902+49]..[226,8902+50])
                                Pexp_constant PConst_int (1,None)
                          ]
                        core_type (src/sentenceParser.ml[226,8902+53]..[226,8902+63])
                          Ptyp_var terminals
                  ]
                  expression (src/sentenceParser.ml[227,8970+4]..[231,9065+30])
                    Pexp_apply
                    expression (src/sentenceParser.ml[227,8970+4]..[227,8970+12])
                      Pexp_ident "Obj.repr" (src/sentenceParser.ml[227,8970+4]..[227,8970+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/sentenceParser.ml[227,8970+12]..[231,9065+30])
                          Pexp_constraint
                          expression (src/sentenceParser.mly[104,9015+4]..[104,9015+19])
                            Pexp_tuple
                            [
                              expression (src/sentenceParser.mly[104,9015+6]..[104,9015+13])
                                Pexp_construct "Some" (src/sentenceParser.mly[104,9015+6]..[104,9015+10])
                                Some
                                  expression (src/sentenceParser.mly[104,9015+11]..[104,9015+13])
                                    Pexp_ident "_1" (src/sentenceParser.mly[104,9015+11]..[104,9015+13])
                              expression (src/sentenceParser.mly[104,9015+15]..[104,9015+17])
                                Pexp_ident "_3" (src/sentenceParser.mly[104,9015+15]..[104,9015+17])
                            ]
                          core_type (src/sentenceParser.ml[231,9065+17]..[231,9065+29])
                            Ptyp_constr "raw_sentence" (src/sentenceParser.ml[231,9065+17]..[231,9065+29])
                            []
                    ]
            expression (src/sentenceParser.ml[232,9097+2]..[238,9285+31])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[232,9097+7]..[232,9097+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[232,9097+7]..[232,9097+24])
              expression (src/sentenceParser.ml[233,9125+4]..[238,9285+30])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[233,9125+8]..[233,9125+10])
                      Ppat_var "_1" (src/sentenceParser.ml[233,9125+8]..[233,9125+10])
                    expression (src/sentenceParser.ml[233,9125+13]..[233,9125+64])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[233,9125+14]..[233,9125+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[233,9125+14]..[233,9125+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[233,9125+14]..[233,9125+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[233,9125+31]..[233,9125+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[233,9125+31]..[233,9125+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[233,9125+49]..[233,9125+50])
                              Pexp_constant PConst_int (1,None)
                        ]
                      core_type (src/sentenceParser.ml[233,9125+53]..[233,9125+63])
                        Ptyp_var terminals
                ]
                expression (src/sentenceParser.ml[234,9193+4]..[238,9285+30])
                  Pexp_apply
                  expression (src/sentenceParser.ml[234,9193+4]..[234,9193+12])
                    Pexp_ident "Obj.repr" (src/sentenceParser.ml[234,9193+4]..[234,9193+12])
                  [
                    <arg>
                    Nolabel
                      expression (src/sentenceParser.ml[234,9193+12]..[238,9285+30])
                        Pexp_constraint
                        expression (src/sentenceParser.mly[106,9238+4]..[106,9238+16])
                          Pexp_tuple
                          [
                            expression (src/sentenceParser.mly[106,9238+6]..[106,9238+10])
                              Pexp_construct "None" (src/sentenceParser.mly[106,9238+6]..[106,9238+10])
                              None
                            expression (src/sentenceParser.mly[106,9238+12]..[106,9238+14])
                              Pexp_ident "_1" (src/sentenceParser.mly[106,9238+12]..[106,9238+14])
                          ]
                        core_type (src/sentenceParser.ml[238,9285+17]..[238,9285+29])
                          Ptyp_constr "raw_sentence" (src/sentenceParser.ml[238,9285+17]..[238,9285+29])
                          []
                  ]
            expression (src/sentenceParser.ml[239,9317+2]..[244,9431+29])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[239,9317+7]..[239,9317+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[239,9317+7]..[239,9317+24])
              expression (src/sentenceParser.ml[240,9345+4]..[244,9431+28])
                Pexp_apply
                expression (src/sentenceParser.ml[240,9345+4]..[240,9345+12])
                  Pexp_ident "Obj.repr" (src/sentenceParser.ml[240,9345+4]..[240,9345+12])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[240,9345+12]..[244,9431+28])
                      Pexp_constraint
                      expression (src/sentenceParser.mly[111,9390+4]..[111,9390+10])
                        Pexp_construct "[]" (src/sentenceParser.mly[111,9390+6]..[111,9390+8])
                        None
                      core_type (src/sentenceParser.ml[244,9431+17]..[244,9431+27])
                        Ptyp_var terminals
                ]
            expression (src/sentenceParser.ml[245,9461+2]..[252,9735+29])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[245,9461+7]..[245,9461+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[245,9461+7]..[245,9461+24])
              expression (src/sentenceParser.ml[246,9489+4]..[252,9735+28])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.ml[246,9489+8]..[246,9489+10])
                      Ppat_var "_1" (src/sentenceParser.ml[246,9489+8]..[246,9489+10])
                    expression (src/sentenceParser.ml[246,9489+13]..[246,9489+82])
                      Pexp_constraint
                      expression (src/sentenceParser.ml[246,9489+14]..[246,9489+50])
                        Pexp_apply
                        expression (src/sentenceParser.ml[246,9489+14]..[246,9489+30])
                          Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[246,9489+14]..[246,9489+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[246,9489+31]..[246,9489+48])
                              Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[246,9489+31]..[246,9489+48])
                          <arg>
                          Nolabel
                            expression (src/sentenceParser.ml[246,9489+49]..[246,9489+50])
                              Pexp_constant PConst_int (1,None)
                        ]
                      core_type (src/sentenceParser.ml[246,9489+53]..[246,9489+81])
                        Ptyp_constr "SentenceParserAux.raw_symbol" (src/sentenceParser.ml[246,9489+53]..[246,9489+81])
                        []
                ]
                expression (src/sentenceParser.ml[247,9575+4]..[252,9735+28])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/sentenceParser.ml[247,9575+8]..[247,9575+10])
                        Ppat_var "_2" (src/sentenceParser.ml[247,9575+8]..[247,9575+10])
                      expression (src/sentenceParser.ml[247,9575+13]..[247,9575+64])
                        Pexp_constraint
                        expression (src/sentenceParser.ml[247,9575+14]..[247,9575+50])
                          Pexp_apply
                          expression (src/sentenceParser.ml[247,9575+14]..[247,9575+30])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[247,9575+14]..[247,9575+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[247,9575+31]..[247,9575+48])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[247,9575+31]..[247,9575+48])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[247,9575+49]..[247,9575+50])
                                Pexp_constant PConst_int (0,None)
                          ]
                        core_type (src/sentenceParser.ml[247,9575+53]..[247,9575+63])
                          Ptyp_var terminals
                  ]
                  expression (src/sentenceParser.ml[248,9643+4]..[252,9735+28])
                    Pexp_apply
                    expression (src/sentenceParser.ml[248,9643+4]..[248,9643+12])
                      Pexp_ident "Obj.repr" (src/sentenceParser.ml[248,9643+4]..[248,9643+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/sentenceParser.ml[248,9643+12]..[252,9735+28])
                          Pexp_constraint
                          expression (src/sentenceParser.mly[113,9688+4]..[113,9688+16])
                            Pexp_construct "::" (src/sentenceParser.mly[113,9688+9]..[113,9688+11])
                            Some
                              expression (src/sentenceParser.mly[113,9688+6]..[113,9688+14]) ghost
                                Pexp_tuple
                                [
                                  expression (src/sentenceParser.mly[113,9688+6]..[113,9688+8])
                                    Pexp_ident "_1" (src/sentenceParser.mly[113,9688+6]..[113,9688+8])
                                  expression (src/sentenceParser.mly[113,9688+12]..[113,9688+14])
                                    Pexp_ident "_2" (src/sentenceParser.mly[113,9688+12]..[113,9688+14])
                                ]
                          core_type (src/sentenceParser.ml[252,9735+17]..[252,9735+27])
                            Ptyp_var terminals
                    ]
            expression (src/sentenceParser.ml[254,9795+2]..[254,9795+90])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[254,9795+7]..[254,9795+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[254,9795+7]..[254,9795+24])
              expression (src/sentenceParser.ml[254,9795+28]..[254,9795+89])
                Pexp_apply
                expression (src/sentenceParser.ml[254,9795+28]..[254,9795+33])
                  Pexp_ident "raise" (src/sentenceParser.ml[254,9795+28]..[254,9795+33])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[254,9795+34]..[254,9795+89])
                      Pexp_construct "Parsing.YYexit" (src/sentenceParser.ml[254,9795+35]..[254,9795+49])
                      Some
                        expression (src/sentenceParser.ml[254,9795+50]..[254,9795+88])
                          Pexp_apply
                          expression (src/sentenceParser.ml[254,9795+51]..[254,9795+67])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[254,9795+51]..[254,9795+67])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[254,9795+68]..[254,9795+85])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[254,9795+68]..[254,9795+85])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[254,9795+86]..[254,9795+87])
                                Pexp_constant PConst_int (0,None)
                          ]
                ]
            expression (src/sentenceParser.ml[256,9904+2]..[256,9904+90])
              Pexp_fun
              Nolabel
              None
              pattern (src/sentenceParser.ml[256,9904+7]..[256,9904+24])
                Ppat_var "__caml_parser_env" (src/sentenceParser.ml[256,9904+7]..[256,9904+24])
              expression (src/sentenceParser.ml[256,9904+28]..[256,9904+89])
                Pexp_apply
                expression (src/sentenceParser.ml[256,9904+28]..[256,9904+33])
                  Pexp_ident "raise" (src/sentenceParser.ml[256,9904+28]..[256,9904+33])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[256,9904+34]..[256,9904+89])
                      Pexp_construct "Parsing.YYexit" (src/sentenceParser.ml[256,9904+35]..[256,9904+49])
                      Some
                        expression (src/sentenceParser.ml[256,9904+50]..[256,9904+88])
                          Pexp_apply
                          expression (src/sentenceParser.ml[256,9904+51]..[256,9904+67])
                            Pexp_ident "Parsing.peek_val" (src/sentenceParser.ml[256,9904+51]..[256,9904+67])
                          [
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[256,9904+68]..[256,9904+85])
                                Pexp_ident "__caml_parser_env" (src/sentenceParser.ml[256,9904+68]..[256,9904+85])
                            <arg>
                            Nolabel
                              expression (src/sentenceParser.ml[256,9904+86]..[256,9904+87])
                                Pexp_constant PConst_int (0,None)
                          ]
                ]
          ]
    ]
  structure_item (src/sentenceParser.ml[258,9998+0]..[274,10479+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[258,9998+4]..[258,9998+12])
          Ppat_var "yytables" (src/sentenceParser.ml[258,9998+4]..[258,9998+12])
        expression (src/sentenceParser.ml[259,10013+2]..[274,10479+39])
          Pexp_record
          [
            "Parsing.actions" (src/sentenceParser.ml[259,10013+4]..[259,10013+19])
              expression (src/sentenceParser.ml[259,10013+20]..[259,10013+25])
                Pexp_ident "yyact" (src/sentenceParser.ml[259,10013+20]..[259,10013+25])
            "Parsing.transl_const" (src/sentenceParser.ml[260,10040+4]..[260,10040+24])
              expression (src/sentenceParser.ml[260,10040+25]..[260,10040+39])
                Pexp_ident "yytransl_const" (src/sentenceParser.ml[260,10040+25]..[260,10040+39])
            "Parsing.transl_block" (src/sentenceParser.ml[261,10081+4]..[261,10081+24])
              expression (src/sentenceParser.ml[261,10081+25]..[261,10081+39])
                Pexp_ident "yytransl_block" (src/sentenceParser.ml[261,10081+25]..[261,10081+39])
            "Parsing.lhs" (src/sentenceParser.ml[262,10122+4]..[262,10122+15])
              expression (src/sentenceParser.ml[262,10122+16]..[262,10122+21])
                Pexp_ident "yylhs" (src/sentenceParser.ml[262,10122+16]..[262,10122+21])
            "Parsing.len" (src/sentenceParser.ml[263,10145+4]..[263,10145+15])
              expression (src/sentenceParser.ml[263,10145+16]..[263,10145+21])
                Pexp_ident "yylen" (src/sentenceParser.ml[263,10145+16]..[263,10145+21])
            "Parsing.defred" (src/sentenceParser.ml[264,10168+4]..[264,10168+18])
              expression (src/sentenceParser.ml[264,10168+19]..[264,10168+27])
                Pexp_ident "yydefred" (src/sentenceParser.ml[264,10168+19]..[264,10168+27])
            "Parsing.dgoto" (src/sentenceParser.ml[265,10197+4]..[265,10197+17])
              expression (src/sentenceParser.ml[265,10197+18]..[265,10197+25])
                Pexp_ident "yydgoto" (src/sentenceParser.ml[265,10197+18]..[265,10197+25])
            "Parsing.sindex" (src/sentenceParser.ml[266,10224+4]..[266,10224+18])
              expression (src/sentenceParser.ml[266,10224+19]..[266,10224+27])
                Pexp_ident "yysindex" (src/sentenceParser.ml[266,10224+19]..[266,10224+27])
            "Parsing.rindex" (src/sentenceParser.ml[267,10253+4]..[267,10253+18])
              expression (src/sentenceParser.ml[267,10253+19]..[267,10253+27])
                Pexp_ident "yyrindex" (src/sentenceParser.ml[267,10253+19]..[267,10253+27])
            "Parsing.gindex" (src/sentenceParser.ml[268,10282+4]..[268,10282+18])
              expression (src/sentenceParser.ml[268,10282+19]..[268,10282+27])
                Pexp_ident "yygindex" (src/sentenceParser.ml[268,10282+19]..[268,10282+27])
            "Parsing.tablesize" (src/sentenceParser.ml[269,10311+4]..[269,10311+21])
              expression (src/sentenceParser.ml[269,10311+22]..[269,10311+33])
                Pexp_ident "yytablesize" (src/sentenceParser.ml[269,10311+22]..[269,10311+33])
            "Parsing.table" (src/sentenceParser.ml[270,10346+4]..[270,10346+17])
              expression (src/sentenceParser.ml[270,10346+18]..[270,10346+25])
                Pexp_ident "yytable" (src/sentenceParser.ml[270,10346+18]..[270,10346+25])
            "Parsing.check" (src/sentenceParser.ml[271,10373+4]..[271,10373+17])
              expression (src/sentenceParser.ml[271,10373+18]..[271,10373+25])
                Pexp_ident "yycheck" (src/sentenceParser.ml[271,10373+18]..[271,10373+25])
            "Parsing.error_function" (src/sentenceParser.ml[272,10400+4]..[272,10400+26])
              expression (src/sentenceParser.ml[272,10400+27]..[272,10400+38])
                Pexp_ident "parse_error" (src/sentenceParser.ml[272,10400+27]..[272,10400+38])
            "Parsing.names_const" (src/sentenceParser.ml[273,10440+4]..[273,10440+23])
              expression (src/sentenceParser.ml[273,10440+24]..[273,10440+37])
                Pexp_ident "yynames_const" (src/sentenceParser.ml[273,10440+24]..[273,10440+37])
            "Parsing.names_block" (src/sentenceParser.ml[274,10479+4]..[274,10479+23])
              expression (src/sentenceParser.ml[274,10479+24]..[274,10479+37])
                Pexp_ident "yynames_block" (src/sentenceParser.ml[274,10479+24]..[274,10479+37])
          ]
          None
    ]
  structure_item (src/sentenceParser.ml[275,10519+0]..[276,10602+85])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[275,10519+4]..[275,10519+21])
          Ppat_var "optional_sentence" (src/sentenceParser.ml[275,10519+4]..[275,10519+21])
        expression (src/sentenceParser.ml[275,10519+22]..[276,10602+85]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/sentenceParser.ml[275,10519+22]..[275,10519+55])
            Ppat_constraint
            pattern (src/sentenceParser.ml[275,10519+23]..[275,10519+29])
              Ppat_var "lexfun" (src/sentenceParser.ml[275,10519+23]..[275,10519+29])
            core_type (src/sentenceParser.ml[275,10519+32]..[275,10519+54])
              Ptyp_arrow
              Nolabel
              core_type (src/sentenceParser.ml[275,10519+32]..[275,10519+45])
                Ptyp_constr "Lexing.lexbuf" (src/sentenceParser.ml[275,10519+32]..[275,10519+45])
                []
              core_type (src/sentenceParser.ml[275,10519+49]..[275,10519+54])
                Ptyp_constr "token" (src/sentenceParser.ml[275,10519+49]..[275,10519+54])
                []
          expression (src/sentenceParser.ml[275,10519+56]..[276,10602+85]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/sentenceParser.ml[275,10519+56]..[275,10519+80])
              Ppat_constraint
              pattern (src/sentenceParser.ml[275,10519+57]..[275,10519+63])
                Ppat_var "lexbuf" (src/sentenceParser.ml[275,10519+57]..[275,10519+63])
              core_type (src/sentenceParser.ml[275,10519+66]..[275,10519+79])
                Ptyp_constr "Lexing.lexbuf" (src/sentenceParser.ml[275,10519+66]..[275,10519+79])
                []
            expression (src/sentenceParser.ml[276,10602+3]..[276,10602+85])
              Pexp_constraint
              expression (src/sentenceParser.ml[276,10602+4]..[276,10602+44])
                Pexp_apply
                expression (src/sentenceParser.ml[276,10602+4]..[276,10602+19])
                  Pexp_ident "Parsing.yyparse" (src/sentenceParser.ml[276,10602+4]..[276,10602+19])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[276,10602+20]..[276,10602+28])
                      Pexp_ident "yytables" (src/sentenceParser.ml[276,10602+20]..[276,10602+28])
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[276,10602+29]..[276,10602+30])
                      Pexp_constant PConst_int (1,None)
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[276,10602+31]..[276,10602+37])
                      Pexp_ident "lexfun" (src/sentenceParser.ml[276,10602+31]..[276,10602+37])
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[276,10602+38]..[276,10602+44])
                      Pexp_ident "lexbuf" (src/sentenceParser.ml[276,10602+38]..[276,10602+44])
                ]
              core_type (src/sentenceParser.ml[276,10602+47]..[276,10602+84])
                Ptyp_constr "option" (src/sentenceParser.ml[276,10602+78]..[276,10602+84])
                [
                  core_type (src/sentenceParser.ml[276,10602+47]..[276,10602+77])
                    Ptyp_constr "SentenceParserAux.raw_sentence" (src/sentenceParser.ml[276,10602+47]..[276,10602+77])
                    []
                ]
    ]
  structure_item (src/sentenceParser.ml[277,10688+0]..[278,10759+120])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[277,10688+4]..[277,10688+9])
          Ppat_var "entry" (src/sentenceParser.ml[277,10688+4]..[277,10688+9])
        expression (src/sentenceParser.ml[277,10688+10]..[278,10759+120]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/sentenceParser.ml[277,10688+10]..[277,10688+43])
            Ppat_constraint
            pattern (src/sentenceParser.ml[277,10688+11]..[277,10688+17])
              Ppat_var "lexfun" (src/sentenceParser.ml[277,10688+11]..[277,10688+17])
            core_type (src/sentenceParser.ml[277,10688+20]..[277,10688+42])
              Ptyp_arrow
              Nolabel
              core_type (src/sentenceParser.ml[277,10688+20]..[277,10688+33])
                Ptyp_constr "Lexing.lexbuf" (src/sentenceParser.ml[277,10688+20]..[277,10688+33])
                []
              core_type (src/sentenceParser.ml[277,10688+37]..[277,10688+42])
                Ptyp_constr "token" (src/sentenceParser.ml[277,10688+37]..[277,10688+42])
                []
          expression (src/sentenceParser.ml[277,10688+44]..[278,10759+120]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/sentenceParser.ml[277,10688+44]..[277,10688+68])
              Ppat_constraint
              pattern (src/sentenceParser.ml[277,10688+45]..[277,10688+51])
                Ppat_var "lexbuf" (src/sentenceParser.ml[277,10688+45]..[277,10688+51])
              core_type (src/sentenceParser.ml[277,10688+54]..[277,10688+67])
                Ptyp_constr "Lexing.lexbuf" (src/sentenceParser.ml[277,10688+54]..[277,10688+67])
                []
            expression (src/sentenceParser.ml[278,10759+3]..[278,10759+120])
              Pexp_constraint
              expression (src/sentenceParser.ml[278,10759+4]..[278,10759+44])
                Pexp_apply
                expression (src/sentenceParser.ml[278,10759+4]..[278,10759+19])
                  Pexp_ident "Parsing.yyparse" (src/sentenceParser.ml[278,10759+4]..[278,10759+19])
                [
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[278,10759+20]..[278,10759+28])
                      Pexp_ident "yytables" (src/sentenceParser.ml[278,10759+20]..[278,10759+28])
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[278,10759+29]..[278,10759+30])
                      Pexp_constant PConst_int (2,None)
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[278,10759+31]..[278,10759+37])
                      Pexp_ident "lexfun" (src/sentenceParser.ml[278,10759+31]..[278,10759+37])
                  <arg>
                  Nolabel
                    expression (src/sentenceParser.ml[278,10759+38]..[278,10759+44])
                      Pexp_ident "lexbuf" (src/sentenceParser.ml[278,10759+38]..[278,10759+44])
                ]
              core_type (src/sentenceParser.ml[278,10759+47]..[278,10759+119])
                Ptyp_constr "list" (src/sentenceParser.ml[278,10759+115]..[278,10759+119])
                [
                  core_type (src/sentenceParser.ml[278,10759+47]..[278,10759+114])
                    Ptyp_constr "SentenceParserAux.or_comment" (src/sentenceParser.ml[278,10759+86]..[278,10759+114])
                    [
                      core_type (src/sentenceParser.ml[278,10759+47]..[278,10759+85])
                        Ptyp_constr "SentenceParserAux.located_raw_sentence" (src/sentenceParser.ml[278,10759+47]..[278,10759+85])
                        []
                    ]
                ]
    ]
]

type token =
  | COLON 
  | EOF 
  | EOL 
  | TERMINAL of SentenceParserAux.raw_symbol 
  | NONTERMINAL of SentenceParserAux.raw_symbol 
  | COMMENT of string 
open Parsing
let _ = parse_error
open SentenceParserAux
let locate_sentence (nto, terminals) =
  let opening =
    match (nto, terminals) with
    | (Some (_, opening, _), _) | (None, (_, opening, _)::_) -> opening
    | (None, []) -> Lexing.dummy_pos
  and closing =
    match (nto, (List.rev terminals)) with
    | (_, (_, _, closing)::_) | (Some (_, _, closing), _) -> closing
    | (None, []) -> Lexing.dummy_pos in
  ([Positions.import (opening, closing)], (nto, terminals))
let yytransl_const = [|257;0;258;0|]
let yytransl_block = [|259;260;261;0|]
let yylhs =
  "\255\255\004\000\005\000\005\000\005\000\002\000\003\000\003\000\001\000\001\000\006\000\006\000\000\000\000\000"
let yylen =
  "\002\000\002\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\002\000\000\000\002\000\002\000\002\000"
let yydefred =
  "\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\012\000\000\000\000\000\005\000\000\000\r\000\000\000\011\000\000\000\t\000\004\000\003\000\001\000\000\000\b\000"
let yydgoto = "\003\000\011\000\012\000\b\000\r\000\014\000\t\000"
let yysindex =
  "\011\000\001\000\002\255\000\000\000\000\255\254\b\255\000\000\000\000\001\255\002\255\000\000\002\255\000\000\014\000\000\000\255\254\000\000\000\000\000\000\000\000\r\255\000\000"
let yyrindex =
  "\000\000\014\255\004\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000"
let yygindex = "\000\000\016\000\000\000\000\000\000\000\254\255\251\255"
let yytablesize = 262
let yytable =
  "\015\000\004\000\005\000\017\000\002\000\005\000\006\000\n\000\018\000\016\000\019\000\021\000\001\000\002\000\020\000\022\000\nn\000"
let yycheck =
  "\005\000\000\000\003\001\002\001\000\000\003\001\004\001\005\001\n\000\001\001\012\000\016\000\001\000\002\000\000\000\002\001\002\001\001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\001\004\001\002\001"
let yynames_const = "COLON\000EOF\000EOL\000"
let yynames_block = "TERMINAL\000NONTERMINAL\000COMMENT\000"
let yyact =
  [|((fun _ -> failwith "parser"));((fun __caml_parser_env ->
                                       let _1 =
                                         (Parsing.peek_val __caml_parser_env
                                            1 : 'located_sentences_or_comments) in
                                       Obj.repr
                                         (_1 : SentenceParserAux.located_raw_sentence
                                                 SentenceParserAux.or_comment
                                                 list)));((fun
                                                             __caml_parser_env
                                                             ->
                                                             Obj.repr
                                                               ([] : 
                                                               'located_sentences_or_comments)));((
    fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 1 : located_raw_sentence) in
      let _2 =
        (Parsing.peek_val __caml_parser_env 0 : 'located_sentences_or_comments) in
      Obj.repr ((Thing _1) :: _2 : 'located_sentences_or_comments)));((
    fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
      let _2 =
        (Parsing.peek_val __caml_parser_env 0 : 'located_sentences_or_comments) in
      Obj.repr ((Comment _1) :: _2 : 'located_sentences_or_comments)));((
    fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : raw_sentence) in
      Obj.repr (locate_sentence _1 : located_raw_sentence)));((fun
                                                                 __caml_parser_env
                                                                 ->
                                                                 Obj.repr
                                                                   (None : 
                                                                   SentenceParserAux.raw_sentence
                                                                    option)));((
    fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : raw_sentence) in
      Obj.repr (Some _1 : SentenceParserAux.raw_sentence option)));((
    fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 3 : SentenceParserAux.raw_symbol) in
      let _3 = (Parsing.peek_val __caml_parser_env 1 : 'terminals) in
      Obj.repr (((Some _1), _3) : raw_sentence)));((fun __caml_parser_env ->
                                                      let _1 =
                                                        (Parsing.peek_val
                                                           __caml_parser_env
                                                           1 : 'terminals) in
                                                      Obj.repr
                                                        ((None, _1) : 
                                                        raw_sentence)));((
    fun __caml_parser_env -> Obj.repr ([] : 'terminals)));((fun
                                                              __caml_parser_env
                                                              ->
                                                              let _1 =
                                                                (Parsing.peek_val
                                                                   __caml_parser_env
                                                                   1 : 
                                                                SentenceParserAux.raw_symbol) in
                                                              let _2 =
                                                                (Parsing.peek_val
                                                                   __caml_parser_env
                                                                   0 : 
                                                                'terminals) in
                                                              Obj.repr (_1 ::
                                                                _2 : 
                                                                'terminals)));((
    fun __caml_parser_env ->
      raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0))));((
    fun __caml_parser_env ->
      raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0))))|]
let yytables =
  {
    Parsing.actions = yyact;
    Parsing.transl_const = yytransl_const;
    Parsing.transl_block = yytransl_block;
    Parsing.lhs = yylhs;
    Parsing.len = yylen;
    Parsing.defred = yydefred;
    Parsing.dgoto = yydgoto;
    Parsing.sindex = yysindex;
    Parsing.rindex = yyrindex;
    Parsing.gindex = yygindex;
    Parsing.tablesize = yytablesize;
    Parsing.table = yytable;
    Parsing.check = yycheck;
    Parsing.error_function = parse_error;
    Parsing.names_const = yynames_const;
    Parsing.names_block = yynames_block
  }
let optional_sentence (lexfun : Lexing.lexbuf -> token)
  (lexbuf : Lexing.lexbuf) =
  (Parsing.yyparse yytables 1 lexfun lexbuf : SentenceParserAux.raw_sentence
                                                option)
let entry (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
  (Parsing.yyparse yytables 2 lexfun lexbuf : SentenceParserAux.located_raw_sentence
                                                SentenceParserAux.or_comment
                                                list)
[
  structure_item (src/sentenceParser.ml[1,28+0]..src/sentenceParser.ml[19,389+1])
    Tstr_type Rec
    [
      type_declaration token/397 (src/sentenceParser.ml[1,28+0]..src/sentenceParser.ml[19,389+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/sentenceParser.ml[2,41+2]..src/sentenceParser.ml[2,41+9])
                COLON/398
                []
                None
              (src/sentenceParser.ml[3,51+2]..src/sentenceParser.ml[3,51+7])
                EOF/399
                []
                None
              (src/sentenceParser.ml[4,59+2]..src/sentenceParser.ml[4,59+7])
                EOL/400
                []
                None
              (src/sentenceParser.ml[5,67+2]..src/sentenceParser.ml[9,179+1])
                TERMINAL/401
                [
                  core_type (src/sentenceParser.mly[29,115+7]..src/sentenceParser.mly[29,115+35])
                    Ttyp_constr "Dune__exe!.SentenceParserAux.raw_symbol"
                    []
                ]
                None
              (src/sentenceParser.ml[10,181+2]..src/sentenceParser.ml[14,297+1])
                NONTERMINAL/417
                [
                  core_type (src/sentenceParser.mly[30,232+7]..src/sentenceParser.mly[30,232+35])
                    Ttyp_constr "Dune__exe!.SentenceParserAux.raw_symbol"
                    []
                ]
                None
              (src/sentenceParser.ml[15,299+2]..src/sentenceParser.ml[19,389+1])
                COMMENT/418
                [
                  core_type (src/sentenceParser.mly[31,346+7]..src/sentenceParser.mly[31,346+13])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/sentenceParser.ml[21,392+0]..src/sentenceParser.ml[21,392+12])
    Tstr_open Fresh
    module_expr (src/sentenceParser.ml[21,392+5]..src/sentenceParser.ml[21,392+12])
      Tmod_ident "Stdlib!.Parsing"
  structure_item (src/sentenceParser.ml[22,405+0]..src/sentenceParser.ml[22,405+19])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[22,405+4]..src/sentenceParser.ml[22,405+5])
          Tpat_any
        expression (src/sentenceParser.ml[22,405+8]..src/sentenceParser.ml[22,405+19])
          Texp_ident "Stdlib!.Parsing.parse_error"
    ]
  structure_item (src/sentenceParser.mly[39,458+2]..src/sentenceParser.mly[39,458+24])
    Tstr_open Fresh
    module_expr (src/sentenceParser.mly[39,458+7]..src/sentenceParser.mly[39,458+24])
      Tmod_ident "Dune__exe!.SentenceParserAux"
  structure_item (src/sentenceParser.mly[43,546+2]..src/sentenceParser.mly[60,1053+20])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.mly[43,546+6]..src/sentenceParser.mly[43,546+21])
          Tpat_var "locate_sentence/485"
        expression (src/sentenceParser.mly[43,546+22]..src/sentenceParser.mly[60,1053+20]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/sentenceParser.mly[43,546+22]..src/sentenceParser.mly[43,546+38])
                Tpat_tuple
                [
                  pattern (src/sentenceParser.mly[43,546+23]..src/sentenceParser.mly[43,546+26])
                    Tpat_var "nto/487"
                  pattern (src/sentenceParser.mly[43,546+28]..src/sentenceParser.mly[43,546+37])
                    Tpat_var "terminals/488"
                ]
              expression (src/sentenceParser.mly[44,587+4]..src/sentenceParser.mly[60,1053+20])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/sentenceParser.mly[44,587+8]..src/sentenceParser.mly[44,587+15])
                      Tpat_var "opening/489"
                    expression (src/sentenceParser.mly[45,605+6]..src/sentenceParser.mly[50,745+26])
                      Texp_match
                      expression (src/sentenceParser.mly[45,605+12]..src/sentenceParser.mly[45,605+26])
                        Texp_tuple
                        [
                          expression (src/sentenceParser.mly[45,605+12]..src/sentenceParser.mly[45,605+15])
                            Texp_ident "nto/487"
                          expression (src/sentenceParser.mly[45,605+17]..src/sentenceParser.mly[45,605+26])
                            Texp_ident "terminals/488"
                        ]
                      [
                        <case>
                          pattern (src/sentenceParser.mly[46,637+8]..src/sentenceParser.mly[47,669+34])
                            Tpat_or
                            pattern (src/sentenceParser.mly[46,637+8]..src/sentenceParser.mly[46,637+31])
                              Tpat_value
                              pattern (src/sentenceParser.mly[46,637+8]..src/sentenceParser.mly[46,637+31])
                                Tpat_tuple
                                [
                                  pattern (src/sentenceParser.mly[46,637+8]..src/sentenceParser.mly[46,637+28])
                                    Tpat_construct "Some"
                                    [
                                      pattern (src/sentenceParser.mly[46,637+13]..src/sentenceParser.mly[46,637+28])
                                        Tpat_tuple
                                        [
                                          pattern (src/sentenceParser.mly[46,637+14]..src/sentenceParser.mly[46,637+15])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[46,637+17]..src/sentenceParser.mly[46,637+24])
                                            Tpat_var "opening/491"
                                          pattern (src/sentenceParser.mly[46,637+26]..src/sentenceParser.mly[46,637+27])
                                            Tpat_any
                                        ]
                                    ]
                                    None
                                  pattern (src/sentenceParser.mly[46,637+30]..src/sentenceParser.mly[46,637+31])
                                    Tpat_any
                                ]
                            pattern (src/sentenceParser.mly[47,669+8]..src/sentenceParser.mly[47,669+34])
                              Tpat_value
                              pattern (src/sentenceParser.mly[47,669+8]..src/sentenceParser.mly[47,669+34])
                                Tpat_tuple
                                [
                                  pattern (src/sentenceParser.mly[47,669+8]..src/sentenceParser.mly[47,669+12])
                                    Tpat_construct "None"
                                    []
                                    None
                                  pattern (src/sentenceParser.mly[47,669+14]..src/sentenceParser.mly[47,669+34])
                                    Tpat_construct "::"
                                    [
                                      pattern (src/sentenceParser.mly[47,669+14]..src/sentenceParser.mly[47,669+29])
                                        Tpat_tuple
                                        [
                                          pattern (src/sentenceParser.mly[47,669+15]..src/sentenceParser.mly[47,669+16])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[47,669+18]..src/sentenceParser.mly[47,669+25])
                                            Tpat_var "opening/491"
                                          pattern (src/sentenceParser.mly[47,669+27]..src/sentenceParser.mly[47,669+28])
                                            Tpat_any
                                        ]
                                      pattern (src/sentenceParser.mly[47,669+33]..src/sentenceParser.mly[47,669+34])
                                        Tpat_any
                                    ]
                                    None
                                ]
                          expression (src/sentenceParser.mly[48,707+10]..src/sentenceParser.mly[48,707+17])
                            Texp_ident "opening/491"
                        <case>
                          pattern (src/sentenceParser.mly[49,725+8]..src/sentenceParser.mly[49,725+16])
                            Tpat_value
                            pattern (src/sentenceParser.mly[49,725+8]..src/sentenceParser.mly[49,725+16])
                              Tpat_tuple
                              [
                                pattern (src/sentenceParser.mly[49,725+8]..src/sentenceParser.mly[49,725+12])
                                  Tpat_construct "None"
                                  []
                                  None
                                pattern (src/sentenceParser.mly[49,725+14]..src/sentenceParser.mly[49,725+16])
                                  Tpat_construct "[]"
                                  []
                                  None
                              ]
                          expression (src/sentenceParser.mly[50,745+10]..src/sentenceParser.mly[50,745+26])
                            Texp_ident "Stdlib!.Lexing.dummy_pos"
                      ]
                  <def>
                    pattern (src/sentenceParser.mly[51,792+8]..src/sentenceParser.mly[51,792+15])
                      Tpat_var "closing/490"
                    expression (src/sentenceParser.mly[52,810+6]..src/sentenceParser.mly[57,956+26])
                      Texp_match
                      expression (src/sentenceParser.mly[52,810+12]..src/sentenceParser.mly[52,810+35])
                        Texp_tuple
                        [
                          expression (src/sentenceParser.mly[52,810+12]..src/sentenceParser.mly[52,810+15])
                            Texp_ident "nto/487"
                          expression (src/sentenceParser.mly[52,810+17]..src/sentenceParser.mly[52,810+35])
                            Texp_apply
                            expression (src/sentenceParser.mly[52,810+17]..src/sentenceParser.mly[52,810+25])
                              Texp_ident "Stdlib!.List.rev"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.mly[52,810+26]..src/sentenceParser.mly[52,810+35])
                                  Texp_ident "terminals/488"
                            ]
                        ]
                      [
                        <case>
                          pattern (src/sentenceParser.mly[53,851+8]..src/sentenceParser.mly[54,883+31])
                            Tpat_or
                            pattern (src/sentenceParser.mly[53,851+8]..src/sentenceParser.mly[53,851+31])
                              Tpat_value
                              pattern (src/sentenceParser.mly[53,851+8]..src/sentenceParser.mly[53,851+31])
                                Tpat_tuple
                                [
                                  pattern (src/sentenceParser.mly[53,851+8]..src/sentenceParser.mly[53,851+9])
                                    Tpat_any
                                  pattern (src/sentenceParser.mly[53,851+11]..src/sentenceParser.mly[53,851+31])
                                    Tpat_construct "::"
                                    [
                                      pattern (src/sentenceParser.mly[53,851+11]..src/sentenceParser.mly[53,851+26])
                                        Tpat_tuple
                                        [
                                          pattern (src/sentenceParser.mly[53,851+12]..src/sentenceParser.mly[53,851+13])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[53,851+15]..src/sentenceParser.mly[53,851+16])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[53,851+18]..src/sentenceParser.mly[53,851+25])
                                            Tpat_var "closing/559"
                                        ]
                                      pattern (src/sentenceParser.mly[53,851+30]..src/sentenceParser.mly[53,851+31])
                                        Tpat_any
                                    ]
                                    None
                                ]
                            pattern (src/sentenceParser.mly[54,883+8]..src/sentenceParser.mly[54,883+31])
                              Tpat_value
                              pattern (src/sentenceParser.mly[54,883+8]..src/sentenceParser.mly[54,883+31])
                                Tpat_tuple
                                [
                                  pattern (src/sentenceParser.mly[54,883+8]..src/sentenceParser.mly[54,883+28])
                                    Tpat_construct "Some"
                                    [
                                      pattern (src/sentenceParser.mly[54,883+13]..src/sentenceParser.mly[54,883+28])
                                        Tpat_tuple
                                        [
                                          pattern (src/sentenceParser.mly[54,883+14]..src/sentenceParser.mly[54,883+15])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[54,883+17]..src/sentenceParser.mly[54,883+18])
                                            Tpat_any
                                          pattern (src/sentenceParser.mly[54,883+20]..src/sentenceParser.mly[54,883+27])
                                            Tpat_var "closing/559"
                                        ]
                                    ]
                                    None
                                  pattern (src/sentenceParser.mly[54,883+30]..src/sentenceParser.mly[54,883+31])
                                    Tpat_any
                                ]
                          expression (src/sentenceParser.mly[55,918+10]..src/sentenceParser.mly[55,918+17])
                            Texp_ident "closing/559"
                        <case>
                          pattern (src/sentenceParser.mly[56,936+8]..src/sentenceParser.mly[56,936+16])
                            Tpat_value
                            pattern (src/sentenceParser.mly[56,936+8]..src/sentenceParser.mly[56,936+16])
                              Tpat_tuple
                              [
                                pattern (src/sentenceParser.mly[56,936+8]..src/sentenceParser.mly[56,936+12])
                                  Tpat_construct "None"
                                  []
                                  None
                                pattern (src/sentenceParser.mly[56,936+14]..src/sentenceParser.mly[56,936+16])
                                  Tpat_construct "[]"
                                  []
                                  None
                              ]
                          expression (src/sentenceParser.mly[57,956+10]..src/sentenceParser.mly[57,956+26])
                            Texp_ident "Stdlib!.Lexing.dummy_pos"
                      ]
                ]
                expression (src/sentenceParser.mly[59,1010+4]..src/sentenceParser.mly[60,1053+20])
                  Texp_tuple
                  [
                    expression (src/sentenceParser.mly[59,1010+4]..src/sentenceParser.mly[59,1010+41])
                      Texp_construct "::"
                      [
                        expression (src/sentenceParser.mly[59,1010+5]..src/sentenceParser.mly[59,1010+40])
                          Texp_apply
                          expression (src/sentenceParser.mly[59,1010+5]..src/sentenceParser.mly[59,1010+21])
                            Texp_ident "Dune__exe!.Positions.import"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.mly[59,1010+22]..src/sentenceParser.mly[59,1010+40])
                                Texp_tuple
                                [
                                  expression (src/sentenceParser.mly[59,1010+23]..src/sentenceParser.mly[59,1010+30])
                                    Texp_ident "opening/489"
                                  expression (src/sentenceParser.mly[59,1010+32]..src/sentenceParser.mly[59,1010+39])
                                    Texp_ident "closing/490"
                                ]
                          ]
                        expression (src/sentenceParser.mly[59,1010+40]..src/sentenceParser.mly[59,1010+41]) ghost
                          Texp_construct "[]"
                          []
                      ]
                    expression (src/sentenceParser.mly[60,1053+4]..src/sentenceParser.mly[60,1053+20])
                      Texp_tuple
                      [
                        expression (src/sentenceParser.mly[60,1053+5]..src/sentenceParser.mly[60,1053+8])
                          Texp_ident "nto/487"
                        expression (src/sentenceParser.mly[60,1053+10]..src/sentenceParser.mly[60,1053+19])
                          Texp_ident "terminals/488"
                      ]
                  ]
          ]
    ]
  structure_item (src/sentenceParser.ml[49,1104+0]..src/sentenceParser.ml[53,1181+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[49,1104+4]..src/sentenceParser.ml[49,1104+18])
          Tpat_var "yytransl_const/632"
        expression (src/sentenceParser.ml[49,1104+21]..src/sentenceParser.ml[53,1181+7])
          Texp_array
          [
            expression (src/sentenceParser.ml[50,1128+2]..src/sentenceParser.ml[50,1128+5])
              Texp_constant Const_int 257
            expression (src/sentenceParser.ml[51,1147+4]..src/sentenceParser.ml[51,1147+5])
              Texp_constant Const_int 0
            expression (src/sentenceParser.ml[52,1164+2]..src/sentenceParser.ml[52,1164+5])
              Texp_constant Const_int 258
            expression (src/sentenceParser.ml[53,1181+4]..src/sentenceParser.ml[53,1181+5])
              Texp_constant Const_int 0
          ]
    ]
  structure_item (src/sentenceParser.ml[55,1190+0]..src/sentenceParser.ml[59,1282+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[55,1190+4]..src/sentenceParser.ml[55,1190+18])
          Tpat_var "yytransl_block/633"
        expression (src/sentenceParser.ml[55,1190+21]..src/sentenceParser.ml[59,1282+7])
          Texp_array
          [
            expression (src/sentenceParser.ml[56,1214+2]..src/sentenceParser.ml[56,1214+5])
              Texp_constant Const_int 259
            expression (src/sentenceParser.ml[57,1236+2]..src/sentenceParser.ml[57,1236+5])
              Texp_constant Const_int 260
            expression (src/sentenceParser.ml[58,1261+2]..src/sentenceParser.ml[58,1261+5])
              Texp_constant Const_int 261
            expression (src/sentenceParser.ml[59,1282+4]..src/sentenceParser.ml[59,1282+5])
              Texp_constant Const_int 0
          ]
    ]
  structure_item (src/sentenceParser.ml[61,1291+0]..src/sentenceParser.ml[63,1380+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[61,1291+4]..src/sentenceParser.ml[61,1291+9])
          Tpat_var "yylhs/634"
        expression (src/sentenceParser.ml[61,1291+12]..src/sentenceParser.ml[63,1380+41])
          Texp_constant Const_string("\255\255\004\000\005\000\005\000\005\000\002\000\003\000\003\000\001\000\001\000\006\000\006\000\000\000\000\000",(src/sentenceParser.ml[61,1291+13]..src/sentenceParser.ml[63,1380+40]),None)
    ]
  structure_item (src/sentenceParser.ml[65,1423+0]..src/sentenceParser.ml[67,1512+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[65,1423+4]..src/sentenceParser.ml[65,1423+9])
          Tpat_var "yylen/635"
        expression (src/sentenceParser.ml[65,1423+12]..src/sentenceParser.ml[67,1512+41])
          Texp_constant Const_string("\002\000\002\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\002\000\000\000\002\000\002\000\002\000",(src/sentenceParser.ml[65,1423+13]..src/sentenceParser.ml[67,1512+40]),None)
    ]
  structure_item (src/sentenceParser.ml[69,1555+0]..src/sentenceParser.ml[72,1713+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[69,1555+4]..src/sentenceParser.ml[69,1555+12])
          Tpat_var "yydefred/636"
        expression (src/sentenceParser.ml[69,1555+15]..src/sentenceParser.ml[72,1713+49])
          Texp_constant Const_string("\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\012\000\000\000\000\000\005\000\000\000\r\000\000\000\011\000\000\000\t\000\004\000\003\000\001\000\000\000\b\000",(src/sentenceParser.ml[69,1555+16]..src/sentenceParser.ml[72,1713+48]),None)
    ]
  structure_item (src/sentenceParser.ml[74,1764+0]..src/sentenceParser.ml[75,1789+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[74,1764+4]..src/sentenceParser.ml[74,1764+11])
          Tpat_var "yydgoto/637"
        expression (src/sentenceParser.ml[74,1764+14]..src/sentenceParser.ml[75,1789+49])
          Texp_constant Const_string("\003\000\011\000\012\000\b\000\r\000\014\000\t\000",(src/sentenceParser.ml[74,1764+15]..src/sentenceParser.ml[75,1789+48]),None)
    ]
  structure_item (src/sentenceParser.ml[77,1840+0]..src/sentenceParser.ml[80,1998+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[77,1840+4]..src/sentenceParser.ml[77,1840+12])
          Tpat_var "yysindex/638"
        expression (src/sentenceParser.ml[77,1840+15]..src/sentenceParser.ml[80,1998+49])
          Texp_constant Const_string("\011\000\001\000\002\255\000\000\000\000\255\254\b\255\000\000\000\000\001\255\002\255\000\000\002\255\000\000\014\000\000\000\255\254\000\000\000\000\000\000\000\000\r\255\000\000",(src/sentenceParser.ml[77,1840+16]..src/sentenceParser.ml[80,1998+48]),None)
    ]
  structure_item (src/sentenceParser.ml[82,2049+0]..src/sentenceParser.ml[85,2207+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[82,2049+4]..src/sentenceParser.ml[82,2049+12])
          Tpat_var "yyrindex/639"
        expression (src/sentenceParser.ml[82,2049+15]..src/sentenceParser.ml[85,2207+49])
          Texp_constant Const_string("\000\000\014\255\004\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000",(src/sentenceParser.ml[82,2049+16]..src/sentenceParser.ml[85,2207+48]),None)
    ]
  structure_item (src/sentenceParser.ml[87,2258+0]..src/sentenceParser.ml[88,2284+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[87,2258+4]..src/sentenceParser.ml[87,2258+12])
          Tpat_var "yygindex/640"
        expression (src/sentenceParser.ml[87,2258+15]..src/sentenceParser.ml[88,2284+49])
          Texp_constant Const_string("\000\000\016\000\000\000\000\000\000\000\254\255\251\255",(src/sentenceParser.ml[87,2258+16]..src/sentenceParser.ml[88,2284+48]),None)
    ]
  structure_item (src/sentenceParser.ml[90,2335+0]..src/sentenceParser.ml[90,2335+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[90,2335+4]..src/sentenceParser.ml[90,2335+15])
          Tpat_var "yytablesize/641"
        expression (src/sentenceParser.ml[90,2335+18]..src/sentenceParser.ml[90,2335+21])
          Texp_constant Const_int 262
    ]
  structure_item (src/sentenceParser.ml[91,2357+0]..src/sentenceParser.ml[124,4494+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[91,2357+4]..src/sentenceParser.ml[91,2357+11])
          Tpat_var "yytable/642"
        expression (src/sentenceParser.ml[91,2357+14]..src/sentenceParser.ml[124,4494+49])
          Texp_constant Const_string("\015\000\004\000\005\000\017\000\002\000\005\000\006\000\n\000\018\000\016\000\019\000\021\000\001\000\002\000\020\000\022\000\n\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\n\000",(src/sentenceParser.ml[91,2357+15]..src/sentenceParser.ml[124,4494+48]),None)
    ]
  structure_item (src/sentenceParser.ml[126,4545+0]..src/sentenceParser.ml[159,6682+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[126,4545+4]..src/sentenceParser.ml[126,4545+11])
          Tpat_var "yycheck/643"
        expression (src/sentenceParser.ml[126,4545+14]..src/sentenceParser.ml[159,6682+49])
          Texp_constant Const_string("\005\000\000\000\003\001\002\001\000\000\003\001\004\001\005\001\nsrc/sentenceParser.ml[126,4545+15]..src/sentenceParser.ml[159,6682+48]),None)
    ]
  structure_item (src/sentenceParser.ml[161,6733+0]..src/sentenceParser.ml[165,6791+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[161,6733+4]..src/sentenceParser.ml[161,6733+17])
          Tpat_var "yynames_const/644"
        expression (src/sentenceParser.ml[161,6733+20]..src/sentenceParser.ml[165,6791+3])
          Texp_constant Const_string("COLON\000EOF\000EOL\000",(src/sentenceParser.ml[161,6733+21]..src/sentenceParser.ml[165,6791+2]),None)
    ]
  structure_item (src/sentenceParser.ml[167,6796+0]..src/sentenceParser.ml[171,6869+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[167,6796+4]..src/sentenceParser.ml[167,6796+17])
          Tpat_var "yynames_block/645"
        expression (src/sentenceParser.ml[167,6796+20]..src/sentenceParser.ml[171,6869+3])
          Texp_constant Const_string("TERMINAL\000NONTERMINAL\000COMMENT\000",(src/sentenceParser.ml[167,6796+21]..src/sentenceParser.ml[171,6869+2]),None)
    ]
  structure_item (src/sentenceParser.ml[173,6874+0]..src/sentenceParser.ml[257,9995+2])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[173,6874+4]..src/sentenceParser.ml[173,6874+9])
          Tpat_var "yyact/646"
        expression (src/sentenceParser.ml[173,6874+12]..src/sentenceParser.ml[257,9995+2])
          Texp_array
          [
            expression (src/sentenceParser.ml[174,6889+2]..src/sentenceParser.ml[174,6889+30])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[174,6889+7]..src/sentenceParser.ml[174,6889+8])
                    Tpat_any
                  expression (src/sentenceParser.ml[174,6889+12]..src/sentenceParser.ml[174,6889+29])
                    Texp_apply
                    expression (src/sentenceParser.ml[174,6889+12]..src/sentenceParser.ml[174,6889+20])
                      Texp_ident "Stdlib!.failwith"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.ml[174,6889+21]..src/sentenceParser.ml[174,6889+29])
                          Texp_constant Const_string("parser",(src/sentenceParser.ml[174,6889+22]..src/sentenceParser.ml[174,6889+28]),None)
                    ]
              ]
            expression (src/sentenceParser.ml[175,6920+2]..src/sentenceParser.ml[181,7119+91])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[175,6920+7]..src/sentenceParser.ml[175,6920+24])
                    Tpat_var "__caml_parser_env/648"
                  expression (src/sentenceParser.ml[176,6948+4]..src/sentenceParser.ml[181,7119+90])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[176,6948+8]..src/sentenceParser.ml[176,6948+10])
                          Tpat_var "_1/649"
                        expression (src/sentenceParser.ml[176,6948+14]..src/sentenceParser.ml[176,6948+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[176,6948+53]..src/sentenceParser.ml[176,6948+83])
                              Ttyp_var located_sentences_or_comments
                          Texp_apply
                          expression (src/sentenceParser.ml[176,6948+14]..src/sentenceParser.ml[176,6948+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[176,6948+31]..src/sentenceParser.ml[176,6948+48])
                                Texp_ident "__caml_parser_env/648"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[176,6948+49]..src/sentenceParser.ml[176,6948+50])
                                Texp_constant Const_int 1
                          ]
                    ]
                    expression (src/sentenceParser.ml[177,7036+4]..src/sentenceParser.ml[181,7119+90])
                      Texp_apply
                      expression (src/sentenceParser.ml[177,7036+4]..src/sentenceParser.ml[177,7036+12])
                        Texp_ident "Stdlib!.Obj.repr"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.mly[81,7080+2]..src/sentenceParser.mly[81,7080+8])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[181,7119+17]..src/sentenceParser.ml[181,7119+89])
                                Ttyp_constr "list/9!"
                                [
                                  core_type (src/sentenceParser.ml[181,7119+17]..src/sentenceParser.ml[181,7119+84])
                                    Ttyp_constr "Dune__exe!.SentenceParserAux.or_comment"
                                    [
                                      core_type (src/sentenceParser.ml[181,7119+17]..src/sentenceParser.ml[181,7119+55])
                                        Ttyp_constr "Dune__exe!.SentenceParserAux.located_raw_sentence"
                                        []
                                    ]
                                ]
                            Texp_ident "_1/649"
                      ]
              ]
            expression (src/sentenceParser.ml[182,7211+2]..src/sentenceParser.ml[187,7322+49])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[182,7211+7]..src/sentenceParser.ml[182,7211+24])
                    Tpat_var "__caml_parser_env/765"
                  expression (src/sentenceParser.ml[183,7239+4]..src/sentenceParser.ml[187,7322+48])
                    Texp_apply
                    expression (src/sentenceParser.ml[183,7239+4]..src/sentenceParser.ml[183,7239+12])
                      Texp_ident "Stdlib!.Obj.repr"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.mly[85,7283+2]..src/sentenceParser.mly[85,7283+8])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[187,7322+17]..src/sentenceParser.ml[187,7322+47])
                              Ttyp_var located_sentences_or_comments
                          Texp_construct "[]"
                          []
                    ]
              ]
            expression (src/sentenceParser.ml[188,7372+2]..src/sentenceParser.ml[195,7710+49])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[188,7372+7]..src/sentenceParser.ml[188,7372+24])
                    Tpat_var "__caml_parser_env/766"
                  expression (src/sentenceParser.ml[189,7400+4]..src/sentenceParser.ml[195,7710+48])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[189,7400+8]..src/sentenceParser.ml[189,7400+10])
                          Tpat_var "_1/767"
                        expression (src/sentenceParser.ml[189,7400+14]..src/sentenceParser.ml[189,7400+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[189,7400+53]..src/sentenceParser.ml[189,7400+73])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.located_raw_sentence"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[189,7400+14]..src/sentenceParser.ml[189,7400+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[189,7400+31]..src/sentenceParser.ml[189,7400+48])
                                Texp_ident "__caml_parser_env/766"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[189,7400+49]..src/sentenceParser.ml[189,7400+50])
                                Texp_constant Const_int 1
                          ]
                    ]
                    expression (src/sentenceParser.ml[190,7478+4]..src/sentenceParser.ml[195,7710+48])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/sentenceParser.ml[190,7478+8]..src/sentenceParser.ml[190,7478+10])
                            Tpat_var "_2/768"
                          expression (src/sentenceParser.ml[190,7478+14]..src/sentenceParser.ml[190,7478+50])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[190,7478+53]..src/sentenceParser.ml[190,7478+83])
                                Ttyp_var located_sentences_or_comments
                            Texp_apply
                            expression (src/sentenceParser.ml[190,7478+14]..src/sentenceParser.ml[190,7478+30])
                              Texp_ident "Stdlib!.Parsing.peek_val"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[190,7478+31]..src/sentenceParser.ml[190,7478+48])
                                  Texp_ident "__caml_parser_env/766"
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[190,7478+49]..src/sentenceParser.ml[190,7478+50])
                                  Texp_constant Const_int 0
                            ]
                      ]
                      expression (src/sentenceParser.ml[191,7566+4]..src/sentenceParser.ml[195,7710+48])
                        Texp_apply
                        expression (src/sentenceParser.ml[191,7566+4]..src/sentenceParser.ml[191,7566+12])
                          Texp_ident "Stdlib!.Obj.repr"
                        [
                          <arg>
                            Nolabel
                            expression (src/sentenceParser.mly[86,7610+49]..src/sentenceParser.mly[86,7610+69])
                              extra
                                Texp_constraint
                                core_type (src/sentenceParser.ml[195,7710+17]..src/sentenceParser.ml[195,7710+47])
                                  Ttyp_var located_sentences_or_comments
                              Texp_construct "::"
                              [
                                expression (src/sentenceParser.mly[86,7610+51]..src/sentenceParser.mly[86,7610+61])
                                  Texp_construct "Thing"
                                  [
                                    expression (src/sentenceParser.mly[86,7610+59]..src/sentenceParser.mly[86,7610+61])
                                      Texp_ident "_1/767"
                                  ]
                                expression (src/sentenceParser.mly[86,7610+65]..src/sentenceParser.mly[86,7610+67])
                                  Texp_ident "_2/768"
                              ]
                        ]
              ]
            expression (src/sentenceParser.ml[196,7760+2]..src/sentenceParser.ml[203,8084+49])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[196,7760+7]..src/sentenceParser.ml[196,7760+24])
                    Tpat_var "__caml_parser_env/769"
                  expression (src/sentenceParser.ml[197,7788+4]..src/sentenceParser.ml[203,8084+48])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[197,7788+8]..src/sentenceParser.ml[197,7788+10])
                          Tpat_var "_1/770"
                        expression (src/sentenceParser.ml[197,7788+14]..src/sentenceParser.ml[197,7788+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[197,7788+53]..src/sentenceParser.ml[197,7788+59])
                              Ttyp_constr "string/15!"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[197,7788+14]..src/sentenceParser.ml[197,7788+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[197,7788+31]..src/sentenceParser.ml[197,7788+48])
                                Texp_ident "__caml_parser_env/769"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[197,7788+49]..src/sentenceParser.ml[197,7788+50])
                                Texp_constant Const_int 1
                          ]
                    ]
                    expression (src/sentenceParser.ml[198,7852+4]..src/sentenceParser.ml[203,8084+48])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/sentenceParser.ml[198,7852+8]..src/sentenceParser.ml[198,7852+10])
                            Tpat_var "_2/771"
                          expression (src/sentenceParser.ml[198,7852+14]..src/sentenceParser.ml[198,7852+50])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[198,7852+53]..src/sentenceParser.ml[198,7852+83])
                                Ttyp_var located_sentences_or_comments
                            Texp_apply
                            expression (src/sentenceParser.ml[198,7852+14]..src/sentenceParser.ml[198,7852+30])
                              Texp_ident "Stdlib!.Parsing.peek_val"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[198,7852+31]..src/sentenceParser.ml[198,7852+48])
                                  Texp_ident "__caml_parser_env/769"
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[198,7852+49]..src/sentenceParser.ml[198,7852+50])
                                  Texp_constant Const_int 0
                            ]
                      ]
                      expression (src/sentenceParser.ml[199,7940+4]..src/sentenceParser.ml[203,8084+48])
                        Texp_apply
                        expression (src/sentenceParser.ml[199,7940+4]..src/sentenceParser.ml[199,7940+12])
                          Texp_ident "Stdlib!.Obj.repr"
                        [
                          <arg>
                            Nolabel
                            expression (src/sentenceParser.mly[87,7984+49]..src/sentenceParser.mly[87,7984+69])
                              extra
                                Texp_constraint
                                core_type (src/sentenceParser.ml[203,8084+17]..src/sentenceParser.ml[203,8084+47])
                                  Ttyp_var located_sentences_or_comments
                              Texp_construct "::"
                              [
                                expression (src/sentenceParser.mly[87,7984+51]..src/sentenceParser.mly[87,7984+61])
                                  Texp_construct "Comment"
                                  [
                                    expression (src/sentenceParser.mly[87,7984+59]..src/sentenceParser.mly[87,7984+61])
                                      Texp_ident "_1/770"
                                  ]
                                expression (src/sentenceParser.mly[87,7984+65]..src/sentenceParser.mly[87,7984+67])
                                  Texp_ident "_2/771"
                              ]
                        ]
              ]
            expression (src/sentenceParser.ml[204,8134+2]..src/sentenceParser.ml[210,8331+39])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[204,8134+7]..src/sentenceParser.ml[204,8134+24])
                    Tpat_var "__caml_parser_env/772"
                  expression (src/sentenceParser.ml[205,8162+4]..src/sentenceParser.ml[210,8331+38])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[205,8162+8]..src/sentenceParser.ml[205,8162+10])
                          Tpat_var "_1/773"
                        expression (src/sentenceParser.ml[205,8162+14]..src/sentenceParser.ml[205,8162+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[205,8162+53]..src/sentenceParser.ml[205,8162+65])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[205,8162+14]..src/sentenceParser.ml[205,8162+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[205,8162+31]..src/sentenceParser.ml[205,8162+48])
                                Texp_ident "__caml_parser_env/772"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[205,8162+49]..src/sentenceParser.ml[205,8162+50])
                                Texp_constant Const_int 0
                          ]
                    ]
                    expression (src/sentenceParser.ml[206,8232+4]..src/sentenceParser.ml[210,8331+38])
                      Texp_apply
                      expression (src/sentenceParser.ml[206,8232+4]..src/sentenceParser.ml[206,8232+12])
                        Texp_ident "Stdlib!.Obj.repr"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.mly[91,8276+2]..src/sentenceParser.mly[91,8276+24])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[210,8331+17]..src/sentenceParser.ml[210,8331+37])
                                Ttyp_constr "Dune__exe!.SentenceParserAux.located_raw_sentence"
                                []
                            Texp_apply
                            expression (src/sentenceParser.mly[91,8276+4]..src/sentenceParser.mly[91,8276+19])
                              Texp_ident "locate_sentence/485"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.mly[91,8276+20]..src/sentenceParser.mly[91,8276+22])
                                  Texp_ident "_1/773"
                            ]
                      ]
              ]
            expression (src/sentenceParser.ml[211,8371+2]..src/sentenceParser.ml[216,8486+56])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[211,8371+7]..src/sentenceParser.ml[211,8371+24])
                    Tpat_var "__caml_parser_env/774"
                  expression (src/sentenceParser.ml[212,8399+4]..src/sentenceParser.ml[216,8486+55])
                    Texp_apply
                    expression (src/sentenceParser.ml[212,8399+4]..src/sentenceParser.ml[212,8399+12])
                      Texp_ident "Stdlib!.Obj.repr"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.mly[96,8443+4]..src/sentenceParser.mly[96,8443+12])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[216,8486+17]..src/sentenceParser.ml[216,8486+54])
                              Ttyp_constr "option/10!"
                              [
                                core_type (src/sentenceParser.ml[216,8486+17]..src/sentenceParser.ml[216,8486+47])
                                  Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                                  []
                              ]
                          Texp_construct "None"
                          []
                    ]
              ]
            expression (src/sentenceParser.ml[217,8543+2]..src/sentenceParser.ml[223,8731+56])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[217,8543+7]..src/sentenceParser.ml[217,8543+24])
                    Tpat_var "__caml_parser_env/775"
                  expression (src/sentenceParser.ml[218,8571+4]..src/sentenceParser.ml[223,8731+55])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[218,8571+8]..src/sentenceParser.ml[218,8571+10])
                          Tpat_var "_1/776"
                        expression (src/sentenceParser.ml[218,8571+14]..src/sentenceParser.ml[218,8571+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[218,8571+53]..src/sentenceParser.ml[218,8571+65])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[218,8571+14]..src/sentenceParser.ml[218,8571+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[218,8571+31]..src/sentenceParser.ml[218,8571+48])
                                Texp_ident "__caml_parser_env/775"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[218,8571+49]..src/sentenceParser.ml[218,8571+50])
                                Texp_constant Const_int 0
                          ]
                    ]
                    expression (src/sentenceParser.ml[219,8641+4]..src/sentenceParser.ml[223,8731+55])
                      Texp_apply
                      expression (src/sentenceParser.ml[219,8641+4]..src/sentenceParser.ml[219,8641+12])
                        Texp_ident "Stdlib!.Obj.repr"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.mly[98,8685+4]..src/sentenceParser.mly[98,8685+15])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[223,8731+17]..src/sentenceParser.ml[223,8731+54])
                                Ttyp_constr "option/10!"
                                [
                                  core_type (src/sentenceParser.ml[223,8731+17]..src/sentenceParser.ml[223,8731+47])
                                    Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                                    []
                                ]
                            Texp_construct "Some"
                            [
                              expression (src/sentenceParser.mly[98,8685+11]..src/sentenceParser.mly[98,8685+13])
                                Texp_ident "_1/776"
                            ]
                      ]
              ]
            expression (src/sentenceParser.ml[224,8788+2]..src/sentenceParser.ml[231,9065+31])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[224,8788+7]..src/sentenceParser.ml[224,8788+24])
                    Tpat_var "__caml_parser_env/777"
                  expression (src/sentenceParser.ml[225,8816+4]..src/sentenceParser.ml[231,9065+30])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[225,8816+8]..src/sentenceParser.ml[225,8816+10])
                          Tpat_var "_1/778"
                        expression (src/sentenceParser.ml[225,8816+14]..src/sentenceParser.ml[225,8816+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[225,8816+53]..src/sentenceParser.ml[225,8816+81])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.raw_symbol"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[225,8816+14]..src/sentenceParser.ml[225,8816+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[225,8816+31]..src/sentenceParser.ml[225,8816+48])
                                Texp_ident "__caml_parser_env/777"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[225,8816+49]..src/sentenceParser.ml[225,8816+50])
                                Texp_constant Const_int 3
                          ]
                    ]
                    expression (src/sentenceParser.ml[226,8902+4]..src/sentenceParser.ml[231,9065+30])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/sentenceParser.ml[226,8902+8]..src/sentenceParser.ml[226,8902+10])
                            Tpat_var "_3/779"
                          expression (src/sentenceParser.ml[226,8902+14]..src/sentenceParser.ml[226,8902+50])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[226,8902+53]..src/sentenceParser.ml[226,8902+63])
                                Ttyp_var terminals
                            Texp_apply
                            expression (src/sentenceParser.ml[226,8902+14]..src/sentenceParser.ml[226,8902+30])
                              Texp_ident "Stdlib!.Parsing.peek_val"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[226,8902+31]..src/sentenceParser.ml[226,8902+48])
                                  Texp_ident "__caml_parser_env/777"
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[226,8902+49]..src/sentenceParser.ml[226,8902+50])
                                  Texp_constant Const_int 1
                            ]
                      ]
                      expression (src/sentenceParser.ml[227,8970+4]..src/sentenceParser.ml[231,9065+30])
                        Texp_apply
                        expression (src/sentenceParser.ml[227,8970+4]..src/sentenceParser.ml[227,8970+12])
                          Texp_ident "Stdlib!.Obj.repr"
                        [
                          <arg>
                            Nolabel
                            expression (src/sentenceParser.mly[104,9015+4]..src/sentenceParser.mly[104,9015+19])
                              extra
                                Texp_constraint
                                core_type (src/sentenceParser.ml[231,9065+17]..src/sentenceParser.ml[231,9065+29])
                                  Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                                  []
                              Texp_tuple
                              [
                                expression (src/sentenceParser.mly[104,9015+6]..src/sentenceParser.mly[104,9015+13])
                                  Texp_construct "Some"
                                  [
                                    expression (src/sentenceParser.mly[104,9015+11]..src/sentenceParser.mly[104,9015+13])
                                      Texp_ident "_1/778"
                                  ]
                                expression (src/sentenceParser.mly[104,9015+15]..src/sentenceParser.mly[104,9015+17])
                                  Texp_ident "_3/779"
                              ]
                        ]
              ]
            expression (src/sentenceParser.ml[232,9097+2]..src/sentenceParser.ml[238,9285+31])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[232,9097+7]..src/sentenceParser.ml[232,9097+24])
                    Tpat_var "__caml_parser_env/780"
                  expression (src/sentenceParser.ml[233,9125+4]..src/sentenceParser.ml[238,9285+30])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[233,9125+8]..src/sentenceParser.ml[233,9125+10])
                          Tpat_var "_1/781"
                        expression (src/sentenceParser.ml[233,9125+14]..src/sentenceParser.ml[233,9125+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[233,9125+53]..src/sentenceParser.ml[233,9125+63])
                              Ttyp_var terminals
                          Texp_apply
                          expression (src/sentenceParser.ml[233,9125+14]..src/sentenceParser.ml[233,9125+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[233,9125+31]..src/sentenceParser.ml[233,9125+48])
                                Texp_ident "__caml_parser_env/780"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[233,9125+49]..src/sentenceParser.ml[233,9125+50])
                                Texp_constant Const_int 1
                          ]
                    ]
                    expression (src/sentenceParser.ml[234,9193+4]..src/sentenceParser.ml[238,9285+30])
                      Texp_apply
                      expression (src/sentenceParser.ml[234,9193+4]..src/sentenceParser.ml[234,9193+12])
                        Texp_ident "Stdlib!.Obj.repr"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.mly[106,9238+4]..src/sentenceParser.mly[106,9238+16])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[238,9285+17]..src/sentenceParser.ml[238,9285+29])
                                Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                                []
                            Texp_tuple
                            [
                              expression (src/sentenceParser.mly[106,9238+6]..src/sentenceParser.mly[106,9238+10])
                                Texp_construct "None"
                                []
                              expression (src/sentenceParser.mly[106,9238+12]..src/sentenceParser.mly[106,9238+14])
                                Texp_ident "_1/781"
                            ]
                      ]
              ]
            expression (src/sentenceParser.ml[239,9317+2]..src/sentenceParser.ml[244,9431+29])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[239,9317+7]..src/sentenceParser.ml[239,9317+24])
                    Tpat_var "__caml_parser_env/782"
                  expression (src/sentenceParser.ml[240,9345+4]..src/sentenceParser.ml[244,9431+28])
                    Texp_apply
                    expression (src/sentenceParser.ml[240,9345+4]..src/sentenceParser.ml[240,9345+12])
                      Texp_ident "Stdlib!.Obj.repr"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.mly[111,9390+4]..src/sentenceParser.mly[111,9390+10])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[244,9431+17]..src/sentenceParser.ml[244,9431+27])
                              Ttyp_var terminals
                          Texp_construct "[]"
                          []
                    ]
              ]
            expression (src/sentenceParser.ml[245,9461+2]..src/sentenceParser.ml[252,9735+29])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[245,9461+7]..src/sentenceParser.ml[245,9461+24])
                    Tpat_var "__caml_parser_env/783"
                  expression (src/sentenceParser.ml[246,9489+4]..src/sentenceParser.ml[252,9735+28])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/sentenceParser.ml[246,9489+8]..src/sentenceParser.ml[246,9489+10])
                          Tpat_var "_1/784"
                        expression (src/sentenceParser.ml[246,9489+14]..src/sentenceParser.ml[246,9489+50])
                          extra
                            Texp_constraint
                            core_type (src/sentenceParser.ml[246,9489+53]..src/sentenceParser.ml[246,9489+81])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.raw_symbol"
                              []
                          Texp_apply
                          expression (src/sentenceParser.ml[246,9489+14]..src/sentenceParser.ml[246,9489+30])
                            Texp_ident "Stdlib!.Parsing.peek_val"
                          [
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[246,9489+31]..src/sentenceParser.ml[246,9489+48])
                                Texp_ident "__caml_parser_env/783"
                            <arg>
                              Nolabel
                              expression (src/sentenceParser.ml[246,9489+49]..src/sentenceParser.ml[246,9489+50])
                                Texp_constant Const_int 1
                          ]
                    ]
                    expression (src/sentenceParser.ml[247,9575+4]..src/sentenceParser.ml[252,9735+28])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/sentenceParser.ml[247,9575+8]..src/sentenceParser.ml[247,9575+10])
                            Tpat_var "_2/785"
                          expression (src/sentenceParser.ml[247,9575+14]..src/sentenceParser.ml[247,9575+50])
                            extra
                              Texp_constraint
                              core_type (src/sentenceParser.ml[247,9575+53]..src/sentenceParser.ml[247,9575+63])
                                Ttyp_var terminals
                            Texp_apply
                            expression (src/sentenceParser.ml[247,9575+14]..src/sentenceParser.ml[247,9575+30])
                              Texp_ident "Stdlib!.Parsing.peek_val"
                            [
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[247,9575+31]..src/sentenceParser.ml[247,9575+48])
                                  Texp_ident "__caml_parser_env/783"
                              <arg>
                                Nolabel
                                expression (src/sentenceParser.ml[247,9575+49]..src/sentenceParser.ml[247,9575+50])
                                  Texp_constant Const_int 0
                            ]
                      ]
                      expression (src/sentenceParser.ml[248,9643+4]..src/sentenceParser.ml[252,9735+28])
                        Texp_apply
                        expression (src/sentenceParser.ml[248,9643+4]..src/sentenceParser.ml[248,9643+12])
                          Texp_ident "Stdlib!.Obj.repr"
                        [
                          <arg>
                            Nolabel
                            expression (src/sentenceParser.mly[113,9688+4]..src/sentenceParser.mly[113,9688+16])
                              extra
                                Texp_constraint
                                core_type (src/sentenceParser.ml[252,9735+17]..src/sentenceParser.ml[252,9735+27])
                                  Ttyp_var terminals
                              Texp_construct "::"
                              [
                                expression (src/sentenceParser.mly[113,9688+6]..src/sentenceParser.mly[113,9688+8])
                                  Texp_ident "_1/784"
                                expression (src/sentenceParser.mly[113,9688+12]..src/sentenceParser.mly[113,9688+14])
                                  Texp_ident "_2/785"
                              ]
                        ]
              ]
            expression (src/sentenceParser.ml[254,9795+2]..src/sentenceParser.ml[254,9795+90])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[254,9795+7]..src/sentenceParser.ml[254,9795+24])
                    Tpat_var "__caml_parser_env/786"
                  expression (src/sentenceParser.ml[254,9795+28]..src/sentenceParser.ml[254,9795+89])
                    Texp_apply
                    expression (src/sentenceParser.ml[254,9795+28]..src/sentenceParser.ml[254,9795+33])
                      Texp_ident "Stdlib!.raise"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.ml[254,9795+34]..src/sentenceParser.ml[254,9795+89])
                          Texp_construct "Parsing.YYexit"
                          [
                            expression (src/sentenceParser.ml[254,9795+50]..src/sentenceParser.ml[254,9795+88])
                              Texp_apply
                              expression (src/sentenceParser.ml[254,9795+51]..src/sentenceParser.ml[254,9795+67])
                                Texp_ident "Stdlib!.Parsing.peek_val"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/sentenceParser.ml[254,9795+68]..src/sentenceParser.ml[254,9795+85])
                                    Texp_ident "__caml_parser_env/786"
                                <arg>
                                  Nolabel
                                  expression (src/sentenceParser.ml[254,9795+86]..src/sentenceParser.ml[254,9795+87])
                                    Texp_constant Const_int 0
                              ]
                          ]
                    ]
              ]
            expression (src/sentenceParser.ml[256,9904+2]..src/sentenceParser.ml[256,9904+90])
              Texp_function
              Nolabel
              [
                <case>
                  pattern (src/sentenceParser.ml[256,9904+7]..src/sentenceParser.ml[256,9904+24])
                    Tpat_var "__caml_parser_env/787"
                  expression (src/sentenceParser.ml[256,9904+28]..src/sentenceParser.ml[256,9904+89])
                    Texp_apply
                    expression (src/sentenceParser.ml[256,9904+28]..src/sentenceParser.ml[256,9904+33])
                      Texp_ident "Stdlib!.raise"
                    [
                      <arg>
                        Nolabel
                        expression (src/sentenceParser.ml[256,9904+34]..src/sentenceParser.ml[256,9904+89])
                          Texp_construct "Parsing.YYexit"
                          [
                            expression (src/sentenceParser.ml[256,9904+50]..src/sentenceParser.ml[256,9904+88])
                              Texp_apply
                              expression (src/sentenceParser.ml[256,9904+51]..src/sentenceParser.ml[256,9904+67])
                                Texp_ident "Stdlib!.Parsing.peek_val"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/sentenceParser.ml[256,9904+68]..src/sentenceParser.ml[256,9904+85])
                                    Texp_ident "__caml_parser_env/787"
                                <arg>
                                  Nolabel
                                  expression (src/sentenceParser.ml[256,9904+86]..src/sentenceParser.ml[256,9904+87])
                                    Texp_constant Const_int 0
                              ]
                          ]
                    ]
              ]
          ]
    ]
  structure_item (src/sentenceParser.ml[258,9998+0]..src/sentenceParser.ml[274,10479+39])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[258,9998+4]..src/sentenceParser.ml[258,9998+12])
          Tpat_var "yytables/788"
        expression (src/sentenceParser.ml[259,10013+2]..src/sentenceParser.ml[274,10479+39])
          Texp_record
            fields =
              [
                "Parsing.actions"
                  expression (src/sentenceParser.ml[259,10013+20]..src/sentenceParser.ml[259,10013+25])
                    Texp_ident "yyact/646"
                "Parsing.transl_const"
                  expression (src/sentenceParser.ml[260,10040+25]..src/sentenceParser.ml[260,10040+39])
                    Texp_ident "yytransl_const/632"
                "Parsing.transl_block"
                  expression (src/sentenceParser.ml[261,10081+25]..src/sentenceParser.ml[261,10081+39])
                    Texp_ident "yytransl_block/633"
                "Parsing.lhs"
                  expression (src/sentenceParser.ml[262,10122+16]..src/sentenceParser.ml[262,10122+21])
                    Texp_ident "yylhs/634"
                "Parsing.len"
                  expression (src/sentenceParser.ml[263,10145+16]..src/sentenceParser.ml[263,10145+21])
                    Texp_ident "yylen/635"
                "Parsing.defred"
                  expression (src/sentenceParser.ml[264,10168+19]..src/sentenceParser.ml[264,10168+27])
                    Texp_ident "yydefred/636"
                "Parsing.dgoto"
                  expression (src/sentenceParser.ml[265,10197+18]..src/sentenceParser.ml[265,10197+25])
                    Texp_ident "yydgoto/637"
                "Parsing.sindex"
                  expression (src/sentenceParser.ml[266,10224+19]..src/sentenceParser.ml[266,10224+27])
                    Texp_ident "yysindex/638"
                "Parsing.rindex"
                  expression (src/sentenceParser.ml[267,10253+19]..src/sentenceParser.ml[267,10253+27])
                    Texp_ident "yyrindex/639"
                "Parsing.gindex"
                  expression (src/sentenceParser.ml[268,10282+19]..src/sentenceParser.ml[268,10282+27])
                    Texp_ident "yygindex/640"
                "Parsing.tablesize"
                  expression (src/sentenceParser.ml[269,10311+22]..src/sentenceParser.ml[269,10311+33])
                    Texp_ident "yytablesize/641"
                "Parsing.table"
                  expression (src/sentenceParser.ml[270,10346+18]..src/sentenceParser.ml[270,10346+25])
                    Texp_ident "yytable/642"
                "Parsing.check"
                  expression (src/sentenceParser.ml[271,10373+18]..src/sentenceParser.ml[271,10373+25])
                    Texp_ident "yycheck/643"
                "Parsing.error_function"
                  expression (src/sentenceParser.ml[272,10400+27]..src/sentenceParser.ml[272,10400+38])
                    Texp_ident "Stdlib!.Parsing.parse_error"
                "Parsing.names_const"
                  expression (src/sentenceParser.ml[273,10440+24]..src/sentenceParser.ml[273,10440+37])
                    Texp_ident "yynames_const/644"
                "Parsing.names_block"
                  expression (src/sentenceParser.ml[274,10479+24]..src/sentenceParser.ml[274,10479+37])
                    Texp_ident "yynames_block/645"
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/sentenceParser.ml[275,10519+0]..src/sentenceParser.ml[276,10602+85])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[275,10519+4]..src/sentenceParser.ml[275,10519+21])
          Tpat_var "optional_sentence/789"
        expression (src/sentenceParser.ml[275,10519+22]..src/sentenceParser.ml[276,10602+85]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/sentenceParser.ml[275,10519+23]..src/sentenceParser.ml[275,10519+29])
                extra
                  Tpat_extra_constraint
                  core_type (src/sentenceParser.ml[275,10519+32]..src/sentenceParser.ml[275,10519+54])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/sentenceParser.ml[275,10519+32]..src/sentenceParser.ml[275,10519+45])
                      Ttyp_constr "Stdlib!.Lexing.lexbuf"
                      []
                    core_type (src/sentenceParser.ml[275,10519+49]..src/sentenceParser.ml[275,10519+54])
                      Ttyp_constr "token/397"
                      []
                Tpat_alias "lexfun/791"
                pattern (src/sentenceParser.ml[275,10519+23]..src/sentenceParser.ml[275,10519+29])
                  Tpat_any
              expression (src/sentenceParser.ml[275,10519+56]..src/sentenceParser.ml[276,10602+85]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/sentenceParser.ml[275,10519+57]..src/sentenceParser.ml[275,10519+63])
                      extra
                        Tpat_extra_constraint
                        core_type (src/sentenceParser.ml[275,10519+66]..src/sentenceParser.ml[275,10519+79])
                          Ttyp_constr "Stdlib!.Lexing.lexbuf"
                          []
                      Tpat_alias "lexbuf/792"
                      pattern (src/sentenceParser.ml[275,10519+57]..src/sentenceParser.ml[275,10519+63])
                        Tpat_any
                    expression (src/sentenceParser.ml[276,10602+4]..src/sentenceParser.ml[276,10602+44])
                      extra
                        Texp_constraint
                        core_type (src/sentenceParser.ml[276,10602+47]..src/sentenceParser.ml[276,10602+84])
                          Ttyp_constr "option/10!"
                          [
                            core_type (src/sentenceParser.ml[276,10602+47]..src/sentenceParser.ml[276,10602+77])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.raw_sentence"
                              []
                          ]
                      Texp_apply
                      expression (src/sentenceParser.ml[276,10602+4]..src/sentenceParser.ml[276,10602+19])
                        Texp_ident "Stdlib!.Parsing.yyparse"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[276,10602+20]..src/sentenceParser.ml[276,10602+28])
                            Texp_ident "yytables/788"
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[276,10602+29]..src/sentenceParser.ml[276,10602+30])
                            Texp_constant Const_int 1
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[276,10602+31]..src/sentenceParser.ml[276,10602+37])
                            Texp_ident "lexfun/791"
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[276,10602+38]..src/sentenceParser.ml[276,10602+44])
                            Texp_ident "lexbuf/792"
                      ]
                ]
          ]
    ]
  structure_item (src/sentenceParser.ml[277,10688+0]..src/sentenceParser.ml[278,10759+120])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/sentenceParser.ml[277,10688+4]..src/sentenceParser.ml[277,10688+9])
          Tpat_var "entry/793"
        expression (src/sentenceParser.ml[277,10688+10]..src/sentenceParser.ml[278,10759+120]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/sentenceParser.ml[277,10688+11]..src/sentenceParser.ml[277,10688+17])
                extra
                  Tpat_extra_constraint
                  core_type (src/sentenceParser.ml[277,10688+20]..src/sentenceParser.ml[277,10688+42])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/sentenceParser.ml[277,10688+20]..src/sentenceParser.ml[277,10688+33])
                      Ttyp_constr "Stdlib!.Lexing.lexbuf"
                      []
                    core_type (src/sentenceParser.ml[277,10688+37]..src/sentenceParser.ml[277,10688+42])
                      Ttyp_constr "token/397"
                      []
                Tpat_alias "lexfun/795"
                pattern (src/sentenceParser.ml[277,10688+11]..src/sentenceParser.ml[277,10688+17])
                  Tpat_any
              expression (src/sentenceParser.ml[277,10688+44]..src/sentenceParser.ml[278,10759+120]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/sentenceParser.ml[277,10688+45]..src/sentenceParser.ml[277,10688+51])
                      extra
                        Tpat_extra_constraint
                        core_type (src/sentenceParser.ml[277,10688+54]..src/sentenceParser.ml[277,10688+67])
                          Ttyp_constr "Stdlib!.Lexing.lexbuf"
                          []
                      Tpat_alias "lexbuf/796"
                      pattern (src/sentenceParser.ml[277,10688+45]..src/sentenceParser.ml[277,10688+51])
                        Tpat_any
                    expression (src/sentenceParser.ml[278,10759+4]..src/sentenceParser.ml[278,10759+44])
                      extra
                        Texp_constraint
                        core_type (src/sentenceParser.ml[278,10759+47]..src/sentenceParser.ml[278,10759+119])
                          Ttyp_constr "list/9!"
                          [
                            core_type (src/sentenceParser.ml[278,10759+47]..src/sentenceParser.ml[278,10759+114])
                              Ttyp_constr "Dune__exe!.SentenceParserAux.or_comment"
                              [
                                core_type (src/sentenceParser.ml[278,10759+47]..src/sentenceParser.ml[278,10759+85])
                                  Ttyp_constr "Dune__exe!.SentenceParserAux.located_raw_sentence"
                                  []
                              ]
                          ]
                      Texp_apply
                      expression (src/sentenceParser.ml[278,10759+4]..src/sentenceParser.ml[278,10759+19])
                        Texp_ident "Stdlib!.Parsing.yyparse"
                      [
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[278,10759+20]..src/sentenceParser.ml[278,10759+28])
                            Texp_ident "yytables/788"
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[278,10759+29]..src/sentenceParser.ml[278,10759+30])
                            Texp_constant Const_int 2
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[278,10759+31]..src/sentenceParser.ml[278,10759+37])
                            Texp_ident "lexfun/795"
                        <arg>
                          Nolabel
                          expression (src/sentenceParser.ml[278,10759+38]..src/sentenceParser.ml[278,10759+44])
                            Texp_ident "lexbuf/796"
                      ]
                ]
          ]
    ]
]

{<Dune__exe__SentenceParser>
 "entry"[value] -> <Dune__exe__SentenceParser.58>;
 "optional_sentence"[value] -> <Dune__exe__SentenceParser.55>;
 "token"[type] -> <Dune__exe__SentenceParser.0>;
 }

(seq (seq (field_imm 15 (global Stdlib__Parsing!)) 0)
  (let
    (locate_sentence/485 =
       (function (param/1438, param/1439)
         (let
           (terminals/488 =a param/1439
            nto/487 =a param/1438
            opening/489 =
              (catch
                (if (isint nto/487)
                  (if (isint terminals/488)
                    (field_imm 0 (global Stdlib__Lexing!))
                    (let
                      (*match*/1448 =a (field_imm 1 terminals/488)
                       *match*/1445 =a (field_imm 0 terminals/488)
                       *match*/1447 =a (field_imm 2 *match*/1445)
                       opening/1440 =a (field_imm 1 *match*/1445)
                       *match*/1446 =a (field_imm 0 *match*/1445))
                      (exit 1 opening/1440)))
                  (let
                    (*match*/1442 =a (field_imm 0 nto/487)
                     *match*/1444 =a (field_imm 2 *match*/1442)
                     opening/1441 =a (field_imm 1 *match*/1442)
                     *match*/1443 =a (field_imm 0 *match*/1442))
                    (exit 1 opening/1441)))
               with (1 opening/491) opening/491)
            closing/490 =
              (let
                (*match*/1449 =
                   (apply (field_imm 9 (global Stdlib__List!)) terminals/488))
                (catch
                  (catch
                    (catch
                      (if (isint nto/487)
                        (if (isint *match*/1449)
                          (field_imm 0 (global Stdlib__Lexing!)) (exit 4))
                        (exit 4))
                     with (4)
                      (if (isint *match*/1449) (exit 3)
                        (let
                          (*match*/1455 =a (field_imm 1 *match*/1449)
                           *match*/1452 =a (field_imm 0 *match*/1449)
                           closing/1451 =a (field_imm 2 *match*/1452)
                           *match*/1454 =a (field_imm 1 *match*/1452)
                           *match*/1453 =a (field_imm 0 *match*/1452))
                          (exit 2 closing/1451))))
                   with (3)
                    (let
                      (*match*/1456 =a (field_imm 0 nto/487)
                       closing/1450 =a (field_imm 2 *match*/1456)
                       *match*/1458 =a (field_imm 1 *match*/1456)
                       *match*/1457 =a (field_imm 0 *match*/1456))
                      (exit 2 closing/1450)))
                 with (2 closing/559) closing/559)))
           (makeblock 0
             (makeblock 0
               (apply (field_imm 19 (global Dune__exe__Positions!))
                 (makeblock 0 opening/489 closing/490))
               0)
             (makeblock 0 nto/487 terminals/488)))))
    (setfield_ptr(root-init) 2 (global Dune__exe__SentenceParser!)
      locate_sentence/485))
  (let (yytransl_const/632 = (makearray[int] 257 0 258 0))
    (setfield_ptr(root-init) 3 (global Dune__exe__SentenceParser!)
      yytransl_const/632))
  (let (yytransl_block/633 = (makearray[int] 259 260 261 0))
    (setfield_ptr(root-init) 4 (global Dune__exe__SentenceParser!)
      yytransl_block/633))
  (let
    (yylhs/634 =
       "\255\255\004\000\005\000\005\000\005\000\002\000\003\000\003\000\001\000\001\000\006\000\006\000\000\000\000\000")
    (setfield_ptr(root-init) 5 (global Dune__exe__SentenceParser!) yylhs/634))
  (let
    (yylen/635 =
       "\002\000\002\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\002\000\000\000\002\000\002\000\002\000")
    (setfield_ptr(root-init) 6 (global Dune__exe__SentenceParser!) yylen/635))
  (let
    (yydefred/636 =
       "\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\012\000\000\000\000\000\005\000\000\000\r\000\000\000\011\000\000\000\t\000\004\000\003\000\001\000\000\000\b\000")
    (setfield_ptr(root-init) 7 (global Dune__exe__SentenceParser!)
      yydefred/636))
  (let (yydgoto/637 = "\003\000\011\000\012\000\b\000\r\000\014\000\t\000")
    (setfield_ptr(root-init) 8 (global Dune__exe__SentenceParser!)
      yydgoto/637))
  (let
    (yysindex/638 =
       "\011\000\001\000\002\255\000\000\000\000\255\254\b\255\000\000\000\000\001\255\002\255\000\000\002\255\000\000\014\000\000\000\255\254\000\000\000\000\000\000\000\000\r\255\000\000")
    (setfield_ptr(root-init) 9 (global Dune__exe__SentenceParser!)
      yysindex/638))
  (let
    (yyrindex/639 =
       "\000\000\014\255\004\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000")
    (setfield_ptr(root-init) 10 (global Dune__exe__SentenceParser!)
      yyrindex/639))
  (let
    (yygindex/640 =
       "\000\000\016\000\000\000\000\000\000\000\254\255\251\255")
    (setfield_ptr(root-init) 11 (global Dune__exe__SentenceParser!)
      yygindex/640))
  (let (yytablesize/641 =[int] 262)
    (setfield_ptr(root-init) 12 (global Dune__exe__SentenceParser!)
      yytablesize/641))
  (let
    (yytable/642 =
       "\015\000\004\000\005\000\017\000\002\000\005\000\006\000\n\000\018\000\016\000\019\000\021\000\001\000\002\000\020\000\022\000\nn\000")
    (setfield_ptr(root-init) 13 (global Dune__exe__SentenceParser!)
      yytable/642))
  (let
    (yycheck/643 =
       "\005\000\000\000\003\001\002\001\000\000\003\001\004\001\005\001\n
    (setfield_ptr(root-init) 14 (global Dune__exe__SentenceParser!)
      yycheck/643))
  (let (yynames_const/644 = "COLON\000EOF\000EOL\000")
    (setfield_ptr(root-init) 15 (global Dune__exe__SentenceParser!)
      yynames_const/644))
  (let (yynames_block/645 = "TERMINAL\000NONTERMINAL\000COMMENT\000")
    (setfield_ptr(root-init) 16 (global Dune__exe__SentenceParser!)
      yynames_block/645))
  (let
    (yyact/646 =
       (makearray[addr]
         (function param/647 (apply (field_imm 1 (global Stdlib!)) "parser"))
         (function __caml_parser_env/648
           (let
             (_1/649 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/648 1))
             _1/649))
         (function __caml_parser_env/765 0)
         (function __caml_parser_env/766
           (let
             (_1/767 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/766 1)
              _2/768 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/766 0))
             (makeblock 0 (makeblock 0 _1/767) _2/768)))
         (function __caml_parser_env/769
           (let
             (_1/770 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/769 1)
              _2/771 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/769 0))
             (makeblock 0 (makeblock 1 _1/770) _2/771)))
         (function __caml_parser_env/772
           (let
             (_1/773 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/772 0))
             (apply (field_imm 2 (global Dune__exe__SentenceParser!)) _1/773)))
         (function __caml_parser_env/774 0)
         (function __caml_parser_env/775
           (let
             (_1/776 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/775 0))
             (makeblock 0 _1/776)))
         (function __caml_parser_env/777
           (let
             (_1/778 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/777 3)
              _3/779 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/777 1))
             (makeblock 0 (makeblock 0 _1/778) _3/779)))
         (function __caml_parser_env/780
           (let
             (_1/781 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/780 1))
             (makeblock 0 0 _1/781)))
         (function __caml_parser_env/782 0)
         (function __caml_parser_env/783
           (let
             (_1/784 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/783 1)
              _2/785 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/783 0))
             (makeblock 0 _1/784 _2/785)))
         (function __caml_parser_env/786
           (raise
             (makeblock 0 (field_imm 11 (global Stdlib__Parsing!))
               (apply (field_imm 13 (global Stdlib__Parsing!))
                 __caml_parser_env/786 0))))
         (function __caml_parser_env/787
           (raise
             (makeblock 0 (field_imm 11 (global Stdlib__Parsing!))
               (apply (field_imm 13 (global Stdlib__Parsing!))
                 __caml_parser_env/787 0))))))
    (setfield_ptr(root-init) 17 (global Dune__exe__SentenceParser!)
      yyact/646))
  (let
    (yytables/788 =
       (makeblock 0 (*,*,*,*,*,*,*,*,*,*,int,*,*,*,*,*)
         (field_imm 17 (global Dune__exe__SentenceParser!))
         (field_imm 3 (global Dune__exe__SentenceParser!))
         (field_imm 4 (global Dune__exe__SentenceParser!))
         (field_imm 5 (global Dune__exe__SentenceParser!))
         (field_imm 6 (global Dune__exe__SentenceParser!))
         (field_imm 7 (global Dune__exe__SentenceParser!))
         (field_imm 8 (global Dune__exe__SentenceParser!))
         (field_imm 9 (global Dune__exe__SentenceParser!))
         (field_imm 10 (global Dune__exe__SentenceParser!))
         (field_imm 11 (global Dune__exe__SentenceParser!))
         (field_imm 12 (global Dune__exe__SentenceParser!))
         (field_imm 13 (global Dune__exe__SentenceParser!))
         (field_imm 14 (global Dune__exe__SentenceParser!))
         (field_imm 15 (global Stdlib__Parsing!))
         (field_imm 15 (global Dune__exe__SentenceParser!))
         (field_imm 16 (global Dune__exe__SentenceParser!))))
    (setfield_ptr(root-init) 18 (global Dune__exe__SentenceParser!)
      yytables/788))
  (let
    (optional_sentence/789 =
       (function lexfun/791 lexbuf/792
         (apply (field_imm 12 (global Stdlib__Parsing!))
           (field_imm 18 (global Dune__exe__SentenceParser!)) 1 lexfun/791
           lexbuf/792)))
    (setfield_ptr(root-init) 0 (global Dune__exe__SentenceParser!)
      optional_sentence/789))
  (let
    (entry/793 =
       (function lexfun/795 lexbuf/796
         (apply (field_imm 12 (global Stdlib__Parsing!))
           (field_imm 18 (global Dune__exe__SentenceParser!)) 2 lexfun/795
           lexbuf/796)))
    (setfield_ptr(root-init) 1 (global Dune__exe__SentenceParser!) entry/793))
  0)
(seq (seq (field_imm 15 (global Stdlib__Parsing!)) 0)
  (let
    (locate_sentence/485 =
       (function (param/1438, param/1439)
         (let
           (opening/489 =
              (catch
                (if (isint param/1438)
                  (if (isint param/1439)
                    (field_imm 0 (global Stdlib__Lexing!))
                    (exit 1 (field_imm 1 (field_imm 0 param/1439))))
                  (exit 1 (field_imm 1 (field_imm 0 param/1438))))
               with (1 opening/491) opening/491)
            closing/490 =
              (let
                (*match*/1449 =
                   (apply (field_imm 9 (global Stdlib__List!)) param/1439))
                (catch
                  (catch
                    (if (isint param/1438)
                      (if (isint *match*/1449)
                        (field_imm 0 (global Stdlib__Lexing!)) (exit 4))
                      (exit 4))
                   with (4)
                    (if (isint *match*/1449)
                      (exit 2 (field_imm 2 (field_imm 0 param/1438)))
                      (exit 2 (field_imm 2 (field_imm 0 *match*/1449)))))
                 with (2 closing/559) closing/559)))
           (makeblock 0
             (makeblock 0
               (apply (field_imm 19 (global Dune__exe__Positions!))
                 (makeblock 0 opening/489 closing/490))
               0)
             (makeblock 0 param/1438 param/1439)))))
    (setfield_ptr(root-init) 2 (global Dune__exe__SentenceParser!)
      locate_sentence/485))
  (let (yytransl_const/632 = (makearray[int] 257 0 258 0))
    (setfield_ptr(root-init) 3 (global Dune__exe__SentenceParser!)
      yytransl_const/632))
  (let (yytransl_block/633 = (makearray[int] 259 260 261 0))
    (setfield_ptr(root-init) 4 (global Dune__exe__SentenceParser!)
      yytransl_block/633))
  (let
    (yylhs/634 =
       "\255\255\004\000\005\000\005\000\005\000\002\000\003\000\003\000\001\000\001\000\006\000\006\000\000\000\000\000")
    (setfield_ptr(root-init) 5 (global Dune__exe__SentenceParser!) yylhs/634))
  (let
    (yylen/635 =
       "\002\000\002\000\000\000\002\000\002\000\001\000\001\000\001\000\004\000\002\000\000\000\002\000\002\000\002\000")
    (setfield_ptr(root-init) 6 (global Dune__exe__SentenceParser!) yylen/635))
  (let
    (yydefred/636 =
       "\000\000\000\000\000\000\000\000\006\000\000\000\000\000\007\000\012\000\000\000\000\000\005\000\000\000\r\000\000\000\011\000\000\000\t\000\004\000\003\000\001\000\000\000\b\000")
    (setfield_ptr(root-init) 7 (global Dune__exe__SentenceParser!)
      yydefred/636))
  (let (yydgoto/637 = "\003\000\011\000\012\000\b\000\r\000\014\000\t\000")
    (setfield_ptr(root-init) 8 (global Dune__exe__SentenceParser!)
      yydgoto/637))
  (let
    (yysindex/638 =
       "\011\000\001\000\002\255\000\000\000\000\255\254\b\255\000\000\000\000\001\255\002\255\000\000\002\255\000\000\014\000\000\000\255\254\000\000\000\000\000\000\000\000\r\255\000\000")
    (setfield_ptr(root-init) 9 (global Dune__exe__SentenceParser!)
      yysindex/638))
  (let
    (yyrindex/639 =
       "\000\000\014\255\004\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000")
    (setfield_ptr(root-init) 10 (global Dune__exe__SentenceParser!)
      yyrindex/639))
  (let
    (yygindex/640 =
       "\000\000\016\000\000\000\000\000\000\000\254\255\251\255")
    (setfield_ptr(root-init) 11 (global Dune__exe__SentenceParser!)
      yygindex/640))
  (let (yytablesize/641 =[int] 262)
    (setfield_ptr(root-init) 12 (global Dune__exe__SentenceParser!)
      yytablesize/641))
  (let
    (yytable/642 =
       "\015\000\004\000\005\000\017\000\002\000\005\000\006\000\n\000\018\000\016\000\019\000\021\000\001\000\002\000\020\000\022\000\nn\000")
    (setfield_ptr(root-init) 13 (global Dune__exe__SentenceParser!)
      yytable/642))
  (let
    (yycheck/643 =
       "\005\000\000\000\003\001\002\001\000\000\003\001\004\001\005\001\n
    (setfield_ptr(root-init) 14 (global Dune__exe__SentenceParser!)
      yycheck/643))
  (let (yynames_const/644 = "COLON\000EOF\000EOL\000")
    (setfield_ptr(root-init) 15 (global Dune__exe__SentenceParser!)
      yynames_const/644))
  (let (yynames_block/645 = "TERMINAL\000NONTERMINAL\000COMMENT\000")
    (setfield_ptr(root-init) 16 (global Dune__exe__SentenceParser!)
      yynames_block/645))
  (let
    (yyact/646 =
       (makearray[addr]
         (function param/647 (apply (field_imm 1 (global Stdlib!)) "parser"))
         (function __caml_parser_env/648
           (apply (field_imm 13 (global Stdlib__Parsing!))
             __caml_parser_env/648 1))
         (function __caml_parser_env/765 0)
         (function __caml_parser_env/766
           (let
             (_1/767 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/766 1)
              _2/768 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/766 0))
             (makeblock 0 (makeblock 0 _1/767) _2/768)))
         (function __caml_parser_env/769
           (let
             (_1/770 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/769 1)
              _2/771 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/769 0))
             (makeblock 0 (makeblock 1 _1/770) _2/771)))
         (function __caml_parser_env/772
           (let
             (_1/773 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/772 0))
             (apply (field_imm 2 (global Dune__exe__SentenceParser!)) _1/773)))
         (function __caml_parser_env/774 0)
         (function __caml_parser_env/775
           (let
             (_1/776 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/775 0))
             (makeblock 0 _1/776)))
         (function __caml_parser_env/777
           (let
             (_1/778 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/777 3)
              _3/779 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/777 1))
             (makeblock 0 (makeblock 0 _1/778) _3/779)))
         (function __caml_parser_env/780
           (let
             (_1/781 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/780 1))
             (makeblock 0 0 _1/781)))
         (function __caml_parser_env/782 0)
         (function __caml_parser_env/783
           (let
             (_1/784 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/783 1)
              _2/785 =
                (apply (field_imm 13 (global Stdlib__Parsing!))
                  __caml_parser_env/783 0))
             (makeblock 0 _1/784 _2/785)))
         (function __caml_parser_env/786
           (raise
             (makeblock 0 (field_imm 11 (global Stdlib__Parsing!))
               (apply (field_imm 13 (global Stdlib__Parsing!))
                 __caml_parser_env/786 0))))
         (function __caml_parser_env/787
           (raise
             (makeblock 0 (field_imm 11 (global Stdlib__Parsing!))
               (apply (field_imm 13 (global Stdlib__Parsing!))
                 __caml_parser_env/787 0))))))
    (setfield_ptr(root-init) 17 (global Dune__exe__SentenceParser!)
      yyact/646))
  (let
    (yytables/788 =
       (makeblock 0 (*,*,*,*,*,*,*,*,*,*,int,*,*,*,*,*)
         (field_imm 17 (global Dune__exe__SentenceParser!))
         (field_imm 3 (global Dune__exe__SentenceParser!))
         (field_imm 4 (global Dune__exe__SentenceParser!))
         (field_imm 5 (global Dune__exe__SentenceParser!))
         (field_imm 6 (global Dune__exe__SentenceParser!))
         (field_imm 7 (global Dune__exe__SentenceParser!))
         (field_imm 8 (global Dune__exe__SentenceParser!))
         (field_imm 9 (global Dune__exe__SentenceParser!))
         (field_imm 10 (global Dune__exe__SentenceParser!))
         (field_imm 11 (global Dune__exe__SentenceParser!))
         (field_imm 12 (global Dune__exe__SentenceParser!))
         (field_imm 13 (global Dune__exe__SentenceParser!))
         (field_imm 14 (global Dune__exe__SentenceParser!))
         (field_imm 15 (global Stdlib__Parsing!))
         (field_imm 15 (global Dune__exe__SentenceParser!))
         (field_imm 16 (global Dune__exe__SentenceParser!))))
    (setfield_ptr(root-init) 18 (global Dune__exe__SentenceParser!)
      yytables/788))
  (let
    (optional_sentence/789 =
       (function lexfun/791 lexbuf/792
         (apply (field_imm 12 (global Stdlib__Parsing!))
           (field_imm 18 (global Dune__exe__SentenceParser!)) 1 lexfun/791
           lexbuf/792)))
    (setfield_ptr(root-init) 0 (global Dune__exe__SentenceParser!)
      optional_sentence/789))
  (let
    (entry/793 =
       (function lexfun/795 lexbuf/796
         (apply (field_imm 12 (global Stdlib__Parsing!))
           (field_imm 18 (global Dune__exe__SentenceParser!)) 2 lexfun/795
           lexbuf/796)))
    (setfield_ptr(root-init) 1 (global Dune__exe__SentenceParser!) entry/793))
  0)

[
  structure_item (src/CheckSafeParameterizedGrammar.ml[14,1019+0]..[14,1019+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[14,1019+4]..[14,1019+9])
          Ppat_var "value" (src/CheckSafeParameterizedGrammar.ml[14,1019+4]..[14,1019+9])
        expression (src/CheckSafeParameterizedGrammar.ml[14,1019+12]..[14,1019+27])
          Pexp_ident "Positions.value" (src/CheckSafeParameterizedGrammar.ml[14,1019+12]..[14,1019+27])
    ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[15,1047+0]..[15,1047+11])
    Pstr_open Fresh
    module_expr (src/CheckSafeParameterizedGrammar.ml[15,1047+5]..[15,1047+11])
      Pmod_ident "Syntax" (src/CheckSafeParameterizedGrammar.ml[15,1047+5]..[15,1047+11])
  structure_item (src/CheckSafeParameterizedGrammar.ml[26,1482+0]..[26,1482+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[26,1482+4]..[26,1482+9])
          Ppat_var "debug" (src/CheckSafeParameterizedGrammar.ml[26,1482+4]..[26,1482+9])
        expression (src/CheckSafeParameterizedGrammar.ml[26,1482+12]..[26,1482+17])
          Pexp_construct "false" (src/CheckSafeParameterizedGrammar.ml[26,1482+12]..[26,1482+17])
          None
    ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[32,1651+0]..[251,10098+3])
    Pstr_module
    "Run" (src/CheckSafeParameterizedGrammar.ml[32,1651+7]..[32,1651+10])
      module_expr (src/CheckSafeParameterizedGrammar.ml[32,1651+11]..[251,10098+3])
        Pmod_functor "G" (src/CheckSafeParameterizedGrammar.ml[32,1651+12]..[32,1651+13])
        module_type (src/CheckSafeParameterizedGrammar.ml[32,1651+16]..[32,1651+39])
          Pmty_signature
          [
            signature_item (src/CheckSafeParameterizedGrammar.ml[32,1651+20]..[32,1651+35])
              Psig_value
              value_description "g" (src/CheckSafeParameterizedGrammar.ml[32,1651+24]..[32,1651+25]) (src/CheckSafeParameterizedGrammar.ml[32,1651+20]..[32,1651+35])
                core_type (src/CheckSafeParameterizedGrammar.ml[32,1651+28]..[32,1651+35])
                  Ptyp_constr "grammar" (src/CheckSafeParameterizedGrammar.ml[32,1651+28]..[32,1651+35])
                  []
                []
          ]
        module_expr (src/CheckSafeParameterizedGrammar.ml[32,1651+43]..[251,10098+3])
          Pmod_structure
          [
            structure_item (src/CheckSafeParameterizedGrammar.ml[33,1701+0]..[33,1701+6])
              Pstr_open Fresh
              module_expr (src/CheckSafeParameterizedGrammar.ml[33,1701+5]..[33,1701+6])
                Pmod_ident "G" (src/CheckSafeParameterizedGrammar.ml[33,1701+5]..[33,1701+6])
            structure_item (src/CheckSafeParameterizedGrammar.ml[42,2089+0]..[43,2103+14])
              Pstr_type Rec
              [
                type_declaration "formal" (src/CheckSafeParameterizedGrammar.ml[42,2089+5]..[42,2089+11]) (src/CheckSafeParameterizedGrammar.ml[42,2089+0]..[43,2103+14])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+2]..[43,2103+14])
                        Ptyp_tuple
                        [
                          core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+2]..[43,2103+8])
                            Ptyp_constr "symbol" (src/CheckSafeParameterizedGrammar.ml[43,2103+2]..[43,2103+8])
                            []
                          core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+11]..[43,2103+14])
                            Ptyp_constr "int" (src/CheckSafeParameterizedGrammar.ml[43,2103+11]..[43,2103+14])
                            []
                        ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[45,2119+0]..[47,2206+34])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+4]..[45,2119+11])
                    Ppat_var "formals" (src/CheckSafeParameterizedGrammar.ml[45,2119+4]..[45,2119+11])
                  expression (src/CheckSafeParameterizedGrammar.ml[45,2119+12]..[47,2206+34]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+12]..[45,2119+22])
                      Ppat_tuple
                      [
                        pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+13]..[45,2119+15])
                          Ppat_var "nt" (src/CheckSafeParameterizedGrammar.ml[45,2119+13]..[45,2119+15])
                        pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+17]..[45,2119+21])
                          Ppat_var "rule" (src/CheckSafeParameterizedGrammar.ml[45,2119+17]..[45,2119+21])
                      ]
                    expression (src/CheckSafeParameterizedGrammar.ml[45,2119+23]..[47,2206+34])
                      Pexp_constraint
                      expression (src/CheckSafeParameterizedGrammar.ml[46,2158+2]..[47,2206+34])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[46,2158+6]..[46,2158+11])
                              Ppat_var "arity" (src/CheckSafeParameterizedGrammar.ml[46,2158+6]..[46,2158+11])
                            expression (src/CheckSafeParameterizedGrammar.ml[46,2158+14]..[46,2158+44])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[46,2158+14]..[46,2158+25])
                                Pexp_ident "List.length" (src/CheckSafeParameterizedGrammar.ml[46,2158+14]..[46,2158+25])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[46,2158+26]..[46,2158+44])
                                    Pexp_field
                                    expression (src/CheckSafeParameterizedGrammar.ml[46,2158+26]..[46,2158+30])
                                      Pexp_ident "rule" (src/CheckSafeParameterizedGrammar.ml[46,2158+26]..[46,2158+30])
                                    "pr_parameters" (src/CheckSafeParameterizedGrammar.ml[46,2158+31]..[46,2158+44])
                              ]
                        ]
                        expression (src/CheckSafeParameterizedGrammar.ml[47,2206+2]..[47,2206+34])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[47,2206+2]..[47,2206+11])
                            Pexp_ident "Misc.mapi" (src/CheckSafeParameterizedGrammar.ml[47,2206+2]..[47,2206+11])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[47,2206+12]..[47,2206+17])
                                Pexp_ident "arity" (src/CheckSafeParameterizedGrammar.ml[47,2206+12]..[47,2206+17])
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[47,2206+18]..[47,2206+34])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/CheckSafeParameterizedGrammar.ml[47,2206+23]..[47,2206+24])
                                  Ppat_var "i" (src/CheckSafeParameterizedGrammar.ml[47,2206+23]..[47,2206+24])
                                expression (src/CheckSafeParameterizedGrammar.ml[47,2206+28]..[47,2206+33])
                                  Pexp_tuple
                                  [
                                    expression (src/CheckSafeParameterizedGrammar.ml[47,2206+28]..[47,2206+30])
                                      Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[47,2206+28]..[47,2206+30])
                                    expression (src/CheckSafeParameterizedGrammar.ml[47,2206+32]..[47,2206+33])
                                      Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[47,2206+32]..[47,2206+33])
                                  ]
                          ]
                      core_type (src/CheckSafeParameterizedGrammar.ml[45,2119+25]..[45,2119+36])
                        Ptyp_constr "list" (src/CheckSafeParameterizedGrammar.ml[45,2119+32]..[45,2119+36])
                        [
                          core_type (src/CheckSafeParameterizedGrammar.ml[45,2119+25]..[45,2119+31])
                            Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[45,2119+25]..[45,2119+31])
                            []
                        ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[49,2242+0]..[53,2341+18])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[49,2242+4]..[49,2242+11])
                    Ppat_var "formals" (src/CheckSafeParameterizedGrammar.ml[49,2242+4]..[49,2242+11])
                  core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..[49,2242+26])
                    Ptyp_constr "array" (src/CheckSafeParameterizedGrammar.ml[49,2242+21]..[49,2242+26])
                    [
                      core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..[49,2242+20])
                        Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..[49,2242+20])
                        []
                    ]
                  expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[53,2341+18])
                    Pexp_apply
                    expression (src/CheckSafeParameterizedGrammar.ml[53,2341+2]..[53,2341+4])
                      Pexp_ident "|>" (src/CheckSafeParameterizedGrammar.ml[53,2341+2]..[53,2341+4])
                    [
                      <arg>
                      Nolabel
                        expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[52,2324+16])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[52,2324+2]..[52,2324+4])
                            Pexp_ident "|>" (src/CheckSafeParameterizedGrammar.ml[52,2324+2]..[52,2324+4])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[51,2302+21])
                                Pexp_apply
                                expression (src/CheckSafeParameterizedGrammar.ml[51,2302+2]..[51,2302+4])
                                  Pexp_ident "|>" (src/CheckSafeParameterizedGrammar.ml[51,2302+2]..[51,2302+4])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[50,2271+30])
                                      Pexp_apply
                                      expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[50,2271+20])
                                        Pexp_ident "StringMap.bindings" (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..[50,2271+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/CheckSafeParameterizedGrammar.ml[50,2271+21]..[50,2271+30])
                                            Pexp_field
                                            expression (src/CheckSafeParameterizedGrammar.ml[50,2271+21]..[50,2271+22])
                                              Pexp_ident "g" (src/CheckSafeParameterizedGrammar.ml[50,2271+21]..[50,2271+22])
                                            "p_rules" (src/CheckSafeParameterizedGrammar.ml[50,2271+23]..[50,2271+30])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[51,2302+5]..[51,2302+21])
                                      Pexp_apply
                                      expression (src/CheckSafeParameterizedGrammar.ml[51,2302+5]..[51,2302+13])
                                        Pexp_ident "List.map" (src/CheckSafeParameterizedGrammar.ml[51,2302+5]..[51,2302+13])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/CheckSafeParameterizedGrammar.ml[51,2302+14]..[51,2302+21])
                                            Pexp_ident "formals" (src/CheckSafeParameterizedGrammar.ml[51,2302+14]..[51,2302+21])
                                      ]
                                ]
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[52,2324+5]..[52,2324+16])
                                Pexp_ident "List.concat" (src/CheckSafeParameterizedGrammar.ml[52,2324+5]..[52,2324+16])
                          ]
                      <arg>
                      Nolabel
                        expression (src/CheckSafeParameterizedGrammar.ml[53,2341+5]..[53,2341+18])
                          Pexp_ident "Array.of_list" (src/CheckSafeParameterizedGrammar.ml[53,2341+5]..[53,2341+18])
                    ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[59,2530+0]..[62,2748+9])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+4]..[59,2530+8])
                    Ppat_var "info" (src/CheckSafeParameterizedGrammar.ml[59,2530+4]..[59,2530+8])
                  expression (src/CheckSafeParameterizedGrammar.ml[59,2530+9]..[62,2748+9]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+9]..[59,2530+27])
                      Ppat_constraint
                      pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+10]..[59,2530+17])
                        Ppat_tuple
                        [
                          pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+11]..[59,2530+13])
                            Ppat_var "nt" (src/CheckSafeParameterizedGrammar.ml[59,2530+11]..[59,2530+13])
                          pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+15]..[59,2530+16])
                            Ppat_var "i" (src/CheckSafeParameterizedGrammar.ml[59,2530+15]..[59,2530+16])
                        ]
                      core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+20]..[59,2530+26])
                        Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[59,2530+20]..[59,2530+26])
                        []
                    expression (src/CheckSafeParameterizedGrammar.ml[59,2530+28]..[62,2748+9])
                      Pexp_constraint
                      expression (src/CheckSafeParameterizedGrammar.ml[60,2590+2]..[62,2748+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[60,2590+6]..[60,2590+10])
                              Ppat_var "rule" (src/CheckSafeParameterizedGrammar.ml[60,2590+6]..[60,2590+10])
                            expression (src/CheckSafeParameterizedGrammar.ml[60,2590+13]..[60,2590+75])
                              Pexp_try
                              expression (src/CheckSafeParameterizedGrammar.ml[60,2590+17]..[60,2590+44])
                                Pexp_apply
                                expression (src/CheckSafeParameterizedGrammar.ml[60,2590+17]..[60,2590+31])
                                  Pexp_ident "StringMap.find" (src/CheckSafeParameterizedGrammar.ml[60,2590+17]..[60,2590+31])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[60,2590+32]..[60,2590+34])
                                      Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[60,2590+32]..[60,2590+34])
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[60,2590+35]..[60,2590+44])
                                      Pexp_field
                                      expression (src/CheckSafeParameterizedGrammar.ml[60,2590+35]..[60,2590+36])
                                        Pexp_ident "g" (src/CheckSafeParameterizedGrammar.ml[60,2590+35]..[60,2590+36])
                                      "p_rules" (src/CheckSafeParameterizedGrammar.ml[60,2590+37]..[60,2590+44])
                                ]
                              [
                                <case>
                                  pattern (src/CheckSafeParameterizedGrammar.ml[60,2590+50]..[60,2590+59])
                                    Ppat_construct "Not_found" (src/CheckSafeParameterizedGrammar.ml[60,2590+50]..[60,2590+59])
                                    None
                                  expression (src/CheckSafeParameterizedGrammar.ml[60,2590+63]..[60,2590+75])
                                    Pexp_assert
                                    expression (src/CheckSafeParameterizedGrammar.ml[60,2590+70]..[60,2590+75])
                                      Pexp_construct "false" (src/CheckSafeParameterizedGrammar.ml[60,2590+70]..[60,2590+75])
                                      None
                              ]
                        ]
                        expression (src/CheckSafeParameterizedGrammar.ml[61,2669+2]..[62,2748+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+6]..[61,2669+7])
                                Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[61,2669+6]..[61,2669+7])
                              expression (src/CheckSafeParameterizedGrammar.ml[61,2669+11]..[61,2669+75])
                                Pexp_try
                                expression (src/CheckSafeParameterizedGrammar.ml[61,2669+15]..[61,2669+44])
                                  Pexp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[61,2669+15]..[61,2669+23])
                                    Pexp_ident "List.nth" (src/CheckSafeParameterizedGrammar.ml[61,2669+15]..[61,2669+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[61,2669+24]..[61,2669+42])
                                        Pexp_field
                                        expression (src/CheckSafeParameterizedGrammar.ml[61,2669+24]..[61,2669+28])
                                          Pexp_ident "rule" (src/CheckSafeParameterizedGrammar.ml[61,2669+24]..[61,2669+28])
                                        "pr_parameters" (src/CheckSafeParameterizedGrammar.ml[61,2669+29]..[61,2669+42])
                                    <arg>
                                    Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[61,2669+43]..[61,2669+44])
                                        Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[61,2669+43]..[61,2669+44])
                                  ]
                                [
                                  <case>
                                    pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+50]..[61,2669+59])
                                      Ppat_construct "Failure" (src/CheckSafeParameterizedGrammar.ml[61,2669+50]..[61,2669+57])
                                      Some
                                        []
                                        pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+58]..[61,2669+59])
                                          Ppat_any
                                    expression (src/CheckSafeParameterizedGrammar.ml[61,2669+63]..[61,2669+75])
                                      Pexp_assert
                                      expression (src/CheckSafeParameterizedGrammar.ml[61,2669+70]..[61,2669+75])
                                        Pexp_construct "false" (src/CheckSafeParameterizedGrammar.ml[61,2669+70]..[61,2669+75])
                                        None
                                ]
                          ]
                          expression (src/CheckSafeParameterizedGrammar.ml[62,2748+2]..[62,2748+9])
                            Pexp_tuple
                            [
                              expression (src/CheckSafeParameterizedGrammar.ml[62,2748+2]..[62,2748+6])
                                Pexp_ident "rule" (src/CheckSafeParameterizedGrammar.ml[62,2748+2]..[62,2748+6])
                              expression (src/CheckSafeParameterizedGrammar.ml[62,2748+8]..[62,2748+9])
                                Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[62,2748+8]..[62,2748+9])
                            ]
                      core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+30]..[59,2530+57])
                        Ptyp_tuple
                        [
                          core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+30]..[59,2530+48])
                            Ptyp_constr "parameterized_rule" (src/CheckSafeParameterizedGrammar.ml[59,2530+30]..[59,2530+48])
                            []
                          core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+51]..[59,2530+57])
                            Ptyp_constr "symbol" (src/CheckSafeParameterizedGrammar.ml[59,2530+51]..[59,2530+57])
                            []
                        ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[76,3393+0]..[77,3445+27])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+4]..[76,3393+20])
                    Ppat_var "used_in_producer" (src/CheckSafeParameterizedGrammar.ml[76,3393+4]..[76,3393+20])
                  expression (src/CheckSafeParameterizedGrammar.ml[76,3393+21]..[77,3445+27]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+21]..[76,3393+22])
                      Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[76,3393+21]..[76,3393+22])
                    expression (src/CheckSafeParameterizedGrammar.ml[76,3393+23]..[77,3445+27]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+23]..[76,3393+49])
                        Ppat_constraint
                        pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+24]..[76,3393+37])
                          Ppat_tuple
                          [
                            pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+25]..[76,3393+26])
                              Ppat_any
                            pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+28]..[76,3393+33])
                              Ppat_var "param" (src/CheckSafeParameterizedGrammar.ml[76,3393+28]..[76,3393+33])
                            pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+35]..[76,3393+36])
                              Ppat_any
                          ]
                        core_type (src/CheckSafeParameterizedGrammar.ml[76,3393+40]..[76,3393+48])
                          Ptyp_constr "producer" (src/CheckSafeParameterizedGrammar.ml[76,3393+40]..[76,3393+48])
                          []
                      expression (src/CheckSafeParameterizedGrammar.ml[77,3445+2]..[77,3445+27])
                        Pexp_apply
                        expression (src/CheckSafeParameterizedGrammar.ml[77,3445+2]..[77,3445+19])
                          Pexp_ident "Parameters.occurs" (src/CheckSafeParameterizedGrammar.ml[77,3445+2]..[77,3445+19])
                        [
                          <arg>
                          Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[77,3445+20]..[77,3445+21])
                              Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[77,3445+20]..[77,3445+21])
                          <arg>
                          Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[77,3445+22]..[77,3445+27])
                              Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[77,3445+22]..[77,3445+27])
                        ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[79,3474+0]..[80,3529+54])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+4]..[79,3474+18])
                    Ppat_var "used_in_branch" (src/CheckSafeParameterizedGrammar.ml[79,3474+4]..[79,3474+18])
                  expression (src/CheckSafeParameterizedGrammar.ml[79,3474+19]..[80,3529+54]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+19]..[79,3474+20])
                      Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[79,3474+19]..[79,3474+20])
                    expression (src/CheckSafeParameterizedGrammar.ml[79,3474+21]..[80,3529+54]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+21]..[79,3474+52])
                        Ppat_constraint
                        pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+22]..[79,3474+28])
                          Ppat_var "branch" (src/CheckSafeParameterizedGrammar.ml[79,3474+22]..[79,3474+28])
                        core_type (src/CheckSafeParameterizedGrammar.ml[79,3474+31]..[79,3474+51])
                          Ptyp_constr "parameterized_branch" (src/CheckSafeParameterizedGrammar.ml[79,3474+31]..[79,3474+51])
                          []
                      expression (src/CheckSafeParameterizedGrammar.ml[80,3529+2]..[80,3529+54])
                        Pexp_apply
                        expression (src/CheckSafeParameterizedGrammar.ml[80,3529+2]..[80,3529+13])
                          Pexp_ident "List.exists" (src/CheckSafeParameterizedGrammar.ml[80,3529+2]..[80,3529+13])
                        [
                          <arg>
                          Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[80,3529+14]..[80,3529+34])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[80,3529+15]..[80,3529+31])
                                Pexp_ident "used_in_producer" (src/CheckSafeParameterizedGrammar.ml[80,3529+15]..[80,3529+31])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[80,3529+32]..[80,3529+33])
                                    Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[80,3529+32]..[80,3529+33])
                              ]
                          <arg>
                          Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[80,3529+35]..[80,3529+54])
                              Pexp_field
                              expression (src/CheckSafeParameterizedGrammar.ml[80,3529+35]..[80,3529+41])
                                Pexp_ident "branch" (src/CheckSafeParameterizedGrammar.ml[80,3529+35]..[80,3529+41])
                              "pr_producers" (src/CheckSafeParameterizedGrammar.ml[80,3529+42]..[80,3529+54])
                        ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[82,3585+0]..[84,3652+49])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+4]..[82,3585+8])
                    Ppat_var "used" (src/CheckSafeParameterizedGrammar.ml[82,3585+4]..[82,3585+8])
                  expression (src/CheckSafeParameterizedGrammar.ml[82,3585+9]..[84,3652+49]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+9]..[82,3585+26])
                      Ppat_constraint
                      pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+10]..[82,3585+16])
                        Ppat_var "formal" (src/CheckSafeParameterizedGrammar.ml[82,3585+10]..[82,3585+16])
                      core_type (src/CheckSafeParameterizedGrammar.ml[82,3585+19]..[82,3585+25])
                        Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[82,3585+19]..[82,3585+25])
                        []
                    expression (src/CheckSafeParameterizedGrammar.ml[82,3585+27]..[84,3652+49])
                      Pexp_constraint
                      expression (src/CheckSafeParameterizedGrammar.ml[83,3621+2]..[84,3652+49])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+6]..[83,3621+13])
                              Ppat_tuple
                              [
                                pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+6]..[83,3621+10])
                                  Ppat_var "rule" (src/CheckSafeParameterizedGrammar.ml[83,3621+6]..[83,3621+10])
                                pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+12]..[83,3621+13])
                                  Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[83,3621+12]..[83,3621+13])
                              ]
                            expression (src/CheckSafeParameterizedGrammar.ml[83,3621+16]..[83,3621+27])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[83,3621+16]..[83,3621+20])
                                Pexp_ident "info" (src/CheckSafeParameterizedGrammar.ml[83,3621+16]..[83,3621+20])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[83,3621+21]..[83,3621+27])
                                    Pexp_ident "formal" (src/CheckSafeParameterizedGrammar.ml[83,3621+21]..[83,3621+27])
                              ]
                        ]
                        expression (src/CheckSafeParameterizedGrammar.ml[84,3652+2]..[84,3652+49])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[84,3652+2]..[84,3652+13])
                            Pexp_ident "List.exists" (src/CheckSafeParameterizedGrammar.ml[84,3652+2]..[84,3652+13])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[84,3652+14]..[84,3652+32])
                                Pexp_apply
                                expression (src/CheckSafeParameterizedGrammar.ml[84,3652+15]..[84,3652+29])
                                  Pexp_ident "used_in_branch" (src/CheckSafeParameterizedGrammar.ml[84,3652+15]..[84,3652+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[84,3652+30]..[84,3652+31])
                                      Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[84,3652+30]..[84,3652+31])
                                ]
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[84,3652+33]..[84,3652+49])
                                Pexp_field
                                expression (src/CheckSafeParameterizedGrammar.ml[84,3652+33]..[84,3652+37])
                                  Pexp_ident "rule" (src/CheckSafeParameterizedGrammar.ml[84,3652+33]..[84,3652+37])
                                "pr_branches" (src/CheckSafeParameterizedGrammar.ml[84,3652+38]..[84,3652+49])
                          ]
                      core_type (src/CheckSafeParameterizedGrammar.ml[82,3585+29]..[82,3585+33])
                        Ptyp_constr "bool" (src/CheckSafeParameterizedGrammar.ml[82,3585+29]..[82,3585+33])
                        []
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[88,3733+0]..[90,3829+16])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[88,3733+4]..[88,3733+8])
                    Ppat_var "used" (src/CheckSafeParameterizedGrammar.ml[88,3733+4]..[88,3733+8])
                  core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..[88,3733+25])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..[88,3733+17])
                      Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..[88,3733+17])
                      []
                    core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+21]..[88,3733+25])
                      Ptyp_constr "bool" (src/CheckSafeParameterizedGrammar.ml[88,3733+21]..[88,3733+25])
                      []
                  expression (src/CheckSafeParameterizedGrammar.ml[89,3761+2]..[90,3829+16])
                    Pexp_letmodule "M" (src/CheckSafeParameterizedGrammar.ml[89,3761+13]..[89,3761+14])
                    module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..[89,3761+64])
                      Pmod_apply
                      module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..[89,3761+36])
                        Pmod_ident "Fix.Memoize.ForType" (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..[89,3761+36])
                      module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+37]..[89,3761+63])
                        Pmod_structure
                        [
                          structure_item (src/CheckSafeParameterizedGrammar.ml[89,3761+44]..[89,3761+59])
                            Pstr_type Rec
                            [
                              type_declaration "t" (src/CheckSafeParameterizedGrammar.ml[89,3761+49]..[89,3761+50]) (src/CheckSafeParameterizedGrammar.ml[89,3761+44]..[89,3761+59])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ptype_abstract
                                ptype_private = Public
                                ptype_manifest =
                                  Some
                                    core_type (src/CheckSafeParameterizedGrammar.ml[89,3761+53]..[89,3761+59])
                                      Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[89,3761+53]..[89,3761+59])
                                      []
                            ]
                        ]
                    expression (src/CheckSafeParameterizedGrammar.ml[90,3829+2]..[90,3829+16])
                      Pexp_apply
                      expression (src/CheckSafeParameterizedGrammar.ml[90,3829+2]..[90,3829+11])
                        Pexp_ident "M.memoize" (src/CheckSafeParameterizedGrammar.ml[90,3829+2]..[90,3829+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/CheckSafeParameterizedGrammar.ml[90,3829+12]..[90,3829+16])
                            Pexp_ident "used" (src/CheckSafeParameterizedGrammar.ml[90,3829+12]..[90,3829+16])
                      ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[148,6435+0]..[150,6456+13])
              Pstr_type Rec
              [
                type_declaration "edge" (src/CheckSafeParameterizedGrammar.ml[148,6435+5]..[148,6435+9]) (src/CheckSafeParameterizedGrammar.ml[148,6435+0]..[150,6456+13])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_variant
                      [
                        (src/CheckSafeParameterizedGrammar.ml[149,6447+2]..[149,6447+8])
                          "Safe" (src/CheckSafeParameterizedGrammar.ml[149,6447+4]..[149,6447+8])
                          []
                          None
                        (src/CheckSafeParameterizedGrammar.ml[150,6456+2]..[150,6456+13])
                          "Dangerous" (src/CheckSafeParameterizedGrammar.ml[150,6456+4]..[150,6456+13])
                          []
                          None
                      ]
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[152,6471+0]..[175,7489+18])
              Pstr_value Rec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+8]..[152,6471+28])
                    Ppat_var "successors_parameter" (src/CheckSafeParameterizedGrammar.ml[152,6471+8]..[152,6471+28])
                  expression (src/CheckSafeParameterizedGrammar.ml[152,6471+29]..[175,7489+18]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+29]..[152,6471+57])
                      Ppat_constraint
                      pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+30]..[152,6471+31])
                        Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[152,6471+30]..[152,6471+31])
                      core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+34]..[152,6471+56])
                        Ptyp_arrow
                        Nolabel
                        core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+34]..[152,6471+38])
                          Ptyp_constr "edge" (src/CheckSafeParameterizedGrammar.ml[152,6471+34]..[152,6471+38])
                          []
                        core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+42]..[152,6471+56])
                          Ptyp_arrow
                          Nolabel
                          core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+42]..[152,6471+48])
                            Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[152,6471+42]..[152,6471+48])
                            []
                          core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+52]..[152,6471+56])
                            Ptyp_constr "unit" (src/CheckSafeParameterizedGrammar.ml[152,6471+52]..[152,6471+56])
                            []
                    expression (src/CheckSafeParameterizedGrammar.ml[152,6471+58]..[175,7489+18]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+58]..[152,6471+59])
                        Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[152,6471+58]..[152,6471+59])
                      expression (src/CheckSafeParameterizedGrammar.ml[152,6471+60]..[175,7489+18]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+60]..[152,6471+79])
                          Ppat_constraint
                          pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+61]..[152,6471+66])
                            Ppat_var "param" (src/CheckSafeParameterizedGrammar.ml[152,6471+61]..[152,6471+66])
                          core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+69]..[152,6471+78])
                            Ptyp_constr "parameter" (src/CheckSafeParameterizedGrammar.ml[152,6471+69]..[152,6471+78])
                            []
                        expression (src/CheckSafeParameterizedGrammar.ml[153,6553+2]..[175,7489+18])
                          Pexp_match
                          expression (src/CheckSafeParameterizedGrammar.ml[153,6553+8]..[153,6553+13])
                            Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[153,6553+8]..[153,6553+13])
                          [
                            <case>
                              pattern (src/CheckSafeParameterizedGrammar.ml[154,6572+4]..[154,6572+18])
                                Ppat_construct "ParameterVar" (src/CheckSafeParameterizedGrammar.ml[154,6572+4]..[154,6572+16])
                                Some
                                  []
                                  pattern (src/CheckSafeParameterizedGrammar.ml[154,6572+17]..[154,6572+18])
                                    Ppat_any
                              expression (src/CheckSafeParameterizedGrammar.ml[156,6649+6]..[156,6649+8])
                                Pexp_construct "()" (src/CheckSafeParameterizedGrammar.ml[156,6649+6]..[156,6649+8])
                                None
                            <case>
                              pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+4]..[157,6658+30])
                                Ppat_construct "ParameterApp" (src/CheckSafeParameterizedGrammar.ml[157,6658+4]..[157,6658+16])
                                Some
                                  []
                                  pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+17]..[157,6658+30])
                                    Ppat_tuple
                                    [
                                      pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+18]..[157,6658+21])
                                        Ppat_var "sym" (src/CheckSafeParameterizedGrammar.ml[157,6658+18]..[157,6658+21])
                                      pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+23]..[157,6658+29])
                                        Ppat_var "params" (src/CheckSafeParameterizedGrammar.ml[157,6658+23]..[157,6658+29])
                                    ]
                              expression (src/CheckSafeParameterizedGrammar.ml[158,6692+6]..[173,7446+14])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/CheckSafeParameterizedGrammar.ml[158,6692+10]..[158,6692+12])
                                      Ppat_var "nt" (src/CheckSafeParameterizedGrammar.ml[158,6692+10]..[158,6692+12])
                                    expression (src/CheckSafeParameterizedGrammar.ml[158,6692+15]..[158,6692+24])
                                      Pexp_apply
                                      expression (src/CheckSafeParameterizedGrammar.ml[158,6692+15]..[158,6692+20])
                                        Pexp_ident "value" (src/CheckSafeParameterizedGrammar.ml[158,6692+15]..[158,6692+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/CheckSafeParameterizedGrammar.ml[158,6692+21]..[158,6692+24])
                                            Pexp_ident "sym" (src/CheckSafeParameterizedGrammar.ml[158,6692+21]..[158,6692+24])
                                      ]
                                ]
                                expression (src/CheckSafeParameterizedGrammar.ml[159,6720+6]..[173,7446+14])
                                  Pexp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[159,6720+6]..[159,6720+16])
                                    Pexp_ident "List.iteri" (src/CheckSafeParameterizedGrammar.ml[159,6720+6]..[159,6720+16])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[159,6720+17]..[173,7446+7])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/CheckSafeParameterizedGrammar.ml[159,6720+22]..[159,6720+23])
                                          Ppat_var "i" (src/CheckSafeParameterizedGrammar.ml[159,6720+22]..[159,6720+23])
                                        expression (src/CheckSafeParameterizedGrammar.ml[159,6720+24]..[172,7434+11]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/CheckSafeParameterizedGrammar.ml[159,6720+24]..[159,6720+29])
                                            Ppat_var "param" (src/CheckSafeParameterizedGrammar.ml[159,6720+24]..[159,6720+29])
                                          expression (src/CheckSafeParameterizedGrammar.ml[162,6872+8]..[172,7434+11])
                                            Pexp_ifthenelse
                                            expression (src/CheckSafeParameterizedGrammar.ml[162,6872+11]..[162,6872+23])
                                              Pexp_apply
                                              expression (src/CheckSafeParameterizedGrammar.ml[162,6872+11]..[162,6872+15])
                                                Pexp_ident "used" (src/CheckSafeParameterizedGrammar.ml[162,6872+11]..[162,6872+15])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/CheckSafeParameterizedGrammar.ml[162,6872+16]..[162,6872+23])
                                                    Pexp_tuple
                                                    [
                                                      expression (src/CheckSafeParameterizedGrammar.ml[162,6872+17]..[162,6872+19])
                                                        Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[162,6872+17]..[162,6872+19])
                                                      expression (src/CheckSafeParameterizedGrammar.ml[162,6872+21]..[162,6872+22])
                                                        Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[162,6872+21]..[162,6872+22])
                                                    ]
                                              ]
                                            expression (src/CheckSafeParameterizedGrammar.ml[162,6872+29]..[172,7434+11])
                                              Pexp_sequence
                                              expression (src/CheckSafeParameterizedGrammar.ml[164,6988+10]..[164,6988+40])
                                                Pexp_apply
                                                expression (src/CheckSafeParameterizedGrammar.ml[164,6988+10]..[164,6988+30])
                                                  Pexp_ident "successors_parameter" (src/CheckSafeParameterizedGrammar.ml[164,6988+10]..[164,6988+30])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[164,6988+31]..[164,6988+32])
                                                      Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[164,6988+31]..[164,6988+32])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[164,6988+33]..[164,6988+34])
                                                      Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[164,6988+33]..[164,6988+34])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[164,6988+35]..[164,6988+40])
                                                      Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[164,6988+35]..[164,6988+40])
                                                ]
                                              expression (src/CheckSafeParameterizedGrammar.ml[168,7269+10]..[171,7402+31])
                                                Pexp_ifthenelse
                                                expression (src/CheckSafeParameterizedGrammar.ml[168,7269+13]..[168,7269+46])
                                                  Pexp_apply
                                                  expression (src/CheckSafeParameterizedGrammar.ml[168,7269+13]..[168,7269+38])
                                                    Pexp_ident "Parameters.occurs_shallow" (src/CheckSafeParameterizedGrammar.ml[168,7269+13]..[168,7269+38])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/CheckSafeParameterizedGrammar.ml[168,7269+39]..[168,7269+40])
                                                        Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[168,7269+39]..[168,7269+40])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/CheckSafeParameterizedGrammar.ml[168,7269+41]..[168,7269+46])
                                                        Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[168,7269+41]..[168,7269+46])
                                                  ]
                                                expression (src/CheckSafeParameterizedGrammar.ml[169,7321+12]..[169,7321+26])
                                                  Pexp_apply
                                                  expression (src/CheckSafeParameterizedGrammar.ml[169,7321+12]..[169,7321+13])
                                                    Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[169,7321+12]..[169,7321+13])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/CheckSafeParameterizedGrammar.ml[169,7321+14]..[169,7321+18])
                                                        Pexp_construct "Safe" (src/CheckSafeParameterizedGrammar.ml[169,7321+14]..[169,7321+18])
                                                        None
                                                    <arg>
                                                    Nolabel
                                                      expression (src/CheckSafeParameterizedGrammar.ml[169,7321+19]..[169,7321+26])
                                                        Pexp_tuple
                                                        [
                                                          expression (src/CheckSafeParameterizedGrammar.ml[169,7321+20]..[169,7321+22])
                                                            Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[169,7321+20]..[169,7321+22])
                                                          expression (src/CheckSafeParameterizedGrammar.ml[169,7321+24]..[169,7321+25])
                                                            Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[169,7321+24]..[169,7321+25])
                                                        ]
                                                  ]
                                                Some
                                                  expression (src/CheckSafeParameterizedGrammar.ml[170,7348+15]..[171,7402+31])
                                                    Pexp_ifthenelse
                                                    expression (src/CheckSafeParameterizedGrammar.ml[170,7348+18]..[170,7348+48])
                                                      Pexp_apply
                                                      expression (src/CheckSafeParameterizedGrammar.ml[170,7348+18]..[170,7348+40])
                                                        Pexp_ident "Parameters.occurs_deep" (src/CheckSafeParameterizedGrammar.ml[170,7348+18]..[170,7348+40])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[170,7348+41]..[170,7348+42])
                                                            Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[170,7348+41]..[170,7348+42])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[170,7348+43]..[170,7348+48])
                                                            Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[170,7348+43]..[170,7348+48])
                                                      ]
                                                    expression (src/CheckSafeParameterizedGrammar.ml[171,7402+12]..[171,7402+31])
                                                      Pexp_apply
                                                      expression (src/CheckSafeParameterizedGrammar.ml[171,7402+12]..[171,7402+13])
                                                        Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[171,7402+12]..[171,7402+13])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[171,7402+14]..[171,7402+23])
                                                            Pexp_construct "Dangerous" (src/CheckSafeParameterizedGrammar.ml[171,7402+14]..[171,7402+23])
                                                            None
                                                        <arg>
                                                        Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[171,7402+24]..[171,7402+31])
                                                            Pexp_tuple
                                                            [
                                                              expression (src/CheckSafeParameterizedGrammar.ml[171,7402+25]..[171,7402+27])
                                                                Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[171,7402+25]..[171,7402+27])
                                                              expression (src/CheckSafeParameterizedGrammar.ml[171,7402+29]..[171,7402+30])
                                                                Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[171,7402+29]..[171,7402+30])
                                                            ]
                                                      ]
                                                    None
                                            None
                                    <arg>
                                    Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[173,7446+8]..[173,7446+14])
                                        Pexp_ident "params" (src/CheckSafeParameterizedGrammar.ml[173,7446+8]..[173,7446+14])
                                  ]
                            <case>
                              pattern (src/CheckSafeParameterizedGrammar.ml[174,7461+4]..[174,7461+24])
                                Ppat_construct "ParameterAnonymous" (src/CheckSafeParameterizedGrammar.ml[174,7461+4]..[174,7461+22])
                                Some
                                  []
                                  pattern (src/CheckSafeParameterizedGrammar.ml[174,7461+23]..[174,7461+24])
                                    Ppat_any
                              expression (src/CheckSafeParameterizedGrammar.ml[175,7489+6]..[175,7489+18])
                                Pexp_assert
                                expression (src/CheckSafeParameterizedGrammar.ml[175,7489+13]..[175,7489+18])
                                  Pexp_construct "false" (src/CheckSafeParameterizedGrammar.ml[175,7489+13]..[175,7489+18])
                                  None
                          ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[177,7509+0]..[178,7566+32])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+4]..[177,7509+23])
                    Ppat_var "successors_producer" (src/CheckSafeParameterizedGrammar.ml[177,7509+4]..[177,7509+23])
                  expression (src/CheckSafeParameterizedGrammar.ml[177,7509+24]..[178,7566+32]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+24]..[177,7509+25])
                      Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[177,7509+24]..[177,7509+25])
                    expression (src/CheckSafeParameterizedGrammar.ml[177,7509+26]..[178,7566+32]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+26]..[177,7509+27])
                        Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[177,7509+26]..[177,7509+27])
                      expression (src/CheckSafeParameterizedGrammar.ml[177,7509+28]..[178,7566+32]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+28]..[177,7509+54])
                          Ppat_constraint
                          pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+29]..[177,7509+42])
                            Ppat_tuple
                            [
                              pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+30]..[177,7509+31])
                                Ppat_any
                              pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+33]..[177,7509+38])
                                Ppat_var "param" (src/CheckSafeParameterizedGrammar.ml[177,7509+33]..[177,7509+38])
                              pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+40]..[177,7509+41])
                                Ppat_any
                            ]
                          core_type (src/CheckSafeParameterizedGrammar.ml[177,7509+45]..[177,7509+53])
                            Ptyp_constr "producer" (src/CheckSafeParameterizedGrammar.ml[177,7509+45]..[177,7509+53])
                            []
                        expression (src/CheckSafeParameterizedGrammar.ml[178,7566+2]..[178,7566+32])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[178,7566+2]..[178,7566+22])
                            Pexp_ident "successors_parameter" (src/CheckSafeParameterizedGrammar.ml[178,7566+2]..[178,7566+22])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[178,7566+23]..[178,7566+24])
                                Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[178,7566+23]..[178,7566+24])
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[178,7566+25]..[178,7566+26])
                                Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[178,7566+25]..[178,7566+26])
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[178,7566+27]..[178,7566+32])
                                Pexp_ident "param" (src/CheckSafeParameterizedGrammar.ml[178,7566+27]..[178,7566+32])
                          ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[180,7600+0]..[181,7660+57])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+4]..[180,7600+21])
                    Ppat_var "successors_branch" (src/CheckSafeParameterizedGrammar.ml[180,7600+4]..[180,7600+21])
                  expression (src/CheckSafeParameterizedGrammar.ml[180,7600+22]..[181,7660+57]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+22]..[180,7600+23])
                      Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[180,7600+22]..[180,7600+23])
                    expression (src/CheckSafeParameterizedGrammar.ml[180,7600+24]..[181,7660+57]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+24]..[180,7600+25])
                        Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[180,7600+24]..[180,7600+25])
                      expression (src/CheckSafeParameterizedGrammar.ml[180,7600+26]..[181,7660+57]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+26]..[180,7600+57])
                          Ppat_constraint
                          pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+27]..[180,7600+33])
                            Ppat_var "branch" (src/CheckSafeParameterizedGrammar.ml[180,7600+27]..[180,7600+33])
                          core_type (src/CheckSafeParameterizedGrammar.ml[180,7600+36]..[180,7600+56])
                            Ptyp_constr "parameterized_branch" (src/CheckSafeParameterizedGrammar.ml[180,7600+36]..[180,7600+56])
                            []
                        expression (src/CheckSafeParameterizedGrammar.ml[181,7660+2]..[181,7660+57])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[181,7660+2]..[181,7660+11])
                            Pexp_ident "List.iter" (src/CheckSafeParameterizedGrammar.ml[181,7660+2]..[181,7660+11])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[181,7660+12]..[181,7660+37])
                                Pexp_apply
                                expression (src/CheckSafeParameterizedGrammar.ml[181,7660+13]..[181,7660+32])
                                  Pexp_ident "successors_producer" (src/CheckSafeParameterizedGrammar.ml[181,7660+13]..[181,7660+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[181,7660+33]..[181,7660+34])
                                      Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[181,7660+33]..[181,7660+34])
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[181,7660+35]..[181,7660+36])
                                      Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[181,7660+35]..[181,7660+36])
                                ]
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[181,7660+38]..[181,7660+57])
                                Pexp_field
                                expression (src/CheckSafeParameterizedGrammar.ml[181,7660+38]..[181,7660+44])
                                  Pexp_ident "branch" (src/CheckSafeParameterizedGrammar.ml[181,7660+38]..[181,7660+44])
                                "pr_producers" (src/CheckSafeParameterizedGrammar.ml[181,7660+45]..[181,7660+57])
                          ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[183,7719+0]..[185,7787+52])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+4]..[183,7719+14])
                    Ppat_var "successors" (src/CheckSafeParameterizedGrammar.ml[183,7719+4]..[183,7719+14])
                  expression (src/CheckSafeParameterizedGrammar.ml[183,7719+15]..[185,7787+52]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+15]..[183,7719+16])
                      Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[183,7719+15]..[183,7719+16])
                    expression (src/CheckSafeParameterizedGrammar.ml[183,7719+17]..[185,7787+52]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+17]..[183,7719+34])
                        Ppat_constraint
                        pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+18]..[183,7719+24])
                          Ppat_var "formal" (src/CheckSafeParameterizedGrammar.ml[183,7719+18]..[183,7719+24])
                        core_type (src/CheckSafeParameterizedGrammar.ml[183,7719+27]..[183,7719+33])
                          Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[183,7719+27]..[183,7719+33])
                          []
                      expression (src/CheckSafeParameterizedGrammar.ml[184,7756+2]..[185,7787+52])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+6]..[184,7756+13])
                              Ppat_tuple
                              [
                                pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+6]..[184,7756+10])
                                  Ppat_var "rule" (src/CheckSafeParameterizedGrammar.ml[184,7756+6]..[184,7756+10])
                                pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+12]..[184,7756+13])
                                  Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[184,7756+12]..[184,7756+13])
                              ]
                            expression (src/CheckSafeParameterizedGrammar.ml[184,7756+16]..[184,7756+27])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[184,7756+16]..[184,7756+20])
                                Pexp_ident "info" (src/CheckSafeParameterizedGrammar.ml[184,7756+16]..[184,7756+20])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[184,7756+21]..[184,7756+27])
                                    Pexp_ident "formal" (src/CheckSafeParameterizedGrammar.ml[184,7756+21]..[184,7756+27])
                              ]
                        ]
                        expression (src/CheckSafeParameterizedGrammar.ml[185,7787+2]..[185,7787+52])
                          Pexp_apply
                          expression (src/CheckSafeParameterizedGrammar.ml[185,7787+2]..[185,7787+11])
                            Pexp_ident "List.iter" (src/CheckSafeParameterizedGrammar.ml[185,7787+2]..[185,7787+11])
                          [
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[185,7787+12]..[185,7787+35])
                                Pexp_apply
                                expression (src/CheckSafeParameterizedGrammar.ml[185,7787+13]..[185,7787+30])
                                  Pexp_ident "successors_branch" (src/CheckSafeParameterizedGrammar.ml[185,7787+13]..[185,7787+30])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[185,7787+31]..[185,7787+32])
                                      Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[185,7787+31]..[185,7787+32])
                                  <arg>
                                  Nolabel
                                    expression (src/CheckSafeParameterizedGrammar.ml[185,7787+33]..[185,7787+34])
                                      Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[185,7787+33]..[185,7787+34])
                                ]
                            <arg>
                            Nolabel
                              expression (src/CheckSafeParameterizedGrammar.ml[185,7787+36]..[185,7787+52])
                                Pexp_field
                                expression (src/CheckSafeParameterizedGrammar.ml[185,7787+36]..[185,7787+40])
                                  Pexp_ident "rule" (src/CheckSafeParameterizedGrammar.ml[185,7787+36]..[185,7787+40])
                                "pr_branches" (src/CheckSafeParameterizedGrammar.ml[185,7787+41]..[185,7787+52])
                          ]
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[191,7975+0]..[197,8175+3])
              Pstr_module
              "G" (src/CheckSafeParameterizedGrammar.ml[191,7975+7]..[191,7975+8])
                module_expr (src/CheckSafeParameterizedGrammar.ml[191,7975+11]..[197,8175+3])
                  Pmod_structure
                  [
                    structure_item (src/CheckSafeParameterizedGrammar.ml[192,7993+2]..[192,7993+20])
                      Pstr_type Rec
                      [
                        type_declaration "node" (src/CheckSafeParameterizedGrammar.ml[192,7993+7]..[192,7993+11]) (src/CheckSafeParameterizedGrammar.ml[192,7993+2]..[192,7993+20])
                          ptype_params =
                            []
                          ptype_cstrs =
                            []
                          ptype_kind =
                            Ptype_abstract
                          ptype_private = Public
                          ptype_manifest =
                            Some
                              core_type (src/CheckSafeParameterizedGrammar.ml[192,7993+14]..[192,7993+20])
                                Ptyp_constr "formal" (src/CheckSafeParameterizedGrammar.ml[192,7993+14]..[192,7993+20])
                                []
                      ]
                    structure_item (src/CheckSafeParameterizedGrammar.ml[193,8014+2]..[193,8014+30])
                      Pstr_value Nonrec
                      [
                        <def>
                          pattern (src/CheckSafeParameterizedGrammar.ml[193,8014+6]..[193,8014+7])
                            Ppat_var "n" (src/CheckSafeParameterizedGrammar.ml[193,8014+6]..[193,8014+7])
                          expression (src/CheckSafeParameterizedGrammar.ml[193,8014+10]..[193,8014+30])
                            Pexp_apply
                            expression (src/CheckSafeParameterizedGrammar.ml[193,8014+10]..[193,8014+22])
                              Pexp_ident "Array.length" (src/CheckSafeParameterizedGrammar.ml[193,8014+10]..[193,8014+22])
                            [
                              <arg>
                              Nolabel
                                expression (src/CheckSafeParameterizedGrammar.ml[193,8014+23]..[193,8014+30])
                                  Pexp_ident "formals" (src/CheckSafeParameterizedGrammar.ml[193,8014+23]..[193,8014+30])
                            ]
                      ]
                    structure_item (src/CheckSafeParameterizedGrammar.ml[194,8045+2]..[194,8045+34])
                      Pstr_value Nonrec
                      [
                        <def>
                          pattern (src/CheckSafeParameterizedGrammar.ml[194,8045+6]..[194,8045+11])
                            Ppat_var "index" (src/CheckSafeParameterizedGrammar.ml[194,8045+6]..[194,8045+11])
                          expression (src/CheckSafeParameterizedGrammar.ml[194,8045+14]..[194,8045+34])
                            Pexp_apply
                            expression (src/CheckSafeParameterizedGrammar.ml[194,8045+14]..[194,8045+26])
                              Pexp_ident "Misc.inverse" (src/CheckSafeParameterizedGrammar.ml[194,8045+14]..[194,8045+26])
                            [
                              <arg>
                              Nolabel
                                expression (src/CheckSafeParameterizedGrammar.ml[194,8045+27]..[194,8045+34])
                                  Pexp_ident "formals" (src/CheckSafeParameterizedGrammar.ml[194,8045+27]..[194,8045+34])
                            ]
                      ]
                    structure_item (src/CheckSafeParameterizedGrammar.ml[195,8080+2]..[195,8080+58])
                      Pstr_value Nonrec
                      [
                        <def>
                          pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+6]..[195,8080+16])
                            Ppat_var "successors" (src/CheckSafeParameterizedGrammar.ml[195,8080+6]..[195,8080+16])
                          expression (src/CheckSafeParameterizedGrammar.ml[195,8080+17]..[195,8080+58]) ghost
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+17]..[195,8080+18])
                              Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[195,8080+17]..[195,8080+18])
                            expression (src/CheckSafeParameterizedGrammar.ml[195,8080+21]..[195,8080+58])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[195,8080+21]..[195,8080+31])
                                Pexp_ident "successors" (src/CheckSafeParameterizedGrammar.ml[195,8080+21]..[195,8080+31])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[195,8080+32]..[195,8080+58])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+37]..[195,8080+38])
                                      Ppat_any
                                    expression (src/CheckSafeParameterizedGrammar.ml[195,8080+39]..[195,8080+57]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+39]..[195,8080+45])
                                        Ppat_var "target" (src/CheckSafeParameterizedGrammar.ml[195,8080+39]..[195,8080+45])
                                      expression (src/CheckSafeParameterizedGrammar.ml[195,8080+49]..[195,8080+57])
                                        Pexp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[195,8080+49]..[195,8080+50])
                                          Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[195,8080+49]..[195,8080+50])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[195,8080+51]..[195,8080+57])
                                              Pexp_ident "target" (src/CheckSafeParameterizedGrammar.ml[195,8080+51]..[195,8080+57])
                                        ]
                              ]
                      ]
                    structure_item (src/CheckSafeParameterizedGrammar.ml[196,8139+2]..[196,8139+35])
                      Pstr_value Nonrec
                      [
                        <def>
                          pattern (src/CheckSafeParameterizedGrammar.ml[196,8139+6]..[196,8139+10])
                            Ppat_var "iter" (src/CheckSafeParameterizedGrammar.ml[196,8139+6]..[196,8139+10])
                          expression (src/CheckSafeParameterizedGrammar.ml[196,8139+11]..[196,8139+35]) ghost
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/CheckSafeParameterizedGrammar.ml[196,8139+11]..[196,8139+12])
                              Ppat_var "f" (src/CheckSafeParameterizedGrammar.ml[196,8139+11]..[196,8139+12])
                            expression (src/CheckSafeParameterizedGrammar.ml[196,8139+15]..[196,8139+35])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[196,8139+15]..[196,8139+25])
                                Pexp_ident "Array.iter" (src/CheckSafeParameterizedGrammar.ml[196,8139+15]..[196,8139+25])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[196,8139+26]..[196,8139+27])
                                    Pexp_ident "f" (src/CheckSafeParameterizedGrammar.ml[196,8139+26]..[196,8139+27])
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[196,8139+28]..[196,8139+35])
                                    Pexp_ident "formals" (src/CheckSafeParameterizedGrammar.ml[196,8139+28]..[196,8139+35])
                              ]
                      ]
                  ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[203,8288+0]..[210,8530+5])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[203,8288+4]..[203,8288+6])
                    Ppat_construct "()" (src/CheckSafeParameterizedGrammar.ml[203,8288+4]..[203,8288+6])
                    None
                  expression (src/CheckSafeParameterizedGrammar.ml[204,8297+2]..[210,8530+5])
                    Pexp_ifthenelse
                    expression (src/CheckSafeParameterizedGrammar.ml[204,8297+5]..[204,8297+10])
                      Pexp_ident "debug" (src/CheckSafeParameterizedGrammar.ml[204,8297+5]..[204,8297+10])
                    expression (src/CheckSafeParameterizedGrammar.ml[205,8313+4]..[210,8530+5])
                      Pexp_apply
                      expression (src/CheckSafeParameterizedGrammar.ml[205,8313+4]..[205,8313+10])
                        Pexp_ident "G.iter" (src/CheckSafeParameterizedGrammar.ml[205,8313+4]..[205,8313+10])
                      [
                        <arg>
                        Nolabel
                          expression (src/CheckSafeParameterizedGrammar.ml[205,8313+11]..[210,8530+5])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+16]..[205,8313+22])
                              Ppat_tuple
                              [
                                pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+17]..[205,8313+18])
                                  Ppat_var "x" (src/CheckSafeParameterizedGrammar.ml[205,8313+17]..[205,8313+18])
                                pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+20]..[205,8313+21])
                                  Ppat_var "i" (src/CheckSafeParameterizedGrammar.ml[205,8313+20]..[205,8313+21])
                              ]
                            expression (src/CheckSafeParameterizedGrammar.ml[206,8339+6]..[209,8515+14])
                              Pexp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[206,8339+6]..[206,8339+16])
                                Pexp_ident "successors" (src/CheckSafeParameterizedGrammar.ml[206,8339+6]..[206,8339+16])
                              [
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[206,8339+17]..[209,8515+7])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+22]..[206,8339+26])
                                      Ppat_var "edge" (src/CheckSafeParameterizedGrammar.ml[206,8339+22]..[206,8339+26])
                                    expression (src/CheckSafeParameterizedGrammar.ml[206,8339+27]..[208,8456+58]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+27]..[206,8339+33])
                                        Ppat_tuple
                                        [
                                          pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+28]..[206,8339+29])
                                            Ppat_var "y" (src/CheckSafeParameterizedGrammar.ml[206,8339+28]..[206,8339+29])
                                          pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+31]..[206,8339+32])
                                            Ppat_var "j" (src/CheckSafeParameterizedGrammar.ml[206,8339+31]..[206,8339+32])
                                        ]
                                      expression (src/CheckSafeParameterizedGrammar.ml[207,8376+8]..[208,8456+58])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+12]..[207,8376+16])
                                              Ppat_var "kind" (src/CheckSafeParameterizedGrammar.ml[207,8376+12]..[207,8376+16])
                                            expression (src/CheckSafeParameterizedGrammar.ml[207,8376+19]..[207,8376+76])
                                              Pexp_match
                                              expression (src/CheckSafeParameterizedGrammar.ml[207,8376+25]..[207,8376+29])
                                                Pexp_ident "edge" (src/CheckSafeParameterizedGrammar.ml[207,8376+25]..[207,8376+29])
                                              [
                                                <case>
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+35]..[207,8376+39])
                                                    Ppat_construct "Safe" (src/CheckSafeParameterizedGrammar.ml[207,8376+35]..[207,8376+39])
                                                    None
                                                  expression (src/CheckSafeParameterizedGrammar.ml[207,8376+43]..[207,8376+49])
                                                    Pexp_constant PConst_string("safe",(src/CheckSafeParameterizedGrammar.ml[207,8376+44]..[207,8376+48]),None)
                                                <case>
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+52]..[207,8376+61])
                                                    Ppat_construct "Dangerous" (src/CheckSafeParameterizedGrammar.ml[207,8376+52]..[207,8376+61])
                                                    None
                                                  expression (src/CheckSafeParameterizedGrammar.ml[207,8376+65]..[207,8376+76])
                                                    Pexp_constant PConst_string("dangerous",(src/CheckSafeParameterizedGrammar.ml[207,8376+66]..[207,8376+75]),None)
                                              ]
                                        ]
                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+8]..[208,8456+58])
                                          Pexp_apply
                                          expression (src/CheckSafeParameterizedGrammar.ml[208,8456+8]..[208,8456+22])
                                            Pexp_ident "Printf.eprintf" (src/CheckSafeParameterizedGrammar.ml[208,8456+8]..[208,8456+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..[208,8456+45])
                                                Pexp_constant PConst_string("%s/%d ->(%s) %s/%d\n",(src/CheckSafeParameterizedGrammar.ml[208,8456+24]..[208,8456+44]),None)
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+46]..[208,8456+47])
                                                Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[208,8456+46]..[208,8456+47])
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+48]..[208,8456+49])
                                                Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[208,8456+48]..[208,8456+49])
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+50]..[208,8456+54])
                                                Pexp_ident "kind" (src/CheckSafeParameterizedGrammar.ml[208,8456+50]..[208,8456+54])
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+55]..[208,8456+56])
                                                Pexp_ident "y" (src/CheckSafeParameterizedGrammar.ml[208,8456+55]..[208,8456+56])
                                            <arg>
                                            Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[208,8456+57]..[208,8456+58])
                                                Pexp_ident "j" (src/CheckSafeParameterizedGrammar.ml[208,8456+57]..[208,8456+58])
                                          ]
                                <arg>
                                Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[209,8515+8]..[209,8515+14])
                                    Pexp_tuple
                                    [
                                      expression (src/CheckSafeParameterizedGrammar.ml[209,8515+9]..[209,8515+10])
                                        Pexp_ident "x" (src/CheckSafeParameterizedGrammar.ml[209,8515+9]..[209,8515+10])
                                      expression (src/CheckSafeParameterizedGrammar.ml[209,8515+12]..[209,8515+13])
                                        Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[209,8515+12]..[209,8515+13])
                                    ]
                              ]
                      ]
                    None
              ]
            structure_item (src/CheckSafeParameterizedGrammar.ml[217,8731+0]..[217,8731+24])
              Pstr_module
              "T" (src/CheckSafeParameterizedGrammar.ml[217,8731+7]..[217,8731+8])
                module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..[217,8731+24])
                  Pmod_apply
                  module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..[217,8731+21])
                    Pmod_ident "Tarjan.Run" (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..[217,8731+21])
                  module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+22]..[217,8731+23])
                    Pmod_ident "G" (src/CheckSafeParameterizedGrammar.ml[217,8731+22]..[217,8731+23])
            structure_item (src/CheckSafeParameterizedGrammar.ml[233,9555+0]..[249,10093+3])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/CheckSafeParameterizedGrammar.ml[233,9555+4]..[233,9555+6])
                    Ppat_construct "()" (src/CheckSafeParameterizedGrammar.ml[233,9555+4]..[233,9555+6])
                    None
                  expression (src/CheckSafeParameterizedGrammar.ml[234,9564+2]..[249,10093+3])
                    Pexp_apply
                    expression (src/CheckSafeParameterizedGrammar.ml[234,9564+2]..[234,9564+8])
                      Pexp_ident "G.iter" (src/CheckSafeParameterizedGrammar.ml[234,9564+2]..[234,9564+8])
                    [
                      <arg>
                      Nolabel
                        expression (src/CheckSafeParameterizedGrammar.ml[234,9564+9]..[249,10093+3])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/CheckSafeParameterizedGrammar.ml[234,9564+14]..[234,9564+20])
                            Ppat_var "source" (src/CheckSafeParameterizedGrammar.ml[234,9564+14]..[234,9564+20])
                          expression (src/CheckSafeParameterizedGrammar.ml[235,9588+4]..[248,10080+12])
                            Pexp_apply
                            expression (src/CheckSafeParameterizedGrammar.ml[235,9588+4]..[235,9588+14])
                              Pexp_ident "successors" (src/CheckSafeParameterizedGrammar.ml[235,9588+4]..[235,9588+14])
                            [
                              <arg>
                              Nolabel
                                expression (src/CheckSafeParameterizedGrammar.ml[235,9588+15]..[248,10080+5])
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/CheckSafeParameterizedGrammar.ml[235,9588+20]..[235,9588+24])
                                    Ppat_var "edge" (src/CheckSafeParameterizedGrammar.ml[235,9588+20]..[235,9588+24])
                                  expression (src/CheckSafeParameterizedGrammar.ml[235,9588+25]..[246,10043+35]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/CheckSafeParameterizedGrammar.ml[235,9588+25]..[235,9588+31])
                                      Ppat_var "target" (src/CheckSafeParameterizedGrammar.ml[235,9588+25]..[235,9588+31])
                                    expression (src/CheckSafeParameterizedGrammar.ml[236,9623+6]..[246,10043+35])
                                      Pexp_match
                                      expression (src/CheckSafeParameterizedGrammar.ml[236,9623+12]..[236,9623+16])
                                        Pexp_ident "edge" (src/CheckSafeParameterizedGrammar.ml[236,9623+12]..[236,9623+16])
                                      [
                                        <case>
                                          pattern (src/CheckSafeParameterizedGrammar.ml[237,9645+8]..[237,9645+12])
                                            Ppat_construct "Safe" (src/CheckSafeParameterizedGrammar.ml[237,9645+8]..[237,9645+12])
                                            None
                                          expression (src/CheckSafeParameterizedGrammar.ml[238,9661+10]..[238,9661+12])
                                            Pexp_construct "()" (src/CheckSafeParameterizedGrammar.ml[238,9661+10]..[238,9661+12])
                                            None
                                        <case>
                                          pattern (src/CheckSafeParameterizedGrammar.ml[239,9674+8]..[239,9674+17])
                                            Ppat_construct "Dangerous" (src/CheckSafeParameterizedGrammar.ml[239,9674+8]..[239,9674+17])
                                            None
                                          expression (src/CheckSafeParameterizedGrammar.ml[240,9695+10]..[246,10043+35])
                                            Pexp_ifthenelse
                                            expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..[240,9695+62])
                                              Pexp_apply
                                              expression (src/CheckSafeParameterizedGrammar.ml[240,9695+37]..[240,9695+38])
                                                Pexp_ident "=" (src/CheckSafeParameterizedGrammar.ml[240,9695+37]..[240,9695+38])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..[240,9695+36])
                                                    Pexp_apply
                                                    expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..[240,9695+29])
                                                      Pexp_ident "T.representative" (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..[240,9695+29])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/CheckSafeParameterizedGrammar.ml[240,9695+30]..[240,9695+36])
                                                          Pexp_ident "source" (src/CheckSafeParameterizedGrammar.ml[240,9695+30]..[240,9695+36])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (src/CheckSafeParameterizedGrammar.ml[240,9695+39]..[240,9695+62])
                                                    Pexp_apply
                                                    expression (src/CheckSafeParameterizedGrammar.ml[240,9695+39]..[240,9695+55])
                                                      Pexp_ident "T.representative" (src/CheckSafeParameterizedGrammar.ml[240,9695+39]..[240,9695+55])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/CheckSafeParameterizedGrammar.ml[240,9695+56]..[240,9695+62])
                                                          Pexp_ident "target" (src/CheckSafeParameterizedGrammar.ml[240,9695+56]..[240,9695+62])
                                                    ]
                                              ]
                                            expression (src/CheckSafeParameterizedGrammar.ml[241,9763+12]..[246,10043+35])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+16]..[241,9763+23])
                                                    Ppat_tuple
                                                    [
                                                      pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+17]..[241,9763+19])
                                                        Ppat_var "nt" (src/CheckSafeParameterizedGrammar.ml[241,9763+17]..[241,9763+19])
                                                      pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+21]..[241,9763+22])
                                                        Ppat_var "i" (src/CheckSafeParameterizedGrammar.ml[241,9763+21]..[241,9763+22])
                                                    ]
                                                  expression (src/CheckSafeParameterizedGrammar.ml[241,9763+26]..[241,9763+32])
                                                    Pexp_ident "source" (src/CheckSafeParameterizedGrammar.ml[241,9763+26]..[241,9763+32])
                                              ]
                                              expression (src/CheckSafeParameterizedGrammar.ml[242,9799+12]..[246,10043+35])
                                                Pexp_apply
                                                expression (src/CheckSafeParameterizedGrammar.ml[242,9799+12]..[242,9799+23])
                                                  Pexp_ident "Error.error" (src/CheckSafeParameterizedGrammar.ml[242,9799+12]..[242,9799+23])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[242,9799+24]..[242,9799+26])
                                                      Pexp_construct "[]" (src/CheckSafeParameterizedGrammar.ml[242,9799+24]..[242,9799+26])
                                                      None
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..[245,9972+70])
                                                      Pexp_constant PConst_string("the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe %s formal parameter of \"%s\" grows without bound.",(src/CheckSafeParameterizedGrammar.ml[243,9826+15]..[245,9972+69]),None)
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[246,10043+14]..[246,10043+32])
                                                      Pexp_apply
                                                      expression (src/CheckSafeParameterizedGrammar.ml[246,10043+15]..[246,10043+23])
                                                        Pexp_ident "Misc.nth" (src/CheckSafeParameterizedGrammar.ml[246,10043+15]..[246,10043+23])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[246,10043+24]..[246,10043+31])
                                                            Pexp_apply
                                                            expression (src/CheckSafeParameterizedGrammar.ml[246,10043+27]..[246,10043+28])
                                                              Pexp_ident "+" (src/CheckSafeParameterizedGrammar.ml[246,10043+27]..[246,10043+28])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/CheckSafeParameterizedGrammar.ml[246,10043+25]..[246,10043+26])
                                                                  Pexp_ident "i" (src/CheckSafeParameterizedGrammar.ml[246,10043+25]..[246,10043+26])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/CheckSafeParameterizedGrammar.ml[246,10043+29]..[246,10043+30])
                                                                  Pexp_constant PConst_int (1,None)
                                                            ]
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[246,10043+33]..[246,10043+35])
                                                      Pexp_ident "nt" (src/CheckSafeParameterizedGrammar.ml[246,10043+33]..[246,10043+35])
                                                ]
                                            None
                                      ]
                              <arg>
                              Nolabel
                                expression (src/CheckSafeParameterizedGrammar.ml[248,10080+6]..[248,10080+12])
                                  Pexp_ident "source" (src/CheckSafeParameterizedGrammar.ml[248,10080+6]..[248,10080+12])
                            ]
                    ]
              ]
          ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[257,10257+0]..[259,10317+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[257,10257+4]..[257,10257+9])
          Ppat_var "check" (src/CheckSafeParameterizedGrammar.ml[257,10257+4]..[257,10257+9])
        expression (src/CheckSafeParameterizedGrammar.ml[257,10257+10]..[259,10317+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/CheckSafeParameterizedGrammar.ml[257,10257+10]..[257,10257+11])
            Ppat_var "g" (src/CheckSafeParameterizedGrammar.ml[257,10257+10]..[257,10257+11])
          expression (src/CheckSafeParameterizedGrammar.ml[258,10271+2]..[259,10317+4])
            Pexp_letmodule "T" (src/CheckSafeParameterizedGrammar.ml[258,10271+13]..[258,10271+14])
            module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+17]..[258,10271+42])
              Pmod_apply
              module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+17]..[258,10271+20])
                Pmod_ident "Run" (src/CheckSafeParameterizedGrammar.ml[258,10271+17]..[258,10271+20])
              module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+21]..[258,10271+41])
                Pmod_structure
                [
                  structure_item (src/CheckSafeParameterizedGrammar.ml[258,10271+28]..[258,10271+37])
                    Pstr_value Nonrec
                    [
                      <def>
                        pattern (src/CheckSafeParameterizedGrammar.ml[258,10271+32]..[258,10271+33])
                          Ppat_var "g" (src/CheckSafeParameterizedGrammar.ml[258,10271+32]..[258,10271+33])
                        expression (src/CheckSafeParameterizedGrammar.ml[258,10271+36]..[258,10271+37])
                          Pexp_ident "g" (src/CheckSafeParameterizedGrammar.ml[258,10271+36]..[258,10271+37])
                    ]
                ]
            expression (src/CheckSafeParameterizedGrammar.ml[259,10317+2]..[259,10317+4])
              Pexp_construct "()" (src/CheckSafeParameterizedGrammar.ml[259,10317+2]..[259,10317+4])
              None
    ]
]

let value = Positions.value
open Syntax
let debug = false
module Run(G:sig val g : grammar end) =
  struct
    open G
    type formal = (symbol * int)
    let formals (nt, rule) =
      (let arity = List.length rule.pr_parameters in
       Misc.mapi arity (fun i -> (nt, i)) : formal list)
    let formals : formal array =
      (((StringMap.bindings g.p_rules) |> (List.map formals)) |> List.concat)
        |> Array.of_list
    let info ((nt, i) : formal) =
      (let rule =
         try StringMap.find nt g.p_rules with | Not_found -> assert false in
       let x =
         try List.nth rule.pr_parameters i with | Failure _ -> assert false in
       (rule, x) : (parameterized_rule * symbol))
    let used_in_producer x ((_, param, _) : producer) =
      Parameters.occurs x param
    let used_in_branch x (branch : parameterized_branch) =
      List.exists (used_in_producer x) branch.pr_producers
    let used (formal : formal) =
      (let (rule, x) = info formal in
       List.exists (used_in_branch x) rule.pr_branches : bool)
    let used : formal -> bool =
      let module M = (Fix.Memoize.ForType)(struct type t = formal end) in
        M.memoize used
    type edge =
      | Safe 
      | Dangerous 
    let rec successors_parameter (f : edge -> formal -> unit) x
      (param : parameter) =
      match param with
      | ParameterVar _ -> ()
      | ParameterApp (sym, params) ->
          let nt = value sym in
          List.iteri
            (fun i ->
               fun param ->
                 if used (nt, i)
                 then
                   (successors_parameter f x param;
                    if Parameters.occurs_shallow x param
                    then f Safe (nt, i)
                    else
                      if Parameters.occurs_deep x param
                      then f Dangerous (nt, i))) params
      | ParameterAnonymous _ -> assert false
    let successors_producer f x ((_, param, _) : producer) =
      successors_parameter f x param
    let successors_branch f x (branch : parameterized_branch) =
      List.iter (successors_producer f x) branch.pr_producers
    let successors f (formal : formal) =
      let (rule, x) = info formal in
      List.iter (successors_branch f x) rule.pr_branches
    module G =
      struct
        type node = formal
        let n = Array.length formals
        let index = Misc.inverse formals
        let successors f = successors (fun _ -> fun target -> f target)
        let iter f = Array.iter f formals
      end
    let () =
      if debug
      then
        G.iter
          (fun (x, i) ->
             successors
               (fun edge ->
                  fun (y, j) ->
                    let kind =
                      match edge with
                      | Safe -> "safe"
                      | Dangerous -> "dangerous" in
                    Printf.eprintf "%s/%d ->(%s) %s/%d\n" x i kind y j)
               (x, i))
    module T = (Tarjan.Run)(G)
    let () =
      G.iter
        (fun source ->
           successors
             (fun edge ->
                fun target ->
                  match edge with
                  | Safe -> ()
                  | Dangerous ->
                      if
                        (T.representative source) = (T.representative target)
                      then
                        let (nt, i) = source in
                        Error.error []
                          "the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe %s formal parameter of \"%s\" grows without bound."
                          (Misc.nth (i + 1)) nt) source)
  end
let check g = let module T = (Run)(struct let g = g end) in ()
[
  structure_item (src/CheckSafeParameterizedGrammar.ml[14,1019+0]..src/CheckSafeParameterizedGrammar.ml[14,1019+27])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[14,1019+4]..src/CheckSafeParameterizedGrammar.ml[14,1019+9])
          Tpat_var "value/397"
        expression (src/CheckSafeParameterizedGrammar.ml[14,1019+12]..src/CheckSafeParameterizedGrammar.ml[14,1019+27])
          Texp_ident "Dune__exe!.Positions.value"
    ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[15,1047+0]..src/CheckSafeParameterizedGrammar.ml[15,1047+11])
    Tstr_open Fresh
    module_expr (src/CheckSafeParameterizedGrammar.ml[15,1047+5]..src/CheckSafeParameterizedGrammar.ml[15,1047+11])
      Tmod_ident "Dune__exe!.Syntax"
  structure_item (src/CheckSafeParameterizedGrammar.ml[26,1482+0]..src/CheckSafeParameterizedGrammar.ml[26,1482+17])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[26,1482+4]..src/CheckSafeParameterizedGrammar.ml[26,1482+9])
          Tpat_var "debug/468"
        expression (src/CheckSafeParameterizedGrammar.ml[26,1482+12]..src/CheckSafeParameterizedGrammar.ml[26,1482+17])
          Texp_construct "false"
          []
    ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[32,1651+0]..src/CheckSafeParameterizedGrammar.ml[251,10098+3])
    Tstr_module
    Run/1068
      module_expr (src/CheckSafeParameterizedGrammar.ml[32,1651+11]..src/CheckSafeParameterizedGrammar.ml[251,10098+3])
        Tmod_functor "G/470"
        module_type (src/CheckSafeParameterizedGrammar.ml[32,1651+16]..src/CheckSafeParameterizedGrammar.ml[32,1651+39])
          Tmty_signature
          [
            signature_item (src/CheckSafeParameterizedGrammar.ml[32,1651+20]..src/CheckSafeParameterizedGrammar.ml[32,1651+35])
              Tsig_value
              value_description g/469 (src/CheckSafeParameterizedGrammar.ml[32,1651+20]..src/CheckSafeParameterizedGrammar.ml[32,1651+35])
                core_type (src/CheckSafeParameterizedGrammar.ml[32,1651+28]..src/CheckSafeParameterizedGrammar.ml[32,1651+35])
                  Ttyp_constr "Dune__exe!.Syntax.grammar"
                  []
                []
          ]
        module_expr (src/CheckSafeParameterizedGrammar.ml[32,1651+43]..src/CheckSafeParameterizedGrammar.ml[251,10098+3])
          module_expr (src/CheckSafeParameterizedGrammar.ml[32,1651+43]..src/CheckSafeParameterizedGrammar.ml[251,10098+3])
            Tmod_structure
            [
              structure_item (src/CheckSafeParameterizedGrammar.ml[33,1701+0]..src/CheckSafeParameterizedGrammar.ml[33,1701+6])
                Tstr_open Fresh
                module_expr (src/CheckSafeParameterizedGrammar.ml[33,1701+5]..src/CheckSafeParameterizedGrammar.ml[33,1701+6])
                  Tmod_ident "G/470"
              structure_item (src/CheckSafeParameterizedGrammar.ml[42,2089+0]..src/CheckSafeParameterizedGrammar.ml[43,2103+14])
                Tstr_type Rec
                [
                  type_declaration formal/471 (src/CheckSafeParameterizedGrammar.ml[42,2089+0]..src/CheckSafeParameterizedGrammar.ml[43,2103+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+2]..src/CheckSafeParameterizedGrammar.ml[43,2103+14])
                          Ttyp_tuple
                          [
                            core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+2]..src/CheckSafeParameterizedGrammar.ml[43,2103+8])
                              Ttyp_constr "Dune__exe!.Syntax.symbol"
                              []
                            core_type (src/CheckSafeParameterizedGrammar.ml[43,2103+11]..src/CheckSafeParameterizedGrammar.ml[43,2103+14])
                              Ttyp_constr "int/1!"
                              []
                          ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[45,2119+0]..src/CheckSafeParameterizedGrammar.ml[47,2206+34])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+4]..src/CheckSafeParameterizedGrammar.ml[45,2119+11])
                      Tpat_var "formals/472"
                    expression (src/CheckSafeParameterizedGrammar.ml[45,2119+12]..src/CheckSafeParameterizedGrammar.ml[47,2206+34]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+12]..src/CheckSafeParameterizedGrammar.ml[45,2119+22])
                            Tpat_tuple
                            [
                              pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+13]..src/CheckSafeParameterizedGrammar.ml[45,2119+15])
                                Tpat_var "nt/474"
                              pattern (src/CheckSafeParameterizedGrammar.ml[45,2119+17]..src/CheckSafeParameterizedGrammar.ml[45,2119+21])
                                Tpat_var "rule/475"
                            ]
                          expression (src/CheckSafeParameterizedGrammar.ml[46,2158+2]..src/CheckSafeParameterizedGrammar.ml[47,2206+34])
                            extra
                              Texp_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[45,2119+25]..src/CheckSafeParameterizedGrammar.ml[45,2119+36])
                                Ttyp_constr "list/9!"
                                [
                                  core_type (src/CheckSafeParameterizedGrammar.ml[45,2119+25]..src/CheckSafeParameterizedGrammar.ml[45,2119+31])
                                    Ttyp_constr "formal/471"
                                    []
                                ]
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/CheckSafeParameterizedGrammar.ml[46,2158+6]..src/CheckSafeParameterizedGrammar.ml[46,2158+11])
                                  Tpat_var "arity/476"
                                expression (src/CheckSafeParameterizedGrammar.ml[46,2158+14]..src/CheckSafeParameterizedGrammar.ml[46,2158+44])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[46,2158+14]..src/CheckSafeParameterizedGrammar.ml[46,2158+25])
                                    Texp_ident "Stdlib!.List.length"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[46,2158+26]..src/CheckSafeParameterizedGrammar.ml[46,2158+44])
                                        Texp_field
                                        expression (src/CheckSafeParameterizedGrammar.ml[46,2158+26]..src/CheckSafeParameterizedGrammar.ml[46,2158+30])
                                          Texp_ident "rule/475"
                                        "pr_parameters"
                                  ]
                            ]
                            expression (src/CheckSafeParameterizedGrammar.ml[47,2206+2]..src/CheckSafeParameterizedGrammar.ml[47,2206+34])
                              Texp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[47,2206+2]..src/CheckSafeParameterizedGrammar.ml[47,2206+11])
                                Texp_ident "Dune__exe!.Misc.mapi"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[47,2206+12]..src/CheckSafeParameterizedGrammar.ml[47,2206+17])
                                    Texp_ident "arity/476"
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[47,2206+18]..src/CheckSafeParameterizedGrammar.ml[47,2206+34])
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/CheckSafeParameterizedGrammar.ml[47,2206+23]..src/CheckSafeParameterizedGrammar.ml[47,2206+24])
                                          Tpat_var "i/579"
                                        expression (src/CheckSafeParameterizedGrammar.ml[47,2206+28]..src/CheckSafeParameterizedGrammar.ml[47,2206+33])
                                          Texp_tuple
                                          [
                                            expression (src/CheckSafeParameterizedGrammar.ml[47,2206+28]..src/CheckSafeParameterizedGrammar.ml[47,2206+30])
                                              Texp_ident "nt/474"
                                            expression (src/CheckSafeParameterizedGrammar.ml[47,2206+32]..src/CheckSafeParameterizedGrammar.ml[47,2206+33])
                                              Texp_ident "i/579"
                                          ]
                                    ]
                              ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[49,2242+0]..src/CheckSafeParameterizedGrammar.ml[53,2341+18])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[49,2242+4]..src/CheckSafeParameterizedGrammar.ml[49,2242+11])
                      extra
                        Tpat_extra_constraint
                        core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..src/CheckSafeParameterizedGrammar.ml[49,2242+26])
                          Ttyp_constr "array/8!"
                          [
                            core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..src/CheckSafeParameterizedGrammar.ml[49,2242+20])
                              Ttyp_constr "formal/471"
                              []
                          ]
                      Tpat_alias "formals/581"
                      pattern (src/CheckSafeParameterizedGrammar.ml[49,2242+4]..src/CheckSafeParameterizedGrammar.ml[49,2242+11])
                        Tpat_any
                    expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..src/CheckSafeParameterizedGrammar.ml[53,2341+18])
                      extra
                        Texp_constraint
                        core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..src/CheckSafeParameterizedGrammar.ml[49,2242+26])
                          Ttyp_constr "array/8!"
                          [
                            core_type (src/CheckSafeParameterizedGrammar.ml[49,2242+14]..src/CheckSafeParameterizedGrammar.ml[49,2242+20])
                              Ttyp_constr "formal/471"
                              []
                          ]
                      Texp_apply
                      expression (src/CheckSafeParameterizedGrammar.ml[53,2341+5]..src/CheckSafeParameterizedGrammar.ml[53,2341+18])
                        Texp_ident "Stdlib!.Array.of_list"
                      [
                        <arg>
                          Nolabel
                          expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..src/CheckSafeParameterizedGrammar.ml[52,2324+16])
                            Texp_apply
                            expression (src/CheckSafeParameterizedGrammar.ml[52,2324+5]..src/CheckSafeParameterizedGrammar.ml[52,2324+16])
                              Texp_ident "Stdlib!.List.concat"
                            [
                              <arg>
                                Nolabel
                                expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..src/CheckSafeParameterizedGrammar.ml[51,2302+21])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[51,2302+5]..src/CheckSafeParameterizedGrammar.ml[51,2302+21])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[51,2302+5]..src/CheckSafeParameterizedGrammar.ml[51,2302+13])
                                      Texp_ident "Stdlib!.List.map"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[51,2302+14]..src/CheckSafeParameterizedGrammar.ml[51,2302+21])
                                          Texp_ident "formals/472"
                                    ]
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..src/CheckSafeParameterizedGrammar.ml[50,2271+30])
                                        Texp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[50,2271+2]..src/CheckSafeParameterizedGrammar.ml[50,2271+20])
                                          Texp_ident "Dune__exe!.StringMap.bindings"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[50,2271+21]..src/CheckSafeParameterizedGrammar.ml[50,2271+30])
                                              Texp_field
                                              expression (src/CheckSafeParameterizedGrammar.ml[50,2271+21]..src/CheckSafeParameterizedGrammar.ml[50,2271+22])
                                                Texp_ident "G/470.g"
                                              "p_rules"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[59,2530+0]..src/CheckSafeParameterizedGrammar.ml[62,2748+9])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+4]..src/CheckSafeParameterizedGrammar.ml[59,2530+8])
                      Tpat_var "info/761"
                    expression (src/CheckSafeParameterizedGrammar.ml[59,2530+9]..src/CheckSafeParameterizedGrammar.ml[62,2748+9]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+10]..src/CheckSafeParameterizedGrammar.ml[59,2530+17])
                            extra
                              Tpat_extra_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+20]..src/CheckSafeParameterizedGrammar.ml[59,2530+26])
                                Ttyp_constr "formal/471"
                                []
                            Tpat_tuple
                            [
                              pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+11]..src/CheckSafeParameterizedGrammar.ml[59,2530+13])
                                Tpat_var "nt/763"
                              pattern (src/CheckSafeParameterizedGrammar.ml[59,2530+15]..src/CheckSafeParameterizedGrammar.ml[59,2530+16])
                                Tpat_var "i/764"
                            ]
                          expression (src/CheckSafeParameterizedGrammar.ml[60,2590+2]..src/CheckSafeParameterizedGrammar.ml[62,2748+9])
                            extra
                              Texp_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+30]..src/CheckSafeParameterizedGrammar.ml[59,2530+57])
                                Ttyp_tuple
                                [
                                  core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+30]..src/CheckSafeParameterizedGrammar.ml[59,2530+48])
                                    Ttyp_constr "Dune__exe!.Syntax.parameterized_rule"
                                    []
                                  core_type (src/CheckSafeParameterizedGrammar.ml[59,2530+51]..src/CheckSafeParameterizedGrammar.ml[59,2530+57])
                                    Ttyp_constr "Dune__exe!.Syntax.symbol"
                                    []
                                ]
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/CheckSafeParameterizedGrammar.ml[60,2590+6]..src/CheckSafeParameterizedGrammar.ml[60,2590+10])
                                  Tpat_var "rule/765"
                                expression (src/CheckSafeParameterizedGrammar.ml[60,2590+13]..src/CheckSafeParameterizedGrammar.ml[60,2590+75])
                                  Texp_try
                                  expression (src/CheckSafeParameterizedGrammar.ml[60,2590+17]..src/CheckSafeParameterizedGrammar.ml[60,2590+44])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[60,2590+17]..src/CheckSafeParameterizedGrammar.ml[60,2590+31])
                                      Texp_ident "Dune__exe!.StringMap.find"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[60,2590+32]..src/CheckSafeParameterizedGrammar.ml[60,2590+34])
                                          Texp_ident "nt/763"
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[60,2590+35]..src/CheckSafeParameterizedGrammar.ml[60,2590+44])
                                          Texp_field
                                          expression (src/CheckSafeParameterizedGrammar.ml[60,2590+35]..src/CheckSafeParameterizedGrammar.ml[60,2590+36])
                                            Texp_ident "G/470.g"
                                          "p_rules"
                                    ]
                                  [
                                    <case>
                                      pattern (src/CheckSafeParameterizedGrammar.ml[60,2590+50]..src/CheckSafeParameterizedGrammar.ml[60,2590+59])
                                        Tpat_construct "Not_found"
                                        []
                                        None
                                      expression (src/CheckSafeParameterizedGrammar.ml[60,2590+63]..src/CheckSafeParameterizedGrammar.ml[60,2590+75])
                                        Texp_assert                                        expression (src/CheckSafeParameterizedGrammar.ml[60,2590+70]..src/CheckSafeParameterizedGrammar.ml[60,2590+75])
                                          Texp_construct "false"
                                          []
                                  ]
                            ]
                            expression (src/CheckSafeParameterizedGrammar.ml[61,2669+2]..src/CheckSafeParameterizedGrammar.ml[62,2748+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+6]..src/CheckSafeParameterizedGrammar.ml[61,2669+7])
                                    Tpat_var "x/766"
                                  expression (src/CheckSafeParameterizedGrammar.ml[61,2669+11]..src/CheckSafeParameterizedGrammar.ml[61,2669+75])
                                    Texp_try
                                    expression (src/CheckSafeParameterizedGrammar.ml[61,2669+15]..src/CheckSafeParameterizedGrammar.ml[61,2669+44])
                                      Texp_apply
                                      expression (src/CheckSafeParameterizedGrammar.ml[61,2669+15]..src/CheckSafeParameterizedGrammar.ml[61,2669+23])
                                        Texp_ident "Stdlib!.List.nth"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/CheckSafeParameterizedGrammar.ml[61,2669+24]..src/CheckSafeParameterizedGrammar.ml[61,2669+42])
                                            Texp_field
                                            expression (src/CheckSafeParameterizedGrammar.ml[61,2669+24]..src/CheckSafeParameterizedGrammar.ml[61,2669+28])
                                              Texp_ident "rule/765"
                                            "pr_parameters"
                                        <arg>
                                          Nolabel
                                          expression (src/CheckSafeParameterizedGrammar.ml[61,2669+43]..src/CheckSafeParameterizedGrammar.ml[61,2669+44])
                                            Texp_ident "i/764"
                                      ]
                                    [
                                      <case>
                                        pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+50]..src/CheckSafeParameterizedGrammar.ml[61,2669+59])
                                          Tpat_construct "Failure"
                                          [
                                            pattern (src/CheckSafeParameterizedGrammar.ml[61,2669+58]..src/CheckSafeParameterizedGrammar.ml[61,2669+59])
                                              Tpat_any
                                          ]
                                          None
                                        expression (src/CheckSafeParameterizedGrammar.ml[61,2669+63]..src/CheckSafeParameterizedGrammar.ml[61,2669+75])
                                          Texp_assert                                          expression (src/CheckSafeParameterizedGrammar.ml[61,2669+70]..src/CheckSafeParameterizedGrammar.ml[61,2669+75])
                                            Texp_construct "false"
                                            []
                                    ]
                              ]
                              expression (src/CheckSafeParameterizedGrammar.ml[62,2748+2]..src/CheckSafeParameterizedGrammar.ml[62,2748+9])
                                Texp_tuple
                                [
                                  expression (src/CheckSafeParameterizedGrammar.ml[62,2748+2]..src/CheckSafeParameterizedGrammar.ml[62,2748+6])
                                    Texp_ident "rule/765"
                                  expression (src/CheckSafeParameterizedGrammar.ml[62,2748+8]..src/CheckSafeParameterizedGrammar.ml[62,2748+9])
                                    Texp_ident "x/766"
                                ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[76,3393+0]..src/CheckSafeParameterizedGrammar.ml[77,3445+27])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+4]..src/CheckSafeParameterizedGrammar.ml[76,3393+20])
                      Tpat_var "used_in_producer/768"
                    expression (src/CheckSafeParameterizedGrammar.ml[76,3393+21]..src/CheckSafeParameterizedGrammar.ml[77,3445+27]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+21]..src/CheckSafeParameterizedGrammar.ml[76,3393+22])
                            Tpat_var "x/770"
                          expression (src/CheckSafeParameterizedGrammar.ml[76,3393+23]..src/CheckSafeParameterizedGrammar.ml[77,3445+27]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+24]..src/CheckSafeParameterizedGrammar.ml[76,3393+37])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/CheckSafeParameterizedGrammar.ml[76,3393+40]..src/CheckSafeParameterizedGrammar.ml[76,3393+48])
                                      Ttyp_constr "Dune__exe!.Syntax.producer"
                                      []
                                  Tpat_tuple
                                  [
                                    pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+25]..src/CheckSafeParameterizedGrammar.ml[76,3393+26])
                                      Tpat_any
                                    pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+28]..src/CheckSafeParameterizedGrammar.ml[76,3393+33])
                                      Tpat_var "param/771"
                                    pattern (src/CheckSafeParameterizedGrammar.ml[76,3393+35]..src/CheckSafeParameterizedGrammar.ml[76,3393+36])
                                      Tpat_any
                                  ]
                                expression (src/CheckSafeParameterizedGrammar.ml[77,3445+2]..src/CheckSafeParameterizedGrammar.ml[77,3445+27])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[77,3445+2]..src/CheckSafeParameterizedGrammar.ml[77,3445+19])
                                    Texp_ident "Dune__exe!.Parameters.occurs"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[77,3445+20]..src/CheckSafeParameterizedGrammar.ml[77,3445+21])
                                        Texp_ident "x/770"
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[77,3445+22]..src/CheckSafeParameterizedGrammar.ml[77,3445+27])
                                        Texp_ident "param/771"
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[79,3474+0]..src/CheckSafeParameterizedGrammar.ml[80,3529+54])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+4]..src/CheckSafeParameterizedGrammar.ml[79,3474+18])
                      Tpat_var "used_in_branch/788"
                    expression (src/CheckSafeParameterizedGrammar.ml[79,3474+19]..src/CheckSafeParameterizedGrammar.ml[80,3529+54]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+19]..src/CheckSafeParameterizedGrammar.ml[79,3474+20])
                            Tpat_var "x/790"
                          expression (src/CheckSafeParameterizedGrammar.ml[79,3474+21]..src/CheckSafeParameterizedGrammar.ml[80,3529+54]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+22]..src/CheckSafeParameterizedGrammar.ml[79,3474+28])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/CheckSafeParameterizedGrammar.ml[79,3474+31]..src/CheckSafeParameterizedGrammar.ml[79,3474+51])
                                      Ttyp_constr "Dune__exe!.Syntax.parameterized_branch"
                                      []
                                  Tpat_alias "branch/791"
                                  pattern (src/CheckSafeParameterizedGrammar.ml[79,3474+22]..src/CheckSafeParameterizedGrammar.ml[79,3474+28])
                                    Tpat_any
                                expression (src/CheckSafeParameterizedGrammar.ml[80,3529+2]..src/CheckSafeParameterizedGrammar.ml[80,3529+54])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[80,3529+2]..src/CheckSafeParameterizedGrammar.ml[80,3529+13])
                                    Texp_ident "Stdlib!.List.exists"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[80,3529+14]..src/CheckSafeParameterizedGrammar.ml[80,3529+34])
                                        Texp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[80,3529+15]..src/CheckSafeParameterizedGrammar.ml[80,3529+31])
                                          Texp_ident "used_in_producer/768"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[80,3529+32]..src/CheckSafeParameterizedGrammar.ml[80,3529+33])
                                              Texp_ident "x/790"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[80,3529+35]..src/CheckSafeParameterizedGrammar.ml[80,3529+54])
                                        Texp_field
                                        expression (src/CheckSafeParameterizedGrammar.ml[80,3529+35]..src/CheckSafeParameterizedGrammar.ml[80,3529+41])
                                          Texp_ident "branch/791"
                                        "pr_producers"
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[82,3585+0]..src/CheckSafeParameterizedGrammar.ml[84,3652+49])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+4]..src/CheckSafeParameterizedGrammar.ml[82,3585+8])
                      Tpat_var "used/792"
                    expression (src/CheckSafeParameterizedGrammar.ml[82,3585+9]..src/CheckSafeParameterizedGrammar.ml[84,3652+49]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+10]..src/CheckSafeParameterizedGrammar.ml[82,3585+16])
                            extra
                              Tpat_extra_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[82,3585+19]..src/CheckSafeParameterizedGrammar.ml[82,3585+25])
                                Ttyp_constr "formal/471"
                                []
                            Tpat_alias "formal/794"
                            pattern (src/CheckSafeParameterizedGrammar.ml[82,3585+10]..src/CheckSafeParameterizedGrammar.ml[82,3585+16])
                              Tpat_any
                          expression (src/CheckSafeParameterizedGrammar.ml[83,3621+2]..src/CheckSafeParameterizedGrammar.ml[84,3652+49])
                            extra
                              Texp_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[82,3585+29]..src/CheckSafeParameterizedGrammar.ml[82,3585+33])
                                Ttyp_constr "bool/5!"
                                []
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+6]..src/CheckSafeParameterizedGrammar.ml[83,3621+13])
                                  Tpat_tuple
                                  [
                                    pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+6]..src/CheckSafeParameterizedGrammar.ml[83,3621+10])
                                      Tpat_var "rule/795"
                                    pattern (src/CheckSafeParameterizedGrammar.ml[83,3621+12]..src/CheckSafeParameterizedGrammar.ml[83,3621+13])
                                      Tpat_var "x/796"
                                  ]
                                expression (src/CheckSafeParameterizedGrammar.ml[83,3621+16]..src/CheckSafeParameterizedGrammar.ml[83,3621+27])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[83,3621+16]..src/CheckSafeParameterizedGrammar.ml[83,3621+20])
                                    Texp_ident "info/761"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[83,3621+21]..src/CheckSafeParameterizedGrammar.ml[83,3621+27])
                                        Texp_ident "formal/794"
                                  ]
                            ]
                            expression (src/CheckSafeParameterizedGrammar.ml[84,3652+2]..src/CheckSafeParameterizedGrammar.ml[84,3652+49])
                              Texp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[84,3652+2]..src/CheckSafeParameterizedGrammar.ml[84,3652+13])
                                Texp_ident "Stdlib!.List.exists"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[84,3652+14]..src/CheckSafeParameterizedGrammar.ml[84,3652+32])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[84,3652+15]..src/CheckSafeParameterizedGrammar.ml[84,3652+29])
                                      Texp_ident "used_in_branch/788"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[84,3652+30]..src/CheckSafeParameterizedGrammar.ml[84,3652+31])
                                          Texp_ident "x/796"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[84,3652+33]..src/CheckSafeParameterizedGrammar.ml[84,3652+49])
                                    Texp_field
                                    expression (src/CheckSafeParameterizedGrammar.ml[84,3652+33]..src/CheckSafeParameterizedGrammar.ml[84,3652+37])
                                      Texp_ident "rule/795"
                                    "pr_branches"
                              ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[88,3733+0]..src/CheckSafeParameterizedGrammar.ml[90,3829+16])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[88,3733+4]..src/CheckSafeParameterizedGrammar.ml[88,3733+8])
                      extra
                        Tpat_extra_constraint
                        core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..src/CheckSafeParameterizedGrammar.ml[88,3733+25])
                          Ttyp_arrow
                          Nolabel
                          core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..src/CheckSafeParameterizedGrammar.ml[88,3733+17])
                            Ttyp_constr "formal/471"
                            []
                          core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+21]..src/CheckSafeParameterizedGrammar.ml[88,3733+25])
                            Ttyp_constr "bool/5!"
                            []
                      Tpat_alias "used/797"
                      pattern (src/CheckSafeParameterizedGrammar.ml[88,3733+4]..src/CheckSafeParameterizedGrammar.ml[88,3733+8])
                        Tpat_any
                    expression (src/CheckSafeParameterizedGrammar.ml[89,3761+2]..src/CheckSafeParameterizedGrammar.ml[90,3829+16])
                      extra
                        Texp_constraint
                        core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..src/CheckSafeParameterizedGrammar.ml[88,3733+25])
                          Ttyp_arrow
                          Nolabel
                          core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+11]..src/CheckSafeParameterizedGrammar.ml[88,3733+17])
                            Ttyp_constr "formal/471"
                            []
                          core_type (src/CheckSafeParameterizedGrammar.ml[88,3733+21]..src/CheckSafeParameterizedGrammar.ml[88,3733+25])
                            Ttyp_constr "bool/5!"
                            []
                      Texp_letmodule "M/909"
                      module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..src/CheckSafeParameterizedGrammar.ml[89,3761+64])
                        Tmod_apply
                        module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..src/CheckSafeParameterizedGrammar.ml[89,3761+36])
                          module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+17]..src/CheckSafeParameterizedGrammar.ml[89,3761+36])
                            Tmod_ident "Dune__exe!.Fix.Memoize.ForType"
                        module_expr (src/CheckSafeParameterizedGrammar.ml[89,3761+37]..src/CheckSafeParameterizedGrammar.ml[89,3761+63])
                          Tmod_structure
                          [
                            structure_item (src/CheckSafeParameterizedGrammar.ml[89,3761+44]..src/CheckSafeParameterizedGrammar.ml[89,3761+59])
                              Tstr_type Rec
                              [
                                type_declaration t/798 (src/CheckSafeParameterizedGrammar.ml[89,3761+44]..src/CheckSafeParameterizedGrammar.ml[89,3761+59])
                                  ptype_params =
                                    []
                                  ptype_cstrs =
                                    []
                                  ptype_kind =
                                    Ttype_abstract
                                  ptype_private = Public
                                  ptype_manifest =
                                    Some
                                      core_type (src/CheckSafeParameterizedGrammar.ml[89,3761+53]..src/CheckSafeParameterizedGrammar.ml[89,3761+59])
                                        Ttyp_constr "formal/471"
                                        []
                              ]
                          ]
                      expression (src/CheckSafeParameterizedGrammar.ml[90,3829+2]..src/CheckSafeParameterizedGrammar.ml[90,3829+16])
                        Texp_apply
                        expression (src/CheckSafeParameterizedGrammar.ml[90,3829+2]..src/CheckSafeParameterizedGrammar.ml[90,3829+11])
                          Texp_ident "M/909.memoize"
                        [
                          <arg>
                            Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[90,3829+12]..src/CheckSafeParameterizedGrammar.ml[90,3829+16])
                              Texp_ident "used/792"
                        ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[148,6435+0]..src/CheckSafeParameterizedGrammar.ml[150,6456+13])
                Tstr_type Rec
                [
                  type_declaration edge/910 (src/CheckSafeParameterizedGrammar.ml[148,6435+0]..src/CheckSafeParameterizedGrammar.ml[150,6456+13])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_variant
                        [
                          (src/CheckSafeParameterizedGrammar.ml[149,6447+2]..src/CheckSafeParameterizedGrammar.ml[149,6447+8])
                            Safe/911
                            []
                            None
                          (src/CheckSafeParameterizedGrammar.ml[150,6456+2]..src/CheckSafeParameterizedGrammar.ml[150,6456+13])
                            Dangerous/912
                            []
                            None
                        ]
                    ptype_private = Public
                    ptype_manifest =
                      None
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[152,6471+0]..src/CheckSafeParameterizedGrammar.ml[175,7489+18])
                Tstr_value Rec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+8]..src/CheckSafeParameterizedGrammar.ml[152,6471+28])
                      Tpat_var "successors_parameter/913"
                    expression (src/CheckSafeParameterizedGrammar.ml[152,6471+29]..src/CheckSafeParameterizedGrammar.ml[175,7489+18]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+30]..src/CheckSafeParameterizedGrammar.ml[152,6471+31])
                            extra
                              Tpat_extra_constraint
                              core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+34]..src/CheckSafeParameterizedGrammar.ml[152,6471+56])
                                Ttyp_arrow
                                Nolabel
                                core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+34]..src/CheckSafeParameterizedGrammar.ml[152,6471+38])
                                  Ttyp_constr "edge/910"
                                  []
                                core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+42]..src/CheckSafeParameterizedGrammar.ml[152,6471+56])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+42]..src/CheckSafeParameterizedGrammar.ml[152,6471+48])
                                    Ttyp_constr "formal/471"
                                    []
                                  core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+52]..src/CheckSafeParameterizedGrammar.ml[152,6471+56])
                                    Ttyp_constr "unit/6!"
                                    []
                            Tpat_alias "f/914"
                            pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+30]..src/CheckSafeParameterizedGrammar.ml[152,6471+31])
                              Tpat_any
                          expression (src/CheckSafeParameterizedGrammar.ml[152,6471+58]..src/CheckSafeParameterizedGrammar.ml[175,7489+18]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+58]..src/CheckSafeParameterizedGrammar.ml[152,6471+59])
                                  Tpat_var "x/915"
                                expression (src/CheckSafeParameterizedGrammar.ml[152,6471+60]..src/CheckSafeParameterizedGrammar.ml[175,7489+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+61]..src/CheckSafeParameterizedGrammar.ml[152,6471+66])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/CheckSafeParameterizedGrammar.ml[152,6471+69]..src/CheckSafeParameterizedGrammar.ml[152,6471+78])
                                            Ttyp_constr "Dune__exe!.Syntax.parameter"
                                            []
                                        Tpat_alias "param/916"
                                        pattern (src/CheckSafeParameterizedGrammar.ml[152,6471+61]..src/CheckSafeParameterizedGrammar.ml[152,6471+66])
                                          Tpat_any
                                      expression (src/CheckSafeParameterizedGrammar.ml[153,6553+2]..src/CheckSafeParameterizedGrammar.ml[175,7489+18])
                                        Texp_match
                                        expression (src/CheckSafeParameterizedGrammar.ml[153,6553+8]..src/CheckSafeParameterizedGrammar.ml[153,6553+13])
                                          Texp_ident "param/916"
                                        [
                                          <case>
                                            pattern (src/CheckSafeParameterizedGrammar.ml[154,6572+4]..src/CheckSafeParameterizedGrammar.ml[154,6572+18])
                                              Tpat_value
                                              pattern (src/CheckSafeParameterizedGrammar.ml[154,6572+4]..src/CheckSafeParameterizedGrammar.ml[154,6572+18])
                                                Tpat_construct "ParameterVar"
                                                [
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[154,6572+17]..src/CheckSafeParameterizedGrammar.ml[154,6572+18])
                                                    Tpat_any
                                                ]
                                                None
                                            expression (src/CheckSafeParameterizedGrammar.ml[156,6649+6]..src/CheckSafeParameterizedGrammar.ml[156,6649+8])
                                              Texp_construct "()"
                                              []
                                          <case>
                                            pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+4]..src/CheckSafeParameterizedGrammar.ml[157,6658+30])
                                              Tpat_value
                                              pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+4]..src/CheckSafeParameterizedGrammar.ml[157,6658+30])
                                                Tpat_construct "ParameterApp"
                                                [
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+18]..src/CheckSafeParameterizedGrammar.ml[157,6658+21])
                                                    Tpat_var "sym/917"
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[157,6658+23]..src/CheckSafeParameterizedGrammar.ml[157,6658+29])
                                                    Tpat_var "params/918"
                                                ]
                                                None
                                            expression (src/CheckSafeParameterizedGrammar.ml[158,6692+6]..src/CheckSafeParameterizedGrammar.ml[173,7446+14])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[158,6692+10]..src/CheckSafeParameterizedGrammar.ml[158,6692+12])
                                                    Tpat_var "nt/919"
                                                  expression (src/CheckSafeParameterizedGrammar.ml[158,6692+15]..src/CheckSafeParameterizedGrammar.ml[158,6692+24])
                                                    Texp_apply
                                                    expression (src/CheckSafeParameterizedGrammar.ml[158,6692+15]..src/CheckSafeParameterizedGrammar.ml[158,6692+20])
                                                      Texp_ident "value/397"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/CheckSafeParameterizedGrammar.ml[158,6692+21]..src/CheckSafeParameterizedGrammar.ml[158,6692+24])
                                                          Texp_ident "sym/917"
                                                    ]
                                              ]
                                              expression (src/CheckSafeParameterizedGrammar.ml[159,6720+6]..src/CheckSafeParameterizedGrammar.ml[173,7446+14])
                                                Texp_apply
                                                expression (src/CheckSafeParameterizedGrammar.ml[159,6720+6]..src/CheckSafeParameterizedGrammar.ml[159,6720+16])
                                                  Texp_ident "Stdlib!.List.iteri"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[159,6720+17]..src/CheckSafeParameterizedGrammar.ml[173,7446+7])
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/CheckSafeParameterizedGrammar.ml[159,6720+22]..src/CheckSafeParameterizedGrammar.ml[159,6720+23])
                                                            Tpat_var "i/955"
                                                          expression (src/CheckSafeParameterizedGrammar.ml[159,6720+24]..src/CheckSafeParameterizedGrammar.ml[172,7434+11]) ghost
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/CheckSafeParameterizedGrammar.ml[159,6720+24]..src/CheckSafeParameterizedGrammar.ml[159,6720+29])
                                                                  Tpat_var "param/956"
                                                                expression (src/CheckSafeParameterizedGrammar.ml[162,6872+8]..src/CheckSafeParameterizedGrammar.ml[172,7434+11])
                                                                  Texp_ifthenelse
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[162,6872+11]..src/CheckSafeParameterizedGrammar.ml[162,6872+23])
                                                                    Texp_apply
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[162,6872+11]..src/CheckSafeParameterizedGrammar.ml[162,6872+15])
                                                                      Texp_ident "used/797"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[162,6872+16]..src/CheckSafeParameterizedGrammar.ml[162,6872+23])
                                                                          Texp_tuple
                                                                          [
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[162,6872+17]..src/CheckSafeParameterizedGrammar.ml[162,6872+19])
                                                                              Texp_ident "nt/919"
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[162,6872+21]..src/CheckSafeParameterizedGrammar.ml[162,6872+22])
                                                                              Texp_ident "i/955"
                                                                          ]
                                                                    ]
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[162,6872+29]..src/CheckSafeParameterizedGrammar.ml[172,7434+11])
                                                                    Texp_sequence
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[164,6988+10]..src/CheckSafeParameterizedGrammar.ml[164,6988+40])
                                                                      Texp_apply
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[164,6988+10]..src/CheckSafeParameterizedGrammar.ml[164,6988+30])
                                                                        Texp_ident "successors_parameter/913"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[164,6988+31]..src/CheckSafeParameterizedGrammar.ml[164,6988+32])
                                                                            Texp_ident "f/914"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[164,6988+33]..src/CheckSafeParameterizedGrammar.ml[164,6988+34])
                                                                            Texp_ident "x/915"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[164,6988+35]..src/CheckSafeParameterizedGrammar.ml[164,6988+40])
                                                                            Texp_ident "param/956"
                                                                      ]
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[168,7269+10]..src/CheckSafeParameterizedGrammar.ml[171,7402+31])
                                                                      Texp_ifthenelse
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[168,7269+13]..src/CheckSafeParameterizedGrammar.ml[168,7269+46])
                                                                        Texp_apply
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[168,7269+13]..src/CheckSafeParameterizedGrammar.ml[168,7269+38])
                                                                          Texp_ident "Dune__exe!.Parameters.occurs_shallow"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[168,7269+39]..src/CheckSafeParameterizedGrammar.ml[168,7269+40])
                                                                              Texp_ident "x/915"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[168,7269+41]..src/CheckSafeParameterizedGrammar.ml[168,7269+46])
                                                                              Texp_ident "param/956"
                                                                        ]
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[169,7321+12]..src/CheckSafeParameterizedGrammar.ml[169,7321+26])
                                                                        Texp_apply
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[169,7321+12]..src/CheckSafeParameterizedGrammar.ml[169,7321+13])
                                                                          Texp_ident "f/914"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[169,7321+14]..src/CheckSafeParameterizedGrammar.ml[169,7321+18])
                                                                              Texp_construct "Safe"
                                                                              []
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[169,7321+19]..src/CheckSafeParameterizedGrammar.ml[169,7321+26])
                                                                              Texp_tuple
                                                                              [
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[169,7321+20]..src/CheckSafeParameterizedGrammar.ml[169,7321+22])
                                                                                  Texp_ident "nt/919"
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[169,7321+24]..src/CheckSafeParameterizedGrammar.ml[169,7321+25])
                                                                                  Texp_ident "i/955"
                                                                              ]
                                                                        ]
                                                                      Some
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[170,7348+15]..src/CheckSafeParameterizedGrammar.ml[171,7402+31])
                                                                          Texp_ifthenelse
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[170,7348+18]..src/CheckSafeParameterizedGrammar.ml[170,7348+48])
                                                                            Texp_apply
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[170,7348+18]..src/CheckSafeParameterizedGrammar.ml[170,7348+40])
                                                                              Texp_ident "Dune__exe!.Parameters.occurs_deep"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[170,7348+41]..src/CheckSafeParameterizedGrammar.ml[170,7348+42])
                                                                                  Texp_ident "x/915"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[170,7348+43]..src/CheckSafeParameterizedGrammar.ml[170,7348+48])
                                                                                  Texp_ident "param/956"
                                                                            ]
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[171,7402+12]..src/CheckSafeParameterizedGrammar.ml[171,7402+31])
                                                                            Texp_apply
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[171,7402+12]..src/CheckSafeParameterizedGrammar.ml[171,7402+13])
                                                                              Texp_ident "f/914"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[171,7402+14]..src/CheckSafeParameterizedGrammar.ml[171,7402+23])
                                                                                  Texp_construct "Dangerous"
                                                                                  []
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[171,7402+24]..src/CheckSafeParameterizedGrammar.ml[171,7402+31])
                                                                                  Texp_tuple
                                                                                  [
                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[171,7402+25]..src/CheckSafeParameterizedGrammar.ml[171,7402+27])
                                                                                      Texp_ident "nt/919"
                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[171,7402+29]..src/CheckSafeParameterizedGrammar.ml[171,7402+30])
                                                                                      Texp_ident "i/955"
                                                                                  ]
                                                                            ]
                                                                          None
                                                                  None
                                                            ]
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/CheckSafeParameterizedGrammar.ml[173,7446+8]..src/CheckSafeParameterizedGrammar.ml[173,7446+14])
                                                      Texp_ident "params/918"
                                                ]
                                          <case>
                                            pattern (src/CheckSafeParameterizedGrammar.ml[174,7461+4]..src/CheckSafeParameterizedGrammar.ml[174,7461+24])
                                              Tpat_value
                                              pattern (src/CheckSafeParameterizedGrammar.ml[174,7461+4]..src/CheckSafeParameterizedGrammar.ml[174,7461+24])
                                                Tpat_construct "ParameterAnonymous"
                                                [
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[174,7461+23]..src/CheckSafeParameterizedGrammar.ml[174,7461+24])
                                                    Tpat_any
                                                ]
                                                None
                                            expression (src/CheckSafeParameterizedGrammar.ml[175,7489+6]..src/CheckSafeParameterizedGrammar.ml[175,7489+18])
                                              Texp_assert                                              expression (src/CheckSafeParameterizedGrammar.ml[175,7489+13]..src/CheckSafeParameterizedGrammar.ml[175,7489+18])
                                                Texp_construct "false"
                                                []
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[177,7509+0]..src/CheckSafeParameterizedGrammar.ml[178,7566+32])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+4]..src/CheckSafeParameterizedGrammar.ml[177,7509+23])
                      Tpat_var "successors_producer/957"
                    expression (src/CheckSafeParameterizedGrammar.ml[177,7509+24]..src/CheckSafeParameterizedGrammar.ml[178,7566+32]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+24]..src/CheckSafeParameterizedGrammar.ml[177,7509+25])
                            Tpat_var "f/959"
                          expression (src/CheckSafeParameterizedGrammar.ml[177,7509+26]..src/CheckSafeParameterizedGrammar.ml[178,7566+32]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+26]..src/CheckSafeParameterizedGrammar.ml[177,7509+27])
                                  Tpat_var "x/960"
                                expression (src/CheckSafeParameterizedGrammar.ml[177,7509+28]..src/CheckSafeParameterizedGrammar.ml[178,7566+32]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+29]..src/CheckSafeParameterizedGrammar.ml[177,7509+42])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/CheckSafeParameterizedGrammar.ml[177,7509+45]..src/CheckSafeParameterizedGrammar.ml[177,7509+53])
                                            Ttyp_constr "Dune__exe!.Syntax.producer"
                                            []
                                        Tpat_tuple
                                        [
                                          pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+30]..src/CheckSafeParameterizedGrammar.ml[177,7509+31])
                                            Tpat_any
                                          pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+33]..src/CheckSafeParameterizedGrammar.ml[177,7509+38])
                                            Tpat_var "param/961"
                                          pattern (src/CheckSafeParameterizedGrammar.ml[177,7509+40]..src/CheckSafeParameterizedGrammar.ml[177,7509+41])
                                            Tpat_any
                                        ]
                                      expression (src/CheckSafeParameterizedGrammar.ml[178,7566+2]..src/CheckSafeParameterizedGrammar.ml[178,7566+32])
                                        Texp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[178,7566+2]..src/CheckSafeParameterizedGrammar.ml[178,7566+22])
                                          Texp_ident "successors_parameter/913"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[178,7566+23]..src/CheckSafeParameterizedGrammar.ml[178,7566+24])
                                              Texp_ident "f/959"
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[178,7566+25]..src/CheckSafeParameterizedGrammar.ml[178,7566+26])
                                              Texp_ident "x/960"
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[178,7566+27]..src/CheckSafeParameterizedGrammar.ml[178,7566+32])
                                              Texp_ident "param/961"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[180,7600+0]..src/CheckSafeParameterizedGrammar.ml[181,7660+57])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+4]..src/CheckSafeParameterizedGrammar.ml[180,7600+21])
                      Tpat_var "successors_branch/963"
                    expression (src/CheckSafeParameterizedGrammar.ml[180,7600+22]..src/CheckSafeParameterizedGrammar.ml[181,7660+57]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+22]..src/CheckSafeParameterizedGrammar.ml[180,7600+23])
                            Tpat_var "f/965"
                          expression (src/CheckSafeParameterizedGrammar.ml[180,7600+24]..src/CheckSafeParameterizedGrammar.ml[181,7660+57]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+24]..src/CheckSafeParameterizedGrammar.ml[180,7600+25])
                                  Tpat_var "x/966"
                                expression (src/CheckSafeParameterizedGrammar.ml[180,7600+26]..src/CheckSafeParameterizedGrammar.ml[181,7660+57]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+27]..src/CheckSafeParameterizedGrammar.ml[180,7600+33])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/CheckSafeParameterizedGrammar.ml[180,7600+36]..src/CheckSafeParameterizedGrammar.ml[180,7600+56])
                                            Ttyp_constr "Dune__exe!.Syntax.parameterized_branch"
                                            []
                                        Tpat_alias "branch/967"
                                        pattern (src/CheckSafeParameterizedGrammar.ml[180,7600+27]..src/CheckSafeParameterizedGrammar.ml[180,7600+33])
                                          Tpat_any
                                      expression (src/CheckSafeParameterizedGrammar.ml[181,7660+2]..src/CheckSafeParameterizedGrammar.ml[181,7660+57])
                                        Texp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[181,7660+2]..src/CheckSafeParameterizedGrammar.ml[181,7660+11])
                                          Texp_ident "Stdlib!.List.iter"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[181,7660+12]..src/CheckSafeParameterizedGrammar.ml[181,7660+37])
                                              Texp_apply
                                              expression (src/CheckSafeParameterizedGrammar.ml[181,7660+13]..src/CheckSafeParameterizedGrammar.ml[181,7660+32])
                                                Texp_ident "successors_producer/957"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/CheckSafeParameterizedGrammar.ml[181,7660+33]..src/CheckSafeParameterizedGrammar.ml[181,7660+34])
                                                    Texp_ident "f/965"
                                                <arg>
                                                  Nolabel
                                                  expression (src/CheckSafeParameterizedGrammar.ml[181,7660+35]..src/CheckSafeParameterizedGrammar.ml[181,7660+36])
                                                    Texp_ident "x/966"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[181,7660+38]..src/CheckSafeParameterizedGrammar.ml[181,7660+57])
                                              Texp_field
                                              expression (src/CheckSafeParameterizedGrammar.ml[181,7660+38]..src/CheckSafeParameterizedGrammar.ml[181,7660+44])
                                                Texp_ident "branch/967"
                                              "pr_producers"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[183,7719+0]..src/CheckSafeParameterizedGrammar.ml[185,7787+52])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+4]..src/CheckSafeParameterizedGrammar.ml[183,7719+14])
                      Tpat_var "successors/968"
                    expression (src/CheckSafeParameterizedGrammar.ml[183,7719+15]..src/CheckSafeParameterizedGrammar.ml[185,7787+52]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+15]..src/CheckSafeParameterizedGrammar.ml[183,7719+16])
                            Tpat_var "f/970"
                          expression (src/CheckSafeParameterizedGrammar.ml[183,7719+17]..src/CheckSafeParameterizedGrammar.ml[185,7787+52]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+18]..src/CheckSafeParameterizedGrammar.ml[183,7719+24])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/CheckSafeParameterizedGrammar.ml[183,7719+27]..src/CheckSafeParameterizedGrammar.ml[183,7719+33])
                                      Ttyp_constr "formal/471"
                                      []
                                  Tpat_alias "formal/971"
                                  pattern (src/CheckSafeParameterizedGrammar.ml[183,7719+18]..src/CheckSafeParameterizedGrammar.ml[183,7719+24])
                                    Tpat_any
                                expression (src/CheckSafeParameterizedGrammar.ml[184,7756+2]..src/CheckSafeParameterizedGrammar.ml[185,7787+52])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+6]..src/CheckSafeParameterizedGrammar.ml[184,7756+13])
                                        Tpat_tuple
                                        [
                                          pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+6]..src/CheckSafeParameterizedGrammar.ml[184,7756+10])
                                            Tpat_var "rule/972"
                                          pattern (src/CheckSafeParameterizedGrammar.ml[184,7756+12]..src/CheckSafeParameterizedGrammar.ml[184,7756+13])
                                            Tpat_var "x/973"
                                        ]
                                      expression (src/CheckSafeParameterizedGrammar.ml[184,7756+16]..src/CheckSafeParameterizedGrammar.ml[184,7756+27])
                                        Texp_apply
                                        expression (src/CheckSafeParameterizedGrammar.ml[184,7756+16]..src/CheckSafeParameterizedGrammar.ml[184,7756+20])
                                          Texp_ident "info/761"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/CheckSafeParameterizedGrammar.ml[184,7756+21]..src/CheckSafeParameterizedGrammar.ml[184,7756+27])
                                              Texp_ident "formal/971"
                                        ]
                                  ]
                                  expression (src/CheckSafeParameterizedGrammar.ml[185,7787+2]..src/CheckSafeParameterizedGrammar.ml[185,7787+52])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[185,7787+2]..src/CheckSafeParameterizedGrammar.ml[185,7787+11])
                                      Texp_ident "Stdlib!.List.iter"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[185,7787+12]..src/CheckSafeParameterizedGrammar.ml[185,7787+35])
                                          Texp_apply
                                          expression (src/CheckSafeParameterizedGrammar.ml[185,7787+13]..src/CheckSafeParameterizedGrammar.ml[185,7787+30])
                                            Texp_ident "successors_branch/963"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[185,7787+31]..src/CheckSafeParameterizedGrammar.ml[185,7787+32])
                                                Texp_ident "f/970"
                                            <arg>
                                              Nolabel
                                              expression (src/CheckSafeParameterizedGrammar.ml[185,7787+33]..src/CheckSafeParameterizedGrammar.ml[185,7787+34])
                                                Texp_ident "x/973"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[185,7787+36]..src/CheckSafeParameterizedGrammar.ml[185,7787+52])
                                          Texp_field
                                          expression (src/CheckSafeParameterizedGrammar.ml[185,7787+36]..src/CheckSafeParameterizedGrammar.ml[185,7787+40])
                                            Texp_ident "rule/972"
                                          "pr_branches"
                                    ]
                            ]
                      ]
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[191,7975+0]..src/CheckSafeParameterizedGrammar.ml[197,8175+3])
                Tstr_module
                G/984
                  module_expr (src/CheckSafeParameterizedGrammar.ml[191,7975+11]..src/CheckSafeParameterizedGrammar.ml[197,8175+3])
                    Tmod_structure
                    [
                      structure_item (src/CheckSafeParameterizedGrammar.ml[192,7993+2]..src/CheckSafeParameterizedGrammar.ml[192,7993+20])
                        Tstr_type Rec
                        [
                          type_declaration node/974 (src/CheckSafeParameterizedGrammar.ml[192,7993+2]..src/CheckSafeParameterizedGrammar.ml[192,7993+20])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ttype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/CheckSafeParameterizedGrammar.ml[192,7993+14]..src/CheckSafeParameterizedGrammar.ml[192,7993+20])
                                  Ttyp_constr "formal/471"
                                  []
                        ]
                      structure_item (src/CheckSafeParameterizedGrammar.ml[193,8014+2]..src/CheckSafeParameterizedGrammar.ml[193,8014+30])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[193,8014+6]..src/CheckSafeParameterizedGrammar.ml[193,8014+7])
                              Tpat_var "n/975"
                            expression (src/CheckSafeParameterizedGrammar.ml[193,8014+10]..src/CheckSafeParameterizedGrammar.ml[193,8014+30])
                              Texp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[193,8014+10]..src/CheckSafeParameterizedGrammar.ml[193,8014+22])
                                Texp_ident "Stdlib!.Array.length"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[193,8014+23]..src/CheckSafeParameterizedGrammar.ml[193,8014+30])
                                    Texp_ident "formals/581"
                              ]
                        ]
                      structure_item (src/CheckSafeParameterizedGrammar.ml[194,8045+2]..src/CheckSafeParameterizedGrammar.ml[194,8045+34])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[194,8045+6]..src/CheckSafeParameterizedGrammar.ml[194,8045+11])
                              Tpat_var "index/976"
                            expression (src/CheckSafeParameterizedGrammar.ml[194,8045+14]..src/CheckSafeParameterizedGrammar.ml[194,8045+34])
                              Texp_apply
                              expression (src/CheckSafeParameterizedGrammar.ml[194,8045+14]..src/CheckSafeParameterizedGrammar.ml[194,8045+26])
                                Texp_ident "Dune__exe!.Misc.inverse"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/CheckSafeParameterizedGrammar.ml[194,8045+27]..src/CheckSafeParameterizedGrammar.ml[194,8045+34])
                                    Texp_ident "formals/581"
                              ]
                        ]
                      structure_item (src/CheckSafeParameterizedGrammar.ml[195,8080+2]..src/CheckSafeParameterizedGrammar.ml[195,8080+58])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+6]..src/CheckSafeParameterizedGrammar.ml[195,8080+16])
                              Tpat_var "successors/977"
                            expression (src/CheckSafeParameterizedGrammar.ml[195,8080+17]..src/CheckSafeParameterizedGrammar.ml[195,8080+58]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+17]..src/CheckSafeParameterizedGrammar.ml[195,8080+18])
                                    Tpat_var "f/978"
                                  expression (src/CheckSafeParameterizedGrammar.ml[195,8080+21]..src/CheckSafeParameterizedGrammar.ml[195,8080+58])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[195,8080+21]..src/CheckSafeParameterizedGrammar.ml[195,8080+31])
                                      Texp_ident "successors/968"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[195,8080+32]..src/CheckSafeParameterizedGrammar.ml[195,8080+58])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+37]..src/CheckSafeParameterizedGrammar.ml[195,8080+38])
                                                Tpat_any
                                              expression (src/CheckSafeParameterizedGrammar.ml[195,8080+39]..src/CheckSafeParameterizedGrammar.ml[195,8080+57]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/CheckSafeParameterizedGrammar.ml[195,8080+39]..src/CheckSafeParameterizedGrammar.ml[195,8080+45])
                                                      Tpat_var "target/979"
                                                    expression (src/CheckSafeParameterizedGrammar.ml[195,8080+49]..src/CheckSafeParameterizedGrammar.ml[195,8080+57])
                                                      Texp_apply
                                                      expression (src/CheckSafeParameterizedGrammar.ml[195,8080+49]..src/CheckSafeParameterizedGrammar.ml[195,8080+50])
                                                        Texp_ident "f/978"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/CheckSafeParameterizedGrammar.ml[195,8080+51]..src/CheckSafeParameterizedGrammar.ml[195,8080+57])
                                                            Texp_ident "target/979"
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                      structure_item (src/CheckSafeParameterizedGrammar.ml[196,8139+2]..src/CheckSafeParameterizedGrammar.ml[196,8139+35])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[196,8139+6]..src/CheckSafeParameterizedGrammar.ml[196,8139+10])
                              Tpat_var "iter/981"
                            expression (src/CheckSafeParameterizedGrammar.ml[196,8139+11]..src/CheckSafeParameterizedGrammar.ml[196,8139+35]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/CheckSafeParameterizedGrammar.ml[196,8139+11]..src/CheckSafeParameterizedGrammar.ml[196,8139+12])
                                    Tpat_var "f/983"
                                  expression (src/CheckSafeParameterizedGrammar.ml[196,8139+15]..src/CheckSafeParameterizedGrammar.ml[196,8139+35])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[196,8139+15]..src/CheckSafeParameterizedGrammar.ml[196,8139+25])
                                      Texp_ident "Stdlib!.Array.iter"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[196,8139+26]..src/CheckSafeParameterizedGrammar.ml[196,8139+27])
                                          Texp_ident "f/983"
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[196,8139+28]..src/CheckSafeParameterizedGrammar.ml[196,8139+35])
                                          Texp_ident "formals/581"
                                    ]
                              ]
                        ]
                    ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[203,8288+0]..src/CheckSafeParameterizedGrammar.ml[210,8530+5])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[203,8288+4]..src/CheckSafeParameterizedGrammar.ml[203,8288+6])
                      Tpat_construct "()"
                      []
                      None
                    expression (src/CheckSafeParameterizedGrammar.ml[204,8297+2]..src/CheckSafeParameterizedGrammar.ml[210,8530+5])
                      Texp_ifthenelse
                      expression (src/CheckSafeParameterizedGrammar.ml[204,8297+5]..src/CheckSafeParameterizedGrammar.ml[204,8297+10])
                        Texp_ident "debug/468"
                      expression (src/CheckSafeParameterizedGrammar.ml[205,8313+4]..src/CheckSafeParameterizedGrammar.ml[210,8530+5])
                        Texp_apply
                        expression (src/CheckSafeParameterizedGrammar.ml[205,8313+4]..src/CheckSafeParameterizedGrammar.ml[205,8313+10])
                          Texp_ident "G/984.iter"
                        [
                          <arg>
                            Nolabel
                            expression (src/CheckSafeParameterizedGrammar.ml[205,8313+11]..src/CheckSafeParameterizedGrammar.ml[210,8530+5])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+16]..src/CheckSafeParameterizedGrammar.ml[205,8313+22])
                                    Tpat_tuple
                                    [
                                      pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+17]..src/CheckSafeParameterizedGrammar.ml[205,8313+18])
                                        Tpat_var "x/985"
                                      pattern (src/CheckSafeParameterizedGrammar.ml[205,8313+20]..src/CheckSafeParameterizedGrammar.ml[205,8313+21])
                                        Tpat_var "i/986"
                                    ]
                                  expression (src/CheckSafeParameterizedGrammar.ml[206,8339+6]..src/CheckSafeParameterizedGrammar.ml[209,8515+14])
                                    Texp_apply
                                    expression (src/CheckSafeParameterizedGrammar.ml[206,8339+6]..src/CheckSafeParameterizedGrammar.ml[206,8339+16])
                                      Texp_ident "successors/968"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[206,8339+17]..src/CheckSafeParameterizedGrammar.ml[209,8515+7])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+22]..src/CheckSafeParameterizedGrammar.ml[206,8339+26])
                                                Tpat_var "edge/987"
                                              expression (src/CheckSafeParameterizedGrammar.ml[206,8339+27]..src/CheckSafeParameterizedGrammar.ml[208,8456+58]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+27]..src/CheckSafeParameterizedGrammar.ml[206,8339+33])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+28]..src/CheckSafeParameterizedGrammar.ml[206,8339+29])
                                                          Tpat_var "y/988"
                                                        pattern (src/CheckSafeParameterizedGrammar.ml[206,8339+31]..src/CheckSafeParameterizedGrammar.ml[206,8339+32])
                                                          Tpat_var "j/989"
                                                      ]
                                                    expression (src/CheckSafeParameterizedGrammar.ml[207,8376+8]..src/CheckSafeParameterizedGrammar.ml[208,8456+58])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+12]..src/CheckSafeParameterizedGrammar.ml[207,8376+16])
                                                            Tpat_var "kind/990"
                                                          expression (src/CheckSafeParameterizedGrammar.ml[207,8376+19]..src/CheckSafeParameterizedGrammar.ml[207,8376+76])
                                                            Texp_match
                                                            expression (src/CheckSafeParameterizedGrammar.ml[207,8376+25]..src/CheckSafeParameterizedGrammar.ml[207,8376+29])
                                                              Texp_ident "edge/987"
                                                            [
                                                              <case>
                                                                pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+35]..src/CheckSafeParameterizedGrammar.ml[207,8376+39])
                                                                  Tpat_value
                                                                  pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+35]..src/CheckSafeParameterizedGrammar.ml[207,8376+39])
                                                                    Tpat_construct "Safe"
                                                                    []
                                                                    None
                                                                expression (src/CheckSafeParameterizedGrammar.ml[207,8376+43]..src/CheckSafeParameterizedGrammar.ml[207,8376+49])
                                                                  Texp_constant Const_string("safe",(src/CheckSafeParameterizedGrammar.ml[207,8376+44]..src/CheckSafeParameterizedGrammar.ml[207,8376+48]),None)
                                                              <case>
                                                                pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+52]..src/CheckSafeParameterizedGrammar.ml[207,8376+61])
                                                                  Tpat_value
                                                                  pattern (src/CheckSafeParameterizedGrammar.ml[207,8376+52]..src/CheckSafeParameterizedGrammar.ml[207,8376+61])
                                                                    Tpat_construct "Dangerous"
                                                                    []
                                                                    None
                                                                expression (src/CheckSafeParameterizedGrammar.ml[207,8376+65]..src/CheckSafeParameterizedGrammar.ml[207,8376+76])
                                                                  Texp_constant Const_string("dangerous",(src/CheckSafeParameterizedGrammar.ml[207,8376+66]..src/CheckSafeParameterizedGrammar.ml[207,8376+75]),None)
                                                            ]
                                                      ]
                                                      expression (src/CheckSafeParameterizedGrammar.ml[208,8456+8]..src/CheckSafeParameterizedGrammar.ml[208,8456+58])
                                                        Texp_apply
                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+8]..src/CheckSafeParameterizedGrammar.ml[208,8456+22])
                                                          Texp_ident "Stdlib!.Printf.eprintf"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45])
                                                              Texp_construct "CamlinternalFormatBasics.Format"
                                                              [
                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                  [
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                      [
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                          Texp_constant Const_char 2f
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.Int"
                                                                          [
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                              []
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                              []
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                              []
                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                              [
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                  Texp_constant Const_string(" ->(",(src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost,None)
                                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                                  [
                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                      []
                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                      [
                                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                          Texp_constant Const_string(") ",(src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost,None)
                                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                                                          [
                                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                              []
                                                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                              Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                              [
                                                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                  Texp_constant Const_char 2f
                                                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                  Texp_construct "CamlinternalFormatBasics.Int"
                                                                                                  [
                                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                      Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                                                      []
                                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                                      []
                                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                      Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                                                      []
                                                                                                    expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                      Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                                      [
                                                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                          Texp_constant Const_char 0a
                                                                                                        expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                                          []
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                expression (src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost
                                                                  Texp_constant Const_string("%s/%d ->(%s) %s/%d\n",(src/CheckSafeParameterizedGrammar.ml[208,8456+23]..src/CheckSafeParameterizedGrammar.ml[208,8456+45]) ghost,None)
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+46]..src/CheckSafeParameterizedGrammar.ml[208,8456+47])
                                                              Texp_ident "x/985"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+48]..src/CheckSafeParameterizedGrammar.ml[208,8456+49])
                                                              Texp_ident "i/986"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+50]..src/CheckSafeParameterizedGrammar.ml[208,8456+54])
                                                              Texp_ident "kind/990"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+55]..src/CheckSafeParameterizedGrammar.ml[208,8456+56])
                                                              Texp_ident "y/988"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/CheckSafeParameterizedGrammar.ml[208,8456+57]..src/CheckSafeParameterizedGrammar.ml[208,8456+58])
                                                              Texp_ident "j/989"
                                                        ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/CheckSafeParameterizedGrammar.ml[209,8515+8]..src/CheckSafeParameterizedGrammar.ml[209,8515+14])
                                          Texp_tuple
                                          [
                                            expression (src/CheckSafeParameterizedGrammar.ml[209,8515+9]..src/CheckSafeParameterizedGrammar.ml[209,8515+10])
                                              Texp_ident "x/985"
                                            expression (src/CheckSafeParameterizedGrammar.ml[209,8515+12]..src/CheckSafeParameterizedGrammar.ml[209,8515+13])
                                              Texp_ident "i/986"
                                          ]
                                    ]
                              ]
                        ]
                      None
                ]
              structure_item (src/CheckSafeParameterizedGrammar.ml[217,8731+0]..src/CheckSafeParameterizedGrammar.ml[217,8731+24])
                Tstr_module
                T/1047
                  module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..src/CheckSafeParameterizedGrammar.ml[217,8731+24])
                    Tmod_apply
                    module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..src/CheckSafeParameterizedGrammar.ml[217,8731+21])
                      module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+11]..src/CheckSafeParameterizedGrammar.ml[217,8731+21])
                        Tmod_ident "Dune__exe!.Tarjan.Run"
                    module_expr (src/CheckSafeParameterizedGrammar.ml[217,8731+22]..src/CheckSafeParameterizedGrammar.ml[217,8731+23])
                      Tmod_ident "G/984"
              structure_item (src/CheckSafeParameterizedGrammar.ml[233,9555+0]..src/CheckSafeParameterizedGrammar.ml[249,10093+3])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (src/CheckSafeParameterizedGrammar.ml[233,9555+4]..src/CheckSafeParameterizedGrammar.ml[233,9555+6])
                      Tpat_construct "()"
                      []
                      None
                    expression (src/CheckSafeParameterizedGrammar.ml[234,9564+2]..src/CheckSafeParameterizedGrammar.ml[249,10093+3])
                      Texp_apply
                      expression (src/CheckSafeParameterizedGrammar.ml[234,9564+2]..src/CheckSafeParameterizedGrammar.ml[234,9564+8])
                        Texp_ident "G/984.iter"
                      [
                        <arg>
                          Nolabel
                          expression (src/CheckSafeParameterizedGrammar.ml[234,9564+9]..src/CheckSafeParameterizedGrammar.ml[249,10093+3])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/CheckSafeParameterizedGrammar.ml[234,9564+14]..src/CheckSafeParameterizedGrammar.ml[234,9564+20])
                                  Tpat_var "source/1048"
                                expression (src/CheckSafeParameterizedGrammar.ml[235,9588+4]..src/CheckSafeParameterizedGrammar.ml[248,10080+12])
                                  Texp_apply
                                  expression (src/CheckSafeParameterizedGrammar.ml[235,9588+4]..src/CheckSafeParameterizedGrammar.ml[235,9588+14])
                                    Texp_ident "successors/968"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[235,9588+15]..src/CheckSafeParameterizedGrammar.ml[248,10080+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/CheckSafeParameterizedGrammar.ml[235,9588+20]..src/CheckSafeParameterizedGrammar.ml[235,9588+24])
                                              Tpat_var "edge/1049"
                                            expression (src/CheckSafeParameterizedGrammar.ml[235,9588+25]..src/CheckSafeParameterizedGrammar.ml[246,10043+35]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/CheckSafeParameterizedGrammar.ml[235,9588+25]..src/CheckSafeParameterizedGrammar.ml[235,9588+31])
                                                    Tpat_var "target/1050"
                                                  expression (src/CheckSafeParameterizedGrammar.ml[236,9623+6]..src/CheckSafeParameterizedGrammar.ml[246,10043+35])
                                                    Texp_match
                                                    expression (src/CheckSafeParameterizedGrammar.ml[236,9623+12]..src/CheckSafeParameterizedGrammar.ml[236,9623+16])
                                                      Texp_ident "edge/1049"
                                                    [
                                                      <case>
                                                        pattern (src/CheckSafeParameterizedGrammar.ml[237,9645+8]..src/CheckSafeParameterizedGrammar.ml[237,9645+12])
                                                          Tpat_value
                                                          pattern (src/CheckSafeParameterizedGrammar.ml[237,9645+8]..src/CheckSafeParameterizedGrammar.ml[237,9645+12])
                                                            Tpat_construct "Safe"
                                                            []
                                                            None
                                                        expression (src/CheckSafeParameterizedGrammar.ml[238,9661+10]..src/CheckSafeParameterizedGrammar.ml[238,9661+12])
                                                          Texp_construct "()"
                                                          []
                                                      <case>
                                                        pattern (src/CheckSafeParameterizedGrammar.ml[239,9674+8]..src/CheckSafeParameterizedGrammar.ml[239,9674+17])
                                                          Tpat_value
                                                          pattern (src/CheckSafeParameterizedGrammar.ml[239,9674+8]..src/CheckSafeParameterizedGrammar.ml[239,9674+17])
                                                            Tpat_construct "Dangerous"
                                                            []
                                                            None
                                                        expression (src/CheckSafeParameterizedGrammar.ml[240,9695+10]..src/CheckSafeParameterizedGrammar.ml[246,10043+35])
                                                          Texp_ifthenelse
                                                          expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..src/CheckSafeParameterizedGrammar.ml[240,9695+62])
                                                            Texp_apply
                                                            expression (src/CheckSafeParameterizedGrammar.ml[240,9695+37]..src/CheckSafeParameterizedGrammar.ml[240,9695+38])
                                                              Texp_ident "Stdlib!.="
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..src/CheckSafeParameterizedGrammar.ml[240,9695+36])
                                                                  Texp_apply
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[240,9695+13]..src/CheckSafeParameterizedGrammar.ml[240,9695+29])
                                                                    Texp_ident "T/1047.representative"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[240,9695+30]..src/CheckSafeParameterizedGrammar.ml[240,9695+36])
                                                                        Texp_ident "source/1048"
                                                                  ]
                                                              <arg>
                                                                Nolabel
                                                                expression (src/CheckSafeParameterizedGrammar.ml[240,9695+39]..src/CheckSafeParameterizedGrammar.ml[240,9695+62])
                                                                  Texp_apply
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[240,9695+39]..src/CheckSafeParameterizedGrammar.ml[240,9695+55])
                                                                    Texp_ident "T/1047.representative"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[240,9695+56]..src/CheckSafeParameterizedGrammar.ml[240,9695+62])
                                                                        Texp_ident "target/1050"
                                                                  ]
                                                            ]
                                                          expression (src/CheckSafeParameterizedGrammar.ml[241,9763+12]..src/CheckSafeParameterizedGrammar.ml[246,10043+35])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+16]..src/CheckSafeParameterizedGrammar.ml[241,9763+23])
                                                                  Tpat_tuple
                                                                  [
                                                                    pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+17]..src/CheckSafeParameterizedGrammar.ml[241,9763+19])
                                                                      Tpat_var "nt/1051"
                                                                    pattern (src/CheckSafeParameterizedGrammar.ml[241,9763+21]..src/CheckSafeParameterizedGrammar.ml[241,9763+22])
                                                                      Tpat_var "i/1052"
                                                                  ]
                                                                expression (src/CheckSafeParameterizedGrammar.ml[241,9763+26]..src/CheckSafeParameterizedGrammar.ml[241,9763+32])
                                                                  Texp_ident "source/1048"
                                                            ]
                                                            expression (src/CheckSafeParameterizedGrammar.ml[242,9799+12]..src/CheckSafeParameterizedGrammar.ml[246,10043+35])
                                                              Texp_apply
                                                              expression (src/CheckSafeParameterizedGrammar.ml[242,9799+12]..src/CheckSafeParameterizedGrammar.ml[242,9799+23])
                                                                Texp_ident "Dune__exe!.Error.error"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[242,9799+24]..src/CheckSafeParameterizedGrammar.ml[242,9799+26])
                                                                    Texp_construct "[]"
                                                                    []
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70])
                                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                                    [
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                        [
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                            Texp_constant Const_string("the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe ",(src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost,None)
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                                            [
                                                                              expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                []
                                                                              expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                [
                                                                                  expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                    Texp_constant Const_string(" formal parameter of \"",(src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost,None)
                                                                                  expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                                    [
                                                                                      expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                        []
                                                                                      expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                        [
                                                                                          expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                            Texp_constant Const_string("\" grows without bound.",(src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost,None)
                                                                                          expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                            []
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                      expression (src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost
                                                                        Texp_constant Const_string("the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe %s formal parameter of \"%s\" grows without bound.",(src/CheckSafeParameterizedGrammar.ml[243,9826+14]..src/CheckSafeParameterizedGrammar.ml[245,9972+70]) ghost,None)
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[246,10043+14]..src/CheckSafeParameterizedGrammar.ml[246,10043+32])
                                                                    Texp_apply
                                                                    expression (src/CheckSafeParameterizedGrammar.ml[246,10043+15]..src/CheckSafeParameterizedGrammar.ml[246,10043+23])
                                                                      Texp_ident "Dune__exe!.Misc.nth"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/CheckSafeParameterizedGrammar.ml[246,10043+24]..src/CheckSafeParameterizedGrammar.ml[246,10043+31])
                                                                          Texp_apply
                                                                          expression (src/CheckSafeParameterizedGrammar.ml[246,10043+27]..src/CheckSafeParameterizedGrammar.ml[246,10043+28])
                                                                            Texp_ident "Stdlib!.+"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/CheckSafeParameterizedGrammar.ml[246,10043+25]..src/CheckSafeParameterizedGrammar.ml[246,10043+26])
                                                                                Texp_ident "i/1052"
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/CheckSafeParameterizedGrammar.ml[246,10043+29]..src/CheckSafeParameterizedGrammar.ml[246,10043+30])
                                                                                Texp_constant Const_int 1
                                                                          ]
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/CheckSafeParameterizedGrammar.ml[246,10043+33]..src/CheckSafeParameterizedGrammar.ml[246,10043+35])
                                                                    Texp_ident "nt/1051"
                                                              ]
                                                          None
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/CheckSafeParameterizedGrammar.ml[248,10080+6]..src/CheckSafeParameterizedGrammar.ml[248,10080+12])
                                        Texp_ident "source/1048"
                                  ]
                            ]
                      ]
                ]
            ]
  structure_item (src/CheckSafeParameterizedGrammar.ml[257,10257+0]..src/CheckSafeParameterizedGrammar.ml[259,10317+4])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/CheckSafeParameterizedGrammar.ml[257,10257+4]..src/CheckSafeParameterizedGrammar.ml[257,10257+9])
          Tpat_var "check/1069"
        expression (src/CheckSafeParameterizedGrammar.ml[257,10257+10]..src/CheckSafeParameterizedGrammar.ml[259,10317+4]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/CheckSafeParameterizedGrammar.ml[257,10257+10]..src/CheckSafeParameterizedGrammar.ml[257,10257+11])
                Tpat_var "g/1071"
              expression (src/CheckSafeParameterizedGrammar.ml[258,10271+2]..src/CheckSafeParameterizedGrammar.ml[259,10317+4])
                Texp_letmodule "T/1104"
                module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+17]..src/CheckSafeParameterizedGrammar.ml[258,10271+42])
                  Tmod_apply
                  module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+17]..src/CheckSafeParameterizedGrammar.ml[258,10271+20])
                    Tmod_ident "Run/1068"
                  module_expr (src/CheckSafeParameterizedGrammar.ml[258,10271+21]..src/CheckSafeParameterizedGrammar.ml[258,10271+41])
                    Tmod_structure
                    [
                      structure_item (src/CheckSafeParameterizedGrammar.ml[258,10271+28]..src/CheckSafeParameterizedGrammar.ml[258,10271+37])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (src/CheckSafeParameterizedGrammar.ml[258,10271+32]..src/CheckSafeParameterizedGrammar.ml[258,10271+33])
                              Tpat_var "g/1072"
                            expression (src/CheckSafeParameterizedGrammar.ml[258,10271+36]..src/CheckSafeParameterizedGrammar.ml[258,10271+37])
                              Texp_ident "g/1071"
                        ]
                    ]
                expression (src/CheckSafeParameterizedGrammar.ml[259,10317+2]..src/CheckSafeParameterizedGrammar.ml[259,10317+4])
                  Texp_construct "()"
                  []
          ]
    ]
]

{<Dune__exe__CheckSafeParameterizedGrammar>
 "check"[value] -> <Dune__exe__CheckSafeParameterizedGrammar.76>;
 }

(seq
  (let (value/397 = (field_imm 0 (global Dune__exe__Positions!)))
    (setfield_ptr(root-init) 1
      (global Dune__exe__CheckSafeParameterizedGrammar!) value/397))
  (let (debug/468 =[int] 0)
    (setfield_ptr(root-init) 2
      (global Dune__exe__CheckSafeParameterizedGrammar!) debug/468))
  (let
    (Run/1068 =
       (function G/4161 is_a_functor
         (let
           (G/470 =a G/4161
            formals/472 =
              (function (param/4126, param/4127)
                (let
                  (rule/475 =a param/4127
                   nt/474 =a param/4126
                   arity/476 =[int]
                     (apply (field_imm 0 (global Stdlib__List!))
                       (field_imm 5 rule/475)))
                  (apply (field_imm 16 (global Dune__exe__Misc!)) arity/476
                    (function i/579[int] (makeblock 0 (*,int) nt/474 i/579)))))
            formals/581 =
              (apply (field_imm 9 (global Stdlib__Array!))
                (apply (field_imm 13 (global Stdlib__List!))
                  (apply (field_imm 19 (global Stdlib__List!)) formals/472
                    (apply (field_imm 8 (global Dune__exe__StringMap!))
                      (field_imm 9 (field_imm 0 G/470))))))
            info/761 =
              (function (param/4128, param/4129[int])
                (let
                  (i/764 =a param/4129
                   nt/763 =a param/4128
                   rule/765 =
                     (try
                       (apply (field_imm 15 (global Dune__exe__StringMap!))
                         nt/763 (field_imm 9 (field_imm 0 G/470)))
                      with exn/4133
                       (catch
                         (if (== exn/4133 (field_imm 7 (global Stdlib!)))
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0:
                                "src/CheckSafeParameterizedGrammar.ml" 60 63]))
                           (exit 2))
                        with (2) (reraise exn/4133)))
                   x/766 =
                     (try
                       (apply (field_imm 7 (global Stdlib__List!))
                         (field_imm 5 rule/765) i/764)
                      with exn/4130
                       (catch
                         (let (tag/4132 =a (field_imm 0 exn/4130))
                           (if (== tag/4132 (field_imm 6 (global Stdlib!)))
                             (let (*match*/4131 =a (field_imm 1 exn/4130))
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0:
                                    "src/CheckSafeParameterizedGrammar.ml" 61
                                    63])))
                             (exit 1)))
                        with (1) (reraise exn/4130))))
                  (makeblock 0 rule/765 x/766)))
            used_in_producer/768 =
              (function x/770 param/787 : int
                (let
                  (*match*/4135 =a (field_imm 2 param/787)
                   param/771 =a (field_imm 1 param/787)
                   *match*/4134 =a (field_imm 0 param/787))
                  (apply (field_imm 6 (global Dune__exe__Parameters!)) x/770
                    param/771)))
            used_in_branch/788 =
              (function x/790 branch/791 : int
                (apply (field_imm 33 (global Stdlib__List!))
                  (apply used_in_producer/768 x/790)
                  (field_imm 1 branch/791)))
            used/792 =
              (function formal/794 : int
                (let
                  (*match*/4139 = (apply info/761 formal/794)
                   x/796 =a (field_imm 1 *match*/4139)
                   rule/795 =a (field_imm 0 *match*/4139))
                  (apply (field_imm 33 (global Stdlib__List!))
                    (apply used_in_branch/788 x/796) (field_imm 6 rule/795))))
            used/797 =
              (let
                (M/909 =
                   (apply
                     (let
                       (let/4140 =
                          (field_imm 3 (global Vendored_fix__Memoize!)))
                       (field_imm 3 (global Vendored_fix__Memoize!)))
                     (makeblock 0)))
                (apply (field_imm 0 M/909) used/792)))
           (letrec
             (successors_parameter/913
                (function f/914 x/915 param/916 : int
                  (switch* param/916
                   case tag 0:
                    (let (*match*/4141 =a (field_imm 0 param/916)) 0)
                   case tag 1:
                    (let
                      (params/918 =a (field_imm 1 param/916)
                       sym/917 =a (field_imm 0 param/916)
                       nt/919 =
                         (apply
                           (field_imm 1
                             (global Dune__exe__CheckSafeParameterizedGrammar!))
                           sym/917))
                      (apply (field_imm 18 (global Stdlib__List!))
                        (function i/955[int] param/956 : int
                          (if
                            (apply used/797
                              (makeblock 0 (*,int) nt/919 i/955))
                            (seq
                              (apply successors_parameter/913 f/914 x/915
                                param/956)
                              (if
                                (apply
                                  (field_imm 7
                                    (global Dune__exe__Parameters!))
                                  x/915 param/956)
                                (apply f/914 0
                                  (makeblock 0 (*,int) nt/919 i/955))
                                (if
                                  (apply
                                    (field_imm 8
                                      (global Dune__exe__Parameters!))
                                    x/915 param/956)
                                  (apply f/914 1
                                    (makeblock 0 (*,int) nt/919 i/955))
                                  0)))
                            0))
                        params/918))
                   case tag 2:
                    (let (*match*/4142 =a (field_imm 0 param/916))
                      (raise
                        (makeblock 0 (global Assert_failure/28!)
                          [0: "src/CheckSafeParameterizedGrammar.ml" 175 6]))))))
             (let
               (successors_producer/957 =
                  (function f/959 x/960 param/962 : int
                    (let
                      (*match*/4144 =a (field_imm 2 param/962)
                       param/961 =a (field_imm 1 param/962)
                       *match*/4143 =a (field_imm 0 param/962))
                      (apply successors_parameter/913 f/959 x/960 param/961)))
                successors_branch/963 =
                  (function f/965 x/966 branch/967 : int
                    (apply (field_imm 17 (global Stdlib__List!))
                      (apply successors_producer/957 f/965 x/966)
                      (field_imm 1 branch/967)))
                successors/968 =
                  (function f/970 formal/971 : int
                    (let
                      (*match*/4148 = (apply info/761 formal/971)
                       x/973 =a (field_imm 1 *match*/4148)
                       rule/972 =a (field_imm 0 *match*/4148))
                      (apply (field_imm 17 (global Stdlib__List!))
                        (apply successors_branch/963 f/970 x/973)
                        (field_imm 6 rule/972))))
                G/984 =
                  (let
                    (n/975 =[int] (array.length[addr] formals/581)
                     index/976 =
                       (apply (field_imm 7 (global Dune__exe__Misc!))
                         formals/581)
                     successors/977 =
                       (function f/978
                         (apply successors/968
                           (function param/980[int] target/979 : int
                             (apply f/978 target/979))))
                     iter/981 =
                       (function f/983 : int
                         (apply (field_imm 10 (global Stdlib__Array!)) f/983
                           formals/581)))
                    (makeblock 0 n/975 index/976 successors/977 iter/981))
                *match*/4158 =
                  (if
                    (field_imm 2
                      (global Dune__exe__CheckSafeParameterizedGrammar!))
                    (apply (field_imm 3 G/984)
                      (function (param/4149, param/4150[int]) : int
                        (let (i/986 =a param/4150 x/985 =a param/4149)
                          (apply successors/968
                            (function edge/987[int] param/1027 : int
                              (let
                                (j/989 =a (field_imm 1 param/1027)
                                 y/988 =a (field_imm 0 param/1027)
                                 kind/990 = (if edge/987 "dangerous" "safe"))
                                (apply (field_imm 2 (global Stdlib__Printf!))
                                  [0:
                                   [2:
                                    0
                                    [12:
                                     '/'
                                     [4:
                                      0 0 0
                                      [11:
                                       " ->("
                                       [2:
                                        0
                                        [11:
                                         ") "
                                         [2:
                                          0 [12: '/' [4: 0 0 0 [12: '\n' 0]]]]]]]]]]
                                   "%s/%d ->(%s) %s/%d\n"]
                                  x/985 i/986 kind/990 y/988 j/989)))
                            (makeblock 0 (*,int) x/985 i/986)))))
                    0)
                T/1047 =
                  (apply
                    (let
                      (let/4151 = (field_imm 0 (global Dune__exe__Tarjan!)))
                      (field_imm 0 (global Dune__exe__Tarjan!)))
                    G/984)
                *match*/4155 =
                  (apply (field_imm 3 G/984)
                    (function source/1048 : int
                      (apply successors/968
                        (function edge/1049[int] target/1050 : int
                          (if edge/1049
                            (if
                              (caml_equal
                                (apply (field_imm 0 T/1047) source/1048)
                                (apply (field_imm 0 T/1047) target/1050))
                              (let
                                (i/1052 =a (field_imm 1 source/1048)
                                 nt/1051 =a (field_imm 0 source/1048))
                                (apply
                                  (field_imm 5 (global Dune__exe__Error!)) 0
                                  [0:
                                   [11:
                                    "the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe "
                                    [2:
                                     0
                                     [11:
                                      " formal parameter of \""
                                      [2:
                                       0 [11: "\" grows without bound." 0]]]]]
                                   "the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe %s formal parameter of \"%s\" grows without bound."]
                                  (apply
                                    (field_imm 32 (global Dune__exe__Misc!))
                                    (+ i/1052 1))
                                  nt/1051))
                              0)
                            0))
                        source/1048))))
               (makeblock 0 formals/581 info/761 used_in_producer/768
                 used_in_branch/788 used/797 successors_parameter/913
                 successors_producer/957 successors_branch/963 successors/968
                 G/984 T/1047))))))
    (seq
      (setfield_ptr(root-init) 3
        (global Dune__exe__CheckSafeParameterizedGrammar!) Run/1068)
      (let
        (check/1069 =
           (function g/1071 : int
             (let
               (T/1104 =
                  (apply
                    (field_imm 3
                      (global Dune__exe__CheckSafeParameterizedGrammar!))
                    (let (g/1072 = g/1071) (makeblock 0 g/1072))))
               0)))
        (setfield_ptr(root-init) 0
          (global Dune__exe__CheckSafeParameterizedGrammar!) check/1069))
      0)))
(seq
  (let (value/397 = (field_imm 0 (global Dune__exe__Positions!)))
    (setfield_ptr(root-init) 1
      (global Dune__exe__CheckSafeParameterizedGrammar!) value/397))
  (let (debug/468 =[int] 0)
    (setfield_ptr(root-init) 2
      (global Dune__exe__CheckSafeParameterizedGrammar!) debug/468))
  (let
    (Run/1068 =
       (function G/4161 is_a_functor
         (let
           (formals/472 =
              (function (param/4126, param/4127)
                (let
                  (arity/476 =[int]
                     (apply (field_imm 0 (global Stdlib__List!))
                       (field_imm 5 param/4127)))
                  (apply (field_imm 16 (global Dune__exe__Misc!)) arity/476
                    (function i/579[int]
                      (makeblock 0 (*,int) param/4126 i/579)))))
            formals/581 =
              (apply (field_imm 9 (global Stdlib__Array!))
                (apply (field_imm 13 (global Stdlib__List!))
                  (apply (field_imm 19 (global Stdlib__List!)) formals/472
                    (apply (field_imm 8 (global Dune__exe__StringMap!))
                      (field_imm 9 (field_imm 0 G/4161))))))
            info/761 =
              (function (param/4128, param/4129[int])
                (let
                  (rule/765 =
                     (try
                       (apply (field_imm 15 (global Dune__exe__StringMap!))
                         param/4128 (field_imm 9 (field_imm 0 G/4161)))
                      with exn/4133
                       (if (== exn/4133 (field_imm 7 (global Stdlib!)))
                         (raise
                           (makeblock 0 (global Assert_failure/28!)
                             [0:
                              "src/CheckSafeParameterizedGrammar.ml" 60 63]))
                         (reraise exn/4133)))
                   x/766 =
                     (try
                       (apply (field_imm 7 (global Stdlib__List!))
                         (field_imm 5 rule/765) param/4129)
                      with exn/4130
                       (if
                         (== (field_imm 0 exn/4130)
                           (field_imm 6 (global Stdlib!)))
                         (raise
                           (makeblock 0 (global Assert_failure/28!)
                             [0:
                              "src/CheckSafeParameterizedGrammar.ml" 61 63]))
                         (reraise exn/4130))))
                  (makeblock 0 rule/765 x/766)))
            used_in_producer/768 =
              (function x/770 param/787 : int
                (apply (field_imm 6 (global Dune__exe__Parameters!)) x/770
                  (field_imm 1 param/787)))
            used_in_branch/788 =
              (function x/790 branch/791 : int
                (apply (field_imm 33 (global Stdlib__List!))
                  (apply used_in_producer/768 x/790)
                  (field_imm 1 branch/791)))
            used/792 =
              (function formal/794 : int
                (let (*match*/4139 = (apply info/761 formal/794))
                  (apply (field_imm 33 (global Stdlib__List!))
                    (apply used_in_branch/788 (field_imm 1 *match*/4139))
                    (field_imm 6 (field_imm 0 *match*/4139)))))
            used/797 =
              (let
                (M/909 =
                   (apply
                     (let
                       (let/4140 =
                          (field_imm 3 (global Vendored_fix__Memoize!)))
                       (field_imm 3 (global Vendored_fix__Memoize!)))
                     (makeblock 0)))
                (apply (field_imm 0 M/909) used/792)))
           (letrec
             (successors_parameter/913
                (function f/914 x/915 param/916 : int
                  (switch* param/916
                   case tag 0: 0
                   case tag 1:
                    (let
                      (nt/919 =
                         (apply
                           (field_imm 1
                             (global Dune__exe__CheckSafeParameterizedGrammar!))
                           (field_imm 0 param/916)))
                      (apply (field_imm 18 (global Stdlib__List!))
                        (function i/955[int] param/956 : int
                          (if
                            (apply used/797
                              (makeblock 0 (*,int) nt/919 i/955))
                            (seq
                              (apply successors_parameter/913 f/914 x/915
                                param/956)
                              (if
                                (apply
                                  (field_imm 7
                                    (global Dune__exe__Parameters!))
                                  x/915 param/956)
                                (apply f/914 0
                                  (makeblock 0 (*,int) nt/919 i/955))
                                (if
                                  (apply
                                    (field_imm 8
                                      (global Dune__exe__Parameters!))
                                    x/915 param/956)
                                  (apply f/914 1
                                    (makeblock 0 (*,int) nt/919 i/955))
                                  0)))
                            0))
                        (field_imm 1 param/916)))
                   case tag 2:
                    (raise
                      (makeblock 0 (global Assert_failure/28!)
                        [0: "src/CheckSafeParameterizedGrammar.ml" 175 6])))))
             (let
               (successors_producer/957 =
                  (function f/959 x/960 param/962 : int
                    (apply successors_parameter/913 f/959 x/960
                      (field_imm 1 param/962)))
                successors_branch/963 =
                  (function f/965 x/966 branch/967 : int
                    (apply (field_imm 17 (global Stdlib__List!))
                      (apply successors_producer/957 f/965 x/966)
                      (field_imm 1 branch/967)))
                successors/968 =
                  (function f/970 formal/971 : int
                    (let (*match*/4148 = (apply info/761 formal/971))
                      (apply (field_imm 17 (global Stdlib__List!))
                        (apply successors_branch/963 f/970
                          (field_imm 1 *match*/4148))
                        (field_imm 6 (field_imm 0 *match*/4148)))))
                G/984 =
                  (let
                    (n/975 =[int] (array.length[addr] formals/581)
                     index/976 =
                       (apply (field_imm 7 (global Dune__exe__Misc!))
                         formals/581)
                     successors/977 =
                       (function f/978
                         (apply successors/968
                           (function param/980[int] target/979 : int
                             (apply f/978 target/979))))
                     iter/981 =
                       (function f/983 : int
                         (apply (field_imm 10 (global Stdlib__Array!)) f/983
                           formals/581)))
                    (makeblock 0 n/975 index/976 successors/977 iter/981))
                *match*/4158 =
                  (if
                    (field_imm 2
                      (global Dune__exe__CheckSafeParameterizedGrammar!))
                    (apply (field_imm 3 G/984)
                      (function (param/4149, param/4150[int]) : int
                        (apply successors/968
                          (function edge/987[int] param/1027 : int
                            (let
                              (kind/990 = (if edge/987 "dangerous" "safe"))
                              (apply (field_imm 2 (global Stdlib__Printf!))
                                [0:
                                 [2:
                                  0
                                  [12:
                                   '/'
                                   [4:
                                    0 0 0
                                    [11:
                                     " ->("
                                     [2:
                                      0
                                      [11:
                                       ") "
                                       [2:
                                        0 [12: '/' [4: 0 0 0 [12: '\n' 0]]]]]]]]]]
                                 "%s/%d ->(%s) %s/%d\n"]
                                param/4149 param/4150 kind/990
                                (field_imm 0 param/1027)
                                (field_imm 1 param/1027))))
                          (makeblock 0 (*,int) param/4149 param/4150))))
                    0)
                T/1047 =
                  (apply
                    (let
                      (let/4151 = (field_imm 0 (global Dune__exe__Tarjan!)))
                      (field_imm 0 (global Dune__exe__Tarjan!)))
                    G/984)
                *match*/4155 =
                  (apply (field_imm 3 G/984)
                    (function source/1048 : int
                      (apply successors/968
                        (function edge/1049[int] target/1050 : int
                          (if edge/1049
                            (if
                              (caml_equal
                                (apply (field_imm 0 T/1047) source/1048)
                                (apply (field_imm 0 T/1047) target/1050))
                              (apply (field_imm 5 (global Dune__exe__Error!))
                                0
                                [0:
                                 [11:
                                  "the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe "
                                  [2:
                                   0
                                   [11:
                                    " formal parameter of \""
                                    [2: 0 [11: "\" grows without bound." 0]]]]]
                                 "the parameterized nonterminal symbols in this grammar\ncannot be expanded away: expansion would not terminate.\nThe %s formal parameter of \"%s\" grows without bound."]
                                (apply
                                  (field_imm 32 (global Dune__exe__Misc!))
                                  (+ (field_imm 1 source/1048) 1))
                                (field_imm 0 source/1048))
                              0)
                            0))
                        source/1048))))
               (makeblock 0 formals/581 info/761 used_in_producer/768
                 used_in_branch/788 used/797 successors_parameter/913
                 successors_producer/957 successors_branch/963 successors/968
                 G/984 T/1047))))))
    (seq
      (setfield_ptr(root-init) 3
        (global Dune__exe__CheckSafeParameterizedGrammar!) Run/1068)
      (let
        (check/1069 =
           (function g/1071 : int
             (let
               (T/1104 =
                  (apply
                    (field_imm 3
                      (global Dune__exe__CheckSafeParameterizedGrammar!))
                    (makeblock 0 g/1071)))
               0)))
        (setfield_ptr(root-init) 0
          (global Dune__exe__CheckSafeParameterizedGrammar!) check/1069))
      0)))

[
  structure_item (src/codePieces.ml[18,1185+0]..[18,1185+7])
    Pstr_open Fresh
    module_expr (src/codePieces.ml[18,1185+5]..[18,1185+7])
      Pmod_ident "IL" (src/codePieces.ml[18,1185+5]..[18,1185+7])
  structure_item (src/codePieces.ml[19,1193+0]..[19,1193+13])
    Pstr_open Fresh
    module_expr (src/codePieces.ml[19,1193+5]..[19,1193+13])
      Pmod_ident "CodeBits" (src/codePieces.ml[19,1193+5]..[19,1193+13])
  structure_item (src/codePieces.ml[20,1207+0]..[20,1207+12])
    Pstr_open Fresh
    module_expr (src/codePieces.ml[20,1207+5]..[20,1207+12])
      Pmod_ident "Grammar" (src/codePieces.ml[20,1207+5]..[20,1207+12])
  structure_item (src/codePieces.ml[28,1389+0]..[29,1404+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[28,1389+4]..[28,1389+9])
          Ppat_var "ntvar" (src/codePieces.ml[28,1389+4]..[28,1389+9])
        expression (src/codePieces.ml[28,1389+10]..[29,1404+41]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[28,1389+10]..[28,1389+12])
            Ppat_var "nt" (src/codePieces.ml[28,1389+10]..[28,1389+12])
          expression (src/codePieces.ml[29,1404+2]..[29,1404+41])
            Pexp_apply
            expression (src/codePieces.ml[29,1404+2]..[29,1404+13])
              Pexp_ident "Infer.ntvar" (src/codePieces.ml[29,1404+2]..[29,1404+13])
            [
              <arg>
              Nolabel
                expression (src/codePieces.ml[29,1404+14]..[29,1404+41])
                  Pexp_apply
                  expression (src/codePieces.ml[29,1404+15]..[29,1404+32])
                    Pexp_ident "Nonterminal.print" (src/codePieces.ml[29,1404+15]..[29,1404+32])
                  [
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[29,1404+33]..[29,1404+37])
                        Pexp_construct "true" (src/codePieces.ml[29,1404+33]..[29,1404+37])
                        None
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[29,1404+38]..[29,1404+40])
                        Pexp_ident "nt" (src/codePieces.ml[29,1404+38]..[29,1404+40])
                  ]
            ]
    ]
  structure_item (src/codePieces.ml[33,1496+0]..[34,1507+6])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[33,1496+4]..[33,1496+8])
          Ppat_var "semv" (src/codePieces.ml[33,1496+4]..[33,1496+8])
        expression (src/codePieces.ml[34,1507+2]..[34,1507+6])
          Pexp_constant PConst_string("_v",(src/codePieces.ml[34,1507+3]..[34,1507+5]),None)
    ]
  structure_item (src/codePieces.ml[38,1555+0]..[39,1567+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[38,1555+4]..[38,1555+9])
          Ppat_var "stack" (src/codePieces.ml[38,1555+4]..[38,1555+9])
        expression (src/codePieces.ml[39,1567+2]..[39,1567+16])
          Pexp_apply
          expression (src/codePieces.ml[39,1567+2]..[39,1567+8])
            Pexp_ident "prefix" (src/codePieces.ml[39,1567+2]..[39,1567+8])
          [
            <arg>
            Nolabel
              expression (src/codePieces.ml[39,1567+9]..[39,1567+16])
                Pexp_constant PConst_string("stack",(src/codePieces.ml[39,1567+10]..[39,1567+15]),None)
          ]
    ]
  structure_item (src/codePieces.ml[43,1625+0]..[44,1637+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[43,1625+4]..[43,1625+9])
          Ppat_var "state" (src/codePieces.ml[43,1625+4]..[43,1625+9])
        expression (src/codePieces.ml[44,1637+2]..[44,1637+12])
          Pexp_apply
          expression (src/codePieces.ml[44,1637+2]..[44,1637+8])
            Pexp_ident "prefix" (src/codePieces.ml[44,1637+2]..[44,1637+8])
          [
            <arg>
            Nolabel
              expression (src/codePieces.ml[44,1637+9]..[44,1637+12])
                Pexp_constant PConst_string("s",(src/codePieces.ml[44,1637+10]..[44,1637+11]),None)
          ]
    ]
  structure_item (src/codePieces.ml[48,1691+0]..[49,1703+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[48,1691+4]..[48,1691+9])
          Ppat_var "token" (src/codePieces.ml[48,1691+4]..[48,1691+9])
        expression (src/codePieces.ml[49,1703+2]..[49,1703+8])
          Pexp_constant PConst_string("_tok",(src/codePieces.ml[49,1703+3]..[49,1703+7]),None)
    ]
  structure_item (src/codePieces.ml[59,2086+0]..[60,2103+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[59,2086+4]..[59,2086+14])
          Ppat_var "beforeendp" (src/codePieces.ml[59,2086+4]..[59,2086+14])
        expression (src/codePieces.ml[60,2103+2]..[60,2103+49])
          Pexp_open Fresh
          module_expr (src/codePieces.ml[60,2103+2]..[60,2103+9])
            Pmod_ident "Keyword" (src/codePieces.ml[60,2103+2]..[60,2103+9])
          expression (src/codePieces.ml[60,2103+11]..[60,2103+48])
            Pexp_apply
            expression (src/codePieces.ml[60,2103+11]..[60,2103+17])
              Pexp_ident "posvar" (src/codePieces.ml[60,2103+11]..[60,2103+17])
            [
              <arg>
              Nolabel
                expression (src/codePieces.ml[60,2103+18]..[60,2103+24])
                  Pexp_construct "Before" (src/codePieces.ml[60,2103+18]..[60,2103+24])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[60,2103+25]..[60,2103+33])
                  Pexp_construct "WhereEnd" (src/codePieces.ml[60,2103+25]..[60,2103+33])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[60,2103+34]..[60,2103+48])
                  Pexp_construct "FlavorPosition" (src/codePieces.ml[60,2103+34]..[60,2103+48])
                  None
            ]
    ]
  structure_item (src/codePieces.ml[63,2178+0]..[64,2191+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[63,2178+4]..[63,2178+10])
          Ppat_var "startp" (src/codePieces.ml[63,2178+4]..[63,2178+10])
        expression (src/codePieces.ml[64,2191+2]..[64,2191+49])
          Pexp_open Fresh
          module_expr (src/codePieces.ml[64,2191+2]..[64,2191+9])
            Pmod_ident "Keyword" (src/codePieces.ml[64,2191+2]..[64,2191+9])
          expression (src/codePieces.ml[64,2191+11]..[64,2191+48])
            Pexp_apply
            expression (src/codePieces.ml[64,2191+11]..[64,2191+17])
              Pexp_ident "posvar" (src/codePieces.ml[64,2191+11]..[64,2191+17])
            [
              <arg>
              Nolabel
                expression (src/codePieces.ml[64,2191+18]..[64,2191+22])
                  Pexp_construct "Left" (src/codePieces.ml[64,2191+18]..[64,2191+22])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[64,2191+23]..[64,2191+33])
                  Pexp_construct "WhereStart" (src/codePieces.ml[64,2191+23]..[64,2191+33])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[64,2191+34]..[64,2191+48])
                  Pexp_construct "FlavorPosition" (src/codePieces.ml[64,2191+34]..[64,2191+48])
                  None
            ]
    ]
  structure_item (src/codePieces.ml[67,2264+0]..[68,2275+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[67,2264+4]..[67,2264+8])
          Ppat_var "endp" (src/codePieces.ml[67,2264+4]..[67,2264+8])
        expression (src/codePieces.ml[68,2275+2]..[68,2275+47])
          Pexp_open Fresh
          module_expr (src/codePieces.ml[68,2275+2]..[68,2275+9])
            Pmod_ident "Keyword" (src/codePieces.ml[68,2275+2]..[68,2275+9])
          expression (src/codePieces.ml[68,2275+11]..[68,2275+46])
            Pexp_apply
            expression (src/codePieces.ml[68,2275+11]..[68,2275+17])
              Pexp_ident "posvar" (src/codePieces.ml[68,2275+11]..[68,2275+17])
            [
              <arg>
              Nolabel
                expression (src/codePieces.ml[68,2275+18]..[68,2275+22])
                  Pexp_construct "Left" (src/codePieces.ml[68,2275+18]..[68,2275+22])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[68,2275+23]..[68,2275+31])
                  Pexp_construct "WhereEnd" (src/codePieces.ml[68,2275+23]..[68,2275+31])
                  None
              <arg>
              Nolabel
                expression (src/codePieces.ml[68,2275+32]..[68,2275+46])
                  Pexp_construct "FlavorPosition" (src/codePieces.ml[68,2275+32]..[68,2275+46])
                  None
            ]
    ]
  structure_item (src/codePieces.ml[71,2344+0]..[72,2365+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[71,2344+4]..[71,2344+12])
          Ppat_var "startpos" (src/codePieces.ml[71,2344+4]..[71,2344+12])
        expression (src/codePieces.ml[71,2344+13]..[72,2365+65]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[71,2344+13]..[71,2344+16])
            Ppat_var "ids" (src/codePieces.ml[71,2344+13]..[71,2344+16])
          expression (src/codePieces.ml[71,2344+17]..[72,2365+65]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/codePieces.ml[71,2344+17]..[71,2344+18])
              Ppat_var "i" (src/codePieces.ml[71,2344+17]..[71,2344+18])
            expression (src/codePieces.ml[72,2365+2]..[72,2365+65])
              Pexp_open Fresh
              module_expr (src/codePieces.ml[72,2365+2]..[72,2365+9])
                Pmod_ident "Keyword" (src/codePieces.ml[72,2365+2]..[72,2365+9])
              expression (src/codePieces.ml[72,2365+11]..[72,2365+64])
                Pexp_apply
                expression (src/codePieces.ml[72,2365+11]..[72,2365+17])
                  Pexp_ident "posvar" (src/codePieces.ml[72,2365+11]..[72,2365+17])
                [
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[72,2365+18]..[72,2365+38])
                      Pexp_construct "RightNamed" (src/codePieces.ml[72,2365+19]..[72,2365+29])
                      Some
                        expression (src/codePieces.ml[72,2365+30]..[72,2365+37])
                          Pexp_apply
                          expression (src/codePieces.ml[72,2365+30]..[72,2365+37]) ghost
                            Pexp_ident "Array.get" (src/codePieces.ml[72,2365+30]..[72,2365+37]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[72,2365+30]..[72,2365+33])
                                Pexp_ident "ids" (src/codePieces.ml[72,2365+30]..[72,2365+33])
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[72,2365+35]..[72,2365+36])
                                Pexp_ident "i" (src/codePieces.ml[72,2365+35]..[72,2365+36])
                          ]
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[72,2365+39]..[72,2365+49])
                      Pexp_construct "WhereStart" (src/codePieces.ml[72,2365+39]..[72,2365+49])
                      None
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[72,2365+50]..[72,2365+64])
                      Pexp_construct "FlavorPosition" (src/codePieces.ml[72,2365+50]..[72,2365+64])
                      None
                ]
    ]
  structure_item (src/codePieces.ml[75,2474+0]..[76,2493+63])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[75,2474+4]..[75,2474+10])
          Ppat_var "endpos" (src/codePieces.ml[75,2474+4]..[75,2474+10])
        expression (src/codePieces.ml[75,2474+11]..[76,2493+63]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[75,2474+11]..[75,2474+14])
            Ppat_var "ids" (src/codePieces.ml[75,2474+11]..[75,2474+14])
          expression (src/codePieces.ml[75,2474+15]..[76,2493+63]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/codePieces.ml[75,2474+15]..[75,2474+16])
              Ppat_var "i" (src/codePieces.ml[75,2474+15]..[75,2474+16])
            expression (src/codePieces.ml[76,2493+2]..[76,2493+63])
              Pexp_open Fresh
              module_expr (src/codePieces.ml[76,2493+2]..[76,2493+9])
                Pmod_ident "Keyword" (src/codePieces.ml[76,2493+2]..[76,2493+9])
              expression (src/codePieces.ml[76,2493+11]..[76,2493+62])
                Pexp_apply
                expression (src/codePieces.ml[76,2493+11]..[76,2493+17])
                  Pexp_ident "posvar" (src/codePieces.ml[76,2493+11]..[76,2493+17])
                [
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[76,2493+18]..[76,2493+38])
                      Pexp_construct "RightNamed" (src/codePieces.ml[76,2493+19]..[76,2493+29])
                      Some
                        expression (src/codePieces.ml[76,2493+30]..[76,2493+37])
                          Pexp_apply
                          expression (src/codePieces.ml[76,2493+30]..[76,2493+37]) ghost
                            Pexp_ident "Array.get" (src/codePieces.ml[76,2493+30]..[76,2493+37]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[76,2493+30]..[76,2493+33])
                                Pexp_ident "ids" (src/codePieces.ml[76,2493+30]..[76,2493+33])
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[76,2493+35]..[76,2493+36])
                                Pexp_ident "i" (src/codePieces.ml[76,2493+35]..[76,2493+36])
                          ]
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[76,2493+39]..[76,2493+47])
                      Pexp_construct "WhereEnd" (src/codePieces.ml[76,2493+39]..[76,2493+47])
                      None
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[76,2493+48]..[76,2493+62])
                      Pexp_construct "FlavorPosition" (src/codePieces.ml[76,2493+48]..[76,2493+62])
                      None
                ]
    ]
  structure_item (src/codePieces.ml[86,2806+0]..[100,3144+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[86,2806+4]..[86,2806+14])
          Ppat_var "semvtypent" (src/codePieces.ml[86,2806+4]..[86,2806+14])
        expression (src/codePieces.ml[86,2806+15]..[100,3144+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[86,2806+15]..[86,2806+17])
            Ppat_var "nt" (src/codePieces.ml[86,2806+15]..[86,2806+17])
          expression (src/codePieces.ml[87,2826+2]..[100,3144+26])
            Pexp_match
            expression (src/codePieces.ml[87,2826+8]..[87,2826+32])
              Pexp_apply
              expression (src/codePieces.ml[87,2826+8]..[87,2826+29])
                Pexp_ident "Nonterminal.ocamltype" (src/codePieces.ml[87,2826+8]..[87,2826+29])
              [
                <arg>
                Nolabel
                  expression (src/codePieces.ml[87,2826+30]..[87,2826+32])
                    Pexp_ident "nt" (src/codePieces.ml[87,2826+30]..[87,2826+32])
              ]
            [
              <case>
                pattern (src/codePieces.ml[88,2864+4]..[88,2864+8])
                  Ppat_construct "None" (src/codePieces.ml[88,2864+4]..[88,2864+8])
                  None
                expression (src/codePieces.ml[94,3071+6]..[94,3071+14])
                  Pexp_apply
                  expression (src/codePieces.ml[94,3071+6]..[94,3071+11])
                    Pexp_ident "ntvar" (src/codePieces.ml[94,3071+6]..[94,3071+11])
                  [
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[94,3071+12]..[94,3071+14])
                        Pexp_ident "nt" (src/codePieces.ml[94,3071+12]..[94,3071+14])
                  ]
              <case>
                pattern (src/codePieces.ml[96,3087+4]..[96,3087+18])
                  Ppat_construct "Some" (src/codePieces.ml[96,3087+4]..[96,3087+8])
                  Some
                    []
                    pattern (src/codePieces.ml[96,3087+9]..[96,3087+18])
                      Ppat_var "ocamltype" (src/codePieces.ml[96,3087+9]..[96,3087+18])
                expression (src/codePieces.ml[100,3144+6]..[100,3144+26])
                  Pexp_construct "TypTextual" (src/codePieces.ml[100,3144+6]..[100,3144+16])
                  Some
                    expression (src/codePieces.ml[100,3144+17]..[100,3144+26])
                      Pexp_ident "ocamltype" (src/codePieces.ml[100,3144+17]..[100,3144+26])
            ]
    ]
  structure_item (src/codePieces.ml[106,3333+0]..[119,3638+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[106,3333+4]..[106,3333+15])
          Ppat_var "semvtypetok" (src/codePieces.ml[106,3333+4]..[106,3333+15])
        expression (src/codePieces.ml[106,3333+16]..[119,3638+30]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[106,3333+16]..[106,3333+19])
            Ppat_var "tok" (src/codePieces.ml[106,3333+16]..[106,3333+19])
          expression (src/codePieces.ml[107,3355+2]..[119,3638+30])
            Pexp_match
            expression (src/codePieces.ml[107,3355+8]..[107,3355+30])
              Pexp_apply
              expression (src/codePieces.ml[107,3355+8]..[107,3355+26])
                Pexp_ident "Terminal.ocamltype" (src/codePieces.ml[107,3355+8]..[107,3355+26])
              [
                <arg>
                Nolabel
                  expression (src/codePieces.ml[107,3355+27]..[107,3355+30])
                    Pexp_ident "tok" (src/codePieces.ml[107,3355+27]..[107,3355+30])
              ]
            [
              <case>
                pattern (src/codePieces.ml[108,3391+4]..[108,3391+8])
                  Ppat_construct "None" (src/codePieces.ml[108,3391+4]..[108,3391+8])
                  None
                expression (src/codePieces.ml[113,3521+6]..[113,3521+57])
                  Pexp_ifthenelse
                  expression (src/codePieces.ml[113,3521+9]..[113,3521+34])
                    Pexp_ident "Settings.represent_values" (src/codePieces.ml[113,3521+9]..[113,3521+34])
                  expression (src/codePieces.ml[113,3521+40]..[113,3521+49])
                    Pexp_construct "::" (src/codePieces.ml[113,3521+42]..[113,3521+49]) ghost
                    Some
                      expression (src/codePieces.ml[113,3521+42]..[113,3521+49]) ghost
                        Pexp_tuple
                        [
                          expression (src/codePieces.ml[113,3521+42]..[113,3521+47])
                            Pexp_ident "tunit" (src/codePieces.ml[113,3521+42]..[113,3521+47])
                          expression (src/codePieces.ml[113,3521+48]..[113,3521+49]) ghost
                            Pexp_construct "[]" (src/codePieces.ml[113,3521+48]..[113,3521+49]) ghost
                            None
                        ]
                  Some
                    expression (src/codePieces.ml[113,3521+55]..[113,3521+57])
                      Pexp_construct "[]" (src/codePieces.ml[113,3521+55]..[113,3521+57])
                      None
              <case>
                pattern (src/codePieces.ml[115,3580+4]..[115,3580+18])
                  Ppat_construct "Some" (src/codePieces.ml[115,3580+4]..[115,3580+8])
                  Some
                    []
                    pattern (src/codePieces.ml[115,3580+9]..[115,3580+18])
                      Ppat_var "ocamltype" (src/codePieces.ml[115,3580+9]..[115,3580+18])
                expression (src/codePieces.ml[119,3638+6]..[119,3638+30])
                  Pexp_construct "::" (src/codePieces.ml[119,3638+8]..[119,3638+30]) ghost
                  Some
                    expression (src/codePieces.ml[119,3638+8]..[119,3638+30]) ghost
                      Pexp_tuple
                      [
                        expression (src/codePieces.ml[119,3638+8]..[119,3638+28])
                          Pexp_construct "TypTextual" (src/codePieces.ml[119,3638+8]..[119,3638+18])
                          Some
                            expression (src/codePieces.ml[119,3638+19]..[119,3638+28])
                              Pexp_ident "ocamltype" (src/codePieces.ml[119,3638+19]..[119,3638+28])
                        expression (src/codePieces.ml[119,3638+29]..[119,3638+30]) ghost
                          Pexp_construct "[]" (src/codePieces.ml[119,3638+29]..[119,3638+30]) ghost
                          None
                      ]
            ]
    ]
  structure_item (src/codePieces.ml[124,3758+0]..[128,3843+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[124,3758+4]..[124,3758+12])
          Ppat_var "semvtype" (src/codePieces.ml[124,3758+4]..[124,3758+12])
        expression (src/codePieces.ml[124,3758+15]..[128,3843+23])
          Pexp_function
          [
            <case>
              pattern (src/codePieces.ml[125,3782+4]..[125,3782+16])
                Ppat_construct "Symbol.T" (src/codePieces.ml[125,3782+4]..[125,3782+12])
                Some
                  []
                  pattern (src/codePieces.ml[125,3782+13]..[125,3782+16])
                    Ppat_var "tok" (src/codePieces.ml[125,3782+13]..[125,3782+16])
              expression (src/codePieces.ml[126,3802+6]..[126,3802+21])
                Pexp_apply
                expression (src/codePieces.ml[126,3802+6]..[126,3802+17])
                  Pexp_ident "semvtypetok" (src/codePieces.ml[126,3802+6]..[126,3802+17])
                [
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[126,3802+18]..[126,3802+21])
                      Pexp_ident "tok" (src/codePieces.ml[126,3802+18]..[126,3802+21])
                ]
            <case>
              pattern (src/codePieces.ml[127,3824+4]..[127,3824+15])
                Ppat_construct "Symbol.N" (src/codePieces.ml[127,3824+4]..[127,3824+12])
                Some
                  []
                  pattern (src/codePieces.ml[127,3824+13]..[127,3824+15])
                    Ppat_var "nt" (src/codePieces.ml[127,3824+13]..[127,3824+15])
              expression (src/codePieces.ml[128,3843+6]..[128,3843+23])
                Pexp_construct "::" (src/codePieces.ml[128,3843+8]..[128,3843+23]) ghost
                Some
                  expression (src/codePieces.ml[128,3843+8]..[128,3843+23]) ghost
                    Pexp_tuple
                    [
                      expression (src/codePieces.ml[128,3843+8]..[128,3843+21])
                        Pexp_apply
                        expression (src/codePieces.ml[128,3843+8]..[128,3843+18])
                          Pexp_ident "semvtypent" (src/codePieces.ml[128,3843+8]..[128,3843+18])
                        [
                          <arg>
                          Nolabel
                            expression (src/codePieces.ml[128,3843+19]..[128,3843+21])
                              Pexp_ident "nt" (src/codePieces.ml[128,3843+19]..[128,3843+21])
                        ]
                      expression (src/codePieces.ml[128,3843+22]..[128,3843+23]) ghost
                        Pexp_construct "[]" (src/codePieces.ml[128,3843+22]..[128,3843+23]) ghost
                        None
                    ]
          ]
    ]
  structure_item (src/codePieces.ml[137,4112+0]..[142,4268+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[137,4112+4]..[137,4112+10])
          Ppat_var "tokpat" (src/codePieces.ml[137,4112+4]..[137,4112+10])
        expression (src/codePieces.ml[137,4112+11]..[142,4268+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[137,4112+11]..[137,4112+14])
            Ppat_var "tok" (src/codePieces.ml[137,4112+11]..[137,4112+14])
          expression (src/codePieces.ml[137,4112+15]..[142,4268+3]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/codePieces.ml[137,4112+15]..[137,4112+18])
              Ppat_var "pat" (src/codePieces.ml[137,4112+15]..[137,4112+18])
            expression (src/codePieces.ml[138,4133+2]..[142,4268+3])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/codePieces.ml[138,4133+6]..[138,4133+10])
                    Ppat_var "data" (src/codePieces.ml[138,4133+6]..[138,4133+10])
                  expression (src/codePieces.ml[138,4133+13]..[138,4133+53])
                    Pexp_apply
                    expression (src/codePieces.ml[138,4133+13]..[138,4133+32])
                      Pexp_ident "TokenType.tokendata" (src/codePieces.ml[138,4133+13]..[138,4133+32])
                    [
                      <arg>
                      Nolabel
                        expression (src/codePieces.ml[138,4133+33]..[138,4133+53])
                          Pexp_apply
                          expression (src/codePieces.ml[138,4133+34]..[138,4133+48])
                            Pexp_ident "Terminal.print" (src/codePieces.ml[138,4133+34]..[138,4133+48])
                          [
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[138,4133+49]..[138,4133+52])
                                Pexp_ident "tok" (src/codePieces.ml[138,4133+49]..[138,4133+52])
                          ]
                    ]
              ]
              expression (src/codePieces.ml[139,4190+2]..[142,4268+3])
                Pexp_construct "PData" (src/codePieces.ml[139,4190+2]..[139,4190+7])
                Some
                  expression (src/codePieces.ml[139,4190+8]..[142,4268+3])
                    Pexp_tuple
                    [
                      expression (src/codePieces.ml[140,4200+4]..[140,4200+8])
                        Pexp_ident "data" (src/codePieces.ml[140,4200+4]..[140,4200+8])
                      expression (src/codePieces.ml[141,4210+4]..[141,4210+57])
                        Pexp_ifthenelse
                        expression (src/codePieces.ml[141,4210+7]..[141,4210+36])
                          Pexp_apply
                          expression (src/codePieces.ml[141,4210+30]..[141,4210+31])
                            Pexp_ident "=" (src/codePieces.ml[141,4210+30]..[141,4210+31])
                          [
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[141,4210+7]..[141,4210+29])
                                Pexp_apply
                                expression (src/codePieces.ml[141,4210+7]..[141,4210+25])
                                  Pexp_ident "Terminal.ocamltype" (src/codePieces.ml[141,4210+7]..[141,4210+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/codePieces.ml[141,4210+26]..[141,4210+29])
                                      Pexp_ident "tok" (src/codePieces.ml[141,4210+26]..[141,4210+29])
                                ]
                            <arg>
                            Nolabel
                              expression (src/codePieces.ml[141,4210+32]..[141,4210+36])
                                Pexp_construct "None" (src/codePieces.ml[141,4210+32]..[141,4210+36])
                                None
                          ]
                        expression (src/codePieces.ml[141,4210+42]..[141,4210+44])
                          Pexp_construct "[]" (src/codePieces.ml[141,4210+42]..[141,4210+44])
                          None
                        Some
                          expression (src/codePieces.ml[141,4210+50]..[141,4210+57])
                            Pexp_construct "::" (src/codePieces.ml[141,4210+52]..[141,4210+57]) ghost
                            Some
                              expression (src/codePieces.ml[141,4210+52]..[141,4210+57]) ghost
                                Pexp_tuple
                                [
                                  expression (src/codePieces.ml[141,4210+52]..[141,4210+55])
                                    Pexp_ident "pat" (src/codePieces.ml[141,4210+52]..[141,4210+55])
                                  expression (src/codePieces.ml[141,4210+56]..[141,4210+57]) ghost
                                    Pexp_construct "[]" (src/codePieces.ml[141,4210+56]..[141,4210+57]) ghost
                                    None
                                ]
                    ]
    ]
  structure_item (src/codePieces.ml[148,4450+0]..[152,4558+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[148,4450+4]..[148,4450+17])
          Ppat_var "tok_bind_unit" (src/codePieces.ml[148,4450+4]..[148,4450+17])
        expression (src/codePieces.ml[148,4450+18]..[152,4558+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[148,4450+18]..[148,4450+21])
            Ppat_var "tok" (src/codePieces.ml[148,4450+18]..[148,4450+21])
          expression (src/codePieces.ml[148,4450+22]..[152,4558+5]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/codePieces.ml[148,4450+22]..[148,4450+25])
              Ppat_var "pat" (src/codePieces.ml[148,4450+22]..[148,4450+25])
            expression (src/codePieces.ml[148,4450+26]..[152,4558+5]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/codePieces.ml[148,4450+26]..[148,4450+27])
                Ppat_var "e" (src/codePieces.ml[148,4450+26]..[148,4450+27])
              expression (src/codePieces.ml[149,4480+2]..[152,4558+5])
                Pexp_ifthenelse
                expression (src/codePieces.ml[149,4480+5]..[149,4480+34])
                  Pexp_apply
                  expression (src/codePieces.ml[149,4480+28]..[149,4480+29])
                    Pexp_ident "=" (src/codePieces.ml[149,4480+28]..[149,4480+29])
                  [
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[149,4480+5]..[149,4480+27])
                        Pexp_apply
                        expression (src/codePieces.ml[149,4480+5]..[149,4480+23])
                          Pexp_ident "Terminal.ocamltype" (src/codePieces.ml[149,4480+5]..[149,4480+23])
                        [
                          <arg>
                          Nolabel
                            expression (src/codePieces.ml[149,4480+24]..[149,4480+27])
                              Pexp_ident "tok" (src/codePieces.ml[149,4480+24]..[149,4480+27])
                        ]
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[149,4480+30]..[149,4480+34])
                        Pexp_construct "None" (src/codePieces.ml[149,4480+30]..[149,4480+34])
                        None
                  ]
                expression (src/codePieces.ml[150,4520+4]..[150,4520+30])
                  Pexp_apply
                  expression (src/codePieces.ml[150,4520+4]..[150,4520+8])
                    Pexp_ident "blet" (src/codePieces.ml[150,4520+4]..[150,4520+8])
                  [
                    <arg>
                    Nolabel
                      expression (src/codePieces.ml[150,4520+9]..[150,4520+30])
                        Pexp_tuple
                        [
                          expression (src/codePieces.ml[150,4520+10]..[150,4520+26])
                            Pexp_construct "::" (src/codePieces.ml[150,4520+12]..[150,4520+26]) ghost
                            Some
                              expression (src/codePieces.ml[150,4520+12]..[150,4520+26]) ghost
                                Pexp_tuple
                                [
                                  expression (src/codePieces.ml[150,4520+12]..[150,4520+24])
                                    Pexp_tuple
                                    [
                                      expression (src/codePieces.ml[150,4520+13]..[150,4520+16])
                                        Pexp_ident "pat" (src/codePieces.ml[150,4520+13]..[150,4520+16])
                                      expression (src/codePieces.ml[150,4520+18]..[150,4520+23])
                                        Pexp_construct "EUnit" (src/codePieces.ml[150,4520+18]..[150,4520+23])
                                        None
                                    ]
                                  expression (src/codePieces.ml[150,4520+25]..[150,4520+26]) ghost
                                    Pexp_construct "[]" (src/codePieces.ml[150,4520+25]..[150,4520+26]) ghost
                                    None
                                ]
                          expression (src/codePieces.ml[150,4520+28]..[150,4520+29])
                            Pexp_ident "e" (src/codePieces.ml[150,4520+28]..[150,4520+29])
                        ]
                  ]
                Some
                  expression (src/codePieces.ml[152,4558+4]..[152,4558+5])
                    Pexp_ident "e" (src/codePieces.ml[152,4558+4]..[152,4558+5])
    ]
  structure_item (src/codePieces.ml[157,4681+0]..[162,4795+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[157,4681+4]..[157,4681+11])
          Ppat_var "tokspat" (src/codePieces.ml[157,4681+4]..[157,4681+11])
        expression (src/codePieces.ml[157,4681+12]..[162,4795+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[157,4681+12]..[157,4681+16])
            Ppat_var "toks" (src/codePieces.ml[157,4681+12]..[157,4681+16])
          expression (src/codePieces.ml[158,4700+2]..[162,4795+3])
            Pexp_construct "POr" (src/codePieces.ml[158,4700+2]..[158,4700+5])
            Some
              expression (src/codePieces.ml[158,4700+6]..[162,4795+3])
                Pexp_apply
                expression (src/codePieces.ml[159,4708+4]..[159,4708+20])
                  Pexp_ident "TerminalSet.fold" (src/codePieces.ml[159,4708+4]..[159,4708+20])
                [
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[159,4708+21]..[161,4781+5])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/codePieces.ml[159,4708+26]..[159,4708+29])
                        Ppat_var "tok" (src/codePieces.ml[159,4708+26]..[159,4708+29])
                      expression (src/codePieces.ml[159,4708+30]..[160,4746+34]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/codePieces.ml[159,4708+30]..[159,4708+34])
                          Ppat_var "pats" (src/codePieces.ml[159,4708+30]..[159,4708+34])
                        expression (src/codePieces.ml[160,4746+6]..[160,4746+34])
                          Pexp_construct "::" (src/codePieces.ml[160,4746+27]..[160,4746+29])
                          Some
                            expression (src/codePieces.ml[160,4746+6]..[160,4746+34]) ghost
                              Pexp_tuple
                              [
                                expression (src/codePieces.ml[160,4746+6]..[160,4746+26])
                                  Pexp_apply
                                  expression (src/codePieces.ml[160,4746+6]..[160,4746+12])
                                    Pexp_ident "tokpat" (src/codePieces.ml[160,4746+6]..[160,4746+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/codePieces.ml[160,4746+13]..[160,4746+16])
                                        Pexp_ident "tok" (src/codePieces.ml[160,4746+13]..[160,4746+16])
                                    <arg>
                                    Nolabel
                                      expression (src/codePieces.ml[160,4746+17]..[160,4746+26])
                                        Pexp_construct "PWildcard" (src/codePieces.ml[160,4746+17]..[160,4746+26])
                                        None
                                  ]
                                expression (src/codePieces.ml[160,4746+30]..[160,4746+34])
                                  Pexp_ident "pats" (src/codePieces.ml[160,4746+30]..[160,4746+34])
                              ]
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[161,4781+6]..[161,4781+10])
                      Pexp_ident "toks" (src/codePieces.ml[161,4781+6]..[161,4781+10])
                  <arg>
                  Nolabel
                    expression (src/codePieces.ml[161,4781+11]..[161,4781+13])
                      Pexp_construct "[]" (src/codePieces.ml[161,4781+11]..[161,4781+13])
                      None
                ]
    ]
  structure_item (src/codePieces.ml[171,5175+0]..[189,5698+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[171,5175+4]..[171,5175+23])
          Ppat_var "destructuretokendef" (src/codePieces.ml[171,5175+4]..[171,5175+23])
        expression (src/codePieces.ml[171,5175+24]..[189,5698+1]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[171,5175+24]..[171,5175+28])
            Ppat_var "name" (src/codePieces.ml[171,5175+24]..[171,5175+28])
          expression (src/codePieces.ml[171,5175+29]..[189,5698+1]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/codePieces.ml[171,5175+29]..[171,5175+37])
              Ppat_var "codomain" (src/codePieces.ml[171,5175+29]..[171,5175+37])
            expression (src/codePieces.ml[171,5175+38]..[189,5698+1]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/codePieces.ml[171,5175+38]..[171,5175+46])
                Ppat_var "bindsemv" (src/codePieces.ml[171,5175+38]..[171,5175+46])
              expression (src/codePieces.ml[171,5175+47]..[189,5698+1]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/codePieces.ml[171,5175+47]..[171,5175+53])
                  Ppat_var "branch" (src/codePieces.ml[171,5175+47]..[171,5175+53])
                expression (src/codePieces.ml[171,5175+56]..[189,5698+1])
                  Pexp_record
                  [
                    "valpublic" (src/codePieces.ml[172,5233+2]..[172,5233+11])
                      expression (src/codePieces.ml[172,5233+14]..[172,5233+19])
                        Pexp_construct "false" (src/codePieces.ml[172,5233+14]..[172,5233+19])
                        None
                    "valpat" (src/codePieces.ml[173,5254+2]..[173,5254+8])
                      expression (src/codePieces.ml[173,5254+11]..[173,5254+20])
                        Pexp_construct "PVar" (src/codePieces.ml[173,5254+11]..[173,5254+15])
                        Some
                          expression (src/codePieces.ml[173,5254+16]..[173,5254+20])
                            Pexp_ident "name" (src/codePieces.ml[173,5254+16]..[173,5254+20])
                    "valval" (src/codePieces.ml[174,5276+2]..[174,5276+8])
                      expression (src/codePieces.ml[175,5287+4]..[188,5660+37])
                        Pexp_apply
                        expression (src/codePieces.ml[175,5287+4]..[175,5287+12])
                          Pexp_ident "annotate" (src/codePieces.ml[175,5287+4]..[175,5287+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/codePieces.ml[175,5287+13]..[187,5654+5])
                              Pexp_construct "EFun" (src/codePieces.ml[176,5302+6]..[176,5302+10])
                              Some
                                expression (src/codePieces.ml[176,5302+11]..[186,5646+7])
                                  Pexp_tuple
                                  [
                                    expression (src/codePieces.ml[176,5302+12]..[176,5302+26])
                                      Pexp_construct "::" (src/codePieces.ml[176,5302+14]..[176,5302+26]) ghost
                                      Some
                                        expression (src/codePieces.ml[176,5302+14]..[176,5302+26]) ghost
                                          Pexp_tuple
                                          [
                                            expression (src/codePieces.ml[176,5302+14]..[176,5302+24])
                                              Pexp_construct "PVar" (src/codePieces.ml[176,5302+14]..[176,5302+18])
                                              Some
                                                expression (src/codePieces.ml[176,5302+19]..[176,5302+24])
                                                  Pexp_ident "token" (src/codePieces.ml[176,5302+19]..[176,5302+24])
                                            expression (src/codePieces.ml[176,5302+25]..[176,5302+26]) ghost
                                              Pexp_construct "[]" (src/codePieces.ml[176,5302+25]..[176,5302+26]) ghost
                                              None
                                          ]
                                    expression (src/codePieces.ml[177,5330+8]..[185,5636+9])
                                      Pexp_construct "EMatch" (src/codePieces.ml[177,5330+8]..[177,5330+14])
                                      Some
                                        expression (src/codePieces.ml[177,5330+15]..[185,5636+9])
                                          Pexp_tuple
                                          [
                                            expression (src/codePieces.ml[177,5330+16]..[177,5330+26])
                                              Pexp_construct "EVar" (src/codePieces.ml[177,5330+16]..[177,5330+20])
                                              Some
                                                expression (src/codePieces.ml[177,5330+21]..[177,5330+26])
                                                  Pexp_ident "token" (src/codePieces.ml[177,5330+21]..[177,5330+26])
                                            expression (src/codePieces.ml[178,5358+10]..[184,5621+14])
                                              Pexp_apply
                                              expression (src/codePieces.ml[178,5358+10]..[178,5358+23])
                                                Pexp_ident "Terminal.fold" (src/codePieces.ml[178,5358+10]..[178,5358+23])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/codePieces.ml[178,5358+24]..[184,5621+11])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (src/codePieces.ml[178,5358+29]..[178,5358+32])
                                                      Ppat_var "tok" (src/codePieces.ml[178,5358+29]..[178,5358+32])
                                                    expression (src/codePieces.ml[178,5358+33]..[183,5567+53]) ghost
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (src/codePieces.ml[178,5358+33]..[178,5358+41])
                                                        Ppat_var "branches" (src/codePieces.ml[178,5358+33]..[178,5358+41])
                                                      expression (src/codePieces.ml[179,5403+12]..[183,5567+53])
                                                        Pexp_ifthenelse
                                                        expression (src/codePieces.ml[179,5403+15]..[179,5403+34])
                                                          Pexp_apply
                                                          expression (src/codePieces.ml[179,5403+15]..[179,5403+30])
                                                            Pexp_ident "Terminal.pseudo" (src/codePieces.ml[179,5403+15]..[179,5403+30])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/codePieces.ml[179,5403+31]..[179,5403+34])
                                                                Pexp_ident "tok" (src/codePieces.ml[179,5403+31]..[179,5403+34])
                                                          ]
                                                        expression (src/codePieces.ml[180,5443+14]..[180,5443+22])
                                                          Pexp_ident "branches" (src/codePieces.ml[180,5443+14]..[180,5443+22])
                                                        Some
                                                          expression (src/codePieces.ml[182,5483+14]..[183,5567+53])
                                                            Pexp_construct "::" (src/codePieces.ml[183,5567+42]..[183,5567+44])
                                                            Some
                                                              expression (src/codePieces.ml[182,5483+14]..[183,5567+53]) ghost
                                                                Pexp_tuple
                                                                [
                                                                  expression (src/codePieces.ml[182,5483+14]..[183,5567+41])
                                                                    Pexp_record
                                                                    [
                                                                      "branchpat" (src/codePieces.ml[182,5483+16]..[182,5483+25])
expression (src/codePieces.ml[182,5483+28]..[182,5483+82])
  Pexp_apply
  expression (src/codePieces.ml[182,5483+28]..[182,5483+34])
    Pexp_ident "tokpat" (src/codePieces.ml[182,5483+28]..[182,5483+34])
  [
    <arg>
    Nolabel
      expression (src/codePieces.ml[182,5483+35]..[182,5483+38])
        Pexp_ident "tok" (src/codePieces.ml[182,5483+35]..[182,5483+38])
    <arg>
    Nolabel
      expression (src/codePieces.ml[182,5483+39]..[182,5483+82])
        Pexp_ifthenelse
        expression (src/codePieces.ml[182,5483+43]..[182,5483+51])
          Pexp_ident "bindsemv" (src/codePieces.ml[182,5483+43]..[182,5483+51])
        expression (src/codePieces.ml[182,5483+57]..[182,5483+66])
          Pexp_construct "PVar" (src/codePieces.ml[182,5483+57]..[182,5483+61])
          Some
            expression (src/codePieces.ml[182,5483+62]..[182,5483+66])
              Pexp_ident "semv" (src/codePieces.ml[182,5483+62]..[182,5483+66])
        Some
          expression (src/codePieces.ml[182,5483+72]..[182,5483+81])
            Pexp_construct "PWildcard" (src/codePieces.ml[182,5483+72]..[182,5483+81])
            None
  ]
                                                                      "branchbody" (src/codePieces.ml[183,5567+16]..[183,5567+26])
expression (src/codePieces.ml[183,5567+29]..[183,5567+39])
  Pexp_apply
  expression (src/codePieces.ml[183,5567+29]..[183,5567+35])
    Pexp_ident "branch" (src/codePieces.ml[183,5567+29]..[183,5567+35])
  [
    <arg>
    Nolabel
      expression (src/codePieces.ml[183,5567+36]..[183,5567+39])
        Pexp_ident "tok" (src/codePieces.ml[183,5567+36]..[183,5567+39])
  ]
                                                                    ]
                                                                    None
                                                                  expression (src/codePieces.ml[183,5567+45]..[183,5567+53])
                                                                    Pexp_ident "branches" (src/codePieces.ml[183,5567+45]..[183,5567+53])
                                                                ]
                                                <arg>
                                                Nolabel
                                                  expression (src/codePieces.ml[184,5621+12]..[184,5621+14])
                                                    Pexp_construct "[]" (src/codePieces.ml[184,5621+12]..[184,5621+14])
                                                    None
                                              ]
                                          ]
                                  ]
                          <arg>
                          Nolabel
                            expression (src/codePieces.ml[188,5660+4]..[188,5660+37])
                              Pexp_apply
                              expression (src/codePieces.ml[188,5660+5]..[188,5660+10])
                                Pexp_ident "arrow" (src/codePieces.ml[188,5660+5]..[188,5660+10])
                              [
                                <arg>
                                Nolabel
                                  expression (src/codePieces.ml[188,5660+11]..[188,5660+27])
                                    Pexp_ident "TokenType.ttoken" (src/codePieces.ml[188,5660+11]..[188,5660+27])
                                <arg>
                                Nolabel
                                  expression (src/codePieces.ml[188,5660+28]..[188,5660+36])
                                    Pexp_ident "codomain" (src/codePieces.ml[188,5660+28]..[188,5660+36])
                              ]
                        ]
                  ]
                  None
    ]
  structure_item (src/codePieces.ml[201,6146+0]..[202,6164+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[201,6146+4]..[201,6146+15])
          Ppat_var "parse_error" (src/codePieces.ml[201,6146+4]..[201,6146+15])
        expression (src/codePieces.ml[202,6164+2]..[202,6164+8])
          Pexp_constant PConst_string("_eRR",(src/codePieces.ml[202,6164+3]..[202,6164+7]),None)
    ]
  structure_item (src/codePieces.ml[204,6174+0]..[205,6189+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[204,6174+4]..[204,6174+12])
          Ppat_var "errorval" (src/codePieces.ml[204,6174+4]..[204,6174+12])
        expression (src/codePieces.ml[205,6189+2]..[205,6189+18])
          Pexp_construct "EVar" (src/codePieces.ml[205,6189+2]..[205,6189+6])
          Some
            expression (src/codePieces.ml[205,6189+7]..[205,6189+18])
              Pexp_ident "parse_error" (src/codePieces.ml[205,6189+7]..[205,6189+18])
    ]
  structure_item (src/codePieces.ml[207,6209+0]..[208,6222+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[207,6209+4]..[207,6209+10])
          Ppat_var "basics" (src/codePieces.ml[207,6209+4]..[207,6209+10])
        expression (src/codePieces.ml[208,6222+2]..[208,6222+16])
          Pexp_constant PConst_string("MenhirBasics",(src/codePieces.ml[208,6222+3]..[208,6222+15]),None)
    ]
  structure_item (src/codePieces.ml[217,6595+0]..[221,6731+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[217,6595+4]..[217,6595+13])
          Ppat_var "excvaldef" (src/codePieces.ml[217,6595+4]..[217,6595+13])
        expression (src/codePieces.ml[217,6595+16]..[221,6731+1])
          Pexp_record
          [
            "valpublic" (src/codePieces.ml[218,6613+2]..[218,6613+11])
              expression (src/codePieces.ml[218,6613+14]..[218,6613+19])
                Pexp_construct "false" (src/codePieces.ml[218,6613+14]..[218,6613+19])
                None
            "valpat" (src/codePieces.ml[219,6634+2]..[219,6634+8])
              expression (src/codePieces.ml[219,6634+11]..[219,6634+27])
                Pexp_construct "PVar" (src/codePieces.ml[219,6634+11]..[219,6634+15])
                Some
                  expression (src/codePieces.ml[219,6634+16]..[219,6634+27])
                    Pexp_ident "parse_error" (src/codePieces.ml[219,6634+16]..[219,6634+27])
            "valval" (src/codePieces.ml[220,6663+2]..[220,6663+8])
              expression (src/codePieces.ml[220,6663+11]..[220,6663+67])
                Pexp_construct "EAnnot" (src/codePieces.ml[220,6663+11]..[220,6663+17])
                Some
                  expression (src/codePieces.ml[220,6663+18]..[220,6663+67])
                    Pexp_tuple
                    [
                      expression (src/codePieces.ml[220,6663+19]..[220,6663+48])
                        Pexp_construct "EData" (src/codePieces.ml[220,6663+19]..[220,6663+24])
                        Some
                          expression (src/codePieces.ml[220,6663+25]..[220,6663+48])
                            Pexp_tuple
                            [
                              expression (src/codePieces.ml[220,6663+26]..[220,6663+43])
                                Pexp_ident "Interface.excname" (src/codePieces.ml[220,6663+26]..[220,6663+43])
                              expression (src/codePieces.ml[220,6663+45]..[220,6663+47])
                                Pexp_construct "[]" (src/codePieces.ml[220,6663+45]..[220,6663+47])
                                None
                            ]
                      expression (src/codePieces.ml[220,6663+50]..[220,6663+66])
                        Pexp_apply
                        expression (src/codePieces.ml[220,6663+50]..[220,6663+61])
                          Pexp_ident "type2scheme" (src/codePieces.ml[220,6663+50]..[220,6663+61])
                        [
                          <arg>
                          Nolabel
                            expression (src/codePieces.ml[220,6663+62]..[220,6663+66])
                              Pexp_ident "texn" (src/codePieces.ml[220,6663+62]..[220,6663+66])
                        ]
                    ]
          ]
          None
    ]
  structure_item (src/codePieces.ml[229,7031+0]..[254,7775+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[229,7031+4]..[229,7031+11])
          Ppat_var "mbasics" (src/codePieces.ml[229,7031+4]..[229,7031+11])
        expression (src/codePieces.ml[229,7031+12]..[254,7775+1]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/codePieces.ml[229,7031+12]..[229,7031+19])
            Ppat_var "grammar" (src/codePieces.ml[229,7031+12]..[229,7031+19])
          expression (src/codePieces.ml[229,7031+22]..[254,7775+1])
            Pexp_construct "::" (src/codePieces.ml[232,7085+2]..[254,7775+1]) ghost
            Some
              expression (src/codePieces.ml[232,7085+2]..[254,7775+1]) ghost
                Pexp_tuple
                [
                  expression (src/codePieces.ml[232,7085+2]..[249,7703+4])
                    Pexp_construct "SIModuleDef" (src/codePieces.ml[232,7085+2]..[232,7085+13])
                    Some
                      expression (src/codePieces.ml[232,7085+14]..[249,7703+4])
                        Pexp_tuple
                        [
                          expression (src/codePieces.ml[232,7085+15]..[232,7085+21])
                            Pexp_ident "basics" (src/codePieces.ml[232,7085+15]..[232,7085+21])
                          expression (src/codePieces.ml[232,7085+23]..[249,7703+3])
                            Pexp_construct "MStruct" (src/codePieces.ml[232,7085+23]..[232,7085+30])
                            Some
                              expression (src/codePieces.ml[232,7085+31]..[249,7703+3])
                                Pexp_construct "::" (src/codePieces.ml[235,7152+35]..[235,7152+37])
                                Some
                                  expression (src/codePieces.ml[235,7152+4]..[247,7696+5]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/codePieces.ml[235,7152+4]..[235,7152+34])
                                        Pexp_construct "SIExcDefs" (src/codePieces.ml[235,7152+4]..[235,7152+13])
                                        Some
                                          expression (src/codePieces.ml[235,7152+14]..[235,7152+34])
                                            Pexp_construct "::" (src/codePieces.ml[235,7152+16]..[235,7152+34]) ghost
                                            Some
                                              expression (src/codePieces.ml[235,7152+16]..[235,7152+34]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (src/codePieces.ml[235,7152+16]..[235,7152+32])
                                                    Pexp_ident "Interface.excdef" (src/codePieces.ml[235,7152+16]..[235,7152+32])
                                                  expression (src/codePieces.ml[235,7152+33]..[235,7152+34]) ghost
                                                    Pexp_construct "[]" (src/codePieces.ml[235,7152+33]..[235,7152+34]) ghost
                                                    None
                                                ]
                                      expression (src/codePieces.ml[242,7561+4]..[247,7696+5])
                                        Pexp_construct "::" (src/codePieces.ml[242,7561+37]..[242,7561+39])
                                        Some
                                          expression (src/codePieces.ml[242,7561+4]..[247,7696+5]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/codePieces.ml[242,7561+4]..[242,7561+36])
                                                Pexp_construct "SIValDefs" (src/codePieces.ml[242,7561+4]..[242,7561+13])
                                                Some
                                                  expression (src/codePieces.ml[242,7561+14]..[242,7561+36])
                                                    Pexp_tuple
                                                    [
                                                      expression (src/codePieces.ml[242,7561+15]..[242,7561+20])
                                                        Pexp_construct "false" (src/codePieces.ml[242,7561+15]..[242,7561+20])
                                                        None
                                                      expression (src/codePieces.ml[242,7561+22]..[242,7561+35])
                                                        Pexp_construct "::" (src/codePieces.ml[242,7561+24]..[242,7561+35]) ghost
                                                        Some
                                                          expression (src/codePieces.ml[242,7561+24]..[242,7561+35]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/codePieces.ml[242,7561+24]..[242,7561+33])
                                                                Pexp_ident "excvaldef" (src/codePieces.ml[242,7561+24]..[242,7561+33])
                                                              expression (src/codePieces.ml[242,7561+34]..[242,7561+35]) ghost
                                                                Pexp_construct "[]" (src/codePieces.ml[242,7561+34]..[242,7561+35]) ghost
                                                                None
                                                            ]
                                                    ]
                                              expression (src/codePieces.ml[245,7630+4]..[247,7696+5])
                                                Pexp_apply
                                                expression (src/codePieces.ml[245,7630+4]..[245,7630+26])
                                                  Pexp_ident "interface_to_structure" (src/codePieces.ml[245,7630+4]..[245,7630+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/codePieces.ml[245,7630+27]..[247,7696+5])
                                                      Pexp_apply
                                                      expression (src/codePieces.ml[246,7659+6]..[246,7659+28])
                                                        Pexp_ident "TokenType.tokentypedef" (src/codePieces.ml[246,7659+6]..[246,7659+28])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/codePieces.ml[246,7659+29]..[246,7659+36])
                                                            Pexp_ident "grammar" (src/codePieces.ml[246,7659+29]..[246,7659+36])
                                                      ]
                                                ]
                                            ]
                                    ]
                        ]
                  expression (src/codePieces.ml[252,7747+2]..[254,7775+1]) ghost
                    Pexp_construct "::" (src/codePieces.ml[252,7747+2]..[254,7775+1]) ghost
                    Some
                      expression (src/codePieces.ml[252,7747+2]..[254,7775+1]) ghost
                        Pexp_tuple
                        [
                          expression (src/codePieces.ml[252,7747+2]..[252,7747+25])
                            Pexp_construct "SIInclude" (src/codePieces.ml[252,7747+2]..[252,7747+11])
                            Some
                              expression (src/codePieces.ml[252,7747+12]..[252,7747+25])
                                Pexp_construct "MVar" (src/codePieces.ml[252,7747+13]..[252,7747+17])
                                Some
                                  expression (src/codePieces.ml[252,7747+18]..[252,7747+24])
                                    Pexp_ident "basics" (src/codePieces.ml[252,7747+18]..[252,7747+24])
                          expression (src/codePieces.ml[254,7775+0]..[254,7775+1]) ghost
                            Pexp_construct "[]" (src/codePieces.ml[254,7775+0]..[254,7775+1]) ghost
                            None
                        ]
                ]
    ]
]

open IL
open CodeBits
open Grammar
let ntvar nt = Infer.ntvar (Nonterminal.print true nt)
let semv = "_v"
let stack = prefix "stack"
let state = prefix "s"
let token = "_tok"
let beforeendp = let open Keyword in posvar Before WhereEnd FlavorPosition
let startp = let open Keyword in posvar Left WhereStart FlavorPosition
let endp = let open Keyword in posvar Left WhereEnd FlavorPosition
let startpos ids i =
  let open Keyword in posvar (RightNamed (ids.(i))) WhereStart FlavorPosition
let endpos ids i =
  let open Keyword in posvar (RightNamed (ids.(i))) WhereEnd FlavorPosition
let semvtypent nt =
  match Nonterminal.ocamltype nt with
  | None -> ntvar nt
  | Some ocamltype -> TypTextual ocamltype
let semvtypetok tok =
  match Terminal.ocamltype tok with
  | None -> if Settings.represent_values then [tunit] else []
  | Some ocamltype -> [TypTextual ocamltype]
let semvtype =
  function | Symbol.T tok -> semvtypetok tok | Symbol.N nt -> [semvtypent nt]
let tokpat tok pat =
  let data = TokenType.tokendata (Terminal.print tok) in
  PData (data, (if (Terminal.ocamltype tok) = None then [] else [pat]))
let tok_bind_unit tok pat e =
  if (Terminal.ocamltype tok) = None then blet ([(pat, EUnit)], e) else e
let tokspat toks =
  POr
    (TerminalSet.fold (fun tok -> fun pats -> (tokpat tok PWildcard) :: pats)
       toks [])
let destructuretokendef name codomain bindsemv branch =
  {
    valpublic = false;
    valpat = (PVar name);
    valval =
      (annotate
         (EFun
            ([PVar token],
              (EMatch
                 ((EVar token),
                   (Terminal.fold
                      (fun tok ->
                         fun branches ->
                           if Terminal.pseudo tok
                           then branches
                           else
                             {
                               branchpat =
                                 (tokpat tok
                                    (if bindsemv
                                     then PVar semv
                                     else PWildcard));
                               branchbody = (branch tok)
                             } :: branches) [])))))
         (arrow TokenType.ttoken codomain))
  }
let parse_error = "_eRR"
let errorval = EVar parse_error
let basics = "MenhirBasics"
let excvaldef =
  {
    valpublic = false;
    valpat = (PVar parse_error);
    valval = (EAnnot ((EData (Interface.excname, [])), (type2scheme texn)))
  }
let mbasics grammar =
  [SIModuleDef
     (basics,
       (MStruct ((SIExcDefs [Interface.excdef]) ::
          (SIValDefs (false, [excvaldef])) ::
          (interface_to_structure (TokenType.tokentypedef grammar)))));
  SIInclude (MVar basics)]
[
  structure_item (src/codePieces.ml[18,1185+0]..src/codePieces.ml[18,1185+7])
    Tstr_open Fresh
    module_expr (src/codePieces.ml[18,1185+5]..src/codePieces.ml[18,1185+7])
      Tmod_ident "Dune__exe!.IL"
  structure_item (src/codePieces.ml[19,1193+0]..src/codePieces.ml[19,1193+13])
    Tstr_open Fresh
    module_expr (src/codePieces.ml[19,1193+5]..src/codePieces.ml[19,1193+13])
      Tmod_ident "Dune__exe!.CodeBits"
  structure_item (src/codePieces.ml[20,1207+0]..src/codePieces.ml[20,1207+12])
    Tstr_open Fresh
    module_expr (src/codePieces.ml[20,1207+5]..src/codePieces.ml[20,1207+12])
      Tmod_ident "Dune__exe!.Grammar"
  structure_item (src/codePieces.ml[28,1389+0]..src/codePieces.ml[29,1404+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[28,1389+4]..src/codePieces.ml[28,1389+9])
          Tpat_var "ntvar/488"
        expression (src/codePieces.ml[28,1389+10]..src/codePieces.ml[29,1404+41]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[28,1389+10]..src/codePieces.ml[28,1389+12])
                Tpat_var "nt/490"
              expression (src/codePieces.ml[29,1404+2]..src/codePieces.ml[29,1404+41])
                Texp_apply
                expression (src/codePieces.ml[29,1404+2]..src/codePieces.ml[29,1404+13])
                  Texp_ident "Dune__exe!.Infer.ntvar"
                [
                  <arg>
                    Nolabel
                    expression (src/codePieces.ml[29,1404+14]..src/codePieces.ml[29,1404+41])
                      Texp_apply
                      expression (src/codePieces.ml[29,1404+15]..src/codePieces.ml[29,1404+32])
                        Texp_ident "Dune__exe!.Grammar.Nonterminal.print"
                      [
                        <arg>
                          Nolabel
                          expression (src/codePieces.ml[29,1404+33]..src/codePieces.ml[29,1404+37])
                            Texp_construct "true"
                            []
                        <arg>
                          Nolabel
                          expression (src/codePieces.ml[29,1404+38]..src/codePieces.ml[29,1404+40])
                            Texp_ident "nt/490"
                      ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[33,1496+0]..src/codePieces.ml[34,1507+6])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[33,1496+4]..src/codePieces.ml[33,1496+8])
          Tpat_var "semv/580"
        expression (src/codePieces.ml[34,1507+2]..src/codePieces.ml[34,1507+6])
          Texp_constant Const_string("_v",(src/codePieces.ml[34,1507+3]..src/codePieces.ml[34,1507+5]),None)
    ]
  structure_item (src/codePieces.ml[38,1555+0]..src/codePieces.ml[39,1567+16])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[38,1555+4]..src/codePieces.ml[38,1555+9])
          Tpat_var "stack/581"
        expression (src/codePieces.ml[39,1567+2]..src/codePieces.ml[39,1567+16])
          Texp_apply
          expression (src/codePieces.ml[39,1567+2]..src/codePieces.ml[39,1567+8])
            Texp_ident "Dune__exe!.CodeBits.prefix"
          [
            <arg>
              Nolabel
              expression (src/codePieces.ml[39,1567+9]..src/codePieces.ml[39,1567+16])
                Texp_constant Const_string("stack",(src/codePieces.ml[39,1567+10]..src/codePieces.ml[39,1567+15]),None)
          ]
    ]
  structure_item (src/codePieces.ml[43,1625+0]..src/codePieces.ml[44,1637+12])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[43,1625+4]..src/codePieces.ml[43,1625+9])
          Tpat_var "state/582"
        expression (src/codePieces.ml[44,1637+2]..src/codePieces.ml[44,1637+12])
          Texp_apply
          expression (src/codePieces.ml[44,1637+2]..src/codePieces.ml[44,1637+8])
            Texp_ident "Dune__exe!.CodeBits.prefix"
          [
            <arg>
              Nolabel
              expression (src/codePieces.ml[44,1637+9]..src/codePieces.ml[44,1637+12])
                Texp_constant Const_string("s",(src/codePieces.ml[44,1637+10]..src/codePieces.ml[44,1637+11]),None)
          ]
    ]
  structure_item (src/codePieces.ml[48,1691+0]..src/codePieces.ml[49,1703+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[48,1691+4]..src/codePieces.ml[48,1691+9])
          Tpat_var "token/583"
        expression (src/codePieces.ml[49,1703+2]..src/codePieces.ml[49,1703+8])
          Texp_constant Const_string("_tok",(src/codePieces.ml[49,1703+3]..src/codePieces.ml[49,1703+7]),None)
    ]
  structure_item (src/codePieces.ml[59,2086+0]..src/codePieces.ml[60,2103+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[59,2086+4]..src/codePieces.ml[59,2086+14])
          Tpat_var "beforeendp/584"
        expression (src/codePieces.ml[60,2103+2]..src/codePieces.ml[60,2103+49])
          Texp_open Fresh
          module_expr (src/codePieces.ml[60,2103+2]..src/codePieces.ml[60,2103+9])
            Tmod_ident "MenhirSdk!.Keyword"
          expression (src/codePieces.ml[60,2103+11]..src/codePieces.ml[60,2103+48])
            Texp_apply
            expression (src/codePieces.ml[60,2103+11]..src/codePieces.ml[60,2103+17])
              Texp_ident "MenhirSdk!.Keyword.posvar"
            [
              <arg>
                Nolabel
                expression (src/codePieces.ml[60,2103+18]..src/codePieces.ml[60,2103+24])
                  Texp_construct "Before"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[60,2103+25]..src/codePieces.ml[60,2103+33])
                  Texp_construct "WhereEnd"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[60,2103+34]..src/codePieces.ml[60,2103+48])
                  Texp_construct "FlavorPosition"
                  []
            ]
    ]
  structure_item (src/codePieces.ml[63,2178+0]..src/codePieces.ml[64,2191+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[63,2178+4]..src/codePieces.ml[63,2178+10])
          Tpat_var "startp/597"
        expression (src/codePieces.ml[64,2191+2]..src/codePieces.ml[64,2191+49])
          Texp_open Fresh
          module_expr (src/codePieces.ml[64,2191+2]..src/codePieces.ml[64,2191+9])
            Tmod_ident "MenhirSdk!.Keyword"
          expression (src/codePieces.ml[64,2191+11]..src/codePieces.ml[64,2191+48])
            Texp_apply
            expression (src/codePieces.ml[64,2191+11]..src/codePieces.ml[64,2191+17])
              Texp_ident "MenhirSdk!.Keyword.posvar"
            [
              <arg>
                Nolabel
                expression (src/codePieces.ml[64,2191+18]..src/codePieces.ml[64,2191+22])
                  Texp_construct "Left"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[64,2191+23]..src/codePieces.ml[64,2191+33])
                  Texp_construct "WhereStart"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[64,2191+34]..src/codePieces.ml[64,2191+48])
                  Texp_construct "FlavorPosition"
                  []
            ]
    ]
  structure_item (src/codePieces.ml[67,2264+0]..src/codePieces.ml[68,2275+47])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[67,2264+4]..src/codePieces.ml[67,2264+8])
          Tpat_var "endp/598"
        expression (src/codePieces.ml[68,2275+2]..src/codePieces.ml[68,2275+47])
          Texp_open Fresh
          module_expr (src/codePieces.ml[68,2275+2]..src/codePieces.ml[68,2275+9])
            Tmod_ident "MenhirSdk!.Keyword"
          expression (src/codePieces.ml[68,2275+11]..src/codePieces.ml[68,2275+46])
            Texp_apply
            expression (src/codePieces.ml[68,2275+11]..src/codePieces.ml[68,2275+17])
              Texp_ident "MenhirSdk!.Keyword.posvar"
            [
              <arg>
                Nolabel
                expression (src/codePieces.ml[68,2275+18]..src/codePieces.ml[68,2275+22])
                  Texp_construct "Left"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[68,2275+23]..src/codePieces.ml[68,2275+31])
                  Texp_construct "WhereEnd"
                  []
              <arg>
                Nolabel
                expression (src/codePieces.ml[68,2275+32]..src/codePieces.ml[68,2275+46])
                  Texp_construct "FlavorPosition"
                  []
            ]
    ]
  structure_item (src/codePieces.ml[71,2344+0]..src/codePieces.ml[72,2365+65])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[71,2344+4]..src/codePieces.ml[71,2344+12])
          Tpat_var "startpos/599"
        expression (src/codePieces.ml[71,2344+13]..src/codePieces.ml[72,2365+65]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[71,2344+13]..src/codePieces.ml[71,2344+16])
                Tpat_var "ids/601"
              expression (src/codePieces.ml[71,2344+17]..src/codePieces.ml[72,2365+65]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/codePieces.ml[71,2344+17]..src/codePieces.ml[71,2344+18])
                      Tpat_var "i/602"
                    expression (src/codePieces.ml[72,2365+2]..src/codePieces.ml[72,2365+65])
                      Texp_open Fresh
                      module_expr (src/codePieces.ml[72,2365+2]..src/codePieces.ml[72,2365+9])
                        Tmod_ident "MenhirSdk!.Keyword"
                      expression (src/codePieces.ml[72,2365+11]..src/codePieces.ml[72,2365+64])
                        Texp_apply
                        expression (src/codePieces.ml[72,2365+11]..src/codePieces.ml[72,2365+17])
                          Texp_ident "MenhirSdk!.Keyword.posvar"
                        [
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[72,2365+18]..src/codePieces.ml[72,2365+38])
                              Texp_construct "RightNamed"
                              [
                                expression (src/codePieces.ml[72,2365+30]..src/codePieces.ml[72,2365+37])
                                  Texp_apply
                                  expression (src/codePieces.ml[72,2365+30]..src/codePieces.ml[72,2365+37]) ghost
                                    Texp_ident "Stdlib!.Array.get"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/codePieces.ml[72,2365+30]..src/codePieces.ml[72,2365+33])
                                        Texp_ident "ids/601"
                                    <arg>
                                      Nolabel
                                      expression (src/codePieces.ml[72,2365+35]..src/codePieces.ml[72,2365+36])
                                        Texp_ident "i/602"
                                  ]
                              ]
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[72,2365+39]..src/codePieces.ml[72,2365+49])
                              Texp_construct "WhereStart"
                              []
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[72,2365+50]..src/codePieces.ml[72,2365+64])
                              Texp_construct "FlavorPosition"
                              []
                        ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[75,2474+0]..src/codePieces.ml[76,2493+63])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[75,2474+4]..src/codePieces.ml[75,2474+10])
          Tpat_var "endpos/651"
        expression (src/codePieces.ml[75,2474+11]..src/codePieces.ml[76,2493+63]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[75,2474+11]..src/codePieces.ml[75,2474+14])
                Tpat_var "ids/653"
              expression (src/codePieces.ml[75,2474+15]..src/codePieces.ml[76,2493+63]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/codePieces.ml[75,2474+15]..src/codePieces.ml[75,2474+16])
                      Tpat_var "i/654"
                    expression (src/codePieces.ml[76,2493+2]..src/codePieces.ml[76,2493+63])
                      Texp_open Fresh
                      module_expr (src/codePieces.ml[76,2493+2]..src/codePieces.ml[76,2493+9])
                        Tmod_ident "MenhirSdk!.Keyword"
                      expression (src/codePieces.ml[76,2493+11]..src/codePieces.ml[76,2493+62])
                        Texp_apply
                        expression (src/codePieces.ml[76,2493+11]..src/codePieces.ml[76,2493+17])
                          Texp_ident "MenhirSdk!.Keyword.posvar"
                        [
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[76,2493+18]..src/codePieces.ml[76,2493+38])
                              Texp_construct "RightNamed"
                              [
                                expression (src/codePieces.ml[76,2493+30]..src/codePieces.ml[76,2493+37])
                                  Texp_apply
                                  expression (src/codePieces.ml[76,2493+30]..src/codePieces.ml[76,2493+37]) ghost
                                    Texp_ident "Stdlib!.Array.get"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/codePieces.ml[76,2493+30]..src/codePieces.ml[76,2493+33])
                                        Texp_ident "ids/653"
                                    <arg>
                                      Nolabel
                                      expression (src/codePieces.ml[76,2493+35]..src/codePieces.ml[76,2493+36])
                                        Texp_ident "i/654"
                                  ]
                              ]
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[76,2493+39]..src/codePieces.ml[76,2493+47])
                              Texp_construct "WhereEnd"
                              []
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[76,2493+48]..src/codePieces.ml[76,2493+62])
                              Texp_construct "FlavorPosition"
                              []
                        ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[86,2806+0]..src/codePieces.ml[100,3144+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[86,2806+4]..src/codePieces.ml[86,2806+14])
          Tpat_var "semvtypent/655"
        expression (src/codePieces.ml[86,2806+15]..src/codePieces.ml[100,3144+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[86,2806+15]..src/codePieces.ml[86,2806+17])
                Tpat_var "nt/657"
              expression (src/codePieces.ml[87,2826+2]..src/codePieces.ml[100,3144+26])
                Texp_match
                expression (src/codePieces.ml[87,2826+8]..src/codePieces.ml[87,2826+32])
                  Texp_apply
                  expression (src/codePieces.ml[87,2826+8]..src/codePieces.ml[87,2826+29])
                    Texp_ident "Dune__exe!.Grammar.Nonterminal.ocamltype"
                  [
                    <arg>
                      Nolabel
                      expression (src/codePieces.ml[87,2826+30]..src/codePieces.ml[87,2826+32])
                        Texp_ident "nt/657"
                  ]
                [
                  <case>
                    pattern (src/codePieces.ml[88,2864+4]..src/codePieces.ml[88,2864+8])
                      Tpat_value
                      pattern (src/codePieces.ml[88,2864+4]..src/codePieces.ml[88,2864+8])
                        Tpat_construct "None"
                        []
                        None
                    expression (src/codePieces.ml[94,3071+6]..src/codePieces.ml[94,3071+14])
                      Texp_apply
                      expression (src/codePieces.ml[94,3071+6]..src/codePieces.ml[94,3071+11])
                        Texp_ident "ntvar/488"
                      [
                        <arg>
                          Nolabel
                          expression (src/codePieces.ml[94,3071+12]..src/codePieces.ml[94,3071+14])
                            Texp_ident "nt/657"
                      ]
                  <case>
                    pattern (src/codePieces.ml[96,3087+4]..src/codePieces.ml[96,3087+18])
                      Tpat_value
                      pattern (src/codePieces.ml[96,3087+4]..src/codePieces.ml[96,3087+18])
                        Tpat_construct "Some"
                        [
                          pattern (src/codePieces.ml[96,3087+9]..src/codePieces.ml[96,3087+18])
                            Tpat_var "ocamltype/658"
                        ]
                        None
                    expression (src/codePieces.ml[100,3144+6]..src/codePieces.ml[100,3144+26])
                      Texp_construct "TypTextual"
                      [
                        expression (src/codePieces.ml[100,3144+17]..src/codePieces.ml[100,3144+26])
                          Texp_ident "ocamltype/658"
                      ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[106,3333+0]..src/codePieces.ml[119,3638+30])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[106,3333+4]..src/codePieces.ml[106,3333+15])
          Tpat_var "semvtypetok/663"
        expression (src/codePieces.ml[106,3333+16]..src/codePieces.ml[119,3638+30]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[106,3333+16]..src/codePieces.ml[106,3333+19])
                Tpat_var "tok/665"
              expression (src/codePieces.ml[107,3355+2]..src/codePieces.ml[119,3638+30])
                Texp_match
                expression (src/codePieces.ml[107,3355+8]..src/codePieces.ml[107,3355+30])
                  Texp_apply
                  expression (src/codePieces.ml[107,3355+8]..src/codePieces.ml[107,3355+26])
                    Texp_ident "Dune__exe!.Grammar.Terminal.ocamltype"
                  [
                    <arg>
                      Nolabel
                      expression (src/codePieces.ml[107,3355+27]..src/codePieces.ml[107,3355+30])
                        Texp_ident "tok/665"
                  ]
                [
                  <case>
                    pattern (src/codePieces.ml[108,3391+4]..src/codePieces.ml[108,3391+8])
                      Tpat_value
                      pattern (src/codePieces.ml[108,3391+4]..src/codePieces.ml[108,3391+8])
                        Tpat_construct "None"
                        []
                        None
                    expression (src/codePieces.ml[113,3521+6]..src/codePieces.ml[113,3521+57])
                      Texp_ifthenelse
                      expression (src/codePieces.ml[113,3521+9]..src/codePieces.ml[113,3521+34])
                        Texp_ident "Dune__exe!.Settings.represent_values"
                      expression (src/codePieces.ml[113,3521+40]..src/codePieces.ml[113,3521+49])
                        Texp_construct "::"
                        [
                          expression (src/codePieces.ml[113,3521+42]..src/codePieces.ml[113,3521+47])
                            Texp_ident "Dune__exe!.CodeBits.tunit"
                          expression (src/codePieces.ml[113,3521+48]..src/codePieces.ml[113,3521+49]) ghost
                            Texp_construct "[]"
                            []
                        ]
                      Some
                        expression (src/codePieces.ml[113,3521+55]..src/codePieces.ml[113,3521+57])
                          Texp_construct "[]"
                          []
                  <case>
                    pattern (src/codePieces.ml[115,3580+4]..src/codePieces.ml[115,3580+18])
                      Tpat_value
                      pattern (src/codePieces.ml[115,3580+4]..src/codePieces.ml[115,3580+18])
                        Tpat_construct "Some"
                        [
                          pattern (src/codePieces.ml[115,3580+9]..src/codePieces.ml[115,3580+18])
                            Tpat_var "ocamltype/725"
                        ]
                        None
                    expression (src/codePieces.ml[119,3638+6]..src/codePieces.ml[119,3638+30])
                      Texp_construct "::"
                      [
                        expression (src/codePieces.ml[119,3638+8]..src/codePieces.ml[119,3638+28])
                          Texp_construct "TypTextual"
                          [
                            expression (src/codePieces.ml[119,3638+19]..src/codePieces.ml[119,3638+28])
                              Texp_ident "ocamltype/725"
                          ]
                        expression (src/codePieces.ml[119,3638+29]..src/codePieces.ml[119,3638+30]) ghost
                          Texp_construct "[]"
                          []
                      ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[124,3758+0]..src/codePieces.ml[128,3843+23])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[124,3758+4]..src/codePieces.ml[124,3758+12])
          Tpat_var "semvtype/786"
        expression (src/codePieces.ml[124,3758+15]..src/codePieces.ml[128,3843+23])
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[125,3782+4]..src/codePieces.ml[125,3782+16])
                Tpat_construct "Symbol.T"
                [
                  pattern (src/codePieces.ml[125,3782+13]..src/codePieces.ml[125,3782+16])
                    Tpat_var "tok/799"
                ]
                None
              expression (src/codePieces.ml[126,3802+6]..src/codePieces.ml[126,3802+21])
                Texp_apply
                expression (src/codePieces.ml[126,3802+6]..src/codePieces.ml[126,3802+17])
                  Texp_ident "semvtypetok/663"
                [
                  <arg>
                    Nolabel
                    expression (src/codePieces.ml[126,3802+18]..src/codePieces.ml[126,3802+21])
                      Texp_ident "tok/799"
                ]
            <case>
              pattern (src/codePieces.ml[127,3824+4]..src/codePieces.ml[127,3824+15])
                Tpat_construct "Symbol.N"
                [
                  pattern (src/codePieces.ml[127,3824+13]..src/codePieces.ml[127,3824+15])
                    Tpat_var "nt/811"
                ]
                None
              expression (src/codePieces.ml[128,3843+6]..src/codePieces.ml[128,3843+23])
                Texp_construct "::"
                [
                  expression (src/codePieces.ml[128,3843+8]..src/codePieces.ml[128,3843+21])
                    Texp_apply
                    expression (src/codePieces.ml[128,3843+8]..src/codePieces.ml[128,3843+18])
                      Texp_ident "semvtypent/655"
                    [
                      <arg>
                        Nolabel
                        expression (src/codePieces.ml[128,3843+19]..src/codePieces.ml[128,3843+21])
                          Texp_ident "nt/811"
                    ]
                  expression (src/codePieces.ml[128,3843+22]..src/codePieces.ml[128,3843+23]) ghost
                    Texp_construct "[]"
                    []
                ]
          ]
    ]
  structure_item (src/codePieces.ml[137,4112+0]..src/codePieces.ml[142,4268+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[137,4112+4]..src/codePieces.ml[137,4112+10])
          Tpat_var "tokpat/813"
        expression (src/codePieces.ml[137,4112+11]..src/codePieces.ml[142,4268+3]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[137,4112+11]..src/codePieces.ml[137,4112+14])
                Tpat_var "tok/815"
              expression (src/codePieces.ml[137,4112+15]..src/codePieces.ml[142,4268+3]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/codePieces.ml[137,4112+15]..src/codePieces.ml[137,4112+18])
                      Tpat_var "pat/816"
                    expression (src/codePieces.ml[138,4133+2]..src/codePieces.ml[142,4268+3])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/codePieces.ml[138,4133+6]..src/codePieces.ml[138,4133+10])
                            Tpat_var "data/817"
                          expression (src/codePieces.ml[138,4133+13]..src/codePieces.ml[138,4133+53])
                            Texp_apply
                            expression (src/codePieces.ml[138,4133+13]..src/codePieces.ml[138,4133+32])
                              Texp_ident "Dune__exe!.TokenType.tokendata"
                            [
                              <arg>
                                Nolabel
                                expression (src/codePieces.ml[138,4133+33]..src/codePieces.ml[138,4133+53])
                                  Texp_apply
                                  expression (src/codePieces.ml[138,4133+34]..src/codePieces.ml[138,4133+48])
                                    Texp_ident "Dune__exe!.Grammar.Terminal.print"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/codePieces.ml[138,4133+49]..src/codePieces.ml[138,4133+52])
                                        Texp_ident "tok/815"
                                  ]
                            ]
                      ]
                      expression (src/codePieces.ml[139,4190+2]..src/codePieces.ml[142,4268+3])
                        Texp_construct "PData"
                        [
                          expression (src/codePieces.ml[140,4200+4]..src/codePieces.ml[140,4200+8])
                            Texp_ident "data/817"
                          expression (src/codePieces.ml[141,4210+4]..src/codePieces.ml[141,4210+57])
                            Texp_ifthenelse
                            expression (src/codePieces.ml[141,4210+7]..src/codePieces.ml[141,4210+36])
                              Texp_apply
                              expression (src/codePieces.ml[141,4210+30]..src/codePieces.ml[141,4210+31])
                                Texp_ident "Stdlib!.="
                              [
                                <arg>
                                  Nolabel
                                  expression (src/codePieces.ml[141,4210+7]..src/codePieces.ml[141,4210+29])
                                    Texp_apply
                                    expression (src/codePieces.ml[141,4210+7]..src/codePieces.ml[141,4210+25])
                                      Texp_ident "Dune__exe!.Grammar.Terminal.ocamltype"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/codePieces.ml[141,4210+26]..src/codePieces.ml[141,4210+29])
                                          Texp_ident "tok/815"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/codePieces.ml[141,4210+32]..src/codePieces.ml[141,4210+36])
                                    Texp_construct "None"
                                    []
                              ]
                            expression (src/codePieces.ml[141,4210+42]..src/codePieces.ml[141,4210+44])
                              Texp_construct "[]"
                              []
                            Some
                              expression (src/codePieces.ml[141,4210+50]..src/codePieces.ml[141,4210+57])
                                Texp_construct "::"
                                [
                                  expression (src/codePieces.ml[141,4210+52]..src/codePieces.ml[141,4210+55])
                                    Texp_ident "pat/816"
                                  expression (src/codePieces.ml[141,4210+56]..src/codePieces.ml[141,4210+57]) ghost
                                    Texp_construct "[]"
                                    []
                                ]
                        ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[148,4450+0]..src/codePieces.ml[152,4558+5])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[148,4450+4]..src/codePieces.ml[148,4450+17])
          Tpat_var "tok_bind_unit/826"
        expression (src/codePieces.ml[148,4450+18]..src/codePieces.ml[152,4558+5]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[148,4450+18]..src/codePieces.ml[148,4450+21])
                Tpat_var "tok/828"
              expression (src/codePieces.ml[148,4450+22]..src/codePieces.ml[152,4558+5]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/codePieces.ml[148,4450+22]..src/codePieces.ml[148,4450+25])
                      Tpat_var "pat/829"
                    expression (src/codePieces.ml[148,4450+26]..src/codePieces.ml[152,4558+5]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/codePieces.ml[148,4450+26]..src/codePieces.ml[148,4450+27])
                            Tpat_var "e/830"
                          expression (src/codePieces.ml[149,4480+2]..src/codePieces.ml[152,4558+5])
                            Texp_ifthenelse
                            expression (src/codePieces.ml[149,4480+5]..src/codePieces.ml[149,4480+34])
                              Texp_apply
                              expression (src/codePieces.ml[149,4480+28]..src/codePieces.ml[149,4480+29])
                                Texp_ident "Stdlib!.="
                              [
                                <arg>
                                  Nolabel
                                  expression (src/codePieces.ml[149,4480+5]..src/codePieces.ml[149,4480+27])
                                    Texp_apply
                                    expression (src/codePieces.ml[149,4480+5]..src/codePieces.ml[149,4480+23])
                                      Texp_ident "Dune__exe!.Grammar.Terminal.ocamltype"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/codePieces.ml[149,4480+24]..src/codePieces.ml[149,4480+27])
                                          Texp_ident "tok/828"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/codePieces.ml[149,4480+30]..src/codePieces.ml[149,4480+34])
                                    Texp_construct "None"
                                    []
                              ]
                            expression (src/codePieces.ml[150,4520+4]..src/codePieces.ml[150,4520+30])
                              Texp_apply
                              expression (src/codePieces.ml[150,4520+4]..src/codePieces.ml[150,4520+8])
                                Texp_ident "Dune__exe!.CodeBits.blet"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/codePieces.ml[150,4520+9]..src/codePieces.ml[150,4520+30])
                                    Texp_tuple
                                    [
                                      expression (src/codePieces.ml[150,4520+10]..src/codePieces.ml[150,4520+26])
                                        Texp_construct "::"
                                        [
                                          expression (src/codePieces.ml[150,4520+12]..src/codePieces.ml[150,4520+24])
                                            Texp_tuple
                                            [
                                              expression (src/codePieces.ml[150,4520+13]..src/codePieces.ml[150,4520+16])
                                                Texp_ident "pat/829"
                                              expression (src/codePieces.ml[150,4520+18]..src/codePieces.ml[150,4520+23])
                                                Texp_construct "EUnit"
                                                []
                                            ]
                                          expression (src/codePieces.ml[150,4520+25]..src/codePieces.ml[150,4520+26]) ghost
                                            Texp_construct "[]"
                                            []
                                        ]
                                      expression (src/codePieces.ml[150,4520+28]..src/codePieces.ml[150,4520+29])
                                        Texp_ident "e/830"
                                    ]
                              ]
                            Some
                              expression (src/codePieces.ml[152,4558+4]..src/codePieces.ml[152,4558+5])
                                Texp_ident "e/830"
                      ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[157,4681+0]..src/codePieces.ml[162,4795+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[157,4681+4]..src/codePieces.ml[157,4681+11])
          Tpat_var "tokspat/831"
        expression (src/codePieces.ml[157,4681+12]..src/codePieces.ml[162,4795+3]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[157,4681+12]..src/codePieces.ml[157,4681+16])
                Tpat_var "toks/833"
              expression (src/codePieces.ml[158,4700+2]..src/codePieces.ml[162,4795+3])
                Texp_construct "POr"
                [
                  expression (src/codePieces.ml[158,4700+6]..src/codePieces.ml[162,4795+3])
                    Texp_apply
                    expression (src/codePieces.ml[159,4708+4]..src/codePieces.ml[159,4708+20])
                      Texp_ident "Dune__exe!.Grammar.TerminalSet.fold"
                    [
                      <arg>
                        Nolabel
                        expression (src/codePieces.ml[159,4708+21]..src/codePieces.ml[161,4781+5])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/codePieces.ml[159,4708+26]..src/codePieces.ml[159,4708+29])
                                Tpat_var "tok/856"
                              expression (src/codePieces.ml[159,4708+30]..src/codePieces.ml[160,4746+34]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/codePieces.ml[159,4708+30]..src/codePieces.ml[159,4708+34])
                                      Tpat_var "pats/857"
                                    expression (src/codePieces.ml[160,4746+6]..src/codePieces.ml[160,4746+34])
                                      Texp_construct "::"
                                      [
                                        expression (src/codePieces.ml[160,4746+6]..src/codePieces.ml[160,4746+26])
                                          Texp_apply
                                          expression (src/codePieces.ml[160,4746+6]..src/codePieces.ml[160,4746+12])
                                            Texp_ident "tokpat/813"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/codePieces.ml[160,4746+13]..src/codePieces.ml[160,4746+16])
                                                Texp_ident "tok/856"
                                            <arg>
                                              Nolabel
                                              expression (src/codePieces.ml[160,4746+17]..src/codePieces.ml[160,4746+26])
                                                Texp_construct "PWildcard"
                                                []
                                          ]
                                        expression (src/codePieces.ml[160,4746+30]..src/codePieces.ml[160,4746+34])
                                          Texp_ident "pats/857"
                                      ]
                                ]
                          ]
                      <arg>
                        Nolabel
                        expression (src/codePieces.ml[161,4781+6]..src/codePieces.ml[161,4781+10])
                          Texp_ident "toks/833"
                      <arg>
                        Nolabel
                        expression (src/codePieces.ml[161,4781+11]..src/codePieces.ml[161,4781+13])
                          Texp_construct "[]"
                          []
                    ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[171,5175+0]..src/codePieces.ml[189,5698+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[171,5175+4]..src/codePieces.ml[171,5175+23])
          Tpat_var "destructuretokendef/880"
        expression (src/codePieces.ml[171,5175+24]..src/codePieces.ml[189,5698+1]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[171,5175+24]..src/codePieces.ml[171,5175+28])
                Tpat_var "name/882"
              expression (src/codePieces.ml[171,5175+29]..src/codePieces.ml[189,5698+1]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/codePieces.ml[171,5175+29]..src/codePieces.ml[171,5175+37])
                      Tpat_var "codomain/883"
                    expression (src/codePieces.ml[171,5175+38]..src/codePieces.ml[189,5698+1]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/codePieces.ml[171,5175+38]..src/codePieces.ml[171,5175+46])
                            Tpat_var "bindsemv/884"
                          expression (src/codePieces.ml[171,5175+47]..src/codePieces.ml[189,5698+1]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/codePieces.ml[171,5175+47]..src/codePieces.ml[171,5175+53])
                                  Tpat_var "branch/885"
                                expression (src/codePieces.ml[171,5175+56]..src/codePieces.ml[189,5698+1])
                                  Texp_record
                                    fields =
                                      [
                                        "valpublic"
                                          expression (src/codePieces.ml[172,5233+14]..src/codePieces.ml[172,5233+19])
                                            Texp_construct "false"
                                            []
                                        "valpat"
                                          expression (src/codePieces.ml[173,5254+11]..src/codePieces.ml[173,5254+20])
                                            Texp_construct "PVar"
                                            [
                                              expression (src/codePieces.ml[173,5254+16]..src/codePieces.ml[173,5254+20])
                                                Texp_ident "name/882"
                                            ]
                                        "valval"
                                          expression (src/codePieces.ml[175,5287+4]..src/codePieces.ml[188,5660+37])
                                            Texp_apply
                                            expression (src/codePieces.ml[175,5287+4]..src/codePieces.ml[175,5287+12])
                                              Texp_ident "Dune__exe!.CodeBits.annotate"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/codePieces.ml[175,5287+13]..src/codePieces.ml[187,5654+5])
                                                  Texp_construct "EFun"
                                                  [
                                                    expression (src/codePieces.ml[176,5302+12]..src/codePieces.ml[176,5302+26])
                                                      Texp_construct "::"
                                                      [
                                                        expression (src/codePieces.ml[176,5302+14]..src/codePieces.ml[176,5302+24])
                                                          Texp_construct "PVar"
                                                          [
                                                            expression (src/codePieces.ml[176,5302+19]..src/codePieces.ml[176,5302+24])
                                                              Texp_ident "token/583"
                                                          ]
                                                        expression (src/codePieces.ml[176,5302+25]..src/codePieces.ml[176,5302+26]) ghost
                                                          Texp_construct "[]"
                                                          []
                                                      ]
                                                    expression (src/codePieces.ml[177,5330+8]..src/codePieces.ml[185,5636+9])
                                                      Texp_construct "EMatch"
                                                      [
                                                        expression (src/codePieces.ml[177,5330+16]..src/codePieces.ml[177,5330+26])
                                                          Texp_construct "EVar"
                                                          [
                                                            expression (src/codePieces.ml[177,5330+21]..src/codePieces.ml[177,5330+26])
                                                              Texp_ident "token/583"
                                                          ]
                                                        expression (src/codePieces.ml[178,5358+10]..src/codePieces.ml[184,5621+14])
                                                          Texp_apply
                                                          expression (src/codePieces.ml[178,5358+10]..src/codePieces.ml[178,5358+23])
                                                            Texp_ident "Dune__exe!.Grammar.Terminal.fold"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/codePieces.ml[178,5358+24]..src/codePieces.ml[184,5621+11])
                                                                Texp_function
                                                                Nolabel
                                                                [
                                                                  <case>
                                                                    pattern (src/codePieces.ml[178,5358+29]..src/codePieces.ml[178,5358+32])
                                                                      Tpat_var "tok/886"
                                                                    expression (src/codePieces.ml[178,5358+33]..src/codePieces.ml[183,5567+53]) ghost
                                                                      Texp_function
                                                                      Nolabel
                                                                      [
                                                                        <case>
                                                                          pattern (src/codePieces.ml[178,5358+33]..src/codePieces.ml[178,5358+41])
                                                                            Tpat_var "branches/887"
                                                                          expression (src/codePieces.ml[179,5403+12]..src/codePieces.ml[183,5567+53])
                                                                            Texp_ifthenelse
                                                                            expression (src/codePieces.ml[179,5403+15]..src/codePieces.ml[179,5403+34])
                                                                              Texp_apply
                                                                              expression (src/codePieces.ml[179,5403+15]..src/codePieces.ml[179,5403+30])
                                                                                Texp_ident "Dune__exe!.Grammar.Terminal.pseudo"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/codePieces.ml[179,5403+31]..src/codePieces.ml[179,5403+34])
                                                                                    Texp_ident "tok/886"
                                                                              ]
                                                                            expression (src/codePieces.ml[180,5443+14]..src/codePieces.ml[180,5443+22])
                                                                              Texp_ident "branches/887"
                                                                            Some
                                                                              expression (src/codePieces.ml[182,5483+14]..src/codePieces.ml[183,5567+53])
                                                                                Texp_construct "::"
                                                                                [
                                                                                  expression (src/codePieces.ml[182,5483+14]..src/codePieces.ml[183,5567+41])
                                                                                    Texp_record
                                                                                      fields =
                                                                                        [
                                                                                          "branchpat"
                                                                                            expression (src/codePieces.ml[182,5483+28]..src/codePieces.ml[182,5483+82])
                                                                                              Texp_apply
                                                                                              expression (src/codePieces.ml[182,5483+28]..src/codePieces.ml[182,5483+34])
                                                                                                Texp_ident "tokpat/813"
                                                                                              [
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/codePieces.ml[182,5483+35]..src/codePieces.ml[182,5483+38])
                                                                                                    Texp_ident "tok/886"
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/codePieces.ml[182,5483+39]..src/codePieces.ml[182,5483+82])
                                                                                                    Texp_ifthenelse
                                                                                                    expression (src/codePieces.ml[182,5483+43]..src/codePieces.ml[182,5483+51])
                                                                                                      Texp_ident "bindsemv/884"
                                                                                                    expression (src/codePieces.ml[182,5483+57]..src/codePieces.ml[182,5483+66])
                                                                                                      Texp_construct "PVar"
                                                                                                      [
                                                                                                        expression (src/codePieces.ml[182,5483+62]..src/codePieces.ml[182,5483+66])
                                                                                                          Texp_ident "semv/580"
                                                                                                      ]
                                                                                                    Some
                                                                                                      expression (src/codePieces.ml[182,5483+72]..src/codePieces.ml[182,5483+81])
                                                                                                        Texp_construct "PWildcard"
                                                                                                        []
                                                                                              ]
                                                                                          "branchbody"
                                                                                            expression (src/codePieces.ml[183,5567+29]..src/codePieces.ml[183,5567+39])
                                                                                              Texp_apply
                                                                                              expression (src/codePieces.ml[183,5567+29]..src/codePieces.ml[183,5567+35])
                                                                                                Texp_ident "branch/885"
                                                                                              [
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/codePieces.ml[183,5567+36]..src/codePieces.ml[183,5567+39])
                                                                                                    Texp_ident "tok/886"
                                                                                              ]
                                                                                        ]
                                                                                      representation =
                                                                                        Record_regular
                                                                                      extended_expression =
                                                                                        None
                                                                                  expression (src/codePieces.ml[183,5567+45]..src/codePieces.ml[183,5567+53])
                                                                                    Texp_ident "branches/887"
                                                                                ]
                                                                      ]
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/codePieces.ml[184,5621+12]..src/codePieces.ml[184,5621+14])
                                                                Texp_construct "[]"
                                                                []
                                                          ]
                                                      ]
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/codePieces.ml[188,5660+4]..src/codePieces.ml[188,5660+37])
                                                  Texp_apply
                                                  expression (src/codePieces.ml[188,5660+5]..src/codePieces.ml[188,5660+10])
                                                    Texp_ident "Dune__exe!.CodeBits.arrow"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/codePieces.ml[188,5660+11]..src/codePieces.ml[188,5660+27])
                                                        Texp_ident "Dune__exe!.TokenType.ttoken"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/codePieces.ml[188,5660+28]..src/codePieces.ml[188,5660+36])
                                                        Texp_ident "codomain/883"
                                                  ]
                                            ]
                                      ]
                                    representation =
                                      Record_regular
                                    extended_expression =
                                      None
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/codePieces.ml[201,6146+0]..src/codePieces.ml[202,6164+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[201,6146+4]..src/codePieces.ml[201,6146+15])
          Tpat_var "parse_error/888"
        expression (src/codePieces.ml[202,6164+2]..src/codePieces.ml[202,6164+8])
          Texp_constant Const_string("_eRR",(src/codePieces.ml[202,6164+3]..src/codePieces.ml[202,6164+7]),None)
    ]
  structure_item (src/codePieces.ml[204,6174+0]..src/codePieces.ml[205,6189+18])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[204,6174+4]..src/codePieces.ml[204,6174+12])
          Tpat_var "errorval/889"
        expression (src/codePieces.ml[205,6189+2]..src/codePieces.ml[205,6189+18])
          Texp_construct "EVar"
          [
            expression (src/codePieces.ml[205,6189+7]..src/codePieces.ml[205,6189+18])
              Texp_ident "parse_error/888"
          ]
    ]
  structure_item (src/codePieces.ml[207,6209+0]..src/codePieces.ml[208,6222+16])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[207,6209+4]..src/codePieces.ml[207,6209+10])
          Tpat_var "basics/890"
        expression (src/codePieces.ml[208,6222+2]..src/codePieces.ml[208,6222+16])
          Texp_constant Const_string("MenhirBasics",(src/codePieces.ml[208,6222+3]..src/codePieces.ml[208,6222+15]),None)
    ]
  structure_item (src/codePieces.ml[217,6595+0]..src/codePieces.ml[221,6731+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[217,6595+4]..src/codePieces.ml[217,6595+13])
          Tpat_var "excvaldef/891"
        expression (src/codePieces.ml[217,6595+16]..src/codePieces.ml[221,6731+1])
          Texp_record
            fields =
              [
                "valpublic"
                  expression (src/codePieces.ml[218,6613+14]..src/codePieces.ml[218,6613+19])
                    Texp_construct "false"
                    []
                "valpat"
                  expression (src/codePieces.ml[219,6634+11]..src/codePieces.ml[219,6634+27])
                    Texp_construct "PVar"
                    [
                      expression (src/codePieces.ml[219,6634+16]..src/codePieces.ml[219,6634+27])
                        Texp_ident "parse_error/888"
                    ]
                "valval"
                  expression (src/codePieces.ml[220,6663+11]..src/codePieces.ml[220,6663+67])
                    Texp_construct "EAnnot"
                    [
                      expression (src/codePieces.ml[220,6663+19]..src/codePieces.ml[220,6663+48])
                        Texp_construct "EData"
                        [
                          expression (src/codePieces.ml[220,6663+26]..src/codePieces.ml[220,6663+43])
                            Texp_ident "Dune__exe!.Interface.excname"
                          expression (src/codePieces.ml[220,6663+45]..src/codePieces.ml[220,6663+47])
                            Texp_construct "[]"
                            []
                        ]
                      expression (src/codePieces.ml[220,6663+50]..src/codePieces.ml[220,6663+66])
                        Texp_apply
                        expression (src/codePieces.ml[220,6663+50]..src/codePieces.ml[220,6663+61])
                          Texp_ident "Dune__exe!.CodeBits.type2scheme"
                        [
                          <arg>
                            Nolabel
                            expression (src/codePieces.ml[220,6663+62]..src/codePieces.ml[220,6663+66])
                              Texp_ident "Dune__exe!.CodeBits.texn"
                        ]
                    ]
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/codePieces.ml[229,7031+0]..src/codePieces.ml[254,7775+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/codePieces.ml[229,7031+4]..src/codePieces.ml[229,7031+11])
          Tpat_var "mbasics/900"
        expression (src/codePieces.ml[229,7031+12]..src/codePieces.ml[254,7775+1]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/codePieces.ml[229,7031+12]..src/codePieces.ml[229,7031+19])
                Tpat_var "grammar/902"
              expression (src/codePieces.ml[229,7031+22]..src/codePieces.ml[254,7775+1])
                Texp_construct "::"
                [
                  expression (src/codePieces.ml[232,7085+2]..src/codePieces.ml[249,7703+4])
                    Texp_construct "SIModuleDef"
                    [
                      expression (src/codePieces.ml[232,7085+15]..src/codePieces.ml[232,7085+21])
                        Texp_ident "basics/890"
                      expression (src/codePieces.ml[232,7085+23]..src/codePieces.ml[249,7703+3])
                        Texp_construct "MStruct"
                        [
                          expression (src/codePieces.ml[232,7085+31]..src/codePieces.ml[249,7703+3])
                            Texp_construct "::"
                            [
                              expression (src/codePieces.ml[235,7152+4]..src/codePieces.ml[235,7152+34])
                                Texp_construct "SIExcDefs"
                                [
                                  expression (src/codePieces.ml[235,7152+14]..src/codePieces.ml[235,7152+34])
                                    Texp_construct "::"
                                    [
                                      expression (src/codePieces.ml[235,7152+16]..src/codePieces.ml[235,7152+32])
                                        Texp_ident "Dune__exe!.Interface.excdef"
                                      expression (src/codePieces.ml[235,7152+33]..src/codePieces.ml[235,7152+34]) ghost
                                        Texp_construct "[]"
                                        []
                                    ]
                                ]
                              expression (src/codePieces.ml[242,7561+4]..src/codePieces.ml[247,7696+5])
                                Texp_construct "::"
                                [
                                  expression (src/codePieces.ml[242,7561+4]..src/codePieces.ml[242,7561+36])
                                    Texp_construct "SIValDefs"
                                    [
                                      expression (src/codePieces.ml[242,7561+15]..src/codePieces.ml[242,7561+20])
                                        Texp_construct "false"
                                        []
                                      expression (src/codePieces.ml[242,7561+22]..src/codePieces.ml[242,7561+35])
                                        Texp_construct "::"
                                        [
                                          expression (src/codePieces.ml[242,7561+24]..src/codePieces.ml[242,7561+33])
                                            Texp_ident "excvaldef/891"
                                          expression (src/codePieces.ml[242,7561+34]..src/codePieces.ml[242,7561+35]) ghost
                                            Texp_construct "[]"
                                            []
                                        ]
                                    ]
                                  expression (src/codePieces.ml[245,7630+4]..src/codePieces.ml[247,7696+5])
                                    Texp_apply
                                    expression (src/codePieces.ml[245,7630+4]..src/codePieces.ml[245,7630+26])
                                      Texp_ident "Dune__exe!.CodeBits.interface_to_structure"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/codePieces.ml[245,7630+27]..src/codePieces.ml[247,7696+5])
                                          Texp_apply
                                          expression (src/codePieces.ml[246,7659+6]..src/codePieces.ml[246,7659+28])
                                            Texp_ident "Dune__exe!.TokenType.tokentypedef"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/codePieces.ml[246,7659+29]..src/codePieces.ml[246,7659+36])
                                                Texp_ident "grammar/902"
                                          ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                  expression (src/codePieces.ml[252,7747+2]..src/codePieces.ml[254,7775+1]) ghost
                    Texp_construct "::"
                    [
                      expression (src/codePieces.ml[252,7747+2]..src/codePieces.ml[252,7747+25])
                        Texp_construct "SIInclude"
                        [
                          expression (src/codePieces.ml[252,7747+12]..src/codePieces.ml[252,7747+25])
                            Texp_construct "MVar"
                            [
                              expression (src/codePieces.ml[252,7747+18]..src/codePieces.ml[252,7747+24])
                                Texp_ident "basics/890"
                            ]
                        ]
                      expression (src/codePieces.ml[254,7775+0]..src/codePieces.ml[254,7775+1]) ghost
                        Texp_construct "[]"
                        []
                    ]
                ]
          ]
    ]
]

{<Dune__exe__CodePieces>
 "basics"[value] -> <Dune__exe__CodePieces.45>;
 "beforeendp"[value] -> <Dune__exe__CodePieces.6>;
 "destructuretokendef"[value] -> <Dune__exe__CodePieces.36>;
 "endp"[value] -> <Dune__exe__CodePieces.8>;
 "endpos"[value] -> <Dune__exe__CodePieces.12>;
 "errorval"[value] -> <Dune__exe__CodePieces.44>;
 "mbasics"[value] -> <Dune__exe__CodePieces.47>;
 "semv"[value] -> <Dune__exe__CodePieces.2>;
 "semvtype"[value] -> <Dune__exe__CodePieces.21>;
 "semvtypent"[value] -> <Dune__exe__CodePieces.15>;
 "stack"[value] -> <Dune__exe__CodePieces.3>;
 "startp"[value] -> <Dune__exe__CodePieces.7>;
 "startpos"[value] -> <Dune__exe__CodePieces.9>;
 "state"[value] -> <Dune__exe__CodePieces.4>;
 "tok_bind_unit"[value] -> <Dune__exe__CodePieces.28>;
 "token"[value] -> <Dune__exe__CodePieces.5>;
 "tokpat"[value] -> <Dune__exe__CodePieces.24>;
 "tokspat"[value] -> <Dune__exe__CodePieces.32>;
 }

(seq
  (let
    (ntvar/488 =
       (function nt/490
         (apply (field_imm 0 (global Dune__exe__Infer!))
           (apply (field_imm 5 (field_imm 0 (global Dune__exe__Grammar!))) 1
             nt/490))))
    (setfield_ptr(root-init) 18 (global Dune__exe__CodePieces!) ntvar/488))
  (let (semv/580 = "_v")
    (setfield_ptr(root-init) 0 (global Dune__exe__CodePieces!) semv/580))
  (let
    (stack/581 = (apply (field_imm 39 (global Dune__exe__CodeBits!)) "stack"))
    (setfield_ptr(root-init) 1 (global Dune__exe__CodePieces!) stack/581))
  (let (state/582 = (apply (field_imm 39 (global Dune__exe__CodeBits!)) "s"))
    (setfield_ptr(root-init) 2 (global Dune__exe__CodePieces!) state/582))
  (let (token/583 = "_tok")
    (setfield_ptr(root-init) 3 (global Dune__exe__CodePieces!) token/583))
  (let
    (beforeendp/584 =
       (apply (field_imm 0 (global MenhirSdk__Keyword!)) 0 2 1))
    (setfield_ptr(root-init) 4 (global Dune__exe__CodePieces!)
      beforeendp/584))
  (let
    (startp/597 = (apply (field_imm 0 (global MenhirSdk__Keyword!)) 1 1 1))
    (setfield_ptr(root-init) 5 (global Dune__exe__CodePieces!) startp/597))
  (let (endp/598 = (apply (field_imm 0 (global MenhirSdk__Keyword!)) 1 2 1))
    (setfield_ptr(root-init) 6 (global Dune__exe__CodePieces!) endp/598))
  (let
    (startpos/599 =
       (function ids/601 i/602[int]
         (apply (field_imm 0 (global MenhirSdk__Keyword!))
           (makeblock 0 (array.get[addr] ids/601 i/602)) 1 1)))
    (setfield_ptr(root-init) 7 (global Dune__exe__CodePieces!) startpos/599))
  (let
    (endpos/651 =
       (function ids/653 i/654[int]
         (apply (field_imm 0 (global MenhirSdk__Keyword!))
           (makeblock 0 (array.get[addr] ids/653 i/654)) 2 1)))
    (setfield_ptr(root-init) 8 (global Dune__exe__CodePieces!) endpos/651))
  (let
    (semvtypent/655 =
       (function nt/657
         (let
           (*match*/4361 =
              (apply (field_imm 6 (field_imm 0 (global Dune__exe__Grammar!)))
                nt/657))
           (if (isint *match*/4361)
             (apply (field_imm 18 (global Dune__exe__CodePieces!)) nt/657)
             (let (ocamltype/658 =a (field_imm 0 *match*/4361))
               (makeblock 0 ocamltype/658))))))
    (setfield_ptr(root-init) 9 (global Dune__exe__CodePieces!)
      semvtypent/655))
  (let
    (semvtypetok/663 =
       (function tok/665
         (let
           (*match*/4362 =
              (apply (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
                tok/665))
           (if (isint *match*/4362)
             (if (field_imm 17 (global Dune__exe__Settings!))
               (makeblock 0 (field_imm 6 (global Dune__exe__CodeBits!)) 0) 0)
             (let (ocamltype/725 =a (field_imm 0 *match*/4362))
               (makeblock 0 (makeblock 0 ocamltype/725) 0))))))
    (setfield_ptr(root-init) 19 (global Dune__exe__CodePieces!)
      semvtypetok/663))
  (let
    (semvtype/786 =
       (function param/812
         (switch* param/812
          case tag 0:
           (let (nt/811 =a (field_imm 0 param/812))
             (makeblock 0
               (apply (field_imm 9 (global Dune__exe__CodePieces!)) nt/811)
               0))
          case tag 1:
           (let (tok/799 =a (field_imm 0 param/812))
             (apply (field_imm 19 (global Dune__exe__CodePieces!)) tok/799)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__CodePieces!) semvtype/786))
  (let
    (tokpat/813 =
       (function tok/815 pat/816
         (let
           (data/817 =
              (apply (field_imm 1 (global Dune__exe__TokenType!))
                (apply
                  (field_imm 6 (field_imm 2 (global Dune__exe__Grammar!)))
                  tok/815)))
           (makeblock 2 data/817
             (if
               (==
                 (apply
                   (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
                   tok/815)
                 0)
               0 (makeblock 0 pat/816 0))))))
    (setfield_ptr(root-init) 11 (global Dune__exe__CodePieces!) tokpat/813))
  (let
    (tok_bind_unit/826 =
       (function tok/828 pat/829 e/830
         (if
           (==
             (apply (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
               tok/828)
             0)
           (apply (field_imm 20 (global Dune__exe__CodeBits!))
             (makeblock 0 (makeblock 0 (makeblock 0 pat/829 0) 0) e/830))
           e/830)))
    (setfield_ptr(root-init) 13 (global Dune__exe__CodePieces!)
      tok_bind_unit/826))
  (let
    (tokspat/831 =
       (function toks/833
         (makeblock 5
           (apply (field_imm 13 (field_imm 3 (global Dune__exe__Grammar!)))
             (function tok/856 pats/857
               (makeblock 0
                 (apply (field_imm 11 (global Dune__exe__CodePieces!))
                   tok/856 0)
                 pats/857))
             toks/833 0))))
    (setfield_ptr(root-init) 12 (global Dune__exe__CodePieces!) tokspat/831))
  (let
    (destructuretokendef/880 =
       (function name/882 codomain/883 bindsemv/884[int] branch/885
         (makeblock 0 (int,*,*) 0 (makeblock 0 name/882)
           (apply (field_imm 18 (global Dune__exe__CodeBits!))
             (makeblock 1
               (makeblock 0
                 (makeblock 0 (field_imm 3 (global Dune__exe__CodePieces!)))
                 0)
               (makeblock 4
                 (makeblock 0 (field_imm 3 (global Dune__exe__CodePieces!)))
                 (apply
                   (field_imm 17 (field_imm 2 (global Dune__exe__Grammar!)))
                   (function tok/886 branches/887
                     (if
                       (apply
                         (field_imm 12
                           (field_imm 2 (global Dune__exe__Grammar!)))
                         tok/886)
                       branches/887
                       (makeblock 0
                         (makeblock 0
                           (apply
                             (field_imm 11 (global Dune__exe__CodePieces!))
                             tok/886
                             (if bindsemv/884
                               (makeblock 0
                                 (field_imm 0
                                   (global Dune__exe__CodePieces!)))
                               0))
                           (apply branch/885 tok/886))
                         branches/887)))
                   0)))
             (apply (field_imm 33 (global Dune__exe__CodeBits!))
               (field_imm 0 (global Dune__exe__TokenType!)) codomain/883)))))
    (setfield_ptr(root-init) 14 (global Dune__exe__CodePieces!)
      destructuretokendef/880))
  (let (parse_error/888 = "_eRR")
    (setfield_ptr(root-init) 20 (global Dune__exe__CodePieces!)
      parse_error/888))
  (let
    (errorval/889 =
       (makeblock 0 (field_imm 20 (global Dune__exe__CodePieces!))))
    (setfield_ptr(root-init) 15 (global Dune__exe__CodePieces!) errorval/889))
  (let (basics/890 = "MenhirBasics")
    (setfield_ptr(root-init) 16 (global Dune__exe__CodePieces!) basics/890))
  (let
    (excvaldef/891 =
       (makeblock 0 (int,*,*) 0
         (makeblock 0 (field_imm 20 (global Dune__exe__CodePieces!)))
         (makeblock 13
           (makeblock 11 (field_imm 0 (global Dune__exe__Interface!)) 0)
           (apply (field_imm 17 (global Dune__exe__CodeBits!))
             (field_imm 10 (global Dune__exe__CodeBits!))))))
    (setfield_ptr(root-init) 21 (global Dune__exe__CodePieces!)
      excvaldef/891))
  (let
    (mbasics/900 =
       (function grammar/902
         (makeblock 0
           (makeblock 5 (field_imm 16 (global Dune__exe__CodePieces!))
             (makeblock 1
               (makeblock 0
                 (makeblock 1
                   (makeblock 0 (field_imm 1 (global Dune__exe__Interface!))
                     0))
                 (makeblock 0
                   (makeblock 3 (int,*) 0
                     (makeblock 0
                       (field_imm 21 (global Dune__exe__CodePieces!)) 0))
                   (apply (field_imm 42 (global Dune__exe__CodeBits!))
                     (apply (field_imm 5 (global Dune__exe__TokenType!))
                       grammar/902))))))
           (makeblock 0
             (makeblock 6
               (makeblock 0 (field_imm 16 (global Dune__exe__CodePieces!))))
             0))))
    (setfield_ptr(root-init) 17 (global Dune__exe__CodePieces!) mbasics/900))
  0)
(seq
  (let
    (ntvar/488 =
       (function nt/490
         (apply (field_imm 0 (global Dune__exe__Infer!))
           (apply (field_imm 5 (field_imm 0 (global Dune__exe__Grammar!))) 1
             nt/490))))
    (setfield_ptr(root-init) 18 (global Dune__exe__CodePieces!) ntvar/488))
  (let (semv/580 = "_v")
    (setfield_ptr(root-init) 0 (global Dune__exe__CodePieces!) semv/580))
  (let
    (stack/581 = (apply (field_imm 39 (global Dune__exe__CodeBits!)) "stack"))
    (setfield_ptr(root-init) 1 (global Dune__exe__CodePieces!) stack/581))
  (let (state/582 = (apply (field_imm 39 (global Dune__exe__CodeBits!)) "s"))
    (setfield_ptr(root-init) 2 (global Dune__exe__CodePieces!) state/582))
  (let (token/583 = "_tok")
    (setfield_ptr(root-init) 3 (global Dune__exe__CodePieces!) token/583))
  (let
    (beforeendp/584 =
       (apply (field_imm 0 (global MenhirSdk__Keyword!)) 0 2 1))
    (setfield_ptr(root-init) 4 (global Dune__exe__CodePieces!)
      beforeendp/584))
  (let
    (startp/597 = (apply (field_imm 0 (global MenhirSdk__Keyword!)) 1 1 1))
    (setfield_ptr(root-init) 5 (global Dune__exe__CodePieces!) startp/597))
  (let (endp/598 = (apply (field_imm 0 (global MenhirSdk__Keyword!)) 1 2 1))
    (setfield_ptr(root-init) 6 (global Dune__exe__CodePieces!) endp/598))
  (let
    (startpos/599 =
       (function ids/601 i/602[int]
         (apply (field_imm 0 (global MenhirSdk__Keyword!))
           (makeblock 0 (array.get[addr] ids/601 i/602)) 1 1)))
    (setfield_ptr(root-init) 7 (global Dune__exe__CodePieces!) startpos/599))
  (let
    (endpos/651 =
       (function ids/653 i/654[int]
         (apply (field_imm 0 (global MenhirSdk__Keyword!))
           (makeblock 0 (array.get[addr] ids/653 i/654)) 2 1)))
    (setfield_ptr(root-init) 8 (global Dune__exe__CodePieces!) endpos/651))
  (let
    (semvtypent/655 =
       (function nt/657
         (let
           (*match*/4361 =
              (apply (field_imm 6 (field_imm 0 (global Dune__exe__Grammar!)))
                nt/657))
           (if (isint *match*/4361)
             (apply (field_imm 18 (global Dune__exe__CodePieces!)) nt/657)
             (makeblock 0 (field_imm 0 *match*/4361))))))
    (setfield_ptr(root-init) 9 (global Dune__exe__CodePieces!)
      semvtypent/655))
  (let
    (semvtypetok/663 =
       (function tok/665
         (let
           (*match*/4362 =
              (apply (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
                tok/665))
           (if (isint *match*/4362)
             (if (field_imm 17 (global Dune__exe__Settings!))
               (makeblock 0 (field_imm 6 (global Dune__exe__CodeBits!)) 0) 0)
             (makeblock 0 (makeblock 0 (field_imm 0 *match*/4362)) 0)))))
    (setfield_ptr(root-init) 19 (global Dune__exe__CodePieces!)
      semvtypetok/663))
  (let
    (semvtype/786 =
       (function param/812
         (switch* param/812
          case tag 0:
           (makeblock 0
             (apply (field_imm 9 (global Dune__exe__CodePieces!))
               (field_imm 0 param/812))
             0)
          case tag 1:
           (apply (field_imm 19 (global Dune__exe__CodePieces!))
             (field_imm 0 param/812)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__CodePieces!) semvtype/786))
  (let
    (tokpat/813 =
       (function tok/815 pat/816
         (let
           (data/817 =
              (apply (field_imm 1 (global Dune__exe__TokenType!))
                (apply
                  (field_imm 6 (field_imm 2 (global Dune__exe__Grammar!)))
                  tok/815)))
           (makeblock 2 data/817
             (if
               (==
                 (apply
                   (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
                   tok/815)
                 0)
               0 (makeblock 0 pat/816 0))))))
    (setfield_ptr(root-init) 11 (global Dune__exe__CodePieces!) tokpat/813))
  (let
    (tok_bind_unit/826 =
       (function tok/828 pat/829 e/830
         (if
           (==
             (apply (field_imm 8 (field_imm 2 (global Dune__exe__Grammar!)))
               tok/828)
             0)
           (apply (field_imm 20 (global Dune__exe__CodeBits!))
             (makeblock 0 (makeblock 0 (makeblock 0 pat/829 0) 0) e/830))
           e/830)))
    (setfield_ptr(root-init) 13 (global Dune__exe__CodePieces!)
      tok_bind_unit/826))
  (let
    (tokspat/831 =
       (function toks/833
         (makeblock 5
           (apply (field_imm 13 (field_imm 3 (global Dune__exe__Grammar!)))
             (function tok/856 pats/857
               (makeblock 0
                 (apply (field_imm 11 (global Dune__exe__CodePieces!))
                   tok/856 0)
                 pats/857))
             toks/833 0))))
    (setfield_ptr(root-init) 12 (global Dune__exe__CodePieces!) tokspat/831))
  (let
    (destructuretokendef/880 =
       (function name/882 codomain/883 bindsemv/884[int] branch/885
         (makeblock 0 (int,*,*) 0 (makeblock 0 name/882)
           (apply (field_imm 18 (global Dune__exe__CodeBits!))
             (makeblock 1
               (makeblock 0
                 (makeblock 0 (field_imm 3 (global Dune__exe__CodePieces!)))
                 0)
               (makeblock 4
                 (makeblock 0 (field_imm 3 (global Dune__exe__CodePieces!)))
                 (apply
                   (field_imm 17 (field_imm 2 (global Dune__exe__Grammar!)))
                   (function tok/886 branches/887
                     (if
                       (apply
                         (field_imm 12
                           (field_imm 2 (global Dune__exe__Grammar!)))
                         tok/886)
                       branches/887
                       (makeblock 0
                         (makeblock 0
                           (apply
                             (field_imm 11 (global Dune__exe__CodePieces!))
                             tok/886
                             (if bindsemv/884
                               (makeblock 0
                                 (field_imm 0
                                   (global Dune__exe__CodePieces!)))
                               0))
                           (apply branch/885 tok/886))
                         branches/887)))
                   0)))
             (apply (field_imm 33 (global Dune__exe__CodeBits!))
               (field_imm 0 (global Dune__exe__TokenType!)) codomain/883)))))
    (setfield_ptr(root-init) 14 (global Dune__exe__CodePieces!)
      destructuretokendef/880))
  (let (parse_error/888 = "_eRR")
    (setfield_ptr(root-init) 20 (global Dune__exe__CodePieces!)
      parse_error/888))
  (let
    (errorval/889 =
       (makeblock 0 (field_imm 20 (global Dune__exe__CodePieces!))))
    (setfield_ptr(root-init) 15 (global Dune__exe__CodePieces!) errorval/889))
  (let (basics/890 = "MenhirBasics")
    (setfield_ptr(root-init) 16 (global Dune__exe__CodePieces!) basics/890))
  (let
    (excvaldef/891 =
       (makeblock 0 (int,*,*) 0
         (makeblock 0 (field_imm 20 (global Dune__exe__CodePieces!)))
         (makeblock 13
           (makeblock 11 (field_imm 0 (global Dune__exe__Interface!)) 0)
           (apply (field_imm 17 (global Dune__exe__CodeBits!))
             (field_imm 10 (global Dune__exe__CodeBits!))))))
    (setfield_ptr(root-init) 21 (global Dune__exe__CodePieces!)
      excvaldef/891))
  (let
    (mbasics/900 =
       (function grammar/902
         (makeblock 0
           (makeblock 5 (field_imm 16 (global Dune__exe__CodePieces!))
             (makeblock 1
               (makeblock 0
                 (makeblock 1
                   (makeblock 0 (field_imm 1 (global Dune__exe__Interface!))
                     0))
                 (makeblock 0
                   (makeblock 3 (int,*) 0
                     (makeblock 0
                       (field_imm 21 (global Dune__exe__CodePieces!)) 0))
                   (apply (field_imm 42 (global Dune__exe__CodeBits!))
                     (apply (field_imm 5 (global Dune__exe__TokenType!))
                       grammar/902))))))
           (makeblock 0
             (makeblock 6
               (makeblock 0 (field_imm 16 (global Dune__exe__CodePieces!))))
             0))))
    (setfield_ptr(root-init) 17 (global Dune__exe__CodePieces!) mbasics/900))
  0)

[
  structure_item (src/item.ml[14,994+0]..[14,994+12])
    Pstr_open Fresh
    module_expr (src/item.ml[14,994+5]..[14,994+12])
      Pmod_ident "Grammar" (src/item.ml[14,994+5]..[14,994+12])
  structure_item (src/item.ml[41,2208+0]..[41,2208+12])
    Pstr_type Rec
    [
      type_declaration "t" (src/item.ml[41,2208+5]..[41,2208+6]) (src/item.ml[41,2208+0]..[41,2208+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/item.ml[41,2208+9]..[41,2208+12])
              Ptyp_constr "int" (src/item.ml[41,2208+9]..[41,2208+12])
              []
    ]
  structure_item (src/item.ml[43,2222+0]..[44,2237+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[43,2222+4]..[43,2222+12])
          Ppat_var "low_bits" (src/item.ml[43,2222+4]..[43,2222+12])
        expression (src/item.ml[44,2237+2]..[44,2237+4])
          Pexp_constant PConst_int (10,None)
    ]
  structure_item (src/item.ml[46,2282+0]..[47,2298+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[46,2282+4]..[46,2282+13])
          Ppat_var "low_limit" (src/item.ml[46,2282+4]..[46,2282+13])
        expression (src/item.ml[47,2298+2]..[47,2298+16])
          Pexp_apply
          expression (src/item.ml[47,2298+4]..[47,2298+7])
            Pexp_ident "lsl" (src/item.ml[47,2298+4]..[47,2298+7])
          [
            <arg>
            Nolabel
              expression (src/item.ml[47,2298+2]..[47,2298+3])
                Pexp_constant PConst_int (1,None)
            <arg>
            Nolabel
              expression (src/item.ml[47,2298+8]..[47,2298+16])
                Pexp_ident "low_bits" (src/item.ml[47,2298+8]..[47,2298+16])
          ]
    ]
  structure_item (src/item.ml[49,2316+0]..[50,2331+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[49,2316+4]..[49,2316+10])
          Ppat_var "export" (src/item.ml[49,2316+4]..[49,2316+10])
        expression (src/item.ml[49,2316+11]..[50,2331+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[49,2316+11]..[49,2316+12])
            Ppat_var "t" (src/item.ml[49,2316+11]..[49,2316+12])
          expression (src/item.ml[50,2331+2]..[50,2331+52])
            Pexp_tuple
            [
              expression (src/item.ml[50,2331+3]..[50,2331+34])
                Pexp_apply
                expression (src/item.ml[50,2331+3]..[50,2331+17])
                  Pexp_ident "Production.i2p" (src/item.ml[50,2331+3]..[50,2331+17])
                [
                  <arg>
                  Nolabel
                    expression (src/item.ml[50,2331+18]..[50,2331+34])
                      Pexp_apply
                      expression (src/item.ml[50,2331+21]..[50,2331+24])
                        Pexp_ident "lsr" (src/item.ml[50,2331+21]..[50,2331+24])
                      [
                        <arg>
                        Nolabel
                          expression (src/item.ml[50,2331+19]..[50,2331+20])
                            Pexp_ident "t" (src/item.ml[50,2331+19]..[50,2331+20])
                        <arg>
                        Nolabel
                          expression (src/item.ml[50,2331+25]..[50,2331+33])
                            Pexp_ident "low_bits" (src/item.ml[50,2331+25]..[50,2331+33])
                      ]
                ]
              expression (src/item.ml[50,2331+36]..[50,2331+51])
                Pexp_apply
                expression (src/item.ml[50,2331+38]..[50,2331+41])
                  Pexp_ident "mod" (src/item.ml[50,2331+38]..[50,2331+41])
                [
                  <arg>
                  Nolabel
                    expression (src/item.ml[50,2331+36]..[50,2331+37])
                      Pexp_ident "t" (src/item.ml[50,2331+36]..[50,2331+37])
                  <arg>
                  Nolabel
                    expression (src/item.ml[50,2331+42]..[50,2331+51])
                      Pexp_ident "low_limit" (src/item.ml[50,2331+42]..[50,2331+51])
                ]
            ]
    ]
  structure_item (src/item.ml[52,2385+0]..[54,2438+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[52,2385+4]..[52,2385+10])
          Ppat_var "import" (src/item.ml[52,2385+4]..[52,2385+10])
        expression (src/item.ml[52,2385+11]..[54,2438+42]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[52,2385+11]..[52,2385+22])
            Ppat_tuple
            [
              pattern (src/item.ml[52,2385+12]..[52,2385+16])
                Ppat_var "prod" (src/item.ml[52,2385+12]..[52,2385+16])
              pattern (src/item.ml[52,2385+18]..[52,2385+21])
                Ppat_var "pos" (src/item.ml[52,2385+18]..[52,2385+21])
            ]
          expression (src/item.ml[53,2410+2]..[54,2438+42])
            Pexp_sequence
            expression (src/item.ml[53,2410+2]..[53,2410+26])
              Pexp_assert
              expression (src/item.ml[53,2410+9]..[53,2410+26])
                Pexp_apply
                expression (src/item.ml[53,2410+14]..[53,2410+15])
                  Pexp_ident "<" (src/item.ml[53,2410+14]..[53,2410+15])
                [
                  <arg>
                  Nolabel
                    expression (src/item.ml[53,2410+10]..[53,2410+13])
                      Pexp_ident "pos" (src/item.ml[53,2410+10]..[53,2410+13])
                  <arg>
                  Nolabel
                    expression (src/item.ml[53,2410+16]..[53,2410+25])
                      Pexp_ident "low_limit" (src/item.ml[53,2410+16]..[53,2410+25])
                ]
            expression (src/item.ml[54,2438+2]..[54,2438+42])
              Pexp_apply
              expression (src/item.ml[54,2438+37]..[54,2438+38])
                Pexp_ident "+" (src/item.ml[54,2438+37]..[54,2438+38])
              [
                <arg>
                Nolabel
                  expression (src/item.ml[54,2438+2]..[54,2438+36])
                    Pexp_apply
                    expression (src/item.ml[54,2438+24]..[54,2438+27])
                      Pexp_ident "lsl" (src/item.ml[54,2438+24]..[54,2438+27])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[54,2438+2]..[54,2438+23])
                          Pexp_apply
                          expression (src/item.ml[54,2438+3]..[54,2438+17])
                            Pexp_ident "Production.p2i" (src/item.ml[54,2438+3]..[54,2438+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/item.ml[54,2438+18]..[54,2438+22])
                                Pexp_ident "prod" (src/item.ml[54,2438+18]..[54,2438+22])
                          ]
                      <arg>
                      Nolabel
                        expression (src/item.ml[54,2438+28]..[54,2438+36])
                          Pexp_ident "low_bits" (src/item.ml[54,2438+28]..[54,2438+36])
                    ]
                <arg>
                Nolabel
                  expression (src/item.ml[54,2438+39]..[54,2438+42])
                    Pexp_ident "pos" (src/item.ml[54,2438+39]..[54,2438+42])
              ]
    ]
  structure_item (src/item.ml[56,2482+0]..[57,2513+6])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[56,2482+4]..[56,2482+11])
          Ppat_var "marshal" (src/item.ml[56,2482+4]..[56,2482+11])
        expression (src/item.ml[56,2482+12]..[57,2513+6]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[56,2482+12]..[56,2482+22])
            Ppat_constraint
            pattern (src/item.ml[56,2482+13]..[56,2482+17])
              Ppat_var "item" (src/item.ml[56,2482+13]..[56,2482+17])
            core_type (src/item.ml[56,2482+20]..[56,2482+21])
              Ptyp_constr "t" (src/item.ml[56,2482+20]..[56,2482+21])
              []
          expression (src/item.ml[56,2482+23]..[57,2513+6])
            Pexp_constraint
            expression (src/item.ml[57,2513+2]..[57,2513+6])
              Pexp_ident "item" (src/item.ml[57,2513+2]..[57,2513+6])
            core_type (src/item.ml[56,2482+25]..[56,2482+28])
              Ptyp_constr "int" (src/item.ml[56,2482+25]..[56,2482+28])
              []
    ]
  structure_item (src/item.ml[62,2658+0]..[70,2939+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[62,2658+4]..[62,2658+6])
          Ppat_construct "()" (src/item.ml[62,2658+4]..[62,2658+6])
          None
        expression (src/item.ml[63,2667+2]..[70,2939+3])
          Pexp_apply
          expression (src/item.ml[63,2667+2]..[63,2667+17])
            Pexp_ident "Production.iter" (src/item.ml[63,2667+2]..[63,2667+17])
          [
            <arg>
            Nolabel
              expression (src/item.ml[63,2667+18]..[70,2939+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/item.ml[63,2667+23]..[63,2667+28])
                  Ppat_var "index" (src/item.ml[63,2667+23]..[63,2667+28])
                expression (src/item.ml[64,2699+4]..[69,2908+30])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/item.ml[64,2699+8]..[64,2699+14])
                        Ppat_var "length" (src/item.ml[64,2699+8]..[64,2699+14])
                      expression (src/item.ml[64,2699+17]..[64,2699+40])
                        Pexp_apply
                        expression (src/item.ml[64,2699+17]..[64,2699+34])
                          Pexp_ident "Production.length" (src/item.ml[64,2699+17]..[64,2699+34])
                        [
                          <arg>
                          Nolabel
                            expression (src/item.ml[64,2699+35]..[64,2699+40])
                              Pexp_ident "index" (src/item.ml[64,2699+35]..[64,2699+40])
                        ]
                  ]
                  expression (src/item.ml[65,2743+4]..[69,2908+30])
                    Pexp_ifthenelse
                    expression (src/item.ml[65,2743+7]..[65,2743+26])
                      Pexp_apply
                      expression (src/item.ml[65,2743+17]..[65,2743+19])
                        Pexp_ident "<=" (src/item.ml[65,2743+17]..[65,2743+19])
                      [
                        <arg>
                        Nolabel
                          expression (src/item.ml[65,2743+7]..[65,2743+16])
                            Pexp_ident "low_limit" (src/item.ml[65,2743+7]..[65,2743+16])
                        <arg>
                        Nolabel
                          expression (src/item.ml[65,2743+20]..[65,2743+26])
                            Pexp_ident "length" (src/item.ml[65,2743+20]..[65,2743+26])
                      ]
                    expression (src/item.ml[66,2775+6]..[69,2908+30])
                      Pexp_apply
                      expression (src/item.ml[66,2775+6]..[66,2775+17])
                        Pexp_ident "Error.error" (src/item.ml[66,2775+6]..[66,2775+17])
                      [
                        <arg>
                        Nolabel
                          expression (src/item.ml[67,2793+8]..[67,2793+36])
                            Pexp_apply
                            expression (src/item.ml[67,2793+9]..[67,2793+29])
                              Pexp_ident "Production.positions" (src/item.ml[67,2793+9]..[67,2793+29])
                            [
                              <arg>
                              Nolabel
                                expression (src/item.ml[67,2793+30]..[67,2793+35])
                                  Pexp_ident "index" (src/item.ml[67,2793+30]..[67,2793+35])
                            ]
                        <arg>
                        Nolabel
                          expression (src/item.ml[68,2830+8]..[68,2830+77])
                            Pexp_constant PConst_string("The length of this production is %d, which exceeds the limit of %d.",(src/item.ml[68,2830+9]..[68,2830+76]),None)
                        <arg>
                        Nolabel
                          expression (src/item.ml[69,2908+8]..[69,2908+14])
                            Pexp_ident "length" (src/item.ml[69,2908+8]..[69,2908+14])
                        <arg>
                        Nolabel
                          expression (src/item.ml[69,2908+15]..[69,2908+30])
                            Pexp_apply
                            expression (src/item.ml[69,2908+26]..[69,2908+27])
                              Pexp_ident "-" (src/item.ml[69,2908+26]..[69,2908+27])
                            [
                              <arg>
                              Nolabel
                                expression (src/item.ml[69,2908+16]..[69,2908+25])
                                  Pexp_ident "low_limit" (src/item.ml[69,2908+16]..[69,2908+25])
                              <arg>
                              Nolabel
                                expression (src/item.ml[69,2908+28]..[69,2908+29])
                                  Pexp_constant PConst_int (1,None)
                            ]
                      ]
                    None
          ]
    ]
  structure_item (src/item.ml[74,2963+0]..[75,2998+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[74,2963+4]..[74,2963+9])
          Ppat_var "equal" (src/item.ml[74,2963+4]..[74,2963+9])
        expression (src/item.ml[74,2963+10]..[75,2998+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[74,2963+10]..[74,2963+21])
            Ppat_constraint
            pattern (src/item.ml[74,2963+11]..[74,2963+16])
              Ppat_var "item1" (src/item.ml[74,2963+11]..[74,2963+16])
            core_type (src/item.ml[74,2963+19]..[74,2963+20])
              Ptyp_constr "t" (src/item.ml[74,2963+19]..[74,2963+20])
              []
          expression (src/item.ml[74,2963+22]..[75,2998+15]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/item.ml[74,2963+22]..[74,2963+32])
              Ppat_constraint
              pattern (src/item.ml[74,2963+23]..[74,2963+28])
                Ppat_var "item2" (src/item.ml[74,2963+23]..[74,2963+28])
              core_type (src/item.ml[74,2963+30]..[74,2963+31])
                Ptyp_constr "t" (src/item.ml[74,2963+30]..[74,2963+31])
                []
            expression (src/item.ml[75,2998+2]..[75,2998+15])
              Pexp_apply
              expression (src/item.ml[75,2998+8]..[75,2998+9])
                Pexp_ident "=" (src/item.ml[75,2998+8]..[75,2998+9])
              [
                <arg>
                Nolabel
                  expression (src/item.ml[75,2998+2]..[75,2998+7])
                    Pexp_ident "item1" (src/item.ml[75,2998+2]..[75,2998+7])
                <arg>
                Nolabel
                  expression (src/item.ml[75,2998+10]..[75,2998+15])
                    Pexp_ident "item2" (src/item.ml[75,2998+10]..[75,2998+15])
              ]
    ]
  structure_item (src/item.ml[83,3346+0]..[88,3504+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[83,3346+4]..[83,3346+7])
          Ppat_var "def" (src/item.ml[83,3346+4]..[83,3346+7])
        expression (src/item.ml[83,3346+8]..[88,3504+28]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[83,3346+8]..[83,3346+9])
            Ppat_var "t" (src/item.ml[83,3346+8]..[83,3346+9])
          expression (src/item.ml[84,3358+2]..[88,3504+28])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/item.ml[84,3358+6]..[84,3358+15])
                  Ppat_tuple
                  [
                    pattern (src/item.ml[84,3358+6]..[84,3358+10])
                      Ppat_var "prod" (src/item.ml[84,3358+6]..[84,3358+10])
                    pattern (src/item.ml[84,3358+12]..[84,3358+15])
                      Ppat_var "pos" (src/item.ml[84,3358+12]..[84,3358+15])
                  ]
                expression (src/item.ml[84,3358+18]..[84,3358+26])
                  Pexp_apply
                  expression (src/item.ml[84,3358+18]..[84,3358+24])
                    Pexp_ident "export" (src/item.ml[84,3358+18]..[84,3358+24])
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[84,3358+25]..[84,3358+26])
                        Pexp_ident "t" (src/item.ml[84,3358+25]..[84,3358+26])
                  ]
            ]
            expression (src/item.ml[85,3388+2]..[88,3504+28])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/item.ml[85,3388+6]..[85,3388+13])
                    Ppat_tuple
                    [
                      pattern (src/item.ml[85,3388+6]..[85,3388+8])
                        Ppat_var "nt" (src/item.ml[85,3388+6]..[85,3388+8])
                      pattern (src/item.ml[85,3388+10]..[85,3388+13])
                        Ppat_var "rhs" (src/item.ml[85,3388+10]..[85,3388+13])
                    ]
                  expression (src/item.ml[85,3388+16]..[85,3388+35])
                    Pexp_apply
                    expression (src/item.ml[85,3388+16]..[85,3388+30])
                      Pexp_ident "Production.def" (src/item.ml[85,3388+16]..[85,3388+30])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[85,3388+31]..[85,3388+35])
                          Pexp_ident "prod" (src/item.ml[85,3388+31]..[85,3388+35])
                    ]
              ]
              expression (src/item.ml[86,3427+2]..[88,3504+28])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/item.ml[86,3427+6]..[86,3427+12])
                      Ppat_var "length" (src/item.ml[86,3427+6]..[86,3427+12])
                    expression (src/item.ml[86,3427+15]..[86,3427+31])
                      Pexp_apply
                      expression (src/item.ml[86,3427+15]..[86,3427+27])
                        Pexp_ident "Array.length" (src/item.ml[86,3427+15]..[86,3427+27])
                      [
                        <arg>
                        Nolabel
                          expression (src/item.ml[86,3427+28]..[86,3427+31])
                            Pexp_ident "rhs" (src/item.ml[86,3427+28]..[86,3427+31])
                      ]
                ]
                expression (src/item.ml[87,3462+2]..[88,3504+28])
                  Pexp_sequence
                  expression (src/item.ml[87,3462+2]..[87,3462+40])
                    Pexp_assert
                    expression (src/item.ml[87,3462+9]..[87,3462+40])
                      Pexp_apply
                      expression (src/item.ml[87,3462+21]..[87,3462+23])
                        Pexp_ident "&&" (src/item.ml[87,3462+21]..[87,3462+23])
                      [
                        <arg>
                        Nolabel
                          expression (src/item.ml[87,3462+10]..[87,3462+20])
                            Pexp_apply
                            expression (src/item.ml[87,3462+15]..[87,3462+17])
                              Pexp_ident ">=" (src/item.ml[87,3462+15]..[87,3462+17])
                            [
                              <arg>
                              Nolabel
                                expression (src/item.ml[87,3462+11]..[87,3462+14])
                                  Pexp_ident "pos" (src/item.ml[87,3462+11]..[87,3462+14])
                              <arg>
                              Nolabel
                                expression (src/item.ml[87,3462+18]..[87,3462+19])
                                  Pexp_constant PConst_int (0,None)
                            ]
                        <arg>
                        Nolabel
                          expression (src/item.ml[87,3462+24]..[87,3462+39])
                            Pexp_apply
                            expression (src/item.ml[87,3462+29]..[87,3462+31])
                              Pexp_ident "<=" (src/item.ml[87,3462+29]..[87,3462+31])
                            [
                              <arg>
                              Nolabel
                                expression (src/item.ml[87,3462+25]..[87,3462+28])
                                  Pexp_ident "pos" (src/item.ml[87,3462+25]..[87,3462+28])
                              <arg>
                              Nolabel
                                expression (src/item.ml[87,3462+32]..[87,3462+38])
                                  Pexp_ident "length" (src/item.ml[87,3462+32]..[87,3462+38])
                            ]
                      ]
                  expression (src/item.ml[88,3504+2]..[88,3504+28])
                    Pexp_tuple
                    [
                      expression (src/item.ml[88,3504+2]..[88,3504+6])
                        Pexp_ident "prod" (src/item.ml[88,3504+2]..[88,3504+6])
                      expression (src/item.ml[88,3504+8]..[88,3504+10])
                        Pexp_ident "nt" (src/item.ml[88,3504+8]..[88,3504+10])
                      expression (src/item.ml[88,3504+12]..[88,3504+15])
                        Pexp_ident "rhs" (src/item.ml[88,3504+12]..[88,3504+15])
                      expression (src/item.ml[88,3504+17]..[88,3504+20])
                        Pexp_ident "pos" (src/item.ml[88,3504+17]..[88,3504+20])
                      expression (src/item.ml[88,3504+22]..[88,3504+28])
                        Pexp_ident "length" (src/item.ml[88,3504+22]..[88,3504+28])
                    ]
    ]
  structure_item (src/item.ml[90,3534+0]..[97,3691+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[90,3534+4]..[90,3534+11])
          Ppat_var "startnt" (src/item.ml[90,3534+4]..[90,3534+11])
        expression (src/item.ml[90,3534+12]..[97,3691+18]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[90,3534+12]..[90,3534+13])
            Ppat_var "t" (src/item.ml[90,3534+12]..[90,3534+13])
          expression (src/item.ml[91,3550+2]..[97,3691+18])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/item.ml[91,3550+6]..[91,3550+28])
                  Ppat_tuple
                  [
                    pattern (src/item.ml[91,3550+6]..[91,3550+7])
                      Ppat_any
                    pattern (src/item.ml[91,3550+9]..[91,3550+10])
                      Ppat_any
                    pattern (src/item.ml[91,3550+12]..[91,3550+15])
                      Ppat_var "rhs" (src/item.ml[91,3550+12]..[91,3550+15])
                    pattern (src/item.ml[91,3550+17]..[91,3550+20])
                      Ppat_var "pos" (src/item.ml[91,3550+17]..[91,3550+20])
                    pattern (src/item.ml[91,3550+22]..[91,3550+28])
                      Ppat_var "length" (src/item.ml[91,3550+22]..[91,3550+28])
                  ]
                expression (src/item.ml[91,3550+31]..[91,3550+36])
                  Pexp_apply
                  expression (src/item.ml[91,3550+31]..[91,3550+34])
                    Pexp_ident "def" (src/item.ml[91,3550+31]..[91,3550+34])
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[91,3550+35]..[91,3550+36])
                        Pexp_ident "t" (src/item.ml[91,3550+35]..[91,3550+36])
                  ]
            ]
            expression (src/item.ml[92,3590+2]..[97,3691+18])
              Pexp_sequence
              expression (src/item.ml[92,3590+2]..[92,3590+32])
                Pexp_assert
                expression (src/item.ml[92,3590+9]..[92,3590+32])
                  Pexp_apply
                  expression (src/item.ml[92,3590+18]..[92,3590+20])
                    Pexp_ident "&&" (src/item.ml[92,3590+18]..[92,3590+20])
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[92,3590+10]..[92,3590+17])
                        Pexp_apply
                        expression (src/item.ml[92,3590+14]..[92,3590+15])
                          Pexp_ident "=" (src/item.ml[92,3590+14]..[92,3590+15])
                        [
                          <arg>
                          Nolabel
                            expression (src/item.ml[92,3590+10]..[92,3590+13])
                              Pexp_ident "pos" (src/item.ml[92,3590+10]..[92,3590+13])
                          <arg>
                          Nolabel
                            expression (src/item.ml[92,3590+16]..[92,3590+17])
                              Pexp_constant PConst_int (0,None)
                        ]
                    <arg>
                    Nolabel
                      expression (src/item.ml[92,3590+21]..[92,3590+31])
                        Pexp_apply
                        expression (src/item.ml[92,3590+28]..[92,3590+29])
                          Pexp_ident "=" (src/item.ml[92,3590+28]..[92,3590+29])
                        [
                          <arg>
                          Nolabel
                            expression (src/item.ml[92,3590+21]..[92,3590+27])
                              Pexp_ident "length" (src/item.ml[92,3590+21]..[92,3590+27])
                          <arg>
                          Nolabel
                            expression (src/item.ml[92,3590+30]..[92,3590+31])
                              Pexp_constant PConst_int (1,None)
                        ]
                  ]
              expression (src/item.ml[93,3624+2]..[97,3691+18])
                Pexp_match
                expression (src/item.ml[93,3624+8]..[93,3624+15])
                  Pexp_apply
                  expression (src/item.ml[93,3624+8]..[93,3624+15]) ghost
                    Pexp_ident "Array.get" (src/item.ml[93,3624+8]..[93,3624+15]) ghost
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[93,3624+8]..[93,3624+11])
                        Pexp_ident "rhs" (src/item.ml[93,3624+8]..[93,3624+11])
                    <arg>
                    Nolabel
                      expression (src/item.ml[93,3624+13]..[93,3624+14])
                        Pexp_constant PConst_int (0,None)
                  ]
                [
                  <case>
                    pattern (src/item.ml[94,3645+4]..[94,3645+15])
                      Ppat_construct "Symbol.N" (src/item.ml[94,3645+4]..[94,3645+12])
                      Some
                        []
                        pattern (src/item.ml[94,3645+13]..[94,3645+15])
                          Ppat_var "nt" (src/item.ml[94,3645+13]..[94,3645+15])
                    expression (src/item.ml[95,3664+6]..[95,3664+8])
                      Pexp_ident "nt" (src/item.ml[95,3664+6]..[95,3664+8])
                  <case>
                    pattern (src/item.ml[96,3673+4]..[96,3673+14])
                      Ppat_construct "Symbol.T" (src/item.ml[96,3673+4]..[96,3673+12])
                      Some
                        []
                        pattern (src/item.ml[96,3673+13]..[96,3673+14])
                          Ppat_any
                    expression (src/item.ml[97,3691+6]..[97,3691+18])
                      Pexp_assert
                      expression (src/item.ml[97,3691+13]..[97,3691+18])
                        Pexp_construct "false" (src/item.ml[97,3691+13]..[97,3691+18])
                        None
                ]
    ]
  structure_item (src/item.ml[101,3728+0]..[103,3784+84])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[101,3728+4]..[101,3728+9])
          Ppat_var "print" (src/item.ml[101,3728+4]..[101,3728+9])
        expression (src/item.ml[101,3728+10]..[103,3784+84]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[101,3728+10]..[101,3728+14])
            Ppat_var "item" (src/item.ml[101,3728+10]..[101,3728+14])
          expression (src/item.ml[102,3745+2]..[103,3784+84])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/item.ml[102,3745+6]..[102,3745+24])
                  Ppat_tuple
                  [
                    pattern (src/item.ml[102,3745+6]..[102,3745+7])
                      Ppat_any
                    pattern (src/item.ml[102,3745+9]..[102,3745+11])
                      Ppat_var "nt" (src/item.ml[102,3745+9]..[102,3745+11])
                    pattern (src/item.ml[102,3745+13]..[102,3745+16])
                      Ppat_var "rhs" (src/item.ml[102,3745+13]..[102,3745+16])
                    pattern (src/item.ml[102,3745+18]..[102,3745+21])
                      Ppat_var "pos" (src/item.ml[102,3745+18]..[102,3745+21])
                    pattern (src/item.ml[102,3745+23]..[102,3745+24])
                      Ppat_any
                  ]
                expression (src/item.ml[102,3745+27]..[102,3745+35])
                  Pexp_apply
                  expression (src/item.ml[102,3745+27]..[102,3745+30])
                    Pexp_ident "def" (src/item.ml[102,3745+27]..[102,3745+30])
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[102,3745+31]..[102,3745+35])
                        Pexp_ident "item" (src/item.ml[102,3745+31]..[102,3745+35])
                  ]
            ]
            expression (src/item.ml[103,3784+2]..[103,3784+84])
              Pexp_apply
              expression (src/item.ml[103,3784+2]..[103,3784+16])
                Pexp_ident "Printf.sprintf" (src/item.ml[103,3784+2]..[103,3784+16])
              [
                <arg>
                Nolabel
                  expression (src/item.ml[103,3784+17]..[103,3784+27])
                    Pexp_constant PConst_string("%s -> %s",(src/item.ml[103,3784+18]..[103,3784+26]),None)
                <arg>
                Nolabel
                  expression (src/item.ml[103,3784+28]..[103,3784+56])
                    Pexp_apply
                    expression (src/item.ml[103,3784+29]..[103,3784+46])
                      Pexp_ident "Nonterminal.print" (src/item.ml[103,3784+29]..[103,3784+46])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[103,3784+47]..[103,3784+52])
                          Pexp_construct "false" (src/item.ml[103,3784+47]..[103,3784+52])
                          None
                      <arg>
                      Nolabel
                        expression (src/item.ml[103,3784+53]..[103,3784+55])
                          Pexp_ident "nt" (src/item.ml[103,3784+53]..[103,3784+55])
                    ]
                <arg>
                Nolabel
                  expression (src/item.ml[103,3784+57]..[103,3784+84])
                    Pexp_apply
                    expression (src/item.ml[103,3784+58]..[103,3784+73])
                      Pexp_ident "Symbol.printaod" (src/item.ml[103,3784+58]..[103,3784+73])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[103,3784+74]..[103,3784+75])
                          Pexp_constant PConst_int (0,None)
                      <arg>
                      Nolabel
                        expression (src/item.ml[103,3784+76]..[103,3784+79])
                          Pexp_ident "pos" (src/item.ml[103,3784+76]..[103,3784+79])
                      <arg>
                      Nolabel
                        expression (src/item.ml[103,3784+80]..[103,3784+83])
                          Pexp_ident "rhs" (src/item.ml[103,3784+80]..[103,3784+83])
                    ]
              ]
    ]
  structure_item (src/item.ml[107,3896+0]..[109,3934+30])
    Pstr_type Rec
    [
      type_declaration "kind" (src/item.ml[107,3896+5]..[107,3896+9]) (src/item.ml[107,3896+0]..[109,3934+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/item.ml[108,3908+2]..[108,3908+25])
                "Shift" (src/item.ml[108,3908+4]..[108,3908+9])
                [
                  core_type (src/item.ml[108,3908+13]..[108,3908+21])
                    Ptyp_constr "Symbol.t" (src/item.ml[108,3908+13]..[108,3908+21])
                    []
                  core_type (src/item.ml[108,3908+24]..[108,3908+25])
                    Ptyp_constr "t" (src/item.ml[108,3908+24]..[108,3908+25])
                    []
                ]
                None
              (src/item.ml[109,3934+2]..[109,3934+30])
                "Reduce" (src/item.ml[109,3934+4]..[109,3934+10])
                [
                  core_type (src/item.ml[109,3934+14]..[109,3934+30])
                    Ptyp_constr "Production.index" (src/item.ml[109,3934+14]..[109,3934+30])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/item.ml[111,3966+0]..[116,4078+45])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[111,3966+4]..[111,3966+12])
          Ppat_var "classify" (src/item.ml[111,3966+4]..[111,3966+12])
        expression (src/item.ml[111,3966+13]..[116,4078+45]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/item.ml[111,3966+13]..[111,3966+17])
            Ppat_var "item" (src/item.ml[111,3966+13]..[111,3966+17])
          expression (src/item.ml[112,3986+2]..[116,4078+45])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/item.ml[112,3986+6]..[112,3986+31])
                  Ppat_tuple
                  [
                    pattern (src/item.ml[112,3986+6]..[112,3986+10])
                      Ppat_var "prod" (src/item.ml[112,3986+6]..[112,3986+10])
                    pattern (src/item.ml[112,3986+12]..[112,3986+13])
                      Ppat_any
                    pattern (src/item.ml[112,3986+15]..[112,3986+18])
                      Ppat_var "rhs" (src/item.ml[112,3986+15]..[112,3986+18])
                    pattern (src/item.ml[112,3986+20]..[112,3986+23])
                      Ppat_var "pos" (src/item.ml[112,3986+20]..[112,3986+23])
                    pattern (src/item.ml[112,3986+25]..[112,3986+31])
                      Ppat_var "length" (src/item.ml[112,3986+25]..[112,3986+31])
                  ]
                expression (src/item.ml[112,3986+34]..[112,3986+42])
                  Pexp_apply
                  expression (src/item.ml[112,3986+34]..[112,3986+37])
                    Pexp_ident "def" (src/item.ml[112,3986+34]..[112,3986+37])
                  [
                    <arg>
                    Nolabel
                      expression (src/item.ml[112,3986+38]..[112,3986+42])
                        Pexp_ident "item" (src/item.ml[112,3986+38]..[112,3986+42])
                  ]
            ]
            expression (src/item.ml[113,4032+2]..[116,4078+45])
              Pexp_ifthenelse
              expression (src/item.ml[113,4032+5]..[113,4032+17])
                Pexp_apply
                expression (src/item.ml[113,4032+9]..[113,4032+10])
                  Pexp_ident "=" (src/item.ml[113,4032+9]..[113,4032+10])
                [
                  <arg>
                  Nolabel
                    expression (src/item.ml[113,4032+5]..[113,4032+8])
                      Pexp_ident "pos" (src/item.ml[113,4032+5]..[113,4032+8])
                  <arg>
                  Nolabel
                    expression (src/item.ml[113,4032+11]..[113,4032+17])
                      Pexp_ident "length" (src/item.ml[113,4032+11]..[113,4032+17])
                ]
              expression (src/item.ml[114,4055+4]..[114,4055+15])
                Pexp_construct "Reduce" (src/item.ml[114,4055+4]..[114,4055+10])
                Some
                  expression (src/item.ml[114,4055+11]..[114,4055+15])
                    Pexp_ident "prod" (src/item.ml[114,4055+11]..[114,4055+15])
              Some
                expression (src/item.ml[116,4078+4]..[116,4078+45])
                  Pexp_construct "Shift" (src/item.ml[116,4078+4]..[116,4078+9])
                  Some
                    expression (src/item.ml[116,4078+10]..[116,4078+45])
                      Pexp_tuple
                      [
                        expression (src/item.ml[116,4078+11]..[116,4078+20])
                          Pexp_apply
                          expression (src/item.ml[116,4078+11]..[116,4078+20]) ghost
                            Pexp_ident "Array.get" (src/item.ml[116,4078+11]..[116,4078+20]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (src/item.ml[116,4078+11]..[116,4078+14])
                                Pexp_ident "rhs" (src/item.ml[116,4078+11]..[116,4078+14])
                            <arg>
                            Nolabel
                              expression (src/item.ml[116,4078+16]..[116,4078+19])
                                Pexp_ident "pos" (src/item.ml[116,4078+16]..[116,4078+19])
                          ]
                        expression (src/item.ml[116,4078+22]..[116,4078+44])
                          Pexp_apply
                          expression (src/item.ml[116,4078+22]..[116,4078+28])
                            Pexp_ident "import" (src/item.ml[116,4078+22]..[116,4078+28])
                          [
                            <arg>
                            Nolabel
                              expression (src/item.ml[116,4078+29]..[116,4078+44])
                                Pexp_tuple
                                [
                                  expression (src/item.ml[116,4078+30]..[116,4078+34])
                                    Pexp_ident "prod" (src/item.ml[116,4078+30]..[116,4078+34])
                                  expression (src/item.ml[116,4078+36]..[116,4078+43])
                                    Pexp_apply
                                    expression (src/item.ml[116,4078+40]..[116,4078+41])
                                      Pexp_ident "+" (src/item.ml[116,4078+40]..[116,4078+41])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/item.ml[116,4078+36]..[116,4078+39])
                                          Pexp_ident "pos" (src/item.ml[116,4078+36]..[116,4078+39])
                                      <arg>
                                      Nolabel
                                        expression (src/item.ml[116,4078+42]..[116,4078+43])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                ]
                          ]
                      ]
    ]
  structure_item (src/item.ml[122,4291+0]..[122,4291+25])
    Pstr_module
    "Map" (src/item.ml[122,4291+7]..[122,4291+10])
      module_expr (src/item.ml[122,4291+13]..[122,4291+25])
        Pmod_ident "Patricia.Big" (src/item.ml[122,4291+13]..[122,4291+25])
  structure_item (src/item.ml[123,4317+0]..[123,4317+23])
    Pstr_module
    "Set" (src/item.ml[123,4317+7]..[123,4317+10])
      module_expr (src/item.ml[123,4317+13]..[123,4317+23])
        Pmod_ident "Map.Domain" (src/item.ml[123,4317+13]..[123,4317+23])
  structure_item (src/item.ml[136,4920+0]..[339,11333+3])
    Pstr_module
    "Closure" (src/item.ml[136,4920+7]..[136,4920+14])
      module_expr (src/item.ml[136,4920+15]..[339,11333+3])
        Pmod_functor "L" (src/item.ml[136,4920+16]..[136,4920+17])
        module_type (src/item.ml[136,4920+20]..[136,4920+31])
          Pmty_ident "Lookahead.S" (src/item.ml[136,4920+20]..[136,4920+31])
        module_expr (src/item.ml[136,4920+35]..[339,11333+3])
          Pmod_structure
          [
            structure_item (src/item.ml[138,4963+2]..[138,4963+24])
              Pstr_type Rec
              [
                type_declaration "state" (src/item.ml[138,4963+7]..[138,4963+12]) (src/item.ml[138,4963+2]..[138,4963+24])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/item.ml[138,4963+15]..[138,4963+24])
                        Ptyp_constr "Map.t" (src/item.ml[138,4963+19]..[138,4963+24])
                        [
                          core_type (src/item.ml[138,4963+15]..[138,4963+18])
                            Ptyp_constr "L.t" (src/item.ml[138,4963+15]..[138,4963+18])
                            []
                        ]
              ]
            structure_item (src/item.ml[140,4989+2]..[174,6246+5])
              Pstr_type Rec
              [
                type_declaration "node" (src/item.ml[140,4989+7]..[140,4989+11]) (src/item.ml[140,4989+2]..[174,6246+5])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_record
                      [
                        (src/item.ml[144,5057+6]..[144,5057+14])
                          Immutable
                          "item" (src/item.ml[144,5057+6]..[144,5057+10])                          core_type (src/item.ml[144,5057+12]..[144,5057+13])
                            Ptyp_constr "t" (src/item.ml[144,5057+12]..[144,5057+13])
                            []
                        (src/item.ml[155,5535+6]..[155,5535+28])
                          Immutable
                          "epsilon_constant" (src/item.ml[155,5535+6]..[155,5535+22])                          core_type (src/item.ml[155,5535+24]..[155,5535+27])
                            Ptyp_constr "L.t" (src/item.ml[155,5535+24]..[155,5535+27])
                            []
                        (src/item.ml[156,5564+6]..[156,5564+30])
                          Immutable
                          "epsilon_transmits" (src/item.ml[156,5564+6]..[156,5564+23])                          core_type (src/item.ml[156,5564+25]..[156,5564+29])
                            Ptyp_constr "bool" (src/item.ml[156,5564+25]..[156,5564+29])
                            []
                        (src/item.ml[162,5759+6]..[162,5759+45])
                          Mutable
                          "epsilon_transitions" (src/item.ml[162,5759+14]..[162,5759+33])                          core_type (src/item.ml[162,5759+35]..[162,5759+44])
                            Ptyp_constr "list" (src/item.ml[162,5759+40]..[162,5759+44])
                            [
                              core_type (src/item.ml[162,5759+35]..[162,5759+39])
                                Ptyp_constr "node" (src/item.ml[162,5759+35]..[162,5759+39])
                                []
                            ]
                        (src/item.ml[171,6149+6]..[171,6149+27])
                          Mutable
                          "mark" (src/item.ml[171,6149+14]..[171,6149+18])                          core_type (src/item.ml[171,6149+20]..[171,6149+26])
                            Ptyp_constr "Mark.t" (src/item.ml[171,6149+20]..[171,6149+26])
                            []
                        (src/item.ml[172,6177+6]..[172,6177+38])
                          Mutable
                          "predecessors" (src/item.ml[172,6177+14]..[172,6177+26])                          core_type (src/item.ml[172,6177+28]..[172,6177+37])
                            Ptyp_constr "list" (src/item.ml[172,6177+33]..[172,6177+37])
                            [
                              core_type (src/item.ml[172,6177+28]..[172,6177+32])
                                Ptyp_constr "node" (src/item.ml[172,6177+28]..[172,6177+32])
                                []
                            ]
                        (src/item.ml[173,6216+6]..[173,6216+29])
                          Mutable
                          "lookahead" (src/item.ml[173,6216+14]..[173,6216+23])                          core_type (src/item.ml[173,6216+25]..[173,6216+28])
                            Ptyp_constr "L.t" (src/item.ml[173,6216+25]..[173,6216+28])
                            []
                      ]
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
            structure_item (src/item.ml[179,6339+2]..[180,6374+32])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[179,6339+6]..[179,6339+13])
                    Ppat_var "mapping" (src/item.ml[179,6339+6]..[179,6339+13])
                  core_type (src/item.ml[179,6339+16]..[179,6339+32])
                    Ptyp_constr "array" (src/item.ml[179,6339+27]..[179,6339+32])
                    [
                      core_type (src/item.ml[179,6339+16]..[179,6339+26])
                        Ptyp_constr "array" (src/item.ml[179,6339+21]..[179,6339+26])
                        [
                          core_type (src/item.ml[179,6339+16]..[179,6339+20])
                            Ptyp_constr "node" (src/item.ml[179,6339+16]..[179,6339+20])
                            []
                        ]
                    ]
                  expression (src/item.ml[180,6374+4]..[180,6374+32])
                    Pexp_apply
                    expression (src/item.ml[180,6374+4]..[180,6374+14])
                      Pexp_ident "Array.make" (src/item.ml[180,6374+4]..[180,6374+14])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[180,6374+15]..[180,6374+27])
                          Pexp_ident "Production.n" (src/item.ml[180,6374+15]..[180,6374+27])
                      <arg>
                      Nolabel
                        expression (src/item.ml[180,6374+28]..[180,6374+32])
                          Pexp_array
                          []
                    ]
              ]
            structure_item (src/item.ml[182,6408+2]..[184,6466+39])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[182,6408+6]..[182,6408+15])
                    Ppat_var "item2node" (src/item.ml[182,6408+6]..[182,6408+15])
                  expression (src/item.ml[182,6408+16]..[184,6466+39]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/item.ml[182,6408+16]..[182,6408+20])
                      Ppat_var "item" (src/item.ml[182,6408+16]..[182,6408+20])
                    expression (src/item.ml[183,6431+4]..[184,6466+39])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/item.ml[183,6431+8]..[183,6431+17])
                            Ppat_tuple
                            [
                              pattern (src/item.ml[183,6431+8]..[183,6431+12])
                                Ppat_var "prod" (src/item.ml[183,6431+8]..[183,6431+12])
                              pattern (src/item.ml[183,6431+14]..[183,6431+17])
                                Ppat_var "pos" (src/item.ml[183,6431+14]..[183,6431+17])
                            ]
                          expression (src/item.ml[183,6431+20]..[183,6431+31])
                            Pexp_apply
                            expression (src/item.ml[183,6431+20]..[183,6431+26])
                              Pexp_ident "export" (src/item.ml[183,6431+20]..[183,6431+26])
                            [
                              <arg>
                              Nolabel
                                expression (src/item.ml[183,6431+27]..[183,6431+31])
                                  Pexp_ident "item" (src/item.ml[183,6431+27]..[183,6431+31])
                            ]
                      ]
                      expression (src/item.ml[184,6466+4]..[184,6466+39])
                        Pexp_apply
                        expression (src/item.ml[184,6466+4]..[184,6466+39]) ghost
                          Pexp_ident "Array.get" (src/item.ml[184,6466+4]..[184,6466+39]) ghost
                        [
                          <arg>
                          Nolabel
                            expression (src/item.ml[184,6466+4]..[184,6466+33])
                              Pexp_apply
                              expression (src/item.ml[184,6466+4]..[184,6466+33]) ghost
                                Pexp_ident "Array.get" (src/item.ml[184,6466+4]..[184,6466+33]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (src/item.ml[184,6466+4]..[184,6466+11])
                                    Pexp_ident "mapping" (src/item.ml[184,6466+4]..[184,6466+11])
                                <arg>
                                Nolabel
                                  expression (src/item.ml[184,6466+13]..[184,6466+32])
                                    Pexp_apply
                                    expression (src/item.ml[184,6466+13]..[184,6466+27])
                                      Pexp_ident "Production.p2i" (src/item.ml[184,6466+13]..[184,6466+27])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/item.ml[184,6466+28]..[184,6466+32])
                                          Pexp_ident "prod" (src/item.ml[184,6466+28]..[184,6466+32])
                                    ]
                              ]
                          <arg>
                          Nolabel
                            expression (src/item.ml[184,6466+35]..[184,6466+38])
                              Pexp_ident "pos" (src/item.ml[184,6466+35]..[184,6466+38])
                        ]
              ]
            structure_item (src/item.ml[186,6507+2]..[219,7558+5])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[186,6507+6]..[186,6507+8])
                    Ppat_construct "()" (src/item.ml[186,6507+6]..[186,6507+8])
                    None
                  expression (src/item.ml[187,6518+4]..[219,7558+5])
                    Pexp_apply
                    expression (src/item.ml[187,6518+4]..[187,6518+19])
                      Pexp_ident "Production.iter" (src/item.ml[187,6518+4]..[187,6518+19])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[187,6518+20]..[219,7558+5])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/item.ml[187,6518+25]..[187,6518+29])
                            Ppat_var "prod" (src/item.ml[187,6518+25]..[187,6518+29])
                          expression (src/item.ml[188,6551+6]..[218,7550+7])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/item.ml[188,6551+10]..[188,6551+18])
                                  Ppat_tuple
                                  [
                                    pattern (src/item.ml[188,6551+10]..[188,6551+13])
                                      Ppat_var "_nt" (src/item.ml[188,6551+10]..[188,6551+13])
                                    pattern (src/item.ml[188,6551+15]..[188,6551+18])
                                      Ppat_var "rhs" (src/item.ml[188,6551+15]..[188,6551+18])
                                  ]
                                expression (src/item.ml[188,6551+21]..[188,6551+40])
                                  Pexp_apply
                                  expression (src/item.ml[188,6551+21]..[188,6551+35])
                                    Pexp_ident "Production.def" (src/item.ml[188,6551+21]..[188,6551+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/item.ml[188,6551+36]..[188,6551+40])
                                        Pexp_ident "prod" (src/item.ml[188,6551+36]..[188,6551+40])
                                  ]
                            ]
                            expression (src/item.ml[189,6595+6]..[218,7550+7])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/item.ml[189,6595+10]..[189,6595+16])
                                    Ppat_var "length" (src/item.ml[189,6595+10]..[189,6595+16])
                                  expression (src/item.ml[189,6595+19]..[189,6595+35])
                                    Pexp_apply
                                    expression (src/item.ml[189,6595+19]..[189,6595+31])
                                      Pexp_ident "Array.length" (src/item.ml[189,6595+19]..[189,6595+31])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/item.ml[189,6595+32]..[189,6595+35])
                                          Pexp_ident "rhs" (src/item.ml[189,6595+32]..[189,6595+35])
                                    ]
                              ]
                              expression (src/item.ml[190,6634+6]..[218,7550+7])
                                Pexp_apply
                                expression (src/item.ml[190,6634+6]..[218,7550+7]) ghost
                                  Pexp_ident "Array.set" (src/item.ml[190,6634+6]..[218,7550+7]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[190,6634+6]..[190,6634+13])
                                      Pexp_ident "mapping" (src/item.ml[190,6634+6]..[190,6634+13])
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[190,6634+15]..[190,6634+34])
                                      Pexp_apply
                                      expression (src/item.ml[190,6634+15]..[190,6634+29])
                                        Pexp_ident "Production.p2i" (src/item.ml[190,6634+15]..[190,6634+29])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[190,6634+30]..[190,6634+34])
                                            Pexp_ident "prod" (src/item.ml[190,6634+30]..[190,6634+34])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[190,6634+39]..[218,7550+7])
                                      Pexp_apply
                                      expression (src/item.ml[190,6634+39]..[190,6634+49])
                                        Pexp_ident "Array.init" (src/item.ml[190,6634+39]..[190,6634+49])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[190,6634+50]..[190,6634+60])
                                            Pexp_apply
                                            expression (src/item.ml[190,6634+57]..[190,6634+58])
                                              Pexp_ident "+" (src/item.ml[190,6634+57]..[190,6634+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[190,6634+51]..[190,6634+57])
                                                  Pexp_ident "length" (src/item.ml[190,6634+51]..[190,6634+57])
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[190,6634+58]..[190,6634+59])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[190,6634+61]..[218,7550+7])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/item.ml[190,6634+66]..[190,6634+69])
                                              Ppat_var "pos" (src/item.ml[190,6634+66]..[190,6634+69])
                                            expression (src/item.ml[192,6708+8]..[216,7539+9])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/item.ml[192,6708+12]..[192,6708+16])
                                                    Ppat_var "item" (src/item.ml[192,6708+12]..[192,6708+16])
                                                  expression (src/item.ml[192,6708+19]..[192,6708+37])
                                                    Pexp_apply
                                                    expression (src/item.ml[192,6708+19]..[192,6708+25])
                                                      Pexp_ident "import" (src/item.ml[192,6708+19]..[192,6708+25])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/item.ml[192,6708+26]..[192,6708+37])
                                                          Pexp_tuple
                                                          [
                                                            expression (src/item.ml[192,6708+27]..[192,6708+31])
                                                              Pexp_ident "prod" (src/item.ml[192,6708+27]..[192,6708+31])
                                                            expression (src/item.ml[192,6708+33]..[192,6708+36])
                                                              Pexp_ident "pos" (src/item.ml[192,6708+33]..[192,6708+36])
                                                          ]
                                                    ]
                                              ]
                                              expression (src/item.ml[199,6977+8]..[216,7539+9])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/item.ml[199,6977+12]..[199,6977+31])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/item.ml[199,6977+12]..[199,6977+20])
                                                          Ppat_var "constant" (src/item.ml[199,6977+12]..[199,6977+20])
                                                        pattern (src/item.ml[199,6977+22]..[199,6977+31])
                                                          Ppat_var "transmits" (src/item.ml[199,6977+22]..[199,6977+31])
                                                      ]
                                                    expression (src/item.ml[200,7011+10]..[205,7235+26])
                                                      Pexp_ifthenelse
                                                      expression (src/item.ml[200,7011+13]..[200,7011+25])
                                                        Pexp_apply
                                                        expression (src/item.ml[200,7011+17]..[200,7011+18])
                                                          Pexp_ident "<" (src/item.ml[200,7011+17]..[200,7011+18])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/item.ml[200,7011+13]..[200,7011+16])
                                                              Pexp_ident "pos" (src/item.ml[200,7011+13]..[200,7011+16])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/item.ml[200,7011+19]..[200,7011+25])
                                                              Pexp_ident "length" (src/item.ml[200,7011+19]..[200,7011+25])
                                                        ]
                                                      expression (src/item.ml[201,7042+12]..[202,7123+38])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/item.ml[201,7042+16]..[201,7042+31])
                                                              Ppat_tuple
                                                              [
                                                                pattern (src/item.ml[201,7042+16]..[201,7042+24])
                                                                  Ppat_var "nullable" (src/item.ml[201,7042+16]..[201,7042+24])
                                                                pattern (src/item.ml[201,7042+26]..[201,7042+31])
                                                                  Ppat_var "first" (src/item.ml[201,7042+26]..[201,7042+31])
                                                              ]
                                                            expression (src/item.ml[201,7042+34]..[201,7042+77])
                                                              Pexp_apply
                                                              expression (src/item.ml[201,7042+34]..[201,7042+62])
                                                                Pexp_ident "Analysis.nullable_first_prod" (src/item.ml[201,7042+34]..[201,7042+62])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/item.ml[201,7042+63]..[201,7042+67])
                                                                    Pexp_ident "prod" (src/item.ml[201,7042+63]..[201,7042+67])
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/item.ml[201,7042+68]..[201,7042+77])
                                                                    Pexp_apply
                                                                    expression (src/item.ml[201,7042+73]..[201,7042+74])
                                                                      Pexp_ident "+" (src/item.ml[201,7042+73]..[201,7042+74])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/item.ml[201,7042+69]..[201,7042+72])
  Pexp_ident "pos" (src/item.ml[201,7042+69]..[201,7042+72])
                                                                      <arg>
                                                                      Nolabel
expression (src/item.ml[201,7042+75]..[201,7042+76])
  Pexp_constant PConst_int (1,None)
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (src/item.ml[202,7123+12]..[202,7123+38])
                                                          Pexp_tuple
                                                          [
                                                            expression (src/item.ml[202,7123+12]..[202,7123+28])
                                                              Pexp_apply
                                                              expression (src/item.ml[202,7123+12]..[202,7123+22])
                                                                Pexp_ident "L.constant" (src/item.ml[202,7123+12]..[202,7123+22])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/item.ml[202,7123+23]..[202,7123+28])
                                                                    Pexp_ident "first" (src/item.ml[202,7123+23]..[202,7123+28])
                                                              ]
                                                            expression (src/item.ml[202,7123+30]..[202,7123+38])
                                                              Pexp_ident "nullable" (src/item.ml[202,7123+30]..[202,7123+38])
                                                          ]
                                                      Some
                                                        expression (src/item.ml[205,7235+12]..[205,7235+26])
                                                          Pexp_tuple
                                                          [
                                                            expression (src/item.ml[205,7235+12]..[205,7235+19])
                                                              Pexp_ident "L.empty" (src/item.ml[205,7235+12]..[205,7235+19])
                                                            expression (src/item.ml[205,7235+21]..[205,7235+26])
                                                              Pexp_construct "false" (src/item.ml[205,7235+21]..[205,7235+26])
                                                              None
                                                          ]
                                                ]
                                                expression (src/item.ml[208,7274+8]..[216,7539+9])
                                                  Pexp_record
                                                  [
                                                    "item" (src/item.ml[209,7284+10]..[209,7284+14])
                                                      expression (src/item.ml[209,7284+17]..[209,7284+21])
                                                        Pexp_ident "item" (src/item.ml[209,7284+17]..[209,7284+21])
                                                    "epsilon_constant" (src/item.ml[210,7307+10]..[210,7307+26])
                                                      expression (src/item.ml[210,7307+29]..[210,7307+37])
                                                        Pexp_ident "constant" (src/item.ml[210,7307+29]..[210,7307+37])
                                                    "epsilon_transmits" (src/item.ml[211,7346+10]..[211,7346+27])
                                                      expression (src/item.ml[211,7346+30]..[211,7346+39])
                                                        Pexp_ident "transmits" (src/item.ml[211,7346+30]..[211,7346+39])
                                                    "epsilon_transitions" (src/item.ml[212,7387+10]..[212,7387+29])
                                                      expression (src/item.ml[212,7387+32]..[212,7387+34])
                                                        Pexp_construct "[]" (src/item.ml[212,7387+32]..[212,7387+34])
                                                        None
                                                    "mark" (src/item.ml[213,7451+10]..[213,7451+14])
                                                      expression (src/item.ml[213,7451+17]..[213,7451+26])
                                                        Pexp_ident "Mark.none" (src/item.ml[213,7451+17]..[213,7451+26])
                                                    "predecessors" (src/item.ml[214,7479+10]..[214,7479+22])
                                                      expression (src/item.ml[214,7479+25]..[214,7479+27])
                                                        Pexp_construct "[]" (src/item.ml[214,7479+25]..[214,7479+27])
                                                        None
                                                    "lookahead" (src/item.ml[215,7508+10]..[215,7508+19])
                                                      expression (src/item.ml[215,7508+22]..[215,7508+29])
                                                        Pexp_ident "L.empty" (src/item.ml[215,7508+22]..[215,7508+29])
                                                  ]
                                                  None
                                      ]
                                ]
                    ]
              ]
            structure_item (src/item.ml[223,7609+2]..[242,8131+5])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[223,7609+6]..[223,7609+8])
                    Ppat_construct "()" (src/item.ml[223,7609+6]..[223,7609+8])
                    None
                  expression (src/item.ml[224,7620+4]..[242,8131+5])
                    Pexp_apply
                    expression (src/item.ml[224,7620+4]..[224,7620+19])
                      Pexp_ident "Production.iter" (src/item.ml[224,7620+4]..[224,7620+19])
                    [
                      <arg>
                      Nolabel
                        expression (src/item.ml[224,7620+20]..[242,8131+5])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/item.ml[224,7620+25]..[224,7620+29])
                            Ppat_var "prod" (src/item.ml[224,7620+25]..[224,7620+29])
                          expression (src/item.ml[225,7653+6]..[241,8093+37])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/item.ml[225,7653+10]..[225,7653+18])
                                  Ppat_tuple
                                  [
                                    pattern (src/item.ml[225,7653+10]..[225,7653+13])
                                      Ppat_var "_nt" (src/item.ml[225,7653+10]..[225,7653+13])
                                    pattern (src/item.ml[225,7653+15]..[225,7653+18])
                                      Ppat_var "rhs" (src/item.ml[225,7653+15]..[225,7653+18])
                                  ]
                                expression (src/item.ml[225,7653+21]..[225,7653+40])
                                  Pexp_apply
                                  expression (src/item.ml[225,7653+21]..[225,7653+35])
                                    Pexp_ident "Production.def" (src/item.ml[225,7653+21]..[225,7653+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/item.ml[225,7653+36]..[225,7653+40])
                                        Pexp_ident "prod" (src/item.ml[225,7653+36]..[225,7653+40])
                                  ]
                            ]
                            expression (src/item.ml[226,7697+6]..[241,8093+37])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/item.ml[226,7697+10]..[226,7697+16])
                                    Ppat_var "length" (src/item.ml[226,7697+10]..[226,7697+16])
                                  expression (src/item.ml[226,7697+19]..[226,7697+35])
                                    Pexp_apply
                                    expression (src/item.ml[226,7697+19]..[226,7697+31])
                                      Pexp_ident "Array.length" (src/item.ml[226,7697+19]..[226,7697+31])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/item.ml[226,7697+32]..[226,7697+35])
                                          Pexp_ident "rhs" (src/item.ml[226,7697+32]..[226,7697+35])
                                    ]
                              ]
                              expression (src/item.ml[227,7736+6]..[241,8093+37])
                                Pexp_apply
                                expression (src/item.ml[227,7736+6]..[227,7736+17])
                                  Pexp_ident "Array.iteri" (src/item.ml[227,7736+6]..[227,7736+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[227,7736+18]..[241,8093+7])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/item.ml[227,7736+23]..[227,7736+26])
                                        Ppat_var "pos" (src/item.ml[227,7736+23]..[227,7736+26])
                                      expression (src/item.ml[227,7736+27]..[239,8077+14]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/item.ml[227,7736+27]..[227,7736+31])
                                          Ppat_var "node" (src/item.ml[227,7736+27]..[227,7736+31])
                                        expression (src/item.ml[229,7772+8]..[239,8077+14])
                                          Pexp_setfield
                                          expression (src/item.ml[229,7772+8]..[229,7772+12])
                                            Pexp_ident "node" (src/item.ml[229,7772+8]..[229,7772+12])
                                          "epsilon_transitions" (src/item.ml[229,7772+13]..[229,7772+32])
                                          expression (src/item.ml[230,7808+10]..[239,8077+14])
                                            Pexp_ifthenelse
                                            expression (src/item.ml[230,7808+13]..[230,7808+25])
                                              Pexp_apply
                                              expression (src/item.ml[230,7808+17]..[230,7808+18])
                                                Pexp_ident "<" (src/item.ml[230,7808+17]..[230,7808+18])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[230,7808+13]..[230,7808+16])
                                                    Pexp_ident "pos" (src/item.ml[230,7808+13]..[230,7808+16])
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[230,7808+19]..[230,7808+25])
                                                    Pexp_ident "length" (src/item.ml[230,7808+19]..[230,7808+25])
                                              ]
                                            expression (src/item.ml[231,7839+12]..[237,8043+18])
                                              Pexp_match
                                              expression (src/item.ml[231,7839+18]..[231,7839+27])
                                                Pexp_apply
                                                expression (src/item.ml[231,7839+18]..[231,7839+27]) ghost
                                                  Pexp_ident "Array.get" (src/item.ml[231,7839+18]..[231,7839+27]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[231,7839+18]..[231,7839+21])
                                                      Pexp_ident "rhs" (src/item.ml[231,7839+18]..[231,7839+21])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[231,7839+23]..[231,7839+26])
                                                      Pexp_ident "pos" (src/item.ml[231,7839+23]..[231,7839+26])
                                                ]
                                              [
                                                <case>
                                                  pattern (src/item.ml[232,7872+14]..[232,7872+25])
                                                    Ppat_construct "Symbol.N" (src/item.ml[232,7872+14]..[232,7872+22])
                                                    Some
                                                      []
                                                      pattern (src/item.ml[232,7872+23]..[232,7872+25])
                                                        Ppat_var "nt" (src/item.ml[232,7872+23]..[232,7872+25])
                                                  expression (src/item.ml[233,7901+16]..[235,7997+17])
                                                    Pexp_apply
                                                    expression (src/item.ml[233,7901+16]..[233,7901+32])
                                                      Pexp_ident "Production.mapnt" (src/item.ml[233,7901+16]..[233,7901+32])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/item.ml[233,7901+33]..[233,7901+35])
                                                          Pexp_ident "nt" (src/item.ml[233,7901+33]..[233,7901+35])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/item.ml[233,7901+36]..[235,7997+17])
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (src/item.ml[233,7901+41]..[233,7901+45])
                                                            Ppat_var "prod" (src/item.ml[233,7901+41]..[233,7901+45])
                                                          expression (src/item.ml[234,7950+18]..[234,7950+46])
                                                            Pexp_apply
                                                            expression (src/item.ml[234,7950+18]..[234,7950+27])
                                                              Pexp_ident "item2node" (src/item.ml[234,7950+18]..[234,7950+27])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/item.ml[234,7950+28]..[234,7950+46])
                                                                  Pexp_apply
                                                                  expression (src/item.ml[234,7950+29]..[234,7950+35])
                                                                    Pexp_ident "import" (src/item.ml[234,7950+29]..[234,7950+35])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/item.ml[234,7950+36]..[234,7950+45])
Pexp_tuple
[
  expression (src/item.ml[234,7950+37]..[234,7950+41])
    Pexp_ident "prod" (src/item.ml[234,7950+37]..[234,7950+41])
  expression (src/item.ml[234,7950+43]..[234,7950+44])
    Pexp_constant PConst_int (0,None)
]
                                                                  ]
                                                            ]
                                                    ]
                                                <case>
                                                  pattern (src/item.ml[236,8015+14]..[236,8015+24])
                                                    Ppat_construct "Symbol.T" (src/item.ml[236,8015+14]..[236,8015+22])
                                                    Some
                                                      []
                                                      pattern (src/item.ml[236,8015+23]..[236,8015+24])
                                                        Ppat_any
                                                  expression (src/item.ml[237,8043+16]..[237,8043+18])
                                                    Pexp_construct "[]" (src/item.ml[237,8043+16]..[237,8043+18])
                                                    None
                                              ]
                                            Some
                                              expression (src/item.ml[239,8077+12]..[239,8077+14])
                                                Pexp_construct "[]" (src/item.ml[239,8077+12]..[239,8077+14])
                                                None
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[241,8093+8]..[241,8093+37])
                                      Pexp_apply
                                      expression (src/item.ml[241,8093+8]..[241,8093+37]) ghost
                                        Pexp_ident "Array.get" (src/item.ml[241,8093+8]..[241,8093+37]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[241,8093+8]..[241,8093+15])
                                            Pexp_ident "mapping" (src/item.ml[241,8093+8]..[241,8093+15])
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[241,8093+17]..[241,8093+36])
                                            Pexp_apply
                                            expression (src/item.ml[241,8093+17]..[241,8093+31])
                                              Pexp_ident "Production.p2i" (src/item.ml[241,8093+17]..[241,8093+31])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[241,8093+32]..[241,8093+36])
                                                  Pexp_ident "prod" (src/item.ml[241,8093+32]..[241,8093+36])
                                            ]
                                      ]
                                ]
                    ]
              ]
            structure_item (src/item.ml[257,8769+2]..[335,11274+21])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[257,8769+6]..[257,8769+13])
                    Ppat_var "closure" (src/item.ml[257,8769+6]..[257,8769+13])
                  expression (src/item.ml[257,8769+14]..[335,11274+21]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/item.ml[257,8769+14]..[257,8769+29])
                      Ppat_constraint
                      pattern (src/item.ml[257,8769+15]..[257,8769+20])
                        Ppat_var "items" (src/item.ml[257,8769+15]..[257,8769+20])
                      core_type (src/item.ml[257,8769+23]..[257,8769+28])
                        Ptyp_constr "state" (src/item.ml[257,8769+23]..[257,8769+28])
                        []
                    expression (src/item.ml[257,8769+30]..[335,11274+21])
                      Pexp_constraint
                      expression (src/item.ml[271,9344+4]..[335,11274+21])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/item.ml[271,9344+8]..[271,9344+12])
                              Ppat_var "this" (src/item.ml[271,9344+8]..[271,9344+12])
                            expression (src/item.ml[271,9344+15]..[271,9344+27])
                              Pexp_apply
                              expression (src/item.ml[271,9344+15]..[271,9344+25])
                                Pexp_ident "Mark.fresh" (src/item.ml[271,9344+15]..[271,9344+25])
                              [
                                <arg>
                                Nolabel
                                  expression (src/item.ml[271,9344+25]..[271,9344+27])
                                    Pexp_construct "()" (src/item.ml[271,9344+25]..[271,9344+27])
                                    None
                              ]
                        ]
                        expression (src/item.ml[272,9375+4]..[335,11274+21])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/item.ml[272,9375+8]..[272,9375+13])
                                Ppat_var "nodes" (src/item.ml[272,9375+8]..[272,9375+13])
                              expression (src/item.ml[272,9375+16]..[272,9375+22])
                                Pexp_apply
                                expression (src/item.ml[272,9375+16]..[272,9375+19])
                                  Pexp_ident "ref" (src/item.ml[272,9375+16]..[272,9375+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[272,9375+20]..[272,9375+22])
                                      Pexp_construct "[]" (src/item.ml[272,9375+20]..[272,9375+22])
                                      None
                                ]
                          ]
                          expression (src/item.ml[274,9402+4]..[335,11274+21])
                            Pexp_let Rec
                            [
                              <def>
                                pattern (src/item.ml[274,9402+12]..[274,9402+17])
                                  Ppat_var "visit" (src/item.ml[274,9402+12]..[274,9402+17])
                                expression (src/item.ml[274,9402+18]..[286,9852+9]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/item.ml[274,9402+18]..[274,9402+24])
                                    Ppat_var "father" (src/item.ml[274,9402+18]..[274,9402+24])
                                  expression (src/item.ml[274,9402+25]..[286,9852+9]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/item.ml[274,9402+25]..[274,9402+34])
                                      Ppat_var "transmits" (src/item.ml[274,9402+25]..[274,9402+34])
                                    expression (src/item.ml[274,9402+35]..[286,9852+9]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/item.ml[274,9402+35]..[274,9402+39])
                                        Ppat_var "toks" (src/item.ml[274,9402+35]..[274,9402+39])
                                      expression (src/item.ml[274,9402+40]..[286,9852+9]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/item.ml[274,9402+40]..[274,9402+44])
                                          Ppat_var "node" (src/item.ml[274,9402+40]..[274,9402+44])
                                        expression (src/item.ml[275,9449+6]..[286,9852+9])
                                          Pexp_ifthenelse
                                          expression (src/item.ml[275,9449+9]..[275,9449+33])
                                            Pexp_apply
                                            expression (src/item.ml[275,9449+9]..[275,9449+18])
                                              Pexp_ident "Mark.same" (src/item.ml[275,9449+9]..[275,9449+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[275,9449+19]..[275,9449+28])
                                                  Pexp_field
                                                  expression (src/item.ml[275,9449+19]..[275,9449+23])
                                                    Pexp_ident "node" (src/item.ml[275,9449+19]..[275,9449+23])
                                                  "mark" (src/item.ml[275,9449+24]..[275,9449+28])
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[275,9449+29]..[275,9449+33])
                                                  Pexp_ident "this" (src/item.ml[275,9449+29]..[275,9449+33])
                                            ]
                                          expression (src/item.ml[275,9449+39]..[280,9679+9])
                                            Pexp_sequence
                                            expression (src/item.ml[277,9539+8]..[277,9539+53])
                                              Pexp_setfield
                                              expression (src/item.ml[277,9539+8]..[277,9539+12])
                                                Pexp_ident "node" (src/item.ml[277,9539+8]..[277,9539+12])
                                              "lookahead" (src/item.ml[277,9539+13]..[277,9539+22])
                                              expression (src/item.ml[277,9539+26]..[277,9539+53])
                                                Pexp_apply
                                                expression (src/item.ml[277,9539+26]..[277,9539+33])
                                                  Pexp_ident "L.union" (src/item.ml[277,9539+26]..[277,9539+33])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[277,9539+34]..[277,9539+38])
                                                      Pexp_ident "toks" (src/item.ml[277,9539+34]..[277,9539+38])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[277,9539+39]..[277,9539+53])
                                                      Pexp_field
                                                      expression (src/item.ml[277,9539+39]..[277,9539+43])
                                                        Pexp_ident "node" (src/item.ml[277,9539+39]..[277,9539+43])
                                                      "lookahead" (src/item.ml[277,9539+44]..[277,9539+53])
                                                ]
                                            expression (src/item.ml[278,9594+8]..[279,9620+58])
                                              Pexp_ifthenelse
                                              expression (src/item.ml[278,9594+11]..[278,9594+20])
                                                Pexp_ident "transmits" (src/item.ml[278,9594+11]..[278,9594+20])
                                              expression (src/item.ml[279,9620+10]..[279,9620+58])
                                                Pexp_setfield
                                                expression (src/item.ml[279,9620+10]..[279,9620+14])
                                                  Pexp_ident "node" (src/item.ml[279,9620+10]..[279,9620+14])
                                                "predecessors" (src/item.ml[279,9620+15]..[279,9620+27])
                                                expression (src/item.ml[279,9620+31]..[279,9620+58])
                                                  Pexp_construct "::" (src/item.ml[279,9620+38]..[279,9620+40])
                                                  Some
                                                    expression (src/item.ml[279,9620+31]..[279,9620+58]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/item.ml[279,9620+31]..[279,9620+37])
                                                          Pexp_ident "father" (src/item.ml[279,9620+31]..[279,9620+37])
                                                        expression (src/item.ml[279,9620+41]..[279,9620+58])
                                                          Pexp_field
                                                          expression (src/item.ml[279,9620+41]..[279,9620+45])
                                                            Pexp_ident "node" (src/item.ml[279,9620+41]..[279,9620+45])
                                                          "predecessors" (src/item.ml[279,9620+46]..[279,9620+58])
                                                      ]
                                              None
                                          Some
                                            expression (src/item.ml[281,9689+11]..[286,9852+9])
                                              Pexp_sequence
                                              expression (src/item.ml[283,9733+8]..[283,9733+65])
                                                Pexp_setfield
                                                expression (src/item.ml[283,9733+8]..[283,9733+12])
                                                  Pexp_ident "node" (src/item.ml[283,9733+8]..[283,9733+12])
                                                "predecessors" (src/item.ml[283,9733+13]..[283,9733+25])
                                                expression (src/item.ml[283,9733+29]..[283,9733+65])
                                                  Pexp_ifthenelse
                                                  expression (src/item.ml[283,9733+32]..[283,9733+41])
                                                    Pexp_ident "transmits" (src/item.ml[283,9733+32]..[283,9733+41])
                                                  expression (src/item.ml[283,9733+47]..[283,9733+57])
                                                    Pexp_construct "::" (src/item.ml[283,9733+49]..[283,9733+57]) ghost
                                                    Some
                                                      expression (src/item.ml[283,9733+49]..[283,9733+57]) ghost
                                                        Pexp_tuple
                                                        [
                                                          expression (src/item.ml[283,9733+49]..[283,9733+55])
                                                            Pexp_ident "father" (src/item.ml[283,9733+49]..[283,9733+55])
                                                          expression (src/item.ml[283,9733+56]..[283,9733+57]) ghost
                                                            Pexp_construct "[]" (src/item.ml[283,9733+56]..[283,9733+57]) ghost
                                                            None
                                                        ]
                                                  Some
                                                    expression (src/item.ml[283,9733+63]..[283,9733+65])
                                                      Pexp_construct "[]" (src/item.ml[283,9733+63]..[283,9733+65])
                                                      None
                                              expression (src/item.ml[284,9800+8]..[285,9832+19])
                                                Pexp_sequence
                                                expression (src/item.ml[284,9800+8]..[284,9800+30])
                                                  Pexp_setfield
                                                  expression (src/item.ml[284,9800+8]..[284,9800+12])
                                                    Pexp_ident "node" (src/item.ml[284,9800+8]..[284,9800+12])
                                                  "lookahead" (src/item.ml[284,9800+13]..[284,9800+22])
                                                  expression (src/item.ml[284,9800+26]..[284,9800+30])
                                                    Pexp_ident "toks" (src/item.ml[284,9800+26]..[284,9800+30])
                                                expression (src/item.ml[285,9832+8]..[285,9832+19])
                                                  Pexp_apply
                                                  expression (src/item.ml[285,9832+8]..[285,9832+14])
                                                    Pexp_ident "follow" (src/item.ml[285,9832+8]..[285,9832+14])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/item.ml[285,9832+15]..[285,9832+19])
                                                        Pexp_ident "node" (src/item.ml[285,9832+15]..[285,9832+19])
                                                  ]
                              <def>
                                pattern (src/item.ml[288,9863+8]..[288,9863+14])
                                  Ppat_var "follow" (src/item.ml[288,9863+8]..[288,9863+14])
                                expression (src/item.ml[288,9863+15]..[293,10023+32]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/item.ml[288,9863+15]..[288,9863+19])
                                    Ppat_var "node" (src/item.ml[288,9863+15]..[288,9863+19])
                                  expression (src/item.ml[289,9885+6]..[293,10023+32])
                                    Pexp_sequence
                                    expression (src/item.ml[289,9885+6]..[289,9885+23])
                                      Pexp_setfield
                                      expression (src/item.ml[289,9885+6]..[289,9885+10])
                                        Pexp_ident "node" (src/item.ml[289,9885+6]..[289,9885+10])
                                      "mark" (src/item.ml[289,9885+11]..[289,9885+15])
                                      expression (src/item.ml[289,9885+19]..[289,9885+23])
                                        Pexp_ident "this" (src/item.ml[289,9885+19]..[289,9885+23])
                                    expression (src/item.ml[290,9910+6]..[293,10023+32])
                                      Pexp_sequence
                                      expression (src/item.ml[290,9910+6]..[290,9910+29])
                                        Pexp_apply
                                        expression (src/item.ml[290,9910+12]..[290,9910+14])
                                          Pexp_ident ":=" (src/item.ml[290,9910+12]..[290,9910+14])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[290,9910+6]..[290,9910+11])
                                              Pexp_ident "nodes" (src/item.ml[290,9910+6]..[290,9910+11])
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[290,9910+15]..[290,9910+29])
                                              Pexp_construct "::" (src/item.ml[290,9910+20]..[290,9910+22])
                                              Some
                                                expression (src/item.ml[290,9910+15]..[290,9910+29]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (src/item.ml[290,9910+15]..[290,9910+19])
                                                      Pexp_ident "node" (src/item.ml[290,9910+15]..[290,9910+19])
                                                    expression (src/item.ml[290,9910+23]..[290,9910+29])
                                                      Pexp_apply
                                                      expression (src/item.ml[290,9910+23]..[290,9910+24])
                                                        Pexp_ident "!" (src/item.ml[290,9910+23]..[290,9910+24])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/item.ml[290,9910+24]..[290,9910+29])
                                                            Pexp_ident "nodes" (src/item.ml[290,9910+24]..[290,9910+29])
                                                      ]
                                                  ]
                                        ]
                                      expression (src/item.ml[291,9941+6]..[293,10023+32])
                                        Pexp_apply
                                        expression (src/item.ml[291,9941+6]..[291,9941+15])
                                          Pexp_ident "List.iter" (src/item.ml[291,9941+6]..[291,9941+15])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[292,9957+8]..[292,9957+65])
                                              Pexp_apply
                                              expression (src/item.ml[292,9957+9]..[292,9957+14])
                                                Pexp_ident "visit" (src/item.ml[292,9957+9]..[292,9957+14])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[292,9957+15]..[292,9957+19])
                                                    Pexp_ident "node" (src/item.ml[292,9957+15]..[292,9957+19])
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[292,9957+20]..[292,9957+42])
                                                    Pexp_field
                                                    expression (src/item.ml[292,9957+20]..[292,9957+24])
                                                      Pexp_ident "node" (src/item.ml[292,9957+20]..[292,9957+24])
                                                    "epsilon_transmits" (src/item.ml[292,9957+25]..[292,9957+42])
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[292,9957+43]..[292,9957+64])
                                                    Pexp_field
                                                    expression (src/item.ml[292,9957+43]..[292,9957+47])
                                                      Pexp_ident "node" (src/item.ml[292,9957+43]..[292,9957+47])
                                                    "epsilon_constant" (src/item.ml[292,9957+48]..[292,9957+64])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[293,10023+8]..[293,10023+32])
                                              Pexp_field
                                              expression (src/item.ml[293,10023+8]..[293,10023+12])
                                                Pexp_ident "node" (src/item.ml[293,10023+8]..[293,10023+12])
                                              "epsilon_transitions" (src/item.ml[293,10023+13]..[293,10023+32])
                                        ]
                            ]
                            expression (src/item.ml[297,10065+4]..[335,11274+21])
                              Pexp_sequence
                              expression (src/item.ml[297,10065+4]..[300,10177+11])
                                Pexp_apply
                                expression (src/item.ml[297,10065+4]..[297,10065+12])
                                  Pexp_ident "Map.iter" (src/item.ml[297,10065+4]..[297,10065+12])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[297,10065+13]..[300,10177+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/item.ml[297,10065+18]..[297,10065+22])
                                        Ppat_var "item" (src/item.ml[297,10065+18]..[297,10065+22])
                                      expression (src/item.ml[297,10065+23]..[299,10131+45]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/item.ml[297,10065+23]..[297,10065+27])
                                          Ppat_var "toks" (src/item.ml[297,10065+23]..[297,10065+27])
                                        expression (src/item.ml[298,10096+6]..[299,10131+45])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/item.ml[298,10096+10]..[298,10096+14])
                                                Ppat_var "node" (src/item.ml[298,10096+10]..[298,10096+14])
                                              expression (src/item.ml[298,10096+17]..[298,10096+31])
                                                Pexp_apply
                                                expression (src/item.ml[298,10096+17]..[298,10096+26])
                                                  Pexp_ident "item2node" (src/item.ml[298,10096+17]..[298,10096+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[298,10096+27]..[298,10096+31])
                                                      Pexp_ident "item" (src/item.ml[298,10096+27]..[298,10096+31])
                                                ]
                                          ]
                                          expression (src/item.ml[299,10131+6]..[299,10131+45])
                                            Pexp_apply
                                            expression (src/item.ml[299,10131+6]..[299,10131+11])
                                              Pexp_ident "visit" (src/item.ml[299,10131+6]..[299,10131+11])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[299,10131+12]..[299,10131+16])
                                                  Pexp_ident "node" (src/item.ml[299,10131+12]..[299,10131+16])
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[299,10131+30]..[299,10131+35])
                                                  Pexp_construct "false" (src/item.ml[299,10131+30]..[299,10131+35])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[299,10131+36]..[299,10131+40])
                                                  Pexp_ident "toks" (src/item.ml[299,10131+36]..[299,10131+40])
                                              <arg>
                                              Nolabel
                                                expression (src/item.ml[299,10131+41]..[299,10131+45])
                                                  Pexp_ident "node" (src/item.ml[299,10131+41]..[299,10131+45])
                                            ]
                                  <arg>
                                  Nolabel
                                    expression (src/item.ml[300,10177+6]..[300,10177+11])
                                      Pexp_ident "items" (src/item.ml[300,10177+6]..[300,10177+11])
                                ]
                              expression (src/item.ml[302,10191+4]..[335,11274+21])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/item.ml[302,10191+8]..[302,10191+13])
                                      Ppat_var "nodes" (src/item.ml[302,10191+8]..[302,10191+13])
                                    expression (src/item.ml[303,10207+6]..[303,10207+12])
                                      Pexp_apply
                                      expression (src/item.ml[303,10207+6]..[303,10207+7])
                                        Pexp_ident "!" (src/item.ml[303,10207+6]..[303,10207+7])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/item.ml[303,10207+7]..[303,10207+12])
                                            Pexp_ident "nodes" (src/item.ml[303,10207+7]..[303,10207+12])
                                      ]
                                ]
                                expression (src/item.ml[309,10417+4]..[335,11274+21])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/item.ml[309,10417+8]..[309,10417+12])
                                        Ppat_var "this" (src/item.ml[309,10417+8]..[309,10417+12])
                                      expression (src/item.ml[309,10417+15]..[309,10417+27])
                                        Pexp_apply
                                        expression (src/item.ml[309,10417+15]..[309,10417+25])
                                          Pexp_ident "Mark.fresh" (src/item.ml[309,10417+15]..[309,10417+25])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[309,10417+25]..[309,10417+27])
                                              Pexp_construct "()" (src/item.ml[309,10417+25]..[309,10417+27])
                                              None
                                        ]
                                  ]
                                  expression (src/item.ml[311,10449+4]..[335,11274+21])
                                    Pexp_let Rec
                                    [
                                      <def>
                                        pattern (src/item.ml[311,10449+12]..[311,10449+16])
                                          Ppat_var "walk" (src/item.ml[311,10449+12]..[311,10449+16])
                                        expression (src/item.ml[311,10449+17]..[321,10869+9]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/item.ml[311,10449+17]..[311,10449+21])
                                            Ppat_var "node" (src/item.ml[311,10449+17]..[311,10449+21])
                                          expression (src/item.ml[312,10473+6]..[321,10869+9])
                                            Pexp_ifthenelse
                                            expression (src/item.ml[312,10473+9]..[312,10473+39])
                                              Pexp_apply
                                              expression (src/item.ml[312,10473+9]..[312,10473+12])
                                                Pexp_ident "not" (src/item.ml[312,10473+9]..[312,10473+12])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/item.ml[312,10473+13]..[312,10473+39])
                                                    Pexp_apply
                                                    expression (src/item.ml[312,10473+14]..[312,10473+23])
                                                      Pexp_ident "Mark.same" (src/item.ml[312,10473+14]..[312,10473+23])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/item.ml[312,10473+24]..[312,10473+33])
                                                          Pexp_field
                                                          expression (src/item.ml[312,10473+24]..[312,10473+28])
                                                            Pexp_ident "node" (src/item.ml[312,10473+24]..[312,10473+28])
                                                          "mark" (src/item.ml[312,10473+29]..[312,10473+33])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/item.ml[312,10473+34]..[312,10473+38])
                                                          Pexp_ident "this" (src/item.ml[312,10473+34]..[312,10473+38])
                                                    ]
                                              ]
                                            expression (src/item.ml[312,10473+45]..[321,10869+9])
                                              Pexp_sequence
                                              expression (src/item.ml[314,10551+8]..[314,10551+25])
                                                Pexp_setfield
                                                expression (src/item.ml[314,10551+8]..[314,10551+12])
                                                  Pexp_ident "node" (src/item.ml[314,10551+8]..[314,10551+12])
                                                "mark" (src/item.ml[314,10551+13]..[314,10551+17])
                                                expression (src/item.ml[314,10551+21]..[314,10551+25])
                                                  Pexp_ident "this" (src/item.ml[314,10551+21]..[314,10551+25])
                                              expression (src/item.ml[317,10702+8]..[320,10841+27])
                                                Pexp_apply
                                                expression (src/item.ml[317,10702+8]..[317,10702+17])
                                                  Pexp_ident "List.iter" (src/item.ml[317,10702+8]..[317,10702+17])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[317,10702+18]..[320,10841+9])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (src/item.ml[317,10702+23]..[317,10702+34])
                                                        Ppat_var "predecessor" (src/item.ml[317,10702+23]..[317,10702+34])
                                                      expression (src/item.ml[318,10740+10]..[319,10768+72])
                                                        Pexp_sequence
                                                        expression (src/item.ml[318,10740+10]..[318,10740+26])
                                                          Pexp_apply
                                                          expression (src/item.ml[318,10740+10]..[318,10740+14])
                                                            Pexp_ident "walk" (src/item.ml[318,10740+10]..[318,10740+14])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/item.ml[318,10740+15]..[318,10740+26])
                                                                Pexp_ident "predecessor" (src/item.ml[318,10740+15]..[318,10740+26])
                                                          ]
                                                        expression (src/item.ml[319,10768+10]..[319,10768+72])
                                                          Pexp_setfield
                                                          expression (src/item.ml[319,10768+10]..[319,10768+14])
                                                            Pexp_ident "node" (src/item.ml[319,10768+10]..[319,10768+14])
                                                          "lookahead" (src/item.ml[319,10768+15]..[319,10768+24])
                                                          expression (src/item.ml[319,10768+28]..[319,10768+72])
                                                            Pexp_apply
                                                            expression (src/item.ml[319,10768+28]..[319,10768+35])
                                                              Pexp_ident "L.union" (src/item.ml[319,10768+28]..[319,10768+35])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/item.ml[319,10768+36]..[319,10768+57])
                                                                  Pexp_field
                                                                  expression (src/item.ml[319,10768+36]..[319,10768+47])
                                                                    Pexp_ident "predecessor" (src/item.ml[319,10768+36]..[319,10768+47])
                                                                  "lookahead" (src/item.ml[319,10768+48]..[319,10768+57])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/item.ml[319,10768+58]..[319,10768+72])
                                                                  Pexp_field
                                                                  expression (src/item.ml[319,10768+58]..[319,10768+62])
                                                                    Pexp_ident "node" (src/item.ml[319,10768+58]..[319,10768+62])
                                                                  "lookahead" (src/item.ml[319,10768+63]..[319,10768+72])
                                                            ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/item.ml[320,10841+10]..[320,10841+27])
                                                      Pexp_field
                                                      expression (src/item.ml[320,10841+10]..[320,10841+14])
                                                        Pexp_ident "node" (src/item.ml[320,10841+10]..[320,10841+14])
                                                      "predecessors" (src/item.ml[320,10841+15]..[320,10841+27])
                                                ]
                                            None
                                    ]
                                    expression (src/item.ml[324,10887+4]..[335,11274+21])
                                      Pexp_sequence
                                      expression (src/item.ml[324,10887+4]..[324,10887+24])
                                        Pexp_apply
                                        expression (src/item.ml[324,10887+4]..[324,10887+13])
                                          Pexp_ident "List.iter" (src/item.ml[324,10887+4]..[324,10887+13])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[324,10887+14]..[324,10887+18])
                                              Pexp_ident "walk" (src/item.ml[324,10887+14]..[324,10887+18])
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[324,10887+19]..[324,10887+24])
                                              Pexp_ident "nodes" (src/item.ml[324,10887+19]..[324,10887+24])
                                        ]
                                      expression (src/item.ml[330,11092+4]..[335,11274+21])
                                        Pexp_apply
                                        expression (src/item.ml[330,11092+4]..[330,11092+18])
                                          Pexp_ident "List.fold_left" (src/item.ml[330,11092+4]..[330,11092+18])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[330,11092+19]..[335,11274+5])
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/item.ml[330,11092+24]..[330,11092+31])
                                                Ppat_var "closure" (src/item.ml[330,11092+24]..[330,11092+31])
                                              expression (src/item.ml[330,11092+32]..[334,11260+13]) ghost
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (src/item.ml[330,11092+32]..[330,11092+36])
                                                  Ppat_var "node" (src/item.ml[330,11092+32]..[330,11092+36])
                                                expression (src/item.ml[331,11132+6]..[334,11260+13])
                                                  Pexp_sequence
                                                  expression (src/item.ml[331,11132+6]..[331,11132+29])
                                                    Pexp_setfield
                                                    expression (src/item.ml[331,11132+6]..[331,11132+10])
                                                      Pexp_ident "node" (src/item.ml[331,11132+6]..[331,11132+10])
                                                    "predecessors" (src/item.ml[331,11132+11]..[331,11132+23])
                                                    expression (src/item.ml[331,11132+27]..[331,11132+29])
                                                      Pexp_construct "[]" (src/item.ml[331,11132+27]..[331,11132+29])
                                                      None
                                                  expression (src/item.ml[332,11163+6]..[334,11260+13])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/item.ml[332,11163+10]..[332,11163+17])
                                                          Ppat_var "closure" (src/item.ml[332,11163+10]..[332,11163+17])
                                                        expression (src/item.ml[332,11163+20]..[332,11163+60])
                                                          Pexp_apply
                                                          expression (src/item.ml[332,11163+20]..[332,11163+27])
                                                            Pexp_ident "Map.add" (src/item.ml[332,11163+20]..[332,11163+27])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/item.ml[332,11163+28]..[332,11163+37])
                                                                Pexp_field
                                                                expression (src/item.ml[332,11163+28]..[332,11163+32])
                                                                  Pexp_ident "node" (src/item.ml[332,11163+28]..[332,11163+32])
                                                                "item" (src/item.ml[332,11163+33]..[332,11163+37])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/item.ml[332,11163+38]..[332,11163+52])
                                                                Pexp_field
                                                                expression (src/item.ml[332,11163+38]..[332,11163+42])
                                                                  Pexp_ident "node" (src/item.ml[332,11163+38]..[332,11163+42])
                                                                "lookahead" (src/item.ml[332,11163+43]..[332,11163+52])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/item.ml[332,11163+53]..[332,11163+60])
                                                                Pexp_ident "closure" (src/item.ml[332,11163+53]..[332,11163+60])
                                                          ]
                                                    ]
                                                    expression (src/item.ml[333,11227+6]..[334,11260+13])
                                                      Pexp_sequence
                                                      expression (src/item.ml[333,11227+6]..[333,11227+31])
                                                        Pexp_setfield
                                                        expression (src/item.ml[333,11227+6]..[333,11227+10])
                                                          Pexp_ident "node" (src/item.ml[333,11227+6]..[333,11227+10])
                                                        "lookahead" (src/item.ml[333,11227+11]..[333,11227+20])
                                                        expression (src/item.ml[333,11227+24]..[333,11227+31])
                                                          Pexp_ident "L.empty" (src/item.ml[333,11227+24]..[333,11227+31])
                                                      expression (src/item.ml[334,11260+6]..[334,11260+13])
                                                        Pexp_ident "closure" (src/item.ml[334,11260+6]..[334,11260+13])
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[335,11274+6]..[335,11274+15])
                                              Pexp_ident "Map.empty" (src/item.ml[335,11274+6]..[335,11274+15])
                                          <arg>
                                          Nolabel
                                            expression (src/item.ml[335,11274+16]..[335,11274+21])
                                              Pexp_ident "nodes" (src/item.ml[335,11274+16]..[335,11274+21])
                                        ]
                      core_type (src/item.ml[257,8769+32]..[257,8769+37])
                        Ptyp_constr "state" (src/item.ml[257,8769+32]..[257,8769+37])
                        []
              ]
          ]
]

open Grammar
type t = int
let low_bits = 10
let low_limit = 1 lsl low_bits
let export t = ((Production.i2p (t lsr low_bits)), (t mod low_limit))
let import (prod, pos) =
  assert (pos < low_limit); ((Production.p2i prod) lsl low_bits) + pos
let marshal (item : t) = (item : int)
let () =
  Production.iter
    (fun index ->
       let length = Production.length index in
       if low_limit <= length
       then
         Error.error (Production.positions index)
           "The length of this production is %d, which exceeds the limit of %d."
           length (low_limit - 1))
let equal (item1 : t) (item2 : t) = item1 = item2
let def t =
  let (prod, pos) = export t in
  let (nt, rhs) = Production.def prod in
  let length = Array.length rhs in
  assert ((pos >= 0) && (pos <= length)); (prod, nt, rhs, pos, length)
let startnt t =
  let (_, _, rhs, pos, length) = def t in
  assert ((pos = 0) && (length = 1));
  (match rhs.(0) with | Symbol.N nt -> nt | Symbol.T _ -> assert false)
let print item =
  let (_, nt, rhs, pos, _) = def item in
  Printf.sprintf "%s -> %s" (Nonterminal.print false nt)
    (Symbol.printaod 0 pos rhs)
type kind =
  | Shift of Symbol.t * t 
  | Reduce of Production.index 
let classify item =
  let (prod, _, rhs, pos, length) = def item in
  if pos = length
  then Reduce prod
  else Shift ((rhs.(pos)), (import (prod, (pos + 1))))
module Map = Patricia.Big
module Set = Map.Domain
module Closure(L:Lookahead.S) =
  struct
    type state = L.t Map.t
    type node =
      {
      item: t ;
      epsilon_constant: L.t ;
      epsilon_transmits: bool ;
      mutable epsilon_transitions: node list ;
      mutable mark: Mark.t ;
      mutable predecessors: node list ;
      mutable lookahead: L.t }
    let mapping : node array array = Array.make Production.n [||]
    let item2node item =
      let (prod, pos) = export item in (mapping.(Production.p2i prod)).(pos)
    let () =
      Production.iter
        (fun prod ->
           let (_nt, rhs) = Production.def prod in
           let length = Array.length rhs in
           mapping.(Production.p2i prod) <-
             (Array.init (length + 1)
                (fun pos ->
                   let item = import (prod, pos) in
                   let (constant, transmits) =
                     if pos < length
                     then
                       let (nullable, first) =
                         Analysis.nullable_first_prod prod (pos + 1) in
                       ((L.constant first), nullable)
                     else (L.empty, false) in
                   {
                     item;
                     epsilon_constant = constant;
                     epsilon_transmits = transmits;
                     epsilon_transitions = [];
                     mark = Mark.none;
                     predecessors = [];
                     lookahead = L.empty
                   })))
    let () =
      Production.iter
        (fun prod ->
           let (_nt, rhs) = Production.def prod in
           let length = Array.length rhs in
           Array.iteri
             (fun pos ->
                fun node ->
                  node.epsilon_transitions <-
                    (if pos < length
                     then
                       match rhs.(pos) with
                       | Symbol.N nt ->
                           Production.mapnt nt
                             (fun prod -> item2node (import (prod, 0)))
                       | Symbol.T _ -> []
                     else [])) (mapping.(Production.p2i prod)))
    let closure (items : state) =
      (let this = Mark.fresh () in
       let nodes = ref [] in
       let rec visit father transmits toks node =
         if Mark.same node.mark this
         then
           (node.lookahead <- (L.union toks node.lookahead);
            if transmits
            then node.predecessors <- (father :: (node.predecessors)))
         else
           (node.predecessors <- (if transmits then [father] else []);
            node.lookahead <- toks;
            follow node)
       and follow node =
         node.mark <- this;
         nodes := (node :: (!nodes));
         List.iter (visit node node.epsilon_transmits node.epsilon_constant)
           node.epsilon_transitions in
       Map.iter
         (fun item ->
            fun toks ->
              let node = item2node item in visit node false toks node) items;
       (let nodes = !nodes in
        let this = Mark.fresh () in
        let rec walk node =
          if not (Mark.same node.mark this)
          then
            (node.mark <- this;
             List.iter
               (fun predecessor ->
                  walk predecessor;
                  node.lookahead <-
                    (L.union predecessor.lookahead node.lookahead))
               node.predecessors) in
        List.iter walk nodes;
        List.fold_left
          (fun closure ->
             fun node ->
               node.predecessors <- [];
               (let closure = Map.add node.item node.lookahead closure in
                node.lookahead <- L.empty; closure)) Map.empty nodes) : 
      state)
  end
[
  structure_item (src/item.ml[14,994+0]..src/item.ml[14,994+12])
    Tstr_open Fresh
    module_expr (src/item.ml[14,994+5]..src/item.ml[14,994+12])
      Tmod_ident "Dune__exe!.Grammar"
  structure_item (src/item.ml[41,2208+0]..src/item.ml[41,2208+12])
    Tstr_type Rec
    [
      type_declaration t/414 (src/item.ml[41,2208+0]..src/item.ml[41,2208+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/item.ml[41,2208+9]..src/item.ml[41,2208+12])
              Ttyp_constr "int/1!"
              []
    ]
  structure_item (src/item.ml[43,2222+0]..src/item.ml[44,2237+4])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[43,2222+4]..src/item.ml[43,2222+12])
          Tpat_var "low_bits/415"
        expression (src/item.ml[44,2237+2]..src/item.ml[44,2237+4])
          Texp_constant Const_int 10
    ]
  structure_item (src/item.ml[46,2282+0]..src/item.ml[47,2298+16])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[46,2282+4]..src/item.ml[46,2282+13])
          Tpat_var "low_limit/416"
        expression (src/item.ml[47,2298+2]..src/item.ml[47,2298+16])
          Texp_apply
          expression (src/item.ml[47,2298+4]..src/item.ml[47,2298+7])
            Texp_ident "Stdlib!.lsl"
          [
            <arg>
              Nolabel
              expression (src/item.ml[47,2298+2]..src/item.ml[47,2298+3])
                Texp_constant Const_int 1
            <arg>
              Nolabel
              expression (src/item.ml[47,2298+8]..src/item.ml[47,2298+16])
                Texp_ident "low_bits/415"
          ]
    ]
  structure_item (src/item.ml[49,2316+0]..src/item.ml[50,2331+52])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[49,2316+4]..src/item.ml[49,2316+10])
          Tpat_var "export/417"
        expression (src/item.ml[49,2316+11]..src/item.ml[50,2331+52]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[49,2316+11]..src/item.ml[49,2316+12])
                Tpat_var "t/419"
              expression (src/item.ml[50,2331+2]..src/item.ml[50,2331+52])
                Texp_tuple
                [
                  expression (src/item.ml[50,2331+3]..src/item.ml[50,2331+34])
                    Texp_apply
                    expression (src/item.ml[50,2331+3]..src/item.ml[50,2331+17])
                      Texp_ident "Dune__exe!.Grammar.Production.i2p"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[50,2331+18]..src/item.ml[50,2331+34])
                          Texp_apply
                          expression (src/item.ml[50,2331+21]..src/item.ml[50,2331+24])
                            Texp_ident "Stdlib!.lsr"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[50,2331+19]..src/item.ml[50,2331+20])
                                Texp_ident "t/419"
                            <arg>
                              Nolabel
                              expression (src/item.ml[50,2331+25]..src/item.ml[50,2331+33])
                                Texp_ident "low_bits/415"
                          ]
                    ]
                  expression (src/item.ml[50,2331+36]..src/item.ml[50,2331+51])
                    Texp_apply
                    expression (src/item.ml[50,2331+38]..src/item.ml[50,2331+41])
                      Texp_ident "Stdlib!.mod"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[50,2331+36]..src/item.ml[50,2331+37])
                          Texp_ident "t/419"
                      <arg>
                        Nolabel
                        expression (src/item.ml[50,2331+42]..src/item.ml[50,2331+51])
                          Texp_ident "low_limit/416"
                    ]
                ]
          ]
    ]
  structure_item (src/item.ml[52,2385+0]..src/item.ml[54,2438+42])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[52,2385+4]..src/item.ml[52,2385+10])
          Tpat_var "import/505"
        expression (src/item.ml[52,2385+11]..src/item.ml[54,2438+42]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[52,2385+11]..src/item.ml[52,2385+22])
                Tpat_tuple
                [
                  pattern (src/item.ml[52,2385+12]..src/item.ml[52,2385+16])
                    Tpat_var "prod/507"
                  pattern (src/item.ml[52,2385+18]..src/item.ml[52,2385+21])
                    Tpat_var "pos/508"
                ]
              expression (src/item.ml[53,2410+2]..src/item.ml[54,2438+42])
                Texp_sequence
                expression (src/item.ml[53,2410+2]..src/item.ml[53,2410+26])
                  Texp_assert                  expression (src/item.ml[53,2410+9]..src/item.ml[53,2410+26])
                    Texp_apply
                    expression (src/item.ml[53,2410+14]..src/item.ml[53,2410+15])
                      Texp_ident "Stdlib!.<"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[53,2410+10]..src/item.ml[53,2410+13])
                          Texp_ident "pos/508"
                      <arg>
                        Nolabel
                        expression (src/item.ml[53,2410+16]..src/item.ml[53,2410+25])
                          Texp_ident "low_limit/416"
                    ]
                expression (src/item.ml[54,2438+2]..src/item.ml[54,2438+42])
                  Texp_apply
                  expression (src/item.ml[54,2438+37]..src/item.ml[54,2438+38])
                    Texp_ident "Stdlib!.+"
                  [
                    <arg>
                      Nolabel
                      expression (src/item.ml[54,2438+2]..src/item.ml[54,2438+36])
                        Texp_apply
                        expression (src/item.ml[54,2438+24]..src/item.ml[54,2438+27])
                          Texp_ident "Stdlib!.lsl"
                        [
                          <arg>
                            Nolabel
                            expression (src/item.ml[54,2438+2]..src/item.ml[54,2438+23])
                              Texp_apply
                              expression (src/item.ml[54,2438+3]..src/item.ml[54,2438+17])
                                Texp_ident "Dune__exe!.Grammar.Production.p2i"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/item.ml[54,2438+18]..src/item.ml[54,2438+22])
                                    Texp_ident "prod/507"
                              ]
                          <arg>
                            Nolabel
                            expression (src/item.ml[54,2438+28]..src/item.ml[54,2438+36])
                              Texp_ident "low_bits/415"
                        ]
                    <arg>
                      Nolabel
                      expression (src/item.ml[54,2438+39]..src/item.ml[54,2438+42])
                        Texp_ident "pos/508"
                  ]
          ]
    ]
  structure_item (src/item.ml[56,2482+0]..src/item.ml[57,2513+6])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[56,2482+4]..src/item.ml[56,2482+11])
          Tpat_var "marshal/510"
        expression (src/item.ml[56,2482+12]..src/item.ml[57,2513+6]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[56,2482+13]..src/item.ml[56,2482+17])
                extra
                  Tpat_extra_constraint
                  core_type (src/item.ml[56,2482+20]..src/item.ml[56,2482+21])
                    Ttyp_constr "t/414"
                    []
                Tpat_alias "item/512"
                pattern (src/item.ml[56,2482+13]..src/item.ml[56,2482+17])
                  Tpat_any
              expression (src/item.ml[57,2513+2]..src/item.ml[57,2513+6])
                extra
                  Texp_constraint
                  core_type (src/item.ml[56,2482+25]..src/item.ml[56,2482+28])
                    Ttyp_constr "int/1!"
                    []
                Texp_ident "item/512"
          ]
    ]
  structure_item (src/item.ml[62,2658+0]..src/item.ml[70,2939+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[62,2658+4]..src/item.ml[62,2658+6])
          Tpat_construct "()"
          []
          None
        expression (src/item.ml[63,2667+2]..src/item.ml[70,2939+3])
          Texp_apply
          expression (src/item.ml[63,2667+2]..src/item.ml[63,2667+17])
            Texp_ident "Dune__exe!.Grammar.Production.iter"
          [
            <arg>
              Nolabel
              expression (src/item.ml[63,2667+18]..src/item.ml[70,2939+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/item.ml[63,2667+23]..src/item.ml[63,2667+28])
                      Tpat_var "index/513"
                    expression (src/item.ml[64,2699+4]..src/item.ml[69,2908+30])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/item.ml[64,2699+8]..src/item.ml[64,2699+14])
                            Tpat_var "length/514"
                          expression (src/item.ml[64,2699+17]..src/item.ml[64,2699+40])
                            Texp_apply
                            expression (src/item.ml[64,2699+17]..src/item.ml[64,2699+34])
                              Texp_ident "Dune__exe!.Grammar.Production.length"
                            [
                              <arg>
                                Nolabel
                                expression (src/item.ml[64,2699+35]..src/item.ml[64,2699+40])
                                  Texp_ident "index/513"
                            ]
                      ]
                      expression (src/item.ml[65,2743+4]..src/item.ml[69,2908+30])
                        Texp_ifthenelse
                        expression (src/item.ml[65,2743+7]..src/item.ml[65,2743+26])
                          Texp_apply
                          expression (src/item.ml[65,2743+17]..src/item.ml[65,2743+19])
                            Texp_ident "Stdlib!.<="
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[65,2743+7]..src/item.ml[65,2743+16])
                                Texp_ident "low_limit/416"
                            <arg>
                              Nolabel
                              expression (src/item.ml[65,2743+20]..src/item.ml[65,2743+26])
                                Texp_ident "length/514"
                          ]
                        expression (src/item.ml[66,2775+6]..src/item.ml[69,2908+30])
                          Texp_apply
                          expression (src/item.ml[66,2775+6]..src/item.ml[66,2775+17])
                            Texp_ident "Dune__exe!.Error.error"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[67,2793+8]..src/item.ml[67,2793+36])
                                Texp_apply
                                expression (src/item.ml[67,2793+9]..src/item.ml[67,2793+29])
                                  Texp_ident "Dune__exe!.Grammar.Production.positions"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[67,2793+30]..src/item.ml[67,2793+35])
                                      Texp_ident "index/513"
                                ]
                            <arg>
                              Nolabel
                              expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77])
                                Texp_construct "CamlinternalFormatBasics.Format"
                                [
                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                    [
                                      expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                        Texp_constant Const_string("The length of this production is ",(src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost,None)
                                      expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                        Texp_construct "CamlinternalFormatBasics.Int"
                                        [
                                          expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                            Texp_construct "CamlinternalFormatBasics.Int_d"
                                            []
                                          expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                            []
                                          expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_precision"
                                            []
                                          expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                Texp_constant Const_string(", which exceeds the limit of ",(src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost,None)
                                              expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                Texp_construct "CamlinternalFormatBasics.Int"
                                                [
                                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int_d"
                                                    []
                                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                    []
                                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_precision"
                                                    []
                                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                    [
                                                      expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                        Texp_constant Const_char 2e
                                                      expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                        []
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                  expression (src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost
                                    Texp_constant Const_string("The length of this production is %d, which exceeds the limit of %d.",(src/item.ml[68,2830+8]..src/item.ml[68,2830+77]) ghost,None)
                                ]
                            <arg>
                              Nolabel
                              expression (src/item.ml[69,2908+8]..src/item.ml[69,2908+14])
                                Texp_ident "length/514"
                            <arg>
                              Nolabel
                              expression (src/item.ml[69,2908+15]..src/item.ml[69,2908+30])
                                Texp_apply
                                expression (src/item.ml[69,2908+26]..src/item.ml[69,2908+27])
                                  Texp_ident "Stdlib!.-"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[69,2908+16]..src/item.ml[69,2908+25])
                                      Texp_ident "low_limit/416"
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[69,2908+28]..src/item.ml[69,2908+29])
                                      Texp_constant Const_int 1
                                ]
                          ]
                        None
                ]
          ]
    ]
  structure_item (src/item.ml[74,2963+0]..src/item.ml[75,2998+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[74,2963+4]..src/item.ml[74,2963+9])
          Tpat_var "equal/588"
        expression (src/item.ml[74,2963+10]..src/item.ml[75,2998+15]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[74,2963+11]..src/item.ml[74,2963+16])
                extra
                  Tpat_extra_constraint
                  core_type (src/item.ml[74,2963+19]..src/item.ml[74,2963+20])
                    Ttyp_constr "t/414"
                    []
                Tpat_alias "item1/590"
                pattern (src/item.ml[74,2963+11]..src/item.ml[74,2963+16])
                  Tpat_any
              expression (src/item.ml[74,2963+22]..src/item.ml[75,2998+15]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/item.ml[74,2963+23]..src/item.ml[74,2963+28])
                      extra
                        Tpat_extra_constraint
                        core_type (src/item.ml[74,2963+30]..src/item.ml[74,2963+31])
                          Ttyp_constr "t/414"
                          []
                      Tpat_alias "item2/591"
                      pattern (src/item.ml[74,2963+23]..src/item.ml[74,2963+28])
                        Tpat_any
                    expression (src/item.ml[75,2998+2]..src/item.ml[75,2998+15])
                      Texp_apply
                      expression (src/item.ml[75,2998+8]..src/item.ml[75,2998+9])
                        Texp_ident "Stdlib!.="
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[75,2998+2]..src/item.ml[75,2998+7])
                            Texp_ident "item1/590"
                        <arg>
                          Nolabel
                          expression (src/item.ml[75,2998+10]..src/item.ml[75,2998+15])
                            Texp_ident "item2/591"
                      ]
                ]
          ]
    ]
  structure_item (src/item.ml[83,3346+0]..src/item.ml[88,3504+28])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[83,3346+4]..src/item.ml[83,3346+7])
          Tpat_var "def/592"
        expression (src/item.ml[83,3346+8]..src/item.ml[88,3504+28]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[83,3346+8]..src/item.ml[83,3346+9])
                Tpat_var "t/594"
              expression (src/item.ml[84,3358+2]..src/item.ml[88,3504+28])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/item.ml[84,3358+6]..src/item.ml[84,3358+15])
                      Tpat_tuple
                      [
                        pattern (src/item.ml[84,3358+6]..src/item.ml[84,3358+10])
                          Tpat_var "prod/595"
                        pattern (src/item.ml[84,3358+12]..src/item.ml[84,3358+15])
                          Tpat_var "pos/596"
                      ]
                    expression (src/item.ml[84,3358+18]..src/item.ml[84,3358+26])
                      Texp_apply
                      expression (src/item.ml[84,3358+18]..src/item.ml[84,3358+24])
                        Texp_ident "export/417"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[84,3358+25]..src/item.ml[84,3358+26])
                            Texp_ident "t/594"
                      ]
                ]
                expression (src/item.ml[85,3388+2]..src/item.ml[88,3504+28])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/item.ml[85,3388+6]..src/item.ml[85,3388+13])
                        Tpat_tuple
                        [
                          pattern (src/item.ml[85,3388+6]..src/item.ml[85,3388+8])
                            Tpat_var "nt/597"
                          pattern (src/item.ml[85,3388+10]..src/item.ml[85,3388+13])
                            Tpat_var "rhs/598"
                        ]
                      expression (src/item.ml[85,3388+16]..src/item.ml[85,3388+35])
                        Texp_apply
                        expression (src/item.ml[85,3388+16]..src/item.ml[85,3388+30])
                          Texp_ident "Dune__exe!.Grammar.Production.def"
                        [
                          <arg>
                            Nolabel
                            expression (src/item.ml[85,3388+31]..src/item.ml[85,3388+35])
                              Texp_ident "prod/595"
                        ]
                  ]
                  expression (src/item.ml[86,3427+2]..src/item.ml[88,3504+28])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/item.ml[86,3427+6]..src/item.ml[86,3427+12])
                          Tpat_var "length/599"
                        expression (src/item.ml[86,3427+15]..src/item.ml[86,3427+31])
                          Texp_apply
                          expression (src/item.ml[86,3427+15]..src/item.ml[86,3427+27])
                            Texp_ident "Stdlib!.Array.length"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[86,3427+28]..src/item.ml[86,3427+31])
                                Texp_ident "rhs/598"
                          ]
                    ]
                    expression (src/item.ml[87,3462+2]..src/item.ml[88,3504+28])
                      Texp_sequence
                      expression (src/item.ml[87,3462+2]..src/item.ml[87,3462+40])
                        Texp_assert                        expression (src/item.ml[87,3462+9]..src/item.ml[87,3462+40])
                          Texp_apply
                          expression (src/item.ml[87,3462+21]..src/item.ml[87,3462+23])
                            Texp_ident "Stdlib!.&&"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[87,3462+10]..src/item.ml[87,3462+20])
                                Texp_apply
                                expression (src/item.ml[87,3462+15]..src/item.ml[87,3462+17])
                                  Texp_ident "Stdlib!.>="
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[87,3462+11]..src/item.ml[87,3462+14])
                                      Texp_ident "pos/596"
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[87,3462+18]..src/item.ml[87,3462+19])
                                      Texp_constant Const_int 0
                                ]
                            <arg>
                              Nolabel
                              expression (src/item.ml[87,3462+24]..src/item.ml[87,3462+39])
                                Texp_apply
                                expression (src/item.ml[87,3462+29]..src/item.ml[87,3462+31])
                                  Texp_ident "Stdlib!.<="
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[87,3462+25]..src/item.ml[87,3462+28])
                                      Texp_ident "pos/596"
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[87,3462+32]..src/item.ml[87,3462+38])
                                      Texp_ident "length/599"
                                ]
                          ]
                      expression (src/item.ml[88,3504+2]..src/item.ml[88,3504+28])
                        Texp_tuple
                        [
                          expression (src/item.ml[88,3504+2]..src/item.ml[88,3504+6])
                            Texp_ident "prod/595"
                          expression (src/item.ml[88,3504+8]..src/item.ml[88,3504+10])
                            Texp_ident "nt/597"
                          expression (src/item.ml[88,3504+12]..src/item.ml[88,3504+15])
                            Texp_ident "rhs/598"
                          expression (src/item.ml[88,3504+17]..src/item.ml[88,3504+20])
                            Texp_ident "pos/596"
                          expression (src/item.ml[88,3504+22]..src/item.ml[88,3504+28])
                            Texp_ident "length/599"
                        ]
          ]
    ]
  structure_item (src/item.ml[90,3534+0]..src/item.ml[97,3691+18])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[90,3534+4]..src/item.ml[90,3534+11])
          Tpat_var "startnt/648"
        expression (src/item.ml[90,3534+12]..src/item.ml[97,3691+18]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[90,3534+12]..src/item.ml[90,3534+13])
                Tpat_var "t/650"
              expression (src/item.ml[91,3550+2]..src/item.ml[97,3691+18])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/item.ml[91,3550+6]..src/item.ml[91,3550+28])
                      Tpat_tuple
                      [
                        pattern (src/item.ml[91,3550+6]..src/item.ml[91,3550+7])
                          Tpat_any
                        pattern (src/item.ml[91,3550+9]..src/item.ml[91,3550+10])
                          Tpat_any
                        pattern (src/item.ml[91,3550+12]..src/item.ml[91,3550+15])
                          Tpat_var "rhs/651"
                        pattern (src/item.ml[91,3550+17]..src/item.ml[91,3550+20])
                          Tpat_var "pos/652"
                        pattern (src/item.ml[91,3550+22]..src/item.ml[91,3550+28])
                          Tpat_var "length/653"
                      ]
                    expression (src/item.ml[91,3550+31]..src/item.ml[91,3550+36])
                      Texp_apply
                      expression (src/item.ml[91,3550+31]..src/item.ml[91,3550+34])
                        Texp_ident "def/592"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[91,3550+35]..src/item.ml[91,3550+36])
                            Texp_ident "t/650"
                      ]
                ]
                expression (src/item.ml[92,3590+2]..src/item.ml[97,3691+18])
                  Texp_sequence
                  expression (src/item.ml[92,3590+2]..src/item.ml[92,3590+32])
                    Texp_assert                    expression (src/item.ml[92,3590+9]..src/item.ml[92,3590+32])
                      Texp_apply
                      expression (src/item.ml[92,3590+18]..src/item.ml[92,3590+20])
                        Texp_ident "Stdlib!.&&"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[92,3590+10]..src/item.ml[92,3590+17])
                            Texp_apply
                            expression (src/item.ml[92,3590+14]..src/item.ml[92,3590+15])
                              Texp_ident "Stdlib!.="
                            [
                              <arg>
                                Nolabel
                                expression (src/item.ml[92,3590+10]..src/item.ml[92,3590+13])
                                  Texp_ident "pos/652"
                              <arg>
                                Nolabel
                                expression (src/item.ml[92,3590+16]..src/item.ml[92,3590+17])
                                  Texp_constant Const_int 0
                            ]
                        <arg>
                          Nolabel
                          expression (src/item.ml[92,3590+21]..src/item.ml[92,3590+31])
                            Texp_apply
                            expression (src/item.ml[92,3590+28]..src/item.ml[92,3590+29])
                              Texp_ident "Stdlib!.="
                            [
                              <arg>
                                Nolabel
                                expression (src/item.ml[92,3590+21]..src/item.ml[92,3590+27])
                                  Texp_ident "length/653"
                              <arg>
                                Nolabel
                                expression (src/item.ml[92,3590+30]..src/item.ml[92,3590+31])
                                  Texp_constant Const_int 1
                            ]
                      ]
                  expression (src/item.ml[93,3624+2]..src/item.ml[97,3691+18])
                    Texp_match
                    expression (src/item.ml[93,3624+8]..src/item.ml[93,3624+15])
                      Texp_apply
                      expression (src/item.ml[93,3624+8]..src/item.ml[93,3624+15]) ghost
                        Texp_ident "Stdlib!.Array.get"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[93,3624+8]..src/item.ml[93,3624+11])
                            Texp_ident "rhs/651"
                        <arg>
                          Nolabel
                          expression (src/item.ml[93,3624+13]..src/item.ml[93,3624+14])
                            Texp_constant Const_int 0
                      ]
                    [
                      <case>
                        pattern (src/item.ml[94,3645+4]..src/item.ml[94,3645+15])
                          Tpat_value
                          pattern (src/item.ml[94,3645+4]..src/item.ml[94,3645+15])
                            Tpat_construct "Symbol.N"
                            [
                              pattern (src/item.ml[94,3645+13]..src/item.ml[94,3645+15])
                                Tpat_var "nt/676"
                            ]
                            None
                        expression (src/item.ml[95,3664+6]..src/item.ml[95,3664+8])
                          Texp_ident "nt/676"
                      <case>
                        pattern (src/item.ml[96,3673+4]..src/item.ml[96,3673+14])
                          Tpat_value
                          pattern (src/item.ml[96,3673+4]..src/item.ml[96,3673+14])
                            Tpat_construct "Symbol.T"
                            [
                              pattern (src/item.ml[96,3673+13]..src/item.ml[96,3673+14])
                                Tpat_any
                            ]
                            None
                        expression (src/item.ml[97,3691+6]..src/item.ml[97,3691+18])
                          Texp_assert                          expression (src/item.ml[97,3691+13]..src/item.ml[97,3691+18])
                            Texp_construct "false"
                            []
                    ]
          ]
    ]
  structure_item (src/item.ml[101,3728+0]..src/item.ml[103,3784+84])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[101,3728+4]..src/item.ml[101,3728+9])
          Tpat_var "print/707"
        expression (src/item.ml[101,3728+10]..src/item.ml[103,3784+84]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[101,3728+10]..src/item.ml[101,3728+14])
                Tpat_var "item/709"
              expression (src/item.ml[102,3745+2]..src/item.ml[103,3784+84])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/item.ml[102,3745+6]..src/item.ml[102,3745+24])
                      Tpat_tuple
                      [
                        pattern (src/item.ml[102,3745+6]..src/item.ml[102,3745+7])
                          Tpat_any
                        pattern (src/item.ml[102,3745+9]..src/item.ml[102,3745+11])
                          Tpat_var "nt/710"
                        pattern (src/item.ml[102,3745+13]..src/item.ml[102,3745+16])
                          Tpat_var "rhs/711"
                        pattern (src/item.ml[102,3745+18]..src/item.ml[102,3745+21])
                          Tpat_var "pos/712"
                        pattern (src/item.ml[102,3745+23]..src/item.ml[102,3745+24])
                          Tpat_any
                      ]
                    expression (src/item.ml[102,3745+27]..src/item.ml[102,3745+35])
                      Texp_apply
                      expression (src/item.ml[102,3745+27]..src/item.ml[102,3745+30])
                        Texp_ident "def/592"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[102,3745+31]..src/item.ml[102,3745+35])
                            Texp_ident "item/709"
                      ]
                ]
                expression (src/item.ml[103,3784+2]..src/item.ml[103,3784+84])
                  Texp_apply
                  expression (src/item.ml[103,3784+2]..src/item.ml[103,3784+16])
                    Texp_ident "Stdlib!.Printf.sprintf"
                  [
                    <arg>
                      Nolabel
                      expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27])
                        Texp_construct "CamlinternalFormatBasics.Format"
                        [
                          expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                            Texp_construct "CamlinternalFormatBasics.String"
                            [
                              expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                []
                              expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                [
                                  expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                    Texp_constant Const_string(" -> ",(src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost,None)
                                  expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String"
                                    [
                                      expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                        []
                                      expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                        []
                                    ]
                                ]
                            ]
                          expression (src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost
                            Texp_constant Const_string("%s -> %s",(src/item.ml[103,3784+17]..src/item.ml[103,3784+27]) ghost,None)
                        ]
                    <arg>
                      Nolabel
                      expression (src/item.ml[103,3784+28]..src/item.ml[103,3784+56])
                        Texp_apply
                        expression (src/item.ml[103,3784+29]..src/item.ml[103,3784+46])
                          Texp_ident "Dune__exe!.Grammar.Nonterminal.print"
                        [
                          <arg>
                            Nolabel
                            expression (src/item.ml[103,3784+47]..src/item.ml[103,3784+52])
                              Texp_construct "false"
                              []
                          <arg>
                            Nolabel
                            expression (src/item.ml[103,3784+53]..src/item.ml[103,3784+55])
                              Texp_ident "nt/710"
                        ]
                    <arg>
                      Nolabel
                      expression (src/item.ml[103,3784+57]..src/item.ml[103,3784+84])
                        Texp_apply
                        expression (src/item.ml[103,3784+58]..src/item.ml[103,3784+73])
                          Texp_ident "Dune__exe!.Grammar.Symbol.printaod"
                        [
                          <arg>
                            Nolabel
                            expression (src/item.ml[103,3784+74]..src/item.ml[103,3784+75])
                              Texp_constant Const_int 0
                          <arg>
                            Nolabel
                            expression (src/item.ml[103,3784+76]..src/item.ml[103,3784+79])
                              Texp_ident "pos/712"
                          <arg>
                            Nolabel
                            expression (src/item.ml[103,3784+80]..src/item.ml[103,3784+83])
                              Texp_ident "rhs/711"
                        ]
                  ]
          ]
    ]
  structure_item (src/item.ml[107,3896+0]..src/item.ml[109,3934+30])
    Tstr_type Rec
    [
      type_declaration kind/766 (src/item.ml[107,3896+0]..src/item.ml[109,3934+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/item.ml[108,3908+2]..src/item.ml[108,3908+25])
                Shift/767
                [
                  core_type (src/item.ml[108,3908+13]..src/item.ml[108,3908+21])
                    Ttyp_constr "Dune__exe!.Grammar.Symbol.t"
                    []
                  core_type (src/item.ml[108,3908+24]..src/item.ml[108,3908+25])
                    Ttyp_constr "t/414"
                    []
                ]
                None
              (src/item.ml[109,3934+2]..src/item.ml[109,3934+30])
                Reduce/768
                [
                  core_type (src/item.ml[109,3934+14]..src/item.ml[109,3934+30])
                    Ttyp_constr "Dune__exe!.Grammar.Production.index"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/item.ml[111,3966+0]..src/item.ml[116,4078+45])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/item.ml[111,3966+4]..src/item.ml[111,3966+12])
          Tpat_var "classify/769"
        expression (src/item.ml[111,3966+13]..src/item.ml[116,4078+45]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/item.ml[111,3966+13]..src/item.ml[111,3966+17])
                Tpat_var "item/771"
              expression (src/item.ml[112,3986+2]..src/item.ml[116,4078+45])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/item.ml[112,3986+6]..src/item.ml[112,3986+31])
                      Tpat_tuple
                      [
                        pattern (src/item.ml[112,3986+6]..src/item.ml[112,3986+10])
                          Tpat_var "prod/772"
                        pattern (src/item.ml[112,3986+12]..src/item.ml[112,3986+13])
                          Tpat_any
                        pattern (src/item.ml[112,3986+15]..src/item.ml[112,3986+18])
                          Tpat_var "rhs/773"
                        pattern (src/item.ml[112,3986+20]..src/item.ml[112,3986+23])
                          Tpat_var "pos/774"
                        pattern (src/item.ml[112,3986+25]..src/item.ml[112,3986+31])
                          Tpat_var "length/775"
                      ]
                    expression (src/item.ml[112,3986+34]..src/item.ml[112,3986+42])
                      Texp_apply
                      expression (src/item.ml[112,3986+34]..src/item.ml[112,3986+37])
                        Texp_ident "def/592"
                      [
                        <arg>
                          Nolabel
                          expression (src/item.ml[112,3986+38]..src/item.ml[112,3986+42])
                            Texp_ident "item/771"
                      ]
                ]
                expression (src/item.ml[113,4032+2]..src/item.ml[116,4078+45])
                  Texp_ifthenelse
                  expression (src/item.ml[113,4032+5]..src/item.ml[113,4032+17])
                    Texp_apply
                    expression (src/item.ml[113,4032+9]..src/item.ml[113,4032+10])
                      Texp_ident "Stdlib!.="
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[113,4032+5]..src/item.ml[113,4032+8])
                          Texp_ident "pos/774"
                      <arg>
                        Nolabel
                        expression (src/item.ml[113,4032+11]..src/item.ml[113,4032+17])
                          Texp_ident "length/775"
                    ]
                  expression (src/item.ml[114,4055+4]..src/item.ml[114,4055+15])
                    Texp_construct "Reduce"
                    [
                      expression (src/item.ml[114,4055+11]..src/item.ml[114,4055+15])
                        Texp_ident "prod/772"
                    ]
                  Some
                    expression (src/item.ml[116,4078+4]..src/item.ml[116,4078+45])
                      Texp_construct "Shift"
                      [
                        expression (src/item.ml[116,4078+11]..src/item.ml[116,4078+20])
                          Texp_apply
                          expression (src/item.ml[116,4078+11]..src/item.ml[116,4078+20]) ghost
                            Texp_ident "Stdlib!.Array.get"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[116,4078+11]..src/item.ml[116,4078+14])
                                Texp_ident "rhs/773"
                            <arg>
                              Nolabel
                              expression (src/item.ml[116,4078+16]..src/item.ml[116,4078+19])
                                Texp_ident "pos/774"
                          ]
                        expression (src/item.ml[116,4078+22]..src/item.ml[116,4078+44])
                          Texp_apply
                          expression (src/item.ml[116,4078+22]..src/item.ml[116,4078+28])
                            Texp_ident "import/505"
                          [
                            <arg>
                              Nolabel
                              expression (src/item.ml[116,4078+29]..src/item.ml[116,4078+44])
                                Texp_tuple
                                [
                                  expression (src/item.ml[116,4078+30]..src/item.ml[116,4078+34])
                                    Texp_ident "prod/772"
                                  expression (src/item.ml[116,4078+36]..src/item.ml[116,4078+43])
                                    Texp_apply
                                    expression (src/item.ml[116,4078+40]..src/item.ml[116,4078+41])
                                      Texp_ident "Stdlib!.+"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[116,4078+36]..src/item.ml[116,4078+39])
                                          Texp_ident "pos/774"
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[116,4078+42]..src/item.ml[116,4078+43])
                                          Texp_constant Const_int 1
                                    ]
                                ]
                          ]
                      ]
          ]
    ]
  structure_item (src/item.ml[122,4291+0]..src/item.ml[122,4291+25])
    Tstr_module
    Map/778
      module_expr (src/item.ml[122,4291+13]..src/item.ml[122,4291+25])
        Tmod_ident "Dune__exe!.Patricia.Big"
  structure_item (src/item.ml[123,4317+0]..src/item.ml[123,4317+23])
    Tstr_module
    Set/814
      module_expr (src/item.ml[123,4317+13]..src/item.ml[123,4317+23])
        Tmod_ident "Map/778.Domain"
  structure_item (src/item.ml[136,4920+0]..src/item.ml[339,11333+3])
    Tstr_module
    Closure/1042
      module_expr (src/item.ml[136,4920+15]..src/item.ml[339,11333+3])
        Tmod_functor "L/821"
        module_type (src/item.ml[136,4920+20]..src/item.ml[136,4920+31])
          Tmty_ident "Dune__exe!.Lookahead.S"
        module_expr (src/item.ml[136,4920+35]..src/item.ml[339,11333+3])
          Tmod_structure
          [
            structure_item (src/item.ml[138,4963+2]..src/item.ml[138,4963+24])
              Tstr_type Rec
              [
                type_declaration state/822 (src/item.ml[138,4963+2]..src/item.ml[138,4963+24])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/item.ml[138,4963+15]..src/item.ml[138,4963+24])
                        Ttyp_constr "Map/778.t"
                        [
                          core_type (src/item.ml[138,4963+15]..src/item.ml[138,4963+18])
                            Ttyp_constr "L/821.t"
                            []
                        ]
              ]
            structure_item (src/item.ml[140,4989+2]..src/item.ml[174,6246+5])
              Tstr_type Rec
              [
                type_declaration node/856 (src/item.ml[140,4989+2]..src/item.ml[174,6246+5])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_record
                      [
                        (src/item.ml[144,5057+6]..src/item.ml[144,5057+14])
                          Immutable
                          item/857                          core_type (src/item.ml[144,5057+12]..src/item.ml[144,5057+13])
                            Ttyp_poly
                            core_type (src/item.ml[144,5057+12]..src/item.ml[144,5057+13])
                              Ttyp_constr "t/414"
                              []
                        (src/item.ml[155,5535+6]..src/item.ml[155,5535+28])
                          Immutable
                          epsilon_constant/858                          core_type (src/item.ml[155,5535+24]..src/item.ml[155,5535+27])
                            Ttyp_poly
                            core_type (src/item.ml[155,5535+24]..src/item.ml[155,5535+27])
                              Ttyp_constr "L/821.t"
                              []
                        (src/item.ml[156,5564+6]..src/item.ml[156,5564+30])
                          Immutable
                          epsilon_transmits/859                          core_type (src/item.ml[156,5564+25]..src/item.ml[156,5564+29])
                            Ttyp_poly
                            core_type (src/item.ml[156,5564+25]..src/item.ml[156,5564+29])
                              Ttyp_constr "bool/5!"
                              []
                        (src/item.ml[162,5759+6]..src/item.ml[162,5759+45])
                          Mutable
                          epsilon_transitions/860                          core_type (src/item.ml[162,5759+35]..src/item.ml[162,5759+44])
                            Ttyp_poly
                            core_type (src/item.ml[162,5759+35]..src/item.ml[162,5759+44])
                              Ttyp_constr "list/9!"
                              [
                                core_type (src/item.ml[162,5759+35]..src/item.ml[162,5759+39])
                                  Ttyp_constr "node/856"
                                  []
                              ]
                        (src/item.ml[171,6149+6]..src/item.ml[171,6149+27])
                          Mutable
                          mark/865                          core_type (src/item.ml[171,6149+20]..src/item.ml[171,6149+26])
                            Ttyp_poly
                            core_type (src/item.ml[171,6149+20]..src/item.ml[171,6149+26])
                              Ttyp_constr "Dune__exe!.Mark.t"
                              []
                        (src/item.ml[172,6177+6]..src/item.ml[172,6177+38])
                          Mutable
                          predecessors/866                          core_type (src/item.ml[172,6177+28]..src/item.ml[172,6177+37])
                            Ttyp_poly
                            core_type (src/item.ml[172,6177+28]..src/item.ml[172,6177+37])
                              Ttyp_constr "list/9!"
                              [
                                core_type (src/item.ml[172,6177+28]..src/item.ml[172,6177+32])
                                  Ttyp_constr "node/856"
                                  []
                              ]
                        (src/item.ml[173,6216+6]..src/item.ml[173,6216+29])
                          Mutable
                          lookahead/867                          core_type (src/item.ml[173,6216+25]..src/item.ml[173,6216+28])
                            Ttyp_poly
                            core_type (src/item.ml[173,6216+25]..src/item.ml[173,6216+28])
                              Ttyp_constr "L/821.t"
                              []
                      ]
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
            structure_item (src/item.ml[179,6339+2]..src/item.ml[180,6374+32])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[179,6339+6]..src/item.ml[179,6339+13])
                    extra
                      Tpat_extra_constraint
                      core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+32])
                        Ttyp_constr "array/8!"
                        [
                          core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+26])
                            Ttyp_constr "array/8!"
                            [
                              core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+20])
                                Ttyp_constr "node/856"
                                []
                            ]
                        ]
                    Tpat_alias "mapping/872"
                    pattern (src/item.ml[179,6339+6]..src/item.ml[179,6339+13])
                      Tpat_any
                  expression (src/item.ml[180,6374+4]..src/item.ml[180,6374+32])
                    extra
                      Texp_constraint
                      core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+32])
                        Ttyp_constr "array/8!"
                        [
                          core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+26])
                            Ttyp_constr "array/8!"
                            [
                              core_type (src/item.ml[179,6339+16]..src/item.ml[179,6339+20])
                                Ttyp_constr "node/856"
                                []
                            ]
                        ]
                    Texp_apply
                    expression (src/item.ml[180,6374+4]..src/item.ml[180,6374+14])
                      Texp_ident "Stdlib!.Array.make"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[180,6374+15]..src/item.ml[180,6374+27])
                          Texp_ident "Dune__exe!.Grammar.Production.n"
                      <arg>
                        Nolabel
                        expression (src/item.ml[180,6374+28]..src/item.ml[180,6374+32])
                          Texp_array
                          []
                    ]
              ]
            structure_item (src/item.ml[182,6408+2]..src/item.ml[184,6466+39])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[182,6408+6]..src/item.ml[182,6408+15])
                    Tpat_var "item2node/873"
                  expression (src/item.ml[182,6408+16]..src/item.ml[184,6466+39]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/item.ml[182,6408+16]..src/item.ml[182,6408+20])
                          Tpat_var "item/875"
                        expression (src/item.ml[183,6431+4]..src/item.ml[184,6466+39])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/item.ml[183,6431+8]..src/item.ml[183,6431+17])
                                Tpat_tuple
                                [
                                  pattern (src/item.ml[183,6431+8]..src/item.ml[183,6431+12])
                                    Tpat_var "prod/876"
                                  pattern (src/item.ml[183,6431+14]..src/item.ml[183,6431+17])
                                    Tpat_var "pos/877"
                                ]
                              expression (src/item.ml[183,6431+20]..src/item.ml[183,6431+31])
                                Texp_apply
                                expression (src/item.ml[183,6431+20]..src/item.ml[183,6431+26])
                                  Texp_ident "export/417"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[183,6431+27]..src/item.ml[183,6431+31])
                                      Texp_ident "item/875"
                                ]
                          ]
                          expression (src/item.ml[184,6466+4]..src/item.ml[184,6466+39])
                            Texp_apply
                            expression (src/item.ml[184,6466+4]..src/item.ml[184,6466+39]) ghost
                              Texp_ident "Stdlib!.Array.get"
                            [
                              <arg>
                                Nolabel
                                expression (src/item.ml[184,6466+4]..src/item.ml[184,6466+33])
                                  Texp_apply
                                  expression (src/item.ml[184,6466+4]..src/item.ml[184,6466+33]) ghost
                                    Texp_ident "Stdlib!.Array.get"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/item.ml[184,6466+4]..src/item.ml[184,6466+11])
                                        Texp_ident "mapping/872"
                                    <arg>
                                      Nolabel
                                      expression (src/item.ml[184,6466+13]..src/item.ml[184,6466+32])
                                        Texp_apply
                                        expression (src/item.ml[184,6466+13]..src/item.ml[184,6466+27])
                                          Texp_ident "Dune__exe!.Grammar.Production.p2i"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/item.ml[184,6466+28]..src/item.ml[184,6466+32])
                                              Texp_ident "prod/876"
                                        ]
                                  ]
                              <arg>
                                Nolabel
                                expression (src/item.ml[184,6466+35]..src/item.ml[184,6466+38])
                                  Texp_ident "pos/877"
                            ]
                    ]
              ]
            structure_item (src/item.ml[186,6507+2]..src/item.ml[219,7558+5])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[186,6507+6]..src/item.ml[186,6507+8])
                    Tpat_construct "()"
                    []
                    None
                  expression (src/item.ml[187,6518+4]..src/item.ml[219,7558+5])
                    Texp_apply
                    expression (src/item.ml[187,6518+4]..src/item.ml[187,6518+19])
                      Texp_ident "Dune__exe!.Grammar.Production.iter"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[187,6518+20]..src/item.ml[219,7558+5])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/item.ml[187,6518+25]..src/item.ml[187,6518+29])
                                Tpat_var "prod/878"
                              expression (src/item.ml[188,6551+6]..src/item.ml[218,7550+7])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/item.ml[188,6551+10]..src/item.ml[188,6551+18])
                                      Tpat_tuple
                                      [
                                        pattern (src/item.ml[188,6551+10]..src/item.ml[188,6551+13])
                                          Tpat_var "_nt/879"
                                        pattern (src/item.ml[188,6551+15]..src/item.ml[188,6551+18])
                                          Tpat_var "rhs/880"
                                      ]
                                    expression (src/item.ml[188,6551+21]..src/item.ml[188,6551+40])
                                      Texp_apply
                                      expression (src/item.ml[188,6551+21]..src/item.ml[188,6551+35])
                                        Texp_ident "Dune__exe!.Grammar.Production.def"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/item.ml[188,6551+36]..src/item.ml[188,6551+40])
                                            Texp_ident "prod/878"
                                      ]
                                ]
                                expression (src/item.ml[189,6595+6]..src/item.ml[218,7550+7])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/item.ml[189,6595+10]..src/item.ml[189,6595+16])
                                        Tpat_var "length/881"
                                      expression (src/item.ml[189,6595+19]..src/item.ml[189,6595+35])
                                        Texp_apply
                                        expression (src/item.ml[189,6595+19]..src/item.ml[189,6595+31])
                                          Texp_ident "Stdlib!.Array.length"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/item.ml[189,6595+32]..src/item.ml[189,6595+35])
                                              Texp_ident "rhs/880"
                                        ]
                                  ]
                                  expression (src/item.ml[190,6634+6]..src/item.ml[218,7550+7])
                                    Texp_apply
                                    expression (src/item.ml[190,6634+6]..src/item.ml[218,7550+7]) ghost
                                      Texp_ident "Stdlib!.Array.set"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[190,6634+6]..src/item.ml[190,6634+13])
                                          Texp_ident "mapping/872"
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[190,6634+15]..src/item.ml[190,6634+34])
                                          Texp_apply
                                          expression (src/item.ml[190,6634+15]..src/item.ml[190,6634+29])
                                            Texp_ident "Dune__exe!.Grammar.Production.p2i"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[190,6634+30]..src/item.ml[190,6634+34])
                                                Texp_ident "prod/878"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[190,6634+39]..src/item.ml[218,7550+7])
                                          Texp_apply
                                          expression (src/item.ml[190,6634+39]..src/item.ml[190,6634+49])
                                            Texp_ident "Stdlib!.Array.init"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[190,6634+50]..src/item.ml[190,6634+60])
                                                Texp_apply
                                                expression (src/item.ml[190,6634+57]..src/item.ml[190,6634+58])
                                                  Texp_ident "Stdlib!.+"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/item.ml[190,6634+51]..src/item.ml[190,6634+57])
                                                      Texp_ident "length/881"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/item.ml[190,6634+58]..src/item.ml[190,6634+59])
                                                      Texp_constant Const_int 1
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[190,6634+61]..src/item.ml[218,7550+7])
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/item.ml[190,6634+66]..src/item.ml[190,6634+69])
                                                      Tpat_var "pos/882"
                                                    expression (src/item.ml[192,6708+8]..src/item.ml[216,7539+9])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/item.ml[192,6708+12]..src/item.ml[192,6708+16])
                                                            Tpat_var "item/883"
                                                          expression (src/item.ml[192,6708+19]..src/item.ml[192,6708+37])
                                                            Texp_apply
                                                            expression (src/item.ml[192,6708+19]..src/item.ml[192,6708+25])
                                                              Texp_ident "import/505"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/item.ml[192,6708+26]..src/item.ml[192,6708+37])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/item.ml[192,6708+27]..src/item.ml[192,6708+31])
                                                                      Texp_ident "prod/878"
                                                                    expression (src/item.ml[192,6708+33]..src/item.ml[192,6708+36])
                                                                      Texp_ident "pos/882"
                                                                  ]
                                                            ]
                                                      ]
                                                      expression (src/item.ml[199,6977+8]..src/item.ml[216,7539+9])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/item.ml[199,6977+12]..src/item.ml[199,6977+31])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/item.ml[199,6977+12]..src/item.ml[199,6977+20])
                                                                  Tpat_var "constant/884"
                                                                pattern (src/item.ml[199,6977+22]..src/item.ml[199,6977+31])
                                                                  Tpat_var "transmits/885"
                                                              ]
                                                            expression (src/item.ml[200,7011+10]..src/item.ml[205,7235+26])
                                                              Texp_ifthenelse
                                                              expression (src/item.ml[200,7011+13]..src/item.ml[200,7011+25])
                                                                Texp_apply
                                                                expression (src/item.ml[200,7011+17]..src/item.ml[200,7011+18])
                                                                  Texp_ident "Stdlib!.<"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/item.ml[200,7011+13]..src/item.ml[200,7011+16])
                                                                      Texp_ident "pos/882"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/item.ml[200,7011+19]..src/item.ml[200,7011+25])
                                                                      Texp_ident "length/881"
                                                                ]
                                                              expression (src/item.ml[201,7042+12]..src/item.ml[202,7123+38])
                                                                Texp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (src/item.ml[201,7042+16]..src/item.ml[201,7042+31])
                                                                      Tpat_tuple
                                                                      [
                                                                        pattern (src/item.ml[201,7042+16]..src/item.ml[201,7042+24])
                                                                          Tpat_var "nullable/886"
                                                                        pattern (src/item.ml[201,7042+26]..src/item.ml[201,7042+31])
                                                                          Tpat_var "first/887"
                                                                      ]
                                                                    expression (src/item.ml[201,7042+34]..src/item.ml[201,7042+77])
                                                                      Texp_apply
                                                                      expression (src/item.ml[201,7042+34]..src/item.ml[201,7042+62])
                                                                        Texp_ident "Dune__exe!.Grammar.Analysis.nullable_first_prod"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/item.ml[201,7042+63]..src/item.ml[201,7042+67])
                                                                            Texp_ident "prod/878"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/item.ml[201,7042+68]..src/item.ml[201,7042+77])
                                                                            Texp_apply
                                                                            expression (src/item.ml[201,7042+73]..src/item.ml[201,7042+74])
                                                                              Texp_ident "Stdlib!.+"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/item.ml[201,7042+69]..src/item.ml[201,7042+72])
                                                                                  Texp_ident "pos/882"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/item.ml[201,7042+75]..src/item.ml[201,7042+76])
                                                                                  Texp_constant Const_int 1
                                                                            ]
                                                                      ]
                                                                ]
                                                                expression (src/item.ml[202,7123+12]..src/item.ml[202,7123+38])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/item.ml[202,7123+12]..src/item.ml[202,7123+28])
                                                                      Texp_apply
                                                                      expression (src/item.ml[202,7123+12]..src/item.ml[202,7123+22])
                                                                        Texp_ident "L/821.constant"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/item.ml[202,7123+23]..src/item.ml[202,7123+28])
                                                                            Texp_ident "first/887"
                                                                      ]
                                                                    expression (src/item.ml[202,7123+30]..src/item.ml[202,7123+38])
                                                                      Texp_ident "nullable/886"
                                                                  ]
                                                              Some
                                                                expression (src/item.ml[205,7235+12]..src/item.ml[205,7235+26])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/item.ml[205,7235+12]..src/item.ml[205,7235+19])
                                                                      Texp_ident "L/821.empty"
                                                                    expression (src/item.ml[205,7235+21]..src/item.ml[205,7235+26])
                                                                      Texp_construct "false"
                                                                      []
                                                                  ]
                                                        ]
                                                        expression (src/item.ml[208,7274+8]..src/item.ml[216,7539+9])
                                                          Texp_record
                                                            fields =
                                                              [
                                                                "item"
                                                                  expression (src/item.ml[209,7284+17]..src/item.ml[209,7284+21])
                                                                    Texp_ident "item/883"
                                                                "epsilon_constant"
                                                                  expression (src/item.ml[210,7307+29]..src/item.ml[210,7307+37])
                                                                    Texp_ident "constant/884"
                                                                "epsilon_transmits"
                                                                  expression (src/item.ml[211,7346+30]..src/item.ml[211,7346+39])
                                                                    Texp_ident "transmits/885"
                                                                "epsilon_transitions"
                                                                  expression (src/item.ml[212,7387+32]..src/item.ml[212,7387+34])
                                                                    Texp_construct "[]"
                                                                    []
                                                                "mark"
                                                                  expression (src/item.ml[213,7451+17]..src/item.ml[213,7451+26])
                                                                    Texp_ident "Dune__exe!.Mark.none"
                                                                "predecessors"
                                                                  expression (src/item.ml[214,7479+25]..src/item.ml[214,7479+27])
                                                                    Texp_construct "[]"
                                                                    []
                                                                "lookahead"
                                                                  expression (src/item.ml[215,7508+22]..src/item.ml[215,7508+29])
                                                                    Texp_ident "L/821.empty"
                                                              ]
                                                            representation =
                                                              Record_regular
                                                            extended_expression =
                                                              None
                                                ]
                                          ]
                                    ]
                          ]
                    ]
              ]
            structure_item (src/item.ml[223,7609+2]..src/item.ml[242,8131+5])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[223,7609+6]..src/item.ml[223,7609+8])
                    Tpat_construct "()"
                    []
                    None
                  expression (src/item.ml[224,7620+4]..src/item.ml[242,8131+5])
                    Texp_apply
                    expression (src/item.ml[224,7620+4]..src/item.ml[224,7620+19])
                      Texp_ident "Dune__exe!.Grammar.Production.iter"
                    [
                      <arg>
                        Nolabel
                        expression (src/item.ml[224,7620+20]..src/item.ml[242,8131+5])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/item.ml[224,7620+25]..src/item.ml[224,7620+29])
                                Tpat_var "prod/945"
                              expression (src/item.ml[225,7653+6]..src/item.ml[241,8093+37])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/item.ml[225,7653+10]..src/item.ml[225,7653+18])
                                      Tpat_tuple
                                      [
                                        pattern (src/item.ml[225,7653+10]..src/item.ml[225,7653+13])
                                          Tpat_var "_nt/946"
                                        pattern (src/item.ml[225,7653+15]..src/item.ml[225,7653+18])
                                          Tpat_var "rhs/947"
                                      ]
                                    expression (src/item.ml[225,7653+21]..src/item.ml[225,7653+40])
                                      Texp_apply
                                      expression (src/item.ml[225,7653+21]..src/item.ml[225,7653+35])
                                        Texp_ident "Dune__exe!.Grammar.Production.def"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/item.ml[225,7653+36]..src/item.ml[225,7653+40])
                                            Texp_ident "prod/945"
                                      ]
                                ]
                                expression (src/item.ml[226,7697+6]..src/item.ml[241,8093+37])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/item.ml[226,7697+10]..src/item.ml[226,7697+16])
                                        Tpat_var "length/948"
                                      expression (src/item.ml[226,7697+19]..src/item.ml[226,7697+35])
                                        Texp_apply
                                        expression (src/item.ml[226,7697+19]..src/item.ml[226,7697+31])
                                          Texp_ident "Stdlib!.Array.length"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/item.ml[226,7697+32]..src/item.ml[226,7697+35])
                                              Texp_ident "rhs/947"
                                        ]
                                  ]
                                  expression (src/item.ml[227,7736+6]..src/item.ml[241,8093+37])
                                    Texp_apply
                                    expression (src/item.ml[227,7736+6]..src/item.ml[227,7736+17])
                                      Texp_ident "Stdlib!.Array.iteri"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[227,7736+18]..src/item.ml[241,8093+7])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/item.ml[227,7736+23]..src/item.ml[227,7736+26])
                                                Tpat_var "pos/949"
                                              expression (src/item.ml[227,7736+27]..src/item.ml[239,8077+14]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/item.ml[227,7736+27]..src/item.ml[227,7736+31])
                                                      Tpat_var "node/950"
                                                    expression (src/item.ml[229,7772+8]..src/item.ml[239,8077+14])
                                                      Texp_setfield
                                                      expression (src/item.ml[229,7772+8]..src/item.ml[229,7772+12])
                                                        Texp_ident "node/950"
                                                      "epsilon_transitions"
                                                      expression (src/item.ml[230,7808+10]..src/item.ml[239,8077+14])
                                                        Texp_ifthenelse
                                                        expression (src/item.ml[230,7808+13]..src/item.ml[230,7808+25])
                                                          Texp_apply
                                                          expression (src/item.ml[230,7808+17]..src/item.ml[230,7808+18])
                                                            Texp_ident "Stdlib!.<"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/item.ml[230,7808+13]..src/item.ml[230,7808+16])
                                                                Texp_ident "pos/949"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/item.ml[230,7808+19]..src/item.ml[230,7808+25])
                                                                Texp_ident "length/948"
                                                          ]
                                                        expression (src/item.ml[231,7839+12]..src/item.ml[237,8043+18])
                                                          Texp_match
                                                          expression (src/item.ml[231,7839+18]..src/item.ml[231,7839+27])
                                                            Texp_apply
                                                            expression (src/item.ml[231,7839+18]..src/item.ml[231,7839+27]) ghost
                                                              Texp_ident "Stdlib!.Array.get"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/item.ml[231,7839+18]..src/item.ml[231,7839+21])
                                                                  Texp_ident "rhs/947"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/item.ml[231,7839+23]..src/item.ml[231,7839+26])
                                                                  Texp_ident "pos/949"
                                                            ]
                                                          [
                                                            <case>
                                                              pattern (src/item.ml[232,7872+14]..src/item.ml[232,7872+25])
                                                                Tpat_value
                                                                pattern (src/item.ml[232,7872+14]..src/item.ml[232,7872+25])
                                                                  Tpat_construct "Symbol.N"
                                                                  [
                                                                    pattern (src/item.ml[232,7872+23]..src/item.ml[232,7872+25])
                                                                      Tpat_var "nt/951"
                                                                  ]
                                                                  None
                                                              expression (src/item.ml[233,7901+16]..src/item.ml[235,7997+17])
                                                                Texp_apply
                                                                expression (src/item.ml[233,7901+16]..src/item.ml[233,7901+32])
                                                                  Texp_ident "Dune__exe!.Grammar.Production.mapnt"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/item.ml[233,7901+33]..src/item.ml[233,7901+35])
                                                                      Texp_ident "nt/951"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/item.ml[233,7901+36]..src/item.ml[235,7997+17])
                                                                      Texp_function
                                                                      Nolabel
                                                                      [
                                                                        <case>
                                                                          pattern (src/item.ml[233,7901+41]..src/item.ml[233,7901+45])
                                                                            Tpat_var "prod/952"
                                                                          expression (src/item.ml[234,7950+18]..src/item.ml[234,7950+46])
                                                                            Texp_apply
                                                                            expression (src/item.ml[234,7950+18]..src/item.ml[234,7950+27])
                                                                              Texp_ident "item2node/873"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/item.ml[234,7950+28]..src/item.ml[234,7950+46])
                                                                                  Texp_apply
                                                                                  expression (src/item.ml[234,7950+29]..src/item.ml[234,7950+35])
                                                                                    Texp_ident "import/505"
                                                                                  [
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/item.ml[234,7950+36]..src/item.ml[234,7950+45])
                                                                                        Texp_tuple
                                                                                        [
                                                                                          expression (src/item.ml[234,7950+37]..src/item.ml[234,7950+41])
                                                                                            Texp_ident "prod/952"
                                                                                          expression (src/item.ml[234,7950+43]..src/item.ml[234,7950+44])
                                                                                            Texp_constant Const_int 0
                                                                                        ]
                                                                                  ]
                                                                            ]
                                                                      ]
                                                                ]
                                                            <case>
                                                              pattern (src/item.ml[236,8015+14]..src/item.ml[236,8015+24])
                                                                Tpat_value
                                                                pattern (src/item.ml[236,8015+14]..src/item.ml[236,8015+24])
                                                                  Tpat_construct "Symbol.T"
                                                                  [
                                                                    pattern (src/item.ml[236,8015+23]..src/item.ml[236,8015+24])
                                                                      Tpat_any
                                                                  ]
                                                                  None
                                                              expression (src/item.ml[237,8043+16]..src/item.ml[237,8043+18])
                                                                Texp_construct "[]"
                                                                []
                                                          ]
                                                        Some
                                                          expression (src/item.ml[239,8077+12]..src/item.ml[239,8077+14])
                                                            Texp_construct "[]"
                                                            []
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/item.ml[241,8093+8]..src/item.ml[241,8093+37])
                                          Texp_apply
                                          expression (src/item.ml[241,8093+8]..src/item.ml[241,8093+37]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[241,8093+8]..src/item.ml[241,8093+15])
                                                Texp_ident "mapping/872"
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[241,8093+17]..src/item.ml[241,8093+36])
                                                Texp_apply
                                                expression (src/item.ml[241,8093+17]..src/item.ml[241,8093+31])
                                                  Texp_ident "Dune__exe!.Grammar.Production.p2i"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/item.ml[241,8093+32]..src/item.ml[241,8093+36])
                                                      Texp_ident "prod/945"
                                                ]
                                          ]
                                    ]
                          ]
                    ]
              ]
            structure_item (src/item.ml[257,8769+2]..src/item.ml[335,11274+21])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/item.ml[257,8769+6]..src/item.ml[257,8769+13])
                    Tpat_var "closure/953"
                  expression (src/item.ml[257,8769+14]..src/item.ml[335,11274+21]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/item.ml[257,8769+15]..src/item.ml[257,8769+20])
                          extra
                            Tpat_extra_constraint
                            core_type (src/item.ml[257,8769+23]..src/item.ml[257,8769+28])
                              Ttyp_constr "state/822"
                              []
                          Tpat_alias "items/955"
                          pattern (src/item.ml[257,8769+15]..src/item.ml[257,8769+20])
                            Tpat_any
                        expression (src/item.ml[271,9344+4]..src/item.ml[335,11274+21])
                          extra
                            Texp_constraint
                            core_type (src/item.ml[257,8769+32]..src/item.ml[257,8769+37])
                              Ttyp_constr "state/822"
                              []
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/item.ml[271,9344+8]..src/item.ml[271,9344+12])
                                Tpat_var "this/956"
                              expression (src/item.ml[271,9344+15]..src/item.ml[271,9344+27])
                                Texp_apply
                                expression (src/item.ml[271,9344+15]..src/item.ml[271,9344+25])
                                  Texp_ident "Dune__exe!.Mark.fresh"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/item.ml[271,9344+25]..src/item.ml[271,9344+27])
                                      Texp_construct "()"
                                      []
                                ]
                          ]
                          expression (src/item.ml[272,9375+4]..src/item.ml[335,11274+21])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/item.ml[272,9375+8]..src/item.ml[272,9375+13])
                                  Tpat_var "nodes/957"
                                expression (src/item.ml[272,9375+16]..src/item.ml[272,9375+22])
                                  Texp_apply
                                  expression (src/item.ml[272,9375+16]..src/item.ml[272,9375+19])
                                    Texp_ident "Stdlib!.ref"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/item.ml[272,9375+20]..src/item.ml[272,9375+22])
                                        Texp_construct "[]"
                                        []
                                  ]
                            ]
                            expression (src/item.ml[274,9402+4]..src/item.ml[335,11274+21])
                              Texp_let Rec
                              [
                                <def>
                                  pattern (src/item.ml[274,9402+12]..src/item.ml[274,9402+17])
                                    Tpat_var "visit/958"
                                  expression (src/item.ml[274,9402+18]..src/item.ml[286,9852+9]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/item.ml[274,9402+18]..src/item.ml[274,9402+24])
                                          Tpat_var "father/960"
                                        expression (src/item.ml[274,9402+25]..src/item.ml[286,9852+9]) ghost
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/item.ml[274,9402+25]..src/item.ml[274,9402+34])
                                                Tpat_var "transmits/961"
                                              expression (src/item.ml[274,9402+35]..src/item.ml[286,9852+9]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/item.ml[274,9402+35]..src/item.ml[274,9402+39])
                                                      Tpat_var "toks/962"
                                                    expression (src/item.ml[274,9402+40]..src/item.ml[286,9852+9]) ghost
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/item.ml[274,9402+40]..src/item.ml[274,9402+44])
                                                            Tpat_var "node/963"
                                                          expression (src/item.ml[275,9449+6]..src/item.ml[286,9852+9])
                                                            Texp_ifthenelse
                                                            expression (src/item.ml[275,9449+9]..src/item.ml[275,9449+33])
                                                              Texp_apply
                                                              expression (src/item.ml[275,9449+9]..src/item.ml[275,9449+18])
                                                                Texp_ident "Dune__exe!.Mark.same"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/item.ml[275,9449+19]..src/item.ml[275,9449+28])
                                                                    Texp_field
                                                                    expression (src/item.ml[275,9449+19]..src/item.ml[275,9449+23])
                                                                      Texp_ident "node/963"
                                                                    "mark"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/item.ml[275,9449+29]..src/item.ml[275,9449+33])
                                                                    Texp_ident "this/956"
                                                              ]
                                                            expression (src/item.ml[275,9449+39]..src/item.ml[280,9679+9])
                                                              Texp_sequence
                                                              expression (src/item.ml[277,9539+8]..src/item.ml[277,9539+53])
                                                                Texp_setfield
                                                                expression (src/item.ml[277,9539+8]..src/item.ml[277,9539+12])
                                                                  Texp_ident "node/963"
                                                                "lookahead"
                                                                expression (src/item.ml[277,9539+26]..src/item.ml[277,9539+53])
                                                                  Texp_apply
                                                                  expression (src/item.ml[277,9539+26]..src/item.ml[277,9539+33])
                                                                    Texp_ident "L/821.union"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/item.ml[277,9539+34]..src/item.ml[277,9539+38])
                                                                        Texp_ident "toks/962"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/item.ml[277,9539+39]..src/item.ml[277,9539+53])
                                                                        Texp_field
                                                                        expression (src/item.ml[277,9539+39]..src/item.ml[277,9539+43])
                                                                          Texp_ident "node/963"
                                                                        "lookahead"
                                                                  ]
                                                              expression (src/item.ml[278,9594+8]..src/item.ml[279,9620+58])
                                                                Texp_ifthenelse
                                                                expression (src/item.ml[278,9594+11]..src/item.ml[278,9594+20])
                                                                  Texp_ident "transmits/961"
                                                                expression (src/item.ml[279,9620+10]..src/item.ml[279,9620+58])
                                                                  Texp_setfield
                                                                  expression (src/item.ml[279,9620+10]..src/item.ml[279,9620+14])
                                                                    Texp_ident "node/963"
                                                                  "predecessors"
                                                                  expression (src/item.ml[279,9620+31]..src/item.ml[279,9620+58])
                                                                    Texp_construct "::"
                                                                    [
                                                                      expression (src/item.ml[279,9620+31]..src/item.ml[279,9620+37])
                                                                        Texp_ident "father/960"
                                                                      expression (src/item.ml[279,9620+41]..src/item.ml[279,9620+58])
                                                                        Texp_field
                                                                        expression (src/item.ml[279,9620+41]..src/item.ml[279,9620+45])
                                                                          Texp_ident "node/963"
                                                                        "predecessors"
                                                                    ]
                                                                None
                                                            Some
                                                              expression (src/item.ml[281,9689+11]..src/item.ml[286,9852+9])
                                                                Texp_sequence
                                                                expression (src/item.ml[283,9733+8]..src/item.ml[283,9733+65])
                                                                  Texp_setfield
                                                                  expression (src/item.ml[283,9733+8]..src/item.ml[283,9733+12])
                                                                    Texp_ident "node/963"
                                                                  "predecessors"
                                                                  expression (src/item.ml[283,9733+29]..src/item.ml[283,9733+65])
                                                                    Texp_ifthenelse
                                                                    expression (src/item.ml[283,9733+32]..src/item.ml[283,9733+41])
                                                                      Texp_ident "transmits/961"
                                                                    expression (src/item.ml[283,9733+47]..src/item.ml[283,9733+57])
                                                                      Texp_construct "::"
                                                                      [
                                                                        expression (src/item.ml[283,9733+49]..src/item.ml[283,9733+55])
                                                                          Texp_ident "father/960"
                                                                        expression (src/item.ml[283,9733+56]..src/item.ml[283,9733+57]) ghost
                                                                          Texp_construct "[]"
                                                                          []
                                                                      ]
                                                                    Some
                                                                      expression (src/item.ml[283,9733+63]..src/item.ml[283,9733+65])
                                                                        Texp_construct "[]"
                                                                        []
                                                                expression (src/item.ml[284,9800+8]..src/item.ml[285,9832+19])
                                                                  Texp_sequence
                                                                  expression (src/item.ml[284,9800+8]..src/item.ml[284,9800+30])
                                                                    Texp_setfield
                                                                    expression (src/item.ml[284,9800+8]..src/item.ml[284,9800+12])
                                                                      Texp_ident "node/963"
                                                                    "lookahead"
                                                                    expression (src/item.ml[284,9800+26]..src/item.ml[284,9800+30])
                                                                      Texp_ident "toks/962"
                                                                  expression (src/item.ml[285,9832+8]..src/item.ml[285,9832+19])
                                                                    Texp_apply
                                                                    expression (src/item.ml[285,9832+8]..src/item.ml[285,9832+14])
                                                                      Texp_ident "follow/959"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/item.ml[285,9832+15]..src/item.ml[285,9832+19])
                                                                          Texp_ident "node/963"
                                                                    ]
                                                      ]
                                                ]
                                          ]
                                    ]
                                <def>
                                  pattern (src/item.ml[288,9863+8]..src/item.ml[288,9863+14])
                                    Tpat_var "follow/959"
                                  expression (src/item.ml[288,9863+15]..src/item.ml[293,10023+32]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/item.ml[288,9863+15]..src/item.ml[288,9863+19])
                                          Tpat_var "node/964"
                                        expression (src/item.ml[289,9885+6]..src/item.ml[293,10023+32])
                                          Texp_sequence
                                          expression (src/item.ml[289,9885+6]..src/item.ml[289,9885+23])
                                            Texp_setfield
                                            expression (src/item.ml[289,9885+6]..src/item.ml[289,9885+10])
                                              Texp_ident "node/964"
                                            "mark"
                                            expression (src/item.ml[289,9885+19]..src/item.ml[289,9885+23])
                                              Texp_ident "this/956"
                                          expression (src/item.ml[290,9910+6]..src/item.ml[293,10023+32])
                                            Texp_sequence
                                            expression (src/item.ml[290,9910+6]..src/item.ml[290,9910+29])
                                              Texp_apply
                                              expression (src/item.ml[290,9910+12]..src/item.ml[290,9910+14])
                                                Texp_ident "Stdlib!.:="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/item.ml[290,9910+6]..src/item.ml[290,9910+11])
                                                    Texp_ident "nodes/957"
                                                <arg>
                                                  Nolabel
                                                  expression (src/item.ml[290,9910+15]..src/item.ml[290,9910+29])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/item.ml[290,9910+15]..src/item.ml[290,9910+19])
                                                        Texp_ident "node/964"
                                                      expression (src/item.ml[290,9910+23]..src/item.ml[290,9910+29])
                                                        Texp_apply
                                                        expression (src/item.ml[290,9910+23]..src/item.ml[290,9910+24])
                                                          Texp_ident "Stdlib!.!"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/item.ml[290,9910+24]..src/item.ml[290,9910+29])
                                                              Texp_ident "nodes/957"
                                                        ]
                                                    ]
                                              ]
                                            expression (src/item.ml[291,9941+6]..src/item.ml[293,10023+32])
                                              Texp_apply
                                              expression (src/item.ml[291,9941+6]..src/item.ml[291,9941+15])
                                                Texp_ident "Stdlib!.List.iter"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/item.ml[292,9957+8]..src/item.ml[292,9957+65])
                                                    Texp_apply
                                                    expression (src/item.ml[292,9957+9]..src/item.ml[292,9957+14])
                                                      Texp_ident "visit/958"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/item.ml[292,9957+15]..src/item.ml[292,9957+19])
                                                          Texp_ident "node/964"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/item.ml[292,9957+20]..src/item.ml[292,9957+42])
                                                          Texp_field
                                                          expression (src/item.ml[292,9957+20]..src/item.ml[292,9957+24])
                                                            Texp_ident "node/964"
                                                          "epsilon_transmits"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/item.ml[292,9957+43]..src/item.ml[292,9957+64])
                                                          Texp_field
                                                          expression (src/item.ml[292,9957+43]..src/item.ml[292,9957+47])
                                                            Texp_ident "node/964"
                                                          "epsilon_constant"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/item.ml[293,10023+8]..src/item.ml[293,10023+32])
                                                    Texp_field
                                                    expression (src/item.ml[293,10023+8]..src/item.ml[293,10023+12])
                                                      Texp_ident "node/964"
                                                    "epsilon_transitions"
                                              ]
                                    ]
                              ]
                              expression (src/item.ml[297,10065+4]..src/item.ml[335,11274+21])
                                Texp_sequence
                                expression (src/item.ml[297,10065+4]..src/item.ml[300,10177+11])
                                  Texp_apply
                                  expression (src/item.ml[297,10065+4]..src/item.ml[297,10065+12])
                                    Texp_ident "Map/778.iter"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/item.ml[297,10065+13]..src/item.ml[300,10177+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/item.ml[297,10065+18]..src/item.ml[297,10065+22])
                                              Tpat_var "item/1031"
                                            expression (src/item.ml[297,10065+23]..src/item.ml[299,10131+45]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/item.ml[297,10065+23]..src/item.ml[297,10065+27])
                                                    Tpat_var "toks/1032"
                                                  expression (src/item.ml[298,10096+6]..src/item.ml[299,10131+45])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/item.ml[298,10096+10]..src/item.ml[298,10096+14])
                                                          Tpat_var "node/1033"
                                                        expression (src/item.ml[298,10096+17]..src/item.ml[298,10096+31])
                                                          Texp_apply
                                                          expression (src/item.ml[298,10096+17]..src/item.ml[298,10096+26])
                                                            Texp_ident "item2node/873"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/item.ml[298,10096+27]..src/item.ml[298,10096+31])
                                                                Texp_ident "item/1031"
                                                          ]
                                                    ]
                                                    expression (src/item.ml[299,10131+6]..src/item.ml[299,10131+45])
                                                      Texp_apply
                                                      expression (src/item.ml[299,10131+6]..src/item.ml[299,10131+11])
                                                        Texp_ident "visit/958"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[299,10131+12]..src/item.ml[299,10131+16])
                                                            Texp_ident "node/1033"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[299,10131+30]..src/item.ml[299,10131+35])
                                                            Texp_construct "false"
                                                            []
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[299,10131+36]..src/item.ml[299,10131+40])
                                                            Texp_ident "toks/1032"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[299,10131+41]..src/item.ml[299,10131+45])
                                                            Texp_ident "node/1033"
                                                      ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/item.ml[300,10177+6]..src/item.ml[300,10177+11])
                                        Texp_ident "items/955"
                                  ]
                                expression (src/item.ml[302,10191+4]..src/item.ml[335,11274+21])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/item.ml[302,10191+8]..src/item.ml[302,10191+13])
                                        Tpat_var "nodes/1034"
                                      expression (src/item.ml[303,10207+6]..src/item.ml[303,10207+12])
                                        Texp_apply
                                        expression (src/item.ml[303,10207+6]..src/item.ml[303,10207+7])
                                          Texp_ident "Stdlib!.!"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/item.ml[303,10207+7]..src/item.ml[303,10207+12])
                                              Texp_ident "nodes/957"
                                        ]
                                  ]
                                  expression (src/item.ml[309,10417+4]..src/item.ml[335,11274+21])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/item.ml[309,10417+8]..src/item.ml[309,10417+12])
                                          Tpat_var "this/1035"
                                        expression (src/item.ml[309,10417+15]..src/item.ml[309,10417+27])
                                          Texp_apply
                                          expression (src/item.ml[309,10417+15]..src/item.ml[309,10417+25])
                                            Texp_ident "Dune__exe!.Mark.fresh"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[309,10417+25]..src/item.ml[309,10417+27])
                                                Texp_construct "()"
                                                []
                                          ]
                                    ]
                                    expression (src/item.ml[311,10449+4]..src/item.ml[335,11274+21])
                                      Texp_let Rec
                                      [
                                        <def>
                                          pattern (src/item.ml[311,10449+12]..src/item.ml[311,10449+16])
                                            Tpat_var "walk/1036"
                                          expression (src/item.ml[311,10449+17]..src/item.ml[321,10869+9]) ghost
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/item.ml[311,10449+17]..src/item.ml[311,10449+21])
                                                  Tpat_var "node/1037"
                                                expression (src/item.ml[312,10473+6]..src/item.ml[321,10869+9])
                                                  Texp_ifthenelse
                                                  expression (src/item.ml[312,10473+9]..src/item.ml[312,10473+39])
                                                    Texp_apply
                                                    expression (src/item.ml[312,10473+9]..src/item.ml[312,10473+12])
                                                      Texp_ident "Stdlib!.not"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/item.ml[312,10473+13]..src/item.ml[312,10473+39])
                                                          Texp_apply
                                                          expression (src/item.ml[312,10473+14]..src/item.ml[312,10473+23])
                                                            Texp_ident "Dune__exe!.Mark.same"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/item.ml[312,10473+24]..src/item.ml[312,10473+33])
                                                                Texp_field
                                                                expression (src/item.ml[312,10473+24]..src/item.ml[312,10473+28])
                                                                  Texp_ident "node/1037"
                                                                "mark"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/item.ml[312,10473+34]..src/item.ml[312,10473+38])
                                                                Texp_ident "this/1035"
                                                          ]
                                                    ]
                                                  expression (src/item.ml[312,10473+45]..src/item.ml[321,10869+9])
                                                    Texp_sequence
                                                    expression (src/item.ml[314,10551+8]..src/item.ml[314,10551+25])
                                                      Texp_setfield
                                                      expression (src/item.ml[314,10551+8]..src/item.ml[314,10551+12])
                                                        Texp_ident "node/1037"
                                                      "mark"
                                                      expression (src/item.ml[314,10551+21]..src/item.ml[314,10551+25])
                                                        Texp_ident "this/1035"
                                                    expression (src/item.ml[317,10702+8]..src/item.ml[320,10841+27])
                                                      Texp_apply
                                                      expression (src/item.ml[317,10702+8]..src/item.ml[317,10702+17])
                                                        Texp_ident "Stdlib!.List.iter"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[317,10702+18]..src/item.ml[320,10841+9])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/item.ml[317,10702+23]..src/item.ml[317,10702+34])
                                                                  Tpat_var "predecessor/1038"
                                                                expression (src/item.ml[318,10740+10]..src/item.ml[319,10768+72])
                                                                  Texp_sequence
                                                                  expression (src/item.ml[318,10740+10]..src/item.ml[318,10740+26])
                                                                    Texp_apply
                                                                    expression (src/item.ml[318,10740+10]..src/item.ml[318,10740+14])
                                                                      Texp_ident "walk/1036"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/item.ml[318,10740+15]..src/item.ml[318,10740+26])
                                                                          Texp_ident "predecessor/1038"
                                                                    ]
                                                                  expression (src/item.ml[319,10768+10]..src/item.ml[319,10768+72])
                                                                    Texp_setfield
                                                                    expression (src/item.ml[319,10768+10]..src/item.ml[319,10768+14])
                                                                      Texp_ident "node/1037"
                                                                    "lookahead"
                                                                    expression (src/item.ml[319,10768+28]..src/item.ml[319,10768+72])
                                                                      Texp_apply
                                                                      expression (src/item.ml[319,10768+28]..src/item.ml[319,10768+35])
                                                                        Texp_ident "L/821.union"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/item.ml[319,10768+36]..src/item.ml[319,10768+57])
                                                                            Texp_field
                                                                            expression (src/item.ml[319,10768+36]..src/item.ml[319,10768+47])
                                                                              Texp_ident "predecessor/1038"
                                                                            "lookahead"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/item.ml[319,10768+58]..src/item.ml[319,10768+72])
                                                                            Texp_field
                                                                            expression (src/item.ml[319,10768+58]..src/item.ml[319,10768+62])
                                                                              Texp_ident "node/1037"
                                                                            "lookahead"
                                                                      ]
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/item.ml[320,10841+10]..src/item.ml[320,10841+27])
                                                            Texp_field
                                                            expression (src/item.ml[320,10841+10]..src/item.ml[320,10841+14])
                                                              Texp_ident "node/1037"
                                                            "predecessors"
                                                      ]
                                                  None
                                            ]
                                      ]
                                      expression (src/item.ml[324,10887+4]..src/item.ml[335,11274+21])
                                        Texp_sequence
                                        expression (src/item.ml[324,10887+4]..src/item.ml[324,10887+24])
                                          Texp_apply
                                          expression (src/item.ml[324,10887+4]..src/item.ml[324,10887+13])
                                            Texp_ident "Stdlib!.List.iter"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[324,10887+14]..src/item.ml[324,10887+18])
                                                Texp_ident "walk/1036"
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[324,10887+19]..src/item.ml[324,10887+24])
                                                Texp_ident "nodes/1034"
                                          ]
                                        expression (src/item.ml[330,11092+4]..src/item.ml[335,11274+21])
                                          Texp_apply
                                          expression (src/item.ml[330,11092+4]..src/item.ml[330,11092+18])
                                            Texp_ident "Stdlib!.List.fold_left"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[330,11092+19]..src/item.ml[335,11274+5])
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/item.ml[330,11092+24]..src/item.ml[330,11092+31])
                                                      Tpat_var "closure/1039"
                                                    expression (src/item.ml[330,11092+32]..src/item.ml[334,11260+13]) ghost
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/item.ml[330,11092+32]..src/item.ml[330,11092+36])
                                                            Tpat_var "node/1040"
                                                          expression (src/item.ml[331,11132+6]..src/item.ml[334,11260+13])
                                                            Texp_sequence
                                                            expression (src/item.ml[331,11132+6]..src/item.ml[331,11132+29])
                                                              Texp_setfield
                                                              expression (src/item.ml[331,11132+6]..src/item.ml[331,11132+10])
                                                                Texp_ident "node/1040"
                                                              "predecessors"
                                                              expression (src/item.ml[331,11132+27]..src/item.ml[331,11132+29])
                                                                Texp_construct "[]"
                                                                []
                                                            expression (src/item.ml[332,11163+6]..src/item.ml[334,11260+13])
                                                              Texp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (src/item.ml[332,11163+10]..src/item.ml[332,11163+17])
                                                                    Tpat_var "closure/1041"
                                                                  expression (src/item.ml[332,11163+20]..src/item.ml[332,11163+60])
                                                                    Texp_apply
                                                                    expression (src/item.ml[332,11163+20]..src/item.ml[332,11163+27])
                                                                      Texp_ident "Map/778.add"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/item.ml[332,11163+28]..src/item.ml[332,11163+37])
                                                                          Texp_field
                                                                          expression (src/item.ml[332,11163+28]..src/item.ml[332,11163+32])
                                                                            Texp_ident "node/1040"
                                                                          "item"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/item.ml[332,11163+38]..src/item.ml[332,11163+52])
                                                                          Texp_field
                                                                          expression (src/item.ml[332,11163+38]..src/item.ml[332,11163+42])
                                                                            Texp_ident "node/1040"
                                                                          "lookahead"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/item.ml[332,11163+53]..src/item.ml[332,11163+60])
                                                                          Texp_ident "closure/1039"
                                                                    ]
                                                              ]
                                                              expression (src/item.ml[333,11227+6]..src/item.ml[334,11260+13])
                                                                Texp_sequence
                                                                expression (src/item.ml[333,11227+6]..src/item.ml[333,11227+31])
                                                                  Texp_setfield
                                                                  expression (src/item.ml[333,11227+6]..src/item.ml[333,11227+10])
                                                                    Texp_ident "node/1040"
                                                                  "lookahead"
                                                                  expression (src/item.ml[333,11227+24]..src/item.ml[333,11227+31])
                                                                    Texp_ident "L/821.empty"
                                                                expression (src/item.ml[334,11260+6]..src/item.ml[334,11260+13])
                                                                  Texp_ident "closure/1041"
                                                      ]
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[335,11274+6]..src/item.ml[335,11274+15])
                                                Texp_ident "Map/778.empty"
                                            <arg>
                                              Nolabel
                                              expression (src/item.ml[335,11274+16]..src/item.ml[335,11274+21])
                                                Texp_ident "nodes/1034"
                                          ]
                    ]
              ]
          ]
]

{<Dune__exe__Item>
 "Closure"[module] ->
   Abs<Dune__exe__Item.99>
      (L/821,
       {
        "closure"[value] -> <Dune__exe__Item.77>;
        "state"[type] -> <Dune__exe__Item.45>;
        });
 "Map"[module] ->
   (CU Dune__exe . "Patricia"[module] . "Big"[module])<Dune__exe__Item.42>;
 "Set"[module] ->
   ((CU Dune__exe . "Patricia"[module] . "Big"[module])<Dune__exe__Item.42> .
   "Domain"[module])<Dune__exe__Item.43>;
 "classify"[value] -> <Dune__exe__Item.36>;
 "def"[value] -> <Dune__exe__Item.15>;
 "equal"[value] -> <Dune__exe__Item.12>;
 "export"[value] -> <Dune__exe__Item.3>;
 "import"[value] -> <Dune__exe__Item.5>;
 "kind"[type] -> <Dune__exe__Item.33>;
 "marshal"[value] -> <Dune__exe__Item.8>;
 "print"[value] -> <Dune__exe__Item.28>;
 "startnt"[value] -> <Dune__exe__Item.22>;
 "t"[type] -> <Dune__exe__Item.0>;
 }

(seq
  (let (low_bits/415 =[int] 10)
    (setfield_ptr(root-init) 11 (global Dune__exe__Item!) low_bits/415))
  (let
    (low_limit/416 =[int] (lsl 1 (field_imm 11 (global Dune__exe__Item!))))
    (setfield_ptr(root-init) 12 (global Dune__exe__Item!) low_limit/416))
  (let
    (export/417 =
       (function t/419[int]
         (makeblock 0 (*,int)
           (apply (field_imm 2 (field_imm 8 (global Dune__exe__Grammar!)))
             (lsr t/419 (field_imm 11 (global Dune__exe__Item!))))
           (mod t/419 (field_imm 12 (global Dune__exe__Item!))))))
    (setfield_ptr(root-init) 1 (global Dune__exe__Item!) export/417))
  (let
    (import/505 =
       (function (param/2747, param/2748[int]) : int
         (let (pos/508 =a param/2748 prod/507 =a param/2747)
           (seq
             (if (< pos/508 (field_imm 12 (global Dune__exe__Item!))) 0
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/item.ml" 53 2])))
             (+
               (lsl
                 (apply
                   (field_imm 1 (field_imm 8 (global Dune__exe__Grammar!)))
                   prod/507)
                 (field_imm 11 (global Dune__exe__Item!)))
               pos/508)))))
    (setfield_ptr(root-init) 0 (global Dune__exe__Item!) import/505))
  (let (marshal/510 = (function item/512[int] : int item/512))
    (setfield_ptr(root-init) 2 (global Dune__exe__Item!) marshal/510))
  (let
    (*match*/2750 =
       (apply (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
         (function index/513 : int
           (let
             (length/514 =[int]
                (apply
                  (field_imm 7 (field_imm 8 (global Dune__exe__Grammar!)))
                  index/513))
             (if (<= (field_imm 12 (global Dune__exe__Item!)) length/514)
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (apply
                   (field_imm 10 (field_imm 8 (global Dune__exe__Grammar!)))
                   index/513)
                 [0:
                  [11:
                   "The length of this production is "
                   [4:
                    0 0 0
                    [11:
                     ", which exceeds the limit of " [4: 0 0 0 [12: '.' 0]]]]]
                  "The length of this production is %d, which exceeds the limit of %d."]
                 length/514 (- (field_imm 12 (global Dune__exe__Item!)) 1))
               0)))))
    0)
  (let
    (equal/588 =
       (function item1/590[int] item2/591[int] : int
         (== item1/590 item2/591)))
    (setfield_ptr(root-init) 3 (global Dune__exe__Item!) equal/588))
  (let
    (def/592 =
       (function t/594[int]
         (let
           (*match*/2758 =
              (apply (field_imm 1 (global Dune__exe__Item!)) t/594)
            pos/596 =a (field_imm 1 *match*/2758)
            prod/595 =a (field_imm 0 *match*/2758)
            *match*/2754 =
              (apply (field_imm 4 (field_imm 8 (global Dune__exe__Grammar!)))
                prod/595)
            rhs/598 =a (field_imm 1 *match*/2754)
            nt/597 =a (field_imm 0 *match*/2754)
            length/599 =[int] (array.length[addr] rhs/598))
           (seq
             (if (&& (>= pos/596 0) (<= pos/596 length/599)) 0
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/item.ml" 87 2])))
             (makeblock 0 (*,*,*,int,int) prod/595 nt/597 rhs/598 pos/596
               length/599)))))
    (setfield_ptr(root-init) 4 (global Dune__exe__Item!) def/592))
  (let
    (startnt/648 =
       (function t/650[int]
         (let
           (*match*/2767 =
              (apply (field_imm 4 (global Dune__exe__Item!)) t/650)
            length/653 =a (field_imm 4 *match*/2767)
            pos/652 =a (field_imm 3 *match*/2767)
            rhs/651 =a (field_imm 2 *match*/2767)
            *match*/2769 =a (field_imm 1 *match*/2767)
            *match*/2768 =a (field_imm 0 *match*/2767))
           (seq
             (if (&& (== pos/652 0) (== length/653 1)) 0
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/item.ml" 92 2])))
             (let (*match*/2759 = (array.get[addr] rhs/651 0))
               (switch* *match*/2759
                case tag 0:
                 (let (nt/676 =a (field_imm 0 *match*/2759)) nt/676)
                case tag 1:
                 (let (*match*/2760 =a (field_imm 0 *match*/2759))
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/item.ml" 97 6])))))))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Item!) startnt/648))
  (let
    (print/707 =
       (function item/709[int]
         (let
           (*match*/2776 =
              (apply (field_imm 4 (global Dune__exe__Item!)) item/709)
            *match*/2778 =a (field_imm 4 *match*/2776)
            pos/712 =a (field_imm 3 *match*/2776)
            rhs/711 =a (field_imm 2 *match*/2776)
            nt/710 =a (field_imm 1 *match*/2776)
            *match*/2777 =a (field_imm 0 *match*/2776))
           (apply (field_imm 3 (global Stdlib__Printf!))
             [0: [2: 0 [11: " -> " [2: 0 0]]] "%s -> %s"]
             (apply (field_imm 5 (field_imm 0 (global Dune__exe__Grammar!)))
               0 nt/710)
             (apply (field_imm 9 (field_imm 5 (global Dune__exe__Grammar!)))
               0 pos/712 rhs/711)))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Item!) print/707))
  (let
    (classify/769 =
       (function item/771[int]
         (let
           (*match*/2785 =
              (apply (field_imm 4 (global Dune__exe__Item!)) item/771)
            length/775 =a (field_imm 4 *match*/2785)
            pos/774 =a (field_imm 3 *match*/2785)
            prod/772 =a (field_imm 0 *match*/2785))
           (if (== pos/774 length/775) (makeblock 1 prod/772)
             (let
               (rhs/773 =a (field_imm 2 *match*/2785)
                *match*/2786 =a (field_imm 1 *match*/2785))
               (makeblock 0 (*,int) (array.get[addr] rhs/773 pos/774)
                 (apply (field_imm 0 (global Dune__exe__Item!))
                   (makeblock 0 (*,int) prod/772 (+ pos/774 1)))))))))
    (setfield_ptr(root-init) 7 (global Dune__exe__Item!) classify/769))
  (let
    (Closure/1042 =
       (function L/2815 is_a_functor
         (let
           (L/821 =a L/2815
            mapping/872 =
              (caml_make_vect
                (field_imm 3 (field_imm 8 (global Dune__exe__Grammar!)))
                (makearray[addr]))
            item2node/873 =
              (function item/875[int]
                (let
                  (*match*/2790 =
                     (apply (field_imm 1 (global Dune__exe__Item!)) item/875)
                   pos/877 =a (field_imm 1 *match*/2790)
                   prod/876 =a (field_imm 0 *match*/2790))
                  (array.get[addr]
                    (array.get[addr] mapping/872
                      (apply
                        (field_imm 1
                          (field_imm 8 (global Dune__exe__Grammar!)))
                        prod/876))
                    pos/877)))
            *match*/2813 =
              (apply
                (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                (function prod/878 : int
                  (let
                    (*match*/2803 =
                       (apply
                         (field_imm 4
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         prod/878)
                     rhs/880 =a (field_imm 1 *match*/2803)
                     _nt/879 =a (field_imm 0 *match*/2803)
                     length/881 =[int] (array.length[addr] rhs/880))
                    (array.set[addr] mapping/872
                      (apply
                        (field_imm 1
                          (field_imm 8 (global Dune__exe__Grammar!)))
                        prod/878)
                      (apply (field_imm 0 (global Stdlib__Array!))
                        (+ length/881 1)
                        (function pos/882[int]
                          (let
                            (item/883 =[int]
                               (apply (field_imm 0 (global Dune__exe__Item!))
                                 (makeblock 0 (*,int) prod/878 pos/882)))
                            (catch
                              (if (< pos/882 length/881)
                                (let
                                  (*match*/2795 =
                                     (apply
                                       (field_imm 4
                                         (field_imm 11
                                           (global Dune__exe__Grammar!)))
                                       prod/878 (+ pos/882 1))
                                   first/887 =a (field_imm 1 *match*/2795)
                                   nullable/886 =a (field_imm 0 *match*/2795)
                                   transmits/2799 =a nullable/886
                                   constant/2798 =
                                     (apply (field_imm 1 L/821) first/887))
                                  (exit 25 constant/2798 transmits/2799))
                                (let
                                  (transmits/2797 = 0
                                   constant/2796 = (field_imm 0 L/821))
                                  (exit 25 constant/2796 transmits/2797)))
                             with (25 constant/884 transmits/885[int])
                              (makemutable 0 (int,*,int,*,*,*,*) item/883
                                constant/884 transmits/885 0
                                (field_imm 2 (global Dune__exe__Mark!)) 0
                                (field_imm 0 L/821))))))))))
            *match*/2811 =
              (apply
                (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                (function prod/945 : int
                  (let
                    (*match*/2809 =
                       (apply
                         (field_imm 4
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         prod/945)
                     rhs/947 =a (field_imm 1 *match*/2809)
                     _nt/946 =a (field_imm 0 *match*/2809)
                     length/948 =[int] (array.length[addr] rhs/947))
                    (apply (field_imm 11 (global Stdlib__Array!))
                      (function pos/949[int] node/950 : int
                        (setfield_ptr 3 node/950
                          (if (< pos/949 length/948)
                            (let
                              (*match*/2804 =
                                 (array.get[addr] rhs/947 pos/949))
                              (switch* *match*/2804
                               case tag 0:
                                (let (nt/951 =a (field_imm 0 *match*/2804))
                                  (apply
                                    (field_imm 24
                                      (field_imm 8
                                        (global Dune__exe__Grammar!)))
                                    nt/951
                                    (function prod/952
                                      (apply item2node/873
                                        (apply
                                          (field_imm 0
                                            (global Dune__exe__Item!))
                                          (makeblock 0 (*,int) prod/952 0))))))
                               case tag 1:
                                (let
                                  (*match*/2805 =a (field_imm 0 *match*/2804))
                                  0)))
                            0)))
                      (array.get[addr] mapping/872
                        (apply
                          (field_imm 1
                            (field_imm 8 (global Dune__exe__Grammar!)))
                          prod/945))))))
            closure/953 =
              (function items/955
                (let
                  (this/956 =
                     (apply (field_imm 0 (global Dune__exe__Mark!)) 0)
                   nodes/957 = (makemutable 0 0))
                  (letrec
                    (visit/958
                       (function father/960 transmits/961[int] toks/962
                         node/963 : int
                         (if
                           (apply (field_imm 1 (global Dune__exe__Mark!))
                             (field_mut 4 node/963) this/956)
                           (seq
                             (setfield_ptr 6 node/963
                               (apply (field_imm 2 L/821) toks/962
                                 (field_mut 6 node/963)))
                             (if transmits/961
                               (setfield_ptr 5 node/963
                                 (makeblock 0 father/960
                                   (field_mut 5 node/963)))
                               0))
                           (seq
                             (setfield_ptr 5 node/963
                               (if transmits/961 (makeblock 0 father/960 0)
                                 0))
                             (setfield_ptr 6 node/963 toks/962)
                             (apply follow/959 node/963))))
                      follow/959
                        (function node/964 : int
                          (seq (setfield_ptr 4 node/964 this/956)
                            (setfield_ptr 0 nodes/957
                              (makeblock 0 node/964 (field_mut 0 nodes/957)))
                            (apply (field_imm 17 (global Stdlib__List!))
                              (apply visit/958 node/964
                                (field_int 2 node/964)
                                (field_imm 1 node/964))
                              (field_mut 3 node/964)))))
                    (seq
                      (apply
                        (field_imm 18
                          (field_imm 1 (global Dune__exe__Patricia!)))
                        (function item/1031[int] toks/1032 : int
                          (let (node/1033 = (apply item2node/873 item/1031))
                            (apply visit/958 node/1033 0 toks/1032 node/1033)))
                        items/955)
                      (let
                        (nodes/1034 = (field_mut 0 nodes/957)
                         this/1035 =
                           (apply (field_imm 0 (global Dune__exe__Mark!)) 0))
                        (letrec
                          (walk/1036
                             (function node/1037 : int
                               (if
                                 (not
                                   (apply
                                     (field_imm 1 (global Dune__exe__Mark!))
                                     (field_mut 4 node/1037) this/1035))
                                 (seq (setfield_ptr 4 node/1037 this/1035)
                                   (apply
                                     (field_imm 17 (global Stdlib__List!))
                                     (function predecessor/1038 : int
                                       (seq
                                         (apply walk/1036 predecessor/1038)
                                         (setfield_ptr 6 node/1037
                                           (apply (field_imm 2 L/821)
                                             (field_mut 6 predecessor/1038)
                                             (field_mut 6 node/1037)))))
                                     (field_mut 5 node/1037)))
                                 0)))
                          (seq
                            (apply (field_imm 17 (global Stdlib__List!))
                              walk/1036 nodes/1034)
                            (apply (field_imm 25 (global Stdlib__List!))
                              (function closure/1039 node/1040
                                (seq (setfield_ptr 5 node/1040 0)
                                  (let
                                    (closure/1041 =
                                       (apply
                                         (field_imm 3
                                           (field_imm 1
                                             (global Dune__exe__Patricia!)))
                                         (field_int 0 node/1040)
                                         (field_mut 6 node/1040)
                                         closure/1039))
                                    (seq
                                      (setfield_ptr 6 node/1040
                                        (field_imm 0 L/821))
                                      closure/1041))))
                              (field_imm 0
                                (field_imm 1 (global Dune__exe__Patricia!)))
                              nodes/1034)))))))))
           (makeblock 0 mapping/872 item2node/873 closure/953))))
    (seq
      (setfield_ptr(root-init) 10 (global Dune__exe__Item!)
        (function funarg/2816 is_a_functor stub
          (let (let/2817 = (apply Closure/1042 funarg/2816))
            (makeblock 0 (field_mut 2 let/2817)))))
      (setfield_ptr(root-init) 9 (global Dune__exe__Item!)
        (field_imm 1 (global Dune__exe__Patricia!)))
      (setfield_ptr(root-init) 8 (global Dune__exe__Item!)
        (field_imm 26 (field_imm 1 (global Dune__exe__Patricia!)))))))
(seq
  (let (low_bits/415 =[int] 10)
    (setfield_ptr(root-init) 11 (global Dune__exe__Item!) low_bits/415))
  (let
    (low_limit/416 =[int] (lsl 1 (field_imm 11 (global Dune__exe__Item!))))
    (setfield_ptr(root-init) 12 (global Dune__exe__Item!) low_limit/416))
  (let
    (export/417 =
       (function t/419[int]
         (makeblock 0 (*,int)
           (apply (field_imm 2 (field_imm 8 (global Dune__exe__Grammar!)))
             (lsr t/419 (field_imm 11 (global Dune__exe__Item!))))
           (mod t/419 (field_imm 12 (global Dune__exe__Item!))))))
    (setfield_ptr(root-init) 1 (global Dune__exe__Item!) export/417))
  (let
    (import/505 =
       (function (param/2747, param/2748[int]) : int
         (seq
           (if (< param/2748 (field_imm 12 (global Dune__exe__Item!))) 0
             (raise
               (makeblock 0 (global Assert_failure/28!)
                 [0: "src/item.ml" 53 2])))
           (+
             (lsl
               (apply
                 (field_imm 1 (field_imm 8 (global Dune__exe__Grammar!)))
                 param/2747)
               (field_imm 11 (global Dune__exe__Item!)))
             param/2748))))
    (setfield_ptr(root-init) 0 (global Dune__exe__Item!) import/505))
  (let (marshal/510 = (function item/512[int] : int item/512))
    (setfield_ptr(root-init) 2 (global Dune__exe__Item!) marshal/510))
  (let
    (*match*/2750 =
       (apply (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
         (function index/513 : int
           (let
             (length/514 =[int]
                (apply
                  (field_imm 7 (field_imm 8 (global Dune__exe__Grammar!)))
                  index/513))
             (if (<= (field_imm 12 (global Dune__exe__Item!)) length/514)
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (apply
                   (field_imm 10 (field_imm 8 (global Dune__exe__Grammar!)))
                   index/513)
                 [0:
                  [11:
                   "The length of this production is "
                   [4:
                    0 0 0
                    [11:
                     ", which exceeds the limit of " [4: 0 0 0 [12: '.' 0]]]]]
                  "The length of this production is %d, which exceeds the limit of %d."]
                 length/514 (- (field_imm 12 (global Dune__exe__Item!)) 1))
               0)))))
    0)
  (let
    (equal/588 =
       (function item1/590[int] item2/591[int] : int
         (== item1/590 item2/591)))
    (setfield_ptr(root-init) 3 (global Dune__exe__Item!) equal/588))
  (let
    (def/592 =
       (function t/594[int]
         (let
           (*match*/2758 =
              (apply (field_imm 1 (global Dune__exe__Item!)) t/594)
            pos/596 =a (field_imm 1 *match*/2758)
            prod/595 =a (field_imm 0 *match*/2758)
            *match*/2754 =
              (apply (field_imm 4 (field_imm 8 (global Dune__exe__Grammar!)))
                prod/595)
            rhs/598 =a (field_imm 1 *match*/2754)
            length/599 =[int] (array.length[addr] rhs/598))
           (seq
             (if (&& (>= pos/596 0) (<= pos/596 length/599)) 0
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/item.ml" 87 2])))
             (makeblock 0 (*,*,*,int,int) prod/595 (field_imm 0 *match*/2754)
               rhs/598 pos/596 length/599)))))
    (setfield_ptr(root-init) 4 (global Dune__exe__Item!) def/592))
  (let
    (startnt/648 =
       (function t/650[int]
         (let
           (*match*/2767 =
              (apply (field_imm 4 (global Dune__exe__Item!)) t/650))
           (seq
             (if
               (&& (== (field_imm 3 *match*/2767) 0)
                 (== (field_imm 4 *match*/2767) 1))
               0
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/item.ml" 92 2])))
             (let
               (*match*/2759 = (array.get[addr] (field_imm 2 *match*/2767) 0))
               (switch* *match*/2759
                case tag 0: (field_imm 0 *match*/2759)
                case tag 1:
                 (raise
                   (makeblock 0 (global Assert_failure/28!)
                     [0: "src/item.ml" 97 6]))))))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Item!) startnt/648))
  (let
    (print/707 =
       (function item/709[int]
         (let
           (*match*/2776 =
              (apply (field_imm 4 (global Dune__exe__Item!)) item/709))
           (apply (field_imm 3 (global Stdlib__Printf!))
             [0: [2: 0 [11: " -> " [2: 0 0]]] "%s -> %s"]
             (apply (field_imm 5 (field_imm 0 (global Dune__exe__Grammar!)))
               0 (field_imm 1 *match*/2776))
             (apply (field_imm 9 (field_imm 5 (global Dune__exe__Grammar!)))
               0 (field_imm 3 *match*/2776) (field_imm 2 *match*/2776))))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Item!) print/707))
  (let
    (classify/769 =
       (function item/771[int]
         (let
           (*match*/2785 =
              (apply (field_imm 4 (global Dune__exe__Item!)) item/771)
            pos/774 =a (field_imm 3 *match*/2785)
            prod/772 =a (field_imm 0 *match*/2785))
           (if (== pos/774 (field_imm 4 *match*/2785)) (makeblock 1 prod/772)
             (makeblock 0 (*,int)
               (array.get[addr] (field_imm 2 *match*/2785) pos/774)
               (apply (field_imm 0 (global Dune__exe__Item!))
                 (makeblock 0 (*,int) prod/772 (+ pos/774 1))))))))
    (setfield_ptr(root-init) 7 (global Dune__exe__Item!) classify/769))
  (let
    (Closure/1042 =
       (function L/2815 is_a_functor
         (let
           (mapping/872 =
              (caml_make_vect
                (field_imm 3 (field_imm 8 (global Dune__exe__Grammar!)))
                (makearray[addr]))
            item2node/873 =
              (function item/875[int]
                (let
                  (*match*/2790 =
                     (apply (field_imm 1 (global Dune__exe__Item!)) item/875))
                  (array.get[addr]
                    (array.get[addr] mapping/872
                      (apply
                        (field_imm 1
                          (field_imm 8 (global Dune__exe__Grammar!)))
                        (field_imm 0 *match*/2790)))
                    (field_imm 1 *match*/2790))))
            *match*/2813 =
              (apply
                (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                (function prod/878 : int
                  (let
                    (*match*/2803 =
                       (apply
                         (field_imm 4
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         prod/878)
                     length/881 =[int]
                       (array.length[addr] (field_imm 1 *match*/2803)))
                    (array.set[addr] mapping/872
                      (apply
                        (field_imm 1
                          (field_imm 8 (global Dune__exe__Grammar!)))
                        prod/878)
                      (apply (field_imm 0 (global Stdlib__Array!))
                        (+ length/881 1)
                        (function pos/882[int]
                          (let
                            (item/883 =[int]
                               (apply (field_imm 0 (global Dune__exe__Item!))
                                 (makeblock 0 (*,int) prod/878 pos/882)))
                            (catch
                              (if (< pos/882 length/881)
                                (let
                                  (*match*/2795 =
                                     (apply
                                       (field_imm 4
                                         (field_imm 11
                                           (global Dune__exe__Grammar!)))
                                       prod/878 (+ pos/882 1))
                                   constant/2798 =
                                     (apply (field_imm 1 L/2815)
                                       (field_imm 1 *match*/2795)))
                                  (exit 25 constant/2798
                                    (field_imm 0 *match*/2795)))
                                (let
                                  (transmits/2797 = 0
                                   constant/2796 = (field_imm 0 L/2815))
                                  (exit 25 constant/2796 transmits/2797)))
                             with (25 constant/884 transmits/885[int])
                              (makemutable 0 (int,*,int,*,*,*,*) item/883
                                constant/884 transmits/885 0
                                (field_imm 2 (global Dune__exe__Mark!)) 0
                                (field_imm 0 L/2815))))))))))
            *match*/2811 =
              (apply
                (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                (function prod/945 : int
                  (let
                    (*match*/2809 =
                       (apply
                         (field_imm 4
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         prod/945)
                     rhs/947 =a (field_imm 1 *match*/2809)
                     length/948 =[int] (array.length[addr] rhs/947))
                    (apply (field_imm 11 (global Stdlib__Array!))
                      (function pos/949[int] node/950 : int
                        (setfield_ptr 3 node/950
                          (if (< pos/949 length/948)
                            (let
                              (*match*/2804 =
                                 (array.get[addr] rhs/947 pos/949))
                              (switch* *match*/2804
                               case tag 0:
                                (apply
                                  (field_imm 24
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  (field_imm 0 *match*/2804)
                                  (function prod/952
                                    (apply item2node/873
                                      (apply
                                        (field_imm 0
                                          (global Dune__exe__Item!))
                                        (makeblock 0 (*,int) prod/952 0)))))
                               case tag 1: 0))
                            0)))
                      (array.get[addr] mapping/872
                        (apply
                          (field_imm 1
                            (field_imm 8 (global Dune__exe__Grammar!)))
                          prod/945))))))
            closure/953 =
              (function items/955
                (let
                  (this/956 =
                     (apply (field_imm 0 (global Dune__exe__Mark!)) 0)
                   nodes/957 = (makemutable 0 0))
                  (letrec
                    (visit/958
                       (function father/960 transmits/961[int] toks/962
                         node/963 : int
                         (if
                           (apply (field_imm 1 (global Dune__exe__Mark!))
                             (field_mut 4 node/963) this/956)
                           (seq
                             (setfield_ptr 6 node/963
                               (apply (field_imm 2 L/2815) toks/962
                                 (field_mut 6 node/963)))
                             (if transmits/961
                               (setfield_ptr 5 node/963
                                 (makeblock 0 father/960
                                   (field_mut 5 node/963)))
                               0))
                           (seq
                             (setfield_ptr 5 node/963
                               (if transmits/961 (makeblock 0 father/960 0)
                                 0))
                             (setfield_ptr 6 node/963 toks/962)
                             (apply follow/959 node/963))))
                      follow/959
                        (function node/964 : int
                          (seq (setfield_ptr 4 node/964 this/956)
                            (setfield_ptr 0 nodes/957
                              (makeblock 0 node/964 (field_mut 0 nodes/957)))
                            (apply (field_imm 17 (global Stdlib__List!))
                              (apply visit/958 node/964
                                (field_int 2 node/964)
                                (field_imm 1 node/964))
                              (field_mut 3 node/964)))))
                    (seq
                      (apply
                        (field_imm 18
                          (field_imm 1 (global Dune__exe__Patricia!)))
                        (function item/1031[int] toks/1032 : int
                          (let (node/1033 = (apply item2node/873 item/1031))
                            (apply visit/958 node/1033 0 toks/1032 node/1033)))
                        items/955)
                      (let
                        (nodes/1034 = (field_mut 0 nodes/957)
                         this/1035 =
                           (apply (field_imm 0 (global Dune__exe__Mark!)) 0))
                        (letrec
                          (walk/1036
                             (function node/1037 : int
                               (if
                                 (not
                                   (apply
                                     (field_imm 1 (global Dune__exe__Mark!))
                                     (field_mut 4 node/1037) this/1035))
                                 (seq (setfield_ptr 4 node/1037 this/1035)
                                   (apply
                                     (field_imm 17 (global Stdlib__List!))
                                     (function predecessor/1038 : int
                                       (seq
                                         (apply walk/1036 predecessor/1038)
                                         (setfield_ptr 6 node/1037
                                           (apply (field_imm 2 L/2815)
                                             (field_mut 6 predecessor/1038)
                                             (field_mut 6 node/1037)))))
                                     (field_mut 5 node/1037)))
                                 0)))
                          (seq
                            (apply (field_imm 17 (global Stdlib__List!))
                              walk/1036 nodes/1034)
                            (apply (field_imm 25 (global Stdlib__List!))
                              (function closure/1039 node/1040
                                (seq (setfield_ptr 5 node/1040 0)
                                  (let
                                    (closure/1041 =
                                       (apply
                                         (field_imm 3
                                           (field_imm 1
                                             (global Dune__exe__Patricia!)))
                                         (field_int 0 node/1040)
                                         (field_mut 6 node/1040)
                                         closure/1039))
                                    (seq
                                      (setfield_ptr 6 node/1040
                                        (field_imm 0 L/2815))
                                      closure/1041))))
                              (field_imm 0
                                (field_imm 1 (global Dune__exe__Patricia!)))
                              nodes/1034)))))))))
           (makeblock 0 mapping/872 item2node/873 closure/953))))
    (seq
      (setfield_ptr(root-init) 10 (global Dune__exe__Item!)
        (function funarg/2816 is_a_functor stub
          (let (let/2817 = (apply Closure/1042 funarg/2816))
            (makeblock 0 (field_mut 2 let/2817)))))
      (setfield_ptr(root-init) 9 (global Dune__exe__Item!)
        (field_imm 1 (global Dune__exe__Patricia!)))
      (setfield_ptr(root-init) 8 (global Dune__exe__Item!)
        (field_imm 26 (field_imm 1 (global Dune__exe__Patricia!)))))))

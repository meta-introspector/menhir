[
  structure_item (src/segment.mll[27,47+2]..[29,74+16])
    Pstr_type Rec
    [
      type_declaration "tag" (src/segment.mll[27,47+7]..[27,47+10]) (src/segment.mll[27,47+2]..[29,74+16])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/segment.mll[28,60+4]..[28,60+13])
                "Segment" (src/segment.mll[28,60+6]..[28,60+13])
                []
                None
              (src/segment.mll[29,74+4]..[29,74+16])
                "Whitespace" (src/segment.mll[29,74+6]..[29,74+16])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/segment.mll[31,92+2]..[31,92+13])
    Pstr_open Fresh
    module_expr (src/segment.mll[31,92+7]..[31,92+13])
      Pmod_ident "Lexing" (src/segment.mll[31,92+7]..[31,92+13])
  structure_item (src/segment.ml[12,130+0]..[107,5583+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/segment.ml[12,130+4]..[12,130+22])
          Ppat_var "__ocaml_lex_tables" (src/segment.ml[12,130+4]..[12,130+22])
        expression (src/segment.ml[12,130+25]..[107,5583+1])
          Pexp_record
          [
            "Lexing.lex_base" (src/segment.ml[13,157+2]..[13,157+17])
              expression (src/segment.ml[14,177+3]..[16,317+5])
                Pexp_constant PConst_string("\000\000\251\255\252\255\001\000\002\000\254\255\255\255\005\000\253\255\006\000\b\000\252\255\253\255\n\000\254\255\255\255",(src/segment.ml[14,177+4]..[16,317+4]),None)
            "Lexing.lex_backtrk" (src/segment.ml[17,324+2]..[17,324+20])
              expression (src/segment.ml[18,347+3]..[20,487+5])
                Pexp_constant PConst_string("\255\255\255\255\255\255\004\000\001\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255",(src/segment.ml[18,347+4]..[20,487+4]),None)
            "Lexing.lex_default" (src/segment.ml[21,494+2]..[21,494+20])
              expression (src/segment.ml[22,517+3]..[24,657+5])
                Pexp_constant PConst_string("\001\000\000\000\000\000\t\000\255\255\000\000\000\000\255\255\000\000\t\000\011\000\000\000\000\000\255\255\000\000\000\000",(src/segment.ml[22,517+4]..[24,657+4]),None)
            "Lexing.lex_trans" (src/segment.ml[25,664+2]..[25,664+18])
              expression (src/segment.ml[26,685+3]..[59,2995+29])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\005\000\b\000\005\000\004\000\007\000\b\000\b\000\015\000\014\000\007\000\014\000\rsrc/segment.ml[26,685+4]..[59,2995+28]),None)
            "Lexing.lex_check" (src/segment.ml[60,3026+2]..[60,3026+18])
              expression (src/segment.ml[61,3047+3]..[94,5357+29])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\003\000\004\000\000\000\003\000\007\000\t\000\n\000\n\000\t\000\r\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\nt\000\255\255\n\000\255\255\255\255",(src/segment.ml[61,3047+4]..[94,5357+28]),None)
            "Lexing.lex_base_code" (src/segment.ml[95,5388+2]..[95,5388+22])
              expression (src/segment.ml[96,5413+3]..[96,5413+5])
                Pexp_constant PConst_string("",(src/segment.ml[96,5413+4]..[96,5413+4]),None)
            "Lexing.lex_backtrk_code" (src/segment.ml[97,5420+2]..[97,5420+25])
              expression (src/segment.ml[98,5448+3]..[98,5448+5])
                Pexp_constant PConst_string("",(src/segment.ml[98,5448+4]..[98,5448+4]),None)
            "Lexing.lex_default_code" (src/segment.ml[99,5455+2]..[99,5455+25])
              expression (src/segment.ml[100,5483+3]..[100,5483+5])
                Pexp_constant PConst_string("",(src/segment.ml[100,5483+4]..[100,5483+4]),None)
            "Lexing.lex_trans_code" (src/segment.ml[101,5490+2]..[101,5490+23])
              expression (src/segment.ml[102,5516+3]..[102,5516+5])
                Pexp_constant PConst_string("",(src/segment.ml[102,5516+4]..[102,5516+4]),None)
            "Lexing.lex_check_code" (src/segment.ml[103,5523+2]..[103,5523+23])
              expression (src/segment.ml[104,5549+3]..[104,5549+5])
                Pexp_constant PConst_string("",(src/segment.ml[104,5549+4]..[104,5549+4]),None)
            "Lexing.lex_code" (src/segment.ml[105,5556+2]..[105,5556+17])
              expression (src/segment.ml[106,5576+3]..[106,5576+5])
                Pexp_constant PConst_string("",(src/segment.ml[106,5576+4]..[106,5576+4]),None)
          ]
          None
    ]
  structure_item (src/segment.ml[109,5586+0]..[186,8011+87])
    Pstr_value Rec
    [
      <def>
        pattern (src/segment.ml[109,5586+8]..[109,5586+12])
          Ppat_var "idle" (src/segment.ml[109,5586+8]..[109,5586+12])
        expression (src/segment.ml[109,5586+13]..[110,5625+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/segment.ml[109,5586+13]..[109,5586+20])
            Ppat_var "opening" (src/segment.ml[109,5586+13]..[109,5586+20])
          expression (src/segment.ml[109,5586+21]..[110,5625+49]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/segment.ml[109,5586+21]..[109,5586+29])
              Ppat_var "segments" (src/segment.ml[109,5586+21]..[109,5586+29])
            expression (src/segment.ml[109,5586+30]..[110,5625+49]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/segment.ml[109,5586+30]..[109,5586+36])
                Ppat_var "lexbuf" (src/segment.ml[109,5586+30]..[109,5586+36])
              expression (src/segment.ml[110,5625+3]..[110,5625+49])
                Pexp_apply
                expression (src/segment.ml[110,5625+3]..[110,5625+23])
                  Pexp_ident "__ocaml_lex_idle_rec" (src/segment.ml[110,5625+3]..[110,5625+23])
                [
                  <arg>
                  Nolabel
                    expression (src/segment.ml[110,5625+24]..[110,5625+31])
                      Pexp_ident "opening" (src/segment.ml[110,5625+24]..[110,5625+31])
                  <arg>
                  Nolabel
                    expression (src/segment.ml[110,5625+32]..[110,5625+40])
                      Pexp_ident "segments" (src/segment.ml[110,5625+32]..[110,5625+40])
                  <arg>
                  Nolabel
                    expression (src/segment.ml[110,5625+41]..[110,5625+47])
                      Pexp_ident "lexbuf" (src/segment.ml[110,5625+41]..[110,5625+47])
                  <arg>
                  Nolabel
                    expression (src/segment.ml[110,5625+48]..[110,5625+49])
                      Pexp_constant PConst_int (0,None)
                ]
      <def>
        pattern (src/segment.ml[111,5675+4]..[111,5675+24])
          Ppat_var "__ocaml_lex_idle_rec" (src/segment.ml[111,5675+4]..[111,5675+24])
        expression (src/segment.ml[111,5675+25]..[146,6679+68]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/segment.ml[111,5675+25]..[111,5675+32])
            Ppat_var "opening" (src/segment.ml[111,5675+25]..[111,5675+32])
          expression (src/segment.ml[111,5675+33]..[146,6679+68]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/segment.ml[111,5675+33]..[111,5675+41])
              Ppat_var "segments" (src/segment.ml[111,5675+33]..[111,5675+41])
            expression (src/segment.ml[111,5675+42]..[146,6679+68]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/segment.ml[111,5675+42]..[111,5675+48])
                Ppat_var "lexbuf" (src/segment.ml[111,5675+42]..[111,5675+48])
              expression (src/segment.ml[111,5675+49]..[146,6679+68]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/segment.ml[111,5675+49]..[111,5675+66])
                  Ppat_var "__ocaml_lex_state" (src/segment.ml[111,5675+49]..[111,5675+66])
                expression (src/segment.ml[112,5744+2]..[146,6679+68])
                  Pexp_match
                  expression (src/segment.ml[112,5744+8]..[112,5744+65])
                    Pexp_apply
                    expression (src/segment.ml[112,5744+8]..[112,5744+21])
                      Pexp_ident "Lexing.engine" (src/segment.ml[112,5744+8]..[112,5744+21])
                    [
                      <arg>
                      Nolabel
                        expression (src/segment.ml[112,5744+22]..[112,5744+40])
                          Pexp_ident "__ocaml_lex_tables" (src/segment.ml[112,5744+22]..[112,5744+40])
                      <arg>
                      Nolabel
                        expression (src/segment.ml[112,5744+41]..[112,5744+58])
                          Pexp_ident "__ocaml_lex_state" (src/segment.ml[112,5744+41]..[112,5744+58])
                      <arg>
                      Nolabel
                        expression (src/segment.ml[112,5744+59]..[112,5744+65])
                          Pexp_ident "lexbuf" (src/segment.ml[112,5744+59]..[112,5744+65])
                    ]
                  [
                    <case>
                      pattern (src/segment.ml[113,5815+8]..[113,5815+9])
                        Ppat_constant PConst_int (0,None)
                      expression (src/segment.mll[49,5851+4]..[49,5851+36])
                        Pexp_apply
                        expression (src/segment.mll[49,5851+6]..[49,5851+10])
                          Pexp_ident "idle" (src/segment.mll[49,5851+6]..[49,5851+10])
                        [
                          <arg>
                          Nolabel
                            expression (src/segment.mll[49,5851+11]..[49,5851+18])
                              Pexp_ident "opening" (src/segment.mll[49,5851+11]..[49,5851+18])
                          <arg>
                          Nolabel
                            expression (src/segment.mll[49,5851+19]..[49,5851+27])
                              Pexp_ident "segments" (src/segment.mll[49,5851+19]..[49,5851+27])
                          <arg>
                          Nolabel
                            expression (src/segment.mll[49,5851+28]..[49,5851+34])
                              Pexp_ident "lexbuf" (src/segment.mll[49,5851+28]..[49,5851+34])
                        ]
                    <case>
                      pattern (src/segment.ml[118,5912+4]..[118,5912+5])
                        Ppat_constant PConst_int (1,None)
                      expression (src/segment.mll[51,5944+4]..[51,5944+53])
                        Pexp_sequence
                        expression (src/segment.mll[51,5944+6]..[51,5944+21])
                          Pexp_apply
                          expression (src/segment.mll[51,5944+6]..[51,5944+14])
                            Pexp_ident "new_line" (src/segment.mll[51,5944+6]..[51,5944+14])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[51,5944+15]..[51,5944+21])
                                Pexp_ident "lexbuf" (src/segment.mll[51,5944+15]..[51,5944+21])
                          ]
                        expression (src/segment.mll[51,5944+23]..[51,5944+51])
                          Pexp_apply
                          expression (src/segment.mll[51,5944+23]..[51,5944+27])
                            Pexp_ident "idle" (src/segment.mll[51,5944+23]..[51,5944+27])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[51,5944+28]..[51,5944+35])
                                Pexp_ident "opening" (src/segment.mll[51,5944+28]..[51,5944+35])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[51,5944+36]..[51,5944+44])
                                Pexp_ident "segments" (src/segment.mll[51,5944+36]..[51,5944+44])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[51,5944+45]..[51,5944+51])
                                Pexp_ident "lexbuf" (src/segment.mll[51,5944+45]..[51,5944+51])
                          ]
                    <case>
                      pattern (src/segment.ml[123,6022+4]..[123,6022+5])
                        Ppat_constant PConst_int (2,None)
                      expression (src/segment.mll[53,6054+4]..[53,6054+53])
                        Pexp_sequence
                        expression (src/segment.mll[53,6054+6]..[53,6054+21])
                          Pexp_apply
                          expression (src/segment.mll[53,6054+6]..[53,6054+14])
                            Pexp_ident "new_line" (src/segment.mll[53,6054+6]..[53,6054+14])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[53,6054+15]..[53,6054+21])
                                Pexp_ident "lexbuf" (src/segment.mll[53,6054+15]..[53,6054+21])
                          ]
                        expression (src/segment.mll[53,6054+23]..[53,6054+51])
                          Pexp_apply
                          expression (src/segment.mll[53,6054+23]..[53,6054+27])
                            Pexp_ident "idle" (src/segment.mll[53,6054+23]..[53,6054+27])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[53,6054+28]..[53,6054+35])
                                Pexp_ident "opening" (src/segment.mll[53,6054+28]..[53,6054+35])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[53,6054+36]..[53,6054+44])
                                Pexp_ident "segments" (src/segment.mll[53,6054+36]..[53,6054+44])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[53,6054+45]..[53,6054+51])
                                Pexp_ident "lexbuf" (src/segment.mll[53,6054+45]..[53,6054+51])
                          ]
                    <case>
                      pattern (src/segment.ml[128,6132+4]..[128,6132+5])
                        Ppat_constant PConst_int (3,None)
                      expression (src/segment.mll[55,6164+4]..[58,6302+25])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/segment.mll[55,6164+10]..[55,6164+17])
                              Ppat_var "closing" (src/segment.mll[55,6164+10]..[55,6164+17])
                            expression (src/segment.mll[55,6164+20]..[55,6164+38])
                              Pexp_field
                              expression (src/segment.mll[55,6164+20]..[55,6164+26])
                                Pexp_ident "lexbuf" (src/segment.mll[55,6164+20]..[55,6164+26])
                              "lex_start_p" (src/segment.mll[55,6164+27]..[55,6164+38])
                        ]
                        expression (src/segment.mll[56,6206+6]..[58,6302+23])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/segment.mll[56,6206+10]..[56,6206+17])
                                Ppat_var "segment" (src/segment.mll[56,6206+10]..[56,6206+17])
                              expression (src/segment.mll[56,6206+20]..[56,6206+48])
                                Pexp_tuple
                                [
                                  expression (src/segment.mll[56,6206+20]..[56,6206+30])
                                    Pexp_construct "Whitespace" (src/segment.mll[56,6206+20]..[56,6206+30])
                                    None
                                  expression (src/segment.mll[56,6206+32]..[56,6206+39])
                                    Pexp_ident "opening" (src/segment.mll[56,6206+32]..[56,6206+39])
                                  expression (src/segment.mll[56,6206+41]..[56,6206+48])
                                    Pexp_ident "closing" (src/segment.mll[56,6206+41]..[56,6206+48])
                                ]
                          ]
                          expression (src/segment.mll[57,6258+6]..[58,6302+23])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/segment.mll[57,6258+10]..[57,6258+18])
                                  Ppat_var "segments" (src/segment.mll[57,6258+10]..[57,6258+18])
                                expression (src/segment.mll[57,6258+21]..[57,6258+40])
                                  Pexp_construct "::" (src/segment.mll[57,6258+29]..[57,6258+31])
                                  Some
                                    expression (src/segment.mll[57,6258+21]..[57,6258+40]) ghost
                                      Pexp_tuple
                                      [
                                        expression (src/segment.mll[57,6258+21]..[57,6258+28])
                                          Pexp_ident "segment" (src/segment.mll[57,6258+21]..[57,6258+28])
                                        expression (src/segment.mll[57,6258+32]..[57,6258+40])
                                          Pexp_ident "segments" (src/segment.mll[57,6258+32]..[57,6258+40])
                                      ]
                            ]
                            expression (src/segment.mll[58,6302+6]..[58,6302+23])
                              Pexp_apply
                              expression (src/segment.mll[58,6302+6]..[58,6302+14])
                                Pexp_ident "List.rev" (src/segment.mll[58,6302+6]..[58,6302+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/segment.mll[58,6302+15]..[58,6302+23])
                                    Pexp_ident "segments" (src/segment.mll[58,6302+15]..[58,6302+23])
                              ]
                    <case>
                      pattern (src/segment.ml[136,6352+4]..[136,6352+5])
                        Ppat_constant PConst_int (4,None)
                      expression (src/segment.mll[60,6384+4]..[64,6553+42])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/segment.mll[60,6384+10]..[60,6384+17])
                              Ppat_var "closing" (src/segment.mll[60,6384+10]..[60,6384+17])
                            expression (src/segment.mll[60,6384+20]..[60,6384+38])
                              Pexp_field
                              expression (src/segment.mll[60,6384+20]..[60,6384+26])
                                Pexp_ident "lexbuf" (src/segment.mll[60,6384+20]..[60,6384+26])
                              "lex_start_p" (src/segment.mll[60,6384+27]..[60,6384+38])
                        ]
                        expression (src/segment.mll[61,6426+6]..[64,6553+40])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/segment.mll[61,6426+10]..[61,6426+17])
                                Ppat_var "segment" (src/segment.mll[61,6426+10]..[61,6426+17])
                              expression (src/segment.mll[61,6426+20]..[61,6426+48])
                                Pexp_tuple
                                [
                                  expression (src/segment.mll[61,6426+20]..[61,6426+30])
                                    Pexp_construct "Whitespace" (src/segment.mll[61,6426+20]..[61,6426+30])
                                    None
                                  expression (src/segment.mll[61,6426+32]..[61,6426+39])
                                    Pexp_ident "opening" (src/segment.mll[61,6426+32]..[61,6426+39])
                                  expression (src/segment.mll[61,6426+41]..[61,6426+48])
                                    Pexp_ident "closing" (src/segment.mll[61,6426+41]..[61,6426+48])
                                ]
                          ]
                          expression (src/segment.mll[62,6478+6]..[64,6553+40])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/segment.mll[62,6478+10]..[62,6478+18])
                                  Ppat_var "segments" (src/segment.mll[62,6478+10]..[62,6478+18])
                                expression (src/segment.mll[62,6478+21]..[62,6478+40])
                                  Pexp_construct "::" (src/segment.mll[62,6478+29]..[62,6478+31])
                                  Some
                                    expression (src/segment.mll[62,6478+21]..[62,6478+40]) ghost
                                      Pexp_tuple
                                      [
                                        expression (src/segment.mll[62,6478+21]..[62,6478+28])
                                          Pexp_ident "segment" (src/segment.mll[62,6478+21]..[62,6478+28])
                                        expression (src/segment.mll[62,6478+32]..[62,6478+40])
                                          Pexp_ident "segments" (src/segment.mll[62,6478+32]..[62,6478+40])
                                      ]
                            ]
                            expression (src/segment.mll[63,6522+6]..[64,6553+40])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/segment.mll[63,6522+10]..[63,6522+17])
                                    Ppat_var "opening" (src/segment.mll[63,6522+10]..[63,6522+17])
                                  expression (src/segment.mll[63,6522+20]..[63,6522+27])
                                    Pexp_ident "closing" (src/segment.mll[63,6522+20]..[63,6522+27])
                              ]
                              expression (src/segment.mll[64,6553+6]..[64,6553+40])
                                Pexp_apply
                                expression (src/segment.mll[64,6553+6]..[64,6553+10])
                                  Pexp_ident "busy" (src/segment.mll[64,6553+6]..[64,6553+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/segment.mll[64,6553+11]..[64,6553+19])
                                      Pexp_ident "segments" (src/segment.mll[64,6553+11]..[64,6553+19])
                                  <arg>
                                  Nolabel
                                    expression (src/segment.mll[64,6553+20]..[64,6553+27])
                                      Pexp_ident "opening" (src/segment.mll[64,6553+20]..[64,6553+27])
                                  <arg>
                                  Nolabel
                                    expression (src/segment.mll[64,6553+28]..[64,6553+33])
                                      Pexp_construct "false" (src/segment.mll[64,6553+28]..[64,6553+33])
                                      None
                                  <arg>
                                  Nolabel
                                    expression (src/segment.mll[64,6553+34]..[64,6553+40])
                                      Pexp_ident "lexbuf" (src/segment.mll[64,6553+34]..[64,6553+40])
                                ]
                    <case>
                      pattern (src/segment.ml[145,6620+4]..[145,6620+21])
                        Ppat_var "__ocaml_lex_state" (src/segment.ml[145,6620+4]..[145,6620+21])
                      expression (src/segment.ml[145,6620+25]..[146,6679+68])
                        Pexp_sequence
                        expression (src/segment.ml[145,6620+25]..[145,6620+57])
                          Pexp_apply
                          expression (src/segment.ml[145,6620+25]..[145,6620+50])
                            Pexp_field
                            expression (src/segment.ml[145,6620+25]..[145,6620+31])
                              Pexp_ident "lexbuf" (src/segment.ml[145,6620+25]..[145,6620+31])
                            "Lexing.refill_buff" (src/segment.ml[145,6620+32]..[145,6620+50])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.ml[145,6620+51]..[145,6620+57])
                                Pexp_ident "lexbuf" (src/segment.ml[145,6620+51]..[145,6620+57])
                          ]
                        expression (src/segment.ml[146,6679+6]..[146,6679+68])
                          Pexp_apply
                          expression (src/segment.ml[146,6679+6]..[146,6679+26])
                            Pexp_ident "__ocaml_lex_idle_rec" (src/segment.ml[146,6679+6]..[146,6679+26])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.ml[146,6679+27]..[146,6679+34])
                                Pexp_ident "opening" (src/segment.ml[146,6679+27]..[146,6679+34])
                            <arg>
                            Nolabel
                              expression (src/segment.ml[146,6679+35]..[146,6679+43])
                                Pexp_ident "segments" (src/segment.ml[146,6679+35]..[146,6679+43])
                            <arg>
                            Nolabel
                              expression (src/segment.ml[146,6679+44]..[146,6679+50])
                                Pexp_ident "lexbuf" (src/segment.ml[146,6679+44]..[146,6679+50])
                            <arg>
                            Nolabel
                              expression (src/segment.ml[146,6679+51]..[146,6679+68])
                                Pexp_ident "__ocaml_lex_state" (src/segment.ml[146,6679+51]..[146,6679+68])
                          ]
                  ]
      <def>
        pattern (src/segment.ml[148,6749+4]..[148,6749+8])
          Ppat_var "busy" (src/segment.ml[148,6749+4]..[148,6749+8])
        expression (src/segment.ml[148,6749+9]..[149,6803+69]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/segment.ml[148,6749+9]..[148,6749+17])
            Ppat_var "segments" (src/segment.ml[148,6749+9]..[148,6749+17])
          expression (src/segment.ml[148,6749+18]..[149,6803+69]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/segment.ml[148,6749+18]..[148,6749+25])
              Ppat_var "opening" (src/segment.ml[148,6749+18]..[148,6749+25])
            expression (src/segment.ml[148,6749+26]..[149,6803+69]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/segment.ml[148,6749+26]..[148,6749+44])
                Ppat_var "just_saw_a_newline" (src/segment.ml[148,6749+26]..[148,6749+44])
              expression (src/segment.ml[148,6749+45]..[149,6803+69]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/segment.ml[148,6749+45]..[148,6749+51])
                  Ppat_var "lexbuf" (src/segment.ml[148,6749+45]..[148,6749+51])
                expression (src/segment.ml[149,6803+3]..[149,6803+69])
                  Pexp_apply
                  expression (src/segment.ml[149,6803+3]..[149,6803+23])
                    Pexp_ident "__ocaml_lex_busy_rec" (src/segment.ml[149,6803+3]..[149,6803+23])
                  [
                    <arg>
                    Nolabel
                      expression (src/segment.ml[149,6803+24]..[149,6803+32])
                        Pexp_ident "segments" (src/segment.ml[149,6803+24]..[149,6803+32])
                    <arg>
                    Nolabel
                      expression (src/segment.ml[149,6803+33]..[149,6803+40])
                        Pexp_ident "opening" (src/segment.ml[149,6803+33]..[149,6803+40])
                    <arg>
                    Nolabel
                      expression (src/segment.ml[149,6803+41]..[149,6803+59])
                        Pexp_ident "just_saw_a_newline" (src/segment.ml[149,6803+41]..[149,6803+59])
                    <arg>
                    Nolabel
                      expression (src/segment.ml[149,6803+60]..[149,6803+66])
                        Pexp_ident "lexbuf" (src/segment.ml[149,6803+60]..[149,6803+66])
                    <arg>
                    Nolabel
                      expression (src/segment.ml[149,6803+67]..[149,6803+69])
                        Pexp_constant PConst_int (10,None)
                  ]
      <def>
        pattern (src/segment.ml[150,6873+4]..[150,6873+24])
          Ppat_var "__ocaml_lex_busy_rec" (src/segment.ml[150,6873+4]..[150,6873+24])
        expression (src/segment.ml[150,6873+25]..[186,8011+87]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/segment.ml[150,6873+25]..[150,6873+33])
            Ppat_var "segments" (src/segment.ml[150,6873+25]..[150,6873+33])
          expression (src/segment.ml[150,6873+34]..[186,8011+87]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/segment.ml[150,6873+34]..[150,6873+41])
              Ppat_var "opening" (src/segment.ml[150,6873+34]..[150,6873+41])
            expression (src/segment.ml[150,6873+42]..[186,8011+87]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/segment.ml[150,6873+42]..[150,6873+60])
                Ppat_var "just_saw_a_newline" (src/segment.ml[150,6873+42]..[150,6873+60])
              expression (src/segment.ml[150,6873+61]..[186,8011+87]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/segment.ml[150,6873+61]..[150,6873+67])
                  Ppat_var "lexbuf" (src/segment.ml[150,6873+61]..[150,6873+67])
                expression (src/segment.ml[150,6873+68]..[186,8011+87]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/segment.ml[150,6873+68]..[150,6873+85])
                    Ppat_var "__ocaml_lex_state" (src/segment.ml[150,6873+68]..[150,6873+85])
                  expression (src/segment.ml[151,6961+2]..[186,8011+87])
                    Pexp_match
                    expression (src/segment.ml[151,6961+8]..[151,6961+65])
                      Pexp_apply
                      expression (src/segment.ml[151,6961+8]..[151,6961+21])
                        Pexp_ident "Lexing.engine" (src/segment.ml[151,6961+8]..[151,6961+21])
                      [
                        <arg>
                        Nolabel
                          expression (src/segment.ml[151,6961+22]..[151,6961+40])
                            Pexp_ident "__ocaml_lex_tables" (src/segment.ml[151,6961+22]..[151,6961+40])
                        <arg>
                        Nolabel
                          expression (src/segment.ml[151,6961+41]..[151,6961+58])
                            Pexp_ident "__ocaml_lex_state" (src/segment.ml[151,6961+41]..[151,6961+58])
                        <arg>
                        Nolabel
                          expression (src/segment.ml[151,6961+59]..[151,6961+65])
                            Pexp_ident "lexbuf" (src/segment.ml[151,6961+59]..[151,6961+65])
                      ]
                    [
                      <case>
                        pattern (src/segment.ml[152,7032+8]..[152,7032+9])
                          Ppat_constant PConst_int (0,None)
                        expression (src/segment.mll[75,7068+4]..[75,7068+55])
                          Pexp_apply
                          expression (src/segment.mll[75,7068+6]..[75,7068+10])
                            Pexp_ident "busy" (src/segment.mll[75,7068+6]..[75,7068+10])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[75,7068+11]..[75,7068+19])
                                Pexp_ident "segments" (src/segment.mll[75,7068+11]..[75,7068+19])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[75,7068+20]..[75,7068+27])
                                Pexp_ident "opening" (src/segment.mll[75,7068+20]..[75,7068+27])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[75,7068+28]..[75,7068+46])
                                Pexp_ident "just_saw_a_newline" (src/segment.mll[75,7068+28]..[75,7068+46])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[75,7068+47]..[75,7068+53])
                                Pexp_ident "lexbuf" (src/segment.mll[75,7068+47]..[75,7068+53])
                          ]
                      <case>
                        pattern (src/segment.ml[157,7148+4]..[157,7148+5])
                          Ppat_constant PConst_int (1,None)
                        expression (src/segment.mll[77,7180+4]..[87,7568+43])
                          Pexp_sequence
                          expression (src/segment.mll[77,7180+6]..[77,7180+21])
                            Pexp_apply
                            expression (src/segment.mll[77,7180+6]..[77,7180+14])
                              Pexp_ident "new_line" (src/segment.mll[77,7180+6]..[77,7180+14])
                            [
                              <arg>
                              Nolabel
                                expression (src/segment.mll[77,7180+15]..[77,7180+21])
                                  Pexp_ident "lexbuf" (src/segment.mll[77,7180+15]..[77,7180+21])
                            ]
                          expression (src/segment.mll[80,7315+6]..[87,7568+41])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/segment.mll[80,7315+10]..[80,7315+17])
                                  Ppat_var "closing" (src/segment.mll[80,7315+10]..[80,7315+17])
                                expression (src/segment.mll[80,7315+20]..[80,7315+38])
                                  Pexp_field
                                  expression (src/segment.mll[80,7315+20]..[80,7315+26])
                                    Pexp_ident "lexbuf" (src/segment.mll[80,7315+20]..[80,7315+26])
                                  "lex_start_p" (src/segment.mll[80,7315+27]..[80,7315+38])
                            ]
                            expression (src/segment.mll[81,7357+6]..[87,7568+41])
                              Pexp_ifthenelse
                              expression (src/segment.mll[81,7357+9]..[81,7357+27])
                                Pexp_ident "just_saw_a_newline" (src/segment.mll[81,7357+9]..[81,7357+27])
                              expression (src/segment.mll[82,7390+8]..[85,7520+36])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/segment.mll[82,7390+12]..[82,7390+19])
                                      Ppat_var "segment" (src/segment.mll[82,7390+12]..[82,7390+19])
                                    expression (src/segment.mll[82,7390+22]..[82,7390+47])
                                      Pexp_tuple
                                      [
                                        expression (src/segment.mll[82,7390+22]..[82,7390+29])
                                          Pexp_construct "Segment" (src/segment.mll[82,7390+22]..[82,7390+29])
                                          None
                                        expression (src/segment.mll[82,7390+31]..[82,7390+38])
                                          Pexp_ident "opening" (src/segment.mll[82,7390+31]..[82,7390+38])
                                        expression (src/segment.mll[82,7390+40]..[82,7390+47])
                                          Pexp_ident "closing" (src/segment.mll[82,7390+40]..[82,7390+47])
                                      ]
                                ]
                                expression (src/segment.mll[83,7441+8]..[85,7520+36])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/segment.mll[83,7441+12]..[83,7441+20])
                                        Ppat_var "segments" (src/segment.mll[83,7441+12]..[83,7441+20])
                                      expression (src/segment.mll[83,7441+23]..[83,7441+42])
                                        Pexp_construct "::" (src/segment.mll[83,7441+31]..[83,7441+33])
                                        Some
                                          expression (src/segment.mll[83,7441+23]..[83,7441+42]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/segment.mll[83,7441+23]..[83,7441+30])
                                                Pexp_ident "segment" (src/segment.mll[83,7441+23]..[83,7441+30])
                                              expression (src/segment.mll[83,7441+34]..[83,7441+42])
                                                Pexp_ident "segments" (src/segment.mll[83,7441+34]..[83,7441+42])
                                            ]
                                  ]
                                  expression (src/segment.mll[84,7487+8]..[85,7520+36])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/segment.mll[84,7487+12]..[84,7487+19])
                                          Ppat_var "opening" (src/segment.mll[84,7487+12]..[84,7487+19])
                                        expression (src/segment.mll[84,7487+22]..[84,7487+29])
                                          Pexp_ident "closing" (src/segment.mll[84,7487+22]..[84,7487+29])
                                    ]
                                    expression (src/segment.mll[85,7520+8]..[85,7520+36])
                                      Pexp_apply
                                      expression (src/segment.mll[85,7520+8]..[85,7520+12])
                                        Pexp_ident "idle" (src/segment.mll[85,7520+8]..[85,7520+12])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/segment.mll[85,7520+13]..[85,7520+20])
                                            Pexp_ident "opening" (src/segment.mll[85,7520+13]..[85,7520+20])
                                        <arg>
                                        Nolabel
                                          expression (src/segment.mll[85,7520+21]..[85,7520+29])
                                            Pexp_ident "segments" (src/segment.mll[85,7520+21]..[85,7520+29])
                                        <arg>
                                        Nolabel
                                          expression (src/segment.mll[85,7520+30]..[85,7520+36])
                                            Pexp_ident "lexbuf" (src/segment.mll[85,7520+30]..[85,7520+36])
                                      ]
                              Some
                                expression (src/segment.mll[87,7568+8]..[87,7568+41])
                                  Pexp_apply
                                  expression (src/segment.mll[87,7568+8]..[87,7568+12])
                                    Pexp_ident "busy" (src/segment.mll[87,7568+8]..[87,7568+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/segment.mll[87,7568+13]..[87,7568+21])
                                        Pexp_ident "segments" (src/segment.mll[87,7568+13]..[87,7568+21])
                                    <arg>
                                    Nolabel
                                      expression (src/segment.mll[87,7568+22]..[87,7568+29])
                                        Pexp_ident "opening" (src/segment.mll[87,7568+22]..[87,7568+29])
                                    <arg>
                                    Nolabel
                                      expression (src/segment.mll[87,7568+30]..[87,7568+34])
                                        Pexp_construct "true" (src/segment.mll[87,7568+30]..[87,7568+34])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (src/segment.mll[87,7568+35]..[87,7568+41])
                                        Pexp_ident "lexbuf" (src/segment.mll[87,7568+35]..[87,7568+41])
                                  ]
                      <case>
                        pattern (src/segment.ml[172,7636+4]..[172,7636+5])
                          Ppat_constant PConst_int (2,None)
                        expression (src/segment.mll[89,7668+4]..[92,7803+25])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/segment.mll[89,7668+10]..[89,7668+17])
                                Ppat_var "closing" (src/segment.mll[89,7668+10]..[89,7668+17])
                              expression (src/segment.mll[89,7668+20]..[89,7668+38])
                                Pexp_field
                                expression (src/segment.mll[89,7668+20]..[89,7668+26])
                                  Pexp_ident "lexbuf" (src/segment.mll[89,7668+20]..[89,7668+26])
                                "lex_start_p" (src/segment.mll[89,7668+27]..[89,7668+38])
                          ]
                          expression (src/segment.mll[90,7710+6]..[92,7803+23])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/segment.mll[90,7710+10]..[90,7710+17])
                                  Ppat_var "segment" (src/segment.mll[90,7710+10]..[90,7710+17])
                                expression (src/segment.mll[90,7710+20]..[90,7710+45])
                                  Pexp_tuple
                                  [
                                    expression (src/segment.mll[90,7710+20]..[90,7710+27])
                                      Pexp_construct "Segment" (src/segment.mll[90,7710+20]..[90,7710+27])
                                      None
                                    expression (src/segment.mll[90,7710+29]..[90,7710+36])
                                      Pexp_ident "opening" (src/segment.mll[90,7710+29]..[90,7710+36])
                                    expression (src/segment.mll[90,7710+38]..[90,7710+45])
                                      Pexp_ident "closing" (src/segment.mll[90,7710+38]..[90,7710+45])
                                  ]
                            ]
                            expression (src/segment.mll[91,7759+6]..[92,7803+23])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/segment.mll[91,7759+10]..[91,7759+18])
                                    Ppat_var "segments" (src/segment.mll[91,7759+10]..[91,7759+18])
                                  expression (src/segment.mll[91,7759+21]..[91,7759+40])
                                    Pexp_construct "::" (src/segment.mll[91,7759+29]..[91,7759+31])
                                    Some
                                      expression (src/segment.mll[91,7759+21]..[91,7759+40]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/segment.mll[91,7759+21]..[91,7759+28])
                                            Pexp_ident "segment" (src/segment.mll[91,7759+21]..[91,7759+28])
                                          expression (src/segment.mll[91,7759+32]..[91,7759+40])
                                            Pexp_ident "segments" (src/segment.mll[91,7759+32]..[91,7759+40])
                                        ]
                              ]
                              expression (src/segment.mll[92,7803+6]..[92,7803+23])
                                Pexp_apply
                                expression (src/segment.mll[92,7803+6]..[92,7803+14])
                                  Pexp_ident "List.rev" (src/segment.mll[92,7803+6]..[92,7803+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/segment.mll[92,7803+15]..[92,7803+23])
                                      Pexp_ident "segments" (src/segment.mll[92,7803+15]..[92,7803+23])
                                ]
                      <case>
                        pattern (src/segment.ml[180,7853+4]..[180,7853+5])
                          Ppat_constant PConst_int (3,None)
                        expression (src/segment.mll[94,7885+4]..[94,7885+42])
                          Pexp_apply
                          expression (src/segment.mll[94,7885+6]..[94,7885+10])
                            Pexp_ident "busy" (src/segment.mll[94,7885+6]..[94,7885+10])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[94,7885+11]..[94,7885+19])
                                Pexp_ident "segments" (src/segment.mll[94,7885+11]..[94,7885+19])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[94,7885+20]..[94,7885+27])
                                Pexp_ident "opening" (src/segment.mll[94,7885+20]..[94,7885+27])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[94,7885+28]..[94,7885+33])
                                Pexp_construct "false" (src/segment.mll[94,7885+28]..[94,7885+33])
                                None
                            <arg>
                            Nolabel
                              expression (src/segment.mll[94,7885+34]..[94,7885+40])
                                Pexp_ident "lexbuf" (src/segment.mll[94,7885+34]..[94,7885+40])
                          ]
                      <case>
                        pattern (src/segment.ml[185,7952+4]..[185,7952+21])
                          Ppat_var "__ocaml_lex_state" (src/segment.ml[185,7952+4]..[185,7952+21])
                        expression (src/segment.ml[185,7952+25]..[186,8011+87])
                          Pexp_sequence
                          expression (src/segment.ml[185,7952+25]..[185,7952+57])
                            Pexp_apply
                            expression (src/segment.ml[185,7952+25]..[185,7952+50])
                              Pexp_field
                              expression (src/segment.ml[185,7952+25]..[185,7952+31])
                                Pexp_ident "lexbuf" (src/segment.ml[185,7952+25]..[185,7952+31])
                              "Lexing.refill_buff" (src/segment.ml[185,7952+32]..[185,7952+50])
                            [
                              <arg>
                              Nolabel
                                expression (src/segment.ml[185,7952+51]..[185,7952+57])
                                  Pexp_ident "lexbuf" (src/segment.ml[185,7952+51]..[185,7952+57])
                            ]
                          expression (src/segment.ml[186,8011+6]..[186,8011+87])
                            Pexp_apply
                            expression (src/segment.ml[186,8011+6]..[186,8011+26])
                              Pexp_ident "__ocaml_lex_busy_rec" (src/segment.ml[186,8011+6]..[186,8011+26])
                            [
                              <arg>
                              Nolabel
                                expression (src/segment.ml[186,8011+27]..[186,8011+35])
                                  Pexp_ident "segments" (src/segment.ml[186,8011+27]..[186,8011+35])
                              <arg>
                              Nolabel
                                expression (src/segment.ml[186,8011+36]..[186,8011+43])
                                  Pexp_ident "opening" (src/segment.ml[186,8011+36]..[186,8011+43])
                              <arg>
                              Nolabel
                                expression (src/segment.ml[186,8011+44]..[186,8011+62])
                                  Pexp_ident "just_saw_a_newline" (src/segment.ml[186,8011+44]..[186,8011+62])
                              <arg>
                              Nolabel
                                expression (src/segment.ml[186,8011+63]..[186,8011+69])
                                  Pexp_ident "lexbuf" (src/segment.ml[186,8011+63]..[186,8011+69])
                              <arg>
                              Nolabel
                                expression (src/segment.ml[186,8011+70]..[186,8011+87])
                                  Pexp_ident "__ocaml_lex_state" (src/segment.ml[186,8011+70]..[186,8011+87])
                            ]
                    ]
    ]
  structure_item (src/segment.mll[102,8295+2]..[120,9120+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/segment.mll[102,8295+6]..[102,8295+13])
          Ppat_var "segment" (src/segment.mll[102,8295+6]..[102,8295+13])
        expression (src/segment.mll[102,8295+14]..[120,9120+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/segment.mll[102,8295+14]..[102,8295+22])
            Ppat_var "filename" (src/segment.mll[102,8295+14]..[102,8295+22])
          expression (src/segment.mll[102,8295+23]..[120,9120+14])
            Pexp_constraint
            expression (src/segment.mll[103,8351+4]..[120,9120+14])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/segment.mll[103,8351+8]..[103,8351+15])
                    Ppat_var "content" (src/segment.mll[103,8351+8]..[103,8351+15])
                  expression (src/segment.mll[103,8351+18]..[103,8351+45])
                    Pexp_apply
                    expression (src/segment.mll[103,8351+18]..[103,8351+36])
                      Pexp_ident "IO.read_whole_file" (src/segment.mll[103,8351+18]..[103,8351+36])
                    [
                      <arg>
                      Nolabel
                        expression (src/segment.mll[103,8351+37]..[103,8351+45])
                          Pexp_ident "filename" (src/segment.mll[103,8351+37]..[103,8351+45])
                    ]
              ]
              expression (src/segment.mll[104,8400+4]..[120,9120+14])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/segment.mll[104,8400+8]..[104,8400+14])
                      Ppat_var "lexbuf" (src/segment.mll[104,8400+8]..[104,8400+14])
                    expression (src/segment.mll[104,8400+17]..[104,8400+36])
                      Pexp_apply
                      expression (src/segment.mll[104,8400+17]..[104,8400+28])
                        Pexp_ident "from_string" (src/segment.mll[104,8400+17]..[104,8400+28])
                      [
                        <arg>
                        Nolabel
                          expression (src/segment.mll[104,8400+29]..[104,8400+36])
                            Pexp_ident "content" (src/segment.mll[104,8400+29]..[104,8400+36])
                      ]
                ]
                expression (src/segment.mll[105,8440+4]..[120,9120+14])
                  Pexp_sequence
                  expression (src/segment.mll[105,8440+4]..[105,8440+72])
                    Pexp_setfield
                    expression (src/segment.mll[105,8440+4]..[105,8440+10])
                      Pexp_ident "lexbuf" (src/segment.mll[105,8440+4]..[105,8440+10])
                    "lex_curr_p" (src/segment.mll[105,8440+11]..[105,8440+21])
                    expression (src/segment.mll[105,8440+25]..[105,8440+72])
                      Pexp_record
                      [
                        "pos_fname" (src/segment.mll[105,8440+50]..[105,8440+59])
                          expression (src/segment.mll[105,8440+62]..[105,8440+70])
                            Pexp_ident "filename" (src/segment.mll[105,8440+62]..[105,8440+70])
                      ]
                      Some
                        expression (src/segment.mll[105,8440+27]..[105,8440+44])
                          Pexp_field
                          expression (src/segment.mll[105,8440+27]..[105,8440+33])
                            Pexp_ident "lexbuf" (src/segment.mll[105,8440+27]..[105,8440+33])
                          "lex_curr_p" (src/segment.mll[105,8440+34]..[105,8440+44])
                  expression (src/segment.mll[106,8514+4]..[120,9120+14])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/segment.mll[106,8514+8]..[106,8514+16])
                          Ppat_var "segments" (src/segment.mll[106,8514+8]..[106,8514+16])
                        core_type (src/segment.mll[106,8514+19]..[106,8514+51])
                          Ptyp_constr "list" (src/segment.mll[106,8514+47]..[106,8514+51])
                          [
                            core_type (src/segment.mll[106,8514+20]..[106,8514+45])
                              Ptyp_tuple
                              [
                                core_type (src/segment.mll[106,8514+20]..[106,8514+23])
                                  Ptyp_constr "tag" (src/segment.mll[106,8514+20]..[106,8514+23])
                                  []
                                core_type (src/segment.mll[106,8514+26]..[106,8514+34])
                                  Ptyp_constr "position" (src/segment.mll[106,8514+26]..[106,8514+34])
                                  []
                                core_type (src/segment.mll[106,8514+37]..[106,8514+45])
                                  Ptyp_constr "position" (src/segment.mll[106,8514+37]..[106,8514+45])
                                  []
                              ]
                          ]
                        expression (src/segment.mll[107,8568+6]..[107,8568+38])
                          Pexp_apply
                          expression (src/segment.mll[107,8568+6]..[107,8568+10])
                            Pexp_ident "idle" (src/segment.mll[107,8568+6]..[107,8568+10])
                          [
                            <arg>
                            Nolabel
                              expression (src/segment.mll[107,8568+11]..[107,8568+28])
                                Pexp_field
                                expression (src/segment.mll[107,8568+11]..[107,8568+17])
                                  Pexp_ident "lexbuf" (src/segment.mll[107,8568+11]..[107,8568+17])
                                "lex_curr_p" (src/segment.mll[107,8568+18]..[107,8568+28])
                            <arg>
                            Nolabel
                              expression (src/segment.mll[107,8568+29]..[107,8568+31])
                                Pexp_construct "[]" (src/segment.mll[107,8568+29]..[107,8568+31])
                                None
                            <arg>
                            Nolabel
                              expression (src/segment.mll[107,8568+32]..[107,8568+38])
                                Pexp_ident "lexbuf" (src/segment.mll[107,8568+32]..[107,8568+38])
                          ]
                    ]
                    expression (src/segment.mll[109,8614+4]..[120,9120+14])
                      Pexp_apply
                      expression (src/segment.mll[109,8614+4]..[109,8614+12])
                        Pexp_ident "List.map" (src/segment.mll[109,8614+4]..[109,8614+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/segment.mll[109,8614+13]..[120,9120+5])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/segment.mll[109,8614+18]..[109,8614+37])
                              Ppat_tuple
                              [
                                pattern (src/segment.mll[109,8614+19]..[109,8614+22])
                                  Ppat_var "tag" (src/segment.mll[109,8614+19]..[109,8614+22])
                                pattern (src/segment.mll[109,8614+24]..[109,8614+30])
                                  Ppat_var "startp" (src/segment.mll[109,8614+24]..[109,8614+30])
                                pattern (src/segment.mll[109,8614+32]..[109,8614+36])
                                  Ppat_var "endp" (src/segment.mll[109,8614+32]..[109,8614+36])
                              ]
                            expression (src/segment.mll[110,8655+6]..[119,9093+26])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/segment.mll[110,8655+10]..[110,8655+15])
                                    Ppat_var "start" (src/segment.mll[110,8655+10]..[110,8655+15])
                                  expression (src/segment.mll[110,8655+18]..[110,8655+33])
                                    Pexp_field
                                    expression (src/segment.mll[110,8655+18]..[110,8655+24])
                                      Pexp_ident "startp" (src/segment.mll[110,8655+18]..[110,8655+24])
                                    "pos_cnum" (src/segment.mll[110,8655+25]..[110,8655+33])
                              ]
                              expression (src/segment.mll[111,8692+6]..[119,9093+26])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/segment.mll[111,8692+10]..[111,8692+16])
                                      Ppat_var "length" (src/segment.mll[111,8692+10]..[111,8692+16])
                                    expression (src/segment.mll[111,8692+19]..[111,8692+40])
                                      Pexp_apply
                                      expression (src/segment.mll[111,8692+33]..[111,8692+34])
                                        Pexp_ident "-" (src/segment.mll[111,8692+33]..[111,8692+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/segment.mll[111,8692+19]..[111,8692+32])
                                            Pexp_field
                                            expression (src/segment.mll[111,8692+19]..[111,8692+23])
                                              Pexp_ident "endp" (src/segment.mll[111,8692+19]..[111,8692+23])
                                            "pos_cnum" (src/segment.mll[111,8692+24]..[111,8692+32])
                                        <arg>
                                        Nolabel
                                          expression (src/segment.mll[111,8692+35]..[111,8692+40])
                                            Pexp_ident "start" (src/segment.mll[111,8692+35]..[111,8692+40])
                                      ]
                                ]
                                expression (src/segment.mll[112,8736+6]..[119,9093+26])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/segment.mll[112,8736+10]..[112,8736+17])
                                        Ppat_var "content" (src/segment.mll[112,8736+10]..[112,8736+17])
                                      expression (src/segment.mll[112,8736+20]..[112,8736+51])
                                        Pexp_apply
                                        expression (src/segment.mll[112,8736+20]..[112,8736+30])
                                          Pexp_ident "String.sub" (src/segment.mll[112,8736+20]..[112,8736+30])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/segment.mll[112,8736+31]..[112,8736+38])
                                              Pexp_ident "content" (src/segment.mll[112,8736+31]..[112,8736+38])
                                          <arg>
                                          Nolabel
                                            expression (src/segment.mll[112,8736+39]..[112,8736+44])
                                              Pexp_ident "start" (src/segment.mll[112,8736+39]..[112,8736+44])
                                          <arg>
                                          Nolabel
                                            expression (src/segment.mll[112,8736+45]..[112,8736+51])
                                              Pexp_ident "length" (src/segment.mll[112,8736+45]..[112,8736+51])
                                        ]
                                  ]
                                  expression (src/segment.mll[113,8791+6]..[119,9093+26])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/segment.mll[113,8791+10]..[113,8791+16])
                                          Ppat_var "lexbuf" (src/segment.mll[113,8791+10]..[113,8791+16])
                                        expression (src/segment.mll[113,8791+19]..[113,8791+38])
                                          Pexp_apply
                                          expression (src/segment.mll[113,8791+19]..[113,8791+30])
                                            Pexp_ident "from_string" (src/segment.mll[113,8791+19]..[113,8791+30])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/segment.mll[113,8791+31]..[113,8791+38])
                                                Pexp_ident "content" (src/segment.mll[113,8791+31]..[113,8791+38])
                                          ]
                                    ]
                                    expression (src/segment.mll[114,8833+6]..[119,9093+26])
                                      Pexp_sequence
                                      expression (src/segment.mll[114,8833+6]..[114,8833+34])
                                        Pexp_setfield
                                        expression (src/segment.mll[114,8833+6]..[114,8833+12])
                                          Pexp_ident "lexbuf" (src/segment.mll[114,8833+6]..[114,8833+12])
                                        "lex_start_p" (src/segment.mll[114,8833+13]..[114,8833+24])
                                        expression (src/segment.mll[114,8833+28]..[114,8833+34])
                                          Pexp_ident "startp" (src/segment.mll[114,8833+28]..[114,8833+34])
                                      expression (src/segment.mll[115,8869+6]..[119,9093+26])
                                        Pexp_sequence
                                        expression (src/segment.mll[115,8869+6]..[115,8869+33])
                                          Pexp_setfield
                                          expression (src/segment.mll[115,8869+6]..[115,8869+12])
                                            Pexp_ident "lexbuf" (src/segment.mll[115,8869+6]..[115,8869+12])
                                          "lex_curr_p" (src/segment.mll[115,8869+13]..[115,8869+23])
                                          expression (src/segment.mll[115,8869+27]..[115,8869+33])
                                            Pexp_ident "startp" (src/segment.mll[115,8869+27]..[115,8869+33])
                                        expression (src/segment.mll[116,8904+6]..[119,9093+26])
                                          Pexp_sequence
                                          expression (src/segment.mll[116,8904+6]..[116,8904+43])
                                            Pexp_setfield
                                            expression (src/segment.mll[116,8904+6]..[116,8904+12])
                                              Pexp_ident "lexbuf" (src/segment.mll[116,8904+6]..[116,8904+12])
                                            "lex_abs_pos" (src/segment.mll[116,8904+13]..[116,8904+24])
                                            expression (src/segment.mll[116,8904+28]..[116,8904+43])
                                              Pexp_field
                                              expression (src/segment.mll[116,8904+28]..[116,8904+34])
                                                Pexp_ident "startp" (src/segment.mll[116,8904+28]..[116,8904+34])
                                              "pos_cnum" (src/segment.mll[116,8904+35]..[116,8904+43])
                                          expression (src/segment.mll[119,9093+6]..[119,9093+26])
                                            Pexp_tuple
                                            [
                                              expression (src/segment.mll[119,9093+6]..[119,9093+9])
                                                Pexp_ident "tag" (src/segment.mll[119,9093+6]..[119,9093+9])
                                              expression (src/segment.mll[119,9093+11]..[119,9093+18])
                                                Pexp_ident "content" (src/segment.mll[119,9093+11]..[119,9093+18])
                                              expression (src/segment.mll[119,9093+20]..[119,9093+26])
                                                Pexp_ident "lexbuf" (src/segment.mll[119,9093+20]..[119,9093+26])
                                            ]
                        <arg>
                        Nolabel
                          expression (src/segment.mll[120,9120+6]..[120,9120+14])
                            Pexp_ident "segments" (src/segment.mll[120,9120+6]..[120,9120+14])
                      ]
            core_type (src/segment.mll[102,8295+25]..[102,8295+53])
              Ptyp_constr "list" (src/segment.mll[102,8295+49]..[102,8295+53])
              [
                core_type (src/segment.mll[102,8295+26]..[102,8295+47])
                  Ptyp_tuple
                  [
                    core_type (src/segment.mll[102,8295+26]..[102,8295+29])
                      Ptyp_constr "tag" (src/segment.mll[102,8295+26]..[102,8295+29])
                      []
                    core_type (src/segment.mll[102,8295+32]..[102,8295+38])
                      Ptyp_constr "string" (src/segment.mll[102,8295+32]..[102,8295+38])
                      []
                    core_type (src/segment.mll[102,8295+41]..[102,8295+47])
                      Ptyp_constr "lexbuf" (src/segment.mll[102,8295+41]..[102,8295+47])
                      []
                  ]
              ]
    ]
]

type tag =
  | Segment 
  | Whitespace 
open Lexing
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\251\255\252\255\001\000\002\000\254\255\255\255\005\000\253\255\006\000\b\000\252\255\253\255\n\000\254\255\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\004\000\001\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255";
    Lexing.lex_default =
      "\001\000\000\000\000\000\t\000\255\255\000\000\000\000\255\255\000\000\t\000\011\000\000\000\000\000\255\255\000\000\000\000";
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\005\000\b\000\005\000\004\000\007\000\b\000\b\000\015\000\014\000\007\000\014\000\r
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\003\000\004\000\000\000\003\000\007\000\t\000\n\000\n\000\t\000\r\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\nt\000\255\255\n\000\255\255\255\255";
    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec idle opening segments lexbuf =
  __ocaml_lex_idle_rec opening segments lexbuf 0
and __ocaml_lex_idle_rec opening segments lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> idle opening segments lexbuf
  | 1 -> (new_line lexbuf; idle opening segments lexbuf)
  | 2 -> (new_line lexbuf; idle opening segments lexbuf)
  | 3 ->
      let closing = lexbuf.lex_start_p in
      let segment = (Whitespace, opening, closing) in
      let segments = segment :: segments in List.rev segments
  | 4 ->
      let closing = lexbuf.lex_start_p in
      let segment = (Whitespace, opening, closing) in
      let segments = segment :: segments in
      let opening = closing in busy segments opening false lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_idle_rec opening segments lexbuf __ocaml_lex_state)
and busy segments opening just_saw_a_newline lexbuf =
  __ocaml_lex_busy_rec segments opening just_saw_a_newline lexbuf 10
and __ocaml_lex_busy_rec segments opening just_saw_a_newline lexbuf
  __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> busy segments opening just_saw_a_newline lexbuf
  | 1 ->
      (new_line lexbuf;
       (let closing = lexbuf.lex_start_p in
        if just_saw_a_newline
        then
          let segment = (Segment, opening, closing) in
          let segments = segment :: segments in
          let opening = closing in idle opening segments lexbuf
        else busy segments opening true lexbuf))
  | 2 ->
      let closing = lexbuf.lex_start_p in
      let segment = (Segment, opening, closing) in
      let segments = segment :: segments in List.rev segments
  | 3 -> busy segments opening false lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_busy_rec segments opening just_saw_a_newline lexbuf
         __ocaml_lex_state)
let segment filename =
  (let content = IO.read_whole_file filename in
   let lexbuf = from_string content in
   lexbuf.lex_curr_p <- { (lexbuf.lex_curr_p) with pos_fname = filename };
   (let segments : (tag * position * position) list =
      idle lexbuf.lex_curr_p [] lexbuf in
    List.map
      (fun (tag, startp, endp) ->
         let start = startp.pos_cnum in
         let length = endp.pos_cnum - start in
         let content = String.sub content start length in
         let lexbuf = from_string content in
         lexbuf.lex_start_p <- startp;
         lexbuf.lex_curr_p <- startp;
         lexbuf.lex_abs_pos <- (startp.pos_cnum);
         (tag, content, lexbuf)) segments) : (tag * string * lexbuf) list)
[
  structure_item (src/segment.mll[27,47+2]..src/segment.mll[29,74+16])
    Tstr_type Rec
    [
      type_declaration tag/397 (src/segment.mll[27,47+2]..src/segment.mll[29,74+16])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/segment.mll[28,60+4]..src/segment.mll[28,60+13])
                Segment/398
                []
                None
              (src/segment.mll[29,74+4]..src/segment.mll[29,74+16])
                Whitespace/399
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/segment.mll[31,92+2]..src/segment.mll[31,92+13])
    Tstr_open Fresh
    module_expr (src/segment.mll[31,92+7]..src/segment.mll[31,92+13])
      Tmod_ident "Stdlib!.Lexing"
  structure_item (src/segment.ml[12,130+0]..src/segment.ml[107,5583+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/segment.ml[12,130+4]..src/segment.ml[12,130+22])
          Tpat_var "__ocaml_lex_tables/424"
        expression (src/segment.ml[12,130+25]..src/segment.ml[107,5583+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (src/segment.ml[14,177+3]..src/segment.ml[16,317+5])
                    Texp_constant Const_string("\000\000\251\255\252\255\001\000\002\000\254\255\255\255\005\000\253\255\006\000\b\000\252\255\253\255\n\000\254\255\255\255",(src/segment.ml[14,177+4]..src/segment.ml[16,317+4]),None)
                "Lexing.lex_backtrk"
                  expression (src/segment.ml[18,347+3]..src/segment.ml[20,487+5])
                    Texp_constant Const_string("\255\255\255\255\255\255\004\000\001\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255",(src/segment.ml[18,347+4]..src/segment.ml[20,487+4]),None)
                "Lexing.lex_default"
                  expression (src/segment.ml[22,517+3]..src/segment.ml[24,657+5])
                    Texp_constant Const_string("\001\000\000\000\000\000\t\000\255\255\000\000\000\000\255\255\000\000\t\000\011\000\000\000\000\000\255\255\000\000\000\000",(src/segment.ml[22,517+4]..src/segment.ml[24,657+4]),None)
                "Lexing.lex_trans"
                  expression (src/segment.ml[26,685+3]..src/segment.ml[59,2995+29])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\005\000\b\000\005\000\004\000\007\000\b\000\b\000\015\000\014\000\007\000\014\000\rsrc/segment.ml[26,685+4]..src/segment.ml[59,2995+28]),None)
                "Lexing.lex_check"
                  expression (src/segment.ml[61,3047+3]..src/segment.ml[94,5357+29])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\003\000\004\000\000\000\003\000\007\000\t\000\n\000\n\000\t\000\r\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\nt\000\255\255\n\000\255\255\255\255",(src/segment.ml[61,3047+4]..src/segment.ml[94,5357+28]),None)
                "Lexing.lex_base_code"
                  expression (src/segment.ml[96,5413+3]..src/segment.ml[96,5413+5])
                    Texp_constant Const_string("",(src/segment.ml[96,5413+4]..src/segment.ml[96,5413+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (src/segment.ml[98,5448+3]..src/segment.ml[98,5448+5])
                    Texp_constant Const_string("",(src/segment.ml[98,5448+4]..src/segment.ml[98,5448+4]),None)
                "Lexing.lex_default_code"
                  expression (src/segment.ml[100,5483+3]..src/segment.ml[100,5483+5])
                    Texp_constant Const_string("",(src/segment.ml[100,5483+4]..src/segment.ml[100,5483+4]),None)
                "Lexing.lex_trans_code"
                  expression (src/segment.ml[102,5516+3]..src/segment.ml[102,5516+5])
                    Texp_constant Const_string("",(src/segment.ml[102,5516+4]..src/segment.ml[102,5516+4]),None)
                "Lexing.lex_check_code"
                  expression (src/segment.ml[104,5549+3]..src/segment.ml[104,5549+5])
                    Texp_constant Const_string("",(src/segment.ml[104,5549+4]..src/segment.ml[104,5549+4]),None)
                "Lexing.lex_code"
                  expression (src/segment.ml[106,5576+3]..src/segment.ml[106,5576+5])
                    Texp_constant Const_string("",(src/segment.ml[106,5576+4]..src/segment.ml[106,5576+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/segment.ml[109,5586+0]..src/segment.ml[186,8011+87])
    Tstr_value Rec
    [
      <def>
        pattern (src/segment.ml[109,5586+8]..src/segment.ml[109,5586+12])
          Tpat_var "idle/425"
        expression (src/segment.ml[109,5586+13]..src/segment.ml[110,5625+49]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/segment.ml[109,5586+13]..src/segment.ml[109,5586+20])
                Tpat_var "opening/429"
              expression (src/segment.ml[109,5586+21]..src/segment.ml[110,5625+49]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/segment.ml[109,5586+21]..src/segment.ml[109,5586+29])
                      Tpat_var "segments/430"
                    expression (src/segment.ml[109,5586+30]..src/segment.ml[110,5625+49]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/segment.ml[109,5586+30]..src/segment.ml[109,5586+36])
                            Tpat_var "lexbuf/431"
                          expression (src/segment.ml[110,5625+3]..src/segment.ml[110,5625+49])
                            Texp_apply
                            expression (src/segment.ml[110,5625+3]..src/segment.ml[110,5625+23])
                              Texp_ident "__ocaml_lex_idle_rec/426"
                            [
                              <arg>
                                Nolabel
                                expression (src/segment.ml[110,5625+24]..src/segment.ml[110,5625+31])
                                  Texp_ident "opening/429"
                              <arg>
                                Nolabel
                                expression (src/segment.ml[110,5625+32]..src/segment.ml[110,5625+40])
                                  Texp_ident "segments/430"
                              <arg>
                                Nolabel
                                expression (src/segment.ml[110,5625+41]..src/segment.ml[110,5625+47])
                                  Texp_ident "lexbuf/431"
                              <arg>
                                Nolabel
                                expression (src/segment.ml[110,5625+48]..src/segment.ml[110,5625+49])
                                  Texp_constant Const_int 0
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/segment.ml[111,5675+4]..src/segment.ml[111,5675+24])
          Tpat_var "__ocaml_lex_idle_rec/426"
        expression (src/segment.ml[111,5675+25]..src/segment.ml[146,6679+68]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/segment.ml[111,5675+25]..src/segment.ml[111,5675+32])
                Tpat_var "opening/432"
              expression (src/segment.ml[111,5675+33]..src/segment.ml[146,6679+68]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/segment.ml[111,5675+33]..src/segment.ml[111,5675+41])
                      Tpat_var "segments/433"
                    expression (src/segment.ml[111,5675+42]..src/segment.ml[146,6679+68]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/segment.ml[111,5675+42]..src/segment.ml[111,5675+48])
                            Tpat_var "lexbuf/434"
                          expression (src/segment.ml[111,5675+49]..src/segment.ml[146,6679+68]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/segment.ml[111,5675+49]..src/segment.ml[111,5675+66])
                                  Tpat_var "__ocaml_lex_state/435"
                                expression (src/segment.ml[112,5744+2]..src/segment.ml[146,6679+68])
                                  Texp_match
                                  expression (src/segment.ml[112,5744+8]..src/segment.ml[112,5744+65])
                                    Texp_apply
                                    expression (src/segment.ml[112,5744+8]..src/segment.ml[112,5744+21])
                                      Texp_ident "Stdlib!.Lexing.engine"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/segment.ml[112,5744+22]..src/segment.ml[112,5744+40])
                                          Texp_ident "__ocaml_lex_tables/424"
                                      <arg>
                                        Nolabel
                                        expression (src/segment.ml[112,5744+41]..src/segment.ml[112,5744+58])
                                          Texp_ident "__ocaml_lex_state/435"
                                      <arg>
                                        Nolabel
                                        expression (src/segment.ml[112,5744+59]..src/segment.ml[112,5744+65])
                                          Texp_ident "lexbuf/434"
                                    ]
                                  [
                                    <case>
                                      pattern (src/segment.ml[113,5815+8]..src/segment.ml[113,5815+9])
                                        Tpat_value
                                        pattern (src/segment.ml[113,5815+8]..src/segment.ml[113,5815+9])
                                          Tpat_constant Const_int 0
                                      expression (src/segment.mll[49,5851+4]..src/segment.mll[49,5851+36])
                                        Texp_apply
                                        expression (src/segment.mll[49,5851+6]..src/segment.mll[49,5851+10])
                                          Texp_ident "idle/425"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/segment.mll[49,5851+11]..src/segment.mll[49,5851+18])
                                              Texp_ident "opening/432"
                                          <arg>
                                            Nolabel
                                            expression (src/segment.mll[49,5851+19]..src/segment.mll[49,5851+27])
                                              Texp_ident "segments/433"
                                          <arg>
                                            Nolabel
                                            expression (src/segment.mll[49,5851+28]..src/segment.mll[49,5851+34])
                                              Texp_ident "lexbuf/434"
                                        ]
                                    <case>
                                      pattern (src/segment.ml[118,5912+4]..src/segment.ml[118,5912+5])
                                        Tpat_value
                                        pattern (src/segment.ml[118,5912+4]..src/segment.ml[118,5912+5])
                                          Tpat_constant Const_int 1
                                      expression (src/segment.mll[51,5944+4]..src/segment.mll[51,5944+53])
                                        Texp_sequence
                                        expression (src/segment.mll[51,5944+6]..src/segment.mll[51,5944+21])
                                          Texp_apply
                                          expression (src/segment.mll[51,5944+6]..src/segment.mll[51,5944+14])
                                            Texp_ident "Stdlib!.Lexing.new_line"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[51,5944+15]..src/segment.mll[51,5944+21])
                                                Texp_ident "lexbuf/434"
                                          ]
                                        expression (src/segment.mll[51,5944+23]..src/segment.mll[51,5944+51])
                                          Texp_apply
                                          expression (src/segment.mll[51,5944+23]..src/segment.mll[51,5944+27])
                                            Texp_ident "idle/425"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[51,5944+28]..src/segment.mll[51,5944+35])
                                                Texp_ident "opening/432"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[51,5944+36]..src/segment.mll[51,5944+44])
                                                Texp_ident "segments/433"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[51,5944+45]..src/segment.mll[51,5944+51])
                                                Texp_ident "lexbuf/434"
                                          ]
                                    <case>
                                      pattern (src/segment.ml[123,6022+4]..src/segment.ml[123,6022+5])
                                        Tpat_value
                                        pattern (src/segment.ml[123,6022+4]..src/segment.ml[123,6022+5])
                                          Tpat_constant Const_int 2
                                      expression (src/segment.mll[53,6054+4]..src/segment.mll[53,6054+53])
                                        Texp_sequence
                                        expression (src/segment.mll[53,6054+6]..src/segment.mll[53,6054+21])
                                          Texp_apply
                                          expression (src/segment.mll[53,6054+6]..src/segment.mll[53,6054+14])
                                            Texp_ident "Stdlib!.Lexing.new_line"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[53,6054+15]..src/segment.mll[53,6054+21])
                                                Texp_ident "lexbuf/434"
                                          ]
                                        expression (src/segment.mll[53,6054+23]..src/segment.mll[53,6054+51])
                                          Texp_apply
                                          expression (src/segment.mll[53,6054+23]..src/segment.mll[53,6054+27])
                                            Texp_ident "idle/425"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[53,6054+28]..src/segment.mll[53,6054+35])
                                                Texp_ident "opening/432"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[53,6054+36]..src/segment.mll[53,6054+44])
                                                Texp_ident "segments/433"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.mll[53,6054+45]..src/segment.mll[53,6054+51])
                                                Texp_ident "lexbuf/434"
                                          ]
                                    <case>
                                      pattern (src/segment.ml[128,6132+4]..src/segment.ml[128,6132+5])
                                        Tpat_value
                                        pattern (src/segment.ml[128,6132+4]..src/segment.ml[128,6132+5])
                                          Tpat_constant Const_int 3
                                      expression (src/segment.mll[55,6164+4]..src/segment.mll[58,6302+25])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/segment.mll[55,6164+10]..src/segment.mll[55,6164+17])
                                              Tpat_var "closing/461"
                                            expression (src/segment.mll[55,6164+20]..src/segment.mll[55,6164+38])
                                              Texp_field
                                              expression (src/segment.mll[55,6164+20]..src/segment.mll[55,6164+26])
                                                Texp_ident "lexbuf/434"
                                              "lex_start_p"
                                        ]
                                        expression (src/segment.mll[56,6206+6]..src/segment.mll[58,6302+23])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/segment.mll[56,6206+10]..src/segment.mll[56,6206+17])
                                                Tpat_var "segment/462"
                                              expression (src/segment.mll[56,6206+20]..src/segment.mll[56,6206+48])
                                                Texp_tuple
                                                [
                                                  expression (src/segment.mll[56,6206+20]..src/segment.mll[56,6206+30])
                                                    Texp_construct "Whitespace"
                                                    []
                                                  expression (src/segment.mll[56,6206+32]..src/segment.mll[56,6206+39])
                                                    Texp_ident "opening/432"
                                                  expression (src/segment.mll[56,6206+41]..src/segment.mll[56,6206+48])
                                                    Texp_ident "closing/461"
                                                ]
                                          ]
                                          expression (src/segment.mll[57,6258+6]..src/segment.mll[58,6302+23])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/segment.mll[57,6258+10]..src/segment.mll[57,6258+18])
                                                  Tpat_var "segments/463"
                                                expression (src/segment.mll[57,6258+21]..src/segment.mll[57,6258+40])
                                                  Texp_construct "::"
                                                  [
                                                    expression (src/segment.mll[57,6258+21]..src/segment.mll[57,6258+28])
                                                      Texp_ident "segment/462"
                                                    expression (src/segment.mll[57,6258+32]..src/segment.mll[57,6258+40])
                                                      Texp_ident "segments/433"
                                                  ]
                                            ]
                                            expression (src/segment.mll[58,6302+6]..src/segment.mll[58,6302+23])
                                              Texp_apply
                                              expression (src/segment.mll[58,6302+6]..src/segment.mll[58,6302+14])
                                                Texp_ident "Stdlib!.List.rev"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[58,6302+15]..src/segment.mll[58,6302+23])
                                                    Texp_ident "segments/463"
                                              ]
                                    <case>
                                      pattern (src/segment.ml[136,6352+4]..src/segment.ml[136,6352+5])
                                        Tpat_value
                                        pattern (src/segment.ml[136,6352+4]..src/segment.ml[136,6352+5])
                                          Tpat_constant Const_int 4
                                      expression (src/segment.mll[60,6384+4]..src/segment.mll[64,6553+42])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/segment.mll[60,6384+10]..src/segment.mll[60,6384+17])
                                              Tpat_var "closing/530"
                                            expression (src/segment.mll[60,6384+20]..src/segment.mll[60,6384+38])
                                              Texp_field
                                              expression (src/segment.mll[60,6384+20]..src/segment.mll[60,6384+26])
                                                Texp_ident "lexbuf/434"
                                              "lex_start_p"
                                        ]
                                        expression (src/segment.mll[61,6426+6]..src/segment.mll[64,6553+40])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/segment.mll[61,6426+10]..src/segment.mll[61,6426+17])
                                                Tpat_var "segment/531"
                                              expression (src/segment.mll[61,6426+20]..src/segment.mll[61,6426+48])
                                                Texp_tuple
                                                [
                                                  expression (src/segment.mll[61,6426+20]..src/segment.mll[61,6426+30])
                                                    Texp_construct "Whitespace"
                                                    []
                                                  expression (src/segment.mll[61,6426+32]..src/segment.mll[61,6426+39])
                                                    Texp_ident "opening/432"
                                                  expression (src/segment.mll[61,6426+41]..src/segment.mll[61,6426+48])
                                                    Texp_ident "closing/530"
                                                ]
                                          ]
                                          expression (src/segment.mll[62,6478+6]..src/segment.mll[64,6553+40])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/segment.mll[62,6478+10]..src/segment.mll[62,6478+18])
                                                  Tpat_var "segments/532"
                                                expression (src/segment.mll[62,6478+21]..src/segment.mll[62,6478+40])
                                                  Texp_construct "::"
                                                  [
                                                    expression (src/segment.mll[62,6478+21]..src/segment.mll[62,6478+28])
                                                      Texp_ident "segment/531"
                                                    expression (src/segment.mll[62,6478+32]..src/segment.mll[62,6478+40])
                                                      Texp_ident "segments/433"
                                                  ]
                                            ]
                                            expression (src/segment.mll[63,6522+6]..src/segment.mll[64,6553+40])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/segment.mll[63,6522+10]..src/segment.mll[63,6522+17])
                                                    Tpat_var "opening/533"
                                                  expression (src/segment.mll[63,6522+20]..src/segment.mll[63,6522+27])
                                                    Texp_ident "closing/530"
                                              ]
                                              expression (src/segment.mll[64,6553+6]..src/segment.mll[64,6553+40])
                                                Texp_apply
                                                expression (src/segment.mll[64,6553+6]..src/segment.mll[64,6553+10])
                                                  Texp_ident "busy/427"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[64,6553+11]..src/segment.mll[64,6553+19])
                                                      Texp_ident "segments/532"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[64,6553+20]..src/segment.mll[64,6553+27])
                                                      Texp_ident "opening/533"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[64,6553+28]..src/segment.mll[64,6553+33])
                                                      Texp_construct "false"
                                                      []
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[64,6553+34]..src/segment.mll[64,6553+40])
                                                      Texp_ident "lexbuf/434"
                                                ]
                                    <case>
                                      pattern (src/segment.ml[145,6620+4]..src/segment.ml[145,6620+21])
                                        Tpat_value
                                        pattern (src/segment.ml[145,6620+4]..src/segment.ml[145,6620+21])
                                          Tpat_var "__ocaml_lex_state/460"
                                      expression (src/segment.ml[145,6620+25]..src/segment.ml[146,6679+68])
                                        Texp_sequence
                                        expression (src/segment.ml[145,6620+25]..src/segment.ml[145,6620+57])
                                          Texp_apply
                                          expression (src/segment.ml[145,6620+25]..src/segment.ml[145,6620+50])
                                            Texp_field
                                            expression (src/segment.ml[145,6620+25]..src/segment.ml[145,6620+31])
                                              Texp_ident "lexbuf/434"
                                            "Lexing.refill_buff"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[145,6620+51]..src/segment.ml[145,6620+57])
                                                Texp_ident "lexbuf/434"
                                          ]
                                        expression (src/segment.ml[146,6679+6]..src/segment.ml[146,6679+68])
                                          Texp_apply
                                          expression (src/segment.ml[146,6679+6]..src/segment.ml[146,6679+26])
                                            Texp_ident "__ocaml_lex_idle_rec/426"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[146,6679+27]..src/segment.ml[146,6679+34])
                                                Texp_ident "opening/432"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[146,6679+35]..src/segment.ml[146,6679+43])
                                                Texp_ident "segments/433"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[146,6679+44]..src/segment.ml[146,6679+50])
                                                Texp_ident "lexbuf/434"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[146,6679+51]..src/segment.ml[146,6679+68])
                                                Texp_ident "__ocaml_lex_state/460"
                                          ]
                                  ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/segment.ml[148,6749+4]..src/segment.ml[148,6749+8])
          Tpat_var "busy/427"
        expression (src/segment.ml[148,6749+9]..src/segment.ml[149,6803+69]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/segment.ml[148,6749+9]..src/segment.ml[148,6749+17])
                Tpat_var "segments/534"
              expression (src/segment.ml[148,6749+18]..src/segment.ml[149,6803+69]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/segment.ml[148,6749+18]..src/segment.ml[148,6749+25])
                      Tpat_var "opening/535"
                    expression (src/segment.ml[148,6749+26]..src/segment.ml[149,6803+69]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/segment.ml[148,6749+26]..src/segment.ml[148,6749+44])
                            Tpat_var "just_saw_a_newline/536"
                          expression (src/segment.ml[148,6749+45]..src/segment.ml[149,6803+69]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/segment.ml[148,6749+45]..src/segment.ml[148,6749+51])
                                  Tpat_var "lexbuf/537"
                                expression (src/segment.ml[149,6803+3]..src/segment.ml[149,6803+69])
                                  Texp_apply
                                  expression (src/segment.ml[149,6803+3]..src/segment.ml[149,6803+23])
                                    Texp_ident "__ocaml_lex_busy_rec/428"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/segment.ml[149,6803+24]..src/segment.ml[149,6803+32])
                                        Texp_ident "segments/534"
                                    <arg>
                                      Nolabel
                                      expression (src/segment.ml[149,6803+33]..src/segment.ml[149,6803+40])
                                        Texp_ident "opening/535"
                                    <arg>
                                      Nolabel
                                      expression (src/segment.ml[149,6803+41]..src/segment.ml[149,6803+59])
                                        Texp_ident "just_saw_a_newline/536"
                                    <arg>
                                      Nolabel
                                      expression (src/segment.ml[149,6803+60]..src/segment.ml[149,6803+66])
                                        Texp_ident "lexbuf/537"
                                    <arg>
                                      Nolabel
                                      expression (src/segment.ml[149,6803+67]..src/segment.ml[149,6803+69])
                                        Texp_constant Const_int 10
                                  ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/segment.ml[150,6873+4]..src/segment.ml[150,6873+24])
          Tpat_var "__ocaml_lex_busy_rec/428"
        expression (src/segment.ml[150,6873+25]..src/segment.ml[186,8011+87]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/segment.ml[150,6873+25]..src/segment.ml[150,6873+33])
                Tpat_var "segments/538"
              expression (src/segment.ml[150,6873+34]..src/segment.ml[186,8011+87]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/segment.ml[150,6873+34]..src/segment.ml[150,6873+41])
                      Tpat_var "opening/539"
                    expression (src/segment.ml[150,6873+42]..src/segment.ml[186,8011+87]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/segment.ml[150,6873+42]..src/segment.ml[150,6873+60])
                            Tpat_var "just_saw_a_newline/540"
                          expression (src/segment.ml[150,6873+61]..src/segment.ml[186,8011+87]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/segment.ml[150,6873+61]..src/segment.ml[150,6873+67])
                                  Tpat_var "lexbuf/541"
                                expression (src/segment.ml[150,6873+68]..src/segment.ml[186,8011+87]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/segment.ml[150,6873+68]..src/segment.ml[150,6873+85])
                                        Tpat_var "__ocaml_lex_state/542"
                                      expression (src/segment.ml[151,6961+2]..src/segment.ml[186,8011+87])
                                        Texp_match
                                        expression (src/segment.ml[151,6961+8]..src/segment.ml[151,6961+65])
                                          Texp_apply
                                          expression (src/segment.ml[151,6961+8]..src/segment.ml[151,6961+21])
                                            Texp_ident "Stdlib!.Lexing.engine"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[151,6961+22]..src/segment.ml[151,6961+40])
                                                Texp_ident "__ocaml_lex_tables/424"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[151,6961+41]..src/segment.ml[151,6961+58])
                                                Texp_ident "__ocaml_lex_state/542"
                                            <arg>
                                              Nolabel
                                              expression (src/segment.ml[151,6961+59]..src/segment.ml[151,6961+65])
                                                Texp_ident "lexbuf/541"
                                          ]
                                        [
                                          <case>
                                            pattern (src/segment.ml[152,7032+8]..src/segment.ml[152,7032+9])
                                              Tpat_value
                                              pattern (src/segment.ml[152,7032+8]..src/segment.ml[152,7032+9])
                                                Tpat_constant Const_int 0
                                            expression (src/segment.mll[75,7068+4]..src/segment.mll[75,7068+55])
                                              Texp_apply
                                              expression (src/segment.mll[75,7068+6]..src/segment.mll[75,7068+10])
                                                Texp_ident "busy/427"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[75,7068+11]..src/segment.mll[75,7068+19])
                                                    Texp_ident "segments/538"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[75,7068+20]..src/segment.mll[75,7068+27])
                                                    Texp_ident "opening/539"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[75,7068+28]..src/segment.mll[75,7068+46])
                                                    Texp_ident "just_saw_a_newline/540"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[75,7068+47]..src/segment.mll[75,7068+53])
                                                    Texp_ident "lexbuf/541"
                                              ]
                                          <case>
                                            pattern (src/segment.ml[157,7148+4]..src/segment.ml[157,7148+5])
                                              Tpat_value
                                              pattern (src/segment.ml[157,7148+4]..src/segment.ml[157,7148+5])
                                                Tpat_constant Const_int 1
                                            expression (src/segment.mll[77,7180+4]..src/segment.mll[87,7568+43])
                                              Texp_sequence
                                              expression (src/segment.mll[77,7180+6]..src/segment.mll[77,7180+21])
                                                Texp_apply
                                                expression (src/segment.mll[77,7180+6]..src/segment.mll[77,7180+14])
                                                  Texp_ident "Stdlib!.Lexing.new_line"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[77,7180+15]..src/segment.mll[77,7180+21])
                                                      Texp_ident "lexbuf/541"
                                                ]
                                              expression (src/segment.mll[80,7315+6]..src/segment.mll[87,7568+41])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/segment.mll[80,7315+10]..src/segment.mll[80,7315+17])
                                                      Tpat_var "closing/544"
                                                    expression (src/segment.mll[80,7315+20]..src/segment.mll[80,7315+38])
                                                      Texp_field
                                                      expression (src/segment.mll[80,7315+20]..src/segment.mll[80,7315+26])
                                                        Texp_ident "lexbuf/541"
                                                      "lex_start_p"
                                                ]
                                                expression (src/segment.mll[81,7357+6]..src/segment.mll[87,7568+41])
                                                  Texp_ifthenelse
                                                  expression (src/segment.mll[81,7357+9]..src/segment.mll[81,7357+27])
                                                    Texp_ident "just_saw_a_newline/540"
                                                  expression (src/segment.mll[82,7390+8]..src/segment.mll[85,7520+36])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/segment.mll[82,7390+12]..src/segment.mll[82,7390+19])
                                                          Tpat_var "segment/545"
                                                        expression (src/segment.mll[82,7390+22]..src/segment.mll[82,7390+47])
                                                          Texp_tuple
                                                          [
                                                            expression (src/segment.mll[82,7390+22]..src/segment.mll[82,7390+29])
                                                              Texp_construct "Segment"
                                                              []
                                                            expression (src/segment.mll[82,7390+31]..src/segment.mll[82,7390+38])
                                                              Texp_ident "opening/539"
                                                            expression (src/segment.mll[82,7390+40]..src/segment.mll[82,7390+47])
                                                              Texp_ident "closing/544"
                                                          ]
                                                    ]
                                                    expression (src/segment.mll[83,7441+8]..src/segment.mll[85,7520+36])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/segment.mll[83,7441+12]..src/segment.mll[83,7441+20])
                                                            Tpat_var "segments/546"
                                                          expression (src/segment.mll[83,7441+23]..src/segment.mll[83,7441+42])
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/segment.mll[83,7441+23]..src/segment.mll[83,7441+30])
                                                                Texp_ident "segment/545"
                                                              expression (src/segment.mll[83,7441+34]..src/segment.mll[83,7441+42])
                                                                Texp_ident "segments/538"
                                                            ]
                                                      ]
                                                      expression (src/segment.mll[84,7487+8]..src/segment.mll[85,7520+36])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/segment.mll[84,7487+12]..src/segment.mll[84,7487+19])
                                                              Tpat_var "opening/547"
                                                            expression (src/segment.mll[84,7487+22]..src/segment.mll[84,7487+29])
                                                              Texp_ident "closing/544"
                                                        ]
                                                        expression (src/segment.mll[85,7520+8]..src/segment.mll[85,7520+36])
                                                          Texp_apply
                                                          expression (src/segment.mll[85,7520+8]..src/segment.mll[85,7520+12])
                                                            Texp_ident "idle/425"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/segment.mll[85,7520+13]..src/segment.mll[85,7520+20])
                                                                Texp_ident "opening/547"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/segment.mll[85,7520+21]..src/segment.mll[85,7520+29])
                                                                Texp_ident "segments/546"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/segment.mll[85,7520+30]..src/segment.mll[85,7520+36])
                                                                Texp_ident "lexbuf/541"
                                                          ]
                                                  Some
                                                    expression (src/segment.mll[87,7568+8]..src/segment.mll[87,7568+41])
                                                      Texp_apply
                                                      expression (src/segment.mll[87,7568+8]..src/segment.mll[87,7568+12])
                                                        Texp_ident "busy/427"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/segment.mll[87,7568+13]..src/segment.mll[87,7568+21])
                                                            Texp_ident "segments/538"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/segment.mll[87,7568+22]..src/segment.mll[87,7568+29])
                                                            Texp_ident "opening/539"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/segment.mll[87,7568+30]..src/segment.mll[87,7568+34])
                                                            Texp_construct "true"
                                                            []
                                                        <arg>
                                                          Nolabel
                                                          expression (src/segment.mll[87,7568+35]..src/segment.mll[87,7568+41])
                                                            Texp_ident "lexbuf/541"
                                                      ]
                                          <case>
                                            pattern (src/segment.ml[172,7636+4]..src/segment.ml[172,7636+5])
                                              Tpat_value
                                              pattern (src/segment.ml[172,7636+4]..src/segment.ml[172,7636+5])
                                                Tpat_constant Const_int 2
                                            expression (src/segment.mll[89,7668+4]..src/segment.mll[92,7803+25])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/segment.mll[89,7668+10]..src/segment.mll[89,7668+17])
                                                    Tpat_var "closing/548"
                                                  expression (src/segment.mll[89,7668+20]..src/segment.mll[89,7668+38])
                                                    Texp_field
                                                    expression (src/segment.mll[89,7668+20]..src/segment.mll[89,7668+26])
                                                      Texp_ident "lexbuf/541"
                                                    "lex_start_p"
                                              ]
                                              expression (src/segment.mll[90,7710+6]..src/segment.mll[92,7803+23])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/segment.mll[90,7710+10]..src/segment.mll[90,7710+17])
                                                      Tpat_var "segment/549"
                                                    expression (src/segment.mll[90,7710+20]..src/segment.mll[90,7710+45])
                                                      Texp_tuple
                                                      [
                                                        expression (src/segment.mll[90,7710+20]..src/segment.mll[90,7710+27])
                                                          Texp_construct "Segment"
                                                          []
                                                        expression (src/segment.mll[90,7710+29]..src/segment.mll[90,7710+36])
                                                          Texp_ident "opening/539"
                                                        expression (src/segment.mll[90,7710+38]..src/segment.mll[90,7710+45])
                                                          Texp_ident "closing/548"
                                                      ]
                                                ]
                                                expression (src/segment.mll[91,7759+6]..src/segment.mll[92,7803+23])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/segment.mll[91,7759+10]..src/segment.mll[91,7759+18])
                                                        Tpat_var "segments/550"
                                                      expression (src/segment.mll[91,7759+21]..src/segment.mll[91,7759+40])
                                                        Texp_construct "::"
                                                        [
                                                          expression (src/segment.mll[91,7759+21]..src/segment.mll[91,7759+28])
                                                            Texp_ident "segment/549"
                                                          expression (src/segment.mll[91,7759+32]..src/segment.mll[91,7759+40])
                                                            Texp_ident "segments/538"
                                                        ]
                                                  ]
                                                  expression (src/segment.mll[92,7803+6]..src/segment.mll[92,7803+23])
                                                    Texp_apply
                                                    expression (src/segment.mll[92,7803+6]..src/segment.mll[92,7803+14])
                                                      Texp_ident "Stdlib!.List.rev"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/segment.mll[92,7803+15]..src/segment.mll[92,7803+23])
                                                          Texp_ident "segments/550"
                                                    ]
                                          <case>
                                            pattern (src/segment.ml[180,7853+4]..src/segment.ml[180,7853+5])
                                              Tpat_value
                                              pattern (src/segment.ml[180,7853+4]..src/segment.ml[180,7853+5])
                                                Tpat_constant Const_int 3
                                            expression (src/segment.mll[94,7885+4]..src/segment.mll[94,7885+42])
                                              Texp_apply
                                              expression (src/segment.mll[94,7885+6]..src/segment.mll[94,7885+10])
                                                Texp_ident "busy/427"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[94,7885+11]..src/segment.mll[94,7885+19])
                                                    Texp_ident "segments/538"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[94,7885+20]..src/segment.mll[94,7885+27])
                                                    Texp_ident "opening/539"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[94,7885+28]..src/segment.mll[94,7885+33])
                                                    Texp_construct "false"
                                                    []
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[94,7885+34]..src/segment.mll[94,7885+40])
                                                    Texp_ident "lexbuf/541"
                                              ]
                                          <case>
                                            pattern (src/segment.ml[185,7952+4]..src/segment.ml[185,7952+21])
                                              Tpat_value
                                              pattern (src/segment.ml[185,7952+4]..src/segment.ml[185,7952+21])
                                                Tpat_var "__ocaml_lex_state/543"
                                            expression (src/segment.ml[185,7952+25]..src/segment.ml[186,8011+87])
                                              Texp_sequence
                                              expression (src/segment.ml[185,7952+25]..src/segment.ml[185,7952+57])
                                                Texp_apply
                                                expression (src/segment.ml[185,7952+25]..src/segment.ml[185,7952+50])
                                                  Texp_field
                                                  expression (src/segment.ml[185,7952+25]..src/segment.ml[185,7952+31])
                                                    Texp_ident "lexbuf/541"
                                                  "Lexing.refill_buff"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[185,7952+51]..src/segment.ml[185,7952+57])
                                                      Texp_ident "lexbuf/541"
                                                ]
                                              expression (src/segment.ml[186,8011+6]..src/segment.ml[186,8011+87])
                                                Texp_apply
                                                expression (src/segment.ml[186,8011+6]..src/segment.ml[186,8011+26])
                                                  Texp_ident "__ocaml_lex_busy_rec/428"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[186,8011+27]..src/segment.ml[186,8011+35])
                                                      Texp_ident "segments/538"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[186,8011+36]..src/segment.ml[186,8011+43])
                                                      Texp_ident "opening/539"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[186,8011+44]..src/segment.ml[186,8011+62])
                                                      Texp_ident "just_saw_a_newline/540"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[186,8011+63]..src/segment.ml[186,8011+69])
                                                      Texp_ident "lexbuf/541"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.ml[186,8011+70]..src/segment.ml[186,8011+87])
                                                      Texp_ident "__ocaml_lex_state/543"
                                                ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/segment.mll[102,8295+2]..src/segment.mll[120,9120+14])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/segment.mll[102,8295+6]..src/segment.mll[102,8295+13])
          Tpat_var "segment/551"
        expression (src/segment.mll[102,8295+14]..src/segment.mll[120,9120+14]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/segment.mll[102,8295+14]..src/segment.mll[102,8295+22])
                Tpat_var "filename/553"
              expression (src/segment.mll[103,8351+4]..src/segment.mll[120,9120+14])
                extra
                  Texp_constraint
                  core_type (src/segment.mll[102,8295+25]..src/segment.mll[102,8295+53])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/segment.mll[102,8295+26]..src/segment.mll[102,8295+47])
                        Ttyp_tuple
                        [
                          core_type (src/segment.mll[102,8295+26]..src/segment.mll[102,8295+29])
                            Ttyp_constr "tag/397"
                            []
                          core_type (src/segment.mll[102,8295+32]..src/segment.mll[102,8295+38])
                            Ttyp_constr "string/15!"
                            []
                          core_type (src/segment.mll[102,8295+41]..src/segment.mll[102,8295+47])
                            Ttyp_constr "Stdlib!.Lexing.lexbuf"
                            []
                        ]
                    ]
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/segment.mll[103,8351+8]..src/segment.mll[103,8351+15])
                      Tpat_var "content/554"
                    expression (src/segment.mll[103,8351+18]..src/segment.mll[103,8351+45])
                      Texp_apply
                      expression (src/segment.mll[103,8351+18]..src/segment.mll[103,8351+36])
                        Texp_ident "Dune__exe!.IO.read_whole_file"
                      [
                        <arg>
                          Nolabel
                          expression (src/segment.mll[103,8351+37]..src/segment.mll[103,8351+45])
                            Texp_ident "filename/553"
                      ]
                ]
                expression (src/segment.mll[104,8400+4]..src/segment.mll[120,9120+14])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/segment.mll[104,8400+8]..src/segment.mll[104,8400+14])
                        Tpat_var "lexbuf/561"
                      expression (src/segment.mll[104,8400+17]..src/segment.mll[104,8400+36])
                        Texp_apply
                        expression (src/segment.mll[104,8400+17]..src/segment.mll[104,8400+28])
                          Texp_ident "Stdlib!.Lexing.from_string"
                        [
                          <arg>
                            Optional "with_positions"
                            expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                              Texp_construct "None"
                              []
                          <arg>
                            Nolabel
                            expression (src/segment.mll[104,8400+29]..src/segment.mll[104,8400+36])
                              Texp_ident "content/554"
                        ]
                  ]
                  expression (src/segment.mll[105,8440+4]..src/segment.mll[120,9120+14])
                    Texp_sequence
                    expression (src/segment.mll[105,8440+4]..src/segment.mll[105,8440+72])
                      Texp_setfield
                      expression (src/segment.mll[105,8440+4]..src/segment.mll[105,8440+10])
                        Texp_ident "lexbuf/561"
                      "lex_curr_p"
                      expression (src/segment.mll[105,8440+25]..src/segment.mll[105,8440+72])
                        Texp_record
                          fields =
                            [
                              "pos_fname"
                                expression (src/segment.mll[105,8440+62]..src/segment.mll[105,8440+70])
                                  Texp_ident "filename/553"
                              <kept>                              <kept>                              <kept>                            ]
                          representation =
                            Record_regular
                          extended_expression =
                            Some
                              expression (src/segment.mll[105,8440+27]..src/segment.mll[105,8440+44])
                                Texp_field
                                expression (src/segment.mll[105,8440+27]..src/segment.mll[105,8440+33])
                                  Texp_ident "lexbuf/561"
                                "lex_curr_p"
                    expression (src/segment.mll[106,8514+4]..src/segment.mll[120,9120+14])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/segment.mll[106,8514+8]..src/segment.mll[106,8514+16])
                            extra
                              Tpat_extra_constraint
                              core_type (src/segment.mll[106,8514+19]..src/segment.mll[106,8514+51])
                                Ttyp_constr "list/9!"
                                [
                                  core_type (src/segment.mll[106,8514+20]..src/segment.mll[106,8514+45])
                                    Ttyp_tuple
                                    [
                                      core_type (src/segment.mll[106,8514+20]..src/segment.mll[106,8514+23])
                                        Ttyp_constr "tag/397"
                                        []
                                      core_type (src/segment.mll[106,8514+26]..src/segment.mll[106,8514+34])
                                        Ttyp_constr "Stdlib!.Lexing.position"
                                        []
                                      core_type (src/segment.mll[106,8514+37]..src/segment.mll[106,8514+45])
                                        Ttyp_constr "Stdlib!.Lexing.position"
                                        []
                                    ]
                                ]
                            Tpat_alias "segments/562"
                            pattern (src/segment.mll[106,8514+8]..src/segment.mll[106,8514+16])
                              Tpat_any
                          expression (src/segment.mll[107,8568+6]..src/segment.mll[107,8568+38])
                            extra
                              Texp_constraint
                              core_type (src/segment.mll[106,8514+19]..src/segment.mll[106,8514+51])
                                Ttyp_constr "list/9!"
                                [
                                  core_type (src/segment.mll[106,8514+20]..src/segment.mll[106,8514+45])
                                    Ttyp_tuple
                                    [
                                      core_type (src/segment.mll[106,8514+20]..src/segment.mll[106,8514+23])
                                        Ttyp_constr "tag/397"
                                        []
                                      core_type (src/segment.mll[106,8514+26]..src/segment.mll[106,8514+34])
                                        Ttyp_constr "Stdlib!.Lexing.position"
                                        []
                                      core_type (src/segment.mll[106,8514+37]..src/segment.mll[106,8514+45])
                                        Ttyp_constr "Stdlib!.Lexing.position"
                                        []
                                    ]
                                ]
                            Texp_apply
                            expression (src/segment.mll[107,8568+6]..src/segment.mll[107,8568+10])
                              Texp_ident "idle/425"
                            [
                              <arg>
                                Nolabel
                                expression (src/segment.mll[107,8568+11]..src/segment.mll[107,8568+28])
                                  Texp_field
                                  expression (src/segment.mll[107,8568+11]..src/segment.mll[107,8568+17])
                                    Texp_ident "lexbuf/561"
                                  "lex_curr_p"
                              <arg>
                                Nolabel
                                expression (src/segment.mll[107,8568+29]..src/segment.mll[107,8568+31])
                                  Texp_construct "[]"
                                  []
                              <arg>
                                Nolabel
                                expression (src/segment.mll[107,8568+32]..src/segment.mll[107,8568+38])
                                  Texp_ident "lexbuf/561"
                            ]
                      ]
                      expression (src/segment.mll[109,8614+4]..src/segment.mll[120,9120+14])
                        Texp_apply
                        expression (src/segment.mll[109,8614+4]..src/segment.mll[109,8614+12])
                          Texp_ident "Stdlib!.List.map"
                        [
                          <arg>
                            Nolabel
                            expression (src/segment.mll[109,8614+13]..src/segment.mll[120,9120+5])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/segment.mll[109,8614+18]..src/segment.mll[109,8614+37])
                                    Tpat_tuple
                                    [
                                      pattern (src/segment.mll[109,8614+19]..src/segment.mll[109,8614+22])
                                        Tpat_var "tag/563"
                                      pattern (src/segment.mll[109,8614+24]..src/segment.mll[109,8614+30])
                                        Tpat_var "startp/564"
                                      pattern (src/segment.mll[109,8614+32]..src/segment.mll[109,8614+36])
                                        Tpat_var "endp/565"
                                    ]
                                  expression (src/segment.mll[110,8655+6]..src/segment.mll[119,9093+26])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/segment.mll[110,8655+10]..src/segment.mll[110,8655+15])
                                          Tpat_var "start/566"
                                        expression (src/segment.mll[110,8655+18]..src/segment.mll[110,8655+33])
                                          Texp_field
                                          expression (src/segment.mll[110,8655+18]..src/segment.mll[110,8655+24])
                                            Texp_ident "startp/564"
                                          "pos_cnum"
                                    ]
                                    expression (src/segment.mll[111,8692+6]..src/segment.mll[119,9093+26])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/segment.mll[111,8692+10]..src/segment.mll[111,8692+16])
                                            Tpat_var "length/567"
                                          expression (src/segment.mll[111,8692+19]..src/segment.mll[111,8692+40])
                                            Texp_apply
                                            expression (src/segment.mll[111,8692+33]..src/segment.mll[111,8692+34])
                                              Texp_ident "Stdlib!.-"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/segment.mll[111,8692+19]..src/segment.mll[111,8692+32])
                                                  Texp_field
                                                  expression (src/segment.mll[111,8692+19]..src/segment.mll[111,8692+23])
                                                    Texp_ident "endp/565"
                                                  "pos_cnum"
                                              <arg>
                                                Nolabel
                                                expression (src/segment.mll[111,8692+35]..src/segment.mll[111,8692+40])
                                                  Texp_ident "start/566"
                                            ]
                                      ]
                                      expression (src/segment.mll[112,8736+6]..src/segment.mll[119,9093+26])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/segment.mll[112,8736+10]..src/segment.mll[112,8736+17])
                                              Tpat_var "content/568"
                                            expression (src/segment.mll[112,8736+20]..src/segment.mll[112,8736+51])
                                              Texp_apply
                                              expression (src/segment.mll[112,8736+20]..src/segment.mll[112,8736+30])
                                                Texp_ident "Stdlib!.String.sub"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[112,8736+31]..src/segment.mll[112,8736+38])
                                                    Texp_ident "content/554"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[112,8736+39]..src/segment.mll[112,8736+44])
                                                    Texp_ident "start/566"
                                                <arg>
                                                  Nolabel
                                                  expression (src/segment.mll[112,8736+45]..src/segment.mll[112,8736+51])
                                                    Texp_ident "length/567"
                                              ]
                                        ]
                                        expression (src/segment.mll[113,8791+6]..src/segment.mll[119,9093+26])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/segment.mll[113,8791+10]..src/segment.mll[113,8791+16])
                                                Tpat_var "lexbuf/638"
                                              expression (src/segment.mll[113,8791+19]..src/segment.mll[113,8791+38])
                                                Texp_apply
                                                expression (src/segment.mll[113,8791+19]..src/segment.mll[113,8791+30])
                                                  Texp_ident "Stdlib!.Lexing.from_string"
                                                [
                                                  <arg>
                                                    Optional "with_positions"
                                                    expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                                      Texp_construct "None"
                                                      []
                                                  <arg>
                                                    Nolabel
                                                    expression (src/segment.mll[113,8791+31]..src/segment.mll[113,8791+38])
                                                      Texp_ident "content/568"
                                                ]
                                          ]
                                          expression (src/segment.mll[114,8833+6]..src/segment.mll[119,9093+26])
                                            Texp_sequence
                                            expression (src/segment.mll[114,8833+6]..src/segment.mll[114,8833+34])
                                              Texp_setfield
                                              expression (src/segment.mll[114,8833+6]..src/segment.mll[114,8833+12])
                                                Texp_ident "lexbuf/638"
                                              "lex_start_p"
                                              expression (src/segment.mll[114,8833+28]..src/segment.mll[114,8833+34])
                                                Texp_ident "startp/564"
                                            expression (src/segment.mll[115,8869+6]..src/segment.mll[119,9093+26])
                                              Texp_sequence
                                              expression (src/segment.mll[115,8869+6]..src/segment.mll[115,8869+33])
                                                Texp_setfield
                                                expression (src/segment.mll[115,8869+6]..src/segment.mll[115,8869+12])
                                                  Texp_ident "lexbuf/638"
                                                "lex_curr_p"
                                                expression (src/segment.mll[115,8869+27]..src/segment.mll[115,8869+33])
                                                  Texp_ident "startp/564"
                                              expression (src/segment.mll[116,8904+6]..src/segment.mll[119,9093+26])
                                                Texp_sequence
                                                expression (src/segment.mll[116,8904+6]..src/segment.mll[116,8904+43])
                                                  Texp_setfield
                                                  expression (src/segment.mll[116,8904+6]..src/segment.mll[116,8904+12])
                                                    Texp_ident "lexbuf/638"
                                                  "lex_abs_pos"
                                                  expression (src/segment.mll[116,8904+28]..src/segment.mll[116,8904+43])
                                                    Texp_field
                                                    expression (src/segment.mll[116,8904+28]..src/segment.mll[116,8904+34])
                                                      Texp_ident "startp/564"
                                                    "pos_cnum"
                                                expression (src/segment.mll[119,9093+6]..src/segment.mll[119,9093+26])
                                                  Texp_tuple
                                                  [
                                                    expression (src/segment.mll[119,9093+6]..src/segment.mll[119,9093+9])
                                                      Texp_ident "tag/563"
                                                    expression (src/segment.mll[119,9093+11]..src/segment.mll[119,9093+18])
                                                      Texp_ident "content/568"
                                                    expression (src/segment.mll[119,9093+20]..src/segment.mll[119,9093+26])
                                                      Texp_ident "lexbuf/638"
                                                  ]
                              ]
                          <arg>
                            Nolabel
                            expression (src/segment.mll[120,9120+6]..src/segment.mll[120,9120+14])
                              Texp_ident "segments/562"
                        ]
          ]
    ]
]

{<Dune__exe__Segment>
 "__ocaml_lex_busy_rec"[value] -> <Dune__exe__Segment.7>;
 "__ocaml_lex_idle_rec"[value] -> <Dune__exe__Segment.5>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Segment.3>;
 "busy"[value] -> <Dune__exe__Segment.6>;
 "idle"[value] -> <Dune__exe__Segment.4>;
 "segment"[value] -> <Dune__exe__Segment.40>;
 "tag"[type] -> <Dune__exe__Segment.0>;
 }

(seq
  (let
    (__ocaml_lex_tables/424 =
       [0:
        "\000\000\251\255\252\255\001\000\002\000\254\255\255\255\005\000\253\255\006\000\b\000\252\255\253\255\n\000\254\255\255\255"
        "\255\255\255\255\255\255\004\000\001\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255"
        "\001\000\000\000\000\000\t\000\255\255\000\000\000\000\255\255\000\000\t\000\011\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\005\000\b\000\005\000\004\000\007\000\b\000\b\000\015\000\014\000\007\000\014\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\003\000\004\000\000\000\003\000\007\000\t\000\n\000\n\000\t\000\r\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\nt\000\255\255\n\000\255\255\255\255"
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__Segment!)
      __ocaml_lex_tables/424))
  (letrec
    (idle/425
       (function opening/429 segments/430 lexbuf/431
         (apply __ocaml_lex_idle_rec/426 opening/429 segments/430 lexbuf/431
           0))
      __ocaml_lex_idle_rec/426
        (function opening/432 segments/433 lexbuf/434
          __ocaml_lex_state/435[int]
          (let
            (__ocaml_lex_state/460 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Segment!))
                 __ocaml_lex_state/435 lexbuf/434))
            (catch
              (catch
                (if (isout 4 __ocaml_lex_state/460) (exit 1)
                  (switch* __ocaml_lex_state/460
                   case int 0:
                    (apply idle/425 opening/432 segments/433 lexbuf/434)
                   case int 1: (exit 2)
                   case int 2: (exit 2)
                   case int 3:
                    (let
                      (closing/461 = (field_mut 10 lexbuf/434)
                       segment/462 =
                         (makeblock 0 (int,*,*) 1 opening/432 closing/461)
                       segments/463 = (makeblock 0 segment/462 segments/433))
                      (apply (field_imm 9 (global Stdlib__List!))
                        segments/463))
                   case int 4:
                    (let
                      (closing/530 = (field_mut 10 lexbuf/434)
                       segment/531 =
                         (makeblock 0 (int,*,*) 1 opening/432 closing/530)
                       segments/532 = (makeblock 0 segment/531 segments/433)
                       opening/533 = closing/530)
                      (apply busy/427 segments/532 opening/533 0 lexbuf/434))))
               with (2)
                (seq
                  (apply (field_imm 13 (global Stdlib__Lexing!)) lexbuf/434)
                  (apply idle/425 opening/432 segments/433 lexbuf/434)))
             with (1)
              (seq (apply (field_imm 0 lexbuf/434) lexbuf/434)
                (apply __ocaml_lex_idle_rec/426 opening/432 segments/433
                  lexbuf/434 __ocaml_lex_state/460)))))
      busy/427
        (function segments/534 opening/535 just_saw_a_newline/536[int]
          lexbuf/537
          (apply __ocaml_lex_busy_rec/428 segments/534 opening/535
            just_saw_a_newline/536 lexbuf/537 10))
      __ocaml_lex_busy_rec/428
        (function segments/538 opening/539 just_saw_a_newline/540[int]
          lexbuf/541 __ocaml_lex_state/542[int]
          (let
            (__ocaml_lex_state/543 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Segment!))
                 __ocaml_lex_state/542 lexbuf/541))
            (catch
              (if (isout 3 __ocaml_lex_state/543) (exit 3)
                (switch* __ocaml_lex_state/543
                 case int 0:
                  (apply busy/427 segments/538 opening/539
                    just_saw_a_newline/540 lexbuf/541)
                 case int 1:
                  (seq
                    (apply (field_imm 13 (global Stdlib__Lexing!))
                      lexbuf/541)
                    (let (closing/544 = (field_mut 10 lexbuf/541))
                      (if just_saw_a_newline/540
                        (let
                          (segment/545 =
                             (makeblock 0 (int,*,*) 0 opening/539
                               closing/544)
                           segments/546 =
                             (makeblock 0 segment/545 segments/538)
                           opening/547 = closing/544)
                          (apply idle/425 opening/547 segments/546
                            lexbuf/541))
                        (apply busy/427 segments/538 opening/539 1
                          lexbuf/541))))
                 case int 2:
                  (let
                    (closing/548 = (field_mut 10 lexbuf/541)
                     segment/549 =
                       (makeblock 0 (int,*,*) 0 opening/539 closing/548)
                     segments/550 = (makeblock 0 segment/549 segments/538))
                    (apply (field_imm 9 (global Stdlib__List!)) segments/550))
                 case int 3:
                  (apply busy/427 segments/538 opening/539 0 lexbuf/541)))
             with (3)
              (seq (apply (field_imm 0 lexbuf/541) lexbuf/541)
                (apply __ocaml_lex_busy_rec/428 segments/538 opening/539
                  just_saw_a_newline/540 lexbuf/541 __ocaml_lex_state/543))))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__Segment!) idle/425)
      (setfield_ptr(root-init) 2 (global Dune__exe__Segment!)
        __ocaml_lex_idle_rec/426)
      (setfield_ptr(root-init) 3 (global Dune__exe__Segment!) busy/427)
      (setfield_ptr(root-init) 4 (global Dune__exe__Segment!)
        __ocaml_lex_busy_rec/428)))
  (let
    (segment/551 =
       (function filename/553
         (let
           (content/554 =
              (apply (field_imm 5 (global Dune__exe__IO!)) filename/553)
            lexbuf/561 =
              (apply (field_imm 2 (global Stdlib__Lexing!)) 0 content/554))
           (seq
             (setfield_ptr 11 lexbuf/561
               (let (init/1077 = (field_mut 11 lexbuf/561))
                 (makeblock 0 (*,int,int,int) filename/553
                   (field_int 1 init/1077) (field_int 2 init/1077)
                   (field_int 3 init/1077))))
             (let
               (segments/562 =
                  (apply (field_imm 1 (global Dune__exe__Segment!))
                    (field_mut 11 lexbuf/561) 0 lexbuf/561))
               (apply (field_imm 19 (global Stdlib__List!))
                 (function (param/1073[int], param/1074, param/1075)
                   (let
                     (endp/565 =a param/1075
                      startp/564 =a param/1074
                      tag/563 =a param/1073
                      start/566 =[int] (field_int 3 startp/564)
                      length/567 =[int] (- (field_int 3 endp/565) start/566)
                      content/568 =
                        (apply (field_imm 15 (global Stdlib__String!))
                          content/554 start/566 length/567)
                      lexbuf/638 =
                        (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                          content/568))
                     (seq (setfield_ptr 10 lexbuf/638 startp/564)
                       (setfield_ptr 11 lexbuf/638 startp/564)
                       (setfield_imm 3 lexbuf/638 (field_int 3 startp/564))
                       (makeblock 0 (int,*,*) tag/563 content/568 lexbuf/638))))
                 segments/562))))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Segment!) segment/551))
  0)
(seq
  (let
    (__ocaml_lex_tables/424 =
       [0:
        "\000\000\251\255\252\255\001\000\002\000\254\255\255\255\005\000\253\255\006\000\b\000\252\255\253\255\n\000\254\255\255\255"
        "\255\255\255\255\255\255\004\000\001\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255"
        "\001\000\000\000\000\000\t\000\255\255\000\000\000\000\255\255\000\000\t\000\011\000\000\000\000\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\005\000\b\000\005\000\004\000\007\000\b\000\b\000\015\000\014\000\007\000\014\000\r
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\003\000\004\000\000\000\003\000\007\000\t\000\n\000\n\000\t\000\r\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\n\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\nt\000\255\255\n\000\255\255\255\255"
        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__Segment!)
      __ocaml_lex_tables/424))
  (letrec
    (idle/425
       (function opening/429 segments/430 lexbuf/431
         (apply __ocaml_lex_idle_rec/426 opening/429 segments/430 lexbuf/431
           0))
      __ocaml_lex_idle_rec/426
        (function opening/432 segments/433 lexbuf/434
          __ocaml_lex_state/435[int]
          (let
            (__ocaml_lex_state/460 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Segment!))
                 __ocaml_lex_state/435 lexbuf/434))
            (catch
              (if (isout 4 __ocaml_lex_state/460)
                (seq (apply (field_imm 0 lexbuf/434) lexbuf/434)
                  (apply __ocaml_lex_idle_rec/426 opening/432 segments/433
                    lexbuf/434 __ocaml_lex_state/460))
                (switch* __ocaml_lex_state/460
                 case int 0:
                  (apply idle/425 opening/432 segments/433 lexbuf/434)
                 case int 1: (exit 2)
                 case int 2: (exit 2)
                 case int 3:
                  (let
                    (closing/461 = (field_mut 10 lexbuf/434)
                     segment/462 =
                       (makeblock 0 (int,*,*) 1 opening/432 closing/461)
                     segments/463 = (makeblock 0 segment/462 segments/433))
                    (apply (field_imm 9 (global Stdlib__List!)) segments/463))
                 case int 4:
                  (let
                    (closing/530 = (field_mut 10 lexbuf/434)
                     segment/531 =
                       (makeblock 0 (int,*,*) 1 opening/432 closing/530)
                     segments/532 = (makeblock 0 segment/531 segments/433))
                    (apply busy/427 segments/532 closing/530 0 lexbuf/434))))
             with (2)
              (seq (apply (field_imm 13 (global Stdlib__Lexing!)) lexbuf/434)
                (apply idle/425 opening/432 segments/433 lexbuf/434)))))
      busy/427
        (function segments/534 opening/535 just_saw_a_newline/536[int]
          lexbuf/537
          (apply __ocaml_lex_busy_rec/428 segments/534 opening/535
            just_saw_a_newline/536 lexbuf/537 10))
      __ocaml_lex_busy_rec/428
        (function segments/538 opening/539 just_saw_a_newline/540[int]
          lexbuf/541 __ocaml_lex_state/542[int]
          (let
            (__ocaml_lex_state/543 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__Segment!))
                 __ocaml_lex_state/542 lexbuf/541))
            (if (isout 3 __ocaml_lex_state/543)
              (seq (apply (field_imm 0 lexbuf/541) lexbuf/541)
                (apply __ocaml_lex_busy_rec/428 segments/538 opening/539
                  just_saw_a_newline/540 lexbuf/541 __ocaml_lex_state/543))
              (switch* __ocaml_lex_state/543
               case int 0:
                (apply busy/427 segments/538 opening/539
                  just_saw_a_newline/540 lexbuf/541)
               case int 1:
                (seq
                  (apply (field_imm 13 (global Stdlib__Lexing!)) lexbuf/541)
                  (let (closing/544 = (field_mut 10 lexbuf/541))
                    (if just_saw_a_newline/540
                      (let
                        (segment/545 =
                           (makeblock 0 (int,*,*) 0 opening/539 closing/544)
                         segments/546 =
                           (makeblock 0 segment/545 segments/538))
                        (apply idle/425 closing/544 segments/546 lexbuf/541))
                      (apply busy/427 segments/538 opening/539 1 lexbuf/541))))
               case int 2:
                (let
                  (closing/548 = (field_mut 10 lexbuf/541)
                   segment/549 =
                     (makeblock 0 (int,*,*) 0 opening/539 closing/548)
                   segments/550 = (makeblock 0 segment/549 segments/538))
                  (apply (field_imm 9 (global Stdlib__List!)) segments/550))
               case int 3:
                (apply busy/427 segments/538 opening/539 0 lexbuf/541))))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__Segment!) idle/425)
      (setfield_ptr(root-init) 2 (global Dune__exe__Segment!)
        __ocaml_lex_idle_rec/426)
      (setfield_ptr(root-init) 3 (global Dune__exe__Segment!) busy/427)
      (setfield_ptr(root-init) 4 (global Dune__exe__Segment!)
        __ocaml_lex_busy_rec/428)))
  (let
    (segment/551 =
       (function filename/553
         (let
           (content/554 =
              (apply (field_imm 5 (global Dune__exe__IO!)) filename/553)
            lexbuf/561 =
              (apply (field_imm 2 (global Stdlib__Lexing!)) 0 content/554))
           (seq
             (setfield_ptr 11 lexbuf/561
               (let (init/1077 = (field_mut 11 lexbuf/561))
                 (makeblock 0 (*,int,int,int) filename/553
                   (field_int 1 init/1077) (field_int 2 init/1077)
                   (field_int 3 init/1077))))
             (let
               (segments/562 =
                  (apply (field_imm 1 (global Dune__exe__Segment!))
                    (field_mut 11 lexbuf/561) 0 lexbuf/561))
               (apply (field_imm 19 (global Stdlib__List!))
                 (function (param/1073[int], param/1074, param/1075)
                   (let
                     (start/566 =[int] (field_int 3 param/1074)
                      length/567 =[int]
                        (- (field_int 3 param/1075) start/566)
                      content/568 =
                        (apply (field_imm 15 (global Stdlib__String!))
                          content/554 start/566 length/567)
                      lexbuf/638 =
                        (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                          content/568))
                     (seq (setfield_ptr 10 lexbuf/638 param/1074)
                       (setfield_ptr 11 lexbuf/638 param/1074)
                       (setfield_imm 3 lexbuf/638 (field_int 3 param/1074))
                       (makeblock 0 (int,*,*) param/1073 content/568
                         lexbuf/638))))
                 segments/562))))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Segment!) segment/551))
  0)

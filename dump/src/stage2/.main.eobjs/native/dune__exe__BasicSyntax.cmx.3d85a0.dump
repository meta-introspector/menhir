[
  structure_item (src/basicSyntax.ml[14,1001+0]..[14,1001+11])
    Pstr_open Fresh
    module_expr (src/basicSyntax.ml[14,1001+5]..[14,1001+11])
      Pmod_ident "Syntax" (src/basicSyntax.ml[14,1001+5]..[14,1001+11])
  structure_item (src/basicSyntax.ml[38,2053+0]..[42,2189+3])
    Pstr_type Rec
    [
      type_declaration "producer" (src/basicSyntax.ml[38,2053+5]..[38,2053+13]) (src/basicSyntax.ml[38,2053+0]..[42,2189+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/basicSyntax.ml[39,2071+4]..[39,2071+45])
                Immutable
                "producer_identifier" (src/basicSyntax.ml[39,2071+4]..[39,2071+23])                core_type (src/basicSyntax.ml[39,2071+26]..[39,2071+44])
                  Ptyp_constr "located" (src/basicSyntax.ml[39,2071+37]..[39,2071+44])
                  [
                    core_type (src/basicSyntax.ml[39,2071+26]..[39,2071+36])
                      Ptyp_constr "identifier" (src/basicSyntax.ml[39,2071+26]..[39,2071+36])
                      []
                  ]
              (src/basicSyntax.ml[40,2117+4]..[40,2117+33])
                Immutable
                "producer_symbol" (src/basicSyntax.ml[40,2117+4]..[40,2117+19])                core_type (src/basicSyntax.ml[40,2117+26]..[40,2117+32])
                  Ptyp_constr "symbol" (src/basicSyntax.ml[40,2117+26]..[40,2117+32])
                  []
              (src/basicSyntax.ml[41,2151+4]..[41,2151+37])
                Immutable
                "producer_attributes" (src/basicSyntax.ml[41,2151+4]..[41,2151+23])                core_type (src/basicSyntax.ml[41,2151+26]..[41,2151+36])
                  Ptyp_constr "attributes" (src/basicSyntax.ml[41,2151+26]..[41,2151+36])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[44,2194+0]..[45,2211+15])
    Pstr_type Rec
    [
      type_declaration "producers" (src/basicSyntax.ml[44,2194+5]..[44,2194+14]) (src/basicSyntax.ml[44,2194+0]..[45,2211+15])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/basicSyntax.ml[45,2211+2]..[45,2211+15])
              Ptyp_constr "list" (src/basicSyntax.ml[45,2211+11]..[45,2211+15])
              [
                core_type (src/basicSyntax.ml[45,2211+2]..[45,2211+10])
                  Ptyp_constr "producer" (src/basicSyntax.ml[45,2211+2]..[45,2211+10])
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[52,2436+0]..[58,2682+3])
    Pstr_type Rec
    [
      type_declaration "branch" (src/basicSyntax.ml[52,2436+5]..[52,2436+11]) (src/basicSyntax.ml[52,2436+0]..[58,2682+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/basicSyntax.ml[53,2452+4]..[53,2452+42])
                Immutable
                "branch_position" (src/basicSyntax.ml[53,2452+4]..[53,2452+19])                core_type (src/basicSyntax.ml[53,2452+30]..[53,2452+41])
                  Ptyp_constr "Positions.t" (src/basicSyntax.ml[53,2452+30]..[53,2452+41])
                  []
              (src/basicSyntax.ml[54,2495+4]..[54,2495+40])
                Immutable
                "producers" (src/basicSyntax.ml[54,2495+4]..[54,2495+13])                core_type (src/basicSyntax.ml[54,2495+30]..[54,2495+39])
                  Ptyp_constr "producers" (src/basicSyntax.ml[54,2495+30]..[54,2495+39])
                  []
              (src/basicSyntax.ml[55,2536+4]..[55,2536+37])
                Immutable
                "action" (src/basicSyntax.ml[55,2536+4]..[55,2536+10])                core_type (src/basicSyntax.ml[55,2536+30]..[55,2536+36])
                  Ptyp_constr "action" (src/basicSyntax.ml[55,2536+30]..[55,2536+36])
                  []
              (src/basicSyntax.ml[56,2574+4]..[56,2574+53])
                Immutable
                "branch_prec_annotation" (src/basicSyntax.ml[56,2574+4]..[56,2574+26])                core_type (src/basicSyntax.ml[56,2574+30]..[56,2574+52])
                  Ptyp_constr "branch_prec_annotation" (src/basicSyntax.ml[56,2574+30]..[56,2574+52])
                  []
              (src/basicSyntax.ml[57,2628+4]..[57,2628+53])
                Immutable
                "branch_production_level" (src/basicSyntax.ml[57,2628+4]..[57,2628+27])                core_type (src/basicSyntax.ml[57,2628+30]..[57,2628+53])
                  Ptyp_constr "branch_production_level" (src/basicSyntax.ml[57,2628+30]..[57,2628+53])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[60,2687+0]..[61,2703+13])
    Pstr_type Rec
    [
      type_declaration "branches" (src/basicSyntax.ml[60,2687+5]..[60,2687+13]) (src/basicSyntax.ml[60,2687+0]..[61,2703+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/basicSyntax.ml[61,2703+2]..[61,2703+13])
              Ptyp_constr "list" (src/basicSyntax.ml[61,2703+9]..[61,2703+13])
              [
                core_type (src/basicSyntax.ml[61,2703+2]..[61,2703+8])
                  Ptyp_constr "branch" (src/basicSyntax.ml[61,2703+2]..[61,2703+8])
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[70,2988+0]..[75,3120+3])
    Pstr_type Rec
    [
      type_declaration "rule" (src/basicSyntax.ml[70,2988+5]..[70,2988+9]) (src/basicSyntax.ml[70,2988+0]..[75,3120+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/basicSyntax.ml[71,3002+4]..[71,3002+27])
                Immutable
                "branches" (src/basicSyntax.ml[71,3002+4]..[71,3002+12])                core_type (src/basicSyntax.ml[71,3002+18]..[71,3002+26])
                  Ptyp_constr "branches" (src/basicSyntax.ml[71,3002+18]..[71,3002+26])
                  []
              (src/basicSyntax.ml[72,3030+4]..[72,3030+35])
                Immutable
                "positions" (src/basicSyntax.ml[72,3030+4]..[72,3030+13])                core_type (src/basicSyntax.ml[72,3030+18]..[72,3030+34])
                  Ptyp_constr "list" (src/basicSyntax.ml[72,3030+30]..[72,3030+34])
                  [
                    core_type (src/basicSyntax.ml[72,3030+18]..[72,3030+29])
                      Ptyp_constr "Positions.t" (src/basicSyntax.ml[72,3030+18]..[72,3030+29])
                      []
                  ]
              (src/basicSyntax.ml[73,3066+4]..[73,3066+23])
                Immutable
                "inline_flag" (src/basicSyntax.ml[73,3066+4]..[73,3066+15])                core_type (src/basicSyntax.ml[73,3066+18]..[73,3066+22])
                  Ptyp_constr "bool" (src/basicSyntax.ml[73,3066+18]..[73,3066+22])
                  []
              (src/basicSyntax.ml[74,3090+4]..[74,3090+29])
                Immutable
                "attributes" (src/basicSyntax.ml[74,3090+4]..[74,3090+14])                core_type (src/basicSyntax.ml[74,3090+18]..[74,3090+28])
                  Ptyp_constr "attributes" (src/basicSyntax.ml[74,3090+18]..[74,3090+28])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[83,3435+0]..[93,3851+3])
    Pstr_type Rec
    [
      type_declaration "grammar" (src/basicSyntax.ml[83,3435+5]..[83,3435+12]) (src/basicSyntax.ml[83,3435+0]..[93,3851+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/basicSyntax.ml[84,3453+4]..[84,3453+37])
                Immutable
                "preludes" (src/basicSyntax.ml[84,3453+4]..[84,3453+12])                core_type (src/basicSyntax.ml[84,3453+22]..[84,3453+36])
                  Ptyp_constr "list" (src/basicSyntax.ml[84,3453+32]..[84,3453+36])
                  [
                    core_type (src/basicSyntax.ml[84,3453+22]..[84,3453+31])
                      Ptyp_constr "Stretch.t" (src/basicSyntax.ml[84,3453+22]..[84,3453+31])
                      []
                  ]
              (src/basicSyntax.ml[85,3491+4]..[85,3491+43])
                Immutable
                "postludes" (src/basicSyntax.ml[85,3491+4]..[85,3491+13])                core_type (src/basicSyntax.ml[85,3491+22]..[85,3491+42])
                  Ptyp_constr "list" (src/basicSyntax.ml[85,3491+38]..[85,3491+42])
                  [
                    core_type (src/basicSyntax.ml[85,3491+22]..[85,3491+37])
                      Ptyp_constr "Syntax.postlude" (src/basicSyntax.ml[85,3491+22]..[85,3491+37])
                      []
                  ]
              (src/basicSyntax.ml[86,3535+4]..[86,3535+37])
                Immutable
                "parameters" (src/basicSyntax.ml[86,3535+4]..[86,3535+14])                core_type (src/basicSyntax.ml[86,3535+22]..[86,3535+36])
                  Ptyp_constr "list" (src/basicSyntax.ml[86,3535+32]..[86,3535+36])
                  [
                    core_type (src/basicSyntax.ml[86,3535+22]..[86,3535+31])
                      Ptyp_constr "Stretch.t" (src/basicSyntax.ml[86,3535+22]..[86,3535+31])
                      []
                  ]
              (src/basicSyntax.ml[87,3573+4]..[87,3573+34])
                Immutable
                "start_symbols" (src/basicSyntax.ml[87,3573+4]..[87,3573+17])                core_type (src/basicSyntax.ml[87,3573+22]..[87,3573+33])
                  Ptyp_constr "StringSet.t" (src/basicSyntax.ml[87,3573+22]..[87,3573+33])
                  []
              (src/basicSyntax.ml[88,3608+4]..[88,3608+52])
                Immutable
                "types" (src/basicSyntax.ml[88,3608+4]..[88,3608+9])                core_type (src/basicSyntax.ml[88,3608+22]..[88,3608+51])
                  Ptyp_constr "StringMap.t" (src/basicSyntax.ml[88,3608+40]..[88,3608+51])
                  [
                    core_type (src/basicSyntax.ml[88,3608+22]..[88,3608+39])
                      Ptyp_constr "Stretch.ocamltype" (src/basicSyntax.ml[88,3608+22]..[88,3608+39])
                      []
                  ]
              (src/basicSyntax.ml[89,3661+4]..[89,3661+58])
                Immutable
                "tokens" (src/basicSyntax.ml[89,3661+4]..[89,3661+10])                core_type (src/basicSyntax.ml[89,3661+22]..[89,3661+57])
                  Ptyp_constr "StringMap.t" (src/basicSyntax.ml[89,3661+46]..[89,3661+57])
                  [
                    core_type (src/basicSyntax.ml[89,3661+22]..[89,3661+45])
                      Ptyp_constr "Syntax.token_properties" (src/basicSyntax.ml[89,3661+22]..[89,3661+45])
                      []
                  ]
              (src/basicSyntax.ml[90,3720+4]..[90,3720+56])
                Immutable
                "on_error_reduce" (src/basicSyntax.ml[90,3720+4]..[90,3720+19])                core_type (src/basicSyntax.ml[90,3720+22]..[90,3720+55])
                  Ptyp_constr "StringMap.t" (src/basicSyntax.ml[90,3720+44]..[90,3720+55])
                  [
                    core_type (src/basicSyntax.ml[90,3720+22]..[90,3720+43])
                      Ptyp_constr "on_error_reduce_level" (src/basicSyntax.ml[90,3720+22]..[90,3720+43])
                      []
                  ]
              (src/basicSyntax.ml[91,3777+4]..[91,3777+33])
                Immutable
                "gr_attributes" (src/basicSyntax.ml[91,3777+4]..[91,3777+17])                core_type (src/basicSyntax.ml[91,3777+22]..[91,3777+32])
                  Ptyp_constr "attributes" (src/basicSyntax.ml[91,3777+22]..[91,3777+32])
                  []
              (src/basicSyntax.ml[92,3811+4]..[92,3811+39])
                Immutable
                "rules" (src/basicSyntax.ml[92,3811+4]..[92,3811+9])                core_type (src/basicSyntax.ml[92,3811+22]..[92,3811+38])
                  Ptyp_constr "StringMap.t" (src/basicSyntax.ml[92,3811+27]..[92,3811+38])
                  [
                    core_type (src/basicSyntax.ml[92,3811+22]..[92,3811+26])
                      Ptyp_constr "rule" (src/basicSyntax.ml[92,3811+22]..[92,3811+26])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[99,3980+0]..[100,4043+37])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[99,3980+4]..[99,3980+23])
          Ppat_var "producer_identifier" (src/basicSyntax.ml[99,3980+4]..[99,3980+23])
        expression (src/basicSyntax.ml[99,3980+24]..[100,4043+37]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[99,3980+24]..[99,3980+47])
            Ppat_record Closed
            [
              "producer_identifier" (src/basicSyntax.ml[99,3980+26]..[99,3980+45]) ghost
                pattern (src/basicSyntax.ml[99,3980+26]..[99,3980+45])
                  Ppat_var "producer_identifier" (src/basicSyntax.ml[99,3980+26]..[99,3980+45])
            ]
          expression (src/basicSyntax.ml[99,3980+48]..[100,4043+37])
            Pexp_constraint
            expression (src/basicSyntax.ml[100,4043+2]..[100,4043+37])
              Pexp_apply
              expression (src/basicSyntax.ml[100,4043+2]..[100,4043+17])
                Pexp_ident "Positions.value" (src/basicSyntax.ml[100,4043+2]..[100,4043+17])
              [
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[100,4043+18]..[100,4043+37])
                    Pexp_ident "producer_identifier" (src/basicSyntax.ml[100,4043+18]..[100,4043+37])
              ]
            core_type (src/basicSyntax.ml[99,3980+50]..[99,3980+60])
              Ptyp_constr "identifier" (src/basicSyntax.ml[99,3980+50]..[99,3980+60])
              []
    ]
  structure_item (src/basicSyntax.ml[102,4082+0]..[103,4161+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[102,4082+4]..[102,4082+31])
          Ppat_var "producer_identifier_located" (src/basicSyntax.ml[102,4082+4]..[102,4082+31])
        expression (src/basicSyntax.ml[102,4082+32]..[103,4161+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[102,4082+32]..[102,4082+55])
            Ppat_record Closed
            [
              "producer_identifier" (src/basicSyntax.ml[102,4082+34]..[102,4082+53]) ghost
                pattern (src/basicSyntax.ml[102,4082+34]..[102,4082+53])
                  Ppat_var "producer_identifier" (src/basicSyntax.ml[102,4082+34]..[102,4082+53])
            ]
          expression (src/basicSyntax.ml[102,4082+56]..[103,4161+21])
            Pexp_constraint
            expression (src/basicSyntax.ml[103,4161+2]..[103,4161+21])
              Pexp_ident "producer_identifier" (src/basicSyntax.ml[103,4161+2]..[103,4161+21])
            core_type (src/basicSyntax.ml[102,4082+58]..[102,4082+76])
              Ptyp_constr "located" (src/basicSyntax.ml[102,4082+69]..[102,4082+76])
              [
                core_type (src/basicSyntax.ml[102,4082+58]..[102,4082+68])
                  Ptyp_constr "identifier" (src/basicSyntax.ml[102,4082+58]..[102,4082+68])
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[105,4184+0]..[106,4226+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[105,4184+4]..[105,4184+19])
          Ppat_var "producer_symbol" (src/basicSyntax.ml[105,4184+4]..[105,4184+19])
        expression (src/basicSyntax.ml[105,4184+20]..[106,4226+17]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[105,4184+20]..[105,4184+39])
            Ppat_record Closed
            [
              "producer_symbol" (src/basicSyntax.ml[105,4184+22]..[105,4184+37]) ghost
                pattern (src/basicSyntax.ml[105,4184+22]..[105,4184+37])
                  Ppat_var "producer_symbol" (src/basicSyntax.ml[105,4184+22]..[105,4184+37])
            ]
          expression (src/basicSyntax.ml[106,4226+2]..[106,4226+17])
            Pexp_ident "producer_symbol" (src/basicSyntax.ml[106,4226+2]..[106,4226+17])
    ]
  structure_item (src/basicSyntax.ml[108,4245+0]..[109,4295+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[108,4245+4]..[108,4245+23])
          Ppat_var "producer_attributes" (src/basicSyntax.ml[108,4245+4]..[108,4245+23])
        expression (src/basicSyntax.ml[108,4245+24]..[109,4295+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[108,4245+24]..[108,4245+47])
            Ppat_record Closed
            [
              "producer_attributes" (src/basicSyntax.ml[108,4245+26]..[108,4245+45]) ghost
                pattern (src/basicSyntax.ml[108,4245+26]..[108,4245+45])
                  Ppat_var "producer_attributes" (src/basicSyntax.ml[108,4245+26]..[108,4245+45])
            ]
          expression (src/basicSyntax.ml[109,4295+2]..[109,4295+21])
            Pexp_ident "producer_attributes" (src/basicSyntax.ml[109,4295+2]..[109,4295+21])
    ]
  structure_item (src/basicSyntax.ml[115,4479+0]..[116,4503+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[115,4479+4]..[115,4479+16])
          Ppat_var "get_branches" (src/basicSyntax.ml[115,4479+4]..[115,4479+16])
        expression (src/basicSyntax.ml[115,4479+17]..[116,4503+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[115,4479+17]..[115,4479+21])
            Ppat_var "rule" (src/basicSyntax.ml[115,4479+17]..[115,4479+21])
          expression (src/basicSyntax.ml[116,4503+2]..[116,4503+15])
            Pexp_field
            expression (src/basicSyntax.ml[116,4503+2]..[116,4503+6])
              Pexp_ident "rule" (src/basicSyntax.ml[116,4503+2]..[116,4503+6])
            "branches" (src/basicSyntax.ml[116,4503+7]..[116,4503+15])
    ]
  structure_item (src/basicSyntax.ml[118,4520+0]..[119,4552+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[118,4520+4]..[118,4520+22])
          Ppat_var "transform_branches" (src/basicSyntax.ml[118,4520+4]..[118,4520+22])
        expression (src/basicSyntax.ml[118,4520+23]..[119,4552+42]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[118,4520+23]..[118,4520+24])
            Ppat_var "f" (src/basicSyntax.ml[118,4520+23]..[118,4520+24])
          expression (src/basicSyntax.ml[118,4520+25]..[119,4552+42]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/basicSyntax.ml[118,4520+25]..[118,4520+29])
              Ppat_var "rule" (src/basicSyntax.ml[118,4520+25]..[118,4520+29])
            expression (src/basicSyntax.ml[119,4552+2]..[119,4552+42])
              Pexp_record
              [
                "branches" (src/basicSyntax.ml[119,4552+14]..[119,4552+22])
                  expression (src/basicSyntax.ml[119,4552+25]..[119,4552+40])
                    Pexp_apply
                    expression (src/basicSyntax.ml[119,4552+25]..[119,4552+26])
                      Pexp_ident "f" (src/basicSyntax.ml[119,4552+25]..[119,4552+26])
                    [
                      <arg>
                      Nolabel
                        expression (src/basicSyntax.ml[119,4552+27]..[119,4552+40])
                          Pexp_field
                          expression (src/basicSyntax.ml[119,4552+27]..[119,4552+31])
                            Pexp_ident "rule" (src/basicSyntax.ml[119,4552+27]..[119,4552+31])
                          "branches" (src/basicSyntax.ml[119,4552+32]..[119,4552+40])
                    ]
              ]
              Some
                expression (src/basicSyntax.ml[119,4552+4]..[119,4552+8])
                  Pexp_ident "rule" (src/basicSyntax.ml[119,4552+4]..[119,4552+8])
    ]
  structure_item (src/basicSyntax.ml[128,4915+0]..[131,5051+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[128,4915+4]..[128,4915+10])
          Ppat_var "tokens" (src/basicSyntax.ml[128,4915+4]..[128,4915+10])
        expression (src/basicSyntax.ml[128,4915+11]..[131,5051+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[128,4915+11]..[128,4915+18])
            Ppat_var "grammar" (src/basicSyntax.ml[128,4915+11]..[128,4915+18])
          expression (src/basicSyntax.ml[129,4936+2]..[131,5051+21])
            Pexp_apply
            expression (src/basicSyntax.ml[129,4936+2]..[129,4936+16])
              Pexp_ident "StringMap.fold" (src/basicSyntax.ml[129,4936+2]..[129,4936+16])
            [
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[129,4936+17]..[131,5051+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/basicSyntax.ml[129,4936+22]..[129,4936+27])
                    Ppat_var "token" (src/basicSyntax.ml[129,4936+22]..[129,4936+27])
                  expression (src/basicSyntax.ml[129,4936+28]..[130,4985+65]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/basicSyntax.ml[129,4936+28]..[129,4936+38])
                      Ppat_var "properties" (src/basicSyntax.ml[129,4936+28]..[129,4936+38])
                    expression (src/basicSyntax.ml[129,4936+39]..[130,4985+65]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/basicSyntax.ml[129,4936+39]..[129,4936+45])
                        Ppat_var "tokens" (src/basicSyntax.ml[129,4936+39]..[129,4936+45])
                      expression (src/basicSyntax.ml[130,4985+4]..[130,4985+65])
                        Pexp_ifthenelse
                        expression (src/basicSyntax.ml[130,4985+7]..[130,4985+32])
                          Pexp_field
                          expression (src/basicSyntax.ml[130,4985+7]..[130,4985+17])
                            Pexp_ident "properties" (src/basicSyntax.ml[130,4985+7]..[130,4985+17])
                          "tk_is_declared" (src/basicSyntax.ml[130,4985+18]..[130,4985+32])
                        expression (src/basicSyntax.ml[130,4985+38]..[130,4985+53])
                          Pexp_construct "::" (src/basicSyntax.ml[130,4985+44]..[130,4985+46])
                          Some
                            expression (src/basicSyntax.ml[130,4985+38]..[130,4985+53]) ghost
                              Pexp_tuple
                              [
                                expression (src/basicSyntax.ml[130,4985+38]..[130,4985+43])
                                  Pexp_ident "token" (src/basicSyntax.ml[130,4985+38]..[130,4985+43])
                                expression (src/basicSyntax.ml[130,4985+47]..[130,4985+53])
                                  Pexp_ident "tokens" (src/basicSyntax.ml[130,4985+47]..[130,4985+53])
                              ]
                        Some
                          expression (src/basicSyntax.ml[130,4985+59]..[130,4985+65])
                            Pexp_ident "tokens" (src/basicSyntax.ml[130,4985+59]..[130,4985+65])
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[131,5051+4]..[131,5051+18])
                  Pexp_field
                  expression (src/basicSyntax.ml[131,5051+4]..[131,5051+11])
                    Pexp_ident "grammar" (src/basicSyntax.ml[131,5051+4]..[131,5051+11])
                  "tokens" (src/basicSyntax.ml[131,5051+12]..[131,5051+18])
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[131,5051+19]..[131,5051+21])
                  Pexp_construct "[]" (src/basicSyntax.ml[131,5051+19]..[131,5051+21])
                  None
            ]
    ]
  structure_item (src/basicSyntax.ml[136,5164+0]..[139,5333+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[136,5164+4]..[136,5164+16])
          Ppat_var "typed_tokens" (src/basicSyntax.ml[136,5164+4]..[136,5164+16])
        expression (src/basicSyntax.ml[136,5164+17]..[139,5333+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[136,5164+17]..[136,5164+24])
            Ppat_var "grammar" (src/basicSyntax.ml[136,5164+17]..[136,5164+24])
          expression (src/basicSyntax.ml[137,5191+2]..[139,5333+21])
            Pexp_apply
            expression (src/basicSyntax.ml[137,5191+2]..[137,5191+16])
              Pexp_ident "StringMap.fold" (src/basicSyntax.ml[137,5191+2]..[137,5191+16])
            [
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[137,5191+17]..[139,5333+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/basicSyntax.ml[137,5191+22]..[137,5191+27])
                    Ppat_var "token" (src/basicSyntax.ml[137,5191+22]..[137,5191+27])
                  expression (src/basicSyntax.ml[137,5191+28]..[138,5240+92]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/basicSyntax.ml[137,5191+28]..[137,5191+38])
                      Ppat_var "properties" (src/basicSyntax.ml[137,5191+28]..[137,5191+38])
                    expression (src/basicSyntax.ml[137,5191+39]..[138,5240+92]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/basicSyntax.ml[137,5191+39]..[137,5191+45])
                        Ppat_var "tokens" (src/basicSyntax.ml[137,5191+39]..[137,5191+45])
                      expression (src/basicSyntax.ml[138,5240+4]..[138,5240+92])
                        Pexp_ifthenelse
                        expression (src/basicSyntax.ml[138,5240+7]..[138,5240+32])
                          Pexp_field
                          expression (src/basicSyntax.ml[138,5240+7]..[138,5240+17])
                            Pexp_ident "properties" (src/basicSyntax.ml[138,5240+7]..[138,5240+17])
                          "tk_is_declared" (src/basicSyntax.ml[138,5240+18]..[138,5240+32])
                        expression (src/basicSyntax.ml[138,5240+38]..[138,5240+80])
                          Pexp_construct "::" (src/basicSyntax.ml[138,5240+71]..[138,5240+73])
                          Some
                            expression (src/basicSyntax.ml[138,5240+38]..[138,5240+80]) ghost
                              Pexp_tuple
                              [
                                expression (src/basicSyntax.ml[138,5240+38]..[138,5240+70])
                                  Pexp_tuple
                                  [
                                    expression (src/basicSyntax.ml[138,5240+39]..[138,5240+44])
                                      Pexp_ident "token" (src/basicSyntax.ml[138,5240+39]..[138,5240+44])
                                    expression (src/basicSyntax.ml[138,5240+46]..[138,5240+69])
                                      Pexp_field
                                      expression (src/basicSyntax.ml[138,5240+46]..[138,5240+56])
                                        Pexp_ident "properties" (src/basicSyntax.ml[138,5240+46]..[138,5240+56])
                                      "tk_ocamltype" (src/basicSyntax.ml[138,5240+57]..[138,5240+69])
                                  ]
                                expression (src/basicSyntax.ml[138,5240+74]..[138,5240+80])
                                  Pexp_ident "tokens" (src/basicSyntax.ml[138,5240+74]..[138,5240+80])
                              ]
                        Some
                          expression (src/basicSyntax.ml[138,5240+86]..[138,5240+92])
                            Pexp_ident "tokens" (src/basicSyntax.ml[138,5240+86]..[138,5240+92])
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[139,5333+4]..[139,5333+18])
                  Pexp_field
                  expression (src/basicSyntax.ml[139,5333+4]..[139,5333+11])
                    Pexp_ident "grammar" (src/basicSyntax.ml[139,5333+4]..[139,5333+11])
                  "tokens" (src/basicSyntax.ml[139,5333+12]..[139,5333+18])
              <arg>
              Nolabel
                expression (src/basicSyntax.ml[139,5333+19]..[139,5333+21])
                  Pexp_construct "[]" (src/basicSyntax.ml[139,5333+19]..[139,5333+21])
                  None
            ]
    ]
  structure_item (src/basicSyntax.ml[144,5452+0]..[145,5498+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[144,5452+4]..[144,5452+16])
          Ppat_var "nonterminals" (src/basicSyntax.ml[144,5452+4]..[144,5452+16])
        expression (src/basicSyntax.ml[144,5452+17]..[145,5498+65]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[144,5452+17]..[144,5452+24])
            Ppat_var "grammar" (src/basicSyntax.ml[144,5452+17]..[144,5452+24])
          expression (src/basicSyntax.ml[144,5452+25]..[145,5498+65])
            Pexp_constraint
            expression (src/basicSyntax.ml[145,5498+2]..[145,5498+65])
              Pexp_apply
              expression (src/basicSyntax.ml[145,5498+2]..[145,5498+16])
                Pexp_ident "StringMap.fold" (src/basicSyntax.ml[145,5498+2]..[145,5498+16])
              [
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[145,5498+17]..[145,5498+48])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/basicSyntax.ml[145,5498+22]..[145,5498+24])
                      Ppat_var "nt" (src/basicSyntax.ml[145,5498+22]..[145,5498+24])
                    expression (src/basicSyntax.ml[145,5498+25]..[145,5498+47]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/basicSyntax.ml[145,5498+25]..[145,5498+26])
                        Ppat_any
                      expression (src/basicSyntax.ml[145,5498+27]..[145,5498+47]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/basicSyntax.ml[145,5498+27]..[145,5498+32])
                          Ppat_var "rules" (src/basicSyntax.ml[145,5498+27]..[145,5498+32])
                        expression (src/basicSyntax.ml[145,5498+36]..[145,5498+47])
                          Pexp_construct "::" (src/basicSyntax.ml[145,5498+39]..[145,5498+41])
                          Some
                            expression (src/basicSyntax.ml[145,5498+36]..[145,5498+47]) ghost
                              Pexp_tuple
                              [
                                expression (src/basicSyntax.ml[145,5498+36]..[145,5498+38])
                                  Pexp_ident "nt" (src/basicSyntax.ml[145,5498+36]..[145,5498+38])
                                expression (src/basicSyntax.ml[145,5498+42]..[145,5498+47])
                                  Pexp_ident "rules" (src/basicSyntax.ml[145,5498+42]..[145,5498+47])
                              ]
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[145,5498+49]..[145,5498+62])
                    Pexp_field
                    expression (src/basicSyntax.ml[145,5498+49]..[145,5498+56])
                      Pexp_ident "grammar" (src/basicSyntax.ml[145,5498+49]..[145,5498+56])
                    "rules" (src/basicSyntax.ml[145,5498+57]..[145,5498+62])
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[145,5498+63]..[145,5498+65])
                    Pexp_construct "[]" (src/basicSyntax.ml[145,5498+63]..[145,5498+65])
                    None
              ]
            core_type (src/basicSyntax.ml[144,5452+27]..[144,5452+43])
              Ptyp_constr "list" (src/basicSyntax.ml[144,5452+39]..[144,5452+43])
              [
                core_type (src/basicSyntax.ml[144,5452+27]..[144,5452+38])
                  Ptyp_constr "nonterminal" (src/basicSyntax.ml[144,5452+27]..[144,5452+38])
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[150,5701+0]..[154,5842+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[150,5701+4]..[150,5701+23])
          Ppat_var "ocamltype_of_symbol" (src/basicSyntax.ml[150,5701+4]..[150,5701+23])
        expression (src/basicSyntax.ml[150,5701+24]..[154,5842+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[150,5701+24]..[150,5701+31])
            Ppat_var "grammar" (src/basicSyntax.ml[150,5701+24]..[150,5701+31])
          expression (src/basicSyntax.ml[150,5701+32]..[154,5842+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/basicSyntax.ml[150,5701+32]..[150,5701+38])
              Ppat_var "symbol" (src/basicSyntax.ml[150,5701+32]..[150,5701+38])
            expression (src/basicSyntax.ml[150,5701+39]..[154,5842+8])
              Pexp_constraint
              expression (src/basicSyntax.ml[151,5769+2]..[154,5842+8])
                Pexp_try
                expression (src/basicSyntax.ml[152,5775+4]..[152,5775+46])
                  Pexp_construct "Some" (src/basicSyntax.ml[152,5775+4]..[152,5775+8])
                  Some
                    expression (src/basicSyntax.ml[152,5775+9]..[152,5775+46])
                      Pexp_apply
                      expression (src/basicSyntax.ml[152,5775+10]..[152,5775+24])
                        Pexp_ident "StringMap.find" (src/basicSyntax.ml[152,5775+10]..[152,5775+24])
                      [
                        <arg>
                        Nolabel
                          expression (src/basicSyntax.ml[152,5775+25]..[152,5775+31])
                            Pexp_ident "symbol" (src/basicSyntax.ml[152,5775+25]..[152,5775+31])
                        <arg>
                        Nolabel
                          expression (src/basicSyntax.ml[152,5775+32]..[152,5775+45])
                            Pexp_field
                            expression (src/basicSyntax.ml[152,5775+32]..[152,5775+39])
                              Pexp_ident "grammar" (src/basicSyntax.ml[152,5775+32]..[152,5775+39])
                            "types" (src/basicSyntax.ml[152,5775+40]..[152,5775+45])
                      ]
                [
                  <case>
                    pattern (src/basicSyntax.ml[153,5822+7]..[153,5822+16])
                      Ppat_construct "Not_found" (src/basicSyntax.ml[153,5822+7]..[153,5822+16])
                      None
                    expression (src/basicSyntax.ml[154,5842+4]..[154,5842+8])
                      Pexp_construct "None" (src/basicSyntax.ml[154,5842+4]..[154,5842+8])
                      None
                ]
              core_type (src/basicSyntax.ml[150,5701+41]..[150,5701+65])
                Ptyp_constr "option" (src/basicSyntax.ml[150,5701+59]..[150,5701+65])
                [
                  core_type (src/basicSyntax.ml[150,5701+41]..[150,5701+58])
                    Ptyp_constr "Stretch.ocamltype" (src/basicSyntax.ml[150,5701+41]..[150,5701+58])
                    []
                ]
    ]
  structure_item (src/basicSyntax.ml[159,5984+0]..[164,6166+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[159,5984+4]..[159,5984+29])
          Ppat_var "ocamltype_of_start_symbol" (src/basicSyntax.ml[159,5984+4]..[159,5984+29])
        expression (src/basicSyntax.ml[159,5984+30]..[164,6166+16]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[159,5984+30]..[159,5984+37])
            Ppat_var "grammar" (src/basicSyntax.ml[159,5984+30]..[159,5984+37])
          expression (src/basicSyntax.ml[159,5984+38]..[164,6166+16]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/basicSyntax.ml[159,5984+38]..[159,5984+44])
              Ppat_var "symbol" (src/basicSyntax.ml[159,5984+38]..[159,5984+44])
            expression (src/basicSyntax.ml[159,5984+45]..[164,6166+16])
              Pexp_constraint
              expression (src/basicSyntax.ml[160,6051+2]..[164,6166+16])
                Pexp_try
                expression (src/basicSyntax.ml[161,6057+4]..[161,6057+39])
                  Pexp_apply
                  expression (src/basicSyntax.ml[161,6057+4]..[161,6057+18])
                    Pexp_ident "StringMap.find" (src/basicSyntax.ml[161,6057+4]..[161,6057+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/basicSyntax.ml[161,6057+19]..[161,6057+25])
                        Pexp_ident "symbol" (src/basicSyntax.ml[161,6057+19]..[161,6057+25])
                    <arg>
                    Nolabel
                      expression (src/basicSyntax.ml[161,6057+26]..[161,6057+39])
                        Pexp_field
                        expression (src/basicSyntax.ml[161,6057+26]..[161,6057+33])
                          Pexp_ident "grammar" (src/basicSyntax.ml[161,6057+26]..[161,6057+33])
                        "types" (src/basicSyntax.ml[161,6057+34]..[161,6057+39])
                  ]
                [
                  <case>
                    pattern (src/basicSyntax.ml[162,6097+7]..[162,6097+16])
                      Ppat_construct "Not_found" (src/basicSyntax.ml[162,6097+7]..[162,6097+16])
                      None
                    expression (src/basicSyntax.ml[164,6166+4]..[164,6166+16])
                      Pexp_assert
                      expression (src/basicSyntax.ml[164,6166+11]..[164,6166+16])
                        Pexp_construct "false" (src/basicSyntax.ml[164,6166+11]..[164,6166+16])
                        None
                ]
              core_type (src/basicSyntax.ml[159,5984+47]..[159,5984+64])
                Ptyp_constr "Stretch.ocamltype" (src/basicSyntax.ml[159,5984+47]..[159,5984+64])
                []
    ]
  structure_item (src/basicSyntax.ml[169,6332+0]..[176,6592+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[169,6332+4]..[169,6332+20])
          Ppat_var "is_inline_symbol" (src/basicSyntax.ml[169,6332+4]..[169,6332+20])
        expression (src/basicSyntax.ml[169,6332+21]..[176,6592+11]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[169,6332+21]..[169,6332+28])
            Ppat_var "grammar" (src/basicSyntax.ml[169,6332+21]..[169,6332+28])
          expression (src/basicSyntax.ml[169,6332+29]..[176,6592+11]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/basicSyntax.ml[169,6332+29]..[169,6332+35])
              Ppat_var "symbol" (src/basicSyntax.ml[169,6332+29]..[169,6332+35])
            expression (src/basicSyntax.ml[169,6332+36]..[176,6592+11])
              Pexp_constraint
              expression (src/basicSyntax.ml[170,6377+2]..[176,6592+11])
                Pexp_match
                expression (src/basicSyntax.ml[170,6377+8]..[170,6377+43])
                  Pexp_apply
                  expression (src/basicSyntax.ml[170,6377+8]..[170,6377+22])
                    Pexp_ident "StringMap.find" (src/basicSyntax.ml[170,6377+8]..[170,6377+22])
                  [
                    <arg>
                    Nolabel
                      expression (src/basicSyntax.ml[170,6377+23]..[170,6377+29])
                        Pexp_ident "symbol" (src/basicSyntax.ml[170,6377+23]..[170,6377+29])
                    <arg>
                    Nolabel
                      expression (src/basicSyntax.ml[170,6377+30]..[170,6377+43])
                        Pexp_field
                        expression (src/basicSyntax.ml[170,6377+30]..[170,6377+37])
                          Pexp_ident "grammar" (src/basicSyntax.ml[170,6377+30]..[170,6377+37])
                        "rules" (src/basicSyntax.ml[170,6377+38]..[170,6377+43])
                  ]
                [
                  <case>
                    pattern (src/basicSyntax.ml[171,6426+4]..[171,6426+8])
                      Ppat_var "rule" (src/basicSyntax.ml[171,6426+4]..[171,6426+8])
                    expression (src/basicSyntax.ml[173,6503+6]..[173,6503+22])
                      Pexp_field
                      expression (src/basicSyntax.ml[173,6503+6]..[173,6503+10])
                        Pexp_ident "rule" (src/basicSyntax.ml[173,6503+6]..[173,6503+10])
                      "inline_flag" (src/basicSyntax.ml[173,6503+11]..[173,6503+22])
                  <case>
                    pattern (src/basicSyntax.ml[174,6526+4]..[174,6526+23])
                      Ppat_exception
                      pattern (src/basicSyntax.ml[174,6526+14]..[174,6526+23])
                        Ppat_construct "Not_found" (src/basicSyntax.ml[174,6526+14]..[174,6526+23])
                        None
                    expression (src/basicSyntax.ml[176,6592+6]..[176,6592+11])
                      Pexp_construct "false" (src/basicSyntax.ml[176,6592+6]..[176,6592+11])
                      None
                ]
              core_type (src/basicSyntax.ml[169,6332+38]..[169,6332+42])
                Ptyp_constr "bool" (src/basicSyntax.ml[169,6332+38]..[169,6332+42])
                []
    ]
  structure_item (src/basicSyntax.ml[181,6758+0]..[182,6800+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[181,6758+4]..[181,6758+22])
          Ppat_var "is_inline_producer" (src/basicSyntax.ml[181,6758+4]..[181,6758+22])
        expression (src/basicSyntax.ml[181,6758+23]..[182,6800+53]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[181,6758+23]..[181,6758+30])
            Ppat_var "grammar" (src/basicSyntax.ml[181,6758+23]..[181,6758+30])
          expression (src/basicSyntax.ml[181,6758+31]..[182,6800+53]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/basicSyntax.ml[181,6758+31]..[181,6758+39])
              Ppat_var "producer" (src/basicSyntax.ml[181,6758+31]..[181,6758+39])
            expression (src/basicSyntax.ml[182,6800+2]..[182,6800+53])
              Pexp_apply
              expression (src/basicSyntax.ml[182,6800+2]..[182,6800+18])
                Pexp_ident "is_inline_symbol" (src/basicSyntax.ml[182,6800+2]..[182,6800+18])
              [
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[182,6800+19]..[182,6800+26])
                    Pexp_ident "grammar" (src/basicSyntax.ml[182,6800+19]..[182,6800+26])
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[182,6800+27]..[182,6800+53])
                    Pexp_apply
                    expression (src/basicSyntax.ml[182,6800+28]..[182,6800+43])
                      Pexp_ident "producer_symbol" (src/basicSyntax.ml[182,6800+28]..[182,6800+43])
                    [
                      <arg>
                      Nolabel
                        expression (src/basicSyntax.ml[182,6800+44]..[182,6800+52])
                          Pexp_ident "producer" (src/basicSyntax.ml[182,6800+44]..[182,6800+52])
                    ]
              ]
    ]
  structure_item (src/basicSyntax.ml[194,7288+0]..[199,7487+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[194,7288+4]..[194,7288+9])
          Ppat_var "names" (src/basicSyntax.ml[194,7288+4]..[194,7288+9])
        expression (src/basicSyntax.ml[194,7288+10]..[199,7487+29]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/basicSyntax.ml[194,7288+10]..[194,7288+33])
            Ppat_constraint
            pattern (src/basicSyntax.ml[194,7288+11]..[194,7288+20])
              Ppat_var "producers" (src/basicSyntax.ml[194,7288+11]..[194,7288+20])
            core_type (src/basicSyntax.ml[194,7288+23]..[194,7288+32])
              Ptyp_constr "producers" (src/basicSyntax.ml[194,7288+23]..[194,7288+32])
              []
          expression (src/basicSyntax.ml[194,7288+34]..[199,7487+29])
            Pexp_constraint
            expression (src/basicSyntax.ml[195,7338+2]..[199,7487+29])
              Pexp_apply
              expression (src/basicSyntax.ml[195,7338+2]..[195,7338+16])
                Pexp_ident "List.fold_left" (src/basicSyntax.ml[195,7338+2]..[195,7338+16])
              [
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[195,7338+17]..[199,7487+3])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/basicSyntax.ml[195,7338+22]..[195,7338+25])
                      Ppat_var "ids" (src/basicSyntax.ml[195,7338+22]..[195,7338+25])
                    expression (src/basicSyntax.ml[195,7338+26]..[198,7462+24]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/basicSyntax.ml[195,7338+26]..[195,7338+34])
                        Ppat_var "producer" (src/basicSyntax.ml[195,7338+26]..[195,7338+34])
                      expression (src/basicSyntax.ml[196,7376+4]..[198,7462+24])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/basicSyntax.ml[196,7376+8]..[196,7376+10])
                              Ppat_var "id" (src/basicSyntax.ml[196,7376+8]..[196,7376+10])
                            expression (src/basicSyntax.ml[196,7376+13]..[196,7376+41])
                              Pexp_apply
                              expression (src/basicSyntax.ml[196,7376+13]..[196,7376+32])
                                Pexp_ident "producer_identifier" (src/basicSyntax.ml[196,7376+13]..[196,7376+32])
                              [
                                <arg>
                                Nolabel
                                  expression (src/basicSyntax.ml[196,7376+33]..[196,7376+41])
                                    Pexp_ident "producer" (src/basicSyntax.ml[196,7376+33]..[196,7376+41])
                              ]
                        ]
                        expression (src/basicSyntax.ml[197,7421+4]..[198,7462+24])
                          Pexp_sequence
                          expression (src/basicSyntax.ml[197,7421+4]..[197,7421+39])
                            Pexp_assert
                            expression (src/basicSyntax.ml[197,7421+11]..[197,7421+39])
                              Pexp_apply
                              expression (src/basicSyntax.ml[197,7421+12]..[197,7421+15])
                                Pexp_ident "not" (src/basicSyntax.ml[197,7421+12]..[197,7421+15])
                              [
                                <arg>
                                Nolabel
                                  expression (src/basicSyntax.ml[197,7421+16]..[197,7421+38])
                                    Pexp_apply
                                    expression (src/basicSyntax.ml[197,7421+17]..[197,7421+30])
                                      Pexp_ident "StringSet.mem" (src/basicSyntax.ml[197,7421+17]..[197,7421+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/basicSyntax.ml[197,7421+31]..[197,7421+33])
                                          Pexp_ident "id" (src/basicSyntax.ml[197,7421+31]..[197,7421+33])
                                      <arg>
                                      Nolabel
                                        expression (src/basicSyntax.ml[197,7421+34]..[197,7421+37])
                                          Pexp_ident "ids" (src/basicSyntax.ml[197,7421+34]..[197,7421+37])
                                    ]
                              ]
                          expression (src/basicSyntax.ml[198,7462+4]..[198,7462+24])
                            Pexp_apply
                            expression (src/basicSyntax.ml[198,7462+4]..[198,7462+17])
                              Pexp_ident "StringSet.add" (src/basicSyntax.ml[198,7462+4]..[198,7462+17])
                            [
                              <arg>
                              Nolabel
                                expression (src/basicSyntax.ml[198,7462+18]..[198,7462+20])
                                  Pexp_ident "id" (src/basicSyntax.ml[198,7462+18]..[198,7462+20])
                              <arg>
                              Nolabel
                                expression (src/basicSyntax.ml[198,7462+21]..[198,7462+24])
                                  Pexp_ident "ids" (src/basicSyntax.ml[198,7462+21]..[198,7462+24])
                            ]
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[199,7487+4]..[199,7487+19])
                    Pexp_ident "StringSet.empty" (src/basicSyntax.ml[199,7487+4]..[199,7487+19])
                <arg>
                Nolabel
                  expression (src/basicSyntax.ml[199,7487+20]..[199,7487+29])
                    Pexp_ident "producers" (src/basicSyntax.ml[199,7487+20]..[199,7487+29])
              ]
            core_type (src/basicSyntax.ml[194,7288+36]..[194,7288+47])
              Ptyp_constr "StringSet.t" (src/basicSyntax.ml[194,7288+36]..[194,7288+47])
              []
    ]
]

open Syntax
type producer =
  {
  producer_identifier: identifier located ;
  producer_symbol: symbol ;
  producer_attributes: attributes }
type producers = producer list
type branch =
  {
  branch_position: Positions.t ;
  producers: producers ;
  action: action ;
  branch_prec_annotation: branch_prec_annotation ;
  branch_production_level: branch_production_level }
type branches = branch list
type rule =
  {
  branches: branches ;
  positions: Positions.t list ;
  inline_flag: bool ;
  attributes: attributes }
type grammar =
  {
  preludes: Stretch.t list ;
  postludes: Syntax.postlude list ;
  parameters: Stretch.t list ;
  start_symbols: StringSet.t ;
  types: Stretch.ocamltype StringMap.t ;
  tokens: Syntax.token_properties StringMap.t ;
  on_error_reduce: on_error_reduce_level StringMap.t ;
  gr_attributes: attributes ;
  rules: rule StringMap.t }
let producer_identifier { producer_identifier } =
  (Positions.value producer_identifier : identifier)
let producer_identifier_located { producer_identifier } =
  (producer_identifier : identifier located)
let producer_symbol { producer_symbol } = producer_symbol
let producer_attributes { producer_attributes } = producer_attributes
let get_branches rule = rule.branches
let transform_branches f rule = { rule with branches = (f rule.branches) }
let tokens grammar =
  StringMap.fold
    (fun token ->
       fun properties ->
         fun tokens ->
           if properties.tk_is_declared then token :: tokens else tokens)
    grammar.tokens []
let typed_tokens grammar =
  StringMap.fold
    (fun token ->
       fun properties ->
         fun tokens ->
           if properties.tk_is_declared
           then (token, (properties.tk_ocamltype)) :: tokens
           else tokens) grammar.tokens []
let nonterminals grammar =
  (StringMap.fold (fun nt -> fun _ -> fun rules -> nt :: rules) grammar.rules
     [] : nonterminal list)
let ocamltype_of_symbol grammar symbol =
  (try Some (StringMap.find symbol grammar.types) with | Not_found -> None : 
  Stretch.ocamltype option)
let ocamltype_of_start_symbol grammar symbol =
  (try StringMap.find symbol grammar.types with | Not_found -> assert false : 
  Stretch.ocamltype)
let is_inline_symbol grammar symbol =
  (match StringMap.find symbol grammar.rules with
   | rule -> rule.inline_flag
   | exception Not_found -> false : bool)
let is_inline_producer grammar producer =
  is_inline_symbol grammar (producer_symbol producer)
let names (producers : producers) =
  (List.fold_left
     (fun ids ->
        fun producer ->
          let id = producer_identifier producer in
          assert (not (StringSet.mem id ids)); StringSet.add id ids)
     StringSet.empty producers : StringSet.t)
[
  structure_item (src/basicSyntax.ml[14,1001+0]..src/basicSyntax.ml[14,1001+11])
    Tstr_open Fresh
    module_expr (src/basicSyntax.ml[14,1001+5]..src/basicSyntax.ml[14,1001+11])
      Tmod_ident "Dune__exe!.Syntax"
  structure_item (src/basicSyntax.ml[38,2053+0]..src/basicSyntax.ml[42,2189+3])
    Tstr_type Rec
    [
      type_declaration producer/432 (src/basicSyntax.ml[38,2053+0]..src/basicSyntax.ml[42,2189+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/basicSyntax.ml[39,2071+4]..src/basicSyntax.ml[39,2071+45])
                Immutable
                producer_identifier/433                core_type (src/basicSyntax.ml[39,2071+26]..src/basicSyntax.ml[39,2071+44])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[39,2071+26]..src/basicSyntax.ml[39,2071+44])
                    Ttyp_constr "Dune__exe!.Syntax.located"
                    [
                      core_type (src/basicSyntax.ml[39,2071+26]..src/basicSyntax.ml[39,2071+36])
                        Ttyp_constr "Dune__exe!.Syntax.identifier"
                        []
                    ]
              (src/basicSyntax.ml[40,2117+4]..src/basicSyntax.ml[40,2117+33])
                Immutable
                producer_symbol/434                core_type (src/basicSyntax.ml[40,2117+26]..src/basicSyntax.ml[40,2117+32])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[40,2117+26]..src/basicSyntax.ml[40,2117+32])
                    Ttyp_constr "Dune__exe!.Syntax.symbol"
                    []
              (src/basicSyntax.ml[41,2151+4]..src/basicSyntax.ml[41,2151+37])
                Immutable
                producer_attributes/435                core_type (src/basicSyntax.ml[41,2151+26]..src/basicSyntax.ml[41,2151+36])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[41,2151+26]..src/basicSyntax.ml[41,2151+36])
                    Ttyp_constr "Dune__exe!.Syntax.attributes"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[44,2194+0]..src/basicSyntax.ml[45,2211+15])
    Tstr_type Rec
    [
      type_declaration producers/510 (src/basicSyntax.ml[44,2194+0]..src/basicSyntax.ml[45,2211+15])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/basicSyntax.ml[45,2211+2]..src/basicSyntax.ml[45,2211+15])
              Ttyp_constr "list/9!"
              [
                core_type (src/basicSyntax.ml[45,2211+2]..src/basicSyntax.ml[45,2211+10])
                  Ttyp_constr "producer/432"
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[52,2436+0]..src/basicSyntax.ml[58,2682+3])
    Tstr_type Rec
    [
      type_declaration branch/511 (src/basicSyntax.ml[52,2436+0]..src/basicSyntax.ml[58,2682+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/basicSyntax.ml[53,2452+4]..src/basicSyntax.ml[53,2452+42])
                Immutable
                branch_position/512                core_type (src/basicSyntax.ml[53,2452+30]..src/basicSyntax.ml[53,2452+41])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[53,2452+30]..src/basicSyntax.ml[53,2452+41])
                    Ttyp_constr "Dune__exe!.Positions.t"
                    []
              (src/basicSyntax.ml[54,2495+4]..src/basicSyntax.ml[54,2495+40])
                Immutable
                producers/513                core_type (src/basicSyntax.ml[54,2495+30]..src/basicSyntax.ml[54,2495+39])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[54,2495+30]..src/basicSyntax.ml[54,2495+39])
                    Ttyp_constr "producers/510"
                    []
              (src/basicSyntax.ml[55,2536+4]..src/basicSyntax.ml[55,2536+37])
                Immutable
                action/514                core_type (src/basicSyntax.ml[55,2536+30]..src/basicSyntax.ml[55,2536+36])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[55,2536+30]..src/basicSyntax.ml[55,2536+36])
                    Ttyp_constr "Dune__exe!.Syntax.action"
                    []
              (src/basicSyntax.ml[56,2574+4]..src/basicSyntax.ml[56,2574+53])
                Immutable
                branch_prec_annotation/515                core_type (src/basicSyntax.ml[56,2574+30]..src/basicSyntax.ml[56,2574+52])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[56,2574+30]..src/basicSyntax.ml[56,2574+52])
                    Ttyp_constr "Dune__exe!.Syntax.branch_prec_annotation"
                    []
              (src/basicSyntax.ml[57,2628+4]..src/basicSyntax.ml[57,2628+53])
                Immutable
                branch_production_level/516                core_type (src/basicSyntax.ml[57,2628+30]..src/basicSyntax.ml[57,2628+53])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[57,2628+30]..src/basicSyntax.ml[57,2628+53])
                    Ttyp_constr "Dune__exe!.Syntax.branch_production_level"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[60,2687+0]..src/basicSyntax.ml[61,2703+13])
    Tstr_type Rec
    [
      type_declaration branches/588 (src/basicSyntax.ml[60,2687+0]..src/basicSyntax.ml[61,2703+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/basicSyntax.ml[61,2703+2]..src/basicSyntax.ml[61,2703+13])
              Ttyp_constr "list/9!"
              [
                core_type (src/basicSyntax.ml[61,2703+2]..src/basicSyntax.ml[61,2703+8])
                  Ttyp_constr "branch/511"
                  []
              ]
    ]
  structure_item (src/basicSyntax.ml[70,2988+0]..src/basicSyntax.ml[75,3120+3])
    Tstr_type Rec
    [
      type_declaration rule/589 (src/basicSyntax.ml[70,2988+0]..src/basicSyntax.ml[75,3120+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/basicSyntax.ml[71,3002+4]..src/basicSyntax.ml[71,3002+27])
                Immutable
                branches/590                core_type (src/basicSyntax.ml[71,3002+18]..src/basicSyntax.ml[71,3002+26])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[71,3002+18]..src/basicSyntax.ml[71,3002+26])
                    Ttyp_constr "branches/588"
                    []
              (src/basicSyntax.ml[72,3030+4]..src/basicSyntax.ml[72,3030+35])
                Immutable
                positions/591                core_type (src/basicSyntax.ml[72,3030+18]..src/basicSyntax.ml[72,3030+34])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[72,3030+18]..src/basicSyntax.ml[72,3030+34])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/basicSyntax.ml[72,3030+18]..src/basicSyntax.ml[72,3030+29])
                        Ttyp_constr "Dune__exe!.Positions.t"
                        []
                    ]
              (src/basicSyntax.ml[73,3066+4]..src/basicSyntax.ml[73,3066+23])
                Immutable
                inline_flag/592                core_type (src/basicSyntax.ml[73,3066+18]..src/basicSyntax.ml[73,3066+22])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[73,3066+18]..src/basicSyntax.ml[73,3066+22])
                    Ttyp_constr "bool/5!"
                    []
              (src/basicSyntax.ml[74,3090+4]..src/basicSyntax.ml[74,3090+29])
                Immutable
                attributes/593                core_type (src/basicSyntax.ml[74,3090+18]..src/basicSyntax.ml[74,3090+28])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[74,3090+18]..src/basicSyntax.ml[74,3090+28])
                    Ttyp_constr "Dune__exe!.Syntax.attributes"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[83,3435+0]..src/basicSyntax.ml[93,3851+3])
    Tstr_type Rec
    [
      type_declaration grammar/594 (src/basicSyntax.ml[83,3435+0]..src/basicSyntax.ml[93,3851+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/basicSyntax.ml[84,3453+4]..src/basicSyntax.ml[84,3453+37])
                Immutable
                preludes/595                core_type (src/basicSyntax.ml[84,3453+22]..src/basicSyntax.ml[84,3453+36])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[84,3453+22]..src/basicSyntax.ml[84,3453+36])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/basicSyntax.ml[84,3453+22]..src/basicSyntax.ml[84,3453+31])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
              (src/basicSyntax.ml[85,3491+4]..src/basicSyntax.ml[85,3491+43])
                Immutable
                postludes/596                core_type (src/basicSyntax.ml[85,3491+22]..src/basicSyntax.ml[85,3491+42])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[85,3491+22]..src/basicSyntax.ml[85,3491+42])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/basicSyntax.ml[85,3491+22]..src/basicSyntax.ml[85,3491+37])
                        Ttyp_constr "Dune__exe!.Syntax.postlude"
                        []
                    ]
              (src/basicSyntax.ml[86,3535+4]..src/basicSyntax.ml[86,3535+37])
                Immutable
                parameters/597                core_type (src/basicSyntax.ml[86,3535+22]..src/basicSyntax.ml[86,3535+36])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[86,3535+22]..src/basicSyntax.ml[86,3535+36])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/basicSyntax.ml[86,3535+22]..src/basicSyntax.ml[86,3535+31])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
              (src/basicSyntax.ml[87,3573+4]..src/basicSyntax.ml[87,3573+34])
                Immutable
                start_symbols/644                core_type (src/basicSyntax.ml[87,3573+22]..src/basicSyntax.ml[87,3573+33])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[87,3573+22]..src/basicSyntax.ml[87,3573+33])
                    Ttyp_constr "Dune__exe!.StringSet.t"
                    []
              (src/basicSyntax.ml[88,3608+4]..src/basicSyntax.ml[88,3608+52])
                Immutable
                types/693                core_type (src/basicSyntax.ml[88,3608+22]..src/basicSyntax.ml[88,3608+51])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[88,3608+22]..src/basicSyntax.ml[88,3608+51])
                    Ttyp_constr "Dune__exe!.StringMap.t"
                    [
                      core_type (src/basicSyntax.ml[88,3608+22]..src/basicSyntax.ml[88,3608+39])
                        Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                        []
                    ]
              (src/basicSyntax.ml[89,3661+4]..src/basicSyntax.ml[89,3661+58])
                Immutable
                tokens/694                core_type (src/basicSyntax.ml[89,3661+22]..src/basicSyntax.ml[89,3661+57])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[89,3661+22]..src/basicSyntax.ml[89,3661+57])
                    Ttyp_constr "Dune__exe!.StringMap.t"
                    [
                      core_type (src/basicSyntax.ml[89,3661+22]..src/basicSyntax.ml[89,3661+45])
                        Ttyp_constr "Dune__exe!.Syntax.token_properties"
                        []
                    ]
              (src/basicSyntax.ml[90,3720+4]..src/basicSyntax.ml[90,3720+56])
                Immutable
                on_error_reduce/695                core_type (src/basicSyntax.ml[90,3720+22]..src/basicSyntax.ml[90,3720+55])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[90,3720+22]..src/basicSyntax.ml[90,3720+55])
                    Ttyp_constr "Dune__exe!.StringMap.t"
                    [
                      core_type (src/basicSyntax.ml[90,3720+22]..src/basicSyntax.ml[90,3720+43])
                        Ttyp_constr "Dune__exe!.Syntax.on_error_reduce_level"
                        []
                    ]
              (src/basicSyntax.ml[91,3777+4]..src/basicSyntax.ml[91,3777+33])
                Immutable
                gr_attributes/696                core_type (src/basicSyntax.ml[91,3777+22]..src/basicSyntax.ml[91,3777+32])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[91,3777+22]..src/basicSyntax.ml[91,3777+32])
                    Ttyp_constr "Dune__exe!.Syntax.attributes"
                    []
              (src/basicSyntax.ml[92,3811+4]..src/basicSyntax.ml[92,3811+39])
                Immutable
                rules/697                core_type (src/basicSyntax.ml[92,3811+22]..src/basicSyntax.ml[92,3811+38])
                  Ttyp_poly
                  core_type (src/basicSyntax.ml[92,3811+22]..src/basicSyntax.ml[92,3811+38])
                    Ttyp_constr "Dune__exe!.StringMap.t"
                    [
                      core_type (src/basicSyntax.ml[92,3811+22]..src/basicSyntax.ml[92,3811+26])
                        Ttyp_constr "rule/589"
                        []
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/basicSyntax.ml[99,3980+0]..src/basicSyntax.ml[100,4043+37])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[99,3980+4]..src/basicSyntax.ml[99,3980+23])
          Tpat_var "producer_identifier/792"
        expression (src/basicSyntax.ml[99,3980+24]..src/basicSyntax.ml[100,4043+37]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[99,3980+24]..src/basicSyntax.ml[99,3980+47])
                Tpat_record
                [
                  "producer_identifier"
                    pattern (src/basicSyntax.ml[99,3980+26]..src/basicSyntax.ml[99,3980+45])
                      Tpat_var "producer_identifier/794"
                ]
              expression (src/basicSyntax.ml[100,4043+2]..src/basicSyntax.ml[100,4043+37])
                extra
                  Texp_constraint
                  core_type (src/basicSyntax.ml[99,3980+50]..src/basicSyntax.ml[99,3980+60])
                    Ttyp_constr "Dune__exe!.Syntax.identifier"
                    []
                Texp_apply
                expression (src/basicSyntax.ml[100,4043+2]..src/basicSyntax.ml[100,4043+17])
                  Texp_ident "Dune__exe!.Positions.value"
                [
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[100,4043+18]..src/basicSyntax.ml[100,4043+37])
                      Texp_ident "producer_identifier/794"
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[102,4082+0]..src/basicSyntax.ml[103,4161+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[102,4082+4]..src/basicSyntax.ml[102,4082+31])
          Tpat_var "producer_identifier_located/796"
        expression (src/basicSyntax.ml[102,4082+32]..src/basicSyntax.ml[103,4161+21]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[102,4082+32]..src/basicSyntax.ml[102,4082+55])
                Tpat_record
                [
                  "producer_identifier"
                    pattern (src/basicSyntax.ml[102,4082+34]..src/basicSyntax.ml[102,4082+53])
                      Tpat_var "producer_identifier/798"
                ]
              expression (src/basicSyntax.ml[103,4161+2]..src/basicSyntax.ml[103,4161+21])
                extra
                  Texp_constraint
                  core_type (src/basicSyntax.ml[102,4082+58]..src/basicSyntax.ml[102,4082+76])
                    Ttyp_constr "Dune__exe!.Syntax.located"
                    [
                      core_type (src/basicSyntax.ml[102,4082+58]..src/basicSyntax.ml[102,4082+68])
                        Ttyp_constr "Dune__exe!.Syntax.identifier"
                        []
                    ]
                Texp_ident "producer_identifier/798"
          ]
    ]
  structure_item (src/basicSyntax.ml[105,4184+0]..src/basicSyntax.ml[106,4226+17])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[105,4184+4]..src/basicSyntax.ml[105,4184+19])
          Tpat_var "producer_symbol/800"
        expression (src/basicSyntax.ml[105,4184+20]..src/basicSyntax.ml[106,4226+17]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[105,4184+20]..src/basicSyntax.ml[105,4184+39])
                Tpat_record
                [
                  "producer_symbol"
                    pattern (src/basicSyntax.ml[105,4184+22]..src/basicSyntax.ml[105,4184+37])
                      Tpat_var "producer_symbol/802"
                ]
              expression (src/basicSyntax.ml[106,4226+2]..src/basicSyntax.ml[106,4226+17])
                Texp_ident "producer_symbol/802"
          ]
    ]
  structure_item (src/basicSyntax.ml[108,4245+0]..src/basicSyntax.ml[109,4295+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[108,4245+4]..src/basicSyntax.ml[108,4245+23])
          Tpat_var "producer_attributes/804"
        expression (src/basicSyntax.ml[108,4245+24]..src/basicSyntax.ml[109,4295+21]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[108,4245+24]..src/basicSyntax.ml[108,4245+47])
                Tpat_record
                [
                  "producer_attributes"
                    pattern (src/basicSyntax.ml[108,4245+26]..src/basicSyntax.ml[108,4245+45])
                      Tpat_var "producer_attributes/806"
                ]
              expression (src/basicSyntax.ml[109,4295+2]..src/basicSyntax.ml[109,4295+21])
                Texp_ident "producer_attributes/806"
          ]
    ]
  structure_item (src/basicSyntax.ml[115,4479+0]..src/basicSyntax.ml[116,4503+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[115,4479+4]..src/basicSyntax.ml[115,4479+16])
          Tpat_var "get_branches/808"
        expression (src/basicSyntax.ml[115,4479+17]..src/basicSyntax.ml[116,4503+15]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[115,4479+17]..src/basicSyntax.ml[115,4479+21])
                Tpat_var "rule/810"
              expression (src/basicSyntax.ml[116,4503+2]..src/basicSyntax.ml[116,4503+15])
                Texp_field
                expression (src/basicSyntax.ml[116,4503+2]..src/basicSyntax.ml[116,4503+6])
                  Texp_ident "rule/810"
                "branches"
          ]
    ]
  structure_item (src/basicSyntax.ml[118,4520+0]..src/basicSyntax.ml[119,4552+42])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[118,4520+4]..src/basicSyntax.ml[118,4520+22])
          Tpat_var "transform_branches/811"
        expression (src/basicSyntax.ml[118,4520+23]..src/basicSyntax.ml[119,4552+42]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[118,4520+23]..src/basicSyntax.ml[118,4520+24])
                Tpat_var "f/813"
              expression (src/basicSyntax.ml[118,4520+25]..src/basicSyntax.ml[119,4552+42]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/basicSyntax.ml[118,4520+25]..src/basicSyntax.ml[118,4520+29])
                      Tpat_var "rule/814"
                    expression (src/basicSyntax.ml[119,4552+2]..src/basicSyntax.ml[119,4552+42])
                      Texp_record
                        fields =
                          [
                            "branches"
                              expression (src/basicSyntax.ml[119,4552+25]..src/basicSyntax.ml[119,4552+40])
                                Texp_apply
                                expression (src/basicSyntax.ml[119,4552+25]..src/basicSyntax.ml[119,4552+26])
                                  Texp_ident "f/813"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/basicSyntax.ml[119,4552+27]..src/basicSyntax.ml[119,4552+40])
                                      Texp_field
                                      expression (src/basicSyntax.ml[119,4552+27]..src/basicSyntax.ml[119,4552+31])
                                        Texp_ident "rule/814"
                                      "branches"
                                ]
                            <kept>                            <kept>                            <kept>                          ]
                        representation =
                          Record_regular
                        extended_expression =
                          Some
                            expression (src/basicSyntax.ml[119,4552+4]..src/basicSyntax.ml[119,4552+8])
                              Texp_ident "rule/814"
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[128,4915+0]..src/basicSyntax.ml[131,5051+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[128,4915+4]..src/basicSyntax.ml[128,4915+10])
          Tpat_var "tokens/815"
        expression (src/basicSyntax.ml[128,4915+11]..src/basicSyntax.ml[131,5051+21]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[128,4915+11]..src/basicSyntax.ml[128,4915+18])
                Tpat_var "grammar/817"
              expression (src/basicSyntax.ml[129,4936+2]..src/basicSyntax.ml[131,5051+21])
                Texp_apply
                expression (src/basicSyntax.ml[129,4936+2]..src/basicSyntax.ml[129,4936+16])
                  Texp_ident "Dune__exe!.StringMap.fold"
                [
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[129,4936+17]..src/basicSyntax.ml[131,5051+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/basicSyntax.ml[129,4936+22]..src/basicSyntax.ml[129,4936+27])
                            Tpat_var "token/818"
                          expression (src/basicSyntax.ml[129,4936+28]..src/basicSyntax.ml[130,4985+65]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/basicSyntax.ml[129,4936+28]..src/basicSyntax.ml[129,4936+38])
                                  Tpat_var "properties/819"
                                expression (src/basicSyntax.ml[129,4936+39]..src/basicSyntax.ml[130,4985+65]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/basicSyntax.ml[129,4936+39]..src/basicSyntax.ml[129,4936+45])
                                        Tpat_var "tokens/820"
                                      expression (src/basicSyntax.ml[130,4985+4]..src/basicSyntax.ml[130,4985+65])
                                        Texp_ifthenelse
                                        expression (src/basicSyntax.ml[130,4985+7]..src/basicSyntax.ml[130,4985+32])
                                          Texp_field
                                          expression (src/basicSyntax.ml[130,4985+7]..src/basicSyntax.ml[130,4985+17])
                                            Texp_ident "properties/819"
                                          "tk_is_declared"
                                        expression (src/basicSyntax.ml[130,4985+38]..src/basicSyntax.ml[130,4985+53])
                                          Texp_construct "::"
                                          [
                                            expression (src/basicSyntax.ml[130,4985+38]..src/basicSyntax.ml[130,4985+43])
                                              Texp_ident "token/818"
                                            expression (src/basicSyntax.ml[130,4985+47]..src/basicSyntax.ml[130,4985+53])
                                              Texp_ident "tokens/820"
                                          ]
                                        Some
                                          expression (src/basicSyntax.ml[130,4985+59]..src/basicSyntax.ml[130,4985+65])
                                            Texp_ident "tokens/820"
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[131,5051+4]..src/basicSyntax.ml[131,5051+18])
                      Texp_field
                      expression (src/basicSyntax.ml[131,5051+4]..src/basicSyntax.ml[131,5051+11])
                        Texp_ident "grammar/817"
                      "tokens"
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[131,5051+19]..src/basicSyntax.ml[131,5051+21])
                      Texp_construct "[]"
                      []
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[136,5164+0]..src/basicSyntax.ml[139,5333+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[136,5164+4]..src/basicSyntax.ml[136,5164+16])
          Tpat_var "typed_tokens/821"
        expression (src/basicSyntax.ml[136,5164+17]..src/basicSyntax.ml[139,5333+21]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[136,5164+17]..src/basicSyntax.ml[136,5164+24])
                Tpat_var "grammar/823"
              expression (src/basicSyntax.ml[137,5191+2]..src/basicSyntax.ml[139,5333+21])
                Texp_apply
                expression (src/basicSyntax.ml[137,5191+2]..src/basicSyntax.ml[137,5191+16])
                  Texp_ident "Dune__exe!.StringMap.fold"
                [
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[137,5191+17]..src/basicSyntax.ml[139,5333+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/basicSyntax.ml[137,5191+22]..src/basicSyntax.ml[137,5191+27])
                            Tpat_var "token/824"
                          expression (src/basicSyntax.ml[137,5191+28]..src/basicSyntax.ml[138,5240+92]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/basicSyntax.ml[137,5191+28]..src/basicSyntax.ml[137,5191+38])
                                  Tpat_var "properties/825"
                                expression (src/basicSyntax.ml[137,5191+39]..src/basicSyntax.ml[138,5240+92]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/basicSyntax.ml[137,5191+39]..src/basicSyntax.ml[137,5191+45])
                                        Tpat_var "tokens/826"
                                      expression (src/basicSyntax.ml[138,5240+4]..src/basicSyntax.ml[138,5240+92])
                                        Texp_ifthenelse
                                        expression (src/basicSyntax.ml[138,5240+7]..src/basicSyntax.ml[138,5240+32])
                                          Texp_field
                                          expression (src/basicSyntax.ml[138,5240+7]..src/basicSyntax.ml[138,5240+17])
                                            Texp_ident "properties/825"
                                          "tk_is_declared"
                                        expression (src/basicSyntax.ml[138,5240+38]..src/basicSyntax.ml[138,5240+80])
                                          Texp_construct "::"
                                          [
                                            expression (src/basicSyntax.ml[138,5240+38]..src/basicSyntax.ml[138,5240+70])
                                              Texp_tuple
                                              [
                                                expression (src/basicSyntax.ml[138,5240+39]..src/basicSyntax.ml[138,5240+44])
                                                  Texp_ident "token/824"
                                                expression (src/basicSyntax.ml[138,5240+46]..src/basicSyntax.ml[138,5240+69])
                                                  Texp_field
                                                  expression (src/basicSyntax.ml[138,5240+46]..src/basicSyntax.ml[138,5240+56])
                                                    Texp_ident "properties/825"
                                                  "tk_ocamltype"
                                              ]
                                            expression (src/basicSyntax.ml[138,5240+74]..src/basicSyntax.ml[138,5240+80])
                                              Texp_ident "tokens/826"
                                          ]
                                        Some
                                          expression (src/basicSyntax.ml[138,5240+86]..src/basicSyntax.ml[138,5240+92])
                                            Texp_ident "tokens/826"
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[139,5333+4]..src/basicSyntax.ml[139,5333+18])
                      Texp_field
                      expression (src/basicSyntax.ml[139,5333+4]..src/basicSyntax.ml[139,5333+11])
                        Texp_ident "grammar/823"
                      "tokens"
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[139,5333+19]..src/basicSyntax.ml[139,5333+21])
                      Texp_construct "[]"
                      []
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[144,5452+0]..src/basicSyntax.ml[145,5498+65])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[144,5452+4]..src/basicSyntax.ml[144,5452+16])
          Tpat_var "nonterminals/827"
        expression (src/basicSyntax.ml[144,5452+17]..src/basicSyntax.ml[145,5498+65]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[144,5452+17]..src/basicSyntax.ml[144,5452+24])
                Tpat_var "grammar/829"
              expression (src/basicSyntax.ml[145,5498+2]..src/basicSyntax.ml[145,5498+65])
                extra
                  Texp_constraint
                  core_type (src/basicSyntax.ml[144,5452+27]..src/basicSyntax.ml[144,5452+43])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/basicSyntax.ml[144,5452+27]..src/basicSyntax.ml[144,5452+38])
                        Ttyp_constr "Dune__exe!.Syntax.nonterminal"
                        []
                    ]
                Texp_apply
                expression (src/basicSyntax.ml[145,5498+2]..src/basicSyntax.ml[145,5498+16])
                  Texp_ident "Dune__exe!.StringMap.fold"
                [
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[145,5498+17]..src/basicSyntax.ml[145,5498+48])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/basicSyntax.ml[145,5498+22]..src/basicSyntax.ml[145,5498+24])
                            Tpat_var "nt/830"
                          expression (src/basicSyntax.ml[145,5498+25]..src/basicSyntax.ml[145,5498+47]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/basicSyntax.ml[145,5498+25]..src/basicSyntax.ml[145,5498+26])
                                  Tpat_any
                                expression (src/basicSyntax.ml[145,5498+27]..src/basicSyntax.ml[145,5498+47]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/basicSyntax.ml[145,5498+27]..src/basicSyntax.ml[145,5498+32])
                                        Tpat_var "rules/831"
                                      expression (src/basicSyntax.ml[145,5498+36]..src/basicSyntax.ml[145,5498+47])
                                        Texp_construct "::"
                                        [
                                          expression (src/basicSyntax.ml[145,5498+36]..src/basicSyntax.ml[145,5498+38])
                                            Texp_ident "nt/830"
                                          expression (src/basicSyntax.ml[145,5498+42]..src/basicSyntax.ml[145,5498+47])
                                            Texp_ident "rules/831"
                                        ]
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[145,5498+49]..src/basicSyntax.ml[145,5498+62])
                      Texp_field
                      expression (src/basicSyntax.ml[145,5498+49]..src/basicSyntax.ml[145,5498+56])
                        Texp_ident "grammar/829"
                      "rules"
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[145,5498+63]..src/basicSyntax.ml[145,5498+65])
                      Texp_construct "[]"
                      []
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[150,5701+0]..src/basicSyntax.ml[154,5842+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[150,5701+4]..src/basicSyntax.ml[150,5701+23])
          Tpat_var "ocamltype_of_symbol/833"
        expression (src/basicSyntax.ml[150,5701+24]..src/basicSyntax.ml[154,5842+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[150,5701+24]..src/basicSyntax.ml[150,5701+31])
                Tpat_var "grammar/835"
              expression (src/basicSyntax.ml[150,5701+32]..src/basicSyntax.ml[154,5842+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/basicSyntax.ml[150,5701+32]..src/basicSyntax.ml[150,5701+38])
                      Tpat_var "symbol/836"
                    expression (src/basicSyntax.ml[151,5769+2]..src/basicSyntax.ml[154,5842+8])
                      extra
                        Texp_constraint
                        core_type (src/basicSyntax.ml[150,5701+41]..src/basicSyntax.ml[150,5701+65])
                          Ttyp_constr "option/10!"
                          [
                            core_type (src/basicSyntax.ml[150,5701+41]..src/basicSyntax.ml[150,5701+58])
                              Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                              []
                          ]
                      Texp_try
                      expression (src/basicSyntax.ml[152,5775+4]..src/basicSyntax.ml[152,5775+46])
                        Texp_construct "Some"
                        [
                          expression (src/basicSyntax.ml[152,5775+9]..src/basicSyntax.ml[152,5775+46])
                            Texp_apply
                            expression (src/basicSyntax.ml[152,5775+10]..src/basicSyntax.ml[152,5775+24])
                              Texp_ident "Dune__exe!.StringMap.find"
                            [
                              <arg>
                                Nolabel
                                expression (src/basicSyntax.ml[152,5775+25]..src/basicSyntax.ml[152,5775+31])
                                  Texp_ident "symbol/836"
                              <arg>
                                Nolabel
                                expression (src/basicSyntax.ml[152,5775+32]..src/basicSyntax.ml[152,5775+45])
                                  Texp_field
                                  expression (src/basicSyntax.ml[152,5775+32]..src/basicSyntax.ml[152,5775+39])
                                    Texp_ident "grammar/835"
                                  "types"
                            ]
                        ]
                      [
                        <case>
                          pattern (src/basicSyntax.ml[153,5822+7]..src/basicSyntax.ml[153,5822+16])
                            Tpat_construct "Not_found"
                            []
                            None
                          expression (src/basicSyntax.ml[154,5842+4]..src/basicSyntax.ml[154,5842+8])
                            Texp_construct "None"
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[159,5984+0]..src/basicSyntax.ml[164,6166+16])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[159,5984+4]..src/basicSyntax.ml[159,5984+29])
          Tpat_var "ocamltype_of_start_symbol/837"
        expression (src/basicSyntax.ml[159,5984+30]..src/basicSyntax.ml[164,6166+16]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[159,5984+30]..src/basicSyntax.ml[159,5984+37])
                Tpat_var "grammar/839"
              expression (src/basicSyntax.ml[159,5984+38]..src/basicSyntax.ml[164,6166+16]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/basicSyntax.ml[159,5984+38]..src/basicSyntax.ml[159,5984+44])
                      Tpat_var "symbol/840"
                    expression (src/basicSyntax.ml[160,6051+2]..src/basicSyntax.ml[164,6166+16])
                      extra
                        Texp_constraint
                        core_type (src/basicSyntax.ml[159,5984+47]..src/basicSyntax.ml[159,5984+64])
                          Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                          []
                      Texp_try
                      expression (src/basicSyntax.ml[161,6057+4]..src/basicSyntax.ml[161,6057+39])
                        Texp_apply
                        expression (src/basicSyntax.ml[161,6057+4]..src/basicSyntax.ml[161,6057+18])
                          Texp_ident "Dune__exe!.StringMap.find"
                        [
                          <arg>
                            Nolabel
                            expression (src/basicSyntax.ml[161,6057+19]..src/basicSyntax.ml[161,6057+25])
                              Texp_ident "symbol/840"
                          <arg>
                            Nolabel
                            expression (src/basicSyntax.ml[161,6057+26]..src/basicSyntax.ml[161,6057+39])
                              Texp_field
                              expression (src/basicSyntax.ml[161,6057+26]..src/basicSyntax.ml[161,6057+33])
                                Texp_ident "grammar/839"
                              "types"
                        ]
                      [
                        <case>
                          pattern (src/basicSyntax.ml[162,6097+7]..src/basicSyntax.ml[162,6097+16])
                            Tpat_construct "Not_found"
                            []
                            None
                          expression (src/basicSyntax.ml[164,6166+4]..src/basicSyntax.ml[164,6166+16])
                            Texp_assert                            expression (src/basicSyntax.ml[164,6166+11]..src/basicSyntax.ml[164,6166+16])
                              Texp_construct "false"
                              []
                      ]
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[169,6332+0]..src/basicSyntax.ml[176,6592+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[169,6332+4]..src/basicSyntax.ml[169,6332+20])
          Tpat_var "is_inline_symbol/841"
        expression (src/basicSyntax.ml[169,6332+21]..src/basicSyntax.ml[176,6592+11]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[169,6332+21]..src/basicSyntax.ml[169,6332+28])
                Tpat_var "grammar/843"
              expression (src/basicSyntax.ml[169,6332+29]..src/basicSyntax.ml[176,6592+11]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/basicSyntax.ml[169,6332+29]..src/basicSyntax.ml[169,6332+35])
                      Tpat_var "symbol/844"
                    expression (src/basicSyntax.ml[170,6377+2]..src/basicSyntax.ml[176,6592+11])
                      extra
                        Texp_constraint
                        core_type (src/basicSyntax.ml[169,6332+38]..src/basicSyntax.ml[169,6332+42])
                          Ttyp_constr "bool/5!"
                          []
                      Texp_match
                      expression (src/basicSyntax.ml[170,6377+8]..src/basicSyntax.ml[170,6377+43])
                        Texp_apply
                        expression (src/basicSyntax.ml[170,6377+8]..src/basicSyntax.ml[170,6377+22])
                          Texp_ident "Dune__exe!.StringMap.find"
                        [
                          <arg>
                            Nolabel
                            expression (src/basicSyntax.ml[170,6377+23]..src/basicSyntax.ml[170,6377+29])
                              Texp_ident "symbol/844"
                          <arg>
                            Nolabel
                            expression (src/basicSyntax.ml[170,6377+30]..src/basicSyntax.ml[170,6377+43])
                              Texp_field
                              expression (src/basicSyntax.ml[170,6377+30]..src/basicSyntax.ml[170,6377+37])
                                Texp_ident "grammar/843"
                              "rules"
                        ]
                      [
                        <case>
                          pattern (src/basicSyntax.ml[171,6426+4]..src/basicSyntax.ml[171,6426+8])
                            Tpat_value
                            pattern (src/basicSyntax.ml[171,6426+4]..src/basicSyntax.ml[171,6426+8])
                              Tpat_var "rule/845"
                          expression (src/basicSyntax.ml[173,6503+6]..src/basicSyntax.ml[173,6503+22])
                            Texp_field
                            expression (src/basicSyntax.ml[173,6503+6]..src/basicSyntax.ml[173,6503+10])
                              Texp_ident "rule/845"
                            "inline_flag"
                        <case>
                          pattern (src/basicSyntax.ml[174,6526+4]..src/basicSyntax.ml[174,6526+23])
                            Tpat_exception
                            pattern (src/basicSyntax.ml[174,6526+14]..src/basicSyntax.ml[174,6526+23])
                              Tpat_construct "Not_found"
                              []
                              None
                          expression (src/basicSyntax.ml[176,6592+6]..src/basicSyntax.ml[176,6592+11])
                            Texp_construct "false"
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[181,6758+0]..src/basicSyntax.ml[182,6800+53])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[181,6758+4]..src/basicSyntax.ml[181,6758+22])
          Tpat_var "is_inline_producer/846"
        expression (src/basicSyntax.ml[181,6758+23]..src/basicSyntax.ml[182,6800+53]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[181,6758+23]..src/basicSyntax.ml[181,6758+30])
                Tpat_var "grammar/848"
              expression (src/basicSyntax.ml[181,6758+31]..src/basicSyntax.ml[182,6800+53]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/basicSyntax.ml[181,6758+31]..src/basicSyntax.ml[181,6758+39])
                      Tpat_var "producer/849"
                    expression (src/basicSyntax.ml[182,6800+2]..src/basicSyntax.ml[182,6800+53])
                      Texp_apply
                      expression (src/basicSyntax.ml[182,6800+2]..src/basicSyntax.ml[182,6800+18])
                        Texp_ident "is_inline_symbol/841"
                      [
                        <arg>
                          Nolabel
                          expression (src/basicSyntax.ml[182,6800+19]..src/basicSyntax.ml[182,6800+26])
                            Texp_ident "grammar/848"
                        <arg>
                          Nolabel
                          expression (src/basicSyntax.ml[182,6800+27]..src/basicSyntax.ml[182,6800+53])
                            Texp_apply
                            expression (src/basicSyntax.ml[182,6800+28]..src/basicSyntax.ml[182,6800+43])
                              Texp_ident "producer_symbol/800"
                            [
                              <arg>
                                Nolabel
                                expression (src/basicSyntax.ml[182,6800+44]..src/basicSyntax.ml[182,6800+52])
                                  Texp_ident "producer/849"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/basicSyntax.ml[194,7288+0]..src/basicSyntax.ml[199,7487+29])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/basicSyntax.ml[194,7288+4]..src/basicSyntax.ml[194,7288+9])
          Tpat_var "names/850"
        expression (src/basicSyntax.ml[194,7288+10]..src/basicSyntax.ml[199,7487+29]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/basicSyntax.ml[194,7288+11]..src/basicSyntax.ml[194,7288+20])
                extra
                  Tpat_extra_constraint
                  core_type (src/basicSyntax.ml[194,7288+23]..src/basicSyntax.ml[194,7288+32])
                    Ttyp_constr "producers/510"
                    []
                Tpat_alias "producers/852"
                pattern (src/basicSyntax.ml[194,7288+11]..src/basicSyntax.ml[194,7288+20])
                  Tpat_any
              expression (src/basicSyntax.ml[195,7338+2]..src/basicSyntax.ml[199,7487+29])
                extra
                  Texp_constraint
                  core_type (src/basicSyntax.ml[194,7288+36]..src/basicSyntax.ml[194,7288+47])
                    Ttyp_constr "Dune__exe!.StringSet.t"
                    []
                Texp_apply
                expression (src/basicSyntax.ml[195,7338+2]..src/basicSyntax.ml[195,7338+16])
                  Texp_ident "Stdlib!.List.fold_left"
                [
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[195,7338+17]..src/basicSyntax.ml[199,7487+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/basicSyntax.ml[195,7338+22]..src/basicSyntax.ml[195,7338+25])
                            Tpat_var "ids/919"
                          expression (src/basicSyntax.ml[195,7338+26]..src/basicSyntax.ml[198,7462+24]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/basicSyntax.ml[195,7338+26]..src/basicSyntax.ml[195,7338+34])
                                  Tpat_var "producer/920"
                                expression (src/basicSyntax.ml[196,7376+4]..src/basicSyntax.ml[198,7462+24])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/basicSyntax.ml[196,7376+8]..src/basicSyntax.ml[196,7376+10])
                                        Tpat_var "id/921"
                                      expression (src/basicSyntax.ml[196,7376+13]..src/basicSyntax.ml[196,7376+41])
                                        Texp_apply
                                        expression (src/basicSyntax.ml[196,7376+13]..src/basicSyntax.ml[196,7376+32])
                                          Texp_ident "producer_identifier/792"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/basicSyntax.ml[196,7376+33]..src/basicSyntax.ml[196,7376+41])
                                              Texp_ident "producer/920"
                                        ]
                                  ]
                                  expression (src/basicSyntax.ml[197,7421+4]..src/basicSyntax.ml[198,7462+24])
                                    Texp_sequence
                                    expression (src/basicSyntax.ml[197,7421+4]..src/basicSyntax.ml[197,7421+39])
                                      Texp_assert                                      expression (src/basicSyntax.ml[197,7421+11]..src/basicSyntax.ml[197,7421+39])
                                        Texp_apply
                                        expression (src/basicSyntax.ml[197,7421+12]..src/basicSyntax.ml[197,7421+15])
                                          Texp_ident "Stdlib!.not"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/basicSyntax.ml[197,7421+16]..src/basicSyntax.ml[197,7421+38])
                                              Texp_apply
                                              expression (src/basicSyntax.ml[197,7421+17]..src/basicSyntax.ml[197,7421+30])
                                                Texp_ident "Dune__exe!.StringSet.mem"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/basicSyntax.ml[197,7421+31]..src/basicSyntax.ml[197,7421+33])
                                                    Texp_ident "id/921"
                                                <arg>
                                                  Nolabel
                                                  expression (src/basicSyntax.ml[197,7421+34]..src/basicSyntax.ml[197,7421+37])
                                                    Texp_ident "ids/919"
                                              ]
                                        ]
                                    expression (src/basicSyntax.ml[198,7462+4]..src/basicSyntax.ml[198,7462+24])
                                      Texp_apply
                                      expression (src/basicSyntax.ml[198,7462+4]..src/basicSyntax.ml[198,7462+17])
                                        Texp_ident "Dune__exe!.StringSet.add"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/basicSyntax.ml[198,7462+18]..src/basicSyntax.ml[198,7462+20])
                                            Texp_ident "id/921"
                                        <arg>
                                          Nolabel
                                          expression (src/basicSyntax.ml[198,7462+21]..src/basicSyntax.ml[198,7462+24])
                                            Texp_ident "ids/919"
                                      ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[199,7487+4]..src/basicSyntax.ml[199,7487+19])
                      Texp_ident "Dune__exe!.StringSet.empty"
                  <arg>
                    Nolabel
                    expression (src/basicSyntax.ml[199,7487+20]..src/basicSyntax.ml[199,7487+29])
                      Texp_ident "producers/852"
                ]
          ]
    ]
]

{<Dune__exe__BasicSyntax>
 "branch"[type] -> <Dune__exe__BasicSyntax.5>;
 "branches"[type] -> <Dune__exe__BasicSyntax.11>;
 "get_branches"[value] -> <Dune__exe__BasicSyntax.35>;
 "grammar"[type] -> <Dune__exe__BasicSyntax.17>;
 "is_inline_producer"[value] -> <Dune__exe__BasicSyntax.64>;
 "is_inline_symbol"[value] -> <Dune__exe__BasicSyntax.60>;
 "names"[value] -> <Dune__exe__BasicSyntax.67>;
 "nonterminals"[value] -> <Dune__exe__BasicSyntax.50>;
 "ocamltype_of_start_symbol"[value] -> <Dune__exe__BasicSyntax.57>;
 "ocamltype_of_symbol"[value] -> <Dune__exe__BasicSyntax.54>;
 "producer"[type] -> <Dune__exe__BasicSyntax.0>;
 "producer_attributes"[value] -> <Dune__exe__BasicSyntax.33>;
 "producer_identifier"[value] -> <Dune__exe__BasicSyntax.27>;
 "producer_identifier_located"[value] -> <Dune__exe__BasicSyntax.29>;
 "producer_symbol"[value] -> <Dune__exe__BasicSyntax.31>;
 "producers"[type] -> <Dune__exe__BasicSyntax.4>;
 "rule"[type] -> <Dune__exe__BasicSyntax.12>;
 "tokens"[value] -> <Dune__exe__BasicSyntax.40>;
 "transform_branches"[value] -> <Dune__exe__BasicSyntax.37>;
 "typed_tokens"[value] -> <Dune__exe__BasicSyntax.45>;
 }

(seq
  (let
    (producer_identifier/792 =
       (function param/795
         (let
           (*match*/1438 =a (field_imm 2 param/795)
            *match*/1437 =a (field_imm 1 param/795)
            producer_identifier/794 =a (field_imm 0 param/795))
           (apply (field_imm 0 (global Dune__exe__Positions!))
             producer_identifier/794))))
    (setfield_ptr(root-init) 0 (global Dune__exe__BasicSyntax!)
      producer_identifier/792))
  (let
    (producer_identifier_located/796 =
       (function param/799
         (let
           (*match*/1440 =a (field_imm 2 param/799)
            *match*/1439 =a (field_imm 1 param/799)
            producer_identifier/798 =a (field_imm 0 param/799))
           producer_identifier/798)))
    (setfield_ptr(root-init) 1 (global Dune__exe__BasicSyntax!)
      producer_identifier_located/796))
  (let
    (producer_symbol/800 =
       (function param/803
         (let
           (*match*/1442 =a (field_imm 2 param/803)
            producer_symbol/802 =a (field_imm 1 param/803)
            *match*/1441 =a (field_imm 0 param/803))
           producer_symbol/802)))
    (setfield_ptr(root-init) 2 (global Dune__exe__BasicSyntax!)
      producer_symbol/800))
  (let
    (producer_attributes/804 =
       (function param/807
         (let
           (producer_attributes/806 =a (field_imm 2 param/807)
            *match*/1444 =a (field_imm 1 param/807)
            *match*/1443 =a (field_imm 0 param/807))
           producer_attributes/806)))
    (setfield_ptr(root-init) 3 (global Dune__exe__BasicSyntax!)
      producer_attributes/804))
  (let (get_branches/808 = (function rule/810 (field_imm 0 rule/810)))
    (setfield_ptr(root-init) 4 (global Dune__exe__BasicSyntax!)
      get_branches/808))
  (let
    (transform_branches/811 =
       (function f/813 rule/814
         (let (init/1445 = rule/814)
           (makeblock 0 (*,*,int,*) (apply f/813 (field_imm 0 rule/814))
             (field_imm 1 init/1445) (field_int 2 init/1445)
             (field_imm 3 init/1445)))))
    (setfield_ptr(root-init) 5 (global Dune__exe__BasicSyntax!)
      transform_branches/811))
  (let
    (tokens/815 =
       (function grammar/817
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function token/818 properties/819 tokens/820
             (if (field_int 7 properties/819)
               (makeblock 0 token/818 tokens/820) tokens/820))
           (field_imm 5 grammar/817) 0)))
    (setfield_ptr(root-init) 6 (global Dune__exe__BasicSyntax!) tokens/815))
  (let
    (typed_tokens/821 =
       (function grammar/823
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function token/824 properties/825 tokens/826
             (if (field_int 7 properties/825)
               (makeblock 0
                 (makeblock 0 token/824 (field_imm 1 properties/825))
                 tokens/826)
               tokens/826))
           (field_imm 5 grammar/823) 0)))
    (setfield_ptr(root-init) 7 (global Dune__exe__BasicSyntax!)
      typed_tokens/821))
  (let
    (nonterminals/827 =
       (function grammar/829
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function nt/830 param/832 rules/831
             (makeblock 0 nt/830 rules/831))
           (field_imm 8 grammar/829) 0)))
    (setfield_ptr(root-init) 8 (global Dune__exe__BasicSyntax!)
      nonterminals/827))
  (let
    (ocamltype_of_symbol/833 =
       (function grammar/835 symbol/836
         (try
           (makeblock 0
             (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/836
               (field_imm 4 grammar/835)))
          with exn/1446
           (catch
             (if (== exn/1446 (field_imm 7 (global Stdlib!))) 0 (exit 1))
            with (1) (reraise exn/1446)))))
    (setfield_ptr(root-init) 9 (global Dune__exe__BasicSyntax!)
      ocamltype_of_symbol/833))
  (let
    (ocamltype_of_start_symbol/837 =
       (function grammar/839 symbol/840
         (try
           (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/840
             (field_imm 4 grammar/839))
          with exn/1447
           (catch
             (if (== exn/1447 (field_imm 7 (global Stdlib!)))
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/basicSyntax.ml" 164 4]))
               (exit 2))
            with (2) (reraise exn/1447)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__BasicSyntax!)
      ocamltype_of_start_symbol/837))
  (let
    (is_inline_symbol/841 =
       (function grammar/843 symbol/844 : int
         (catch
           (try
             (exit 3
               (apply (field_imm 15 (global Dune__exe__StringMap!))
                 symbol/844 (field_imm 8 grammar/843)))
            with exn/1448
             (catch
               (if (== exn/1448 (field_imm 7 (global Stdlib!))) 0 (exit 4))
              with (4) (reraise exn/1448)))
          with (3 rule/845) (field_int 2 rule/845))))
    (setfield_ptr(root-init) 11 (global Dune__exe__BasicSyntax!)
      is_inline_symbol/841))
  (let
    (is_inline_producer/846 =
       (function grammar/848 producer/849 : int
         (apply (field_imm 11 (global Dune__exe__BasicSyntax!)) grammar/848
           (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
             producer/849))))
    (setfield_ptr(root-init) 12 (global Dune__exe__BasicSyntax!)
      is_inline_producer/846))
  (let
    (names/850 =
       (function producers/852
         (apply (field_imm 25 (global Stdlib__List!))
           (function ids/919 producer/920
             (let
               (id/921 =
                  (apply (field_imm 0 (global Dune__exe__BasicSyntax!))
                    producer/920))
               (seq
                 (if
                   (not
                     (apply (field_imm 29 (global Dune__exe__StringSet!))
                       id/921 ids/919))
                   0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/basicSyntax.ml" 197 4])))
                 (apply (field_imm 1 (global Dune__exe__StringSet!)) id/921
                   ids/919))))
           (field_imm 0 (global Dune__exe__StringSet!)) producers/852)))
    (setfield_ptr(root-init) 13 (global Dune__exe__BasicSyntax!) names/850))
  0)
(seq
  (let
    (producer_identifier/792 =
       (function param/795
         (apply (field_imm 0 (global Dune__exe__Positions!))
           (field_imm 0 param/795))))
    (setfield_ptr(root-init) 0 (global Dune__exe__BasicSyntax!)
      producer_identifier/792))
  (let
    (producer_identifier_located/796 =
       (function param/799 (field_imm 0 param/799)))
    (setfield_ptr(root-init) 1 (global Dune__exe__BasicSyntax!)
      producer_identifier_located/796))
  (let (producer_symbol/800 = (function param/803 (field_imm 1 param/803)))
    (setfield_ptr(root-init) 2 (global Dune__exe__BasicSyntax!)
      producer_symbol/800))
  (let
    (producer_attributes/804 = (function param/807 (field_imm 2 param/807)))
    (setfield_ptr(root-init) 3 (global Dune__exe__BasicSyntax!)
      producer_attributes/804))
  (let (get_branches/808 = (function rule/810 (field_imm 0 rule/810)))
    (setfield_ptr(root-init) 4 (global Dune__exe__BasicSyntax!)
      get_branches/808))
  (let
    (transform_branches/811 =
       (function f/813 rule/814
         (makeblock 0 (*,*,int,*) (apply f/813 (field_imm 0 rule/814))
           (field_imm 1 rule/814) (field_int 2 rule/814)
           (field_imm 3 rule/814))))
    (setfield_ptr(root-init) 5 (global Dune__exe__BasicSyntax!)
      transform_branches/811))
  (let
    (tokens/815 =
       (function grammar/817
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function token/818 properties/819 tokens/820
             (if (field_int 7 properties/819)
               (makeblock 0 token/818 tokens/820) tokens/820))
           (field_imm 5 grammar/817) 0)))
    (setfield_ptr(root-init) 6 (global Dune__exe__BasicSyntax!) tokens/815))
  (let
    (typed_tokens/821 =
       (function grammar/823
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function token/824 properties/825 tokens/826
             (if (field_int 7 properties/825)
               (makeblock 0
                 (makeblock 0 token/824 (field_imm 1 properties/825))
                 tokens/826)
               tokens/826))
           (field_imm 5 grammar/823) 0)))
    (setfield_ptr(root-init) 7 (global Dune__exe__BasicSyntax!)
      typed_tokens/821))
  (let
    (nonterminals/827 =
       (function grammar/829
         (apply (field_imm 22 (global Dune__exe__StringMap!))
           (function nt/830 param/832 rules/831
             (makeblock 0 nt/830 rules/831))
           (field_imm 8 grammar/829) 0)))
    (setfield_ptr(root-init) 8 (global Dune__exe__BasicSyntax!)
      nonterminals/827))
  (let
    (ocamltype_of_symbol/833 =
       (function grammar/835 symbol/836
         (try
           (makeblock 0
             (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/836
               (field_imm 4 grammar/835)))
          with exn/1446
           (if (== exn/1446 (field_imm 7 (global Stdlib!))) 0
             (reraise exn/1446)))))
    (setfield_ptr(root-init) 9 (global Dune__exe__BasicSyntax!)
      ocamltype_of_symbol/833))
  (let
    (ocamltype_of_start_symbol/837 =
       (function grammar/839 symbol/840
         (try
           (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/840
             (field_imm 4 grammar/839))
          with exn/1447
           (if (== exn/1447 (field_imm 7 (global Stdlib!)))
             (raise
               (makeblock 0 (global Assert_failure/28!)
                 [0: "src/basicSyntax.ml" 164 4]))
             (reraise exn/1447)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__BasicSyntax!)
      ocamltype_of_start_symbol/837))
  (let
    (is_inline_symbol/841 =
       (function grammar/843 symbol/844 : int
         (catch
           (try
             (exit 3
               (apply (field_imm 15 (global Dune__exe__StringMap!))
                 symbol/844 (field_imm 8 grammar/843)))
            with exn/1448
             (if (== exn/1448 (field_imm 7 (global Stdlib!))) 0
               (reraise exn/1448)))
          with (3 rule/845) (field_int 2 rule/845))))
    (setfield_ptr(root-init) 11 (global Dune__exe__BasicSyntax!)
      is_inline_symbol/841))
  (let
    (is_inline_producer/846 =
       (function grammar/848 producer/849 : int
         (apply (field_imm 11 (global Dune__exe__BasicSyntax!)) grammar/848
           (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
             producer/849))))
    (setfield_ptr(root-init) 12 (global Dune__exe__BasicSyntax!)
      is_inline_producer/846))
  (let
    (names/850 =
       (function producers/852
         (apply (field_imm 25 (global Stdlib__List!))
           (function ids/919 producer/920
             (let
               (id/921 =
                  (apply (field_imm 0 (global Dune__exe__BasicSyntax!))
                    producer/920))
               (seq
                 (if
                   (not
                     (apply (field_imm 29 (global Dune__exe__StringSet!))
                       id/921 ids/919))
                   0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/basicSyntax.ml" 197 4])))
                 (apply (field_imm 1 (global Dune__exe__StringSet!)) id/921
                   ids/919))))
           (field_imm 0 (global Dune__exe__StringSet!)) producers/852)))
    (setfield_ptr(root-init) 13 (global Dune__exe__BasicSyntax!) names/850))
  0)

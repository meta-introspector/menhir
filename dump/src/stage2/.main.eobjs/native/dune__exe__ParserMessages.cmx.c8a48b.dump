[
  structure_item (src/stage2/parserMessages.ml[6,143+0]..[106,9617+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/stage2/parserMessages.ml[6,143+4]..[6,143+11])
          Ppat_var "message" (src/stage2/parserMessages.ml[6,143+4]..[6,143+11])
        expression (src/stage2/parserMessages.ml[7,157+2]..[106,9617+23])
          Pexp_fun
          Nolabel
          None
          pattern (src/stage2/parserMessages.ml[7,157+6]..[7,157+7])
            Ppat_var "s" (src/stage2/parserMessages.ml[7,157+6]..[7,157+7])
          expression (src/stage2/parserMessages.ml[8,168+4]..[106,9617+23])
            Pexp_match
            expression (src/stage2/parserMessages.ml[8,168+10]..[8,168+11])
              Pexp_ident "s" (src/stage2/parserMessages.ml[8,168+10]..[8,168+11])
            [
              <case>
                pattern (src/stage2/parserMessages.ml[9,185+6]..[9,185+9])
                  Ppat_constant PConst_int (261,None)
                expression (src/stage2/parserMessages.ml[10,198+8]..[10,198+188])
                  Pexp_constant PConst_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | ~ = term; ~ = op; ~ = factor; <EBinOp>\n",(src/stage2/parserMessages.ml[10,198+9]..[10,198+187]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[11,387+6]..[11,387+9])
                  Ppat_constant PConst_int (224,None)
                expression (src/stage2/parserMessages.ml[12,400+8]..[12,400+225])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[12,400+9]..[12,400+224]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[13,626+6]..[13,626+9])
                  Ppat_constant PConst_int (230,None)
                expression (src/stage2/parserMessages.ml[14,639+8]..[14,639+176])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\na comma ',' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[14,639+9]..[14,639+175]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[15,816+6]..[15,816+27])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[15,816+6]..[15,816+21])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[15,816+6]..[15,816+15])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[15,816+6]..[15,816+9])
                        Ppat_constant PConst_int (225,None)
                      pattern (src/stage2/parserMessages.ml[15,816+12]..[15,816+15])
                        Ppat_constant PConst_int (277,None)
                    pattern (src/stage2/parserMessages.ml[15,816+18]..[15,816+21])
                      Ppat_constant PConst_int (238,None)
                  pattern (src/stage2/parserMessages.ml[15,816+24]..[15,816+27])
                    Ppat_constant PConst_int (217,None)
                expression (src/stage2/parserMessages.ml[16,847+8]..[16,847+191])
                  Pexp_constant PConst_string("After a semicolon, an expression is expected.\n(A rule cannot be terminated with a semicolon.)\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n",(src/stage2/parserMessages.ml[16,847+9]..[16,847+190]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[17,1039+6]..[17,1039+27])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[17,1039+6]..[17,1039+21])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[17,1039+6]..[17,1039+15])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[17,1039+6]..[17,1039+9])
                        Ppat_constant PConst_int (214,None)
                      pattern (src/stage2/parserMessages.ml[17,1039+12]..[17,1039+15])
                        Ppat_constant PConst_int (285,None)
                    pattern (src/stage2/parserMessages.ml[17,1039+18]..[17,1039+21])
                      Ppat_constant PConst_int (222,None)
                  pattern (src/stage2/parserMessages.ml[17,1039+24]..[17,1039+27])
                    Ppat_constant PConst_int (231,None)
                expression (src/stage2/parserMessages.ml[18,1070+8]..[18,1070+167])
                  Pexp_constant PConst_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n",(src/stage2/parserMessages.ml[18,1070+9]..[18,1070+166]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[19,1238+6]..[19,1238+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[19,1238+6]..[19,1238+9])
                    Ppat_constant PConst_int (219,None)
                  pattern (src/stage2/parserMessages.ml[19,1238+12]..[19,1238+15])
                    Ppat_constant PConst_int (227,None)
                expression (src/stage2/parserMessages.ml[20,1257+8]..[20,1257+76])
                  Pexp_constant PConst_string("A comma-separated list of expressions is expected at this point.\n",(src/stage2/parserMessages.ml[20,1257+9]..[20,1257+75]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[21,1334+6]..[21,1334+9])
                  Ppat_constant PConst_int (216,None)
                expression (src/stage2/parserMessages.ml[22,1347+8]..[22,1347+167])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[22,1347+9]..[22,1347+166]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[23,1515+6]..[23,1515+9])
                  Ppat_constant PConst_int (284,None)
                expression (src/stage2/parserMessages.ml[24,1528+8]..[24,1528+118])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[24,1528+9]..[24,1528+117]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[25,1647+6]..[25,1647+9])
                  Ppat_constant PConst_int (221,None)
                expression (src/stage2/parserMessages.ml[26,1660+8]..[26,1660+227])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[26,1660+9]..[26,1660+226]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[27,1888+6]..[27,1888+9])
                  Ppat_constant PConst_int (213,None)
                expression (src/stage2/parserMessages.ml[28,1901+8]..[28,1901+214])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[28,1901+9]..[28,1901+213]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[29,2116+6]..[29,2116+9])
                  Ppat_constant PConst_int (207,None)
                expression (src/stage2/parserMessages.ml[30,2129+8]..[30,2129+99])
                  Pexp_constant PConst_string("A pattern is expected at this point.\nExamples of patterns:\n  x\n  ~\n  _\n  (x, y, _)\n",(src/stage2/parserMessages.ml[30,2129+9]..[30,2129+98]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[31,2229+6]..[31,2229+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[31,2229+6]..[31,2229+9])
                    Ppat_constant PConst_int (209,None)
                  pattern (src/stage2/parserMessages.ml[31,2229+12]..[31,2229+15])
                    Ppat_constant PConst_int (211,None)
                expression (src/stage2/parserMessages.ml[32,2248+8]..[32,2248+198])
                  Pexp_constant PConst_string("The previous opening parenthesis seemed to be the beginning of a tuple pattern.\nThus, either a comma ',' followed with a pattern\nor a closing parenthesis ')' is expected at this point.\n",(src/stage2/parserMessages.ml[32,2248+9]..[32,2248+197]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[33,2447+6]..[33,2447+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[33,2447+6]..[33,2447+9])
                    Ppat_constant PConst_int (200,None)
                  pattern (src/stage2/parserMessages.ml[33,2447+12]..[33,2447+15])
                    Ppat_constant PConst_int (203,None)
                expression (src/stage2/parserMessages.ml[34,2466+8]..[34,2466+151])
                  Pexp_constant PConst_string("This opening parenthesis seems to be the beginning of a tuple pattern.\nThus, a comma-separated list of patterns is expected at this point.\n",(src/stage2/parserMessages.ml[34,2466+9]..[34,2466+150]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[35,2618+6]..[35,2618+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[35,2618+6]..[35,2618+9])
                    Ppat_constant PConst_int (272,None)
                  pattern (src/stage2/parserMessages.ml[35,2618+12]..[35,2618+15])
                    Ppat_constant PConst_int (233,None)
                expression (src/stage2/parserMessages.ml[36,2637+8]..[36,2637+56])
                  Pexp_constant PConst_string("A semantic action is expected at this point.\n",(src/stage2/parserMessages.ml[36,2637+9]..[36,2637+55]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[37,2694+6]..[37,2694+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[37,2694+6]..[37,2694+9])
                    Ppat_constant PConst_int (276,None)
                  pattern (src/stage2/parserMessages.ml[37,2694+12]..[37,2694+15])
                    Ppat_constant PConst_int (237,None)
                expression (src/stage2/parserMessages.ml[38,2713+8]..[38,2713+54])
                  Pexp_constant PConst_string("A semicolon ';' is expected at this point.\n",(src/stage2/parserMessages.ml[38,2713+9]..[38,2713+53]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[39,2768+6]..[39,2768+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[39,2768+6]..[39,2768+9])
                    Ppat_constant PConst_int (275,None)
                  pattern (src/stage2/parserMessages.ml[39,2768+12]..[39,2768+15])
                    Ppat_constant PConst_int (236,None)
                expression (src/stage2/parserMessages.ml[40,2787+8]..[40,2787+47])
                  Pexp_constant PConst_string("A symbol is expected at this point.\n",(src/stage2/parserMessages.ml[40,2787+9]..[40,2787+46]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[41,2835+6]..[41,2835+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[41,2835+6]..[41,2835+9])
                    Ppat_constant PConst_int (274,None)
                  pattern (src/stage2/parserMessages.ml[41,2835+12]..[41,2835+15])
                    Ppat_constant PConst_int (235,None)
                expression (src/stage2/parserMessages.ml[42,2854+8]..[42,2854+57])
                  Pexp_constant PConst_string("An equals sign '=' is expected at this point.\n",(src/stage2/parserMessages.ml[42,2854+9]..[42,2854+56]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[43,2912+6]..[43,2912+9])
                  Ppat_constant PConst_int (191,None)
                expression (src/stage2/parserMessages.ml[44,2925+8]..[44,2925+167])
                  Pexp_constant PConst_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n",(src/stage2/parserMessages.ml[44,2925+9]..[44,2925+166]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[45,3093+6]..[45,3093+9])
                  Ppat_constant PConst_int (186,None)
                expression (src/stage2/parserMessages.ml[46,3106+8]..[46,3106+133])
                  Pexp_constant PConst_string("At this point, one of the following is expected:\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[46,3106+9]..[46,3106+132]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[47,3240+6]..[47,3240+9])
                  Ppat_constant PConst_int (185,None)
                expression (src/stage2/parserMessages.ml[48,3253+8]..[48,3253+82])
                  Pexp_constant PConst_string("A comma-delimited list of formal parameters is expected at this point.\n",(src/stage2/parserMessages.ml[48,3253+9]..[48,3253+81]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[49,3336+6]..[49,3336+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[49,3336+6]..[49,3336+9])
                    Ppat_constant PConst_int (184,None)
                  pattern (src/stage2/parserMessages.ml[49,3336+12]..[49,3336+15])
                    Ppat_constant PConst_int (188,None)
                expression (src/stage2/parserMessages.ml[50,3355+8]..[50,3355+232])
                  Pexp_constant PConst_string("An equality symbol ':=' or '==' is expected at this point.\nExamples of well-formed rules:\n  let  option(X) := { None } | x = X; { Some x } (* ordinary *)\n  let ioption(X) == { None } | x = X; { Some x } (*  inline  *)\n",(src/stage2/parserMessages.ml[50,3355+9]..[50,3355+231]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[51,3588+6]..[51,3588+9])
                  Ppat_constant PConst_int (180,None)
                expression (src/stage2/parserMessages.ml[52,3601+8]..[52,3601+61])
                  Pexp_constant PConst_string("A lowercase identifier is expected at this point.\n",(src/stage2/parserMessages.ml[52,3601+9]..[52,3601+60]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[53,3663+6]..[53,3663+8])
                  Ppat_constant PConst_int (93,None)
                expression (src/stage2/parserMessages.ml[54,3675+8]..[54,3675+246])
                  Pexp_constant PConst_string("Ill-formed rule.\n'let' or '%inline' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public     option(X):   { None } | x = X  { Some x }\n  %public let option(X) := { None } | x = X; { Some x }\n",(src/stage2/parserMessages.ml[54,3675+9]..[54,3675+245]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+33])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+28])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+23])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+18])
                        Ppat_or
                        pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+13])
                          Ppat_or
                          pattern (src/stage2/parserMessages.ml[55,3922+6]..[55,3922+8])
                            Ppat_constant PConst_int (59,None)
                          pattern (src/stage2/parserMessages.ml[55,3922+11]..[55,3922+13])
                            Ppat_constant PConst_int (67,None)
                        pattern (src/stage2/parserMessages.ml[55,3922+16]..[55,3922+18])
                          Ppat_constant PConst_int (61,None)
                      pattern (src/stage2/parserMessages.ml[55,3922+21]..[55,3922+23])
                        Ppat_constant PConst_int (66,None)
                    pattern (src/stage2/parserMessages.ml[55,3922+26]..[55,3922+28])
                      Ppat_constant PConst_int (62,None)
                  pattern (src/stage2/parserMessages.ml[55,3922+31]..[55,3922+33])
                    Ppat_constant PConst_int (71,None)
                expression (src/stage2/parserMessages.ml[56,3959+8]..[56,3959+299])
                  Pexp_constant PConst_string("Ill-formed '%attribute' declaration.\nAn '%attribute' declaration should contain a nonempty list of symbols,\nfollowed with a nonempty list of attributes.\nExamples of well-formed declarations:\n  %attribute FOO [@printer \"foo\"]\n  %attribute bar BAZ [@printer \"bar/BAZ\"] [@cost 2.0]\n",(src/stage2/parserMessages.ml[56,3959+9]..[56,3959+298]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[57,4259+6]..[57,4259+8])
                  Ppat_constant PConst_int (13,None)
                expression (src/stage2/parserMessages.ml[58,4271+8]..[58,4271+267])
                  Pexp_constant PConst_string("Ill-formed list of actual parameters.\nEither a modifier '*' or '+' or '?'\nor a closing parenthesis ')'\nor a comma ',' is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n",(src/stage2/parserMessages.ml[58,4271+9]..[58,4271+266]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[59,4539+6]..[59,4539+20])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[59,4539+6]..[59,4539+14])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[59,4539+6]..[59,4539+8])
                      Ppat_constant PConst_int (12,None)
                    pattern (src/stage2/parserMessages.ml[59,4539+11]..[59,4539+14])
                      Ppat_constant PConst_int (156,None)
                  pattern (src/stage2/parserMessages.ml[59,4539+17]..[59,4539+20])
                    Ppat_constant PConst_int (122,None)
                expression (src/stage2/parserMessages.ml[60,4563+8]..[60,4563+229])
                  Pexp_constant PConst_string("Ill-formed list of actual parameters.\nA comma-delimited list of actual parameters is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n",(src/stage2/parserMessages.ml[60,4563+9]..[60,4563+228]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[61,4793+6]..[61,4793+9])
                  Ppat_constant PConst_int (176,None)
                expression (src/stage2/parserMessages.ml[62,4806+8]..[62,4806+164])
                  Pexp_constant PConst_string("Either another rule\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n",(src/stage2/parserMessages.ml[62,4806+9]..[62,4806+163]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[63,4971+6]..[63,4971+9])
                  Ppat_constant PConst_int (114,None)
                expression (src/stage2/parserMessages.ml[64,4984+8]..[64,4984+142])
                  Pexp_constant PConst_string("Ill-formed rule.\nA colon ':' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n",(src/stage2/parserMessages.ml[64,4984+9]..[64,4984+141]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[65,5127+6]..[65,5127+9])
                  Ppat_constant PConst_int (137,None)
                expression (src/stage2/parserMessages.ml[66,5140+8]..[66,5140+201])
                  Pexp_constant PConst_string("Ill-formed rule.\nEither a semantic action '{' ... '}'\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  expr: MINUS e = expr %prec UMINUS { -e }\n",(src/stage2/parserMessages.ml[66,5140+9]..[66,5140+200]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[67,5342+6]..[67,5342+27])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[67,5342+6]..[67,5342+21])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[67,5342+6]..[67,5342+15])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[67,5342+6]..[67,5342+9])
                        Ppat_constant PConst_int (151,None)
                      pattern (src/stage2/parserMessages.ml[67,5342+12]..[67,5342+15])
                        Ppat_constant PConst_int (130,None)
                    pattern (src/stage2/parserMessages.ml[67,5342+18]..[67,5342+21])
                      Ppat_constant PConst_int (170,None)
                  pattern (src/stage2/parserMessages.ml[67,5342+24]..[67,5342+27])
                    Ppat_constant PConst_int (194,None)
                expression (src/stage2/parserMessages.ml[68,5373+8]..[68,5373+159])
                  Pexp_constant PConst_string("Ill-formed %prec annotation.\nA symbol is expected at this point.\nExamples of well-formed annotations:\n  expr: MINUS e = expr %prec UMINUS { -e }\n",(src/stage2/parserMessages.ml[68,5373+9]..[68,5373+158]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[69,5533+6]..[69,5533+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[69,5533+6]..[69,5533+9])
                    Ppat_constant PConst_int (129,None)
                  pattern (src/stage2/parserMessages.ml[69,5533+12]..[69,5533+15])
                    Ppat_constant PConst_int (134,None)
                expression (src/stage2/parserMessages.ml[70,5552+8]..[70,5552+119])
                  Pexp_constant PConst_string("Either another production '|' ...\nor a comma ','\nor a closing parenthesis ')'\nis expected at this point.\n",(src/stage2/parserMessages.ml[70,5552+9]..[70,5552+118]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[71,5672+6]..[71,5672+9])
                  Ppat_constant PConst_int (135,None)
                expression (src/stage2/parserMessages.ml[72,5685+8]..[72,5685+375])
                  Pexp_constant PConst_string("A production is expected at this point.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n",(src/stage2/parserMessages.ml[72,5685+9]..[72,5685+374]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+45])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+39])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+33])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+27])
                        Ppat_or
                        pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+21])
                          Ppat_or
                          pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+15])
                            Ppat_or
                            pattern (src/stage2/parserMessages.ml[73,6061+6]..[73,6061+9])
                              Ppat_constant PConst_int (146,None)
                            pattern (src/stage2/parserMessages.ml[73,6061+12]..[73,6061+15])
                              Ppat_constant PConst_int (147,None)
                          pattern (src/stage2/parserMessages.ml[73,6061+18]..[73,6061+21])
                            Ppat_constant PConst_int (118,None)
                        pattern (src/stage2/parserMessages.ml[73,6061+24]..[73,6061+27])
                          Ppat_constant PConst_int (119,None)
                      pattern (src/stage2/parserMessages.ml[73,6061+30]..[73,6061+33])
                        Ppat_constant PConst_int (162,None)
                    pattern (src/stage2/parserMessages.ml[73,6061+36]..[73,6061+39])
                      Ppat_constant PConst_int (124,None)
                  pattern (src/stage2/parserMessages.ml[73,6061+42]..[73,6061+45])
                    Ppat_constant PConst_int (159,None)
                expression (src/stage2/parserMessages.ml[74,6110+8]..[74,6110+376])
                  Pexp_constant PConst_string("Ill-formed production.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n  expr [@cost 0]\n",(src/stage2/parserMessages.ml[74,6110+9]..[74,6110+375]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[75,6487+6]..[75,6487+27])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[75,6487+6]..[75,6487+21])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[75,6487+6]..[75,6487+15])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[75,6487+6]..[75,6487+9])
                        Ppat_constant PConst_int (115,None)
                      pattern (src/stage2/parserMessages.ml[75,6487+12]..[75,6487+15])
                        Ppat_constant PConst_int (117,None)
                    pattern (src/stage2/parserMessages.ml[75,6487+18]..[75,6487+21])
                      Ppat_constant PConst_int (177,None)
                  pattern (src/stage2/parserMessages.ml[75,6487+24]..[75,6487+27])
                    Ppat_constant PConst_int (138,None)
                expression (src/stage2/parserMessages.ml[76,6518+8]..[76,6518+238])
                  Pexp_constant PConst_string("Ill-formed rule.\nA list of productions is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  symbol: s = LID | s = UID { s }\n",(src/stage2/parserMessages.ml[76,6518+9]..[76,6518+237]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[77,6757+6]..[77,6757+9])
                  Ppat_constant PConst_int (112,None)
                expression (src/stage2/parserMessages.ml[78,6770+8]..[78,6770+195])
                  Pexp_constant PConst_string("Ill-formed rule.\nA closing parenthesis ')' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[78,6770+9]..[78,6770+194]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[79,6966+6]..[79,6966+15])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[79,6966+6]..[79,6966+9])
                    Ppat_constant PConst_int (108,None)
                  pattern (src/stage2/parserMessages.ml[79,6966+12]..[79,6966+15])
                    Ppat_constant PConst_int (110,None)
                expression (src/stage2/parserMessages.ml[80,6985+8]..[80,6985+213])
                  Pexp_constant PConst_string("Ill-formed rule.\nA comma-delimited list of formal parameters is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[80,6985+9]..[80,6985+212]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[81,7199+6]..[81,7199+9])
                  Ppat_constant PConst_int (107,None)
                expression (src/stage2/parserMessages.ml[82,7212+8]..[82,7212+361])
                  Pexp_constant PConst_string("Ill-formed rule.\nEither a parenthesized, comma-delimited list of formal parameters\nor an attribute\nor a colon ':' is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  option(X): { None } | x = X { Some x }\n  main [@cost 0]: e = expr; EOL { e }\n",(src/stage2/parserMessages.ml[82,7212+9]..[82,7212+360]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[83,7574+6]..[83,7574+9])
                  Ppat_constant PConst_int (100,None)
                expression (src/stage2/parserMessages.ml[84,7587+8]..[84,7587+283])
                  Pexp_constant PConst_string("Ill-formed rule.\nA non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[84,7587+9]..[84,7587+282]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[85,7871+6]..[85,7871+8])
                  Ppat_constant PConst_int (95,None)
                expression (src/stage2/parserMessages.ml[86,7883+8]..[86,7883+303])
                  Pexp_constant PConst_string("Ill-formed rule.\nEither '%public' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[86,7883+9]..[86,7883+302]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[87,8187+6]..[87,8187+9])
                  Ppat_constant PConst_int (169,None)
                expression (src/stage2/parserMessages.ml[88,8200+8]..[88,8200+89])
                  Pexp_constant PConst_string("Either another production '|' ...\nor another rule is expected at this point.\n",(src/stage2/parserMessages.ml[88,8200+9]..[88,8200+88]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[89,8290+6]..[89,8290+9])
                  Ppat_constant PConst_int (165,None)
                expression (src/stage2/parserMessages.ml[90,8303+8]..[90,8303+51])
                  Pexp_constant PConst_string("Another rule is expected at this point.\n",(src/stage2/parserMessages.ml[90,8303+9]..[90,8303+50]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[91,8355+6]..[91,8355+8])
                  Ppat_constant PConst_int (92,None)
                expression (src/stage2/parserMessages.ml[92,8367+8]..[92,8367+45])
                  Pexp_constant PConst_string("A rule is expected at this point.\n",(src/stage2/parserMessages.ml[92,8367+9]..[92,8367+44]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[93,8413+6]..[93,8413+8])
                  Ppat_constant PConst_int (74,None)
                expression (src/stage2/parserMessages.ml[94,8425+8]..[94,8425+122])
                  Pexp_constant PConst_string("Ill-formed '%parameter' declaration.\nExamples of well-formed declarations:\n  %parameter <X : sig type t end>\n",(src/stage2/parserMessages.ml[94,8425+9]..[94,8425+121]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[95,8548+6]..[95,8548+18])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[95,8548+6]..[95,8548+13])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[95,8548+6]..[95,8548+8])
                      Ppat_constant PConst_int (86,None)
                    pattern (src/stage2/parserMessages.ml[95,8548+11]..[95,8548+13])
                      Ppat_constant PConst_int (87,None)
                  pattern (src/stage2/parserMessages.ml[95,8548+16]..[95,8548+18])
                    Ppat_constant PConst_int (88,None)
                expression (src/stage2/parserMessages.ml[96,8570+8]..[96,8570+161])
                  Pexp_constant PConst_string("Ill-formed precedence declaration.\nExamples of well-formed declarations:\n  %left PLUS\n  %left PLUS MINUS\n  %nonassoc unary_minus\n  %right CONCAT\n",(src/stage2/parserMessages.ml[96,8570+9]..[96,8570+160]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[97,8732+6]..[97,8732+23])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[97,8732+6]..[97,8732+18])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[97,8732+6]..[97,8732+13])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[97,8732+6]..[97,8732+8])
                        Ppat_constant PConst_int (49,None)
                      pattern (src/stage2/parserMessages.ml[97,8732+11]..[97,8732+13])
                        Ppat_constant PConst_int (51,None)
                    pattern (src/stage2/parserMessages.ml[97,8732+16]..[97,8732+18])
                      Ppat_constant PConst_int (52,None)
                  pattern (src/stage2/parserMessages.ml[97,8732+21]..[97,8732+23])
                    Ppat_constant PConst_int (53,None)
                expression (src/stage2/parserMessages.ml[98,8759+8]..[98,8759+207])
                  Pexp_constant PConst_string("Ill-formed '%start' declaration.\nA start symbol must begin with a lowercase letter.\nExamples of well-formed declarations:\n  %start program\n  %start expression phrase\n  %start <int> date time\n",(src/stage2/parserMessages.ml[98,8759+9]..[98,8759+206]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[99,8967+6]..[99,8967+28])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[99,8967+6]..[99,8967+23])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[99,8967+6]..[99,8967+18])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[99,8967+6]..[99,8967+13])
                        Ppat_or
                        pattern (src/stage2/parserMessages.ml[99,8967+6]..[99,8967+8])
                          Ppat_constant PConst_int (37,None)
                        pattern (src/stage2/parserMessages.ml[99,8967+11]..[99,8967+13])
                          Ppat_constant PConst_int (39,None)
                      pattern (src/stage2/parserMessages.ml[99,8967+16]..[99,8967+18])
                        Ppat_constant PConst_int (40,None)
                    pattern (src/stage2/parserMessages.ml[99,8967+21]..[99,8967+23])
                      Ppat_constant PConst_int (45,None)
                  pattern (src/stage2/parserMessages.ml[99,8967+26]..[99,8967+28])
                    Ppat_constant PConst_int (46,None)
                expression (src/stage2/parserMessages.ml[100,8999+8]..[100,8999+204])
                  Pexp_constant PConst_string("Ill-formed '%token' declaration.\nExamples of well-formed declarations:\n  %token FOO\n  %token BAR \"|\"\n  %token DOT \".\" SEMICOLON \";\"\n  %token <string> LID UID\n  %token FOO [@cost 0]\n",(src/stage2/parserMessages.ml[100,8999+9]..[100,8999+203]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+44])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+39])
                    Ppat_or
                    pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+34])
                      Ppat_or
                      pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+29])
                        Ppat_or
                        pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+24])
                          Ppat_or
                          pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+19])
                            Ppat_or
                            pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+15])
                              Ppat_or
                              pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+11])
                                Ppat_or
                                pattern (src/stage2/parserMessages.ml[101,9204+6]..[101,9204+7])
                                  Ppat_constant PConst_int (1,None)
                                pattern (src/stage2/parserMessages.ml[101,9204+10]..[101,9204+11])
                                  Ppat_constant PConst_int (2,None)
                              pattern (src/stage2/parserMessages.ml[101,9204+14]..[101,9204+15])
                                Ppat_constant PConst_int (6,None)
                            pattern (src/stage2/parserMessages.ml[101,9204+18]..[101,9204+19])
                              Ppat_constant PConst_int (7,None)
                          pattern (src/stage2/parserMessages.ml[101,9204+22]..[101,9204+24])
                            Ppat_constant PConst_int (32,None)
                        pattern (src/stage2/parserMessages.ml[101,9204+27]..[101,9204+29])
                          Ppat_constant PConst_int (11,None)
                      pattern (src/stage2/parserMessages.ml[101,9204+32]..[101,9204+34])
                        Ppat_constant PConst_int (17,None)
                    pattern (src/stage2/parserMessages.ml[101,9204+37]..[101,9204+39])
                      Ppat_constant PConst_int (27,None)
                  pattern (src/stage2/parserMessages.ml[101,9204+42]..[101,9204+44])
                    Ppat_constant PConst_int (76,None)
                expression (src/stage2/parserMessages.ml[102,9252+8]..[102,9252+268])
                  Pexp_constant PConst_string("Ill-formed declaration.\nExamples of well-formed declarations:\n  %type <Syntax.expression> expression\n  %type <int> date time\n  %type <int option> option(date)\n  %on_error_reduce expression\n  %on_error_reduce date time\n  %on_error_reduce option(date)\n",(src/stage2/parserMessages.ml[102,9252+9]..[102,9252+267]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[103,9521+6]..[103,9521+13])
                  Ppat_or
                  pattern (src/stage2/parserMessages.ml[103,9521+6]..[103,9521+7])
                    Ppat_constant PConst_int (0,None)
                  pattern (src/stage2/parserMessages.ml[103,9521+10]..[103,9521+13])
                    Ppat_constant PConst_int (296,None)
                expression (src/stage2/parserMessages.ml[104,9538+8]..[104,9538+67])
                  Pexp_constant PConst_string("Either a declaration or '%%' is expected at this point.\n",(src/stage2/parserMessages.ml[104,9538+9]..[104,9538+66]),None)
              <case>
                pattern (src/stage2/parserMessages.ml[105,9606+6]..[105,9606+7])
                  Ppat_any
                expression (src/stage2/parserMessages.ml[106,9617+8]..[106,9617+23])
                  Pexp_apply
                  expression (src/stage2/parserMessages.ml[106,9617+8]..[106,9617+13])
                    Pexp_ident "raise" (src/stage2/parserMessages.ml[106,9617+8]..[106,9617+13])
                  [
                    <arg>
                    Nolabel
                      expression (src/stage2/parserMessages.ml[106,9617+14]..[106,9617+23])
                        Pexp_construct "Not_found" (src/stage2/parserMessages.ml[106,9617+14]..[106,9617+23])
                        None
                  ]
            ]
    ]
]

let message s =
  match s with
  | 261 ->
      "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | ~ = term; ~ = op; ~ = factor; <EBinOp>\n"
  | 224 ->
      "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
  | 230 ->
      "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
  | 225 | 277 | 238 | 217 ->
      "After a semicolon, an expression is expected.\n(A rule cannot be terminated with a semicolon.)\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n"
  | 214 | 285 | 222 | 231 ->
      "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n"
  | 219 | 227 ->
      "A comma-separated list of expressions is expected at this point.\n"
  | 216 ->
      "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
  | 284 ->
      "At this point, one of the following is expected:\na bar '|' followed with an expression, or\nanother rule.\n"
  | 221 ->
      "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
  | 213 ->
      "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
  | 207 ->
      "A pattern is expected at this point.\nExamples of patterns:\n  x\n  ~\n  _\n  (x, y, _)\n"
  | 209 | 211 ->
      "The previous opening parenthesis seemed to be the beginning of a tuple pattern.\nThus, either a comma ',' followed with a pattern\nor a closing parenthesis ')' is expected at this point.\n"
  | 200 | 203 ->
      "This opening parenthesis seems to be the beginning of a tuple pattern.\nThus, a comma-separated list of patterns is expected at this point.\n"
  | 272 | 233 -> "A semantic action is expected at this point.\n"
  | 276 | 237 -> "A semicolon ';' is expected at this point.\n"
  | 275 | 236 -> "A symbol is expected at this point.\n"
  | 274 | 235 -> "An equals sign '=' is expected at this point.\n"
  | 191 ->
      "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n"
  | 186 ->
      "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
  | 185 ->
      "A comma-delimited list of formal parameters is expected at this point.\n"
  | 184 | 188 ->
      "An equality symbol ':=' or '==' is expected at this point.\nExamples of well-formed rules:\n  let  option(X) := { None } | x = X; { Some x } (* ordinary *)\n  let ioption(X) == { None } | x = X; { Some x } (*  inline  *)\n"
  | 180 -> "A lowercase identifier is expected at this point.\n"
  | 93 ->
      "Ill-formed rule.\n'let' or '%inline' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public     option(X):   { None } | x = X  { Some x }\n  %public let option(X) := { None } | x = X; { Some x }\n"
  | 59 | 67 | 61 | 66 | 62 | 71 ->
      "Ill-formed '%attribute' declaration.\nAn '%attribute' declaration should contain a nonempty list of symbols,\nfollowed with a nonempty list of attributes.\nExamples of well-formed declarations:\n  %attribute FOO [@printer \"foo\"]\n  %attribute bar BAZ [@printer \"bar/BAZ\"] [@cost 2.0]\n"
  | 13 ->
      "Ill-formed list of actual parameters.\nEither a modifier '*' or '+' or '?'\nor a closing parenthesis ')'\nor a comma ',' is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n"
  | 12 | 156 | 122 ->
      "Ill-formed list of actual parameters.\nA comma-delimited list of actual parameters is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n"
  | 176 ->
      "Either another rule\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
  | 114 ->
      "Ill-formed rule.\nA colon ':' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
  | 137 ->
      "Ill-formed rule.\nEither a semantic action '{' ... '}'\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  expr: MINUS e = expr %prec UMINUS { -e }\n"
  | 151 | 130 | 170 | 194 ->
      "Ill-formed %prec annotation.\nA symbol is expected at this point.\nExamples of well-formed annotations:\n  expr: MINUS e = expr %prec UMINUS { -e }\n"
  | 129 | 134 ->
      "Either another production '|' ...\nor a comma ','\nor a closing parenthesis ')'\nis expected at this point.\n"
  | 135 ->
      "A production is expected at this point.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n"
  | 146 | 147 | 118 | 119 | 162 | 124 | 159 ->
      "Ill-formed production.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n  expr [@cost 0]\n"
  | 115 | 117 | 177 | 138 ->
      "Ill-formed rule.\nA list of productions is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  symbol: s = LID | s = UID { s }\n"
  | 112 ->
      "Ill-formed rule.\nA closing parenthesis ')' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n"
  | 108 | 110 ->
      "Ill-formed rule.\nA comma-delimited list of formal parameters is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n"
  | 107 ->
      "Ill-formed rule.\nEither a parenthesized, comma-delimited list of formal parameters\nor an attribute\nor a colon ':' is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  option(X): { None } | x = X { Some x }\n  main [@cost 0]: e = expr; EOL { e }\n"
  | 100 ->
      "Ill-formed rule.\nA non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
  | 95 ->
      "Ill-formed rule.\nEither '%public' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
  | 169 ->
      "Either another production '|' ...\nor another rule is expected at this point.\n"
  | 165 -> "Another rule is expected at this point.\n"
  | 92 -> "A rule is expected at this point.\n"
  | 74 ->
      "Ill-formed '%parameter' declaration.\nExamples of well-formed declarations:\n  %parameter <X : sig type t end>\n"
  | 86 | 87 | 88 ->
      "Ill-formed precedence declaration.\nExamples of well-formed declarations:\n  %left PLUS\n  %left PLUS MINUS\n  %nonassoc unary_minus\n  %right CONCAT\n"
  | 49 | 51 | 52 | 53 ->
      "Ill-formed '%start' declaration.\nA start symbol must begin with a lowercase letter.\nExamples of well-formed declarations:\n  %start program\n  %start expression phrase\n  %start <int> date time\n"
  | 37 | 39 | 40 | 45 | 46 ->
      "Ill-formed '%token' declaration.\nExamples of well-formed declarations:\n  %token FOO\n  %token BAR \"|\"\n  %token DOT \".\" SEMICOLON \";\"\n  %token <string> LID UID\n  %token FOO [@cost 0]\n"
  | 1 | 2 | 6 | 7 | 32 | 11 | 17 | 27 | 76 ->
      "Ill-formed declaration.\nExamples of well-formed declarations:\n  %type <Syntax.expression> expression\n  %type <int> date time\n  %type <int option> option(date)\n  %on_error_reduce expression\n  %on_error_reduce date time\n  %on_error_reduce option(date)\n"
  | 0 | 296 -> "Either a declaration or '%%' is expected at this point.\n"
  | _ -> raise Not_found
[
  structure_item (src/stage2/parserMessages.ml[6,143+0]..src/stage2/parserMessages.ml[106,9617+23])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/stage2/parserMessages.ml[6,143+4]..src/stage2/parserMessages.ml[6,143+11])
          Tpat_var "message/397"
        expression (src/stage2/parserMessages.ml[7,157+2]..src/stage2/parserMessages.ml[106,9617+23])
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/stage2/parserMessages.ml[7,157+6]..src/stage2/parserMessages.ml[7,157+7])
                Tpat_var "s/399"
              expression (src/stage2/parserMessages.ml[8,168+4]..src/stage2/parserMessages.ml[106,9617+23])
                Texp_match
                expression (src/stage2/parserMessages.ml[8,168+10]..src/stage2/parserMessages.ml[8,168+11])
                  Texp_ident "s/399"
                [
                  <case>
                    pattern (src/stage2/parserMessages.ml[9,185+6]..src/stage2/parserMessages.ml[9,185+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[9,185+6]..src/stage2/parserMessages.ml[9,185+9])
                        Tpat_constant Const_int 261
                    expression (src/stage2/parserMessages.ml[10,198+8]..src/stage2/parserMessages.ml[10,198+188])
                      Texp_constant Const_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | ~ = term; ~ = op; ~ = factor; <EBinOp>\n",(src/stage2/parserMessages.ml[10,198+9]..src/stage2/parserMessages.ml[10,198+187]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[11,387+6]..src/stage2/parserMessages.ml[11,387+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[11,387+6]..src/stage2/parserMessages.ml[11,387+9])
                        Tpat_constant Const_int 224
                    expression (src/stage2/parserMessages.ml[12,400+8]..src/stage2/parserMessages.ml[12,400+225])
                      Texp_constant Const_string("At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[12,400+9]..src/stage2/parserMessages.ml[12,400+224]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[13,626+6]..src/stage2/parserMessages.ml[13,626+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[13,626+6]..src/stage2/parserMessages.ml[13,626+9])
                        Tpat_constant Const_int 230
                    expression (src/stage2/parserMessages.ml[14,639+8]..src/stage2/parserMessages.ml[14,639+176])
                      Texp_constant Const_string("At this point, one of the following is expected:\na comma ',' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[14,639+9]..src/stage2/parserMessages.ml[14,639+175]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[15,816+6]..src/stage2/parserMessages.ml[15,816+27])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[15,816+6]..src/stage2/parserMessages.ml[15,816+21])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[15,816+6]..src/stage2/parserMessages.ml[15,816+15])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[15,816+6]..src/stage2/parserMessages.ml[15,816+9])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[15,816+6]..src/stage2/parserMessages.ml[15,816+9])
                              Tpat_constant Const_int 225
                          pattern (src/stage2/parserMessages.ml[15,816+12]..src/stage2/parserMessages.ml[15,816+15])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[15,816+12]..src/stage2/parserMessages.ml[15,816+15])
                              Tpat_constant Const_int 277
                        pattern (src/stage2/parserMessages.ml[15,816+18]..src/stage2/parserMessages.ml[15,816+21])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[15,816+18]..src/stage2/parserMessages.ml[15,816+21])
                            Tpat_constant Const_int 238
                      pattern (src/stage2/parserMessages.ml[15,816+24]..src/stage2/parserMessages.ml[15,816+27])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[15,816+24]..src/stage2/parserMessages.ml[15,816+27])
                          Tpat_constant Const_int 217
                    expression (src/stage2/parserMessages.ml[16,847+8]..src/stage2/parserMessages.ml[16,847+191])
                      Texp_constant Const_string("After a semicolon, an expression is expected.\n(A rule cannot be terminated with a semicolon.)\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n",(src/stage2/parserMessages.ml[16,847+9]..src/stage2/parserMessages.ml[16,847+190]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[17,1039+6]..src/stage2/parserMessages.ml[17,1039+27])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[17,1039+6]..src/stage2/parserMessages.ml[17,1039+21])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[17,1039+6]..src/stage2/parserMessages.ml[17,1039+15])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[17,1039+6]..src/stage2/parserMessages.ml[17,1039+9])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[17,1039+6]..src/stage2/parserMessages.ml[17,1039+9])
                              Tpat_constant Const_int 214
                          pattern (src/stage2/parserMessages.ml[17,1039+12]..src/stage2/parserMessages.ml[17,1039+15])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[17,1039+12]..src/stage2/parserMessages.ml[17,1039+15])
                              Tpat_constant Const_int 285
                        pattern (src/stage2/parserMessages.ml[17,1039+18]..src/stage2/parserMessages.ml[17,1039+21])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[17,1039+18]..src/stage2/parserMessages.ml[17,1039+21])
                            Tpat_constant Const_int 222
                      pattern (src/stage2/parserMessages.ml[17,1039+24]..src/stage2/parserMessages.ml[17,1039+27])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[17,1039+24]..src/stage2/parserMessages.ml[17,1039+27])
                          Tpat_constant Const_int 231
                    expression (src/stage2/parserMessages.ml[18,1070+8]..src/stage2/parserMessages.ml[18,1070+167])
                      Texp_constant Const_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n",(src/stage2/parserMessages.ml[18,1070+9]..src/stage2/parserMessages.ml[18,1070+166]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[19,1238+6]..src/stage2/parserMessages.ml[19,1238+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[19,1238+6]..src/stage2/parserMessages.ml[19,1238+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[19,1238+6]..src/stage2/parserMessages.ml[19,1238+9])
                          Tpat_constant Const_int 219
                      pattern (src/stage2/parserMessages.ml[19,1238+12]..src/stage2/parserMessages.ml[19,1238+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[19,1238+12]..src/stage2/parserMessages.ml[19,1238+15])
                          Tpat_constant Const_int 227
                    expression (src/stage2/parserMessages.ml[20,1257+8]..src/stage2/parserMessages.ml[20,1257+76])
                      Texp_constant Const_string("A comma-separated list of expressions is expected at this point.\n",(src/stage2/parserMessages.ml[20,1257+9]..src/stage2/parserMessages.ml[20,1257+75]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[21,1334+6]..src/stage2/parserMessages.ml[21,1334+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[21,1334+6]..src/stage2/parserMessages.ml[21,1334+9])
                        Tpat_constant Const_int 216
                    expression (src/stage2/parserMessages.ml[22,1347+8]..src/stage2/parserMessages.ml[22,1347+167])
                      Texp_constant Const_string("At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[22,1347+9]..src/stage2/parserMessages.ml[22,1347+166]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[23,1515+6]..src/stage2/parserMessages.ml[23,1515+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[23,1515+6]..src/stage2/parserMessages.ml[23,1515+9])
                        Tpat_constant Const_int 284
                    expression (src/stage2/parserMessages.ml[24,1528+8]..src/stage2/parserMessages.ml[24,1528+118])
                      Texp_constant Const_string("At this point, one of the following is expected:\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[24,1528+9]..src/stage2/parserMessages.ml[24,1528+117]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[25,1647+6]..src/stage2/parserMessages.ml[25,1647+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[25,1647+6]..src/stage2/parserMessages.ml[25,1647+9])
                        Tpat_constant Const_int 221
                    expression (src/stage2/parserMessages.ml[26,1660+8]..src/stage2/parserMessages.ml[26,1660+227])
                      Texp_constant Const_string("At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[26,1660+9]..src/stage2/parserMessages.ml[26,1660+226]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[27,1888+6]..src/stage2/parserMessages.ml[27,1888+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[27,1888+6]..src/stage2/parserMessages.ml[27,1888+9])
                        Tpat_constant Const_int 213
                    expression (src/stage2/parserMessages.ml[28,1901+8]..src/stage2/parserMessages.ml[28,1901+214])
                      Texp_constant Const_string("At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n",(src/stage2/parserMessages.ml[28,1901+9]..src/stage2/parserMessages.ml[28,1901+213]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[29,2116+6]..src/stage2/parserMessages.ml[29,2116+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[29,2116+6]..src/stage2/parserMessages.ml[29,2116+9])
                        Tpat_constant Const_int 207
                    expression (src/stage2/parserMessages.ml[30,2129+8]..src/stage2/parserMessages.ml[30,2129+99])
                      Texp_constant Const_string("A pattern is expected at this point.\nExamples of patterns:\n  x\n  ~\n  _\n  (x, y, _)\n",(src/stage2/parserMessages.ml[30,2129+9]..src/stage2/parserMessages.ml[30,2129+98]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[31,2229+6]..src/stage2/parserMessages.ml[31,2229+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[31,2229+6]..src/stage2/parserMessages.ml[31,2229+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[31,2229+6]..src/stage2/parserMessages.ml[31,2229+9])
                          Tpat_constant Const_int 209
                      pattern (src/stage2/parserMessages.ml[31,2229+12]..src/stage2/parserMessages.ml[31,2229+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[31,2229+12]..src/stage2/parserMessages.ml[31,2229+15])
                          Tpat_constant Const_int 211
                    expression (src/stage2/parserMessages.ml[32,2248+8]..src/stage2/parserMessages.ml[32,2248+198])
                      Texp_constant Const_string("The previous opening parenthesis seemed to be the beginning of a tuple pattern.\nThus, either a comma ',' followed with a pattern\nor a closing parenthesis ')' is expected at this point.\n",(src/stage2/parserMessages.ml[32,2248+9]..src/stage2/parserMessages.ml[32,2248+197]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[33,2447+6]..src/stage2/parserMessages.ml[33,2447+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[33,2447+6]..src/stage2/parserMessages.ml[33,2447+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[33,2447+6]..src/stage2/parserMessages.ml[33,2447+9])
                          Tpat_constant Const_int 200
                      pattern (src/stage2/parserMessages.ml[33,2447+12]..src/stage2/parserMessages.ml[33,2447+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[33,2447+12]..src/stage2/parserMessages.ml[33,2447+15])
                          Tpat_constant Const_int 203
                    expression (src/stage2/parserMessages.ml[34,2466+8]..src/stage2/parserMessages.ml[34,2466+151])
                      Texp_constant Const_string("This opening parenthesis seems to be the beginning of a tuple pattern.\nThus, a comma-separated list of patterns is expected at this point.\n",(src/stage2/parserMessages.ml[34,2466+9]..src/stage2/parserMessages.ml[34,2466+150]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[35,2618+6]..src/stage2/parserMessages.ml[35,2618+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[35,2618+6]..src/stage2/parserMessages.ml[35,2618+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[35,2618+6]..src/stage2/parserMessages.ml[35,2618+9])
                          Tpat_constant Const_int 272
                      pattern (src/stage2/parserMessages.ml[35,2618+12]..src/stage2/parserMessages.ml[35,2618+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[35,2618+12]..src/stage2/parserMessages.ml[35,2618+15])
                          Tpat_constant Const_int 233
                    expression (src/stage2/parserMessages.ml[36,2637+8]..src/stage2/parserMessages.ml[36,2637+56])
                      Texp_constant Const_string("A semantic action is expected at this point.\n",(src/stage2/parserMessages.ml[36,2637+9]..src/stage2/parserMessages.ml[36,2637+55]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[37,2694+6]..src/stage2/parserMessages.ml[37,2694+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[37,2694+6]..src/stage2/parserMessages.ml[37,2694+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[37,2694+6]..src/stage2/parserMessages.ml[37,2694+9])
                          Tpat_constant Const_int 276
                      pattern (src/stage2/parserMessages.ml[37,2694+12]..src/stage2/parserMessages.ml[37,2694+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[37,2694+12]..src/stage2/parserMessages.ml[37,2694+15])
                          Tpat_constant Const_int 237
                    expression (src/stage2/parserMessages.ml[38,2713+8]..src/stage2/parserMessages.ml[38,2713+54])
                      Texp_constant Const_string("A semicolon ';' is expected at this point.\n",(src/stage2/parserMessages.ml[38,2713+9]..src/stage2/parserMessages.ml[38,2713+53]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[39,2768+6]..src/stage2/parserMessages.ml[39,2768+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[39,2768+6]..src/stage2/parserMessages.ml[39,2768+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[39,2768+6]..src/stage2/parserMessages.ml[39,2768+9])
                          Tpat_constant Const_int 275
                      pattern (src/stage2/parserMessages.ml[39,2768+12]..src/stage2/parserMessages.ml[39,2768+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[39,2768+12]..src/stage2/parserMessages.ml[39,2768+15])
                          Tpat_constant Const_int 236
                    expression (src/stage2/parserMessages.ml[40,2787+8]..src/stage2/parserMessages.ml[40,2787+47])
                      Texp_constant Const_string("A symbol is expected at this point.\n",(src/stage2/parserMessages.ml[40,2787+9]..src/stage2/parserMessages.ml[40,2787+46]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[41,2835+6]..src/stage2/parserMessages.ml[41,2835+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[41,2835+6]..src/stage2/parserMessages.ml[41,2835+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[41,2835+6]..src/stage2/parserMessages.ml[41,2835+9])
                          Tpat_constant Const_int 274
                      pattern (src/stage2/parserMessages.ml[41,2835+12]..src/stage2/parserMessages.ml[41,2835+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[41,2835+12]..src/stage2/parserMessages.ml[41,2835+15])
                          Tpat_constant Const_int 235
                    expression (src/stage2/parserMessages.ml[42,2854+8]..src/stage2/parserMessages.ml[42,2854+57])
                      Texp_constant Const_string("An equals sign '=' is expected at this point.\n",(src/stage2/parserMessages.ml[42,2854+9]..src/stage2/parserMessages.ml[42,2854+56]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[43,2912+6]..src/stage2/parserMessages.ml[43,2912+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[43,2912+6]..src/stage2/parserMessages.ml[43,2912+9])
                        Tpat_constant Const_int 191
                    expression (src/stage2/parserMessages.ml[44,2925+8]..src/stage2/parserMessages.ml[44,2925+167])
                      Texp_constant Const_string("An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n",(src/stage2/parserMessages.ml[44,2925+9]..src/stage2/parserMessages.ml[44,2925+166]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[45,3093+6]..src/stage2/parserMessages.ml[45,3093+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[45,3093+6]..src/stage2/parserMessages.ml[45,3093+9])
                        Tpat_constant Const_int 186
                    expression (src/stage2/parserMessages.ml[46,3106+8]..src/stage2/parserMessages.ml[46,3106+133])
                      Texp_constant Const_string("At this point, one of the following is expected:\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n",(src/stage2/parserMessages.ml[46,3106+9]..src/stage2/parserMessages.ml[46,3106+132]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[47,3240+6]..src/stage2/parserMessages.ml[47,3240+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[47,3240+6]..src/stage2/parserMessages.ml[47,3240+9])
                        Tpat_constant Const_int 185
                    expression (src/stage2/parserMessages.ml[48,3253+8]..src/stage2/parserMessages.ml[48,3253+82])
                      Texp_constant Const_string("A comma-delimited list of formal parameters is expected at this point.\n",(src/stage2/parserMessages.ml[48,3253+9]..src/stage2/parserMessages.ml[48,3253+81]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[49,3336+6]..src/stage2/parserMessages.ml[49,3336+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[49,3336+6]..src/stage2/parserMessages.ml[49,3336+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[49,3336+6]..src/stage2/parserMessages.ml[49,3336+9])
                          Tpat_constant Const_int 184
                      pattern (src/stage2/parserMessages.ml[49,3336+12]..src/stage2/parserMessages.ml[49,3336+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[49,3336+12]..src/stage2/parserMessages.ml[49,3336+15])
                          Tpat_constant Const_int 188
                    expression (src/stage2/parserMessages.ml[50,3355+8]..src/stage2/parserMessages.ml[50,3355+232])
                      Texp_constant Const_string("An equality symbol ':=' or '==' is expected at this point.\nExamples of well-formed rules:\n  let  option(X) := { None } | x = X; { Some x } (* ordinary *)\n  let ioption(X) == { None } | x = X; { Some x } (*  inline  *)\n",(src/stage2/parserMessages.ml[50,3355+9]..src/stage2/parserMessages.ml[50,3355+231]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[51,3588+6]..src/stage2/parserMessages.ml[51,3588+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[51,3588+6]..src/stage2/parserMessages.ml[51,3588+9])
                        Tpat_constant Const_int 180
                    expression (src/stage2/parserMessages.ml[52,3601+8]..src/stage2/parserMessages.ml[52,3601+61])
                      Texp_constant Const_string("A lowercase identifier is expected at this point.\n",(src/stage2/parserMessages.ml[52,3601+9]..src/stage2/parserMessages.ml[52,3601+60]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[53,3663+6]..src/stage2/parserMessages.ml[53,3663+8])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[53,3663+6]..src/stage2/parserMessages.ml[53,3663+8])
                        Tpat_constant Const_int 93
                    expression (src/stage2/parserMessages.ml[54,3675+8]..src/stage2/parserMessages.ml[54,3675+246])
                      Texp_constant Const_string("Ill-formed rule.\n'let' or '%inline' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public     option(X):   { None } | x = X  { Some x }\n  %public let option(X) := { None } | x = X; { Some x }\n",(src/stage2/parserMessages.ml[54,3675+9]..src/stage2/parserMessages.ml[54,3675+245]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+33])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+28])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+23])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+18])
                            Tpat_or
                            pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+13])
                              Tpat_or
                              pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+8])
                                Tpat_value
                                pattern (src/stage2/parserMessages.ml[55,3922+6]..src/stage2/parserMessages.ml[55,3922+8])
                                  Tpat_constant Const_int 59
                              pattern (src/stage2/parserMessages.ml[55,3922+11]..src/stage2/parserMessages.ml[55,3922+13])
                                Tpat_value
                                pattern (src/stage2/parserMessages.ml[55,3922+11]..src/stage2/parserMessages.ml[55,3922+13])
                                  Tpat_constant Const_int 67
                            pattern (src/stage2/parserMessages.ml[55,3922+16]..src/stage2/parserMessages.ml[55,3922+18])
                              Tpat_value
                              pattern (src/stage2/parserMessages.ml[55,3922+16]..src/stage2/parserMessages.ml[55,3922+18])
                                Tpat_constant Const_int 61
                          pattern (src/stage2/parserMessages.ml[55,3922+21]..src/stage2/parserMessages.ml[55,3922+23])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[55,3922+21]..src/stage2/parserMessages.ml[55,3922+23])
                              Tpat_constant Const_int 66
                        pattern (src/stage2/parserMessages.ml[55,3922+26]..src/stage2/parserMessages.ml[55,3922+28])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[55,3922+26]..src/stage2/parserMessages.ml[55,3922+28])
                            Tpat_constant Const_int 62
                      pattern (src/stage2/parserMessages.ml[55,3922+31]..src/stage2/parserMessages.ml[55,3922+33])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[55,3922+31]..src/stage2/parserMessages.ml[55,3922+33])
                          Tpat_constant Const_int 71
                    expression (src/stage2/parserMessages.ml[56,3959+8]..src/stage2/parserMessages.ml[56,3959+299])
                      Texp_constant Const_string("Ill-formed '%attribute' declaration.\nAn '%attribute' declaration should contain a nonempty list of symbols,\nfollowed with a nonempty list of attributes.\nExamples of well-formed declarations:\n  %attribute FOO [@printer \"foo\"]\n  %attribute bar BAZ [@printer \"bar/BAZ\"] [@cost 2.0]\n",(src/stage2/parserMessages.ml[56,3959+9]..src/stage2/parserMessages.ml[56,3959+298]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[57,4259+6]..src/stage2/parserMessages.ml[57,4259+8])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[57,4259+6]..src/stage2/parserMessages.ml[57,4259+8])
                        Tpat_constant Const_int 13
                    expression (src/stage2/parserMessages.ml[58,4271+8]..src/stage2/parserMessages.ml[58,4271+267])
                      Texp_constant Const_string("Ill-formed list of actual parameters.\nEither a modifier '*' or '+' or '?'\nor a closing parenthesis ')'\nor a comma ',' is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n",(src/stage2/parserMessages.ml[58,4271+9]..src/stage2/parserMessages.ml[58,4271+266]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[59,4539+6]..src/stage2/parserMessages.ml[59,4539+20])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[59,4539+6]..src/stage2/parserMessages.ml[59,4539+14])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[59,4539+6]..src/stage2/parserMessages.ml[59,4539+8])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[59,4539+6]..src/stage2/parserMessages.ml[59,4539+8])
                            Tpat_constant Const_int 12
                        pattern (src/stage2/parserMessages.ml[59,4539+11]..src/stage2/parserMessages.ml[59,4539+14])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[59,4539+11]..src/stage2/parserMessages.ml[59,4539+14])
                            Tpat_constant Const_int 156
                      pattern (src/stage2/parserMessages.ml[59,4539+17]..src/stage2/parserMessages.ml[59,4539+20])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[59,4539+17]..src/stage2/parserMessages.ml[59,4539+20])
                          Tpat_constant Const_int 122
                    expression (src/stage2/parserMessages.ml[60,4563+8]..src/stage2/parserMessages.ml[60,4563+229])
                      Texp_constant Const_string("Ill-formed list of actual parameters.\nA comma-delimited list of actual parameters is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n",(src/stage2/parserMessages.ml[60,4563+9]..src/stage2/parserMessages.ml[60,4563+228]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[61,4793+6]..src/stage2/parserMessages.ml[61,4793+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[61,4793+6]..src/stage2/parserMessages.ml[61,4793+9])
                        Tpat_constant Const_int 176
                    expression (src/stage2/parserMessages.ml[62,4806+8]..src/stage2/parserMessages.ml[62,4806+164])
                      Texp_constant Const_string("Either another rule\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n",(src/stage2/parserMessages.ml[62,4806+9]..src/stage2/parserMessages.ml[62,4806+163]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[63,4971+6]..src/stage2/parserMessages.ml[63,4971+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[63,4971+6]..src/stage2/parserMessages.ml[63,4971+9])
                        Tpat_constant Const_int 114
                    expression (src/stage2/parserMessages.ml[64,4984+8]..src/stage2/parserMessages.ml[64,4984+142])
                      Texp_constant Const_string("Ill-formed rule.\nA colon ':' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n",(src/stage2/parserMessages.ml[64,4984+9]..src/stage2/parserMessages.ml[64,4984+141]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[65,5127+6]..src/stage2/parserMessages.ml[65,5127+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[65,5127+6]..src/stage2/parserMessages.ml[65,5127+9])
                        Tpat_constant Const_int 137
                    expression (src/stage2/parserMessages.ml[66,5140+8]..src/stage2/parserMessages.ml[66,5140+201])
                      Texp_constant Const_string("Ill-formed rule.\nEither a semantic action '{' ... '}'\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  expr: MINUS e = expr %prec UMINUS { -e }\n",(src/stage2/parserMessages.ml[66,5140+9]..src/stage2/parserMessages.ml[66,5140+200]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[67,5342+6]..src/stage2/parserMessages.ml[67,5342+27])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[67,5342+6]..src/stage2/parserMessages.ml[67,5342+21])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[67,5342+6]..src/stage2/parserMessages.ml[67,5342+15])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[67,5342+6]..src/stage2/parserMessages.ml[67,5342+9])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[67,5342+6]..src/stage2/parserMessages.ml[67,5342+9])
                              Tpat_constant Const_int 151
                          pattern (src/stage2/parserMessages.ml[67,5342+12]..src/stage2/parserMessages.ml[67,5342+15])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[67,5342+12]..src/stage2/parserMessages.ml[67,5342+15])
                              Tpat_constant Const_int 130
                        pattern (src/stage2/parserMessages.ml[67,5342+18]..src/stage2/parserMessages.ml[67,5342+21])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[67,5342+18]..src/stage2/parserMessages.ml[67,5342+21])
                            Tpat_constant Const_int 170
                      pattern (src/stage2/parserMessages.ml[67,5342+24]..src/stage2/parserMessages.ml[67,5342+27])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[67,5342+24]..src/stage2/parserMessages.ml[67,5342+27])
                          Tpat_constant Const_int 194
                    expression (src/stage2/parserMessages.ml[68,5373+8]..src/stage2/parserMessages.ml[68,5373+159])
                      Texp_constant Const_string("Ill-formed %prec annotation.\nA symbol is expected at this point.\nExamples of well-formed annotations:\n  expr: MINUS e = expr %prec UMINUS { -e }\n",(src/stage2/parserMessages.ml[68,5373+9]..src/stage2/parserMessages.ml[68,5373+158]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[69,5533+6]..src/stage2/parserMessages.ml[69,5533+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[69,5533+6]..src/stage2/parserMessages.ml[69,5533+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[69,5533+6]..src/stage2/parserMessages.ml[69,5533+9])
                          Tpat_constant Const_int 129
                      pattern (src/stage2/parserMessages.ml[69,5533+12]..src/stage2/parserMessages.ml[69,5533+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[69,5533+12]..src/stage2/parserMessages.ml[69,5533+15])
                          Tpat_constant Const_int 134
                    expression (src/stage2/parserMessages.ml[70,5552+8]..src/stage2/parserMessages.ml[70,5552+119])
                      Texp_constant Const_string("Either another production '|' ...\nor a comma ','\nor a closing parenthesis ')'\nis expected at this point.\n",(src/stage2/parserMessages.ml[70,5552+9]..src/stage2/parserMessages.ml[70,5552+118]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[71,5672+6]..src/stage2/parserMessages.ml[71,5672+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[71,5672+6]..src/stage2/parserMessages.ml[71,5672+9])
                        Tpat_constant Const_int 135
                    expression (src/stage2/parserMessages.ml[72,5685+8]..src/stage2/parserMessages.ml[72,5685+375])
                      Texp_constant Const_string("A production is expected at this point.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n",(src/stage2/parserMessages.ml[72,5685+9]..src/stage2/parserMessages.ml[72,5685+374]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+45])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+39])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+33])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+27])
                            Tpat_or
                            pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+21])
                              Tpat_or
                              pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+15])
                                Tpat_or
                                pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+9])
                                  Tpat_value
                                  pattern (src/stage2/parserMessages.ml[73,6061+6]..src/stage2/parserMessages.ml[73,6061+9])
                                    Tpat_constant Const_int 146
                                pattern (src/stage2/parserMessages.ml[73,6061+12]..src/stage2/parserMessages.ml[73,6061+15])
                                  Tpat_value
                                  pattern (src/stage2/parserMessages.ml[73,6061+12]..src/stage2/parserMessages.ml[73,6061+15])
                                    Tpat_constant Const_int 147
                              pattern (src/stage2/parserMessages.ml[73,6061+18]..src/stage2/parserMessages.ml[73,6061+21])
                                Tpat_value
                                pattern (src/stage2/parserMessages.ml[73,6061+18]..src/stage2/parserMessages.ml[73,6061+21])
                                  Tpat_constant Const_int 118
                            pattern (src/stage2/parserMessages.ml[73,6061+24]..src/stage2/parserMessages.ml[73,6061+27])
                              Tpat_value
                              pattern (src/stage2/parserMessages.ml[73,6061+24]..src/stage2/parserMessages.ml[73,6061+27])
                                Tpat_constant Const_int 119
                          pattern (src/stage2/parserMessages.ml[73,6061+30]..src/stage2/parserMessages.ml[73,6061+33])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[73,6061+30]..src/stage2/parserMessages.ml[73,6061+33])
                              Tpat_constant Const_int 162
                        pattern (src/stage2/parserMessages.ml[73,6061+36]..src/stage2/parserMessages.ml[73,6061+39])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[73,6061+36]..src/stage2/parserMessages.ml[73,6061+39])
                            Tpat_constant Const_int 124
                      pattern (src/stage2/parserMessages.ml[73,6061+42]..src/stage2/parserMessages.ml[73,6061+45])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[73,6061+42]..src/stage2/parserMessages.ml[73,6061+45])
                          Tpat_constant Const_int 159
                    expression (src/stage2/parserMessages.ml[74,6110+8]..src/stage2/parserMessages.ml[74,6110+376])
                      Texp_constant Const_string("Ill-formed production.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n  expr [@cost 0]\n",(src/stage2/parserMessages.ml[74,6110+9]..src/stage2/parserMessages.ml[74,6110+375]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[75,6487+6]..src/stage2/parserMessages.ml[75,6487+27])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[75,6487+6]..src/stage2/parserMessages.ml[75,6487+21])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[75,6487+6]..src/stage2/parserMessages.ml[75,6487+15])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[75,6487+6]..src/stage2/parserMessages.ml[75,6487+9])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[75,6487+6]..src/stage2/parserMessages.ml[75,6487+9])
                              Tpat_constant Const_int 115
                          pattern (src/stage2/parserMessages.ml[75,6487+12]..src/stage2/parserMessages.ml[75,6487+15])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[75,6487+12]..src/stage2/parserMessages.ml[75,6487+15])
                              Tpat_constant Const_int 117
                        pattern (src/stage2/parserMessages.ml[75,6487+18]..src/stage2/parserMessages.ml[75,6487+21])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[75,6487+18]..src/stage2/parserMessages.ml[75,6487+21])
                            Tpat_constant Const_int 177
                      pattern (src/stage2/parserMessages.ml[75,6487+24]..src/stage2/parserMessages.ml[75,6487+27])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[75,6487+24]..src/stage2/parserMessages.ml[75,6487+27])
                          Tpat_constant Const_int 138
                    expression (src/stage2/parserMessages.ml[76,6518+8]..src/stage2/parserMessages.ml[76,6518+238])
                      Texp_constant Const_string("Ill-formed rule.\nA list of productions is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  symbol: s = LID | s = UID { s }\n",(src/stage2/parserMessages.ml[76,6518+9]..src/stage2/parserMessages.ml[76,6518+237]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[77,6757+6]..src/stage2/parserMessages.ml[77,6757+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[77,6757+6]..src/stage2/parserMessages.ml[77,6757+9])
                        Tpat_constant Const_int 112
                    expression (src/stage2/parserMessages.ml[78,6770+8]..src/stage2/parserMessages.ml[78,6770+195])
                      Texp_constant Const_string("Ill-formed rule.\nA closing parenthesis ')' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[78,6770+9]..src/stage2/parserMessages.ml[78,6770+194]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[79,6966+6]..src/stage2/parserMessages.ml[79,6966+15])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[79,6966+6]..src/stage2/parserMessages.ml[79,6966+9])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[79,6966+6]..src/stage2/parserMessages.ml[79,6966+9])
                          Tpat_constant Const_int 108
                      pattern (src/stage2/parserMessages.ml[79,6966+12]..src/stage2/parserMessages.ml[79,6966+15])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[79,6966+12]..src/stage2/parserMessages.ml[79,6966+15])
                          Tpat_constant Const_int 110
                    expression (src/stage2/parserMessages.ml[80,6985+8]..src/stage2/parserMessages.ml[80,6985+213])
                      Texp_constant Const_string("Ill-formed rule.\nA comma-delimited list of formal parameters is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[80,6985+9]..src/stage2/parserMessages.ml[80,6985+212]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[81,7199+6]..src/stage2/parserMessages.ml[81,7199+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[81,7199+6]..src/stage2/parserMessages.ml[81,7199+9])
                        Tpat_constant Const_int 107
                    expression (src/stage2/parserMessages.ml[82,7212+8]..src/stage2/parserMessages.ml[82,7212+361])
                      Texp_constant Const_string("Ill-formed rule.\nEither a parenthesized, comma-delimited list of formal parameters\nor an attribute\nor a colon ':' is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  option(X): { None } | x = X { Some x }\n  main [@cost 0]: e = expr; EOL { e }\n",(src/stage2/parserMessages.ml[82,7212+9]..src/stage2/parserMessages.ml[82,7212+360]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[83,7574+6]..src/stage2/parserMessages.ml[83,7574+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[83,7574+6]..src/stage2/parserMessages.ml[83,7574+9])
                        Tpat_constant Const_int 100
                    expression (src/stage2/parserMessages.ml[84,7587+8]..src/stage2/parserMessages.ml[84,7587+283])
                      Texp_constant Const_string("Ill-formed rule.\nA non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[84,7587+9]..src/stage2/parserMessages.ml[84,7587+282]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[85,7871+6]..src/stage2/parserMessages.ml[85,7871+8])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[85,7871+6]..src/stage2/parserMessages.ml[85,7871+8])
                        Tpat_constant Const_int 95
                    expression (src/stage2/parserMessages.ml[86,7883+8]..src/stage2/parserMessages.ml[86,7883+303])
                      Texp_constant Const_string("Ill-formed rule.\nEither '%public' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n",(src/stage2/parserMessages.ml[86,7883+9]..src/stage2/parserMessages.ml[86,7883+302]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[87,8187+6]..src/stage2/parserMessages.ml[87,8187+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[87,8187+6]..src/stage2/parserMessages.ml[87,8187+9])
                        Tpat_constant Const_int 169
                    expression (src/stage2/parserMessages.ml[88,8200+8]..src/stage2/parserMessages.ml[88,8200+89])
                      Texp_constant Const_string("Either another production '|' ...\nor another rule is expected at this point.\n",(src/stage2/parserMessages.ml[88,8200+9]..src/stage2/parserMessages.ml[88,8200+88]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[89,8290+6]..src/stage2/parserMessages.ml[89,8290+9])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[89,8290+6]..src/stage2/parserMessages.ml[89,8290+9])
                        Tpat_constant Const_int 165
                    expression (src/stage2/parserMessages.ml[90,8303+8]..src/stage2/parserMessages.ml[90,8303+51])
                      Texp_constant Const_string("Another rule is expected at this point.\n",(src/stage2/parserMessages.ml[90,8303+9]..src/stage2/parserMessages.ml[90,8303+50]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[91,8355+6]..src/stage2/parserMessages.ml[91,8355+8])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[91,8355+6]..src/stage2/parserMessages.ml[91,8355+8])
                        Tpat_constant Const_int 92
                    expression (src/stage2/parserMessages.ml[92,8367+8]..src/stage2/parserMessages.ml[92,8367+45])
                      Texp_constant Const_string("A rule is expected at this point.\n",(src/stage2/parserMessages.ml[92,8367+9]..src/stage2/parserMessages.ml[92,8367+44]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[93,8413+6]..src/stage2/parserMessages.ml[93,8413+8])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[93,8413+6]..src/stage2/parserMessages.ml[93,8413+8])
                        Tpat_constant Const_int 74
                    expression (src/stage2/parserMessages.ml[94,8425+8]..src/stage2/parserMessages.ml[94,8425+122])
                      Texp_constant Const_string("Ill-formed '%parameter' declaration.\nExamples of well-formed declarations:\n  %parameter <X : sig type t end>\n",(src/stage2/parserMessages.ml[94,8425+9]..src/stage2/parserMessages.ml[94,8425+121]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[95,8548+6]..src/stage2/parserMessages.ml[95,8548+18])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[95,8548+6]..src/stage2/parserMessages.ml[95,8548+13])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[95,8548+6]..src/stage2/parserMessages.ml[95,8548+8])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[95,8548+6]..src/stage2/parserMessages.ml[95,8548+8])
                            Tpat_constant Const_int 86
                        pattern (src/stage2/parserMessages.ml[95,8548+11]..src/stage2/parserMessages.ml[95,8548+13])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[95,8548+11]..src/stage2/parserMessages.ml[95,8548+13])
                            Tpat_constant Const_int 87
                      pattern (src/stage2/parserMessages.ml[95,8548+16]..src/stage2/parserMessages.ml[95,8548+18])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[95,8548+16]..src/stage2/parserMessages.ml[95,8548+18])
                          Tpat_constant Const_int 88
                    expression (src/stage2/parserMessages.ml[96,8570+8]..src/stage2/parserMessages.ml[96,8570+161])
                      Texp_constant Const_string("Ill-formed precedence declaration.\nExamples of well-formed declarations:\n  %left PLUS\n  %left PLUS MINUS\n  %nonassoc unary_minus\n  %right CONCAT\n",(src/stage2/parserMessages.ml[96,8570+9]..src/stage2/parserMessages.ml[96,8570+160]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[97,8732+6]..src/stage2/parserMessages.ml[97,8732+23])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[97,8732+6]..src/stage2/parserMessages.ml[97,8732+18])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[97,8732+6]..src/stage2/parserMessages.ml[97,8732+13])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[97,8732+6]..src/stage2/parserMessages.ml[97,8732+8])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[97,8732+6]..src/stage2/parserMessages.ml[97,8732+8])
                              Tpat_constant Const_int 49
                          pattern (src/stage2/parserMessages.ml[97,8732+11]..src/stage2/parserMessages.ml[97,8732+13])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[97,8732+11]..src/stage2/parserMessages.ml[97,8732+13])
                              Tpat_constant Const_int 51
                        pattern (src/stage2/parserMessages.ml[97,8732+16]..src/stage2/parserMessages.ml[97,8732+18])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[97,8732+16]..src/stage2/parserMessages.ml[97,8732+18])
                            Tpat_constant Const_int 52
                      pattern (src/stage2/parserMessages.ml[97,8732+21]..src/stage2/parserMessages.ml[97,8732+23])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[97,8732+21]..src/stage2/parserMessages.ml[97,8732+23])
                          Tpat_constant Const_int 53
                    expression (src/stage2/parserMessages.ml[98,8759+8]..src/stage2/parserMessages.ml[98,8759+207])
                      Texp_constant Const_string("Ill-formed '%start' declaration.\nA start symbol must begin with a lowercase letter.\nExamples of well-formed declarations:\n  %start program\n  %start expression phrase\n  %start <int> date time\n",(src/stage2/parserMessages.ml[98,8759+9]..src/stage2/parserMessages.ml[98,8759+206]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+28])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+23])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+18])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+13])
                            Tpat_or
                            pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+8])
                              Tpat_value
                              pattern (src/stage2/parserMessages.ml[99,8967+6]..src/stage2/parserMessages.ml[99,8967+8])
                                Tpat_constant Const_int 37
                            pattern (src/stage2/parserMessages.ml[99,8967+11]..src/stage2/parserMessages.ml[99,8967+13])
                              Tpat_value
                              pattern (src/stage2/parserMessages.ml[99,8967+11]..src/stage2/parserMessages.ml[99,8967+13])
                                Tpat_constant Const_int 39
                          pattern (src/stage2/parserMessages.ml[99,8967+16]..src/stage2/parserMessages.ml[99,8967+18])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[99,8967+16]..src/stage2/parserMessages.ml[99,8967+18])
                              Tpat_constant Const_int 40
                        pattern (src/stage2/parserMessages.ml[99,8967+21]..src/stage2/parserMessages.ml[99,8967+23])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[99,8967+21]..src/stage2/parserMessages.ml[99,8967+23])
                            Tpat_constant Const_int 45
                      pattern (src/stage2/parserMessages.ml[99,8967+26]..src/stage2/parserMessages.ml[99,8967+28])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[99,8967+26]..src/stage2/parserMessages.ml[99,8967+28])
                          Tpat_constant Const_int 46
                    expression (src/stage2/parserMessages.ml[100,8999+8]..src/stage2/parserMessages.ml[100,8999+204])
                      Texp_constant Const_string("Ill-formed '%token' declaration.\nExamples of well-formed declarations:\n  %token FOO\n  %token BAR \"|\"\n  %token DOT \".\" SEMICOLON \";\"\n  %token <string> LID UID\n  %token FOO [@cost 0]\n",(src/stage2/parserMessages.ml[100,8999+9]..src/stage2/parserMessages.ml[100,8999+203]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+44])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+39])
                        Tpat_or
                        pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+34])
                          Tpat_or
                          pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+29])
                            Tpat_or
                            pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+24])
                              Tpat_or
                              pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+19])
                                Tpat_or
                                pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+15])
                                  Tpat_or
                                  pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+11])
                                    Tpat_or
                                    pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+7])
                                      Tpat_value
                                      pattern (src/stage2/parserMessages.ml[101,9204+6]..src/stage2/parserMessages.ml[101,9204+7])
                                        Tpat_constant Const_int 1
                                    pattern (src/stage2/parserMessages.ml[101,9204+10]..src/stage2/parserMessages.ml[101,9204+11])
                                      Tpat_value
                                      pattern (src/stage2/parserMessages.ml[101,9204+10]..src/stage2/parserMessages.ml[101,9204+11])
                                        Tpat_constant Const_int 2
                                  pattern (src/stage2/parserMessages.ml[101,9204+14]..src/stage2/parserMessages.ml[101,9204+15])
                                    Tpat_value
                                    pattern (src/stage2/parserMessages.ml[101,9204+14]..src/stage2/parserMessages.ml[101,9204+15])
                                      Tpat_constant Const_int 6
                                pattern (src/stage2/parserMessages.ml[101,9204+18]..src/stage2/parserMessages.ml[101,9204+19])
                                  Tpat_value
                                  pattern (src/stage2/parserMessages.ml[101,9204+18]..src/stage2/parserMessages.ml[101,9204+19])
                                    Tpat_constant Const_int 7
                              pattern (src/stage2/parserMessages.ml[101,9204+22]..src/stage2/parserMessages.ml[101,9204+24])
                                Tpat_value
                                pattern (src/stage2/parserMessages.ml[101,9204+22]..src/stage2/parserMessages.ml[101,9204+24])
                                  Tpat_constant Const_int 32
                            pattern (src/stage2/parserMessages.ml[101,9204+27]..src/stage2/parserMessages.ml[101,9204+29])
                              Tpat_value
                              pattern (src/stage2/parserMessages.ml[101,9204+27]..src/stage2/parserMessages.ml[101,9204+29])
                                Tpat_constant Const_int 11
                          pattern (src/stage2/parserMessages.ml[101,9204+32]..src/stage2/parserMessages.ml[101,9204+34])
                            Tpat_value
                            pattern (src/stage2/parserMessages.ml[101,9204+32]..src/stage2/parserMessages.ml[101,9204+34])
                              Tpat_constant Const_int 17
                        pattern (src/stage2/parserMessages.ml[101,9204+37]..src/stage2/parserMessages.ml[101,9204+39])
                          Tpat_value
                          pattern (src/stage2/parserMessages.ml[101,9204+37]..src/stage2/parserMessages.ml[101,9204+39])
                            Tpat_constant Const_int 27
                      pattern (src/stage2/parserMessages.ml[101,9204+42]..src/stage2/parserMessages.ml[101,9204+44])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[101,9204+42]..src/stage2/parserMessages.ml[101,9204+44])
                          Tpat_constant Const_int 76
                    expression (src/stage2/parserMessages.ml[102,9252+8]..src/stage2/parserMessages.ml[102,9252+268])
                      Texp_constant Const_string("Ill-formed declaration.\nExamples of well-formed declarations:\n  %type <Syntax.expression> expression\n  %type <int> date time\n  %type <int option> option(date)\n  %on_error_reduce expression\n  %on_error_reduce date time\n  %on_error_reduce option(date)\n",(src/stage2/parserMessages.ml[102,9252+9]..src/stage2/parserMessages.ml[102,9252+267]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[103,9521+6]..src/stage2/parserMessages.ml[103,9521+13])
                      Tpat_or
                      pattern (src/stage2/parserMessages.ml[103,9521+6]..src/stage2/parserMessages.ml[103,9521+7])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[103,9521+6]..src/stage2/parserMessages.ml[103,9521+7])
                          Tpat_constant Const_int 0
                      pattern (src/stage2/parserMessages.ml[103,9521+10]..src/stage2/parserMessages.ml[103,9521+13])
                        Tpat_value
                        pattern (src/stage2/parserMessages.ml[103,9521+10]..src/stage2/parserMessages.ml[103,9521+13])
                          Tpat_constant Const_int 296
                    expression (src/stage2/parserMessages.ml[104,9538+8]..src/stage2/parserMessages.ml[104,9538+67])
                      Texp_constant Const_string("Either a declaration or '%%' is expected at this point.\n",(src/stage2/parserMessages.ml[104,9538+9]..src/stage2/parserMessages.ml[104,9538+66]),None)
                  <case>
                    pattern (src/stage2/parserMessages.ml[105,9606+6]..src/stage2/parserMessages.ml[105,9606+7])
                      Tpat_value
                      pattern (src/stage2/parserMessages.ml[105,9606+6]..src/stage2/parserMessages.ml[105,9606+7])
                        Tpat_any
                    expression (src/stage2/parserMessages.ml[106,9617+8]..src/stage2/parserMessages.ml[106,9617+23])
                      Texp_apply
                      expression (src/stage2/parserMessages.ml[106,9617+8]..src/stage2/parserMessages.ml[106,9617+13])
                        Texp_ident "Stdlib!.raise"
                      [
                        <arg>
                          Nolabel
                          expression (src/stage2/parserMessages.ml[106,9617+14]..src/stage2/parserMessages.ml[106,9617+23])
                            Texp_construct "Not_found"
                            []
                      ]
                ]
          ]
    ]
]

{<Dune__exe__ParserMessages>
 "message"[value] -> <Dune__exe__ParserMessages.0>;
 }

(seq
  (let
    (message/397 =
       (function s/399[int]
         (catch
           (catch
             (catch
               (catch
                 (catch
                   (catch
                     (catch
                       (catch
                         (catch
                           (catch
                             (catch
                               (catch
                                 (catch
                                   (catch
                                     (catch
                                       (catch
                                         (catch
                                           (catch
                                             (catch
                                               (catch
                                                 (catch
                                                   (catch
                                                     (catch
                                                       (if (isout 296 s/399)
                                                         (exit 23)
                                                         (switch* s/399
                                                          case int 0:
                                                           (exit 22)
                                                          case int 1:
                                                           (exit 21)
                                                          case int 2:
                                                           (exit 21)
                                                          case int 3:
                                                           (exit 23)
                                                          case int 4:
                                                           (exit 23)
                                                          case int 5:
                                                           (exit 23)
                                                          case int 6:
                                                           (exit 21)
                                                          case int 7:
                                                           (exit 21)
                                                          case int 8:
                                                           (exit 23)
                                                          case int 9:
                                                           (exit 23)
                                                          case int 10:
                                                           (exit 23)
                                                          case int 11:
                                                           (exit 21)
                                                          case int 12:
                                                           (exit 12)
                                                          case int 13:
                                                           "Ill-formed list of actual parameters.\nEither a modifier '*' or '+' or '?'\nor a closing parenthesis ')'\nor a comma ',' is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n"
                                                          case int 14:
                                                           (exit 23)
                                                          case int 15:
                                                           (exit 23)
                                                          case int 16:
                                                           (exit 23)
                                                          case int 17:
                                                           (exit 21)
                                                          case int 18:
                                                           (exit 23)
                                                          case int 19:
                                                           (exit 23)
                                                          case int 20:
                                                           (exit 23)
                                                          case int 21:
                                                           (exit 23)
                                                          case int 22:
                                                           (exit 23)
                                                          case int 23:
                                                           (exit 23)
                                                          case int 24:
                                                           (exit 23)
                                                          case int 25:
                                                           (exit 23)
                                                          case int 26:
                                                           (exit 23)
                                                          case int 27:
                                                           (exit 21)
                                                          case int 28:
                                                           (exit 23)
                                                          case int 29:
                                                           (exit 23)
                                                          case int 30:
                                                           (exit 23)
                                                          case int 31:
                                                           (exit 23)
                                                          case int 32:
                                                           (exit 21)
                                                          case int 33:
                                                           (exit 23)
                                                          case int 34:
                                                           (exit 23)
                                                          case int 35:
                                                           (exit 23)
                                                          case int 36:
                                                           (exit 23)
                                                          case int 37:
                                                           (exit 20)
                                                          case int 38:
                                                           (exit 23)
                                                          case int 39:
                                                           (exit 20)
                                                          case int 40:
                                                           (exit 20)
                                                          case int 41:
                                                           (exit 23)
                                                          case int 42:
                                                           (exit 23)
                                                          case int 43:
                                                           (exit 23)
                                                          case int 44:
                                                           (exit 23)
                                                          case int 45:
                                                           (exit 20)
                                                          case int 46:
                                                           (exit 20)
                                                          case int 47:
                                                           (exit 23)
                                                          case int 48:
                                                           (exit 23)
                                                          case int 49:
                                                           (exit 19)
                                                          case int 50:
                                                           (exit 23)
                                                          case int 51:
                                                           (exit 19)
                                                          case int 52:
                                                           (exit 19)
                                                          case int 53:
                                                           (exit 19)
                                                          case int 54:
                                                           (exit 23)
                                                          case int 55:
                                                           (exit 23)
                                                          case int 56:
                                                           (exit 23)
                                                          case int 57:
                                                           (exit 23)
                                                          case int 58:
                                                           (exit 23)
                                                          case int 59:
                                                           (exit 11)
                                                          case int 60:
                                                           (exit 23)
                                                          case int 61:
                                                           (exit 11)
                                                          case int 62:
                                                           (exit 11)
                                                          case int 63:
                                                           (exit 23)
                                                          case int 64:
                                                           (exit 23)
                                                          case int 65:
                                                           (exit 23)
                                                          case int 66:
                                                           (exit 11)
                                                          case int 67:
                                                           (exit 11)
                                                          case int 68:
                                                           (exit 23)
                                                          case int 69:
                                                           (exit 23)
                                                          case int 70:
                                                           (exit 23)
                                                          case int 71:
                                                           (exit 11)
                                                          case int 72:
                                                           (exit 23)
                                                          case int 73:
                                                           (exit 23)
                                                          case int 74:
                                                           "Ill-formed '%parameter' declaration.\nExamples of well-formed declarations:\n  %parameter <X : sig type t end>\n"
                                                          case int 75:
                                                           (exit 23)
                                                          case int 76:
                                                           (exit 21)
                                                          case int 77:
                                                           (exit 23)
                                                          case int 78:
                                                           (exit 23)
                                                          case int 79:
                                                           (exit 23)
                                                          case int 80:
                                                           (exit 23)
                                                          case int 81:
                                                           (exit 23)
                                                          case int 82:
                                                           (exit 23)
                                                          case int 83:
                                                           (exit 23)
                                                          case int 84:
                                                           (exit 23)
                                                          case int 85:
                                                           (exit 23)
                                                          case int 86:
                                                           (exit 18)
                                                          case int 87:
                                                           (exit 18)
                                                          case int 88:
                                                           (exit 18)
                                                          case int 89:
                                                           (exit 23)
                                                          case int 90:
                                                           (exit 23)
                                                          case int 91:
                                                           (exit 23)
                                                          case int 92:
                                                           "A rule is expected at this point.\n"
                                                          case int 93:
                                                           "Ill-formed rule.\n'let' or '%inline' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public     option(X):   { None } | x = X  { Some x }\n  %public let option(X) := { None } | x = X; { Some x }\n"
                                                          case int 94:
                                                           (exit 23)
                                                          case int 95:
                                                           "Ill-formed rule.\nEither '%public' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 96:
                                                           (exit 23)
                                                          case int 97:
                                                           (exit 23)
                                                          case int 98:
                                                           (exit 23)
                                                          case int 99:
                                                           (exit 23)
                                                          case int 100:
                                                           "Ill-formed rule.\nA non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 101:
                                                           (exit 23)
                                                          case int 102:
                                                           (exit 23)
                                                          case int 103:
                                                           (exit 23)
                                                          case int 104:
                                                           (exit 23)
                                                          case int 105:
                                                           (exit 23)
                                                          case int 106:
                                                           (exit 23)
                                                          case int 107:
                                                           "Ill-formed rule.\nEither a parenthesized, comma-delimited list of formal parameters\nor an attribute\nor a colon ':' is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  option(X): { None } | x = X { Some x }\n  main [@cost 0]: e = expr; EOL { e }\n"
                                                          case int 108:
                                                           (exit 17)
                                                          case int 109:
                                                           (exit 23)
                                                          case int 110:
                                                           (exit 17)
                                                          case int 111:
                                                           (exit 23)
                                                          case int 112:
                                                           "Ill-formed rule.\nA closing parenthesis ')' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 113:
                                                           (exit 23)
                                                          case int 114:
                                                           "Ill-formed rule.\nA colon ':' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
                                                          case int 115:
                                                           (exit 16)
                                                          case int 116:
                                                           (exit 23)
                                                          case int 117:
                                                           (exit 16)
                                                          case int 118:
                                                           (exit 15)
                                                          case int 119:
                                                           (exit 15)
                                                          case int 120:
                                                           (exit 23)
                                                          case int 121:
                                                           (exit 23)
                                                          case int 122:
                                                           (exit 12)
                                                          case int 123:
                                                           (exit 23)
                                                          case int 124:
                                                           (exit 15)
                                                          case int 125:
                                                           (exit 23)
                                                          case int 126:
                                                           (exit 23)
                                                          case int 127:
                                                           (exit 23)
                                                          case int 128:
                                                           (exit 23)
                                                          case int 129:
                                                           (exit 14)
                                                          case int 130:
                                                           (exit 13)
                                                          case int 131:
                                                           (exit 23)
                                                          case int 132:
                                                           (exit 23)
                                                          case int 133:
                                                           (exit 23)
                                                          case int 134:
                                                           (exit 14)
                                                          case int 135:
                                                           "A production is expected at this point.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n"
                                                          case int 136:
                                                           (exit 23)
                                                          case int 137:
                                                           "Ill-formed rule.\nEither a semantic action '{' ... '}'\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  expr: MINUS e = expr %prec UMINUS { -e }\n"
                                                          case int 138:
                                                           (exit 16)
                                                          case int 139:
                                                           (exit 23)
                                                          case int 140:
                                                           (exit 23)
                                                          case int 141:
                                                           (exit 23)
                                                          case int 142:
                                                           (exit 23)
                                                          case int 143:
                                                           (exit 23)
                                                          case int 144:
                                                           (exit 23)
                                                          case int 145:
                                                           (exit 23)
                                                          case int 146:
                                                           (exit 15)
                                                          case int 147:
                                                           (exit 15)
                                                          case int 148:
                                                           (exit 23)
                                                          case int 149:
                                                           (exit 23)
                                                          case int 150:
                                                           (exit 23)
                                                          case int 151:
                                                           (exit 13)
                                                          case int 152:
                                                           (exit 23)
                                                          case int 153:
                                                           (exit 23)
                                                          case int 154:
                                                           (exit 23)
                                                          case int 155:
                                                           (exit 23)
                                                          case int 156:
                                                           (exit 12)
                                                          case int 157:
                                                           (exit 23)
                                                          case int 158:
                                                           (exit 23)
                                                          case int 159:
                                                           (exit 15)
                                                          case int 160:
                                                           (exit 23)
                                                          case int 161:
                                                           (exit 23)
                                                          case int 162:
                                                           (exit 15)
                                                          case int 163:
                                                           (exit 23)
                                                          case int 164:
                                                           (exit 23)
                                                          case int 165:
                                                           "Another rule is expected at this point.\n"
                                                          case int 166:
                                                           (exit 23)
                                                          case int 167:
                                                           (exit 23)
                                                          case int 168:
                                                           (exit 23)
                                                          case int 169:
                                                           "Either another production '|' ...\nor another rule is expected at this point.\n"
                                                          case int 170:
                                                           (exit 13)
                                                          case int 171:
                                                           (exit 23)
                                                          case int 172:
                                                           (exit 23)
                                                          case int 173:
                                                           (exit 23)
                                                          case int 174:
                                                           (exit 23)
                                                          case int 175:
                                                           (exit 23)
                                                          case int 176:
                                                           "Either another rule\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
                                                          case int 177:
                                                           (exit 16)
                                                          case int 178:
                                                           (exit 23)
                                                          case int 179:
                                                           (exit 23)
                                                          case int 180:
                                                           "A lowercase identifier is expected at this point.\n"
                                                          case int 181:
                                                           (exit 23)
                                                          case int 182:
                                                           (exit 23)
                                                          case int 183:
                                                           (exit 23)
                                                          case int 184:
                                                           (exit 10)
                                                          case int 185:
                                                           "A comma-delimited list of formal parameters is expected at this point.\n"
                                                          case int 186:
                                                           "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 187:
                                                           (exit 23)
                                                          case int 188:
                                                           (exit 10)
                                                          case int 189:
                                                           (exit 23)
                                                          case int 190:
                                                           (exit 23)
                                                          case int 191:
                                                           "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n"
                                                          case int 192:
                                                           (exit 23)
                                                          case int 193:
                                                           (exit 23)
                                                          case int 194:
                                                           (exit 13)
                                                          case int 195:
                                                           (exit 23)
                                                          case int 196:
                                                           (exit 23)
                                                          case int 197:
                                                           (exit 23)
                                                          case int 198:
                                                           (exit 23)
                                                          case int 199:
                                                           (exit 23)
                                                          case int 200:
                                                           (exit 5)
                                                          case int 201:
                                                           (exit 23)
                                                          case int 202:
                                                           (exit 23)
                                                          case int 203:
                                                           (exit 5)
                                                          case int 204:
                                                           (exit 23)
                                                          case int 205:
                                                           (exit 23)
                                                          case int 206:
                                                           (exit 23)
                                                          case int 207:
                                                           "A pattern is expected at this point.\nExamples of patterns:\n  x\n  ~\n  _\n  (x, y, _)\n"
                                                          case int 208:
                                                           (exit 23)
                                                          case int 209:
                                                           (exit 4)
                                                          case int 210:
                                                           (exit 23)
                                                          case int 211:
                                                           (exit 4)
                                                          case int 212:
                                                           (exit 23)
                                                          case int 213:
                                                           "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 214:
                                                           (exit 2)
                                                          case int 215:
                                                           (exit 23)
                                                          case int 216:
                                                           "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 217:
                                                           (exit 1)
                                                          case int 218:
                                                           (exit 23)
                                                          case int 219:
                                                           (exit 3)
                                                          case int 220:
                                                           (exit 23)
                                                          case int 221:
                                                           "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 222:
                                                           (exit 2)
                                                          case int 223:
                                                           (exit 23)
                                                          case int 224:
                                                           "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 225:
                                                           (exit 1)
                                                          case int 226:
                                                           (exit 23)
                                                          case int 227:
                                                           (exit 3)
                                                          case int 228:
                                                           (exit 23)
                                                          case int 229:
                                                           (exit 23)
                                                          case int 230:
                                                           "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 231:
                                                           (exit 2)
                                                          case int 232:
                                                           (exit 23)
                                                          case int 233:
                                                           (exit 6)
                                                          case int 234:
                                                           (exit 23)
                                                          case int 235:
                                                           (exit 9)
                                                          case int 236:
                                                           (exit 8)
                                                          case int 237:
                                                           (exit 7)
                                                          case int 238:
                                                           (exit 1)
                                                          case int 239:
                                                           (exit 23)
                                                          case int 240:
                                                           (exit 23)
                                                          case int 241:
                                                           (exit 23)
                                                          case int 242:
                                                           (exit 23)
                                                          case int 243:
                                                           (exit 23)
                                                          case int 244:
                                                           (exit 23)
                                                          case int 245:
                                                           (exit 23)
                                                          case int 246:
                                                           (exit 23)
                                                          case int 247:
                                                           (exit 23)
                                                          case int 248:
                                                           (exit 23)
                                                          case int 249:
                                                           (exit 23)
                                                          case int 250:
                                                           (exit 23)
                                                          case int 251:
                                                           (exit 23)
                                                          case int 252:
                                                           (exit 23)
                                                          case int 253:
                                                           (exit 23)
                                                          case int 254:
                                                           (exit 23)
                                                          case int 255:
                                                           (exit 23)
                                                          case int 256:
                                                           (exit 23)
                                                          case int 257:
                                                           (exit 23)
                                                          case int 258:
                                                           (exit 23)
                                                          case int 259:
                                                           (exit 23)
                                                          case int 260:
                                                           (exit 23)
                                                          case int 261:
                                                           "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | ~ = term; ~ = op; ~ = factor; <EBinOp>\n"
                                                          case int 262:
                                                           (exit 23)
                                                          case int 263:
                                                           (exit 23)
                                                          case int 264:
                                                           (exit 23)
                                                          case int 265:
                                                           (exit 23)
                                                          case int 266:
                                                           (exit 23)
                                                          case int 267:
                                                           (exit 23)
                                                          case int 268:
                                                           (exit 23)
                                                          case int 269:
                                                           (exit 23)
                                                          case int 270:
                                                           (exit 23)
                                                          case int 271:
                                                           (exit 23)
                                                          case int 272:
                                                           (exit 6)
                                                          case int 273:
                                                           (exit 23)
                                                          case int 274:
                                                           (exit 9)
                                                          case int 275:
                                                           (exit 8)
                                                          case int 276:
                                                           (exit 7)
                                                          case int 277:
                                                           (exit 1)
                                                          case int 278:
                                                           (exit 23)
                                                          case int 279:
                                                           (exit 23)
                                                          case int 280:
                                                           (exit 23)
                                                          case int 281:
                                                           (exit 23)
                                                          case int 282:
                                                           (exit 23)
                                                          case int 283:
                                                           (exit 23)
                                                          case int 284:
                                                           "At this point, one of the following is expected:\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 285:
                                                           (exit 2)
                                                          case int 286:
                                                           (exit 23)
                                                          case int 287:
                                                           (exit 23)
                                                          case int 288:
                                                           (exit 23)
                                                          case int 289:
                                                           (exit 23)
                                                          case int 290:
                                                           (exit 23)
                                                          case int 291:
                                                           (exit 23)
                                                          case int 292:
                                                           (exit 23)
                                                          case int 293:
                                                           (exit 23)
                                                          case int 294:
                                                           (exit 23)
                                                          case int 295:
                                                           (exit 23)
                                                          case int 296:
                                                           (exit 22)))
                                                      with (23)
                                                       (raise
                                                         (field_imm 7
                                                           (global Stdlib!))))
                                                    with (1)
                                                     "After a semicolon, an expression is expected.\n(A rule cannot be terminated with a semicolon.)\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n")
                                                  with (2)
                                                   "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n")
                                                with (3)
                                                 "A comma-separated list of expressions is expected at this point.\n")
                                              with (4)
                                               "The previous opening parenthesis seemed to be the beginning of a tuple pattern.\nThus, either a comma ',' followed with a pattern\nor a closing parenthesis ')' is expected at this point.\n")
                                            with (5)
                                             "This opening parenthesis seems to be the beginning of a tuple pattern.\nThus, a comma-separated list of patterns is expected at this point.\n")
                                          with (6)
                                           "A semantic action is expected at this point.\n")
                                        with (7)
                                         "A semicolon ';' is expected at this point.\n")
                                      with (8)
                                       "A symbol is expected at this point.\n")
                                    with (9)
                                     "An equals sign '=' is expected at this point.\n")
                                  with (10)
                                   "An equality symbol ':=' or '==' is expected at this point.\nExamples of well-formed rules:\n  let  option(X) := { None } | x = X; { Some x } (* ordinary *)\n  let ioption(X) == { None } | x = X; { Some x } (*  inline  *)\n")
                                with (11)
                                 "Ill-formed '%attribute' declaration.\nAn '%attribute' declaration should contain a nonempty list of symbols,\nfollowed with a nonempty list of attributes.\nExamples of well-formed declarations:\n  %attribute FOO [@printer \"foo\"]\n  %attribute bar BAZ [@printer \"bar/BAZ\"] [@cost 2.0]\n")
                              with (12)
                               "Ill-formed list of actual parameters.\nA comma-delimited list of actual parameters is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n")
                            with (13)
                             "Ill-formed %prec annotation.\nA symbol is expected at this point.\nExamples of well-formed annotations:\n  expr: MINUS e = expr %prec UMINUS { -e }\n")
                          with (14)
                           "Either another production '|' ...\nor a comma ','\nor a closing parenthesis ')'\nis expected at this point.\n")
                        with (15)
                         "Ill-formed production.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n  expr [@cost 0]\n")
                      with (16)
                       "Ill-formed rule.\nA list of productions is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  symbol: s = LID | s = UID { s }\n")
                    with (17)
                     "Ill-formed rule.\nA comma-delimited list of formal parameters is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n")
                  with (18)
                   "Ill-formed precedence declaration.\nExamples of well-formed declarations:\n  %left PLUS\n  %left PLUS MINUS\n  %nonassoc unary_minus\n  %right CONCAT\n")
                with (19)
                 "Ill-formed '%start' declaration.\nA start symbol must begin with a lowercase letter.\nExamples of well-formed declarations:\n  %start program\n  %start expression phrase\n  %start <int> date time\n")
              with (20)
               "Ill-formed '%token' declaration.\nExamples of well-formed declarations:\n  %token FOO\n  %token BAR \"|\"\n  %token DOT \".\" SEMICOLON \";\"\n  %token <string> LID UID\n  %token FOO [@cost 0]\n")
            with (21)
             "Ill-formed declaration.\nExamples of well-formed declarations:\n  %type <Syntax.expression> expression\n  %type <int> date time\n  %type <int option> option(date)\n  %on_error_reduce expression\n  %on_error_reduce date time\n  %on_error_reduce option(date)\n")
          with (22)
           "Either a declaration or '%%' is expected at this point.\n")))
    (setfield_ptr(root-init) 0 (global Dune__exe__ParserMessages!)
      message/397))
  0)
(seq
  (let
    (message/397 =
       (function s/399[int]
         (catch
           (catch
             (catch
               (catch
                 (catch
                   (catch
                     (catch
                       (catch
                         (catch
                           (catch
                             (catch
                               (catch
                                 (catch
                                   (catch
                                     (catch
                                       (catch
                                         (catch
                                           (catch
                                             (catch
                                               (catch
                                                 (catch
                                                   (catch
                                                     (catch
                                                       (if (isout 296 s/399)
                                                         (exit 23)
                                                         (switch* s/399
                                                          case int 0:
                                                           (exit 22)
                                                          case int 1:
                                                           (exit 21)
                                                          case int 2:
                                                           (exit 21)
                                                          case int 3:
                                                           (exit 23)
                                                          case int 4:
                                                           (exit 23)
                                                          case int 5:
                                                           (exit 23)
                                                          case int 6:
                                                           (exit 21)
                                                          case int 7:
                                                           (exit 21)
                                                          case int 8:
                                                           (exit 23)
                                                          case int 9:
                                                           (exit 23)
                                                          case int 10:
                                                           (exit 23)
                                                          case int 11:
                                                           (exit 21)
                                                          case int 12:
                                                           (exit 12)
                                                          case int 13:
                                                           "Ill-formed list of actual parameters.\nEither a modifier '*' or '+' or '?'\nor a closing parenthesis ')'\nor a comma ',' is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n"
                                                          case int 14:
                                                           (exit 23)
                                                          case int 15:
                                                           (exit 23)
                                                          case int 16:
                                                           (exit 23)
                                                          case int 17:
                                                           (exit 21)
                                                          case int 18:
                                                           (exit 23)
                                                          case int 19:
                                                           (exit 23)
                                                          case int 20:
                                                           (exit 23)
                                                          case int 21:
                                                           (exit 23)
                                                          case int 22:
                                                           (exit 23)
                                                          case int 23:
                                                           (exit 23)
                                                          case int 24:
                                                           (exit 23)
                                                          case int 25:
                                                           (exit 23)
                                                          case int 26:
                                                           (exit 23)
                                                          case int 27:
                                                           (exit 21)
                                                          case int 28:
                                                           (exit 23)
                                                          case int 29:
                                                           (exit 23)
                                                          case int 30:
                                                           (exit 23)
                                                          case int 31:
                                                           (exit 23)
                                                          case int 32:
                                                           (exit 21)
                                                          case int 33:
                                                           (exit 23)
                                                          case int 34:
                                                           (exit 23)
                                                          case int 35:
                                                           (exit 23)
                                                          case int 36:
                                                           (exit 23)
                                                          case int 37:
                                                           (exit 20)
                                                          case int 38:
                                                           (exit 23)
                                                          case int 39:
                                                           (exit 20)
                                                          case int 40:
                                                           (exit 20)
                                                          case int 41:
                                                           (exit 23)
                                                          case int 42:
                                                           (exit 23)
                                                          case int 43:
                                                           (exit 23)
                                                          case int 44:
                                                           (exit 23)
                                                          case int 45:
                                                           (exit 20)
                                                          case int 46:
                                                           (exit 20)
                                                          case int 47:
                                                           (exit 23)
                                                          case int 48:
                                                           (exit 23)
                                                          case int 49:
                                                           (exit 19)
                                                          case int 50:
                                                           (exit 23)
                                                          case int 51:
                                                           (exit 19)
                                                          case int 52:
                                                           (exit 19)
                                                          case int 53:
                                                           (exit 19)
                                                          case int 54:
                                                           (exit 23)
                                                          case int 55:
                                                           (exit 23)
                                                          case int 56:
                                                           (exit 23)
                                                          case int 57:
                                                           (exit 23)
                                                          case int 58:
                                                           (exit 23)
                                                          case int 59:
                                                           (exit 11)
                                                          case int 60:
                                                           (exit 23)
                                                          case int 61:
                                                           (exit 11)
                                                          case int 62:
                                                           (exit 11)
                                                          case int 63:
                                                           (exit 23)
                                                          case int 64:
                                                           (exit 23)
                                                          case int 65:
                                                           (exit 23)
                                                          case int 66:
                                                           (exit 11)
                                                          case int 67:
                                                           (exit 11)
                                                          case int 68:
                                                           (exit 23)
                                                          case int 69:
                                                           (exit 23)
                                                          case int 70:
                                                           (exit 23)
                                                          case int 71:
                                                           (exit 11)
                                                          case int 72:
                                                           (exit 23)
                                                          case int 73:
                                                           (exit 23)
                                                          case int 74:
                                                           "Ill-formed '%parameter' declaration.\nExamples of well-formed declarations:\n  %parameter <X : sig type t end>\n"
                                                          case int 75:
                                                           (exit 23)
                                                          case int 76:
                                                           (exit 21)
                                                          case int 77:
                                                           (exit 23)
                                                          case int 78:
                                                           (exit 23)
                                                          case int 79:
                                                           (exit 23)
                                                          case int 80:
                                                           (exit 23)
                                                          case int 81:
                                                           (exit 23)
                                                          case int 82:
                                                           (exit 23)
                                                          case int 83:
                                                           (exit 23)
                                                          case int 84:
                                                           (exit 23)
                                                          case int 85:
                                                           (exit 23)
                                                          case int 86:
                                                           (exit 18)
                                                          case int 87:
                                                           (exit 18)
                                                          case int 88:
                                                           (exit 18)
                                                          case int 89:
                                                           (exit 23)
                                                          case int 90:
                                                           (exit 23)
                                                          case int 91:
                                                           (exit 23)
                                                          case int 92:
                                                           "A rule is expected at this point.\n"
                                                          case int 93:
                                                           "Ill-formed rule.\n'let' or '%inline' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public     option(X):   { None } | x = X  { Some x }\n  %public let option(X) := { None } | x = X; { Some x }\n"
                                                          case int 94:
                                                           (exit 23)
                                                          case int 95:
                                                           "Ill-formed rule.\nEither '%public' or a non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 96:
                                                           (exit 23)
                                                          case int 97:
                                                           (exit 23)
                                                          case int 98:
                                                           (exit 23)
                                                          case int 99:
                                                           (exit 23)
                                                          case int 100:
                                                           "Ill-formed rule.\nA non-terminal symbol is expected at this point.\nExamples of well-formed rules:\n  %public option(X): { None } | x = X { Some x }\n  %inline clist(X): xs = separated_nonempty_list(COMMA?, X) { xs }\n  %public %inline pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 101:
                                                           (exit 23)
                                                          case int 102:
                                                           (exit 23)
                                                          case int 103:
                                                           (exit 23)
                                                          case int 104:
                                                           (exit 23)
                                                          case int 105:
                                                           (exit 23)
                                                          case int 106:
                                                           (exit 23)
                                                          case int 107:
                                                           "Ill-formed rule.\nEither a parenthesized, comma-delimited list of formal parameters\nor an attribute\nor a colon ':' is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  option(X): { None } | x = X { Some x }\n  main [@cost 0]: e = expr; EOL { e }\n"
                                                          case int 108:
                                                           (exit 17)
                                                          case int 109:
                                                           (exit 23)
                                                          case int 110:
                                                           (exit 17)
                                                          case int 111:
                                                           (exit 23)
                                                          case int 112:
                                                           "Ill-formed rule.\nA closing parenthesis ')' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n"
                                                          case int 113:
                                                           (exit 23)
                                                          case int 114:
                                                           "Ill-formed rule.\nA colon ':' is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
                                                          case int 115:
                                                           (exit 16)
                                                          case int 116:
                                                           (exit 23)
                                                          case int 117:
                                                           (exit 16)
                                                          case int 118:
                                                           (exit 15)
                                                          case int 119:
                                                           (exit 15)
                                                          case int 120:
                                                           (exit 23)
                                                          case int 121:
                                                           (exit 23)
                                                          case int 122:
                                                           (exit 12)
                                                          case int 123:
                                                           (exit 23)
                                                          case int 124:
                                                           (exit 15)
                                                          case int 125:
                                                           (exit 23)
                                                          case int 126:
                                                           (exit 23)
                                                          case int 127:
                                                           (exit 23)
                                                          case int 128:
                                                           (exit 23)
                                                          case int 129:
                                                           (exit 14)
                                                          case int 130:
                                                           (exit 13)
                                                          case int 131:
                                                           (exit 23)
                                                          case int 132:
                                                           (exit 23)
                                                          case int 133:
                                                           (exit 23)
                                                          case int 134:
                                                           (exit 14)
                                                          case int 135:
                                                           "A production is expected at this point.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n"
                                                          case int 136:
                                                           (exit 23)
                                                          case int 137:
                                                           "Ill-formed rule.\nEither a semantic action '{' ... '}'\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  expr: MINUS e = expr %prec UMINUS { -e }\n"
                                                          case int 138:
                                                           (exit 16)
                                                          case int 139:
                                                           (exit 23)
                                                          case int 140:
                                                           (exit 23)
                                                          case int 141:
                                                           (exit 23)
                                                          case int 142:
                                                           (exit 23)
                                                          case int 143:
                                                           (exit 23)
                                                          case int 144:
                                                           (exit 23)
                                                          case int 145:
                                                           (exit 23)
                                                          case int 146:
                                                           (exit 15)
                                                          case int 147:
                                                           (exit 15)
                                                          case int 148:
                                                           (exit 23)
                                                          case int 149:
                                                           (exit 23)
                                                          case int 150:
                                                           (exit 23)
                                                          case int 151:
                                                           (exit 13)
                                                          case int 152:
                                                           (exit 23)
                                                          case int 153:
                                                           (exit 23)
                                                          case int 154:
                                                           (exit 23)
                                                          case int 155:
                                                           (exit 23)
                                                          case int 156:
                                                           (exit 12)
                                                          case int 157:
                                                           (exit 23)
                                                          case int 158:
                                                           (exit 23)
                                                          case int 159:
                                                           (exit 15)
                                                          case int 160:
                                                           (exit 23)
                                                          case int 161:
                                                           (exit 23)
                                                          case int 162:
                                                           (exit 15)
                                                          case int 163:
                                                           (exit 23)
                                                          case int 164:
                                                           (exit 23)
                                                          case int 165:
                                                           "Another rule is expected at this point.\n"
                                                          case int 166:
                                                           (exit 23)
                                                          case int 167:
                                                           (exit 23)
                                                          case int 168:
                                                           (exit 23)
                                                          case int 169:
                                                           "Either another production '|' ...\nor another rule is expected at this point.\n"
                                                          case int 170:
                                                           (exit 13)
                                                          case int 171:
                                                           (exit 23)
                                                          case int 172:
                                                           (exit 23)
                                                          case int 173:
                                                           (exit 23)
                                                          case int 174:
                                                           (exit 23)
                                                          case int 175:
                                                           (exit 23)
                                                          case int 176:
                                                           "Either another rule\nor another production '|' ...\nis expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n"
                                                          case int 177:
                                                           (exit 16)
                                                          case int 178:
                                                           (exit 23)
                                                          case int 179:
                                                           (exit 23)
                                                          case int 180:
                                                           "A lowercase identifier is expected at this point.\n"
                                                          case int 181:
                                                           (exit 23)
                                                          case int 182:
                                                           (exit 23)
                                                          case int 183:
                                                           (exit 23)
                                                          case int 184:
                                                           (exit 10)
                                                          case int 185:
                                                           "A comma-delimited list of formal parameters is expected at this point.\n"
                                                          case int 186:
                                                           "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 187:
                                                           (exit 23)
                                                          case int 188:
                                                           (exit 10)
                                                          case int 189:
                                                           (exit 23)
                                                          case int 190:
                                                           (exit 23)
                                                          case int 191:
                                                           "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n"
                                                          case int 192:
                                                           (exit 23)
                                                          case int 193:
                                                           (exit 23)
                                                          case int 194:
                                                           (exit 13)
                                                          case int 195:
                                                           (exit 23)
                                                          case int 196:
                                                           (exit 23)
                                                          case int 197:
                                                           (exit 23)
                                                          case int 198:
                                                           (exit 23)
                                                          case int 199:
                                                           (exit 23)
                                                          case int 200:
                                                           (exit 5)
                                                          case int 201:
                                                           (exit 23)
                                                          case int 202:
                                                           (exit 23)
                                                          case int 203:
                                                           (exit 5)
                                                          case int 204:
                                                           (exit 23)
                                                          case int 205:
                                                           (exit 23)
                                                          case int 206:
                                                           (exit 23)
                                                          case int 207:
                                                           "A pattern is expected at this point.\nExamples of patterns:\n  x\n  ~\n  _\n  (x, y, _)\n"
                                                          case int 208:
                                                           (exit 23)
                                                          case int 209:
                                                           (exit 4)
                                                          case int 210:
                                                           (exit 23)
                                                          case int 211:
                                                           (exit 4)
                                                          case int 212:
                                                           (exit 23)
                                                          case int 213:
                                                           "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 214:
                                                           (exit 2)
                                                          case int 215:
                                                           (exit 23)
                                                          case int 216:
                                                           "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 217:
                                                           (exit 1)
                                                          case int 218:
                                                           (exit 23)
                                                          case int 219:
                                                           (exit 3)
                                                          case int 220:
                                                           (exit 23)
                                                          case int 221:
                                                           "At this point, one of the following is expected:\nan equals sign '=' followed with a symbol, or\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 222:
                                                           (exit 2)
                                                          case int 223:
                                                           (exit 23)
                                                          case int 224:
                                                           "At this point, one of the following is expected:\na semicolon ';' followed with an expression, or\na bar '|' followed with an expression, or\na comma ',' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 225:
                                                           (exit 1)
                                                          case int 226:
                                                           (exit 23)
                                                          case int 227:
                                                           (exit 3)
                                                          case int 228:
                                                           (exit 23)
                                                          case int 229:
                                                           (exit 23)
                                                          case int 230:
                                                           "At this point, one of the following is expected:\na comma ',' followed with an expression, or\na bar '|' followed with an expression, or\na closing parenthesis ')'.\n"
                                                          case int 231:
                                                           (exit 2)
                                                          case int 232:
                                                           (exit 23)
                                                          case int 233:
                                                           (exit 6)
                                                          case int 234:
                                                           (exit 23)
                                                          case int 235:
                                                           (exit 9)
                                                          case int 236:
                                                           (exit 8)
                                                          case int 237:
                                                           (exit 7)
                                                          case int 238:
                                                           (exit 1)
                                                          case int 239:
                                                           (exit 23)
                                                          case int 240:
                                                           (exit 23)
                                                          case int 241:
                                                           (exit 23)
                                                          case int 242:
                                                           (exit 23)
                                                          case int 243:
                                                           (exit 23)
                                                          case int 244:
                                                           (exit 23)
                                                          case int 245:
                                                           (exit 23)
                                                          case int 246:
                                                           (exit 23)
                                                          case int 247:
                                                           (exit 23)
                                                          case int 248:
                                                           (exit 23)
                                                          case int 249:
                                                           (exit 23)
                                                          case int 250:
                                                           (exit 23)
                                                          case int 251:
                                                           (exit 23)
                                                          case int 252:
                                                           (exit 23)
                                                          case int 253:
                                                           (exit 23)
                                                          case int 254:
                                                           (exit 23)
                                                          case int 255:
                                                           (exit 23)
                                                          case int 256:
                                                           (exit 23)
                                                          case int 257:
                                                           (exit 23)
                                                          case int 258:
                                                           (exit 23)
                                                          case int 259:
                                                           (exit 23)
                                                          case int 260:
                                                           (exit 23)
                                                          case int 261:
                                                           "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | ~ = term; ~ = op; ~ = factor; <EBinOp>\n"
                                                          case int 262:
                                                           (exit 23)
                                                          case int 263:
                                                           (exit 23)
                                                          case int 264:
                                                           (exit 23)
                                                          case int 265:
                                                           (exit 23)
                                                          case int 266:
                                                           (exit 23)
                                                          case int 267:
                                                           (exit 23)
                                                          case int 268:
                                                           (exit 23)
                                                          case int 269:
                                                           (exit 23)
                                                          case int 270:
                                                           (exit 23)
                                                          case int 271:
                                                           (exit 23)
                                                          case int 272:
                                                           (exit 6)
                                                          case int 273:
                                                           (exit 23)
                                                          case int 274:
                                                           (exit 9)
                                                          case int 275:
                                                           (exit 8)
                                                          case int 276:
                                                           (exit 7)
                                                          case int 277:
                                                           (exit 1)
                                                          case int 278:
                                                           (exit 23)
                                                          case int 279:
                                                           (exit 23)
                                                          case int 280:
                                                           (exit 23)
                                                          case int 281:
                                                           (exit 23)
                                                          case int 282:
                                                           (exit 23)
                                                          case int 283:
                                                           (exit 23)
                                                          case int 284:
                                                           "At this point, one of the following is expected:\na bar '|' followed with an expression, or\nanother rule.\n"
                                                          case int 285:
                                                           (exit 2)
                                                          case int 286:
                                                           (exit 23)
                                                          case int 287:
                                                           (exit 23)
                                                          case int 288:
                                                           (exit 23)
                                                          case int 289:
                                                           (exit 23)
                                                          case int 290:
                                                           (exit 23)
                                                          case int 291:
                                                           (exit 23)
                                                          case int 292:
                                                           (exit 23)
                                                          case int 293:
                                                           (exit 23)
                                                          case int 294:
                                                           (exit 23)
                                                          case int 295:
                                                           (exit 23)
                                                          case int 296:
                                                           (exit 22)))
                                                      with (23)
                                                       (raise
                                                         (field_imm 7
                                                           (global Stdlib!))))
                                                    with (1)
                                                     "After a semicolon, an expression is expected.\n(A rule cannot be terminated with a semicolon.)\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n")
                                                  with (2)
                                                   "An expression is expected at this point.\nExamples of expressions:\n  term\n  t = term; { t }\n  LPAREN; ~ = term; RPAREN; <>\n  factor | term; MUL; factor\n")
                                                with (3)
                                                 "A comma-separated list of expressions is expected at this point.\n")
                                              with (4)
                                               "The previous opening parenthesis seemed to be the beginning of a tuple pattern.\nThus, either a comma ',' followed with a pattern\nor a closing parenthesis ')' is expected at this point.\n")
                                            with (5)
                                             "This opening parenthesis seems to be the beginning of a tuple pattern.\nThus, a comma-separated list of patterns is expected at this point.\n")
                                          with (6)
                                           "A semantic action is expected at this point.\n")
                                        with (7)
                                         "A semicolon ';' is expected at this point.\n")
                                      with (8)
                                       "A symbol is expected at this point.\n")
                                    with (9)
                                     "An equals sign '=' is expected at this point.\n")
                                  with (10)
                                   "An equality symbol ':=' or '==' is expected at this point.\nExamples of well-formed rules:\n  let  option(X) := { None } | x = X; { Some x } (* ordinary *)\n  let ioption(X) == { None } | x = X; { Some x } (*  inline  *)\n")
                                with (11)
                                 "Ill-formed '%attribute' declaration.\nAn '%attribute' declaration should contain a nonempty list of symbols,\nfollowed with a nonempty list of attributes.\nExamples of well-formed declarations:\n  %attribute FOO [@printer \"foo\"]\n  %attribute bar BAZ [@printer \"bar/BAZ\"] [@cost 2.0]\n")
                              with (12)
                               "Ill-formed list of actual parameters.\nA comma-delimited list of actual parameters is expected at this point.\nExamples of well-formed actual parameters:\n  expr\n  expr+\n  option(expr)\n  separated_list(COMMA, expr)\n")
                            with (13)
                             "Ill-formed %prec annotation.\nA symbol is expected at this point.\nExamples of well-formed annotations:\n  expr: MINUS e = expr %prec UMINUS { -e }\n")
                          with (14)
                           "Either another production '|' ...\nor a comma ','\nor a closing parenthesis ')'\nis expected at this point.\n")
                        with (15)
                         "Ill-formed production.\nA production is a sequence of producers, followed with a semantic action.\nExamples of well-formed producers:\n  expr\n  option(COMMA)\n  separated_list(COMMA, expr)\n  e = expr\n  ds = declaration*\n  es = list(terminated(expr, SEMI))\n  es = list(e = expr SEMI { e })\n  xs = list(x = var { Some x } | WILDCARD { None })\n  expr [@cost 0]\n")
                      with (16)
                       "Ill-formed rule.\nA list of productions is expected at this point.\nExamples of well-formed rules:\n  main: e = expr; EOL { e }\n  expr: i = INT { i } | e1 = expr; PLUS; e2 = expr { e1 + e2 }\n  symbol: s = LID | s = UID { s }\n")
                    with (17)
                     "Ill-formed rule.\nA comma-delimited list of formal parameters is expected at this point.\nExamples of well-formed rules:\n  option(X): { None } | x = X { Some x }\n  pair(X, Y): x = X; y = Y { (x, y) }\n")
                  with (18)
                   "Ill-formed precedence declaration.\nExamples of well-formed declarations:\n  %left PLUS\n  %left PLUS MINUS\n  %nonassoc unary_minus\n  %right CONCAT\n")
                with (19)
                 "Ill-formed '%start' declaration.\nA start symbol must begin with a lowercase letter.\nExamples of well-formed declarations:\n  %start program\n  %start expression phrase\n  %start <int> date time\n")
              with (20)
               "Ill-formed '%token' declaration.\nExamples of well-formed declarations:\n  %token FOO\n  %token BAR \"|\"\n  %token DOT \".\" SEMICOLON \";\"\n  %token <string> LID UID\n  %token FOO [@cost 0]\n")
            with (21)
             "Ill-formed declaration.\nExamples of well-formed declarations:\n  %type <Syntax.expression> expression\n  %type <int> date time\n  %type <int option> option(date)\n  %on_error_reduce expression\n  %on_error_reduce date time\n  %on_error_reduce option(date)\n")
          with (22)
           "Either a declaration or '%%' is expected at this point.\n")))
    (setfield_ptr(root-init) 0 (global Dune__exe__ParserMessages!)
      message/397))
  0)

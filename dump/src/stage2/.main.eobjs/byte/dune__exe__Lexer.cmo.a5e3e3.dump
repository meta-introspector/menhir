[
  structure_item (src/lexer.mll[16,43+0]..[16,43+11])
    Pstr_open Fresh
    module_expr (src/lexer.mll[16,43+5]..[16,43+11])
      Pmod_ident "Lexing" (src/lexer.mll[16,43+5]..[16,43+11])
  structure_item (src/lexer.mll[17,55+0]..[17,55+11])
    Pstr_open Fresh
    module_expr (src/lexer.mll[17,55+5]..[17,55+11])
      Pmod_ident "Parser" (src/lexer.mll[17,55+5]..[17,55+11])
  structure_item (src/lexer.mll[18,67+0]..[18,67+14])
    Pstr_open Fresh
    module_expr (src/lexer.mll[18,67+5]..[18,67+14])
      Pmod_ident "Positions" (src/lexer.mll[18,67+5]..[18,67+14])
  structure_item (src/lexer.mll[19,82+0]..[19,82+12])
    Pstr_open Fresh
    module_expr (src/lexer.mll[19,82+5]..[19,82+12])
      Pmod_ident "Keyword" (src/lexer.mll[19,82+5]..[19,82+12])
  structure_item (src/lexer.mll[25,196+0]..[26,213+33])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[25,196+4]..[25,196+10])
          Ppat_var "error1" (src/lexer.mll[25,196+4]..[25,196+10])
        expression (src/lexer.mll[25,196+11]..[26,213+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[25,196+11]..[25,196+14])
            Ppat_var "pos" (src/lexer.mll[25,196+11]..[25,196+14])
          expression (src/lexer.mll[26,213+2]..[26,213+33])
            Pexp_apply
            expression (src/lexer.mll[26,213+2]..[26,213+13])
              Pexp_ident "Error.error" (src/lexer.mll[26,213+2]..[26,213+13])
            [
              <arg>
              Nolabel
                expression (src/lexer.mll[26,213+14]..[26,213+33])
                  Pexp_apply
                  expression (src/lexer.mll[26,213+15]..[26,213+28])
                    Pexp_ident "Positions.one" (src/lexer.mll[26,213+15]..[26,213+28])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[26,213+29]..[26,213+32])
                        Pexp_ident "pos" (src/lexer.mll[26,213+29]..[26,213+32])
                  ]
            ]
    ]
  structure_item (src/lexer.mll[28,248+0]..[29,268+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[28,248+4]..[28,248+10])
          Ppat_var "error2" (src/lexer.mll[28,248+4]..[28,248+10])
        expression (src/lexer.mll[28,248+11]..[29,268+39]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[28,248+11]..[28,248+17])
            Ppat_var "lexbuf" (src/lexer.mll[28,248+11]..[28,248+17])
          expression (src/lexer.mll[29,268+2]..[29,268+39])
            Pexp_apply
            expression (src/lexer.mll[29,268+2]..[29,268+13])
              Pexp_ident "Error.error" (src/lexer.mll[29,268+2]..[29,268+13])
            [
              <arg>
              Nolabel
                expression (src/lexer.mll[29,268+14]..[29,268+39])
                  Pexp_apply
                  expression (src/lexer.mll[29,268+15]..[29,268+31])
                    Pexp_ident "Positions.lexbuf" (src/lexer.mll[29,268+15]..[29,268+31])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[29,268+32]..[29,268+38])
                        Pexp_ident "lexbuf" (src/lexer.mll[29,268+32]..[29,268+38])
                  ]
            ]
    ]
  structure_item (src/lexer.mll[37,591+0]..[41,683+44])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[37,591+4]..[37,591+17])
          Ppat_var "int_of_string" (src/lexer.mll[37,591+4]..[37,591+17])
        expression (src/lexer.mll[37,591+18]..[41,683+44]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[37,591+18]..[37,591+41])
            Ppat_constraint
            pattern (src/lexer.mll[37,591+19]..[37,591+22])
              Ppat_var "pos" (src/lexer.mll[37,591+19]..[37,591+22])
            core_type (src/lexer.mll[37,591+25]..[37,591+40])
              Ptyp_constr "Lexing.position" (src/lexer.mll[37,591+25]..[37,591+40])
              []
          expression (src/lexer.mll[37,591+42]..[41,683+44]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[37,591+42]..[37,591+43])
              Ppat_var "i" (src/lexer.mll[37,591+42]..[37,591+43])
            expression (src/lexer.mll[38,637+2]..[41,683+44])
              Pexp_try
              expression (src/lexer.mll[39,643+4]..[39,643+19])
                Pexp_apply
                expression (src/lexer.mll[39,643+4]..[39,643+17])
                  Pexp_ident "int_of_string" (src/lexer.mll[39,643+4]..[39,643+17])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.mll[39,643+18]..[39,643+19])
                      Pexp_ident "i" (src/lexer.mll[39,643+18]..[39,643+19])
                ]
              [
                <case>
                  pattern (src/lexer.mll[40,663+7]..[40,663+16])
                    Ppat_construct "Failure" (src/lexer.mll[40,663+7]..[40,663+14])
                    Some
                      []
                      pattern (src/lexer.mll[40,663+15]..[40,663+16])
                        Ppat_any
                  expression (src/lexer.mll[41,683+4]..[41,683+44])
                    Pexp_apply
                    expression (src/lexer.mll[41,683+4]..[41,683+10])
                      Pexp_ident "error1" (src/lexer.mll[41,683+4]..[41,683+10])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[41,683+11]..[41,683+14])
                          Pexp_ident "pos" (src/lexer.mll[41,683+11]..[41,683+14])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[41,683+15]..[41,683+44])
                          Pexp_constant PConst_string("unreasonably large integer.",(src/lexer.mll[41,683+16]..[41,683+43]),None)
                    ]
              ]
    ]
  structure_item (src/lexer.mll[49,963+0]..[53,1083+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[49,963+4]..[49,963+13])
          Ppat_var "savestart" (src/lexer.mll[49,963+4]..[49,963+13])
        expression (src/lexer.mll[49,963+14]..[53,1083+7]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[49,963+14]..[49,963+20])
            Ppat_var "lexbuf" (src/lexer.mll[49,963+14]..[49,963+20])
          expression (src/lexer.mll[49,963+21]..[53,1083+7]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[49,963+21]..[49,963+22])
              Ppat_var "f" (src/lexer.mll[49,963+21]..[49,963+22])
            expression (src/lexer.mll[50,988+2]..[53,1083+7])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/lexer.mll[50,988+6]..[50,988+12])
                    Ppat_var "startp" (src/lexer.mll[50,988+6]..[50,988+12])
                  expression (src/lexer.mll[50,988+15]..[50,988+33])
                    Pexp_field
                    expression (src/lexer.mll[50,988+15]..[50,988+21])
                      Pexp_ident "lexbuf" (src/lexer.mll[50,988+15]..[50,988+21])
                    "lex_start_p" (src/lexer.mll[50,988+22]..[50,988+33])
              ]
              expression (src/lexer.mll[51,1025+2]..[53,1083+7])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[51,1025+6]..[51,1025+11])
                      Ppat_var "token" (src/lexer.mll[51,1025+6]..[51,1025+11])
                    expression (src/lexer.mll[51,1025+14]..[51,1025+22])
                      Pexp_apply
                      expression (src/lexer.mll[51,1025+14]..[51,1025+15])
                        Pexp_ident "f" (src/lexer.mll[51,1025+14]..[51,1025+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[51,1025+16]..[51,1025+22])
                            Pexp_ident "lexbuf" (src/lexer.mll[51,1025+16]..[51,1025+22])
                      ]
                ]
                expression (src/lexer.mll[52,1051+2]..[53,1083+7])
                  Pexp_sequence
                  expression (src/lexer.mll[52,1051+2]..[52,1051+30])
                    Pexp_setfield
                    expression (src/lexer.mll[52,1051+2]..[52,1051+8])
                      Pexp_ident "lexbuf" (src/lexer.mll[52,1051+2]..[52,1051+8])
                    "lex_start_p" (src/lexer.mll[52,1051+9]..[52,1051+20])
                    expression (src/lexer.mll[52,1051+24]..[52,1051+30])
                      Pexp_ident "startp" (src/lexer.mll[52,1051+24]..[52,1051+30])
                  expression (src/lexer.mll[53,1083+2]..[53,1083+7])
                    Pexp_ident "token" (src/lexer.mll[53,1083+2]..[53,1083+7])
    ]
  structure_item (src/lexer.mll[60,1268+0]..[62,1347+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[60,1268+4]..[60,1268+13])
          Ppat_var "overwrite" (src/lexer.mll[60,1268+4]..[60,1268+13])
        expression (src/lexer.mll[60,1268+14]..[62,1347+29]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[60,1268+14]..[60,1268+21])
            Ppat_var "content" (src/lexer.mll[60,1268+14]..[60,1268+21])
          expression (src/lexer.mll[60,1268+22]..[62,1347+29]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[60,1268+22]..[60,1268+28])
              Ppat_var "offset" (src/lexer.mll[60,1268+22]..[60,1268+28])
            expression (src/lexer.mll[60,1268+29]..[62,1347+29]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.mll[60,1268+29]..[60,1268+31])
                Ppat_var "c1" (src/lexer.mll[60,1268+29]..[60,1268+31])
              expression (src/lexer.mll[60,1268+32]..[62,1347+29]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.mll[60,1268+32]..[60,1268+34])
                  Ppat_var "c2" (src/lexer.mll[60,1268+32]..[60,1268+34])
                expression (src/lexer.mll[61,1305+2]..[62,1347+29])
                  Pexp_sequence
                  expression (src/lexer.mll[61,1305+2]..[61,1305+40])
                    Pexp_assert
                    expression (src/lexer.mll[61,1305+9]..[61,1305+40])
                      Pexp_apply
                      expression (src/lexer.mll[61,1305+35]..[61,1305+36])
                        Pexp_ident "=" (src/lexer.mll[61,1305+35]..[61,1305+36])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[61,1305+10]..[61,1305+34])
                            Pexp_apply
                            expression (src/lexer.mll[61,1305+10]..[61,1305+19])
                              Pexp_ident "Bytes.get" (src/lexer.mll[61,1305+10]..[61,1305+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[61,1305+20]..[61,1305+27])
                                  Pexp_ident "content" (src/lexer.mll[61,1305+20]..[61,1305+27])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[61,1305+28]..[61,1305+34])
                                  Pexp_ident "offset" (src/lexer.mll[61,1305+28]..[61,1305+34])
                            ]
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[61,1305+37]..[61,1305+39])
                            Pexp_ident "c1" (src/lexer.mll[61,1305+37]..[61,1305+39])
                      ]
                  expression (src/lexer.mll[62,1347+2]..[62,1347+29])
                    Pexp_apply
                    expression (src/lexer.mll[62,1347+2]..[62,1347+11])
                      Pexp_ident "Bytes.set" (src/lexer.mll[62,1347+2]..[62,1347+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[62,1347+12]..[62,1347+19])
                          Pexp_ident "content" (src/lexer.mll[62,1347+12]..[62,1347+19])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[62,1347+20]..[62,1347+26])
                          Pexp_ident "offset" (src/lexer.mll[62,1347+20]..[62,1347+26])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[62,1347+27]..[62,1347+29])
                          Pexp_ident "c2" (src/lexer.mll[62,1347+27]..[62,1347+29])
                    ]
    ]
  structure_item (src/lexer.mll[71,1651+0]..[97,2530+49])
    Pstr_type Rec
    [
      type_declaration "monster" (src/lexer.mll[71,1651+5]..[71,1651+12]) (src/lexer.mll[71,1651+0]..[94,2515+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/lexer.mll[74,1706+2]..[74,1706+19])
                Immutable
                "pos" (src/lexer.mll[74,1706+2]..[74,1706+5])                core_type (src/lexer.mll[74,1706+7]..[74,1706+18])
                  Ptyp_constr "Positions.t" (src/lexer.mll[74,1706+7]..[74,1706+18])
                  []
              (src/lexer.mll[80,2013+2]..[80,2013+15])
                Immutable
                "check" (src/lexer.mll[80,2013+2]..[80,2013+7])                core_type (src/lexer.mll[80,2013+9]..[80,2013+14])
                  Ptyp_constr "check" (src/lexer.mll[80,2013+9]..[80,2013+14])
                  []
              (src/lexer.mll[86,2303+2]..[86,2303+34])
                Immutable
                "transform" (src/lexer.mll[86,2303+2]..[86,2303+11])                core_type (src/lexer.mll[86,2303+13]..[86,2303+33])
                  Ptyp_arrow
                  Nolabel
                  core_type (src/lexer.mll[86,2303+13]..[86,2303+16])
                    Ptyp_constr "int" (src/lexer.mll[86,2303+13]..[86,2303+16])
                    []
                  core_type (src/lexer.mll[86,2303+20]..[86,2303+33])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/lexer.mll[86,2303+20]..[86,2303+25])
                      Ptyp_constr "bytes" (src/lexer.mll[86,2303+20]..[86,2303+25])
                      []
                    core_type (src/lexer.mll[86,2303+29]..[86,2303+33])
                      Ptyp_constr "unit" (src/lexer.mll[86,2303+29]..[86,2303+33])
                      []
              (src/lexer.mll[89,2388+2]..[89,2388+26])
                Immutable
                "keyword" (src/lexer.mll[89,2388+2]..[89,2388+9])                core_type (src/lexer.mll[89,2388+11]..[89,2388+25])
                  Ptyp_constr "option" (src/lexer.mll[89,2388+19]..[89,2388+25])
                  [
                    core_type (src/lexer.mll[89,2388+11]..[89,2388+18])
                      Ptyp_constr "keyword" (src/lexer.mll[89,2388+11]..[89,2388+18])
                      []
                  ]
              (src/lexer.mll[92,2492+2]..[92,2492+21])
                Immutable
                "oid" (src/lexer.mll[92,2492+2]..[92,2492+5])                core_type (src/lexer.mll[92,2492+7]..[92,2492+20])
                  Ptyp_constr "option" (src/lexer.mll[92,2492+14]..[92,2492+20])
                  [
                    core_type (src/lexer.mll[92,2492+7]..[92,2492+13])
                      Ptyp_constr "string" (src/lexer.mll[92,2492+7]..[92,2492+13])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "check" (src/lexer.mll[96,2518+4]..[96,2518+9]) (src/lexer.mll[96,2518+0]..[97,2530+49])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/lexer.mll[97,2530+2]..[97,2530+49])
              Ptyp_arrow
              Nolabel
              core_type (src/lexer.mll[97,2530+2]..[97,2530+18])
                Ptyp_constr "Settings.dollars" (src/lexer.mll[97,2530+2]..[97,2530+18])
                []
              core_type (src/lexer.mll[97,2530+22]..[97,2530+49])
                Ptyp_arrow
                Nolabel
                core_type (src/lexer.mll[97,2530+22]..[97,2530+41])
                  Ptyp_constr "array" (src/lexer.mll[97,2530+36]..[97,2530+41])
                  [
                    core_type (src/lexer.mll[97,2530+22]..[97,2530+35])
                      Ptyp_constr "option" (src/lexer.mll[97,2530+29]..[97,2530+35])
                      [
                        core_type (src/lexer.mll[97,2530+22]..[97,2530+28])
                          Ptyp_constr "string" (src/lexer.mll[97,2530+22]..[97,2530+28])
                          []
                      ]
                  ]
                core_type (src/lexer.mll[97,2530+45]..[97,2530+49])
                  Ptyp_constr "unit" (src/lexer.mll[97,2530+45]..[97,2530+49])
                  []
    ]
  structure_item (src/lexer.mll[101,2598+0]..[102,2617+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[101,2598+4]..[101,2598+8])
          Ppat_var "none" (src/lexer.mll[101,2598+4]..[101,2598+8])
        core_type (src/lexer.mll[101,2598+11]..[101,2598+16])
          Ptyp_constr "check" (src/lexer.mll[101,2598+11]..[101,2598+16])
          []
        expression (src/lexer.mll[102,2617+2]..[102,2617+15])
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[102,2617+6]..[102,2617+7])
            Ppat_any
          expression (src/lexer.mll[102,2617+8]..[102,2617+15]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[102,2617+8]..[102,2617+9])
              Ppat_any
            expression (src/lexer.mll[102,2617+13]..[102,2617+15])
              Pexp_construct "()" (src/lexer.mll[102,2617+13]..[102,2617+15])
              None
    ]
  structure_item (src/lexer.mll[108,2749+0]..[123,3153+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[108,2749+4]..[108,2749+15])
          Ppat_var "syntaxerror" (src/lexer.mll[108,2749+4]..[108,2749+15])
        expression (src/lexer.mll[108,2749+16]..[123,3153+41]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[108,2749+16]..[108,2749+19])
            Ppat_var "pos" (src/lexer.mll[108,2749+16]..[108,2749+19])
          expression (src/lexer.mll[108,2749+20]..[123,3153+41])
            Pexp_constraint
            expression (src/lexer.mll[109,2781+2]..[123,3153+41])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/lexer.mll[109,2781+6]..[109,2781+11])
                    Ppat_var "check" (src/lexer.mll[109,2781+6]..[109,2781+11])
                  expression (src/lexer.mll[110,2795+4]..[110,2795+8])
                    Pexp_ident "none" (src/lexer.mll[110,2795+4]..[110,2795+8])
                <def>
                  pattern (src/lexer.mll[111,2804+6]..[111,2804+15])
                    Ppat_var "transform" (src/lexer.mll[111,2804+6]..[111,2804+15])
                  expression (src/lexer.mll[111,2804+16]..[117,3024+65]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/lexer.mll[111,2804+16]..[111,2804+20])
                      Ppat_var "ofs1" (src/lexer.mll[111,2804+16]..[111,2804+20])
                    expression (src/lexer.mll[111,2804+21]..[117,3024+65]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/lexer.mll[111,2804+21]..[111,2804+28])
                        Ppat_var "content" (src/lexer.mll[111,2804+21]..[111,2804+28])
                      expression (src/lexer.mll[114,2913+4]..[117,3024+65])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[114,2913+8]..[114,2913+11])
                              Ppat_var "pos" (src/lexer.mll[114,2913+8]..[114,2913+11])
                            expression (src/lexer.mll[114,2913+14]..[114,2913+35])
                              Pexp_apply
                              expression (src/lexer.mll[114,2913+14]..[114,2913+31])
                                Pexp_ident "start_of_position" (src/lexer.mll[114,2913+14]..[114,2913+31])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[114,2913+32]..[114,2913+35])
                                    Pexp_ident "pos" (src/lexer.mll[114,2913+32]..[114,2913+35])
                              ]
                        ]
                        expression (src/lexer.mll[115,2952+4]..[117,3024+65])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[115,2952+8]..[115,2952+11])
                                Ppat_var "ofs" (src/lexer.mll[115,2952+8]..[115,2952+11])
                              expression (src/lexer.mll[115,2952+14]..[115,2952+33])
                                Pexp_apply
                                expression (src/lexer.mll[115,2952+27]..[115,2952+28])
                                  Pexp_ident "-" (src/lexer.mll[115,2952+27]..[115,2952+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[115,2952+14]..[115,2952+26])
                                      Pexp_field
                                      expression (src/lexer.mll[115,2952+14]..[115,2952+17])
                                        Pexp_ident "pos" (src/lexer.mll[115,2952+14]..[115,2952+17])
                                      "pos_cnum" (src/lexer.mll[115,2952+18]..[115,2952+26])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[115,2952+29]..[115,2952+33])
                                      Pexp_ident "ofs1" (src/lexer.mll[115,2952+29]..[115,2952+33])
                                ]
                          ]
                          expression (src/lexer.mll[116,2989+4]..[117,3024+65])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[116,2989+8]..[116,2989+14])
                                  Ppat_var "source" (src/lexer.mll[116,2989+8]..[116,2989+14])
                                expression (src/lexer.mll[116,2989+17]..[116,2989+31])
                                  Pexp_constant PConst_string("(raise _eRR)",(src/lexer.mll[116,2989+18]..[116,2989+30]),None)
                            ]
                            expression (src/lexer.mll[117,3024+4]..[117,3024+65])
                              Pexp_apply
                              expression (src/lexer.mll[117,3024+4]..[117,3024+21])
                                Pexp_ident "Bytes.blit_string" (src/lexer.mll[117,3024+4]..[117,3024+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[117,3024+22]..[117,3024+28])
                                    Pexp_ident "source" (src/lexer.mll[117,3024+22]..[117,3024+28])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[117,3024+29]..[117,3024+30])
                                    Pexp_constant PConst_int (0,None)
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[117,3024+31]..[117,3024+38])
                                    Pexp_ident "content" (src/lexer.mll[117,3024+31]..[117,3024+38])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[117,3024+39]..[117,3024+42])
                                    Pexp_ident "ofs" (src/lexer.mll[117,3024+39]..[117,3024+42])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[117,3024+43]..[117,3024+65])
                                    Pexp_apply
                                    expression (src/lexer.mll[117,3024+44]..[117,3024+57])
                                      Pexp_ident "String.length" (src/lexer.mll[117,3024+44]..[117,3024+57])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[117,3024+58]..[117,3024+64])
                                          Pexp_ident "source" (src/lexer.mll[117,3024+58]..[117,3024+64])
                                    ]
                              ]
                <def>
                  pattern (src/lexer.mll[118,3090+6]..[118,3090+13])
                    Ppat_var "keyword" (src/lexer.mll[118,3090+6]..[118,3090+13])
                  expression (src/lexer.mll[119,3106+4]..[119,3106+20])
                    Pexp_construct "Some" (src/lexer.mll[119,3106+4]..[119,3106+8])
                    Some
                      expression (src/lexer.mll[119,3106+9]..[119,3106+20])
                        Pexp_construct "SyntaxError" (src/lexer.mll[119,3106+9]..[119,3106+20])
                        None
                <def>
                  pattern (src/lexer.mll[120,3127+6]..[120,3127+9])
                    Ppat_var "oid" (src/lexer.mll[120,3127+6]..[120,3127+9])
                  expression (src/lexer.mll[121,3139+4]..[121,3139+8])
                    Pexp_construct "None" (src/lexer.mll[121,3139+4]..[121,3139+8])
                    None
              ]
              expression (src/lexer.mll[123,3153+2]..[123,3153+41])
                Pexp_record
                [
                  "pos" (src/lexer.mll[123,3153+4]..[123,3153+7]) ghost
                    expression (src/lexer.mll[123,3153+4]..[123,3153+7])
                      Pexp_ident "pos" (src/lexer.mll[123,3153+4]..[123,3153+7])
                  "check" (src/lexer.mll[123,3153+9]..[123,3153+14]) ghost
                    expression (src/lexer.mll[123,3153+9]..[123,3153+14])
                      Pexp_ident "check" (src/lexer.mll[123,3153+9]..[123,3153+14])
                  "transform" (src/lexer.mll[123,3153+16]..[123,3153+25]) ghost
                    expression (src/lexer.mll[123,3153+16]..[123,3153+25])
                      Pexp_ident "transform" (src/lexer.mll[123,3153+16]..[123,3153+25])
                  "keyword" (src/lexer.mll[123,3153+27]..[123,3153+34]) ghost
                    expression (src/lexer.mll[123,3153+27]..[123,3153+34])
                      Pexp_ident "keyword" (src/lexer.mll[123,3153+27]..[123,3153+34])
                  "oid" (src/lexer.mll[123,3153+36]..[123,3153+39]) ghost
                    expression (src/lexer.mll[123,3153+36]..[123,3153+39])
                      Pexp_ident "oid" (src/lexer.mll[123,3153+36]..[123,3153+39])
                ]
                None
            core_type (src/lexer.mll[108,2749+22]..[108,2749+29])
              Ptyp_constr "monster" (src/lexer.mll[108,2749+22]..[108,2749+29])
              []
    ]
  structure_item (src/lexer.mll[132,3571+0]..[145,4179+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[132,3571+4]..[132,3571+16])
          Ppat_var "check_dollar" (src/lexer.mll[132,3571+4]..[132,3571+16])
        expression (src/lexer.mll[132,3571+17]..[145,4179+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[132,3571+17]..[132,3571+20])
            Ppat_var "pos" (src/lexer.mll[132,3571+17]..[132,3571+20])
          expression (src/lexer.mll[132,3571+21]..[145,4179+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[132,3571+21]..[132,3571+22])
              Ppat_var "i" (src/lexer.mll[132,3571+21]..[132,3571+22])
            expression (src/lexer.mll[132,3571+23]..[145,4179+8])
              Pexp_constraint
              expression (src/lexer.mll[132,3571+33]..[145,4179+8])
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.mll[132,3571+37]..[132,3571+44])
                  Ppat_var "dollars" (src/lexer.mll[132,3571+37]..[132,3571+44])
                expression (src/lexer.mll[132,3571+45]..[145,4179+8]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/lexer.mll[132,3571+45]..[132,3571+54])
                    Ppat_var "producers" (src/lexer.mll[132,3571+45]..[132,3571+54])
                  expression (src/lexer.mll[134,3669+2]..[145,4179+8])
                    Pexp_sequence
                    expression (src/lexer.mll[134,3669+2]..[135,3730+61])
                      Pexp_ifthenelse
                      expression (src/lexer.mll[134,3669+5]..[134,3669+55])
                        Pexp_apply
                        expression (src/lexer.mll[134,3669+5]..[134,3669+8])
                          Pexp_ident "not" (src/lexer.mll[134,3669+5]..[134,3669+8])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[134,3669+9]..[134,3669+55])
                              Pexp_apply
                              expression (src/lexer.mll[134,3669+21]..[134,3669+23])
                                Pexp_ident "&&" (src/lexer.mll[134,3669+21]..[134,3669+23])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[134,3669+10]..[134,3669+20])
                                    Pexp_apply
                                    expression (src/lexer.mll[134,3669+12]..[134,3669+14])
                                      Pexp_ident "<=" (src/lexer.mll[134,3669+12]..[134,3669+14])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[134,3669+10]..[134,3669+11])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[134,3669+15]..[134,3669+20])
                                          Pexp_apply
                                          expression (src/lexer.mll[134,3669+17]..[134,3669+18])
                                            Pexp_ident "-" (src/lexer.mll[134,3669+17]..[134,3669+18])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[134,3669+15]..[134,3669+16])
                                                Pexp_ident "i" (src/lexer.mll[134,3669+15]..[134,3669+16])
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[134,3669+19]..[134,3669+20])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[134,3669+24]..[134,3669+54])
                                    Pexp_apply
                                    expression (src/lexer.mll[134,3669+30]..[134,3669+31])
                                      Pexp_ident "<" (src/lexer.mll[134,3669+30]..[134,3669+31])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[134,3669+24]..[134,3669+29])
                                          Pexp_apply
                                          expression (src/lexer.mll[134,3669+26]..[134,3669+27])
                                            Pexp_ident "-" (src/lexer.mll[134,3669+26]..[134,3669+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[134,3669+24]..[134,3669+25])
                                                Pexp_ident "i" (src/lexer.mll[134,3669+24]..[134,3669+25])
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[134,3669+28]..[134,3669+29])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[134,3669+32]..[134,3669+54])
                                          Pexp_apply
                                          expression (src/lexer.mll[134,3669+32]..[134,3669+44])
                                            Pexp_ident "Array.length" (src/lexer.mll[134,3669+32]..[134,3669+44])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[134,3669+45]..[134,3669+54])
                                                Pexp_ident "producers" (src/lexer.mll[134,3669+45]..[134,3669+54])
                                          ]
                                    ]
                              ]
                        ]
                      expression (src/lexer.mll[135,3730+4]..[135,3730+61])
                        Pexp_apply
                        expression (src/lexer.mll[135,3730+4]..[135,3730+15])
                          Pexp_ident "Error.error" (src/lexer.mll[135,3730+4]..[135,3730+15])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[135,3730+16]..[135,3730+21])
                              Pexp_construct "::" (src/lexer.mll[135,3730+17]..[135,3730+21]) ghost
                              Some
                                expression (src/lexer.mll[135,3730+17]..[135,3730+21]) ghost
                                  Pexp_tuple
                                  [
                                    expression (src/lexer.mll[135,3730+17]..[135,3730+20])
                                      Pexp_ident "pos" (src/lexer.mll[135,3730+17]..[135,3730+20])
                                    expression (src/lexer.mll[135,3730+20]..[135,3730+21]) ghost
                                      Pexp_construct "[]" (src/lexer.mll[135,3730+20]..[135,3730+21]) ghost
                                      None
                                  ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[135,3730+22]..[135,3730+59])
                              Pexp_constant PConst_string("$%d refers to a nonexistent symbol.",(src/lexer.mll[135,3730+23]..[135,3730+58]),None)
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[135,3730+60]..[135,3730+61])
                              Pexp_ident "i" (src/lexer.mll[135,3730+60]..[135,3730+61])
                        ]
                      None
                    expression (src/lexer.mll[137,3850+2]..[145,4179+8])
                      Pexp_sequence
                      expression (src/lexer.mll[137,3850+2]..[139,3965+3])
                        Pexp_apply
                        expression (src/lexer.mll[137,3850+20]..[137,3850+22])
                          Pexp_ident "|>" (src/lexer.mll[137,3850+20]..[137,3850+22])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[137,3850+2]..[137,3850+19])
                              Pexp_apply
                              expression (src/lexer.mll[137,3850+2]..[137,3850+19]) ghost
                                Pexp_ident "Array.get" (src/lexer.mll[137,3850+2]..[137,3850+19]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[137,3850+2]..[137,3850+11])
                                    Pexp_ident "producers" (src/lexer.mll[137,3850+2]..[137,3850+11])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[137,3850+13]..[137,3850+18])
                                    Pexp_apply
                                    expression (src/lexer.mll[137,3850+15]..[137,3850+16])
                                      Pexp_ident "-" (src/lexer.mll[137,3850+15]..[137,3850+16])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[137,3850+13]..[137,3850+14])
                                          Pexp_ident "i" (src/lexer.mll[137,3850+13]..[137,3850+14])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[137,3850+17]..[137,3850+18])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[137,3850+23]..[139,3965+3])
                              Pexp_apply
                              expression (src/lexer.mll[137,3850+23]..[137,3850+34])
                                Pexp_ident "Option.iter" (src/lexer.mll[137,3850+23]..[137,3850+34])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[137,3850+35]..[139,3965+3])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/lexer.mll[137,3850+40]..[137,3850+41])
                                      Ppat_var "x" (src/lexer.mll[137,3850+40]..[137,3850+41])
                                    expression (src/lexer.mll[138,3895+4]..[138,3895+69])
                                      Pexp_apply
                                      expression (src/lexer.mll[138,3895+4]..[138,3895+15])
                                        Pexp_ident "Error.error" (src/lexer.mll[138,3895+4]..[138,3895+15])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[138,3895+16]..[138,3895+21])
                                            Pexp_construct "::" (src/lexer.mll[138,3895+17]..[138,3895+21]) ghost
                                            Some
                                              expression (src/lexer.mll[138,3895+17]..[138,3895+21]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (src/lexer.mll[138,3895+17]..[138,3895+20])
                                                    Pexp_ident "pos" (src/lexer.mll[138,3895+17]..[138,3895+20])
                                                  expression (src/lexer.mll[138,3895+20]..[138,3895+21]) ghost
                                                    Pexp_construct "[]" (src/lexer.mll[138,3895+20]..[138,3895+21]) ghost
                                                    None
                                                ]
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[138,3895+22]..[138,3895+65])
                                            Pexp_constant PConst_string("please do not say: $%d. Instead, say: %s.",(src/lexer.mll[138,3895+23]..[138,3895+64]),None)
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[138,3895+66]..[138,3895+67])
                                            Pexp_ident "i" (src/lexer.mll[138,3895+66]..[138,3895+67])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[138,3895+68]..[138,3895+69])
                                            Pexp_ident "x" (src/lexer.mll[138,3895+68]..[138,3895+69])
                                      ]
                              ]
                        ]
                      expression (src/lexer.mll[141,4016+2]..[145,4179+8])
                        Pexp_match
                        expression (src/lexer.mll[141,4016+8]..[141,4016+15])
                          Pexp_ident "dollars" (src/lexer.mll[141,4016+8]..[141,4016+15])
                        [
                          <case>
                            pattern (src/lexer.mll[142,4037+4]..[142,4037+30])
                              Ppat_construct "Settings.DollarsDisallowed" (src/lexer.mll[142,4037+4]..[142,4037+30])
                              None
                            expression (src/lexer.mll[143,4071+6]..[143,4071+76])
                              Pexp_apply
                              expression (src/lexer.mll[143,4071+6]..[143,4071+17])
                                Pexp_ident "Error.error" (src/lexer.mll[143,4071+6]..[143,4071+17])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[143,4071+18]..[143,4071+23])
                                    Pexp_construct "::" (src/lexer.mll[143,4071+19]..[143,4071+23]) ghost
                                    Some
                                      expression (src/lexer.mll[143,4071+19]..[143,4071+23]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[143,4071+19]..[143,4071+22])
                                            Pexp_ident "pos" (src/lexer.mll[143,4071+19]..[143,4071+22])
                                          expression (src/lexer.mll[143,4071+22]..[143,4071+23]) ghost
                                            Pexp_construct "[]" (src/lexer.mll[143,4071+22]..[143,4071+23]) ghost
                                            None
                                        ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[143,4071+24]..[143,4071+74])
                                    Pexp_constant PConst_string("please do not use $%d. Instead, name this value.",(src/lexer.mll[143,4071+25]..[143,4071+73]),None)
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[143,4071+75]..[143,4071+76])
                                    Pexp_ident "i" (src/lexer.mll[143,4071+75]..[143,4071+76])
                              ]
                          <case>
                            pattern (src/lexer.mll[144,4148+4]..[144,4148+27])
                              Ppat_construct "Settings.DollarsAllowed" (src/lexer.mll[144,4148+4]..[144,4148+27])
                              None
                            expression (src/lexer.mll[145,4179+6]..[145,4179+8])
                              Pexp_construct "()" (src/lexer.mll[145,4179+6]..[145,4179+8])
                              None
                        ]
              core_type (src/lexer.mll[132,3571+25]..[132,3571+30])
                Ptyp_constr "check" (src/lexer.mll[132,3571+25]..[132,3571+30])
                []
    ]
  structure_item (src/lexer.mll[150,4302+0]..[152,4416+60])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[150,4302+4]..[150,4302+18])
          Ppat_var "check_producer" (src/lexer.mll[150,4302+4]..[150,4302+18])
        expression (src/lexer.mll[150,4302+19]..[152,4416+60]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[150,4302+19]..[150,4302+22])
            Ppat_var "pos" (src/lexer.mll[150,4302+19]..[150,4302+22])
          expression (src/lexer.mll[150,4302+23]..[152,4416+60]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[150,4302+23]..[150,4302+24])
              Ppat_var "x" (src/lexer.mll[150,4302+23]..[150,4302+24])
            expression (src/lexer.mll[150,4302+25]..[152,4416+60])
              Pexp_constraint
              expression (src/lexer.mll[150,4302+35]..[152,4416+60])
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.mll[150,4302+39]..[150,4302+40])
                  Ppat_any
                expression (src/lexer.mll[150,4302+41]..[152,4416+60]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/lexer.mll[150,4302+41]..[150,4302+50])
                    Ppat_var "producers" (src/lexer.mll[150,4302+41]..[150,4302+50])
                  expression (src/lexer.mll[151,4356+2]..[152,4416+60])
                    Pexp_ifthenelse
                    expression (src/lexer.mll[151,4356+5]..[151,4356+54])
                      Pexp_apply
                      expression (src/lexer.mll[151,4356+5]..[151,4356+8])
                        Pexp_ident "not" (src/lexer.mll[151,4356+5]..[151,4356+8])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[151,4356+9]..[151,4356+54])
                            Pexp_apply
                            expression (src/lexer.mll[151,4356+10]..[151,4356+18])
                              Pexp_ident "List.mem" (src/lexer.mll[151,4356+10]..[151,4356+18])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[151,4356+19]..[151,4356+27])
                                  Pexp_construct "Some" (src/lexer.mll[151,4356+20]..[151,4356+24])
                                  Some
                                    expression (src/lexer.mll[151,4356+25]..[151,4356+26])
                                      Pexp_ident "x" (src/lexer.mll[151,4356+25]..[151,4356+26])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[151,4356+28]..[151,4356+53])
                                  Pexp_apply
                                  expression (src/lexer.mll[151,4356+29]..[151,4356+42])
                                    Pexp_ident "Array.to_list" (src/lexer.mll[151,4356+29]..[151,4356+42])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[151,4356+43]..[151,4356+52])
                                        Pexp_ident "producers" (src/lexer.mll[151,4356+43]..[151,4356+52])
                                  ]
                            ]
                      ]
                    expression (src/lexer.mll[152,4416+4]..[152,4416+60])
                      Pexp_apply
                      expression (src/lexer.mll[152,4416+4]..[152,4416+15])
                        Pexp_ident "Error.error" (src/lexer.mll[152,4416+4]..[152,4416+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[152,4416+16]..[152,4416+21])
                            Pexp_construct "::" (src/lexer.mll[152,4416+17]..[152,4416+21]) ghost
                            Some
                              expression (src/lexer.mll[152,4416+17]..[152,4416+21]) ghost
                                Pexp_tuple
                                [
                                  expression (src/lexer.mll[152,4416+17]..[152,4416+20])
                                    Pexp_ident "pos" (src/lexer.mll[152,4416+17]..[152,4416+20])
                                  expression (src/lexer.mll[152,4416+20]..[152,4416+21]) ghost
                                    Pexp_construct "[]" (src/lexer.mll[152,4416+20]..[152,4416+21]) ghost
                                    None
                                ]
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[152,4416+22]..[152,4416+58])
                            Pexp_constant PConst_string("%s refers to a nonexistent symbol.",(src/lexer.mll[152,4416+23]..[152,4416+57]),None)
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[152,4416+59]..[152,4416+60])
                            Pexp_ident "x" (src/lexer.mll[152,4416+59]..[152,4416+60])
                      ]
                    None
              core_type (src/lexer.mll[150,4302+27]..[150,4302+32])
                Ptyp_constr "check" (src/lexer.mll[150,4302+27]..[150,4302+32])
                []
    ]
  structure_item (src/lexer.mll[158,4583+0]..[170,4941+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[158,4583+4]..[158,4583+10])
          Ppat_var "dollar" (src/lexer.mll[158,4583+4]..[158,4583+10])
        expression (src/lexer.mll[158,4583+11]..[170,4941+41]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[158,4583+11]..[158,4583+14])
            Ppat_var "pos" (src/lexer.mll[158,4583+11]..[158,4583+14])
          expression (src/lexer.mll[158,4583+15]..[170,4941+41]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[158,4583+15]..[158,4583+16])
              Ppat_var "i" (src/lexer.mll[158,4583+15]..[158,4583+16])
            expression (src/lexer.mll[158,4583+17]..[170,4941+41])
              Pexp_constraint
              expression (src/lexer.mll[159,4612+2]..[170,4941+41])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[159,4612+6]..[159,4612+11])
                      Ppat_var "check" (src/lexer.mll[159,4612+6]..[159,4612+11])
                    core_type (src/lexer.mll[159,4612+14]..[159,4612+19])
                      Ptyp_constr "check" (src/lexer.mll[159,4612+14]..[159,4612+19])
                      []
                    expression (src/lexer.mll[159,4612+22]..[159,4612+40])
                      Pexp_apply
                      expression (src/lexer.mll[159,4612+22]..[159,4612+34])
                        Pexp_ident "check_dollar" (src/lexer.mll[159,4612+22]..[159,4612+34])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[159,4612+35]..[159,4612+38])
                            Pexp_ident "pos" (src/lexer.mll[159,4612+35]..[159,4612+38])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[159,4612+39]..[159,4612+40])
                            Pexp_ident "i" (src/lexer.mll[159,4612+39]..[159,4612+40])
                      ]
                  <def>
                    pattern (src/lexer.mll[160,4653+6]..[160,4653+15])
                      Ppat_var "transform" (src/lexer.mll[160,4653+6]..[160,4653+15])
                    expression (src/lexer.mll[160,4653+16]..[164,4831+33]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/lexer.mll[160,4653+16]..[160,4653+20])
                        Ppat_var "ofs1" (src/lexer.mll[160,4653+16]..[160,4653+20])
                      expression (src/lexer.mll[160,4653+21]..[164,4831+33]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/lexer.mll[160,4653+21]..[160,4653+28])
                          Ppat_var "content" (src/lexer.mll[160,4653+21]..[160,4653+28])
                        expression (src/lexer.mll[162,4755+4]..[164,4831+33])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[162,4755+8]..[162,4755+11])
                                Ppat_var "pos" (src/lexer.mll[162,4755+8]..[162,4755+11])
                              expression (src/lexer.mll[162,4755+14]..[162,4755+35])
                                Pexp_apply
                                expression (src/lexer.mll[162,4755+14]..[162,4755+31])
                                  Pexp_ident "start_of_position" (src/lexer.mll[162,4755+14]..[162,4755+31])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[162,4755+32]..[162,4755+35])
                                      Pexp_ident "pos" (src/lexer.mll[162,4755+32]..[162,4755+35])
                                ]
                          ]
                          expression (src/lexer.mll[163,4794+4]..[164,4831+33])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[163,4794+8]..[163,4794+11])
                                  Ppat_var "ofs" (src/lexer.mll[163,4794+8]..[163,4794+11])
                                expression (src/lexer.mll[163,4794+14]..[163,4794+33])
                                  Pexp_apply
                                  expression (src/lexer.mll[163,4794+27]..[163,4794+28])
                                    Pexp_ident "-" (src/lexer.mll[163,4794+27]..[163,4794+28])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[163,4794+14]..[163,4794+26])
                                        Pexp_field
                                        expression (src/lexer.mll[163,4794+14]..[163,4794+17])
                                          Pexp_ident "pos" (src/lexer.mll[163,4794+14]..[163,4794+17])
                                        "pos_cnum" (src/lexer.mll[163,4794+18]..[163,4794+26])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[163,4794+29]..[163,4794+33])
                                        Pexp_ident "ofs1" (src/lexer.mll[163,4794+29]..[163,4794+33])
                                  ]
                            ]
                            expression (src/lexer.mll[164,4831+4]..[164,4831+33])
                              Pexp_apply
                              expression (src/lexer.mll[164,4831+4]..[164,4831+13])
                                Pexp_ident "overwrite" (src/lexer.mll[164,4831+4]..[164,4831+13])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[164,4831+14]..[164,4831+21])
                                    Pexp_ident "content" (src/lexer.mll[164,4831+14]..[164,4831+21])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[164,4831+22]..[164,4831+25])
                                    Pexp_ident "ofs" (src/lexer.mll[164,4831+22]..[164,4831+25])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[164,4831+26]..[164,4831+29])
                                    Pexp_constant PConst_char 24
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[164,4831+30]..[164,4831+33])
                                    Pexp_constant PConst_char 5f
                              ]
                  <def>
                    pattern (src/lexer.mll[165,4865+6]..[165,4865+13])
                      Ppat_var "keyword" (src/lexer.mll[165,4865+6]..[165,4865+13])
                    expression (src/lexer.mll[166,4881+4]..[166,4881+8])
                      Pexp_construct "None" (src/lexer.mll[166,4881+4]..[166,4881+8])
                      None
                  <def>
                    pattern (src/lexer.mll[167,4890+6]..[167,4890+9])
                      Ppat_var "oid" (src/lexer.mll[167,4890+6]..[167,4890+9])
                    expression (src/lexer.mll[168,4902+4]..[168,4902+33])
                      Pexp_construct "Some" (src/lexer.mll[168,4902+4]..[168,4902+8])
                      Some
                        expression (src/lexer.mll[168,4902+9]..[168,4902+33])
                          Pexp_apply
                          expression (src/lexer.mll[168,4902+10]..[168,4902+24])
                            Pexp_ident "Printf.sprintf" (src/lexer.mll[168,4902+10]..[168,4902+24])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[168,4902+25]..[168,4902+30])
                                Pexp_constant PConst_string("_%d",(src/lexer.mll[168,4902+26]..[168,4902+29]),None)
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[168,4902+31]..[168,4902+32])
                                Pexp_ident "i" (src/lexer.mll[168,4902+31]..[168,4902+32])
                          ]
                ]
                expression (src/lexer.mll[170,4941+2]..[170,4941+41])
                  Pexp_record
                  [
                    "pos" (src/lexer.mll[170,4941+4]..[170,4941+7]) ghost
                      expression (src/lexer.mll[170,4941+4]..[170,4941+7])
                        Pexp_ident "pos" (src/lexer.mll[170,4941+4]..[170,4941+7])
                    "check" (src/lexer.mll[170,4941+9]..[170,4941+14]) ghost
                      expression (src/lexer.mll[170,4941+9]..[170,4941+14])
                        Pexp_ident "check" (src/lexer.mll[170,4941+9]..[170,4941+14])
                    "transform" (src/lexer.mll[170,4941+16]..[170,4941+25]) ghost
                      expression (src/lexer.mll[170,4941+16]..[170,4941+25])
                        Pexp_ident "transform" (src/lexer.mll[170,4941+16]..[170,4941+25])
                    "keyword" (src/lexer.mll[170,4941+27]..[170,4941+34]) ghost
                      expression (src/lexer.mll[170,4941+27]..[170,4941+34])
                        Pexp_ident "keyword" (src/lexer.mll[170,4941+27]..[170,4941+34])
                    "oid" (src/lexer.mll[170,4941+36]..[170,4941+39]) ghost
                      expression (src/lexer.mll[170,4941+36]..[170,4941+39])
                        Pexp_ident "oid" (src/lexer.mll[170,4941+36]..[170,4941+39])
                  ]
                  None
              core_type (src/lexer.mll[158,4583+19]..[158,4583+26])
                Ptyp_constr "monster" (src/lexer.mll[158,4583+19]..[158,4583+26])
                []
    ]
  structure_item (src/lexer.mll[176,5127+0]..[246,7158+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[176,5127+4]..[176,5127+12])
          Ppat_var "position" (src/lexer.mll[176,5127+4]..[176,5127+12])
        expression (src/lexer.mll[176,5127+13]..[246,7158+41]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[176,5127+13]..[176,5127+16])
            Ppat_var "pos" (src/lexer.mll[176,5127+13]..[176,5127+16])
          expression (src/lexer.mll[177,5144+2]..[246,7158+41]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[177,5144+2]..[177,5144+18])
              Ppat_constraint
              pattern (src/lexer.mll[177,5144+3]..[177,5144+8])
                Ppat_var "where" (src/lexer.mll[177,5144+3]..[177,5144+8])
              core_type (src/lexer.mll[177,5144+11]..[177,5144+17])
                Ptyp_constr "string" (src/lexer.mll[177,5144+11]..[177,5144+17])
                []
            expression (src/lexer.mll[178,5163+2]..[246,7158+41]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.mll[178,5163+2]..[178,5163+19])
                Ppat_constraint
                pattern (src/lexer.mll[178,5163+3]..[178,5163+9])
                  Ppat_var "flavor" (src/lexer.mll[178,5163+3]..[178,5163+9])
                core_type (src/lexer.mll[178,5163+12]..[178,5163+18])
                  Ptyp_constr "string" (src/lexer.mll[178,5163+12]..[178,5163+18])
                  []
              expression (src/lexer.mll[179,5183+2]..[246,7158+41]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.mll[179,5183+2]..[179,5183+21])
                  Ppat_constraint
                  pattern (src/lexer.mll[179,5183+3]..[179,5183+4])
                    Ppat_var "i" (src/lexer.mll[179,5183+3]..[179,5183+4])
                  core_type (src/lexer.mll[179,5183+7]..[179,5183+20])
                    Ptyp_constr "option" (src/lexer.mll[179,5183+14]..[179,5183+20])
                    [
                      core_type (src/lexer.mll[179,5183+7]..[179,5183+13])
                        Ptyp_constr "string" (src/lexer.mll[179,5183+7]..[179,5183+13])
                        []
                    ]
                expression (src/lexer.mll[179,5183+22]..[246,7158+41]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/lexer.mll[179,5183+22]..[179,5183+41])
                    Ppat_constraint
                    pattern (src/lexer.mll[179,5183+23]..[179,5183+24])
                      Ppat_var "x" (src/lexer.mll[179,5183+23]..[179,5183+24])
                    core_type (src/lexer.mll[179,5183+27]..[179,5183+40])
                      Ptyp_constr "option" (src/lexer.mll[179,5183+34]..[179,5183+40])
                      [
                        core_type (src/lexer.mll[179,5183+27]..[179,5183+33])
                          Ptyp_constr "string" (src/lexer.mll[179,5183+27]..[179,5183+33])
                          []
                      ]
                  expression (src/lexer.mll[181,5227+2]..[246,7158+41])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[181,5227+6]..[181,5227+24])
                          Ppat_var "check_no_parameter" (src/lexer.mll[181,5227+6]..[181,5227+24])
                        expression (src/lexer.mll[181,5227+25]..[183,5292+71]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/lexer.mll[181,5227+25]..[181,5227+27])
                            Ppat_construct "()" (src/lexer.mll[181,5227+25]..[181,5227+27])
                            None
                          expression (src/lexer.mll[182,5257+4]..[183,5292+71])
                            Pexp_ifthenelse
                            expression (src/lexer.mll[182,5257+7]..[182,5257+29])
                              Pexp_apply
                              expression (src/lexer.mll[182,5257+17]..[182,5257+19])
                                Pexp_ident "||" (src/lexer.mll[182,5257+17]..[182,5257+19])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[182,5257+7]..[182,5257+16])
                                    Pexp_apply
                                    expression (src/lexer.mll[182,5257+9]..[182,5257+11])
                                      Pexp_ident "<>" (src/lexer.mll[182,5257+9]..[182,5257+11])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[182,5257+7]..[182,5257+8])
                                          Pexp_ident "i" (src/lexer.mll[182,5257+7]..[182,5257+8])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[182,5257+12]..[182,5257+16])
                                          Pexp_construct "None" (src/lexer.mll[182,5257+12]..[182,5257+16])
                                          None
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[182,5257+20]..[182,5257+29])
                                    Pexp_apply
                                    expression (src/lexer.mll[182,5257+22]..[182,5257+24])
                                      Pexp_ident "<>" (src/lexer.mll[182,5257+22]..[182,5257+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[182,5257+20]..[182,5257+21])
                                          Pexp_ident "x" (src/lexer.mll[182,5257+20]..[182,5257+21])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[182,5257+25]..[182,5257+29])
                                          Pexp_construct "None" (src/lexer.mll[182,5257+25]..[182,5257+29])
                                          None
                                    ]
                              ]
                            expression (src/lexer.mll[183,5292+6]..[183,5292+71])
                              Pexp_apply
                              expression (src/lexer.mll[183,5292+6]..[183,5292+17])
                                Pexp_ident "Error.error" (src/lexer.mll[183,5292+6]..[183,5292+17])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[183,5292+18]..[183,5292+23])
                                    Pexp_construct "::" (src/lexer.mll[183,5292+19]..[183,5292+23]) ghost
                                    Some
                                      expression (src/lexer.mll[183,5292+19]..[183,5292+23]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[183,5292+19]..[183,5292+22])
                                            Pexp_ident "pos" (src/lexer.mll[183,5292+19]..[183,5292+22])
                                          expression (src/lexer.mll[183,5292+22]..[183,5292+23]) ghost
                                            Pexp_construct "[]" (src/lexer.mll[183,5292+22]..[183,5292+23]) ghost
                                            None
                                        ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[183,5292+24]..[183,5292+58])
                                    Pexp_constant PConst_string("$%s%s does not take a parameter.",(src/lexer.mll[183,5292+25]..[183,5292+57]),None)
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[183,5292+59]..[183,5292+64])
                                    Pexp_ident "where" (src/lexer.mll[183,5292+59]..[183,5292+64])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[183,5292+65]..[183,5292+71])
                                    Pexp_ident "flavor" (src/lexer.mll[183,5292+65]..[183,5292+71])
                              ]
                            None
                    ]
                    expression (src/lexer.mll[185,5369+2]..[246,7158+41])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[185,5369+6]..[185,5369+13])
                            Ppat_var "ofslpar" (src/lexer.mll[185,5369+6]..[185,5369+13])
                          expression (src/lexer.mll[186,5442+4]..[188,5502+5])
                            Pexp_apply
                            expression (src/lexer.mll[187,5476+24]..[187,5476+25])
                              Pexp_ident "+" (src/lexer.mll[187,5476+24]..[187,5476+25])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[186,5442+4]..[187,5476+23])
                                  Pexp_apply
                                  expression (src/lexer.mll[186,5442+6]..[186,5442+7])
                                    Pexp_ident "+" (src/lexer.mll[186,5442+6]..[186,5442+7])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[186,5442+4]..[186,5442+5])
                                        Pexp_constant PConst_int (1,None)
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[187,5476+4]..[187,5476+23])
                                        Pexp_apply
                                        expression (src/lexer.mll[187,5476+4]..[187,5476+17])
                                          Pexp_ident "String.length" (src/lexer.mll[187,5476+4]..[187,5476+17])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[187,5476+18]..[187,5476+23])
                                              Pexp_ident "where" (src/lexer.mll[187,5476+18]..[187,5476+23])
                                        ]
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[188,5502+4]..[188,5502+5])
                                  Pexp_constant PConst_int (3,None)
                            ]
                      ]
                      expression (src/lexer.mll[190,5549+2]..[246,7158+41])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[190,5549+6]..[190,5549+11])
                              Ppat_var "where" (src/lexer.mll[190,5549+6]..[190,5549+11])
                            expression (src/lexer.mll[191,5563+4]..[197,5766+35])
                              Pexp_match
                              expression (src/lexer.mll[191,5563+10]..[191,5563+15])
                                Pexp_ident "where" (src/lexer.mll[191,5563+10]..[191,5563+15])
                              [
                                <case>
                                  pattern (src/lexer.mll[192,5584+6]..[193,5604+9])
                                    Ppat_or
                                    pattern (src/lexer.mll[192,5584+6]..[192,5584+19])
                                      Ppat_constant PConst_string("symbolstart",(src/lexer.mll[192,5584+7]..[192,5584+18]),None)
                                    pattern (src/lexer.mll[193,5604+6]..[193,5604+9])
                                      Ppat_constant PConst_string("s",(src/lexer.mll[193,5604+7]..[193,5604+8]),None)
                                  expression (src/lexer.mll[193,5604+23]..[193,5604+61])
                                    Pexp_sequence
                                    expression (src/lexer.mll[193,5604+23]..[193,5604+43])
                                      Pexp_apply
                                      expression (src/lexer.mll[193,5604+23]..[193,5604+41])
                                        Pexp_ident "check_no_parameter" (src/lexer.mll[193,5604+23]..[193,5604+41])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[193,5604+41]..[193,5604+43])
                                            Pexp_construct "()" (src/lexer.mll[193,5604+41]..[193,5604+43])
                                            None
                                      ]
                                    expression (src/lexer.mll[193,5604+45]..[193,5604+61])
                                      Pexp_construct "WhereSymbolStart" (src/lexer.mll[193,5604+45]..[193,5604+61])
                                      None
                                <case>
                                  pattern (src/lexer.mll[194,5666+6]..[194,5666+13])
                                    Ppat_constant PConst_string("start",(src/lexer.mll[194,5666+7]..[194,5666+12]),None)
                                  expression (src/lexer.mll[194,5666+23]..[194,5666+33])
                                    Pexp_construct "WhereStart" (src/lexer.mll[194,5666+23]..[194,5666+33])
                                    None
                                <case>
                                  pattern (src/lexer.mll[195,5700+6]..[195,5700+11])
                                    Ppat_constant PConst_string("end",(src/lexer.mll[195,5700+7]..[195,5700+10]),None)
                                  expression (src/lexer.mll[195,5700+23]..[195,5700+31])
                                    Pexp_construct "WhereEnd" (src/lexer.mll[195,5700+23]..[195,5700+31])
                                    None
                                <case>
                                  pattern (src/lexer.mll[196,5732+6]..[196,5732+8])
                                    Ppat_constant PConst_string("",(src/lexer.mll[196,5732+7]..[196,5732+7]),None)
                                  expression (src/lexer.mll[196,5732+23]..[196,5732+33])
                                    Pexp_construct "WhereStart" (src/lexer.mll[196,5732+23]..[196,5732+33])
                                    None
                                <case>
                                  pattern (src/lexer.mll[197,5766+6]..[197,5766+7])
                                    Ppat_any
                                  expression (src/lexer.mll[197,5766+23]..[197,5766+35])
                                    Pexp_assert
                                    expression (src/lexer.mll[197,5766+30]..[197,5766+35])
                                      Pexp_construct "false" (src/lexer.mll[197,5766+30]..[197,5766+35])
                                      None
                              ]
                        ]
                        expression (src/lexer.mll[199,5807+2]..[246,7158+41])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[199,5807+6]..[199,5807+12])
                                Ppat_var "flavor" (src/lexer.mll[199,5807+6]..[199,5807+12])
                              expression (src/lexer.mll[200,5822+4]..[204,5938+29])
                                Pexp_match
                                expression (src/lexer.mll[200,5822+10]..[200,5822+16])
                                  Pexp_ident "flavor" (src/lexer.mll[200,5822+10]..[200,5822+16])
                                [
                                  <case>
                                    pattern (src/lexer.mll[201,5844+6]..[201,5844+11])
                                      Ppat_constant PConst_string("pos",(src/lexer.mll[201,5844+7]..[201,5844+10]),None)
                                    expression (src/lexer.mll[201,5844+17]..[201,5844+31])
                                      Pexp_construct "FlavorPosition" (src/lexer.mll[201,5844+17]..[201,5844+31])
                                      None
                                  <case>
                                    pattern (src/lexer.mll[202,5876+6]..[202,5876+11])
                                      Ppat_constant PConst_string("ofs",(src/lexer.mll[202,5876+7]..[202,5876+10]),None)
                                    expression (src/lexer.mll[202,5876+17]..[202,5876+29])
                                      Pexp_construct "FlavorOffset" (src/lexer.mll[202,5876+17]..[202,5876+29])
                                      None
                                  <case>
                                    pattern (src/lexer.mll[203,5906+6]..[203,5906+11])
                                      Ppat_constant PConst_string("loc",(src/lexer.mll[203,5906+7]..[203,5906+10]),None)
                                    expression (src/lexer.mll[203,5906+17]..[203,5906+31])
                                      Pexp_construct "FlavorLocation" (src/lexer.mll[203,5906+17]..[203,5906+31])
                                      None
                                  <case>
                                    pattern (src/lexer.mll[204,5938+6]..[204,5938+7])
                                      Ppat_any
                                    expression (src/lexer.mll[204,5938+17]..[204,5938+29])
                                      Pexp_assert
                                      expression (src/lexer.mll[204,5938+24]..[204,5938+29])
                                        Pexp_construct "false" (src/lexer.mll[204,5938+24]..[204,5938+29])
                                        None
                                ]
                          ]
                          expression (src/lexer.mll[206,5973+2]..[246,7158+41])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[206,5973+6]..[206,5973+20])
                                  Ppat_tuple
                                  [
                                    pattern (src/lexer.mll[206,5973+6]..[206,5973+13])
                                      Ppat_var "subject" (src/lexer.mll[206,5973+6]..[206,5973+13])
                                    pattern (src/lexer.mll[206,5973+15]..[206,5973+20])
                                      Ppat_var "check" (src/lexer.mll[206,5973+15]..[206,5973+20])
                                  ]
                                expression (src/lexer.mll[207,5996+4]..[223,6507+20])
                                  Pexp_match
                                  expression (src/lexer.mll[207,5996+10]..[207,5996+14])
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[207,5996+10]..[207,5996+11])
                                        Pexp_ident "i" (src/lexer.mll[207,5996+10]..[207,5996+11])
                                      expression (src/lexer.mll[207,5996+13]..[207,5996+14])
                                        Pexp_ident "x" (src/lexer.mll[207,5996+13]..[207,5996+14])
                                    ]
                                  [
                                    <case>
                                      pattern (src/lexer.mll[208,6016+6]..[208,6016+18])
                                        Ppat_tuple
                                        [
                                          pattern (src/lexer.mll[208,6016+6]..[208,6016+12])
                                            Ppat_construct "Some" (src/lexer.mll[208,6016+6]..[208,6016+10])
                                            Some
                                              []
                                              pattern (src/lexer.mll[208,6016+11]..[208,6016+12])
                                                Ppat_var "i" (src/lexer.mll[208,6016+11]..[208,6016+12])
                                          pattern (src/lexer.mll[208,6016+14]..[208,6016+18])
                                            Ppat_construct "None" (src/lexer.mll[208,6016+14]..[208,6016+18])
                                            None
                                        ]
                                      expression (src/lexer.mll[209,6038+8]..[215,6272+51])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[209,6038+12]..[209,6038+14])
                                              Ppat_var "ii" (src/lexer.mll[209,6038+12]..[209,6038+14])
                                            expression (src/lexer.mll[209,6038+17]..[209,6038+56])
                                              Pexp_apply
                                              expression (src/lexer.mll[209,6038+17]..[209,6038+30])
                                                Pexp_ident "int_of_string" (src/lexer.mll[209,6038+17]..[209,6038+30])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[209,6038+31]..[209,6038+54])
                                                    Pexp_apply
                                                    expression (src/lexer.mll[209,6038+32]..[209,6038+49])
                                                      Pexp_ident "start_of_position" (src/lexer.mll[209,6038+32]..[209,6038+49])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[209,6038+50]..[209,6038+53])
                                                          Pexp_ident "pos" (src/lexer.mll[209,6038+50]..[209,6038+53])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[209,6038+55]..[209,6038+56])
                                                    Pexp_ident "i" (src/lexer.mll[209,6038+55]..[209,6038+56])
                                              ]
                                        ]
                                        expression (src/lexer.mll[210,6098+8]..[215,6272+51])
                                          Pexp_ifthenelse
                                          expression (src/lexer.mll[210,6098+11]..[210,6098+37])
                                            Pexp_apply
                                            expression (src/lexer.mll[210,6098+18]..[210,6098+20])
                                              Pexp_ident "&&" (src/lexer.mll[210,6098+18]..[210,6098+20])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[210,6098+11]..[210,6098+17])
                                                  Pexp_apply
                                                  expression (src/lexer.mll[210,6098+14]..[210,6098+15])
                                                    Pexp_ident "=" (src/lexer.mll[210,6098+14]..[210,6098+15])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[210,6098+11]..[210,6098+13])
                                                        Pexp_ident "ii" (src/lexer.mll[210,6098+11]..[210,6098+13])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[210,6098+16]..[210,6098+17])
                                                        Pexp_constant PConst_int (0,None)
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[210,6098+21]..[210,6098+37])
                                                  Pexp_apply
                                                  expression (src/lexer.mll[210,6098+27]..[210,6098+28])
                                                    Pexp_ident "=" (src/lexer.mll[210,6098+27]..[210,6098+28])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[210,6098+21]..[210,6098+26])
                                                        Pexp_ident "where" (src/lexer.mll[210,6098+21]..[210,6098+26])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[210,6098+29]..[210,6098+37])
                                                        Pexp_construct "WhereEnd" (src/lexer.mll[210,6098+29]..[210,6098+37])
                                                        None
                                                  ]
                                            ]
                                          expression (src/lexer.mll[212,6171+10]..[212,6171+22])
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[212,6171+10]..[212,6171+16])
                                                Pexp_construct "Before" (src/lexer.mll[212,6171+10]..[212,6171+16])
                                                None
                                              expression (src/lexer.mll[212,6171+18]..[212,6171+22])
                                                Pexp_ident "none" (src/lexer.mll[212,6171+18]..[212,6171+22])
                                            ]
                                          Some
                                            expression (src/lexer.mll[215,6272+10]..[215,6272+51])
                                              Pexp_tuple
                                              [
                                                expression (src/lexer.mll[215,6272+10]..[215,6272+30])
                                                  Pexp_construct "RightNamed" (src/lexer.mll[215,6272+10]..[215,6272+20])
                                                  Some
                                                    expression (src/lexer.mll[215,6272+21]..[215,6272+30])
                                                      Pexp_apply
                                                      expression (src/lexer.mll[215,6272+26]..[215,6272+27])
                                                        Pexp_ident "^" (src/lexer.mll[215,6272+26]..[215,6272+27])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/lexer.mll[215,6272+22]..[215,6272+25])
                                                            Pexp_constant PConst_string("_",(src/lexer.mll[215,6272+23]..[215,6272+24]),None)
                                                        <arg>
                                                        Nolabel
                                                          expression (src/lexer.mll[215,6272+28]..[215,6272+29])
                                                            Pexp_ident "i" (src/lexer.mll[215,6272+28]..[215,6272+29])
                                                      ]
                                                expression (src/lexer.mll[215,6272+32]..[215,6272+51])
                                                  Pexp_apply
                                                  expression (src/lexer.mll[215,6272+32]..[215,6272+44])
                                                    Pexp_ident "check_dollar" (src/lexer.mll[215,6272+32]..[215,6272+44])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[215,6272+45]..[215,6272+48])
                                                        Pexp_ident "pos" (src/lexer.mll[215,6272+45]..[215,6272+48])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[215,6272+49]..[215,6272+51])
                                                        Pexp_ident "ii" (src/lexer.mll[215,6272+49]..[215,6272+51])
                                                  ]
                                              ]
                                    <case>
                                      pattern (src/lexer.mll[216,6324+6]..[216,6324+18])
                                        Ppat_tuple
                                        [
                                          pattern (src/lexer.mll[216,6324+6]..[216,6324+10])
                                            Ppat_construct "None" (src/lexer.mll[216,6324+6]..[216,6324+10])
                                            None
                                          pattern (src/lexer.mll[216,6324+12]..[216,6324+18])
                                            Ppat_construct "Some" (src/lexer.mll[216,6324+12]..[216,6324+16])
                                            Some
                                              []
                                              pattern (src/lexer.mll[216,6324+17]..[216,6324+18])
                                                Ppat_var "x" (src/lexer.mll[216,6324+17]..[216,6324+18])
                                        ]
                                      expression (src/lexer.mll[218,6375+8]..[218,6375+42])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[218,6375+8]..[218,6375+20])
                                            Pexp_construct "RightNamed" (src/lexer.mll[218,6375+8]..[218,6375+18])
                                            Some
                                              expression (src/lexer.mll[218,6375+19]..[218,6375+20])
                                                Pexp_ident "x" (src/lexer.mll[218,6375+19]..[218,6375+20])
                                          expression (src/lexer.mll[218,6375+22]..[218,6375+42])
                                            Pexp_apply
                                            expression (src/lexer.mll[218,6375+22]..[218,6375+36])
                                              Pexp_ident "check_producer" (src/lexer.mll[218,6375+22]..[218,6375+36])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[218,6375+37]..[218,6375+40])
                                                  Pexp_ident "pos" (src/lexer.mll[218,6375+37]..[218,6375+40])
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[218,6375+41]..[218,6375+42])
                                                  Pexp_ident "x" (src/lexer.mll[218,6375+41]..[218,6375+42])
                                            ]
                                        ]
                                    <case>
                                      pattern (src/lexer.mll[219,6418+6]..[219,6418+16])
                                        Ppat_tuple
                                        [
                                          pattern (src/lexer.mll[219,6418+6]..[219,6418+10])
                                            Ppat_construct "None" (src/lexer.mll[219,6418+6]..[219,6418+10])
                                            None
                                          pattern (src/lexer.mll[219,6418+12]..[219,6418+16])
                                            Ppat_construct "None" (src/lexer.mll[219,6418+12]..[219,6418+16])
                                            None
                                        ]
                                      expression (src/lexer.mll[221,6464+8]..[221,6464+18])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[221,6464+8]..[221,6464+12])
                                            Pexp_construct "Left" (src/lexer.mll[221,6464+8]..[221,6464+12])
                                            None
                                          expression (src/lexer.mll[221,6464+14]..[221,6464+18])
                                            Pexp_ident "none" (src/lexer.mll[221,6464+14]..[221,6464+18])
                                        ]
                                    <case>
                                      pattern (src/lexer.mll[222,6483+6]..[222,6483+20])
                                        Ppat_tuple
                                        [
                                          pattern (src/lexer.mll[222,6483+6]..[222,6483+12])
                                            Ppat_construct "Some" (src/lexer.mll[222,6483+6]..[222,6483+10])
                                            Some
                                              []
                                              pattern (src/lexer.mll[222,6483+11]..[222,6483+12])
                                                Ppat_any
                                          pattern (src/lexer.mll[222,6483+14]..[222,6483+20])
                                            Ppat_construct "Some" (src/lexer.mll[222,6483+14]..[222,6483+18])
                                            Some
                                              []
                                              pattern (src/lexer.mll[222,6483+19]..[222,6483+20])
                                                Ppat_any
                                        ]
                                      expression (src/lexer.mll[223,6507+8]..[223,6507+20])
                                        Pexp_assert
                                        expression (src/lexer.mll[223,6507+15]..[223,6507+20])
                                          Pexp_construct "false" (src/lexer.mll[223,6507+15]..[223,6507+20])
                                          None
                                  ]
                            ]
                            expression (src/lexer.mll[225,6533+2]..[246,7158+41])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[225,6533+6]..[225,6533+15])
                                    Ppat_var "transform" (src/lexer.mll[225,6533+6]..[225,6533+15])
                                  expression (src/lexer.mll[225,6533+16]..[239,7055+10]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/lexer.mll[225,6533+16]..[225,6533+20])
                                      Ppat_var "ofs1" (src/lexer.mll[225,6533+16]..[225,6533+20])
                                    expression (src/lexer.mll[225,6533+21]..[239,7055+10]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/lexer.mll[225,6533+21]..[225,6533+28])
                                        Ppat_var "content" (src/lexer.mll[225,6533+21]..[225,6533+28])
                                      expression (src/lexer.mll[226,6564+4]..[239,7055+10])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[226,6564+8]..[226,6564+11])
                                              Ppat_var "pos" (src/lexer.mll[226,6564+8]..[226,6564+11])
                                            expression (src/lexer.mll[226,6564+14]..[226,6564+35])
                                              Pexp_apply
                                              expression (src/lexer.mll[226,6564+14]..[226,6564+31])
                                                Pexp_ident "start_of_position" (src/lexer.mll[226,6564+14]..[226,6564+31])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[226,6564+32]..[226,6564+35])
                                                    Pexp_ident "pos" (src/lexer.mll[226,6564+32]..[226,6564+35])
                                              ]
                                        ]
                                        expression (src/lexer.mll[227,6603+4]..[239,7055+10])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[227,6603+8]..[227,6603+11])
                                                Ppat_var "ofs" (src/lexer.mll[227,6603+8]..[227,6603+11])
                                              expression (src/lexer.mll[227,6603+14]..[227,6603+33])
                                                Pexp_apply
                                                expression (src/lexer.mll[227,6603+27]..[227,6603+28])
                                                  Pexp_ident "-" (src/lexer.mll[227,6603+27]..[227,6603+28])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[227,6603+14]..[227,6603+26])
                                                      Pexp_field
                                                      expression (src/lexer.mll[227,6603+14]..[227,6603+17])
                                                        Pexp_ident "pos" (src/lexer.mll[227,6603+14]..[227,6603+17])
                                                      "pos_cnum" (src/lexer.mll[227,6603+18]..[227,6603+26])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[227,6603+29]..[227,6603+33])
                                                      Pexp_ident "ofs1" (src/lexer.mll[227,6603+29]..[227,6603+33])
                                                ]
                                          ]
                                          expression (src/lexer.mll[228,6640+4]..[239,7055+10])
                                            Pexp_sequence
                                            expression (src/lexer.mll[228,6640+4]..[228,6640+33])
                                              Pexp_apply
                                              expression (src/lexer.mll[228,6640+4]..[228,6640+13])
                                                Pexp_ident "overwrite" (src/lexer.mll[228,6640+4]..[228,6640+13])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[228,6640+14]..[228,6640+21])
                                                    Pexp_ident "content" (src/lexer.mll[228,6640+14]..[228,6640+21])
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[228,6640+22]..[228,6640+25])
                                                    Pexp_ident "ofs" (src/lexer.mll[228,6640+22]..[228,6640+25])
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[228,6640+26]..[228,6640+29])
                                                    Pexp_constant PConst_char 24
                                                <arg>
                                                Nolabel
                                                  expression (src/lexer.mll[228,6640+30]..[228,6640+33])
                                                    Pexp_constant PConst_char 5f
                                              ]
                                            expression (src/lexer.mll[229,6675+4]..[239,7055+10])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[229,6675+8]..[229,6675+15])
                                                    Ppat_var "ofslpar" (src/lexer.mll[229,6675+8]..[229,6675+15])
                                                  expression (src/lexer.mll[229,6675+18]..[229,6675+31])
                                                    Pexp_apply
                                                    expression (src/lexer.mll[229,6675+22]..[229,6675+23])
                                                      Pexp_ident "+" (src/lexer.mll[229,6675+22]..[229,6675+23])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[229,6675+18]..[229,6675+21])
                                                          Pexp_ident "ofs" (src/lexer.mll[229,6675+18]..[229,6675+21])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[229,6675+24]..[229,6675+31])
                                                          Pexp_ident "ofslpar" (src/lexer.mll[229,6675+24]..[229,6675+31])
                                                    ]
                                              ]
                                              expression (src/lexer.mll[230,6710+4]..[239,7055+10])
                                                Pexp_match
                                                expression (src/lexer.mll[230,6710+10]..[230,6710+14])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/lexer.mll[230,6710+10]..[230,6710+11])
                                                      Pexp_ident "i" (src/lexer.mll[230,6710+10]..[230,6710+11])
                                                    expression (src/lexer.mll[230,6710+13]..[230,6710+14])
                                                      Pexp_ident "x" (src/lexer.mll[230,6710+13]..[230,6710+14])
                                                  ]
                                                [
                                                  <case>
                                                    pattern (src/lexer.mll[231,6730+6]..[231,6730+18])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/lexer.mll[231,6730+6]..[231,6730+10])
                                                          Ppat_construct "None" (src/lexer.mll[231,6730+6]..[231,6730+10])
                                                          None
                                                        pattern (src/lexer.mll[231,6730+12]..[231,6730+18])
                                                          Ppat_construct "Some" (src/lexer.mll[231,6730+12]..[231,6730+16])
                                                          Some
                                                            []
                                                            pattern (src/lexer.mll[231,6730+17]..[231,6730+18])
                                                              Ppat_var "x" (src/lexer.mll[231,6730+17]..[231,6730+18])
                                                      ]
                                                    expression (src/lexer.mll[232,6752+8]..[233,6795+65])
                                                      Pexp_sequence
                                                      expression (src/lexer.mll[232,6752+8]..[232,6752+41])
                                                        Pexp_apply
                                                        expression (src/lexer.mll[232,6752+8]..[232,6752+17])
                                                          Pexp_ident "overwrite" (src/lexer.mll[232,6752+8]..[232,6752+17])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[232,6752+18]..[232,6752+25])
                                                              Pexp_ident "content" (src/lexer.mll[232,6752+18]..[232,6752+25])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[232,6752+26]..[232,6752+33])
                                                              Pexp_ident "ofslpar" (src/lexer.mll[232,6752+26]..[232,6752+33])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[232,6752+34]..[232,6752+37])
                                                              Pexp_constant PConst_char 28
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[232,6752+38]..[232,6752+41])
                                                              Pexp_constant PConst_char 5f
                                                        ]
                                                      expression (src/lexer.mll[233,6795+8]..[233,6795+65])
                                                        Pexp_apply
                                                        expression (src/lexer.mll[233,6795+8]..[233,6795+17])
                                                          Pexp_ident "overwrite" (src/lexer.mll[233,6795+8]..[233,6795+17])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[233,6795+18]..[233,6795+25])
                                                              Pexp_ident "content" (src/lexer.mll[233,6795+18]..[233,6795+25])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[233,6795+26]..[233,6795+57])
                                                              Pexp_apply
                                                              expression (src/lexer.mll[233,6795+39]..[233,6795+40])
                                                                Pexp_ident "+" (src/lexer.mll[233,6795+39]..[233,6795+40])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/lexer.mll[233,6795+27]..[233,6795+38])
                                                                    Pexp_apply
                                                                    expression (src/lexer.mll[233,6795+35]..[233,6795+36])
                                                                      Pexp_ident "+" (src/lexer.mll[233,6795+35]..[233,6795+36])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/lexer.mll[233,6795+27]..[233,6795+34])
  Pexp_ident "ofslpar" (src/lexer.mll[233,6795+27]..[233,6795+34])
                                                                      <arg>
                                                                      Nolabel
expression (src/lexer.mll[233,6795+37]..[233,6795+38])
  Pexp_constant PConst_int (1,None)
                                                                    ]
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/lexer.mll[233,6795+41]..[233,6795+56])
                                                                    Pexp_apply
                                                                    expression (src/lexer.mll[233,6795+41]..[233,6795+54])
                                                                      Pexp_ident "String.length" (src/lexer.mll[233,6795+41]..[233,6795+54])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/lexer.mll[233,6795+55]..[233,6795+56])
  Pexp_ident "x" (src/lexer.mll[233,6795+55]..[233,6795+56])
                                                                    ]
                                                              ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[233,6795+58]..[233,6795+61])
                                                              Pexp_constant PConst_char 29
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[233,6795+62]..[233,6795+65])
                                                              Pexp_constant PConst_char 5f
                                                        ]
                                                  <case>
                                                    pattern (src/lexer.mll[234,6861+6]..[234,6861+18])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/lexer.mll[234,6861+6]..[234,6861+12])
                                                          Ppat_construct "Some" (src/lexer.mll[234,6861+6]..[234,6861+10])
                                                          Some
                                                            []
                                                            pattern (src/lexer.mll[234,6861+11]..[234,6861+12])
                                                              Ppat_var "i" (src/lexer.mll[234,6861+11]..[234,6861+12])
                                                        pattern (src/lexer.mll[234,6861+14]..[234,6861+18])
                                                          Ppat_construct "None" (src/lexer.mll[234,6861+14]..[234,6861+18])
                                                          None
                                                      ]
                                                    expression (src/lexer.mll[235,6883+8]..[237,6975+65])
                                                      Pexp_sequence
                                                      expression (src/lexer.mll[235,6883+8]..[235,6883+41])
                                                        Pexp_apply
                                                        expression (src/lexer.mll[235,6883+8]..[235,6883+17])
                                                          Pexp_ident "overwrite" (src/lexer.mll[235,6883+8]..[235,6883+17])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[235,6883+18]..[235,6883+25])
                                                              Pexp_ident "content" (src/lexer.mll[235,6883+18]..[235,6883+25])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[235,6883+26]..[235,6883+33])
                                                              Pexp_ident "ofslpar" (src/lexer.mll[235,6883+26]..[235,6883+33])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[235,6883+34]..[235,6883+37])
                                                              Pexp_constant PConst_char 28
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[235,6883+38]..[235,6883+41])
                                                              Pexp_constant PConst_char 5f
                                                        ]
                                                      expression (src/lexer.mll[236,6926+8]..[237,6975+65])
                                                        Pexp_sequence
                                                        expression (src/lexer.mll[236,6926+8]..[236,6926+47])
                                                          Pexp_apply
                                                          expression (src/lexer.mll[236,6926+8]..[236,6926+17])
                                                            Pexp_ident "overwrite" (src/lexer.mll[236,6926+8]..[236,6926+17])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[236,6926+18]..[236,6926+25])
                                                                Pexp_ident "content" (src/lexer.mll[236,6926+18]..[236,6926+25])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[236,6926+26]..[236,6926+39])
                                                                Pexp_apply
                                                                expression (src/lexer.mll[236,6926+35]..[236,6926+36])
                                                                  Pexp_ident "+" (src/lexer.mll[236,6926+35]..[236,6926+36])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/lexer.mll[236,6926+27]..[236,6926+34])
                                                                      Pexp_ident "ofslpar" (src/lexer.mll[236,6926+27]..[236,6926+34])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/lexer.mll[236,6926+37]..[236,6926+38])
                                                                      Pexp_constant PConst_int (1,None)
                                                                ]
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[236,6926+40]..[236,6926+43])
                                                                Pexp_constant PConst_char 24
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[236,6926+44]..[236,6926+47])
                                                                Pexp_constant PConst_char 5f
                                                          ]
                                                        expression (src/lexer.mll[237,6975+8]..[237,6975+65])
                                                          Pexp_apply
                                                          expression (src/lexer.mll[237,6975+8]..[237,6975+17])
                                                            Pexp_ident "overwrite" (src/lexer.mll[237,6975+8]..[237,6975+17])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[237,6975+18]..[237,6975+25])
                                                                Pexp_ident "content" (src/lexer.mll[237,6975+18]..[237,6975+25])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[237,6975+26]..[237,6975+57])
                                                                Pexp_apply
                                                                expression (src/lexer.mll[237,6975+39]..[237,6975+40])
                                                                  Pexp_ident "+" (src/lexer.mll[237,6975+39]..[237,6975+40])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/lexer.mll[237,6975+27]..[237,6975+38])
                                                                      Pexp_apply
                                                                      expression (src/lexer.mll[237,6975+35]..[237,6975+36])
Pexp_ident "+" (src/lexer.mll[237,6975+35]..[237,6975+36])
                                                                      [
<arg>
Nolabel
  expression (src/lexer.mll[237,6975+27]..[237,6975+34])
    Pexp_ident "ofslpar" (src/lexer.mll[237,6975+27]..[237,6975+34])
<arg>
Nolabel
  expression (src/lexer.mll[237,6975+37]..[237,6975+38])
    Pexp_constant PConst_int (2,None)
                                                                      ]
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/lexer.mll[237,6975+41]..[237,6975+56])
                                                                      Pexp_apply
                                                                      expression (src/lexer.mll[237,6975+41]..[237,6975+54])
Pexp_ident "String.length" (src/lexer.mll[237,6975+41]..[237,6975+54])
                                                                      [
<arg>
Nolabel
  expression (src/lexer.mll[237,6975+55]..[237,6975+56])
    Pexp_ident "i" (src/lexer.mll[237,6975+55]..[237,6975+56])
                                                                      ]
                                                                ]
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[237,6975+58]..[237,6975+61])
                                                                Pexp_constant PConst_char 29
                                                            <arg>
                                                            Nolabel
                                                              expression (src/lexer.mll[237,6975+62]..[237,6975+65])
                                                                Pexp_constant PConst_char 5f
                                                          ]
                                                  <case>
                                                    pattern (src/lexer.mll[238,7041+6]..[238,7041+10])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/lexer.mll[238,7041+6]..[238,7041+7])
                                                          Ppat_any
                                                        pattern (src/lexer.mll[238,7041+9]..[238,7041+10])
                                                          Ppat_any
                                                      ]
                                                    expression (src/lexer.mll[239,7055+8]..[239,7055+10])
                                                      Pexp_construct "()" (src/lexer.mll[239,7055+8]..[239,7055+10])
                                                      None
                                                ]
                              ]
                              expression (src/lexer.mll[241,7071+2]..[246,7158+41])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[241,7071+6]..[241,7071+13])
                                      Ppat_var "keyword" (src/lexer.mll[241,7071+6]..[241,7071+13])
                                    expression (src/lexer.mll[242,7087+4]..[242,7087+44])
                                      Pexp_construct "Some" (src/lexer.mll[242,7087+4]..[242,7087+8])
                                      Some
                                        expression (src/lexer.mll[242,7087+9]..[242,7087+44])
                                          Pexp_construct "Position" (src/lexer.mll[242,7087+10]..[242,7087+18])
                                          Some
                                            expression (src/lexer.mll[242,7087+19]..[242,7087+43])
                                              Pexp_tuple
                                              [
                                                expression (src/lexer.mll[242,7087+20]..[242,7087+27])
                                                  Pexp_ident "subject" (src/lexer.mll[242,7087+20]..[242,7087+27])
                                                expression (src/lexer.mll[242,7087+29]..[242,7087+34])
                                                  Pexp_ident "where" (src/lexer.mll[242,7087+29]..[242,7087+34])
                                                expression (src/lexer.mll[242,7087+36]..[242,7087+42])
                                                  Pexp_ident "flavor" (src/lexer.mll[242,7087+36]..[242,7087+42])
                                              ]
                                  <def>
                                    pattern (src/lexer.mll[243,7132+6]..[243,7132+9])
                                      Ppat_var "oid" (src/lexer.mll[243,7132+6]..[243,7132+9])
                                    expression (src/lexer.mll[244,7144+4]..[244,7144+8])
                                      Pexp_construct "None" (src/lexer.mll[244,7144+4]..[244,7144+8])
                                      None
                                ]
                                expression (src/lexer.mll[246,7158+2]..[246,7158+41])
                                  Pexp_record
                                  [
                                    "pos" (src/lexer.mll[246,7158+4]..[246,7158+7]) ghost
                                      expression (src/lexer.mll[246,7158+4]..[246,7158+7])
                                        Pexp_ident "pos" (src/lexer.mll[246,7158+4]..[246,7158+7])
                                    "check" (src/lexer.mll[246,7158+9]..[246,7158+14]) ghost
                                      expression (src/lexer.mll[246,7158+9]..[246,7158+14])
                                        Pexp_ident "check" (src/lexer.mll[246,7158+9]..[246,7158+14])
                                    "transform" (src/lexer.mll[246,7158+16]..[246,7158+25]) ghost
                                      expression (src/lexer.mll[246,7158+16]..[246,7158+25])
                                        Pexp_ident "transform" (src/lexer.mll[246,7158+16]..[246,7158+25])
                                    "keyword" (src/lexer.mll[246,7158+27]..[246,7158+34]) ghost
                                      expression (src/lexer.mll[246,7158+27]..[246,7158+34])
                                        Pexp_ident "keyword" (src/lexer.mll[246,7158+27]..[246,7158+34])
                                    "oid" (src/lexer.mll[246,7158+36]..[246,7158+39]) ghost
                                      expression (src/lexer.mll[246,7158+36]..[246,7158+39])
                                        Pexp_ident "oid" (src/lexer.mll[246,7158+36]..[246,7158+39])
                                  ]
                                  None
    ]
  structure_item (src/lexer.mll[253,7369+0]..[259,7489+61])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[253,7369+4]..[253,7369+15])
          Ppat_var "no_monsters" (src/lexer.mll[253,7369+4]..[253,7369+15])
        expression (src/lexer.mll[253,7369+16]..[259,7489+61]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[253,7369+16]..[253,7369+24])
            Ppat_var "monsters" (src/lexer.mll[253,7369+16]..[253,7369+24])
          expression (src/lexer.mll[254,7396+2]..[259,7489+61])
            Pexp_match
            expression (src/lexer.mll[254,7396+8]..[254,7396+16])
              Pexp_ident "monsters" (src/lexer.mll[254,7396+8]..[254,7396+16])
            [
              <case>
                pattern (src/lexer.mll[255,7418+4]..[255,7418+6])
                  Ppat_construct "[]" (src/lexer.mll[255,7418+4]..[255,7418+6])
                  None
                expression (src/lexer.mll[256,7428+6]..[256,7428+8])
                  Pexp_construct "()" (src/lexer.mll[256,7428+6]..[256,7428+8])
                  None
              <case>
                pattern (src/lexer.mll[257,7437+4]..[257,7437+16])
                  Ppat_construct "::" (src/lexer.mll[257,7437+12]..[257,7437+14])
                  Some
                    []
                    pattern (src/lexer.mll[257,7437+4]..[257,7437+16]) ghost
                      Ppat_tuple
                      [
                        pattern (src/lexer.mll[257,7437+4]..[257,7437+11])
                          Ppat_var "monster" (src/lexer.mll[257,7437+4]..[257,7437+11])
                        pattern (src/lexer.mll[257,7437+15]..[257,7437+16])
                          Ppat_any
                      ]
                expression (src/lexer.mll[258,7457+6]..[259,7489+61])
                  Pexp_apply
                  expression (src/lexer.mll[258,7457+6]..[258,7457+17])
                    Pexp_ident "Error.error" (src/lexer.mll[258,7457+6]..[258,7457+17])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[258,7457+18]..[258,7457+31])
                        Pexp_construct "::" (src/lexer.mll[258,7457+19]..[258,7457+31]) ghost
                        Some
                          expression (src/lexer.mll[258,7457+19]..[258,7457+31]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[258,7457+19]..[258,7457+30])
                                Pexp_field
                                expression (src/lexer.mll[258,7457+19]..[258,7457+26])
                                  Pexp_ident "monster" (src/lexer.mll[258,7457+19]..[258,7457+26])
                                "pos" (src/lexer.mll[258,7457+27]..[258,7457+30])
                              expression (src/lexer.mll[258,7457+30]..[258,7457+31]) ghost
                                Pexp_construct "[]" (src/lexer.mll[258,7457+30]..[258,7457+31]) ghost
                                None
                            ]
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[259,7489+8]..[259,7489+61])
                        Pexp_constant PConst_string("a Menhir keyword cannot be used in an OCaml header.",(src/lexer.mll[259,7489+9]..[259,7489+60]),None)
                  ]
            ]
    ]
  structure_item (src/lexer.mll[265,7709+0]..[270,7801+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[265,7709+4]..[265,7709+14])
          Ppat_var "gather_oid" (src/lexer.mll[265,7709+4]..[265,7709+14])
        expression (src/lexer.mll[265,7709+15]..[270,7801+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[265,7709+15]..[265,7709+17])
            Ppat_var "xs" (src/lexer.mll[265,7709+15]..[265,7709+17])
          expression (src/lexer.mll[265,7709+18]..[270,7801+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[265,7709+18]..[265,7709+21])
              Ppat_var "oid" (src/lexer.mll[265,7709+18]..[265,7709+21])
            expression (src/lexer.mll[266,7733+2]..[270,7801+8])
              Pexp_match
              expression (src/lexer.mll[266,7733+8]..[266,7733+11])
                Pexp_ident "oid" (src/lexer.mll[266,7733+8]..[266,7733+11])
              [
                <case>
                  pattern (src/lexer.mll[267,7750+4]..[267,7750+10])
                    Ppat_construct "Some" (src/lexer.mll[267,7750+4]..[267,7750+8])
                    Some
                      []
                      pattern (src/lexer.mll[267,7750+9]..[267,7750+10])
                        Ppat_var "x" (src/lexer.mll[267,7750+9]..[267,7750+10])
                  expression (src/lexer.mll[268,7764+6]..[268,7764+24])
                    Pexp_apply
                    expression (src/lexer.mll[268,7764+6]..[268,7764+19])
                      Pexp_ident "StringSet.add" (src/lexer.mll[268,7764+6]..[268,7764+19])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[268,7764+20]..[268,7764+21])
                          Pexp_ident "x" (src/lexer.mll[268,7764+20]..[268,7764+21])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[268,7764+22]..[268,7764+24])
                          Pexp_ident "xs" (src/lexer.mll[268,7764+22]..[268,7764+24])
                    ]
                <case>
                  pattern (src/lexer.mll[269,7789+4]..[269,7789+8])
                    Ppat_construct "None" (src/lexer.mll[269,7789+4]..[269,7789+8])
                    None
                  expression (src/lexer.mll[270,7801+6]..[270,7801+8])
                    Pexp_ident "xs" (src/lexer.mll[270,7801+6]..[270,7801+8])
              ]
    ]
  structure_item (src/lexer.mll[272,7811+0]..[273,7834+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[272,7811+4]..[272,7811+15])
          Ppat_var "gather_oids" (src/lexer.mll[272,7811+4]..[272,7811+15])
        expression (src/lexer.mll[272,7811+16]..[273,7834+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[272,7811+16]..[272,7811+20])
            Ppat_var "oids" (src/lexer.mll[272,7811+16]..[272,7811+20])
          expression (src/lexer.mll[273,7834+2]..[273,7834+49])
            Pexp_apply
            expression (src/lexer.mll[273,7834+2]..[273,7834+17])
              Pexp_ident "Array.fold_left" (src/lexer.mll[273,7834+2]..[273,7834+17])
            [
              <arg>
              Nolabel
                expression (src/lexer.mll[273,7834+18]..[273,7834+28])
                  Pexp_ident "gather_oid" (src/lexer.mll[273,7834+18]..[273,7834+28])
              <arg>
              Nolabel
                expression (src/lexer.mll[273,7834+29]..[273,7834+44])
                  Pexp_ident "StringSet.empty" (src/lexer.mll[273,7834+29]..[273,7834+44])
              <arg>
              Nolabel
                expression (src/lexer.mll[273,7834+45]..[273,7834+49])
                  Pexp_ident "oids" (src/lexer.mll[273,7834+45]..[273,7834+49])
            ]
    ]
  structure_item (src/lexer.mll[277,7954+0]..[280,8051+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[277,7954+4]..[277,7954+19])
          Ppat_var "gather_monsters" (src/lexer.mll[277,7954+4]..[277,7954+19])
        expression (src/lexer.mll[277,7954+20]..[280,8051+28]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[277,7954+20]..[277,7954+28])
            Ppat_var "monsters" (src/lexer.mll[277,7954+20]..[277,7954+28])
          expression (src/lexer.mll[278,7985+2]..[280,8051+28])
            Pexp_apply
            expression (src/lexer.mll[278,7985+2]..[278,7985+16])
              Pexp_ident "List.fold_left" (src/lexer.mll[278,7985+2]..[278,7985+16])
            [
              <arg>
              Nolabel
                expression (src/lexer.mll[278,7985+17]..[280,8051+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/lexer.mll[278,7985+22]..[278,7985+24])
                    Ppat_var "xs" (src/lexer.mll[278,7985+22]..[278,7985+24])
                  expression (src/lexer.mll[278,7985+25]..[279,8021+29]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/lexer.mll[278,7985+25]..[278,7985+32])
                      Ppat_var "monster" (src/lexer.mll[278,7985+25]..[278,7985+32])
                    expression (src/lexer.mll[279,8021+4]..[279,8021+29])
                      Pexp_apply
                      expression (src/lexer.mll[279,8021+4]..[279,8021+14])
                        Pexp_ident "gather_oid" (src/lexer.mll[279,8021+4]..[279,8021+14])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[279,8021+15]..[279,8021+17])
                            Pexp_ident "xs" (src/lexer.mll[279,8021+15]..[279,8021+17])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[279,8021+18]..[279,8021+29])
                            Pexp_field
                            expression (src/lexer.mll[279,8021+18]..[279,8021+25])
                              Pexp_ident "monster" (src/lexer.mll[279,8021+18]..[279,8021+25])
                            "oid" (src/lexer.mll[279,8021+26]..[279,8021+29])
                      ]
              <arg>
              Nolabel
                expression (src/lexer.mll[280,8051+4]..[280,8051+19])
                  Pexp_ident "StringSet.empty" (src/lexer.mll[280,8051+4]..[280,8051+19])
              <arg>
              Nolabel
                expression (src/lexer.mll[280,8051+20]..[280,8051+28])
                  Pexp_ident "monsters" (src/lexer.mll[280,8051+20]..[280,8051+28])
            ]
    ]
  structure_item (src/lexer.mll[286,8187+0]..[320,9757+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[286,8187+4]..[286,8187+14])
          Ppat_var "mk_stretch" (src/lexer.mll[286,8187+4]..[286,8187+14])
        expression (src/lexer.mll[286,8187+15]..[320,9757+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[286,8187+15]..[286,8187+19])
            Ppat_var "pos1" (src/lexer.mll[286,8187+15]..[286,8187+19])
          expression (src/lexer.mll[286,8187+20]..[320,9757+4]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.mll[286,8187+20]..[286,8187+24])
              Ppat_var "pos2" (src/lexer.mll[286,8187+20]..[286,8187+24])
            expression (src/lexer.mll[286,8187+25]..[320,9757+4]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.mll[286,8187+25]..[286,8187+37])
                Ppat_var "parenthesize" (src/lexer.mll[286,8187+25]..[286,8187+37])
              expression (src/lexer.mll[286,8187+38]..[320,9757+4]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.mll[286,8187+38]..[286,8187+46])
                  Ppat_var "monsters" (src/lexer.mll[286,8187+38]..[286,8187+46])
                expression (src/lexer.mll[288,8282+2]..[320,9757+4])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/lexer.mll[288,8282+6]..[288,8282+17])
                        Ppat_var "raw_content" (src/lexer.mll[288,8282+6]..[288,8282+17])
                      core_type (src/lexer.mll[288,8282+20]..[288,8282+26])
                        Ptyp_constr "string" (src/lexer.mll[288,8282+20]..[288,8282+26])
                        []
                      expression (src/lexer.mll[288,8282+29]..[288,8282+57])
                        Pexp_apply
                        expression (src/lexer.mll[288,8282+29]..[288,8282+44])
                          Pexp_ident "InputFile.chunk" (src/lexer.mll[288,8282+29]..[288,8282+44])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[288,8282+45]..[288,8282+57])
                              Pexp_tuple
                              [
                                expression (src/lexer.mll[288,8282+46]..[288,8282+50])
                                  Pexp_ident "pos1" (src/lexer.mll[288,8282+46]..[288,8282+50])
                                expression (src/lexer.mll[288,8282+52]..[288,8282+56])
                                  Pexp_ident "pos2" (src/lexer.mll[288,8282+52]..[288,8282+56])
                              ]
                        ]
                  ]
                  expression (src/lexer.mll[291,8481+2]..[320,9757+4])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[291,8481+6]..[291,8481+13])
                          Ppat_var "content" (src/lexer.mll[291,8481+6]..[291,8481+13])
                        core_type (src/lexer.mll[291,8481+16]..[291,8481+22])
                          Ptyp_constr "string" (src/lexer.mll[291,8481+16]..[291,8481+22])
                          []
                        expression (src/lexer.mll[292,8506+4]..[298,8724+38])
                          Pexp_match
                          expression (src/lexer.mll[292,8506+10]..[292,8506+18])
                            Pexp_ident "monsters" (src/lexer.mll[292,8506+10]..[292,8506+18])
                          [
                            <case>
                              pattern (src/lexer.mll[293,8530+6]..[293,8530+8])
                                Ppat_construct "[]" (src/lexer.mll[293,8530+6]..[293,8530+8])
                                None
                              expression (src/lexer.mll[294,8542+8]..[294,8542+19])
                                Pexp_ident "raw_content" (src/lexer.mll[294,8542+8]..[294,8542+19])
                            <case>
                              pattern (src/lexer.mll[295,8562+6]..[295,8562+12])
                                Ppat_construct "::" (src/lexer.mll[295,8562+8]..[295,8562+10])
                                Some
                                  []
                                  pattern (src/lexer.mll[295,8562+6]..[295,8562+12]) ghost
                                    Ppat_tuple
                                    [
                                      pattern (src/lexer.mll[295,8562+6]..[295,8562+7])
                                        Ppat_any
                                      pattern (src/lexer.mll[295,8562+11]..[295,8562+12])
                                        Ppat_any
                                    ]
                              expression (src/lexer.mll[296,8578+8]..[298,8724+38])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[296,8578+12]..[296,8578+19])
                                      Ppat_var "content" (src/lexer.mll[296,8578+12]..[296,8578+19])
                                    core_type (src/lexer.mll[296,8578+22]..[296,8578+27])
                                      Ptyp_constr "bytes" (src/lexer.mll[296,8578+22]..[296,8578+27])
                                      []
                                    expression (src/lexer.mll[296,8578+30]..[296,8578+57])
                                      Pexp_apply
                                      expression (src/lexer.mll[296,8578+30]..[296,8578+45])
                                        Pexp_ident "Bytes.of_string" (src/lexer.mll[296,8578+30]..[296,8578+45])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[296,8578+46]..[296,8578+57])
                                            Pexp_ident "raw_content" (src/lexer.mll[296,8578+46]..[296,8578+57])
                                      ]
                                ]
                                expression (src/lexer.mll[297,8639+8]..[298,8724+38])
                                  Pexp_sequence
                                  expression (src/lexer.mll[297,8639+8]..[297,8639+83])
                                    Pexp_apply
                                    expression (src/lexer.mll[297,8639+8]..[297,8639+17])
                                      Pexp_ident "List.iter" (src/lexer.mll[297,8639+8]..[297,8639+17])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[297,8639+18]..[297,8639+74])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/lexer.mll[297,8639+23]..[297,8639+30])
                                            Ppat_var "monster" (src/lexer.mll[297,8639+23]..[297,8639+30])
                                          expression (src/lexer.mll[297,8639+34]..[297,8639+73])
                                            Pexp_apply
                                            expression (src/lexer.mll[297,8639+34]..[297,8639+51])
                                              Pexp_field
                                              expression (src/lexer.mll[297,8639+34]..[297,8639+41])
                                                Pexp_ident "monster" (src/lexer.mll[297,8639+34]..[297,8639+41])
                                              "transform" (src/lexer.mll[297,8639+42]..[297,8639+51])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[297,8639+52]..[297,8639+65])
                                                  Pexp_field
                                                  expression (src/lexer.mll[297,8639+52]..[297,8639+56])
                                                    Pexp_ident "pos1" (src/lexer.mll[297,8639+52]..[297,8639+56])
                                                  "pos_cnum" (src/lexer.mll[297,8639+57]..[297,8639+65])
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[297,8639+66]..[297,8639+73])
                                                  Pexp_ident "content" (src/lexer.mll[297,8639+66]..[297,8639+73])
                                            ]
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[297,8639+75]..[297,8639+83])
                                          Pexp_ident "monsters" (src/lexer.mll[297,8639+75]..[297,8639+83])
                                    ]
                                  expression (src/lexer.mll[298,8724+8]..[298,8724+38])
                                    Pexp_apply
                                    expression (src/lexer.mll[298,8724+8]..[298,8724+30])
                                      Pexp_ident "Bytes.unsafe_to_string" (src/lexer.mll[298,8724+8]..[298,8724+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[298,8724+31]..[298,8724+38])
                                          Pexp_ident "content" (src/lexer.mll[298,8724+31]..[298,8724+38])
                                    ]
                          ]
                    ]
                    expression (src/lexer.mll[303,8969+2]..[320,9757+4])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[303,8969+6]..[303,8969+13])
                            Ppat_var "content" (src/lexer.mll[303,8969+6]..[303,8969+13])
                          expression (src/lexer.mll[304,8985+4]..[311,9375+64])
                            Pexp_ifthenelse
                            expression (src/lexer.mll[304,8985+7]..[304,8985+19])
                              Pexp_ident "parenthesize" (src/lexer.mll[304,8985+7]..[304,8985+19])
                            expression (src/lexer.mll[309,9285+6]..[309,9285+80])
                              Pexp_apply
                              expression (src/lexer.mll[309,9285+59]..[309,9285+60])
                                Pexp_ident "^" (src/lexer.mll[309,9285+59]..[309,9285+60])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[309,9285+6]..[309,9285+58])
                                    Pexp_apply
                                    expression (src/lexer.mll[309,9285+7]..[309,9285+18])
                                      Pexp_ident "String.make" (src/lexer.mll[309,9285+7]..[309,9285+18])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[309,9285+19]..[309,9285+53])
                                          Pexp_apply
                                          expression (src/lexer.mll[309,9285+49]..[309,9285+50])
                                            Pexp_ident "-" (src/lexer.mll[309,9285+49]..[309,9285+50])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[309,9285+20]..[309,9285+48])
                                                Pexp_apply
                                                expression (src/lexer.mll[309,9285+34]..[309,9285+35])
                                                  Pexp_ident "-" (src/lexer.mll[309,9285+34]..[309,9285+35])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[309,9285+20]..[309,9285+33])
                                                      Pexp_field
                                                      expression (src/lexer.mll[309,9285+20]..[309,9285+24])
                                                        Pexp_ident "pos1" (src/lexer.mll[309,9285+20]..[309,9285+24])
                                                      "pos_cnum" (src/lexer.mll[309,9285+25]..[309,9285+33])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[309,9285+36]..[309,9285+48])
                                                      Pexp_field
                                                      expression (src/lexer.mll[309,9285+36]..[309,9285+40])
                                                        Pexp_ident "pos1" (src/lexer.mll[309,9285+36]..[309,9285+40])
                                                      "pos_bol" (src/lexer.mll[309,9285+41]..[309,9285+48])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[309,9285+51]..[309,9285+52])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[309,9285+54]..[309,9285+57])
                                          Pexp_constant PConst_char 20
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[309,9285+61]..[309,9285+80])
                                    Pexp_apply
                                    expression (src/lexer.mll[309,9285+65]..[309,9285+66])
                                      Pexp_ident "^" (src/lexer.mll[309,9285+65]..[309,9285+66])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[309,9285+61]..[309,9285+64])
                                          Pexp_constant PConst_string("(",(src/lexer.mll[309,9285+62]..[309,9285+63]),None)
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[309,9285+67]..[309,9285+80])
                                          Pexp_apply
                                          expression (src/lexer.mll[309,9285+75]..[309,9285+76])
                                            Pexp_ident "^" (src/lexer.mll[309,9285+75]..[309,9285+76])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[309,9285+67]..[309,9285+74])
                                                Pexp_ident "content" (src/lexer.mll[309,9285+67]..[309,9285+74])
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[309,9285+77]..[309,9285+80])
                                                Pexp_constant PConst_string(")",(src/lexer.mll[309,9285+78]..[309,9285+79]),None)
                                          ]
                                    ]
                              ]
                            Some
                              expression (src/lexer.mll[311,9375+6]..[311,9375+64])
                                Pexp_apply
                                expression (src/lexer.mll[311,9375+55]..[311,9375+56])
                                  Pexp_ident "^" (src/lexer.mll[311,9375+55]..[311,9375+56])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[311,9375+6]..[311,9375+54])
                                      Pexp_apply
                                      expression (src/lexer.mll[311,9375+7]..[311,9375+18])
                                        Pexp_ident "String.make" (src/lexer.mll[311,9375+7]..[311,9375+18])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[311,9375+19]..[311,9375+49])
                                            Pexp_apply
                                            expression (src/lexer.mll[311,9375+34]..[311,9375+35])
                                              Pexp_ident "-" (src/lexer.mll[311,9375+34]..[311,9375+35])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[311,9375+20]..[311,9375+33])
                                                  Pexp_field
                                                  expression (src/lexer.mll[311,9375+20]..[311,9375+24])
                                                    Pexp_ident "pos1" (src/lexer.mll[311,9375+20]..[311,9375+24])
                                                  "pos_cnum" (src/lexer.mll[311,9375+25]..[311,9375+33])
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[311,9375+36]..[311,9375+48])
                                                  Pexp_field
                                                  expression (src/lexer.mll[311,9375+36]..[311,9375+40])
                                                    Pexp_ident "pos1" (src/lexer.mll[311,9375+36]..[311,9375+40])
                                                  "pos_bol" (src/lexer.mll[311,9375+41]..[311,9375+48])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[311,9375+50]..[311,9375+53])
                                            Pexp_constant PConst_char 20
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[311,9375+57]..[311,9375+64])
                                      Pexp_ident "content" (src/lexer.mll[311,9375+57]..[311,9375+64])
                                ]
                      ]
                      expression (src/lexer.mll[313,9445+2]..[320,9757+4])
                        Pexp_open Fresh
                        module_expr (src/lexer.mll[313,9445+2]..[313,9445+9])
                          Pmod_ident "Stretch" (src/lexer.mll[313,9445+2]..[313,9445+9])
                        expression (src/lexer.mll[313,9445+11]..[320,9757+3])
                          Pexp_record
                          [
                            "stretch_filename" (src/lexer.mll[314,9458+4]..[314,9458+20])
                              expression (src/lexer.mll[314,9458+23]..[314,9458+54])
                                Pexp_apply
                                expression (src/lexer.mll[314,9458+23]..[314,9458+52])
                                  Pexp_ident "InputFile.get_input_file_name" (src/lexer.mll[314,9458+23]..[314,9458+52])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[314,9458+52]..[314,9458+54])
                                      Pexp_construct "()" (src/lexer.mll[314,9458+52]..[314,9458+54])
                                      None
                                ]
                            "stretch_linenum" (src/lexer.mll[315,9514+4]..[315,9514+19])
                              expression (src/lexer.mll[315,9514+22]..[315,9514+35])
                                Pexp_field
                                expression (src/lexer.mll[315,9514+22]..[315,9514+26])
                                  Pexp_ident "pos1" (src/lexer.mll[315,9514+22]..[315,9514+26])
                                "pos_lnum" (src/lexer.mll[315,9514+27]..[315,9514+35])
                            "stretch_linecount" (src/lexer.mll[316,9551+4]..[316,9551+21])
                              expression (src/lexer.mll[316,9551+24]..[316,9551+53])
                                Pexp_apply
                                expression (src/lexer.mll[316,9551+38]..[316,9551+39])
                                  Pexp_ident "-" (src/lexer.mll[316,9551+38]..[316,9551+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[316,9551+24]..[316,9551+37])
                                      Pexp_field
                                      expression (src/lexer.mll[316,9551+24]..[316,9551+28])
                                        Pexp_ident "pos2" (src/lexer.mll[316,9551+24]..[316,9551+28])
                                      "pos_lnum" (src/lexer.mll[316,9551+29]..[316,9551+37])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[316,9551+40]..[316,9551+53])
                                      Pexp_field
                                      expression (src/lexer.mll[316,9551+40]..[316,9551+44])
                                        Pexp_ident "pos1" (src/lexer.mll[316,9551+40]..[316,9551+44])
                                      "pos_lnum" (src/lexer.mll[316,9551+45]..[316,9551+53])
                                ]
                            "stretch_content" (src/lexer.mll[317,9606+4]..[317,9606+19])
                              expression (src/lexer.mll[317,9606+22]..[317,9606+29])
                                Pexp_ident "content" (src/lexer.mll[317,9606+22]..[317,9606+29])
                            "stretch_raw_content" (src/lexer.mll[318,9637+4]..[318,9637+23])
                              expression (src/lexer.mll[318,9637+26]..[318,9637+37])
                                Pexp_ident "raw_content" (src/lexer.mll[318,9637+26]..[318,9637+37])
                            "stretch_keywords" (src/lexer.mll[319,9676+4]..[319,9676+20])
                              expression (src/lexer.mll[319,9676+23]..[319,9676+80])
                                Pexp_apply
                                expression (src/lexer.mll[319,9676+23]..[319,9676+38])
                                  Pexp_ident "Misc.filter_map" (src/lexer.mll[319,9676+23]..[319,9676+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[319,9676+39]..[319,9676+71])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/lexer.mll[319,9676+44]..[319,9676+51])
                                        Ppat_var "monster" (src/lexer.mll[319,9676+44]..[319,9676+51])
                                      expression (src/lexer.mll[319,9676+55]..[319,9676+70])
                                        Pexp_field
                                        expression (src/lexer.mll[319,9676+55]..[319,9676+62])
                                          Pexp_ident "monster" (src/lexer.mll[319,9676+55]..[319,9676+62])
                                        "keyword" (src/lexer.mll[319,9676+63]..[319,9676+70])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[319,9676+72]..[319,9676+80])
                                      Pexp_ident "monsters" (src/lexer.mll[319,9676+72]..[319,9676+80])
                                ]
                          ]
                          None
    ]
  structure_item (src/lexer.mll[326,9948+0]..[341,10560+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[326,9948+4]..[326,9948+17])
          Ppat_var "stretch_of_id" (src/lexer.mll[326,9948+4]..[326,9948+17])
        expression (src/lexer.mll[326,9948+18]..[341,10560+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[326,9948+18]..[326,9948+39])
            Ppat_constraint
            pattern (src/lexer.mll[326,9948+19]..[326,9948+21])
              Ppat_var "id" (src/lexer.mll[326,9948+19]..[326,9948+21])
            core_type (src/lexer.mll[326,9948+24]..[326,9948+38])
              Ptyp_constr "located" (src/lexer.mll[326,9948+31]..[326,9948+38])
              [
                core_type (src/lexer.mll[326,9948+24]..[326,9948+30])
                  Ptyp_constr "string" (src/lexer.mll[326,9948+24]..[326,9948+30])
                  []
              ]
          expression (src/lexer.mll[327,9990+2]..[341,10560+4])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/lexer.mll[327,9990+6]..[327,9990+22])
                  Ppat_tuple
                  [
                    pattern (src/lexer.mll[327,9990+6]..[327,9990+17])
                      Ppat_var "raw_content" (src/lexer.mll[327,9990+6]..[327,9990+17])
                    pattern (src/lexer.mll[327,9990+19]..[327,9990+22])
                      Ppat_var "pos" (src/lexer.mll[327,9990+19]..[327,9990+22])
                  ]
                expression (src/lexer.mll[327,9990+25]..[327,9990+47])
                  Pexp_apply
                  expression (src/lexer.mll[327,9990+25]..[327,9990+44])
                    Pexp_ident "Positions.decompose" (src/lexer.mll[327,9990+25]..[327,9990+44])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[327,9990+45]..[327,9990+47])
                        Pexp_ident "id" (src/lexer.mll[327,9990+45]..[327,9990+47])
                  ]
            ]
            expression (src/lexer.mll[328,10041+2]..[341,10560+4])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/lexer.mll[328,10041+6]..[328,10041+10])
                    Ppat_var "pos1" (src/lexer.mll[328,10041+6]..[328,10041+10])
                  expression (src/lexer.mll[328,10041+13]..[328,10041+44])
                    Pexp_apply
                    expression (src/lexer.mll[328,10041+13]..[328,10041+40])
                      Pexp_ident "Positions.start_of_position" (src/lexer.mll[328,10041+13]..[328,10041+40])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[328,10041+41]..[328,10041+44])
                          Pexp_ident "pos" (src/lexer.mll[328,10041+41]..[328,10041+44])
                    ]
                <def>
                  pattern (src/lexer.mll[329,10086+6]..[329,10086+10])
                    Ppat_var "pos2" (src/lexer.mll[329,10086+6]..[329,10086+10])
                  expression (src/lexer.mll[329,10086+13]..[329,10086+42])
                    Pexp_apply
                    expression (src/lexer.mll[329,10086+13]..[329,10086+38])
                      Pexp_ident "Positions.end_of_position" (src/lexer.mll[329,10086+13]..[329,10086+38])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[329,10086+39]..[329,10086+42])
                          Pexp_ident "pos" (src/lexer.mll[329,10086+39]..[329,10086+42])
                    ]
                <def>
                  pattern (src/lexer.mll[330,10129+6]..[330,10129+14])
                    Ppat_var "filename" (src/lexer.mll[330,10129+6]..[330,10129+14])
                  expression (src/lexer.mll[330,10129+17]..[330,10129+51])
                    Pexp_apply
                    expression (src/lexer.mll[330,10129+17]..[330,10129+47])
                      Pexp_ident "Positions.filename_of_position" (src/lexer.mll[330,10129+17]..[330,10129+47])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[330,10129+48]..[330,10129+51])
                          Pexp_ident "pos" (src/lexer.mll[330,10129+48]..[330,10129+51])
                    ]
              ]
              expression (src/lexer.mll[331,10184+2]..[341,10560+4])
                Pexp_sequence
                expression (src/lexer.mll[331,10184+2]..[331,10184+35])
                  Pexp_assert
                  expression (src/lexer.mll[331,10184+9]..[331,10184+35])
                    Pexp_apply
                    expression (src/lexer.mll[331,10184+15]..[331,10184+17])
                      Pexp_ident "!=" (src/lexer.mll[331,10184+15]..[331,10184+17])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[331,10184+10]..[331,10184+14])
                          Pexp_ident "pos1" (src/lexer.mll[331,10184+10]..[331,10184+14])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[331,10184+18]..[331,10184+34])
                          Pexp_ident "Lexing.dummy_pos" (src/lexer.mll[331,10184+18]..[331,10184+34])
                    ]
                expression (src/lexer.mll[332,10221+2]..[341,10560+4])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/lexer.mll[332,10221+6]..[332,10221+13])
                        Ppat_var "padding" (src/lexer.mll[332,10221+6]..[332,10221+13])
                      expression (src/lexer.mll[332,10221+16]..[332,10221+44])
                        Pexp_apply
                        expression (src/lexer.mll[332,10221+30]..[332,10221+31])
                          Pexp_ident "-" (src/lexer.mll[332,10221+30]..[332,10221+31])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[332,10221+16]..[332,10221+29])
                              Pexp_field
                              expression (src/lexer.mll[332,10221+16]..[332,10221+20])
                                Pexp_ident "pos1" (src/lexer.mll[332,10221+16]..[332,10221+20])
                              "pos_cnum" (src/lexer.mll[332,10221+21]..[332,10221+29])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[332,10221+32]..[332,10221+44])
                              Pexp_field
                              expression (src/lexer.mll[332,10221+32]..[332,10221+36])
                                Pexp_ident "pos1" (src/lexer.mll[332,10221+32]..[332,10221+36])
                              "pos_bol" (src/lexer.mll[332,10221+37]..[332,10221+44])
                        ]
                  ]
                  expression (src/lexer.mll[333,10269+2]..[341,10560+4])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[333,10269+6]..[333,10269+13])
                          Ppat_var "content" (src/lexer.mll[333,10269+6]..[333,10269+13])
                        expression (src/lexer.mll[333,10269+16]..[333,10269+53])
                          Pexp_apply
                          expression (src/lexer.mll[333,10269+40]..[333,10269+41])
                            Pexp_ident "^" (src/lexer.mll[333,10269+40]..[333,10269+41])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[333,10269+16]..[333,10269+39])
                                Pexp_apply
                                expression (src/lexer.mll[333,10269+16]..[333,10269+27])
                                  Pexp_ident "String.make" (src/lexer.mll[333,10269+16]..[333,10269+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[333,10269+28]..[333,10269+35])
                                      Pexp_ident "padding" (src/lexer.mll[333,10269+28]..[333,10269+35])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[333,10269+36]..[333,10269+39])
                                      Pexp_constant PConst_char 20
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[333,10269+42]..[333,10269+53])
                                Pexp_ident "raw_content" (src/lexer.mll[333,10269+42]..[333,10269+53])
                          ]
                    ]
                    expression (src/lexer.mll[334,10326+2]..[341,10560+4])
                      Pexp_open Fresh
                      module_expr (src/lexer.mll[334,10326+2]..[334,10326+9])
                        Pmod_ident "Stretch" (src/lexer.mll[334,10326+2]..[334,10326+9])
                      expression (src/lexer.mll[334,10326+11]..[341,10560+3])
                        Pexp_record
                        [
                          "stretch_filename" (src/lexer.mll[335,10339+4]..[335,10339+20])
                            expression (src/lexer.mll[335,10339+23]..[335,10339+31])
                              Pexp_ident "filename" (src/lexer.mll[335,10339+23]..[335,10339+31])
                          "stretch_linenum" (src/lexer.mll[336,10372+4]..[336,10372+19])
                            expression (src/lexer.mll[336,10372+22]..[336,10372+35])
                              Pexp_field
                              expression (src/lexer.mll[336,10372+22]..[336,10372+26])
                                Pexp_ident "pos1" (src/lexer.mll[336,10372+22]..[336,10372+26])
                              "pos_lnum" (src/lexer.mll[336,10372+27]..[336,10372+35])
                          "stretch_linecount" (src/lexer.mll[337,10409+4]..[337,10409+21])
                            expression (src/lexer.mll[337,10409+24]..[337,10409+53])
                              Pexp_apply
                              expression (src/lexer.mll[337,10409+38]..[337,10409+39])
                                Pexp_ident "-" (src/lexer.mll[337,10409+38]..[337,10409+39])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[337,10409+24]..[337,10409+37])
                                    Pexp_field
                                    expression (src/lexer.mll[337,10409+24]..[337,10409+28])
                                      Pexp_ident "pos2" (src/lexer.mll[337,10409+24]..[337,10409+28])
                                    "pos_lnum" (src/lexer.mll[337,10409+29]..[337,10409+37])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[337,10409+40]..[337,10409+53])
                                    Pexp_field
                                    expression (src/lexer.mll[337,10409+40]..[337,10409+44])
                                      Pexp_ident "pos1" (src/lexer.mll[337,10409+40]..[337,10409+44])
                                    "pos_lnum" (src/lexer.mll[337,10409+45]..[337,10409+53])
                              ]
                          "stretch_content" (src/lexer.mll[338,10464+4]..[338,10464+19])
                            expression (src/lexer.mll[338,10464+22]..[338,10464+29])
                              Pexp_ident "content" (src/lexer.mll[338,10464+22]..[338,10464+29])
                          "stretch_raw_content" (src/lexer.mll[339,10495+4]..[339,10495+23])
                            expression (src/lexer.mll[339,10495+26]..[339,10495+37])
                              Pexp_ident "raw_content" (src/lexer.mll[339,10495+26]..[339,10495+37])
                          "stretch_keywords" (src/lexer.mll[340,10534+4]..[340,10534+20])
                            expression (src/lexer.mll[340,10534+23]..[340,10534+25])
                              Pexp_construct "[]" (src/lexer.mll[340,10534+23]..[340,10534+25])
                              None
                        ]
                        None
    ]
  structure_item (src/lexer.mll[347,10677+0]..[350,10790+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[347,10677+4]..[347,10677+9])
          Ppat_var "table" (src/lexer.mll[347,10677+4]..[347,10677+9])
        expression (src/lexer.mll[347,10677+10]..[350,10790+7]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[347,10677+10]..[347,10677+15])
            Ppat_var "words" (src/lexer.mll[347,10677+10]..[347,10677+15])
          expression (src/lexer.mll[348,10695+2]..[350,10790+7])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/lexer.mll[348,10695+6]..[348,10695+11])
                  Ppat_var "table" (src/lexer.mll[348,10695+6]..[348,10695+11])
                expression (src/lexer.mll[348,10695+14]..[348,10695+32])
                  Pexp_apply
                  expression (src/lexer.mll[348,10695+14]..[348,10695+28])
                    Pexp_ident "Hashtbl.create" (src/lexer.mll[348,10695+14]..[348,10695+28])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[348,10695+29]..[348,10695+32])
                        Pexp_constant PConst_int (149,None)
                  ]
            ]
            expression (src/lexer.mll[349,10731+2]..[350,10790+7])
              Pexp_sequence
              expression (src/lexer.mll[349,10731+2]..[349,10731+57])
                Pexp_apply
                expression (src/lexer.mll[349,10731+2]..[349,10731+11])
                  Pexp_ident "List.iter" (src/lexer.mll[349,10731+2]..[349,10731+11])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.mll[349,10731+12]..[349,10731+51])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/lexer.mll[349,10731+17]..[349,10731+21])
                        Ppat_var "word" (src/lexer.mll[349,10731+17]..[349,10731+21])
                      expression (src/lexer.mll[349,10731+25]..[349,10731+50])
                        Pexp_apply
                        expression (src/lexer.mll[349,10731+25]..[349,10731+36])
                          Pexp_ident "Hashtbl.add" (src/lexer.mll[349,10731+25]..[349,10731+36])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[349,10731+37]..[349,10731+42])
                              Pexp_ident "table" (src/lexer.mll[349,10731+37]..[349,10731+42])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[349,10731+43]..[349,10731+47])
                              Pexp_ident "word" (src/lexer.mll[349,10731+43]..[349,10731+47])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[349,10731+48]..[349,10731+50])
                              Pexp_construct "()" (src/lexer.mll[349,10731+48]..[349,10731+50])
                              None
                        ]
                  <arg>
                  Nolabel
                    expression (src/lexer.mll[349,10731+52]..[349,10731+57])
                      Pexp_ident "words" (src/lexer.mll[349,10731+52]..[349,10731+57])
                ]
              expression (src/lexer.mll[350,10790+2]..[350,10790+7])
                Pexp_ident "table" (src/lexer.mll[350,10790+2]..[350,10790+7])
    ]
  structure_item (src/lexer.mll[352,10799+0]..[410,11530+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[352,10799+4]..[352,10799+12])
          Ppat_var "reserved" (src/lexer.mll[352,10799+4]..[352,10799+12])
        expression (src/lexer.mll[353,10814+2]..[410,11530+3])
          Pexp_apply
          expression (src/lexer.mll[353,10814+2]..[353,10814+7])
            Pexp_ident "table" (src/lexer.mll[353,10814+2]..[353,10814+7])
          [
            <arg>
            Nolabel
              expression (src/lexer.mll[353,10814+8]..[410,11530+3])
                Pexp_construct "::" (src/lexer.mll[354,10824+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[354,10824+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[354,10824+4]..[354,10824+9])
                        Pexp_constant PConst_string("and",(src/lexer.mll[354,10824+5]..[354,10824+8]),None)
                      expression (src/lexer.mll[355,10835+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[355,10835+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[355,10835+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[355,10835+4]..[355,10835+8])
                                Pexp_constant PConst_string("as",(src/lexer.mll[355,10835+5]..[355,10835+7]),None)
                              expression (src/lexer.mll[356,10845+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[356,10845+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[356,10845+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[356,10845+4]..[356,10845+12])
                                        Pexp_constant PConst_string("assert",(src/lexer.mll[356,10845+5]..[356,10845+11]),None)
                                      expression (src/lexer.mll[357,10859+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[357,10859+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[357,10859+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[357,10859+4]..[357,10859+11])
                                                Pexp_constant PConst_string("begin",(src/lexer.mll[357,10859+5]..[357,10859+10]),None)
                                              expression (src/lexer.mll[358,10872+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[358,10872+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[358,10872+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[358,10872+4]..[358,10872+11])
                                                        Pexp_constant PConst_string("class",(src/lexer.mll[358,10872+5]..[358,10872+10]),None)
                                                      expression (src/lexer.mll[359,10885+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[359,10885+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[359,10885+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[359,10885+4]..[359,10885+16])
                                                                Pexp_constant PConst_string("constraint",(src/lexer.mll[359,10885+5]..[359,10885+15]),None)
                                                              expression (src/lexer.mll[360,10903+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[360,10903+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[360,10903+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[360,10903+4]..[360,10903+8])
Pexp_constant PConst_string("do",(src/lexer.mll[360,10903+5]..[360,10903+7]),None)
                                                                      expression (src/lexer.mll[361,10913+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[361,10913+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[361,10913+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[361,10913+4]..[361,10913+10])
        Pexp_constant PConst_string("done",(src/lexer.mll[361,10913+5]..[361,10913+9]),None)
      expression (src/lexer.mll[362,10925+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[362,10925+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[362,10925+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[362,10925+4]..[362,10925+12])
                Pexp_constant PConst_string("downto",(src/lexer.mll[362,10925+5]..[362,10925+11]),None)
              expression (src/lexer.mll[363,10939+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[363,10939+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[363,10939+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[363,10939+4]..[363,10939+10])
                        Pexp_constant PConst_string("else",(src/lexer.mll[363,10939+5]..[363,10939+9]),None)
                      expression (src/lexer.mll[364,10951+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[364,10951+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[364,10951+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[364,10951+4]..[364,10951+9])
                                Pexp_constant PConst_string("end",(src/lexer.mll[364,10951+5]..[364,10951+8]),None)
                              expression (src/lexer.mll[365,10962+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[365,10962+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[365,10962+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[365,10962+4]..[365,10962+15])
                                        Pexp_constant PConst_string("exception",(src/lexer.mll[365,10962+5]..[365,10962+14]),None)
                                      expression (src/lexer.mll[366,10979+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[366,10979+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[366,10979+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[366,10979+4]..[366,10979+14])
                                                Pexp_constant PConst_string("external",(src/lexer.mll[366,10979+5]..[366,10979+13]),None)
                                              expression (src/lexer.mll[367,10995+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[367,10995+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[367,10995+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[367,10995+4]..[367,10995+11])
                                                        Pexp_constant PConst_string("false",(src/lexer.mll[367,10995+5]..[367,10995+10]),None)
                                                      expression (src/lexer.mll[368,11008+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[368,11008+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[368,11008+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[368,11008+4]..[368,11008+9])
                                                                Pexp_constant PConst_string("for",(src/lexer.mll[368,11008+5]..[368,11008+8]),None)
                                                              expression (src/lexer.mll[369,11019+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[369,11019+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[369,11019+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[369,11019+4]..[369,11019+9])
Pexp_constant PConst_string("fun",(src/lexer.mll[369,11019+5]..[369,11019+8]),None)
                                                                      expression (src/lexer.mll[370,11030+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[370,11030+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[370,11030+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[370,11030+4]..[370,11030+14])
        Pexp_constant PConst_string("function",(src/lexer.mll[370,11030+5]..[370,11030+13]),None)
      expression (src/lexer.mll[371,11046+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[371,11046+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[371,11046+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[371,11046+4]..[371,11046+13])
                Pexp_constant PConst_string("functor",(src/lexer.mll[371,11046+5]..[371,11046+12]),None)
              expression (src/lexer.mll[372,11061+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[372,11061+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[372,11061+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[372,11061+4]..[372,11061+8])
                        Pexp_constant PConst_string("if",(src/lexer.mll[372,11061+5]..[372,11061+7]),None)
                      expression (src/lexer.mll[373,11071+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[373,11071+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[373,11071+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[373,11071+4]..[373,11071+8])
                                Pexp_constant PConst_string("in",(src/lexer.mll[373,11071+5]..[373,11071+7]),None)
                              expression (src/lexer.mll[374,11081+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[374,11081+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[374,11081+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[374,11081+4]..[374,11081+13])
                                        Pexp_constant PConst_string("include",(src/lexer.mll[374,11081+5]..[374,11081+12]),None)
                                      expression (src/lexer.mll[375,11096+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[375,11096+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[375,11096+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[375,11096+4]..[375,11096+13])
                                                Pexp_constant PConst_string("inherit",(src/lexer.mll[375,11096+5]..[375,11096+12]),None)
                                              expression (src/lexer.mll[376,11111+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[376,11111+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[376,11111+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[376,11111+4]..[376,11111+17])
                                                        Pexp_constant PConst_string("initializer",(src/lexer.mll[376,11111+5]..[376,11111+16]),None)
                                                      expression (src/lexer.mll[377,11130+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[377,11130+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[377,11130+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[377,11130+4]..[377,11130+10])
                                                                Pexp_constant PConst_string("lazy",(src/lexer.mll[377,11130+5]..[377,11130+9]),None)
                                                              expression (src/lexer.mll[378,11142+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[378,11142+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[378,11142+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[378,11142+4]..[378,11142+9])
Pexp_constant PConst_string("let",(src/lexer.mll[378,11142+5]..[378,11142+8]),None)
                                                                      expression (src/lexer.mll[379,11153+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[379,11153+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[379,11153+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[379,11153+4]..[379,11153+11])
        Pexp_constant PConst_string("match",(src/lexer.mll[379,11153+5]..[379,11153+10]),None)
      expression (src/lexer.mll[380,11166+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[380,11166+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[380,11166+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[380,11166+4]..[380,11166+12])
                Pexp_constant PConst_string("method",(src/lexer.mll[380,11166+5]..[380,11166+11]),None)
              expression (src/lexer.mll[381,11180+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[381,11180+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[381,11180+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[381,11180+4]..[381,11180+12])
                        Pexp_constant PConst_string("module",(src/lexer.mll[381,11180+5]..[381,11180+11]),None)
                      expression (src/lexer.mll[382,11194+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[382,11194+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[382,11194+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[382,11194+4]..[382,11194+13])
                                Pexp_constant PConst_string("mutable",(src/lexer.mll[382,11194+5]..[382,11194+12]),None)
                              expression (src/lexer.mll[383,11209+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[383,11209+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[383,11209+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[383,11209+4]..[383,11209+9])
                                        Pexp_constant PConst_string("new",(src/lexer.mll[383,11209+5]..[383,11209+8]),None)
                                      expression (src/lexer.mll[384,11220+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[384,11220+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[384,11220+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[384,11220+4]..[384,11220+12])
                                                Pexp_constant PConst_string("object",(src/lexer.mll[384,11220+5]..[384,11220+11]),None)
                                              expression (src/lexer.mll[385,11234+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[385,11234+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[385,11234+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[385,11234+4]..[385,11234+8])
                                                        Pexp_constant PConst_string("of",(src/lexer.mll[385,11234+5]..[385,11234+7]),None)
                                                      expression (src/lexer.mll[386,11244+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[386,11244+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[386,11244+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[386,11244+4]..[386,11244+10])
                                                                Pexp_constant PConst_string("open",(src/lexer.mll[386,11244+5]..[386,11244+9]),None)
                                                              expression (src/lexer.mll[387,11256+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[387,11256+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[387,11256+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[387,11256+4]..[387,11256+8])
Pexp_constant PConst_string("or",(src/lexer.mll[387,11256+5]..[387,11256+7]),None)
                                                                      expression (src/lexer.mll[388,11266+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[388,11266+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[388,11266+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[388,11266+4]..[388,11266+12])
        Pexp_constant PConst_string("parser",(src/lexer.mll[388,11266+5]..[388,11266+11]),None)
      expression (src/lexer.mll[389,11280+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[389,11280+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[389,11280+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[389,11280+4]..[389,11280+13])
                Pexp_constant PConst_string("private",(src/lexer.mll[389,11280+5]..[389,11280+12]),None)
              expression (src/lexer.mll[390,11295+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[390,11295+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[390,11295+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[390,11295+4]..[390,11295+9])
                        Pexp_constant PConst_string("rec",(src/lexer.mll[390,11295+5]..[390,11295+8]),None)
                      expression (src/lexer.mll[391,11306+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[391,11306+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[391,11306+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[391,11306+4]..[391,11306+9])
                                Pexp_constant PConst_string("sig",(src/lexer.mll[391,11306+5]..[391,11306+8]),None)
                              expression (src/lexer.mll[392,11317+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[392,11317+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[392,11317+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[392,11317+4]..[392,11317+12])
                                        Pexp_constant PConst_string("struct",(src/lexer.mll[392,11317+5]..[392,11317+11]),None)
                                      expression (src/lexer.mll[393,11331+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[393,11331+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[393,11331+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[393,11331+4]..[393,11331+10])
                                                Pexp_constant PConst_string("then",(src/lexer.mll[393,11331+5]..[393,11331+9]),None)
                                              expression (src/lexer.mll[394,11343+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[394,11343+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[394,11343+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[394,11343+4]..[394,11343+8])
                                                        Pexp_constant PConst_string("to",(src/lexer.mll[394,11343+5]..[394,11343+7]),None)
                                                      expression (src/lexer.mll[395,11353+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[395,11353+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[395,11353+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[395,11353+4]..[395,11353+10])
                                                                Pexp_constant PConst_string("true",(src/lexer.mll[395,11353+5]..[395,11353+9]),None)
                                                              expression (src/lexer.mll[396,11365+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[396,11365+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[396,11365+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[396,11365+4]..[396,11365+9])
Pexp_constant PConst_string("try",(src/lexer.mll[396,11365+5]..[396,11365+8]),None)
                                                                      expression (src/lexer.mll[397,11376+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[397,11376+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[397,11376+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[397,11376+4]..[397,11376+10])
        Pexp_constant PConst_string("type",(src/lexer.mll[397,11376+5]..[397,11376+9]),None)
      expression (src/lexer.mll[398,11388+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[398,11388+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[398,11388+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[398,11388+4]..[398,11388+9])
                Pexp_constant PConst_string("val",(src/lexer.mll[398,11388+5]..[398,11388+8]),None)
              expression (src/lexer.mll[399,11399+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[399,11399+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[399,11399+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[399,11399+4]..[399,11399+13])
                        Pexp_constant PConst_string("virtual",(src/lexer.mll[399,11399+5]..[399,11399+12]),None)
                      expression (src/lexer.mll[400,11414+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[400,11414+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[400,11414+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[400,11414+4]..[400,11414+10])
                                Pexp_constant PConst_string("when",(src/lexer.mll[400,11414+5]..[400,11414+9]),None)
                              expression (src/lexer.mll[401,11426+4]..[410,11530+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[401,11426+4]..[410,11530+3]) ghost
                                Some
                                  expression (src/lexer.mll[401,11426+4]..[410,11530+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[401,11426+4]..[401,11426+11])
                                        Pexp_constant PConst_string("while",(src/lexer.mll[401,11426+5]..[401,11426+10]),None)
                                      expression (src/lexer.mll[402,11439+4]..[410,11530+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[402,11439+4]..[410,11530+3]) ghost
                                        Some
                                          expression (src/lexer.mll[402,11439+4]..[410,11530+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[402,11439+4]..[402,11439+10])
                                                Pexp_constant PConst_string("with",(src/lexer.mll[402,11439+5]..[402,11439+9]),None)
                                              expression (src/lexer.mll[403,11451+4]..[410,11530+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[403,11451+4]..[410,11530+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[403,11451+4]..[410,11530+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[403,11451+4]..[403,11451+9])
                                                        Pexp_constant PConst_string("mod",(src/lexer.mll[403,11451+5]..[403,11451+8]),None)
                                                      expression (src/lexer.mll[404,11462+4]..[410,11530+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[404,11462+4]..[410,11530+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[404,11462+4]..[410,11530+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[404,11462+4]..[404,11462+10])
                                                                Pexp_constant PConst_string("land",(src/lexer.mll[404,11462+5]..[404,11462+9]),None)
                                                              expression (src/lexer.mll[405,11474+4]..[410,11530+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[405,11474+4]..[410,11530+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[405,11474+4]..[410,11530+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[405,11474+4]..[405,11474+9])
Pexp_constant PConst_string("lor",(src/lexer.mll[405,11474+5]..[405,11474+8]),None)
                                                                      expression (src/lexer.mll[406,11485+4]..[410,11530+3]) ghost
Pexp_construct "::" (src/lexer.mll[406,11485+4]..[410,11530+3]) ghost
Some
  expression (src/lexer.mll[406,11485+4]..[410,11530+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[406,11485+4]..[406,11485+10])
        Pexp_constant PConst_string("lxor",(src/lexer.mll[406,11485+5]..[406,11485+9]),None)
      expression (src/lexer.mll[407,11497+4]..[410,11530+3]) ghost
        Pexp_construct "::" (src/lexer.mll[407,11497+4]..[410,11530+3]) ghost
        Some
          expression (src/lexer.mll[407,11497+4]..[410,11530+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[407,11497+4]..[407,11497+9])
                Pexp_constant PConst_string("lsl",(src/lexer.mll[407,11497+5]..[407,11497+8]),None)
              expression (src/lexer.mll[408,11508+4]..[410,11530+3]) ghost
                Pexp_construct "::" (src/lexer.mll[408,11508+4]..[410,11530+3]) ghost
                Some
                  expression (src/lexer.mll[408,11508+4]..[410,11530+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[408,11508+4]..[408,11508+9])
                        Pexp_constant PConst_string("lsr",(src/lexer.mll[408,11508+5]..[408,11508+8]),None)
                      expression (src/lexer.mll[409,11519+4]..[410,11530+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[409,11519+4]..[410,11530+3]) ghost
                        Some
                          expression (src/lexer.mll[409,11519+4]..[410,11530+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[409,11519+4]..[409,11519+9])
                                Pexp_constant PConst_string("asr",(src/lexer.mll[409,11519+5]..[409,11519+8]),None)
                              expression (src/lexer.mll[410,11530+2]..[410,11530+3]) ghost
                                Pexp_construct "[]" (src/lexer.mll[410,11530+2]..[410,11530+3]) ghost
                                None
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
          ]
    ]
  structure_item (src/lexer.mll[416,11651+0]..[419,11786+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[416,11651+4]..[416,11651+9])
          Ppat_var "table" (src/lexer.mll[416,11651+4]..[416,11651+9])
        expression (src/lexer.mll[416,11651+10]..[419,11786+7]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.mll[416,11651+10]..[416,11651+20])
            Ppat_var "directives" (src/lexer.mll[416,11651+10]..[416,11651+20])
          expression (src/lexer.mll[417,11674+2]..[419,11786+7])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/lexer.mll[417,11674+6]..[417,11674+11])
                  Ppat_var "table" (src/lexer.mll[417,11674+6]..[417,11674+11])
                expression (src/lexer.mll[417,11674+14]..[417,11674+32])
                  Pexp_apply
                  expression (src/lexer.mll[417,11674+14]..[417,11674+28])
                    Pexp_ident "Hashtbl.create" (src/lexer.mll[417,11674+14]..[417,11674+28])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.mll[417,11674+29]..[417,11674+32])
                        Pexp_constant PConst_int (149,None)
                  ]
            ]
            expression (src/lexer.mll[418,11710+2]..[419,11786+7])
              Pexp_sequence
              expression (src/lexer.mll[418,11710+2]..[418,11710+74])
                Pexp_apply
                expression (src/lexer.mll[418,11710+2]..[418,11710+11])
                  Pexp_ident "List.iter" (src/lexer.mll[418,11710+2]..[418,11710+11])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.mll[418,11710+12]..[418,11710+63])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/lexer.mll[418,11710+17]..[418,11710+30])
                        Ppat_tuple
                        [
                          pattern (src/lexer.mll[418,11710+18]..[418,11710+22])
                            Ppat_var "word" (src/lexer.mll[418,11710+18]..[418,11710+22])
                          pattern (src/lexer.mll[418,11710+24]..[418,11710+29])
                            Ppat_var "token" (src/lexer.mll[418,11710+24]..[418,11710+29])
                        ]
                      expression (src/lexer.mll[418,11710+34]..[418,11710+62])
                        Pexp_apply
                        expression (src/lexer.mll[418,11710+34]..[418,11710+45])
                          Pexp_ident "Hashtbl.add" (src/lexer.mll[418,11710+34]..[418,11710+45])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[418,11710+46]..[418,11710+51])
                              Pexp_ident "table" (src/lexer.mll[418,11710+46]..[418,11710+51])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[418,11710+52]..[418,11710+56])
                              Pexp_ident "word" (src/lexer.mll[418,11710+52]..[418,11710+56])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[418,11710+57]..[418,11710+62])
                              Pexp_ident "token" (src/lexer.mll[418,11710+57]..[418,11710+62])
                        ]
                  <arg>
                  Nolabel
                    expression (src/lexer.mll[418,11710+64]..[418,11710+74])
                      Pexp_ident "directives" (src/lexer.mll[418,11710+64]..[418,11710+74])
                ]
              expression (src/lexer.mll[419,11786+2]..[419,11786+7])
                Pexp_ident "table" (src/lexer.mll[419,11786+2]..[419,11786+7])
    ]
  structure_item (src/lexer.mll[421,11795+0]..[435,12109+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[421,11795+4]..[421,11795+14])
          Ppat_var "directives" (src/lexer.mll[421,11795+4]..[421,11795+14])
        expression (src/lexer.mll[422,11812+2]..[435,12109+3])
          Pexp_apply
          expression (src/lexer.mll[422,11812+2]..[422,11812+7])
            Pexp_ident "table" (src/lexer.mll[422,11812+2]..[422,11812+7])
          [
            <arg>
            Nolabel
              expression (src/lexer.mll[422,11812+8]..[435,12109+3])
                Pexp_construct "::" (src/lexer.mll[423,11822+4]..[435,12109+3]) ghost
                Some
                  expression (src/lexer.mll[423,11822+4]..[435,12109+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[423,11822+4]..[423,11822+18])
                        Pexp_tuple
                        [
                          expression (src/lexer.mll[423,11822+4]..[423,11822+11])
                            Pexp_constant PConst_string("token",(src/lexer.mll[423,11822+5]..[423,11822+10]),None)
                          expression (src/lexer.mll[423,11822+13]..[423,11822+18])
                            Pexp_construct "TOKEN" (src/lexer.mll[423,11822+13]..[423,11822+18])
                            None
                        ]
                      expression (src/lexer.mll[424,11842+4]..[435,12109+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[424,11842+4]..[435,12109+3]) ghost
                        Some
                          expression (src/lexer.mll[424,11842+4]..[435,12109+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[424,11842+4]..[424,11842+16])
                                Pexp_tuple
                                [
                                  expression (src/lexer.mll[424,11842+4]..[424,11842+10])
                                    Pexp_constant PConst_string("type",(src/lexer.mll[424,11842+5]..[424,11842+9]),None)
                                  expression (src/lexer.mll[424,11842+12]..[424,11842+16])
                                    Pexp_construct "TYPE" (src/lexer.mll[424,11842+12]..[424,11842+16])
                                    None
                                ]
                              expression (src/lexer.mll[425,11860+4]..[435,12109+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[425,11860+4]..[435,12109+3]) ghost
                                Some
                                  expression (src/lexer.mll[425,11860+4]..[435,12109+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[425,11860+4]..[425,11860+16])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[425,11860+4]..[425,11860+10])
                                            Pexp_constant PConst_string("left",(src/lexer.mll[425,11860+5]..[425,11860+9]),None)
                                          expression (src/lexer.mll[425,11860+12]..[425,11860+16])
                                            Pexp_construct "LEFT" (src/lexer.mll[425,11860+12]..[425,11860+16])
                                            None
                                        ]
                                      expression (src/lexer.mll[426,11878+4]..[435,12109+3]) ghost
                                        Pexp_construct "::" (src/lexer.mll[426,11878+4]..[435,12109+3]) ghost
                                        Some
                                          expression (src/lexer.mll[426,11878+4]..[435,12109+3]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/lexer.mll[426,11878+4]..[426,11878+18])
                                                Pexp_tuple
                                                [
                                                  expression (src/lexer.mll[426,11878+4]..[426,11878+11])
                                                    Pexp_constant PConst_string("right",(src/lexer.mll[426,11878+5]..[426,11878+10]),None)
                                                  expression (src/lexer.mll[426,11878+13]..[426,11878+18])
                                                    Pexp_construct "RIGHT" (src/lexer.mll[426,11878+13]..[426,11878+18])
                                                    None
                                                ]
                                              expression (src/lexer.mll[427,11898+4]..[435,12109+3]) ghost
                                                Pexp_construct "::" (src/lexer.mll[427,11898+4]..[435,12109+3]) ghost
                                                Some
                                                  expression (src/lexer.mll[427,11898+4]..[435,12109+3]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/lexer.mll[427,11898+4]..[427,11898+24])
                                                        Pexp_tuple
                                                        [
                                                          expression (src/lexer.mll[427,11898+4]..[427,11898+14])
                                                            Pexp_constant PConst_string("nonassoc",(src/lexer.mll[427,11898+5]..[427,11898+13]),None)
                                                          expression (src/lexer.mll[427,11898+16]..[427,11898+24])
                                                            Pexp_construct "NONASSOC" (src/lexer.mll[427,11898+16]..[427,11898+24])
                                                            None
                                                        ]
                                                      expression (src/lexer.mll[428,11924+4]..[435,12109+3]) ghost
                                                        Pexp_construct "::" (src/lexer.mll[428,11924+4]..[435,12109+3]) ghost
                                                        Some
                                                          expression (src/lexer.mll[428,11924+4]..[435,12109+3]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/lexer.mll[428,11924+4]..[428,11924+18])
                                                                Pexp_tuple
                                                                [
                                                                  expression (src/lexer.mll[428,11924+4]..[428,11924+11])
                                                                    Pexp_constant PConst_string("start",(src/lexer.mll[428,11924+5]..[428,11924+10]),None)
                                                                  expression (src/lexer.mll[428,11924+13]..[428,11924+18])
                                                                    Pexp_construct "START" (src/lexer.mll[428,11924+13]..[428,11924+18])
                                                                    None
                                                                ]
                                                              expression (src/lexer.mll[429,11944+4]..[435,12109+3]) ghost
                                                                Pexp_construct "::" (src/lexer.mll[429,11944+4]..[435,12109+3]) ghost
                                                                Some
                                                                  expression (src/lexer.mll[429,11944+4]..[435,12109+3]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/lexer.mll[429,11944+4]..[429,11944+16])
Pexp_tuple
[
  expression (src/lexer.mll[429,11944+4]..[429,11944+10])
    Pexp_constant PConst_string("prec",(src/lexer.mll[429,11944+5]..[429,11944+9]),None)
  expression (src/lexer.mll[429,11944+12]..[429,11944+16])
    Pexp_construct "PREC" (src/lexer.mll[429,11944+12]..[429,11944+16])
    None
]
                                                                      expression (src/lexer.mll[430,11962+4]..[435,12109+3]) ghost
Pexp_construct "::" (src/lexer.mll[430,11962+4]..[435,12109+3]) ghost
Some
  expression (src/lexer.mll[430,11962+4]..[435,12109+3]) ghost
    Pexp_tuple
    [
      expression (src/lexer.mll[430,11962+4]..[430,11962+20])
        Pexp_tuple
        [
          expression (src/lexer.mll[430,11962+4]..[430,11962+12])
            Pexp_constant PConst_string("public",(src/lexer.mll[430,11962+5]..[430,11962+11]),None)
          expression (src/lexer.mll[430,11962+14]..[430,11962+20])
            Pexp_construct "PUBLIC" (src/lexer.mll[430,11962+14]..[430,11962+20])
            None
        ]
      expression (src/lexer.mll[431,11984+4]..[435,12109+3]) ghost
        Pexp_construct "::" (src/lexer.mll[431,11984+4]..[435,12109+3]) ghost
        Some
          expression (src/lexer.mll[431,11984+4]..[435,12109+3]) ghost
            Pexp_tuple
            [
              expression (src/lexer.mll[431,11984+4]..[431,11984+26])
                Pexp_tuple
                [
                  expression (src/lexer.mll[431,11984+4]..[431,11984+15])
                    Pexp_constant PConst_string("parameter",(src/lexer.mll[431,11984+5]..[431,11984+14]),None)
                  expression (src/lexer.mll[431,11984+17]..[431,11984+26])
                    Pexp_construct "PARAMETER" (src/lexer.mll[431,11984+17]..[431,11984+26])
                    None
                ]
              expression (src/lexer.mll[432,12012+4]..[435,12109+3]) ghost
                Pexp_construct "::" (src/lexer.mll[432,12012+4]..[435,12109+3]) ghost
                Some
                  expression (src/lexer.mll[432,12012+4]..[435,12109+3]) ghost
                    Pexp_tuple
                    [
                      expression (src/lexer.mll[432,12012+4]..[432,12012+20])
                        Pexp_tuple
                        [
                          expression (src/lexer.mll[432,12012+4]..[432,12012+12])
                            Pexp_constant PConst_string("inline",(src/lexer.mll[432,12012+5]..[432,12012+11]),None)
                          expression (src/lexer.mll[432,12012+14]..[432,12012+20])
                            Pexp_construct "INLINE" (src/lexer.mll[432,12012+14]..[432,12012+20])
                            None
                        ]
                      expression (src/lexer.mll[433,12034+4]..[435,12109+3]) ghost
                        Pexp_construct "::" (src/lexer.mll[433,12034+4]..[435,12109+3]) ghost
                        Some
                          expression (src/lexer.mll[433,12034+4]..[435,12109+3]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexer.mll[433,12034+4]..[433,12034+33])
                                Pexp_tuple
                                [
                                  expression (src/lexer.mll[433,12034+4]..[433,12034+15])
                                    Pexp_constant PConst_string("attribute",(src/lexer.mll[433,12034+5]..[433,12034+14]),None)
                                  expression (src/lexer.mll[433,12034+17]..[433,12034+33])
                                    Pexp_construct "PERCENTATTRIBUTE" (src/lexer.mll[433,12034+17]..[433,12034+33])
                                    None
                                ]
                              expression (src/lexer.mll[434,12069+4]..[435,12109+3]) ghost
                                Pexp_construct "::" (src/lexer.mll[434,12069+4]..[435,12109+3]) ghost
                                Some
                                  expression (src/lexer.mll[434,12069+4]..[435,12109+3]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[434,12069+4]..[434,12069+38])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[434,12069+4]..[434,12069+21])
                                            Pexp_constant PConst_string("on_error_reduce",(src/lexer.mll[434,12069+5]..[434,12069+20]),None)
                                          expression (src/lexer.mll[434,12069+23]..[434,12069+38])
                                            Pexp_construct "ON_ERROR_REDUCE" (src/lexer.mll[434,12069+23]..[434,12069+38])
                                            None
                                        ]
                                      expression (src/lexer.mll[435,12109+2]..[435,12109+3]) ghost
                                        Pexp_construct "[]" (src/lexer.mll[435,12109+2]..[435,12109+3]) ghost
                                        None
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                    ]
          ]
    ]
  structure_item (src/lexer.mll[441,12230+0]..[446,12336+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[441,12230+4]..[441,12230+22])
          Ppat_var "char_for_backslash" (src/lexer.mll[441,12230+4]..[441,12230+22])
        expression (src/lexer.mll[441,12230+25]..[446,12336+12])
          Pexp_function
          [
            <case>
              pattern (src/lexer.mll[442,12264+4]..[442,12264+7])
                Ppat_constant PConst_char 6e
              expression (src/lexer.mll[442,12264+11]..[442,12264+17])
                Pexp_constant PConst_char 0a
            <case>
              pattern (src/lexer.mll[443,12282+4]..[443,12282+7])
                Ppat_constant PConst_char 72
              expression (src/lexer.mll[443,12282+11]..[443,12282+17])
                Pexp_constant PConst_char 0d
            <case>
              pattern (src/lexer.mll[444,12300+4]..[444,12300+7])
                Ppat_constant PConst_char 62
              expression (src/lexer.mll[444,12300+11]..[444,12300+17])
                Pexp_constant PConst_char 08
            <case>
              pattern (src/lexer.mll[445,12318+4]..[445,12318+7])
                Ppat_constant PConst_char 74
              expression (src/lexer.mll[445,12318+11]..[445,12318+17])
                Pexp_constant PConst_char 09
            <case>
              pattern (src/lexer.mll[446,12336+4]..[446,12336+5])
                Ppat_var "c" (src/lexer.mll[446,12336+4]..[446,12336+5])
              expression (src/lexer.mll[446,12336+11]..[446,12336+12])
                Pexp_ident "c" (src/lexer.mll[446,12336+11]..[446,12336+12])
          ]
    ]
  structure_item (src/lexer.ml[438,12372+0]..[1694,99263+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexer.ml[438,12372+4]..[438,12372+22])
          Ppat_var "__ocaml_lex_tables" (src/lexer.ml[438,12372+4]..[438,12372+22])
        expression (src/lexer.ml[438,12372+25]..[1694,99263+1])
          Pexp_record
          [
            "Lexing.lex_base" (src/lexer.ml[439,12399+2]..[439,12399+17])
              expression (src/lexer.ml[440,12419+3]..[472,14659+21])
                Pexp_constant PConst_string("\000\000\226\255\227\255\000\000\229\255\231\255\003\000\001\000\235\255\003\000\236\255\209\000\161\001q\002A\003\243\255\244\255\245\255\246\255\247\255\248\255\004\000\001\000\251\255\031\000\253\255\019\004\029\000\230\255\254\255\227\004\181\005\163\006\006\000\241\255\240\255\232\255s\007C\b\233\255\011\000\004\000\012\000\252\255\253\255\001\000\006\000\255\255\254\255|\000\250\255\251\255\007\000\252\255\007\000\254\255 \000\"\000\255\255\253\255`\001\243\255\244\255\b\000\245\255\247\255\248\255\236\001\t\000\000\000\254\255\255\255\246\255\r\000\017\000\019\000\022\000`\000\"\000\023\000\019\000&\000\028\000 \000\026\000\026\0009\000)\000(\000.\0009\0001\000.\000\012\000z\bQ\tz\000#\001\251\255\251\255/\000B\000-\000A\0005\0006\000E\000C\000\249\255D\000C\000T\000V\000V\000F\000T\000O\000J\000\132\000\168\000\156\000\157\000\161\000\159\000\250\255\000\003\243\255\244\255\t\000\245\255\247\255\248\255\140\003\253\255\254\255\011\000\246\255\186\000\190\000\192\000\242\000>\001\206\000\224\000\189\000\237\000\225\000\229\000\223\000\233\000\254\000\238\000\237\000\243\000\254\000\246\000\244\000\015\000\136\t_\n\246\001\007\002\251\255\251\255\245\000\b\001\244\000\019\001\007\001\b\001\012\001\011\001\249\255\012\001\011\001\028\001\030\001\030\001\016\001!\001\028\001\023\001\026\001)\001\029\001\030\0019\001V\001\250\255U\011\246\255\247\255\n\000\248\255\250\255\251\255\014\000\253\255\254\255\255\255\249\255\228\002\249\255\250\255\r\000\251\255\252\255\253\255\015\000\179\001\255\255\254\255\188\003\251\255\252\255\016\000\254\255\242\001\255\255\253\255\017\000\142\004\249\255\250\255\018\000\251\255A\011\255\255\252\255\253\255\254\255\202\002\253\255I\011\255\255\254\255\236\002\000\000\214\001\183\001\146\004\184\0017\005\204\002\215\001\218\001\255\255\n\002\017\002\254\255\011\002\000\006\012\002\161\002\253\255\254\255\019\000\255\255",(src/lexer.ml[440,12419+4]..[472,14659+20]),None)
            "Lexing.lex_backtrk" (src/lexer.ml[473,14682+2]..[473,14682+20])
              expression (src/lexer.ml[474,14705+3]..[506,16945+21])
                Pexp_constant PConst_string("\255\255\255\255\255\255\029\000\255\255\255\255\021\000\020\000\255\255\029\000\255\255\018\000\017\000\017\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\255\255\003\000\255\255\029\000\255\255\255\255\255\255\000\000\255\255\027\000\027\000\255\255\255\255\255\255\017\000\016\000\255\255\255\255\020\000\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\255\255\255\255\255\255\255\255\nnsrc/lexer.ml[474,14705+4]..[506,16945+20]),None)
            "Lexing.lex_default" (src/lexer.ml[507,16968+2]..[507,16968+20])
              expression (src/lexer.ml[508,16991+3]..[540,19231+21])
                Pexp_constant PConst_string~src/lexer.ml[508,16991+4]..[540,19231+20]),None)
            "Lexing.lex_trans" (src/lexer.ml[541,19254+2]..[541,19254+18])
              expression (src/lexer.ml[542,19275+3]..[936,46855+53])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\b\000\b\000\006\000\007\000\b\000!\000/\0005\000@\000\129\000\193\000\b\000/\000\205\000)\000.\000\216\000\216\000\225\000\001\001\000\000\000\000\006\000\000\000\n\000\006\000\000\000\026\000!\000\249\000\021\000\020\000\017\000\016\000\023\000'\000$\000\t\0000\000;\000(\000H\000^\000\136\000-\000\158\000\200\000\211\000\024\000\025\000\005\000\022\000#\000\018\000\031\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\"\000\031\000:\000\014\000:\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\004\000\019\000F\000\015\000q\000p\000o\000J\000m\000Q\000P\0005\000e\000R\0004\000N\000S\000T\000U\000V\000O\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000W\000X\000Y\000Z\000[\000d\000\\\000]\000]\000f\0006\000g\000h\000i\000j\0009\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000k\000l\000n\000Y\000Y\000]\0007\000r\000s\000t\000u\000v\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\0008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000w\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\002\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255,\000x\000y\000z\000{\000|\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\177\000\176\000\175\000\173\000\011\000\165\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000b\000\145\000\144\000\146\000\147\000\148\000\149\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a`csrc/lexer.ml[542,19275+4]..[936,46855+52]),None)
            "Lexing.lex_check" (src/lexer.ml[937,46910+2]..[937,46910+18])
              expression (src/lexer.ml[938,46931+3]..[1332,74511+53])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\007\000\006\000\000\000)\000!\000.\0004\000?\000\128\000\192\000(\000*\000\204\000(\000*\000\215\000\220\000\224\000\000\001\255\255\255\255\000\000\255\255\000\000\006\000\255\255\000\000!\000\237\000\000\000\000\000\000\000\000\000\000\000\t\000\021\000\000\000-\0006\000\td\000e\0001\000f\000g\000h\000i\0001\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000j\000k\000m\000n\000o\000p\0001\000q\000r\000s\000t\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000(\000*\000w\000x\000y\000z\000{\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\137\000\138\000\139\000\142\000\011\000\144\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000a\000\143\000\143\000\145\000\146\000\147\000\148\000a\000a\000a\000a\000a\000a\000a\000a\000a\000ar\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\253\000\255\255\255\255\253\000\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\231\000\255\255\201\000\255\255\255\255\201\000\217\000\243\000\255\255\255\255\236\000\255\255\255\255\236\000\255\255\255\255\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\201\000\255\255\255\255\255\255}\000\201\000\201\000}\000\201\000\255\255\255\255\255\255\255\255\236\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}\000\255\255\231\000}\000}\000}\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\236\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000}\000\255\255}}src/lexer.ml[938,46931+4]..[1332,74511+52]),None)
            "Lexing.lex_base_code" (src/lexer.ml[1333,74566+2]..[1333,74566+22])
              expression (src/lexer.ml[1334,74591+3]..[1366,76831+21])
                Pexp_constant PConst_stringb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\n\000\000\000\t\001\217\001N\000X\0004\000C\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000%\000\001\000\016\002\224\002i\000ssrc/lexer.ml[1334,74591+4]..[1366,76831+20]),None)
            "Lexing.lex_backtrk_code" (src/lexer.ml[1367,76854+2]..[1367,76854+25])
              expression (src/lexer.ml[1368,76882+3]..[1400,79122+21])
                Pexp_constant PConst_stringsrc/lexer.ml[1368,76882+4]..[1400,79122+20]),None)
            "Lexing.lex_default_code" (src/lexer.ml[1401,79145+2]..[1401,79145+25])
              expression (src/lexer.ml[1402,79173+3]..[1434,81413+21])
                Pexp_constant PConst_stringsrc/lexer.ml[1402,79173+4]..[1434,81413+20]),None)
            "Lexing.lex_trans_code" (src/lexer.ml[1435,81436+2]..[1435,81436+23])
              expression (src/lexer.ml[1436,81462+3]..[1560,90142+13])
                Pexp_constant PConst_stringsrc/lexer.ml[1436,81462+4]..[1560,90142+12]),None)
            "Lexing.lex_check_code" (src/lexer.ml[1561,90157+2]..[1561,90157+23])
              expression (src/lexer.ml[1562,90183+3]..[1686,98863+13])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255<\000\000\000}`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000d\000n\000o\000psrc/lexer.ml[1562,90183+4]..[1686,98863+12]),None)
            "Lexing.lex_code" (src/lexer.ml[1687,98878+2]..[1687,98878+17])
              expression (src/lexer.ml[1688,98898+3]..[1693,99248+13])
                Pexp_constant PConst_string("\255\002\255\255\003\255\255\000\002\001\003\255\n\255\t\255\b\255\255\n\255\t\255\255\011\255\255\007\255\003\255\005\b\004\n\001\t\000\011\255\012\255\255\014\255\255\r\255\255\015\255\255\007\255\005\b\004\n\003\014\002\015\001\t\000\011\255\003\255\007\012\006\r\005\b\004\n\001\t\000\011\255",(src/lexer.ml[1688,98898+4]..[1693,99248+12]),None)
          ]
          None
    ]
  structure_item (src/lexer.ml[1696,99266+0]..[2486,121371+53])
    Pstr_value Rec
    [
      <def>
        pattern (src/lexer.ml[1696,99266+8]..[1696,99266+12])
          Ppat_var "main" (src/lexer.ml[1696,99266+8]..[1696,99266+12])
        expression (src/lexer.ml[1696,99266+13]..[1699,99415+30]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1696,99266+13]..[1696,99266+19])
            Ppat_var "lexbuf" (src/lexer.ml[1696,99266+13]..[1696,99266+19])
          expression (src/lexer.ml[1697,99288+2]..[1699,99415+30])
            Pexp_sequence
            expression (src/lexer.ml[1697,99288+2]..[1697,99288+44])
              Pexp_setfield
              expression (src/lexer.ml[1697,99288+2]..[1697,99288+8])
                Pexp_ident "lexbuf" (src/lexer.ml[1697,99288+2]..[1697,99288+8])
              "Lexing.lex_mem" (src/lexer.ml[1697,99288+9]..[1697,99288+23])
              expression (src/lexer.ml[1697,99288+27]..[1697,99288+44])
                Pexp_apply
                expression (src/lexer.ml[1697,99288+27]..[1697,99288+37])
                  Pexp_ident "Array.make" (src/lexer.ml[1697,99288+27]..[1697,99288+37])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1697,99288+38]..[1697,99288+39])
                      Pexp_constant PConst_int (4,None)
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1697,99288+40]..[1697,99288+44])
                      Pexp_constant PConst_int (-1,None)
                ]
            expression (src/lexer.ml[1698,99355+2]..[1699,99415+30])
              Pexp_sequence
              expression (src/lexer.ml[1698,99355+2]..[1698,99355+57])
                Pexp_apply
                expression (src/lexer.ml[1698,99355+2]..[1698,99355+57]) ghost
                  Pexp_ident "Array.set" (src/lexer.ml[1698,99355+2]..[1698,99355+57]) ghost
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1698,99355+2]..[1698,99355+23])
                      Pexp_field
                      expression (src/lexer.ml[1698,99355+2]..[1698,99355+8])
                        Pexp_ident "lexbuf" (src/lexer.ml[1698,99355+2]..[1698,99355+8])
                      "Lexing.lex_mem" (src/lexer.ml[1698,99355+9]..[1698,99355+23])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1698,99355+25]..[1698,99355+26])
                      Pexp_constant PConst_int (2,None)
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1698,99355+31]..[1698,99355+57])
                      Pexp_field
                      expression (src/lexer.ml[1698,99355+31]..[1698,99355+37])
                        Pexp_ident "lexbuf" (src/lexer.ml[1698,99355+31]..[1698,99355+37])
                      "Lexing.lex_curr_pos" (src/lexer.ml[1698,99355+38]..[1698,99355+57])
                ]
              expression (src/lexer.ml[1699,99415+1]..[1699,99415+30])
                Pexp_apply
                expression (src/lexer.ml[1699,99415+1]..[1699,99415+21])
                  Pexp_ident "__ocaml_lex_main_rec" (src/lexer.ml[1699,99415+1]..[1699,99415+21])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1699,99415+22]..[1699,99415+28])
                      Pexp_ident "lexbuf" (src/lexer.ml[1699,99415+22]..[1699,99415+28])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1699,99415+29]..[1699,99415+30])
                      Pexp_constant PConst_int (0,None)
                ]
      <def>
        pattern (src/lexer.ml[1700,99446+4]..[1700,99446+24])
          Ppat_var "__ocaml_lex_main_rec" (src/lexer.ml[1700,99446+4]..[1700,99446+24])
        expression (src/lexer.ml[1700,99446+25]..[1937,105734+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1700,99446+25]..[1700,99446+31])
            Ppat_var "lexbuf" (src/lexer.ml[1700,99446+25]..[1700,99446+31])
          expression (src/lexer.ml[1700,99446+32]..[1937,105734+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[1700,99446+32]..[1700,99446+49])
              Ppat_var "__ocaml_lex_state" (src/lexer.ml[1700,99446+32]..[1700,99446+49])
            expression (src/lexer.ml[1701,99498+2]..[1937,105734+51])
              Pexp_match
              expression (src/lexer.ml[1701,99498+8]..[1701,99498+69])
                Pexp_apply
                expression (src/lexer.ml[1701,99498+8]..[1701,99498+25])
                  Pexp_ident "Lexing.new_engine" (src/lexer.ml[1701,99498+8]..[1701,99498+25])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1701,99498+26]..[1701,99498+44])
                      Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[1701,99498+26]..[1701,99498+44])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1701,99498+45]..[1701,99498+62])
                      Pexp_ident "__ocaml_lex_state" (src/lexer.ml[1701,99498+45]..[1701,99498+62])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[1701,99498+63]..[1701,99498+69])
                      Pexp_ident "lexbuf" (src/lexer.ml[1701,99498+63]..[1701,99498+69])
                ]
              [
                <case>
                  pattern (src/lexer.ml[1702,99573+8]..[1702,99573+9])
                    Ppat_constant PConst_int (0,None)
                  expression (src/lexer.ml[1703,99586+0]..src/lexer.mll[491,99822+74])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[489,99612+21]..[489,99612+30])
                          Ppat_var "directive" (src/lexer.mll[489,99612+21]..[489,99612+30])
                        expression (src/lexer.ml[1707,99665+2]..[1707,99665+87])
                          Pexp_apply
                          expression (src/lexer.ml[1707,99665+2]..[1707,99665+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[1707,99665+2]..[1707,99665+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1707,99665+20]..[1707,99665+26])
                                Pexp_ident "lexbuf" (src/lexer.ml[1707,99665+20]..[1707,99665+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1707,99665+27]..[1707,99665+60])
                                Pexp_apply
                                expression (src/lexer.ml[1707,99665+56]..[1707,99665+57])
                                  Pexp_ident "+" (src/lexer.ml[1707,99665+56]..[1707,99665+57])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1707,99665+28]..[1707,99665+55])
                                      Pexp_field
                                      expression (src/lexer.ml[1707,99665+28]..[1707,99665+34])
                                        Pexp_ident "lexbuf" (src/lexer.ml[1707,99665+28]..[1707,99665+34])
                                      "Lexing.lex_start_pos" (src/lexer.ml[1707,99665+35]..[1707,99665+55])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1707,99665+58]..[1707,99665+59])
                                      Pexp_constant PConst_int (1,None)
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1707,99665+61]..[1707,99665+87])
                                Pexp_field
                                expression (src/lexer.ml[1707,99665+61]..[1707,99665+67])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1707,99665+61]..[1707,99665+67])
                                "Lexing.lex_curr_pos" (src/lexer.ml[1707,99665+68]..[1707,99665+87])
                          ]
                    ]
                    expression (src/lexer.mll[490,99778+4]..[491,99822+74])
                      Pexp_try
                      expression (src/lexer.mll[490,99778+10]..[490,99778+43])
                        Pexp_apply
                        expression (src/lexer.mll[490,99778+10]..[490,99778+22])
                          Pexp_ident "Hashtbl.find" (src/lexer.mll[490,99778+10]..[490,99778+22])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[490,99778+23]..[490,99778+33])
                              Pexp_ident "directives" (src/lexer.mll[490,99778+23]..[490,99778+33])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[490,99778+34]..[490,99778+43])
                              Pexp_ident "directive" (src/lexer.mll[490,99778+34]..[490,99778+43])
                        ]
                      [
                        <case>
                          pattern (src/lexer.mll[491,99822+11]..[491,99822+20])
                            Ppat_construct "Not_found" (src/lexer.mll[491,99822+11]..[491,99822+20])
                            None
                          expression (src/lexer.mll[491,99822+24]..[491,99822+72])
                            Pexp_apply
                            expression (src/lexer.mll[491,99822+24]..[491,99822+30])
                              Pexp_ident "error2" (src/lexer.mll[491,99822+24]..[491,99822+30])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[491,99822+31]..[491,99822+37])
                                  Pexp_ident "lexbuf" (src/lexer.mll[491,99822+31]..[491,99822+37])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[491,99822+38]..[491,99822+62])
                                  Pexp_constant PConst_string("unknown directive: %s.",(src/lexer.mll[491,99822+39]..[491,99822+61]),None)
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[491,99822+63]..[491,99822+72])
                                  Pexp_ident "directive" (src/lexer.mll[491,99822+63]..[491,99822+72])
                            ]
                      ]
                <case>
                  pattern (src/lexer.ml[1713,99920+4]..[1713,99920+5])
                    Ppat_constant PConst_int (1,None)
                  expression (src/lexer.mll[493,99951+4]..[503,100488+10])
                    Pexp_construct "PERCENTPERCENT" (src/lexer.mll[499,100319+6]..[499,100319+20])
                    Some
                      expression (src/lexer.mll[499,100319+21]..[503,100488+8])
                        Pexp_lazy
                        expression (src/lexer.mll[499,100319+27]..[503,100488+7])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[500,100348+12]..[500,100348+22])
                                Ppat_var "openingpos" (src/lexer.mll[500,100348+12]..[500,100348+22])
                              expression (src/lexer.mll[500,100348+25]..[500,100348+44])
                                Pexp_apply
                                expression (src/lexer.mll[500,100348+25]..[500,100348+37])
                                  Pexp_ident "lexeme_end_p" (src/lexer.mll[500,100348+25]..[500,100348+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[500,100348+38]..[500,100348+44])
                                      Pexp_ident "lexbuf" (src/lexer.mll[500,100348+38]..[500,100348+44])
                                ]
                          ]
                          expression (src/lexer.mll[501,100396+8]..[502,100438+49])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[501,100396+12]..[501,100396+22])
                                  Ppat_var "closingpos" (src/lexer.mll[501,100396+12]..[501,100396+22])
                                expression (src/lexer.mll[501,100396+25]..[501,100396+38])
                                  Pexp_apply
                                  expression (src/lexer.mll[501,100396+25]..[501,100396+31])
                                    Pexp_ident "finish" (src/lexer.mll[501,100396+25]..[501,100396+31])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[501,100396+32]..[501,100396+38])
                                        Pexp_ident "lexbuf" (src/lexer.mll[501,100396+32]..[501,100396+38])
                                  ]
                            ]
                            expression (src/lexer.mll[502,100438+8]..[502,100438+49])
                              Pexp_apply
                              expression (src/lexer.mll[502,100438+8]..[502,100438+18])
                                Pexp_ident "mk_stretch" (src/lexer.mll[502,100438+8]..[502,100438+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[502,100438+19]..[502,100438+29])
                                    Pexp_ident "openingpos" (src/lexer.mll[502,100438+19]..[502,100438+29])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[502,100438+30]..[502,100438+40])
                                    Pexp_ident "closingpos" (src/lexer.mll[502,100438+30]..[502,100438+40])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[502,100438+41]..[502,100438+46])
                                    Pexp_construct "false" (src/lexer.mll[502,100438+41]..[502,100438+46])
                                    None
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[502,100438+47]..[502,100438+49])
                                    Pexp_construct "[]" (src/lexer.mll[502,100438+47]..[502,100438+49])
                                    None
                              ]
                <case>
                  pattern (src/lexer.ml[1728,100522+4]..[1728,100522+5])
                    Ppat_constant PConst_int (2,None)
                  expression (src/lexer.mll[505,100553+4]..[505,100553+12])
                    Pexp_construct "SEMI" (src/lexer.mll[505,100553+6]..[505,100553+10])
                    None
                <case>
                  pattern (src/lexer.ml[1733,100589+4]..[1733,100589+5])
                    Ppat_constant PConst_int (3,None)
                  expression (src/lexer.mll[507,100620+4]..[507,100620+13])
                    Pexp_construct "COLON" (src/lexer.mll[507,100620+6]..[507,100620+11])
                    None
                <case>
                  pattern (src/lexer.ml[1738,100657+4]..[1738,100657+5])
                    Ppat_constant PConst_int (4,None)
                  expression (src/lexer.mll[509,100688+4]..[509,100688+13])
                    Pexp_construct "COMMA" (src/lexer.mll[509,100688+6]..[509,100688+11])
                    None
                <case>
                  pattern (src/lexer.ml[1743,100725+4]..[1743,100725+5])
                    Ppat_constant PConst_int (5,None)
                  expression (src/lexer.mll[511,100756+4]..[511,100756+13])
                    Pexp_construct "EQUAL" (src/lexer.mll[511,100756+6]..[511,100756+11])
                    None
                <case>
                  pattern (src/lexer.ml[1748,100793+4]..[1748,100793+5])
                    Ppat_constant PConst_int (6,None)
                  expression (src/lexer.mll[513,100824+4]..[513,100824+14])
                    Pexp_construct "LPAREN" (src/lexer.mll[513,100824+6]..[513,100824+12])
                    None
                <case>
                  pattern (src/lexer.ml[1753,100862+4]..[1753,100862+5])
                    Ppat_constant PConst_int (7,None)
                  expression (src/lexer.mll[515,100893+4]..[515,100893+14])
                    Pexp_construct "RPAREN" (src/lexer.mll[515,100893+6]..[515,100893+12])
                    None
                <case>
                  pattern (src/lexer.ml[1758,100931+4]..[1758,100931+5])
                    Ppat_constant PConst_int (8,None)
                  expression (src/lexer.mll[517,100962+4]..[517,100962+11])
                    Pexp_construct "BAR" (src/lexer.mll[517,100962+6]..[517,100962+9])
                    None
                <case>
                  pattern (src/lexer.ml[1763,100997+4]..[1763,100997+5])
                    Ppat_constant PConst_int (9,None)
                  expression (src/lexer.mll[519,101028+4]..[519,101028+16])
                    Pexp_construct "QUESTION" (src/lexer.mll[519,101028+6]..[519,101028+14])
                    None
                <case>
                  pattern (src/lexer.ml[1768,101068+4]..[1768,101068+6])
                    Ppat_constant PConst_int (10,None)
                  expression (src/lexer.mll[521,101100+4]..[521,101100+12])
                    Pexp_construct "STAR" (src/lexer.mll[521,101100+6]..[521,101100+10])
                    None
                <case>
                  pattern (src/lexer.ml[1773,101136+4]..[1773,101136+6])
                    Ppat_constant PConst_int (11,None)
                  expression (src/lexer.mll[523,101168+4]..[523,101168+12])
                    Pexp_construct "PLUS" (src/lexer.mll[523,101168+6]..[523,101168+10])
                    None
                <case>
                  pattern (src/lexer.ml[1778,101204+4]..[1778,101204+6])
                    Ppat_constant PConst_int (12,None)
                  expression (src/lexer.mll[525,101236+4]..[525,101236+13])
                    Pexp_construct "TILDE" (src/lexer.mll[525,101236+6]..[525,101236+11])
                    None
                <case>
                  pattern (src/lexer.ml[1783,101273+4]..[1783,101273+6])
                    Ppat_constant PConst_int (13,None)
                  expression (src/lexer.mll[527,101305+4]..[527,101305+18])
                    Pexp_construct "UNDERSCORE" (src/lexer.mll[527,101305+6]..[527,101305+16])
                    None
                <case>
                  pattern (src/lexer.ml[1788,101347+4]..[1788,101347+6])
                    Ppat_constant PConst_int (14,None)
                  expression (src/lexer.mll[529,101379+4]..[529,101379+18])
                    Pexp_construct "COLONEQUAL" (src/lexer.mll[529,101379+6]..[529,101379+16])
                    None
                <case>
                  pattern (src/lexer.ml[1793,101421+4]..[1793,101421+6])
                    Ppat_constant PConst_int (15,None)
                  expression (src/lexer.mll[531,101453+4]..[531,101453+18])
                    Pexp_construct "EQUALEQUAL" (src/lexer.mll[531,101453+6]..[531,101453+16])
                    None
                <case>
                  pattern (src/lexer.ml[1798,101495+4]..[1798,101495+6])
                    Ppat_constant PConst_int (16,None)
                  expression (src/lexer.mll[533,101527+4]..[533,101527+11])
                    Pexp_construct "LET" (src/lexer.mll[533,101527+6]..[533,101527+9])
                    None
                <case>
                  pattern (src/lexer.ml[1803,101562+4]..[1803,101562+6])
                    Ppat_constant PConst_int (17,None)
                  expression (src/lexer.ml[1804,101572+0]..src/lexer.mll[539,101904+5])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[534,101598+29]..[534,101598+31])
                          Ppat_var "id" (src/lexer.mll[534,101598+29]..[534,101598+31])
                        expression (src/lexer.ml[1808,101652+2]..[1808,101652+81])
                          Pexp_apply
                          expression (src/lexer.ml[1808,101652+2]..[1808,101652+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[1808,101652+2]..[1808,101652+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1808,101652+20]..[1808,101652+26])
                                Pexp_ident "lexbuf" (src/lexer.ml[1808,101652+20]..[1808,101652+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1808,101652+27]..[1808,101652+54])
                                Pexp_field
                                expression (src/lexer.ml[1808,101652+27]..[1808,101652+33])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1808,101652+27]..[1808,101652+33])
                                "Lexing.lex_start_pos" (src/lexer.ml[1808,101652+34]..[1808,101652+54])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1808,101652+55]..[1808,101652+81])
                                Pexp_field
                                expression (src/lexer.ml[1808,101652+55]..[1808,101652+61])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1808,101652+55]..[1808,101652+61])
                                "Lexing.lex_curr_pos" (src/lexer.ml[1808,101652+62]..[1808,101652+81])
                          ]
                    ]
                    expression (src/lexer.mll[535,101759+4]..[539,101904+5])
                      Pexp_ifthenelse
                      expression (src/lexer.mll[535,101759+9]..[535,101759+32])
                        Pexp_apply
                        expression (src/lexer.mll[535,101759+9]..[535,101759+20])
                          Pexp_ident "Hashtbl.mem" (src/lexer.mll[535,101759+9]..[535,101759+20])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[535,101759+21]..[535,101759+29])
                              Pexp_ident "reserved" (src/lexer.mll[535,101759+21]..[535,101759+29])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[535,101759+30]..[535,101759+32])
                              Pexp_ident "id" (src/lexer.mll[535,101759+30]..[535,101759+32])
                        ]
                      expression (src/lexer.mll[536,101797+8]..[536,101797+55])
                        Pexp_apply
                        expression (src/lexer.mll[536,101797+8]..[536,101797+14])
                          Pexp_ident "error2" (src/lexer.mll[536,101797+8]..[536,101797+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[536,101797+15]..[536,101797+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[536,101797+15]..[536,101797+21])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[536,101797+22]..[536,101797+55])
                              Pexp_constant PConst_string("this is an OCaml reserved word.",(src/lexer.mll[536,101797+23]..[536,101797+54]),None)
                        ]
                      Some
                        expression (src/lexer.mll[538,101864+8]..[538,101864+39])
                          Pexp_construct "LID" (src/lexer.mll[538,101864+8]..[538,101864+11])
                          Some
                            expression (src/lexer.mll[538,101864+12]..[538,101864+39])
                              Pexp_apply
                              expression (src/lexer.mll[538,101864+13]..[538,101864+21])
                                Pexp_ident "with_pos" (src/lexer.mll[538,101864+13]..[538,101864+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[538,101864+22]..[538,101864+35])
                                    Pexp_apply
                                    expression (src/lexer.mll[538,101864+23]..[538,101864+27])
                                      Pexp_ident "cpos" (src/lexer.mll[538,101864+23]..[538,101864+27])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[538,101864+28]..[538,101864+34])
                                          Pexp_ident "lexbuf" (src/lexer.mll[538,101864+28]..[538,101864+34])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[538,101864+36]..[538,101864+38])
                                    Pexp_ident "id" (src/lexer.mll[538,101864+36]..[538,101864+38])
                              ]
                <case>
                  pattern (src/lexer.ml[1817,101933+4]..[1817,101933+6])
                    Ppat_constant PConst_int (18,None)
                  expression (src/lexer.ml[1818,101943+0]..src/lexer.mll[541,102130+39])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[540,101969+29]..[540,101969+31])
                          Ppat_var "id" (src/lexer.mll[540,101969+29]..[540,101969+31])
                        expression (src/lexer.ml[1822,102023+2]..[1822,102023+81])
                          Pexp_apply
                          expression (src/lexer.ml[1822,102023+2]..[1822,102023+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[1822,102023+2]..[1822,102023+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1822,102023+20]..[1822,102023+26])
                                Pexp_ident "lexbuf" (src/lexer.ml[1822,102023+20]..[1822,102023+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1822,102023+27]..[1822,102023+54])
                                Pexp_field
                                expression (src/lexer.ml[1822,102023+27]..[1822,102023+33])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1822,102023+27]..[1822,102023+33])
                                "Lexing.lex_start_pos" (src/lexer.ml[1822,102023+34]..[1822,102023+54])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1822,102023+55]..[1822,102023+81])
                                Pexp_field
                                expression (src/lexer.ml[1822,102023+55]..[1822,102023+61])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1822,102023+55]..[1822,102023+61])
                                "Lexing.lex_curr_pos" (src/lexer.ml[1822,102023+62]..[1822,102023+81])
                          ]
                    ]
                    expression (src/lexer.mll[541,102130+4]..[541,102130+39])
                      Pexp_construct "UID" (src/lexer.mll[541,102130+6]..[541,102130+9])
                      Some
                        expression (src/lexer.mll[541,102130+10]..[541,102130+37])
                          Pexp_apply
                          expression (src/lexer.mll[541,102130+11]..[541,102130+19])
                            Pexp_ident "with_pos" (src/lexer.mll[541,102130+11]..[541,102130+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[541,102130+20]..[541,102130+33])
                                Pexp_apply
                                expression (src/lexer.mll[541,102130+21]..[541,102130+25])
                                  Pexp_ident "cpos" (src/lexer.mll[541,102130+21]..[541,102130+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[541,102130+26]..[541,102130+32])
                                      Pexp_ident "lexbuf" (src/lexer.mll[541,102130+26]..[541,102130+32])
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[541,102130+34]..[541,102130+36])
                                Pexp_ident "id" (src/lexer.mll[541,102130+34]..[541,102130+36])
                          ]
                <case>
                  pattern (src/lexer.ml[1827,102193+4]..[1827,102193+6])
                    Ppat_constant PConst_int (19,None)
                  expression (src/lexer.mll[546,102225+4]..[551,102482+29])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[546,102225+10]..[546,102225+16])
                          Ppat_var "buffer" (src/lexer.mll[546,102225+10]..[546,102225+16])
                        expression (src/lexer.mll[546,102225+19]..[546,102225+35])
                          Pexp_apply
                          expression (src/lexer.mll[546,102225+19]..[546,102225+32])
                            Pexp_ident "Buffer.create" (src/lexer.mll[546,102225+19]..[546,102225+32])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[546,102225+33]..[546,102225+35])
                                Pexp_constant PConst_int (16,None)
                          ]
                    ]
                    expression (src/lexer.mll[547,102264+6]..[551,102482+27])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[547,102264+10]..[547,102264+20])
                            Ppat_var "openingpos" (src/lexer.mll[547,102264+10]..[547,102264+20])
                          expression (src/lexer.mll[547,102264+23]..[547,102264+44])
                            Pexp_apply
                            expression (src/lexer.mll[547,102264+23]..[547,102264+37])
                              Pexp_ident "lexeme_start_p" (src/lexer.mll[547,102264+23]..[547,102264+37])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[547,102264+38]..[547,102264+44])
                                  Pexp_ident "lexbuf" (src/lexer.mll[547,102264+38]..[547,102264+44])
                            ]
                      ]
                      expression (src/lexer.mll[548,102312+6]..[551,102482+27])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[548,102312+10]..[548,102312+17])
                              Ppat_var "content" (src/lexer.mll[548,102312+10]..[548,102312+17])
                            expression (src/lexer.mll[548,102312+20]..[548,102312+58])
                              Pexp_apply
                              expression (src/lexer.mll[548,102312+20]..[548,102312+33])
                                Pexp_ident "record_string" (src/lexer.mll[548,102312+20]..[548,102312+33])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[548,102312+34]..[548,102312+44])
                                    Pexp_ident "openingpos" (src/lexer.mll[548,102312+34]..[548,102312+44])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[548,102312+45]..[548,102312+51])
                                    Pexp_ident "buffer" (src/lexer.mll[548,102312+45]..[548,102312+51])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[548,102312+52]..[548,102312+58])
                                    Pexp_ident "lexbuf" (src/lexer.mll[548,102312+52]..[548,102312+58])
                              ]
                        ]
                        expression (src/lexer.mll[549,102374+6]..[551,102482+27])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[549,102374+10]..[549,102374+12])
                                Ppat_var "id" (src/lexer.mll[549,102374+10]..[549,102374+12])
                              expression (src/lexer.mll[549,102374+15]..[549,102374+46])
                                Pexp_apply
                                expression (src/lexer.mll[549,102374+15]..[549,102374+29])
                                  Pexp_ident "Printf.sprintf" (src/lexer.mll[549,102374+15]..[549,102374+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[549,102374+30]..[549,102374+38])
                                      Pexp_constant PConst_string("\"%s\"",(src/lexer.mll[549,102374+31]..[549,102374+37]),None)
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[549,102374+39]..[549,102374+46])
                                      Pexp_ident "content" (src/lexer.mll[549,102374+39]..[549,102374+46])
                                ]
                          ]
                          expression (src/lexer.mll[550,102424+6]..[551,102482+27])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[550,102424+10]..[550,102424+13])
                                  Ppat_var "pos" (src/lexer.mll[550,102424+10]..[550,102424+13])
                                expression (src/lexer.mll[550,102424+16]..[550,102424+54])
                                  Pexp_apply
                                  expression (src/lexer.mll[550,102424+16]..[550,102424+22])
                                    Pexp_ident "import" (src/lexer.mll[550,102424+16]..[550,102424+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[550,102424+23]..[550,102424+54])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[550,102424+24]..[550,102424+34])
                                            Pexp_ident "openingpos" (src/lexer.mll[550,102424+24]..[550,102424+34])
                                          expression (src/lexer.mll[550,102424+36]..[550,102424+53])
                                            Pexp_field
                                            expression (src/lexer.mll[550,102424+36]..[550,102424+42])
                                              Pexp_ident "lexbuf" (src/lexer.mll[550,102424+36]..[550,102424+42])
                                            "lex_curr_p" (src/lexer.mll[550,102424+43]..[550,102424+53])
                                        ]
                                  ]
                            ]
                            expression (src/lexer.mll[551,102482+6]..[551,102482+27])
                              Pexp_construct "QID" (src/lexer.mll[551,102482+6]..[551,102482+9])
                              Some
                                expression (src/lexer.mll[551,102482+10]..[551,102482+27])
                                  Pexp_apply
                                  expression (src/lexer.mll[551,102482+11]..[551,102482+19])
                                    Pexp_ident "with_pos" (src/lexer.mll[551,102482+11]..[551,102482+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[551,102482+20]..[551,102482+23])
                                        Pexp_ident "pos" (src/lexer.mll[551,102482+20]..[551,102482+23])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[551,102482+24]..[551,102482+26])
                                        Pexp_ident "id" (src/lexer.mll[551,102482+24]..[551,102482+26])
                                  ]
                <case>
                  pattern (src/lexer.ml[1837,102535+4]..[1837,102535+6])
                    Ppat_constant PConst_int (20,None)
                  expression (src/lexer.mll[554,102567+4]..[554,102567+36])
                    Pexp_sequence
                    expression (src/lexer.mll[554,102567+6]..[554,102567+21])
                      Pexp_apply
                      expression (src/lexer.mll[554,102567+6]..[554,102567+14])
                        Pexp_ident "new_line" (src/lexer.mll[554,102567+6]..[554,102567+14])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[554,102567+15]..[554,102567+21])
                            Pexp_ident "lexbuf" (src/lexer.mll[554,102567+15]..[554,102567+21])
                      ]
                    expression (src/lexer.mll[554,102567+23]..[554,102567+34])
                      Pexp_apply
                      expression (src/lexer.mll[554,102567+23]..[554,102567+27])
                        Pexp_ident "main" (src/lexer.mll[554,102567+23]..[554,102567+27])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[554,102567+28]..[554,102567+34])
                            Pexp_ident "lexbuf" (src/lexer.mll[554,102567+28]..[554,102567+34])
                      ]
                <case>
                  pattern (src/lexer.ml[1842,102627+4]..[1842,102627+6])
                    Ppat_constant PConst_int (21,None)
                  expression (src/lexer.mll[556,102659+4]..[556,102659+19])
                    Pexp_apply
                    expression (src/lexer.mll[556,102659+6]..[556,102659+10])
                      Pexp_ident "main" (src/lexer.mll[556,102659+6]..[556,102659+10])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[556,102659+11]..[556,102659+17])
                          Pexp_ident "lexbuf" (src/lexer.mll[556,102659+11]..[556,102659+17])
                    ]
                <case>
                  pattern (src/lexer.ml[1847,102702+4]..[1847,102702+6])
                    Ppat_constant PConst_int (22,None)
                  expression (src/lexer.mll[558,102734+4]..[558,102734+59])
                    Pexp_sequence
                    expression (src/lexer.mll[558,102734+6]..[558,102734+44])
                      Pexp_apply
                      expression (src/lexer.mll[558,102734+6]..[558,102734+13])
                        Pexp_ident "comment" (src/lexer.mll[558,102734+6]..[558,102734+13])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[558,102734+14]..[558,102734+37])
                            Pexp_apply
                            expression (src/lexer.mll[558,102734+15]..[558,102734+29])
                              Pexp_ident "lexeme_start_p" (src/lexer.mll[558,102734+15]..[558,102734+29])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[558,102734+30]..[558,102734+36])
                                  Pexp_ident "lexbuf" (src/lexer.mll[558,102734+30]..[558,102734+36])
                            ]
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[558,102734+38]..[558,102734+44])
                            Pexp_ident "lexbuf" (src/lexer.mll[558,102734+38]..[558,102734+44])
                      ]
                    expression (src/lexer.mll[558,102734+46]..[558,102734+57])
                      Pexp_apply
                      expression (src/lexer.mll[558,102734+46]..[558,102734+50])
                        Pexp_ident "main" (src/lexer.mll[558,102734+46]..[558,102734+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[558,102734+51]..[558,102734+57])
                            Pexp_ident "lexbuf" (src/lexer.mll[558,102734+51]..[558,102734+57])
                      ]
                <case>
                  pattern (src/lexer.ml[1852,102817+4]..[1852,102817+6])
                    Ppat_constant PConst_int (23,None)
                  expression (src/lexer.mll[560,102849+4]..[560,102849+64])
                    Pexp_sequence
                    expression (src/lexer.mll[560,102849+6]..[560,102849+49])
                      Pexp_apply
                      expression (src/lexer.mll[560,102849+6]..[560,102849+18])
                        Pexp_ident "ocamlcomment" (src/lexer.mll[560,102849+6]..[560,102849+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[560,102849+19]..[560,102849+42])
                            Pexp_apply
                            expression (src/lexer.mll[560,102849+20]..[560,102849+34])
                              Pexp_ident "lexeme_start_p" (src/lexer.mll[560,102849+20]..[560,102849+34])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[560,102849+35]..[560,102849+41])
                                  Pexp_ident "lexbuf" (src/lexer.mll[560,102849+35]..[560,102849+41])
                            ]
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[560,102849+43]..[560,102849+49])
                            Pexp_ident "lexbuf" (src/lexer.mll[560,102849+43]..[560,102849+49])
                      ]
                    expression (src/lexer.mll[560,102849+51]..[560,102849+62])
                      Pexp_apply
                      expression (src/lexer.mll[560,102849+51]..[560,102849+55])
                        Pexp_ident "main" (src/lexer.mll[560,102849+51]..[560,102849+55])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[560,102849+56]..[560,102849+62])
                            Pexp_ident "lexbuf" (src/lexer.mll[560,102849+56]..[560,102849+62])
                      ]
                <case>
                  pattern (src/lexer.ml[1857,102937+4]..[1857,102937+6])
                    Ppat_constant PConst_int (24,None)
                  expression (src/lexer.mll[562,102969+4]..[562,102969+58])
                    Pexp_apply
                    expression (src/lexer.mll[562,102969+6]..[562,102969+15])
                      Pexp_ident "savestart" (src/lexer.mll[562,102969+6]..[562,102969+15])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[562,102969+16]..[562,102969+22])
                          Pexp_ident "lexbuf" (src/lexer.mll[562,102969+16]..[562,102969+22])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[562,102969+23]..[562,102969+56])
                          Pexp_apply
                          expression (src/lexer.mll[562,102969+24]..[562,102969+33])
                            Pexp_ident "ocamltype" (src/lexer.mll[562,102969+24]..[562,102969+33])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[562,102969+34]..[562,102969+55])
                                Pexp_apply
                                expression (src/lexer.mll[562,102969+35]..[562,102969+47])
                                  Pexp_ident "lexeme_end_p" (src/lexer.mll[562,102969+35]..[562,102969+47])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[562,102969+48]..[562,102969+54])
                                      Pexp_ident "lexbuf" (src/lexer.mll[562,102969+48]..[562,102969+54])
                                ]
                          ]
                    ]
                <case>
                  pattern (src/lexer.ml[1862,103051+4]..[1862,103051+6])
                    Ppat_constant PConst_int (25,None)
                  expression (src/lexer.mll[564,103083+4]..[570,103379+9])
                    Pexp_apply
                    expression (src/lexer.mll[564,103083+6]..[564,103083+15])
                      Pexp_ident "savestart" (src/lexer.mll[564,103083+6]..[564,103083+15])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[564,103083+16]..[564,103083+22])
                          Pexp_ident "lexbuf" (src/lexer.mll[564,103083+16]..[564,103083+22])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[564,103083+23]..[570,103379+7])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/lexer.mll[564,103083+28]..[564,103083+34])
                            Ppat_var "lexbuf" (src/lexer.mll[564,103083+28]..[564,103083+34])
                          expression (src/lexer.mll[565,103121+8]..[569,103320+58])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[565,103121+12]..[565,103121+22])
                                  Ppat_var "openingpos" (src/lexer.mll[565,103121+12]..[565,103121+22])
                                expression (src/lexer.mll[565,103121+25]..[565,103121+46])
                                  Pexp_apply
                                  expression (src/lexer.mll[565,103121+25]..[565,103121+39])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[565,103121+25]..[565,103121+39])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[565,103121+40]..[565,103121+46])
                                        Pexp_ident "lexbuf" (src/lexer.mll[565,103121+40]..[565,103121+46])
                                  ]
                            ]
                            expression (src/lexer.mll[566,103171+8]..[569,103320+58])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[566,103171+12]..[566,103171+22])
                                    Ppat_var "stretchpos" (src/lexer.mll[566,103171+12]..[566,103171+22])
                                  expression (src/lexer.mll[566,103171+25]..[566,103171+44])
                                    Pexp_apply
                                    expression (src/lexer.mll[566,103171+25]..[566,103171+37])
                                      Pexp_ident "lexeme_end_p" (src/lexer.mll[566,103171+25]..[566,103171+37])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[566,103171+38]..[566,103171+44])
                                          Pexp_ident "lexbuf" (src/lexer.mll[566,103171+38]..[566,103171+44])
                                    ]
                              ]
                              expression (src/lexer.mll[567,103219+8]..[569,103320+58])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[567,103219+12]..[567,103219+32])
                                      Ppat_tuple
                                      [
                                        pattern (src/lexer.mll[567,103219+12]..[567,103219+22])
                                          Ppat_var "closingpos" (src/lexer.mll[567,103219+12]..[567,103219+22])
                                        pattern (src/lexer.mll[567,103219+24]..[567,103219+32])
                                          Ppat_var "monsters" (src/lexer.mll[567,103219+24]..[567,103219+32])
                                      ]
                                    expression (src/lexer.mll[567,103219+35]..[567,103219+67])
                                      Pexp_apply
                                      expression (src/lexer.mll[567,103219+35]..[567,103219+41])
                                        Pexp_ident "action" (src/lexer.mll[567,103219+35]..[567,103219+41])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[567,103219+42]..[567,103219+46])
                                            Pexp_construct "true" (src/lexer.mll[567,103219+42]..[567,103219+46])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[567,103219+47]..[567,103219+57])
                                            Pexp_ident "openingpos" (src/lexer.mll[567,103219+47]..[567,103219+57])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[567,103219+58]..[567,103219+60])
                                            Pexp_construct "[]" (src/lexer.mll[567,103219+58]..[567,103219+60])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[567,103219+61]..[567,103219+67])
                                            Pexp_ident "lexbuf" (src/lexer.mll[567,103219+61]..[567,103219+67])
                                      ]
                                ]
                                expression (src/lexer.mll[568,103290+8]..[569,103320+58])
                                  Pexp_sequence
                                  expression (src/lexer.mll[568,103290+8]..[568,103290+28])
                                    Pexp_apply
                                    expression (src/lexer.mll[568,103290+8]..[568,103290+19])
                                      Pexp_ident "no_monsters" (src/lexer.mll[568,103290+8]..[568,103290+19])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[568,103290+20]..[568,103290+28])
                                          Pexp_ident "monsters" (src/lexer.mll[568,103290+20]..[568,103290+28])
                                    ]
                                  expression (src/lexer.mll[569,103320+8]..[569,103320+58])
                                    Pexp_construct "HEADER" (src/lexer.mll[569,103320+8]..[569,103320+14])
                                    Some
                                      expression (src/lexer.mll[569,103320+15]..[569,103320+58])
                                        Pexp_apply
                                        expression (src/lexer.mll[569,103320+16]..[569,103320+26])
                                          Pexp_ident "mk_stretch" (src/lexer.mll[569,103320+16]..[569,103320+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[569,103320+27]..[569,103320+37])
                                              Pexp_ident "stretchpos" (src/lexer.mll[569,103320+27]..[569,103320+37])
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[569,103320+38]..[569,103320+48])
                                              Pexp_ident "closingpos" (src/lexer.mll[569,103320+38]..[569,103320+48])
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[569,103320+49]..[569,103320+54])
                                              Pexp_construct "false" (src/lexer.mll[569,103320+49]..[569,103320+54])
                                              None
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[569,103320+55]..[569,103320+57])
                                              Pexp_construct "[]" (src/lexer.mll[569,103320+55]..[569,103320+57])
                                              None
                                        ]
                    ]
                <case>
                  pattern (src/lexer.ml[1873,103412+4]..[1873,103412+6])
                    Ppat_constant PConst_int (26,None)
                  expression (src/lexer.mll[572,103444+4]..[594,104528+5])
                    Pexp_apply
                    expression (src/lexer.mll[572,103444+6]..[572,103444+15])
                      Pexp_ident "savestart" (src/lexer.mll[572,103444+6]..[572,103444+15])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[572,103444+16]..[572,103444+22])
                          Pexp_ident "lexbuf" (src/lexer.mll[572,103444+16]..[572,103444+22])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[572,103444+23]..[593,104520+7])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/lexer.mll[572,103444+28]..[572,103444+34])
                            Ppat_var "lexbuf" (src/lexer.mll[572,103444+28]..[572,103444+34])
                          expression (src/lexer.mll[573,103482+8]..[592,104510+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[573,103482+12]..[573,103482+22])
                                  Ppat_var "openingpos" (src/lexer.mll[573,103482+12]..[573,103482+22])
                                expression (src/lexer.mll[573,103482+25]..[573,103482+46])
                                  Pexp_apply
                                  expression (src/lexer.mll[573,103482+25]..[573,103482+39])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[573,103482+25]..[573,103482+39])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[573,103482+40]..[573,103482+46])
                                        Pexp_ident "lexbuf" (src/lexer.mll[573,103482+40]..[573,103482+46])
                                  ]
                            ]
                            expression (src/lexer.mll[574,103532+8]..[592,104510+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[574,103532+12]..[574,103532+22])
                                    Ppat_var "stretchpos" (src/lexer.mll[574,103532+12]..[574,103532+22])
                                  expression (src/lexer.mll[574,103532+25]..[574,103532+44])
                                    Pexp_apply
                                    expression (src/lexer.mll[574,103532+25]..[574,103532+37])
                                      Pexp_ident "lexeme_end_p" (src/lexer.mll[574,103532+25]..[574,103532+37])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[574,103532+38]..[574,103532+44])
                                          Pexp_ident "lexbuf" (src/lexer.mll[574,103532+38]..[574,103532+44])
                                    ]
                              ]
                              expression (src/lexer.mll[575,103580+8]..[592,104510+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[575,103580+12]..[575,103580+32])
                                      Ppat_tuple
                                      [
                                        pattern (src/lexer.mll[575,103580+12]..[575,103580+22])
                                          Ppat_var "closingpos" (src/lexer.mll[575,103580+12]..[575,103580+22])
                                        pattern (src/lexer.mll[575,103580+24]..[575,103580+32])
                                          Ppat_var "monsters" (src/lexer.mll[575,103580+24]..[575,103580+32])
                                      ]
                                    expression (src/lexer.mll[575,103580+35]..[575,103580+68])
                                      Pexp_apply
                                      expression (src/lexer.mll[575,103580+35]..[575,103580+41])
                                        Pexp_ident "action" (src/lexer.mll[575,103580+35]..[575,103580+41])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[575,103580+42]..[575,103580+47])
                                            Pexp_construct "false" (src/lexer.mll[575,103580+42]..[575,103580+47])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[575,103580+48]..[575,103580+58])
                                            Pexp_ident "openingpos" (src/lexer.mll[575,103580+48]..[575,103580+58])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[575,103580+59]..[575,103580+61])
                                            Pexp_construct "[]" (src/lexer.mll[575,103580+59]..[575,103580+61])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[575,103580+62]..[575,103580+68])
                                            Pexp_ident "lexbuf" (src/lexer.mll[575,103580+62]..[575,103580+68])
                                      ]
                                ]
                                expression (src/lexer.mll[576,103652+8]..[592,104510+9])
                                  Pexp_construct "ACTION" (src/lexer.mll[576,103652+8]..[576,103652+14])
                                  Some
                                    expression (src/lexer.mll[576,103652+15]..[592,104510+9])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/lexer.mll[577,103669+14]..[577,103669+21])
                                        Ppat_var "dollars" (src/lexer.mll[577,103669+14]..[577,103669+21])
                                      expression (src/lexer.mll[577,103669+22]..[591,104466+43]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/lexer.mll[577,103669+22]..[577,103669+31])
                                          Ppat_var "producers" (src/lexer.mll[577,103669+22]..[577,103669+31])
                                        expression (src/lexer.mll[579,103763+12]..[591,104466+43])
                                          Pexp_sequence
                                          expression (src/lexer.mll[579,103763+12]..[579,103763+79])
                                            Pexp_apply
                                            expression (src/lexer.mll[579,103763+12]..[579,103763+21])
                                              Pexp_ident "List.iter" (src/lexer.mll[579,103763+12]..[579,103763+21])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[579,103763+22]..[579,103763+70])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/lexer.mll[579,103763+27]..[579,103763+34])
                                                    Ppat_var "monster" (src/lexer.mll[579,103763+27]..[579,103763+34])
                                                  expression (src/lexer.mll[579,103763+38]..[579,103763+69])
                                                    Pexp_apply
                                                    expression (src/lexer.mll[579,103763+38]..[579,103763+51])
                                                      Pexp_field
                                                      expression (src/lexer.mll[579,103763+38]..[579,103763+45])
                                                        Pexp_ident "monster" (src/lexer.mll[579,103763+38]..[579,103763+45])
                                                      "check" (src/lexer.mll[579,103763+46]..[579,103763+51])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[579,103763+52]..[579,103763+59])
                                                          Pexp_ident "dollars" (src/lexer.mll[579,103763+52]..[579,103763+59])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[579,103763+60]..[579,103763+69])
                                                          Pexp_ident "producers" (src/lexer.mll[579,103763+60]..[579,103763+69])
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[579,103763+71]..[579,103763+79])
                                                  Pexp_ident "monsters" (src/lexer.mll[579,103763+71]..[579,103763+79])
                                            ]
                                          expression (src/lexer.mll[585,104184+12]..[591,104466+43])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/lexer.mll[585,104184+16]..[585,104184+19])
                                                  Ppat_var "ids" (src/lexer.mll[585,104184+16]..[585,104184+19])
                                                expression (src/lexer.mll[586,104206+14]..[586,104206+80])
                                                  Pexp_apply
                                                  expression (src/lexer.mll[586,104206+14]..[586,104206+29])
                                                    Pexp_ident "StringSet.union" (src/lexer.mll[586,104206+14]..[586,104206+29])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[586,104206+30]..[586,104206+53])
                                                        Pexp_apply
                                                        expression (src/lexer.mll[586,104206+31]..[586,104206+42])
                                                          Pexp_ident "gather_oids" (src/lexer.mll[586,104206+31]..[586,104206+42])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[586,104206+43]..[586,104206+52])
                                                              Pexp_ident "producers" (src/lexer.mll[586,104206+43]..[586,104206+52])
                                                        ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/lexer.mll[586,104206+54]..[586,104206+80])
                                                        Pexp_apply
                                                        expression (src/lexer.mll[586,104206+55]..[586,104206+70])
                                                          Pexp_ident "gather_monsters" (src/lexer.mll[586,104206+55]..[586,104206+70])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/lexer.mll[586,104206+71]..[586,104206+79])
                                                              Pexp_ident "monsters" (src/lexer.mll[586,104206+71]..[586,104206+79])
                                                        ]
                                                  ]
                                            ]
                                            expression (src/lexer.mll[589,104347+12]..[591,104466+43])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[589,104347+16]..[589,104347+23])
                                                    Ppat_var "stretch" (src/lexer.mll[589,104347+16]..[589,104347+23])
                                                  expression (src/lexer.mll[589,104347+26]..[589,104347+72])
                                                    Pexp_apply
                                                    expression (src/lexer.mll[589,104347+26]..[589,104347+36])
                                                      Pexp_ident "mk_stretch" (src/lexer.mll[589,104347+26]..[589,104347+36])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[589,104347+37]..[589,104347+47])
                                                          Pexp_ident "stretchpos" (src/lexer.mll[589,104347+37]..[589,104347+47])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[589,104347+48]..[589,104347+58])
                                                          Pexp_ident "closingpos" (src/lexer.mll[589,104347+48]..[589,104347+58])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[589,104347+59]..[589,104347+63])
                                                          Pexp_construct "true" (src/lexer.mll[589,104347+59]..[589,104347+63])
                                                          None
                                                      <arg>
                                                      Nolabel
                                                        expression (src/lexer.mll[589,104347+64]..[589,104347+72])
                                                          Pexp_ident "monsters" (src/lexer.mll[589,104347+64]..[589,104347+72])
                                                    ]
                                              ]
                                              expression (src/lexer.mll[591,104466+12]..[591,104466+43])
                                                Pexp_apply
                                                expression (src/lexer.mll[591,104466+12]..[591,104466+31])
                                                  Pexp_ident "Action.from_stretch" (src/lexer.mll[591,104466+12]..[591,104466+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[591,104466+32]..[591,104466+35])
                                                      Pexp_ident "ids" (src/lexer.mll[591,104466+32]..[591,104466+35])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/lexer.mll[591,104466+36]..[591,104466+43])
                                                      Pexp_ident "stretch" (src/lexer.mll[591,104466+36]..[591,104466+43])
                                                ]
                    ]
                <case>
                  pattern (src/lexer.ml[1900,104557+4]..[1900,104557+6])
                    Ppat_constant PConst_int (27,None)
                  expression (src/lexer.ml[1901,104567+0]..src/lexer.mll[607,105475+5])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexer.mll[595,104593+11]..[595,104593+18])
                          Ppat_var "percent" (src/lexer.mll[595,104593+11]..[595,104593+18])
                        expression (src/lexer.ml[1905,104634+2]..[1905,104634+80])
                          Pexp_apply
                          expression (src/lexer.ml[1905,104634+2]..[1905,104634+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[1905,104634+2]..[1905,104634+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1905,104634+20]..[1905,104634+26])
                                Pexp_ident "lexbuf" (src/lexer.ml[1905,104634+20]..[1905,104634+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1905,104634+27]..[1905,104634+54])
                                Pexp_field
                                expression (src/lexer.ml[1905,104634+27]..[1905,104634+33])
                                  Pexp_ident "lexbuf" (src/lexer.ml[1905,104634+27]..[1905,104634+33])
                                "Lexing.lex_start_pos" (src/lexer.ml[1905,104634+34]..[1905,104634+54])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1905,104634+55]..[1905,104634+80])
                                Pexp_apply
                                expression (src/lexer.ml[1905,104634+55]..[1905,104634+80]) ghost
                                  Pexp_ident "Array.get" (src/lexer.ml[1905,104634+55]..[1905,104634+80]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1905,104634+55]..[1905,104634+76])
                                      Pexp_field
                                      expression (src/lexer.ml[1905,104634+55]..[1905,104634+61])
                                        Pexp_ident "lexbuf" (src/lexer.ml[1905,104634+55]..[1905,104634+61])
                                      "Lexing.lex_mem" (src/lexer.ml[1905,104634+62]..[1905,104634+76])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1905,104634+78]..[1905,104634+79])
                                      Pexp_constant PConst_int (0,None)
                                ]
                          ]
                      <def>
                        pattern (src/lexer.mll[595,104741+44]..[595,104741+46])
                          Ppat_var "id" (src/lexer.mll[595,104741+44]..[595,104741+46])
                        expression (src/lexer.ml[1910,104810+2]..[1910,104810+84])
                          Pexp_apply
                          expression (src/lexer.ml[1910,104810+2]..[1910,104810+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[1910,104810+2]..[1910,104810+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1910,104810+20]..[1910,104810+26])
                                Pexp_ident "lexbuf" (src/lexer.ml[1910,104810+20]..[1910,104810+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1910,104810+27]..[1910,104810+58])
                                Pexp_apply
                                expression (src/lexer.ml[1910,104810+54]..[1910,104810+55])
                                  Pexp_ident "+" (src/lexer.ml[1910,104810+54]..[1910,104810+55])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1910,104810+28]..[1910,104810+53])
                                      Pexp_apply
                                      expression (src/lexer.ml[1910,104810+28]..[1910,104810+53]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[1910,104810+28]..[1910,104810+53]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[1910,104810+28]..[1910,104810+49])
                                            Pexp_field
                                            expression (src/lexer.ml[1910,104810+28]..[1910,104810+34])
                                              Pexp_ident "lexbuf" (src/lexer.ml[1910,104810+28]..[1910,104810+34])
                                            "Lexing.lex_mem" (src/lexer.ml[1910,104810+35]..[1910,104810+49])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[1910,104810+51]..[1910,104810+52])
                                            Pexp_constant PConst_int (0,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1910,104810+56]..[1910,104810+57])
                                      Pexp_constant PConst_int (2,None)
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[1910,104810+59]..[1910,104810+84])
                                Pexp_apply
                                expression (src/lexer.ml[1910,104810+59]..[1910,104810+84]) ghost
                                  Pexp_ident "Array.get" (src/lexer.ml[1910,104810+59]..[1910,104810+84]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1910,104810+59]..[1910,104810+80])
                                      Pexp_field
                                      expression (src/lexer.ml[1910,104810+59]..[1910,104810+65])
                                        Pexp_ident "lexbuf" (src/lexer.ml[1910,104810+59]..[1910,104810+65])
                                      "Lexing.lex_mem" (src/lexer.ml[1910,104810+66]..[1910,104810+80])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[1910,104810+82]..[1910,104810+83])
                                      Pexp_constant PConst_int (1,None)
                                ]
                          ]
                    ]
                    expression (src/lexer.mll[596,104920+4]..[607,105475+5])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[596,104920+10]..[596,104920+20])
                            Ppat_var "openingpos" (src/lexer.mll[596,104920+10]..[596,104920+20])
                          expression (src/lexer.mll[596,104920+23]..[596,104920+44])
                            Pexp_apply
                            expression (src/lexer.mll[596,104920+23]..[596,104920+37])
                              Pexp_ident "lexeme_start_p" (src/lexer.mll[596,104920+23]..[596,104920+37])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[596,104920+38]..[596,104920+44])
                                  Pexp_ident "lexbuf" (src/lexer.mll[596,104920+38]..[596,104920+44])
                            ]
                      ]
                      expression (src/lexer.mll[597,104968+6]..[606,105416+58])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[597,104968+10]..[597,104968+20])
                              Ppat_var "stretchpos" (src/lexer.mll[597,104968+10]..[597,104968+20])
                            expression (src/lexer.mll[597,104968+23]..[597,104968+42])
                              Pexp_apply
                              expression (src/lexer.mll[597,104968+23]..[597,104968+35])
                                Pexp_ident "lexeme_end_p" (src/lexer.mll[597,104968+23]..[597,104968+35])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[597,104968+36]..[597,104968+42])
                                    Pexp_ident "lexbuf" (src/lexer.mll[597,104968+36]..[597,104968+42])
                              ]
                        ]
                        expression (src/lexer.mll[598,105014+6]..[606,105416+58])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[598,105014+10]..[598,105014+20])
                                Ppat_var "closingpos" (src/lexer.mll[598,105014+10]..[598,105014+20])
                              expression (src/lexer.mll[598,105014+23]..[598,105014+50])
                                Pexp_apply
                                expression (src/lexer.mll[598,105014+23]..[598,105014+32])
                                  Pexp_ident "attribute" (src/lexer.mll[598,105014+23]..[598,105014+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[598,105014+33]..[598,105014+43])
                                      Pexp_ident "openingpos" (src/lexer.mll[598,105014+33]..[598,105014+43])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[598,105014+44]..[598,105014+50])
                                      Pexp_ident "lexbuf" (src/lexer.mll[598,105014+44]..[598,105014+50])
                                ]
                          ]
                          expression (src/lexer.mll[599,105068+6]..[606,105416+58])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[599,105068+10]..[599,105068+13])
                                  Ppat_var "pos" (src/lexer.mll[599,105068+10]..[599,105068+13])
                                expression (src/lexer.mll[599,105068+16]..[599,105068+66])
                                  Pexp_apply
                                  expression (src/lexer.mll[599,105068+16]..[599,105068+32])
                                    Pexp_ident "Positions.import" (src/lexer.mll[599,105068+16]..[599,105068+32])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[599,105068+33]..[599,105068+66])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[599,105068+34]..[599,105068+44])
                                            Pexp_ident "openingpos" (src/lexer.mll[599,105068+34]..[599,105068+44])
                                          expression (src/lexer.mll[599,105068+46]..[599,105068+65])
                                            Pexp_apply
                                            expression (src/lexer.mll[599,105068+46]..[599,105068+58])
                                              Pexp_ident "lexeme_end_p" (src/lexer.mll[599,105068+46]..[599,105068+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[599,105068+59]..[599,105068+65])
                                                  Pexp_ident "lexbuf" (src/lexer.mll[599,105068+59]..[599,105068+65])
                                            ]
                                        ]
                                  ]
                            ]
                            expression (src/lexer.mll[600,105138+6]..[606,105416+58])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[600,105138+10]..[600,105138+14])
                                    Ppat_var "attr" (src/lexer.mll[600,105138+10]..[600,105138+14])
                                  expression (src/lexer.mll[600,105138+17]..[600,105138+58])
                                    Pexp_apply
                                    expression (src/lexer.mll[600,105138+17]..[600,105138+27])
                                      Pexp_ident "mk_stretch" (src/lexer.mll[600,105138+17]..[600,105138+27])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[600,105138+28]..[600,105138+38])
                                          Pexp_ident "stretchpos" (src/lexer.mll[600,105138+28]..[600,105138+38])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[600,105138+39]..[600,105138+49])
                                          Pexp_ident "closingpos" (src/lexer.mll[600,105138+39]..[600,105138+49])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[600,105138+50]..[600,105138+55])
                                          Pexp_construct "false" (src/lexer.mll[600,105138+50]..[600,105138+55])
                                          None
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[600,105138+56]..[600,105138+58])
                                          Pexp_construct "[]" (src/lexer.mll[600,105138+56]..[600,105138+58])
                                          None
                                    ]
                              ]
                              expression (src/lexer.mll[601,105200+6]..[606,105416+58])
                                Pexp_ifthenelse
                                expression (src/lexer.mll[601,105200+9]..[601,105200+21])
                                  Pexp_apply
                                  expression (src/lexer.mll[601,105200+17]..[601,105200+18])
                                    Pexp_ident "=" (src/lexer.mll[601,105200+17]..[601,105200+18])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[601,105200+9]..[601,105200+16])
                                        Pexp_ident "percent" (src/lexer.mll[601,105200+9]..[601,105200+16])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[601,105200+19]..[601,105200+21])
                                        Pexp_constant PConst_string("",(src/lexer.mll[601,105200+20]..[601,105200+20]),None)
                                  ]
                                expression (src/lexer.mll[603,105282+8]..[603,105282+51])
                                  Pexp_construct "ATTRIBUTE" (src/lexer.mll[603,105282+8]..[603,105282+17])
                                  Some
                                    expression (src/lexer.mll[603,105282+18]..[603,105282+51])
                                      Pexp_tuple
                                      [
                                        expression (src/lexer.mll[603,105282+19]..[603,105282+44])
                                          Pexp_apply
                                          expression (src/lexer.mll[603,105282+19]..[603,105282+37])
                                            Pexp_ident "Positions.with_pos" (src/lexer.mll[603,105282+19]..[603,105282+37])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[603,105282+38]..[603,105282+41])
                                                Pexp_ident "pos" (src/lexer.mll[603,105282+38]..[603,105282+41])
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[603,105282+42]..[603,105282+44])
                                                Pexp_ident "id" (src/lexer.mll[603,105282+42]..[603,105282+44])
                                          ]
                                        expression (src/lexer.mll[603,105282+46]..[603,105282+50])
                                          Pexp_ident "attr" (src/lexer.mll[603,105282+46]..[603,105282+50])
                                      ]
                                Some
                                  expression (src/lexer.mll[606,105416+8]..[606,105416+58])
                                    Pexp_construct "GRAMMARATTRIBUTE" (src/lexer.mll[606,105416+8]..[606,105416+24])
                                    Some
                                      expression (src/lexer.mll[606,105416+25]..[606,105416+58])
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[606,105416+26]..[606,105416+51])
                                            Pexp_apply
                                            expression (src/lexer.mll[606,105416+26]..[606,105416+44])
                                              Pexp_ident "Positions.with_pos" (src/lexer.mll[606,105416+26]..[606,105416+44])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[606,105416+45]..[606,105416+48])
                                                  Pexp_ident "pos" (src/lexer.mll[606,105416+45]..[606,105416+48])
                                              <arg>
                                              Nolabel
                                                expression (src/lexer.mll[606,105416+49]..[606,105416+51])
                                                  Pexp_ident "id" (src/lexer.mll[606,105416+49]..[606,105416+51])
                                            ]
                                          expression (src/lexer.mll[606,105416+53]..[606,105416+57])
                                            Pexp_ident "attr" (src/lexer.mll[606,105416+53]..[606,105416+57])
                                        ]
                <case>
                  pattern (src/lexer.ml[1926,105504+4]..[1926,105504+6])
                    Ppat_constant PConst_int (28,None)
                  expression (src/lexer.mll[609,105536+4]..[609,105536+11])
                    Pexp_construct "EOF" (src/lexer.mll[609,105536+6]..[609,105536+9])
                    None
                <case>
                  pattern (src/lexer.ml[1931,105571+4]..[1931,105571+6])
                    Ppat_constant PConst_int (29,None)
                  expression (src/lexer.mll[611,105603+4]..[611,105603+48])
                    Pexp_apply
                    expression (src/lexer.mll[611,105603+6]..[611,105603+12])
                      Pexp_ident "error2" (src/lexer.mll[611,105603+6]..[611,105603+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[611,105603+13]..[611,105603+19])
                          Pexp_ident "lexbuf" (src/lexer.mll[611,105603+13]..[611,105603+19])
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[611,105603+20]..[611,105603+46])
                          Pexp_constant PConst_string("unexpected character(s).",(src/lexer.mll[611,105603+21]..[611,105603+45]),None)
                    ]
                <case>
                  pattern (src/lexer.ml[1936,105675+4]..[1936,105675+21])
                    Ppat_var "__ocaml_lex_state" (src/lexer.ml[1936,105675+4]..[1936,105675+21])
                  expression (src/lexer.ml[1936,105675+25]..[1937,105734+51])
                    Pexp_sequence
                    expression (src/lexer.ml[1936,105675+25]..[1936,105675+57])
                      Pexp_apply
                      expression (src/lexer.ml[1936,105675+25]..[1936,105675+50])
                        Pexp_field
                        expression (src/lexer.ml[1936,105675+25]..[1936,105675+31])
                          Pexp_ident "lexbuf" (src/lexer.ml[1936,105675+25]..[1936,105675+31])
                        "Lexing.refill_buff" (src/lexer.ml[1936,105675+32]..[1936,105675+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[1936,105675+51]..[1936,105675+57])
                            Pexp_ident "lexbuf" (src/lexer.ml[1936,105675+51]..[1936,105675+57])
                      ]
                    expression (src/lexer.ml[1937,105734+6]..[1937,105734+51])
                      Pexp_apply
                      expression (src/lexer.ml[1937,105734+6]..[1937,105734+26])
                        Pexp_ident "__ocaml_lex_main_rec" (src/lexer.ml[1937,105734+6]..[1937,105734+26])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[1937,105734+27]..[1937,105734+33])
                            Pexp_ident "lexbuf" (src/lexer.ml[1937,105734+27]..[1937,105734+33])
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[1937,105734+34]..[1937,105734+51])
                            Pexp_ident "__ocaml_lex_state" (src/lexer.ml[1937,105734+34]..[1937,105734+51])
                      ]
              ]
      <def>
        pattern (src/lexer.ml[1939,105787+4]..[1939,105787+11])
          Ppat_var "comment" (src/lexer.ml[1939,105787+4]..[1939,105787+11])
        expression (src/lexer.ml[1939,105787+12]..[1940,105819+47]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1939,105787+12]..[1939,105787+22])
            Ppat_var "openingpos" (src/lexer.ml[1939,105787+12]..[1939,105787+22])
          expression (src/lexer.ml[1939,105787+23]..[1940,105819+47]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[1939,105787+23]..[1939,105787+29])
              Ppat_var "lexbuf" (src/lexer.ml[1939,105787+23]..[1939,105787+29])
            expression (src/lexer.ml[1940,105819+3]..[1940,105819+47])
              Pexp_apply
              expression (src/lexer.ml[1940,105819+3]..[1940,105819+26])
                Pexp_ident "__ocaml_lex_comment_rec" (src/lexer.ml[1940,105819+3]..[1940,105819+26])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[1940,105819+27]..[1940,105819+37])
                    Pexp_ident "openingpos" (src/lexer.ml[1940,105819+27]..[1940,105819+37])
                <arg>
                Nolabel
                  expression (src/lexer.ml[1940,105819+38]..[1940,105819+44])
                    Pexp_ident "lexbuf" (src/lexer.ml[1940,105819+38]..[1940,105819+44])
                <arg>
                Nolabel
                  expression (src/lexer.ml[1940,105819+45]..[1940,105819+47])
                    Pexp_constant PConst_int (42,None)
              ]
      <def>
        pattern (src/lexer.ml[1941,105867+4]..[1941,105867+27])
          Ppat_var "__ocaml_lex_comment_rec" (src/lexer.ml[1941,105867+4]..[1941,105867+27])
        expression (src/lexer.ml[1941,105867+28]..[1964,106429+65]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1941,105867+28]..[1941,105867+38])
            Ppat_var "openingpos" (src/lexer.ml[1941,105867+28]..[1941,105867+38])
          expression (src/lexer.ml[1941,105867+39]..[1964,106429+65]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[1941,105867+39]..[1941,105867+45])
              Ppat_var "lexbuf" (src/lexer.ml[1941,105867+39]..[1941,105867+45])
            expression (src/lexer.ml[1941,105867+46]..[1964,106429+65]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[1941,105867+46]..[1941,105867+63])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[1941,105867+46]..[1941,105867+63])
              expression (src/lexer.ml[1942,105933+2]..[1964,106429+65])
                Pexp_match
                expression (src/lexer.ml[1942,105933+8]..[1942,105933+65])
                  Pexp_apply
                  expression (src/lexer.ml[1942,105933+8]..[1942,105933+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[1942,105933+8]..[1942,105933+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1942,105933+22]..[1942,105933+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[1942,105933+22]..[1942,105933+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1942,105933+41]..[1942,105933+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[1942,105933+41]..[1942,105933+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1942,105933+59]..[1942,105933+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[1942,105933+59]..[1942,105933+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[1943,106004+8]..[1943,106004+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[619,106039+4]..[619,106039+50])
                      Pexp_sequence
                      expression (src/lexer.mll[619,106039+6]..[619,106039+21])
                        Pexp_apply
                        expression (src/lexer.mll[619,106039+6]..[619,106039+14])
                          Pexp_ident "new_line" (src/lexer.mll[619,106039+6]..[619,106039+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[619,106039+15]..[619,106039+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[619,106039+15]..[619,106039+21])
                        ]
                      expression (src/lexer.mll[619,106039+23]..[619,106039+48])
                        Pexp_apply
                        expression (src/lexer.mll[619,106039+23]..[619,106039+30])
                          Pexp_ident "comment" (src/lexer.mll[619,106039+23]..[619,106039+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[619,106039+31]..[619,106039+41])
                              Pexp_ident "openingpos" (src/lexer.mll[619,106039+31]..[619,106039+41])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[619,106039+42]..[619,106039+48])
                              Pexp_ident "lexbuf" (src/lexer.mll[619,106039+42]..[619,106039+48])
                        ]
                  <case>
                    pattern (src/lexer.ml[1948,106113+4]..[1948,106113+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.mll[621,106144+4]..[621,106144+10])
                      Pexp_construct "()" (src/lexer.mll[621,106144+6]..[621,106144+8])
                      None
                  <case>
                    pattern (src/lexer.ml[1953,106178+4]..[1953,106178+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.mll[623,106209+4]..[623,106209+49])
                      Pexp_apply
                      expression (src/lexer.mll[623,106209+6]..[623,106209+12])
                        Pexp_ident "error1" (src/lexer.mll[623,106209+6]..[623,106209+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[623,106209+13]..[623,106209+23])
                            Pexp_ident "openingpos" (src/lexer.mll[623,106209+13]..[623,106209+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[623,106209+24]..[623,106209+47])
                            Pexp_constant PConst_string("unterminated comment.",(src/lexer.mll[623,106209+25]..[623,106209+46]),None)
                      ]
                  <case>
                    pattern (src/lexer.ml[1958,106282+4]..[1958,106282+5])
                      Ppat_constant PConst_int (3,None)
                    expression (src/lexer.mll[625,106313+4]..[625,106313+33])
                      Pexp_apply
                      expression (src/lexer.mll[625,106313+6]..[625,106313+13])
                        Pexp_ident "comment" (src/lexer.mll[625,106313+6]..[625,106313+13])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[625,106313+14]..[625,106313+24])
                            Pexp_ident "openingpos" (src/lexer.mll[625,106313+14]..[625,106313+24])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[625,106313+25]..[625,106313+31])
                            Pexp_ident "lexbuf" (src/lexer.mll[625,106313+25]..[625,106313+31])
                      ]
                  <case>
                    pattern (src/lexer.ml[1963,106370+4]..[1963,106370+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[1963,106370+4]..[1963,106370+21])
                    expression (src/lexer.ml[1963,106370+25]..[1964,106429+65])
                      Pexp_sequence
                      expression (src/lexer.ml[1963,106370+25]..[1963,106370+57])
                        Pexp_apply
                        expression (src/lexer.ml[1963,106370+25]..[1963,106370+50])
                          Pexp_field
                          expression (src/lexer.ml[1963,106370+25]..[1963,106370+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[1963,106370+25]..[1963,106370+31])
                          "Lexing.refill_buff" (src/lexer.ml[1963,106370+32]..[1963,106370+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[1963,106370+51]..[1963,106370+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[1963,106370+51]..[1963,106370+57])
                        ]
                      expression (src/lexer.ml[1964,106429+6]..[1964,106429+65])
                        Pexp_apply
                        expression (src/lexer.ml[1964,106429+6]..[1964,106429+29])
                          Pexp_ident "__ocaml_lex_comment_rec" (src/lexer.ml[1964,106429+6]..[1964,106429+29])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[1964,106429+30]..[1964,106429+40])
                              Pexp_ident "openingpos" (src/lexer.ml[1964,106429+30]..[1964,106429+40])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[1964,106429+41]..[1964,106429+47])
                              Pexp_ident "lexbuf" (src/lexer.ml[1964,106429+41]..[1964,106429+47])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[1964,106429+48]..[1964,106429+65])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[1964,106429+48]..[1964,106429+65])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[1966,106496+4]..[1966,106496+13])
          Ppat_var "ocamltype" (src/lexer.ml[1966,106496+4]..[1966,106496+13])
        expression (src/lexer.ml[1966,106496+14]..[1967,106530+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1966,106496+14]..[1966,106496+24])
            Ppat_var "openingpos" (src/lexer.ml[1966,106496+14]..[1966,106496+24])
          expression (src/lexer.ml[1966,106496+25]..[1967,106530+49]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[1966,106496+25]..[1966,106496+31])
              Ppat_var "lexbuf" (src/lexer.ml[1966,106496+25]..[1966,106496+31])
            expression (src/lexer.ml[1967,106530+3]..[1967,106530+49])
              Pexp_apply
              expression (src/lexer.ml[1967,106530+3]..[1967,106530+28])
                Pexp_ident "__ocaml_lex_ocamltype_rec" (src/lexer.ml[1967,106530+3]..[1967,106530+28])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[1967,106530+29]..[1967,106530+39])
                    Pexp_ident "openingpos" (src/lexer.ml[1967,106530+29]..[1967,106530+39])
                <arg>
                Nolabel
                  expression (src/lexer.ml[1967,106530+40]..[1967,106530+46])
                    Pexp_ident "lexbuf" (src/lexer.ml[1967,106530+40]..[1967,106530+46])
                <arg>
                Nolabel
                  expression (src/lexer.ml[1967,106530+47]..[1967,106530+49])
                    Pexp_constant PConst_int (49,None)
              ]
      <def>
        pattern (src/lexer.ml[1968,106580+4]..[1968,106580+29])
          Ppat_var "__ocaml_lex_ocamltype_rec" (src/lexer.ml[1968,106580+4]..[1968,106580+29])
        expression (src/lexer.ml[1968,106580+30]..[2001,107458+67]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[1968,106580+30]..[1968,106580+40])
            Ppat_var "openingpos" (src/lexer.ml[1968,106580+30]..[1968,106580+40])
          expression (src/lexer.ml[1968,106580+41]..[2001,107458+67]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[1968,106580+41]..[1968,106580+47])
              Ppat_var "lexbuf" (src/lexer.ml[1968,106580+41]..[1968,106580+47])
            expression (src/lexer.ml[1968,106580+48]..[2001,107458+67]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[1968,106580+48]..[1968,106580+65])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[1968,106580+48]..[1968,106580+65])
              expression (src/lexer.ml[1969,106648+2]..[2001,107458+67])
                Pexp_match
                expression (src/lexer.ml[1969,106648+8]..[1969,106648+65])
                  Pexp_apply
                  expression (src/lexer.ml[1969,106648+8]..[1969,106648+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[1969,106648+8]..[1969,106648+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1969,106648+22]..[1969,106648+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[1969,106648+22]..[1969,106648+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1969,106648+41]..[1969,106648+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[1969,106648+41]..[1969,106648+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[1969,106648+59]..[1969,106648+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[1969,106648+59]..[1969,106648+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[1970,106719+8]..[1970,106719+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[636,106754+4]..[636,106754+35])
                      Pexp_apply
                      expression (src/lexer.mll[636,106754+6]..[636,106754+15])
                        Pexp_ident "ocamltype" (src/lexer.mll[636,106754+6]..[636,106754+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[636,106754+16]..[636,106754+26])
                            Pexp_ident "openingpos" (src/lexer.mll[636,106754+16]..[636,106754+26])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[636,106754+27]..[636,106754+33])
                            Pexp_ident "lexbuf" (src/lexer.mll[636,106754+27]..[636,106754+33])
                      ]
                  <case>
                    pattern (src/lexer.ml[1975,106813+4]..[1975,106813+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.mll[638,106844+4]..[638,106844+92])
                      Pexp_construct "OCAMLTYPE" (src/lexer.mll[638,106844+6]..[638,106844+15])
                      Some
                        expression (src/lexer.mll[638,106844+16]..[638,106844+90])
                          Pexp_construct "Stretch.Declared" (src/lexer.mll[638,106844+17]..[638,106844+33])
                          Some
                            expression (src/lexer.mll[638,106844+34]..[638,106844+89])
                              Pexp_apply
                              expression (src/lexer.mll[638,106844+35]..[638,106844+45])
                                Pexp_ident "mk_stretch" (src/lexer.mll[638,106844+35]..[638,106844+45])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[638,106844+46]..[638,106844+56])
                                    Pexp_ident "openingpos" (src/lexer.mll[638,106844+46]..[638,106844+56])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[638,106844+57]..[638,106844+80])
                                    Pexp_apply
                                    expression (src/lexer.mll[638,106844+58]..[638,106844+72])
                                      Pexp_ident "lexeme_start_p" (src/lexer.mll[638,106844+58]..[638,106844+72])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[638,106844+73]..[638,106844+79])
                                          Pexp_ident "lexbuf" (src/lexer.mll[638,106844+73]..[638,106844+79])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[638,106844+81]..[638,106844+85])
                                    Pexp_construct "true" (src/lexer.mll[638,106844+81]..[638,106844+85])
                                    None
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[638,106844+86]..[638,106844+88])
                                    Pexp_construct "[]" (src/lexer.mll[638,106844+86]..[638,106844+88])
                                    None
                              ]
                  <case>
                    pattern (src/lexer.ml[1980,106960+4]..[1980,106960+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.mll[640,106991+4]..[640,106991+80])
                      Pexp_sequence
                      expression (src/lexer.mll[640,106991+6]..[640,106991+49])
                        Pexp_apply
                        expression (src/lexer.mll[640,106991+6]..[640,106991+18])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[640,106991+6]..[640,106991+18])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[640,106991+19]..[640,106991+42])
                              Pexp_apply
                              expression (src/lexer.mll[640,106991+20]..[640,106991+34])
                                Pexp_ident "lexeme_start_p" (src/lexer.mll[640,106991+20]..[640,106991+34])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[640,106991+35]..[640,106991+41])
                                    Pexp_ident "lexbuf" (src/lexer.mll[640,106991+35]..[640,106991+41])
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[640,106991+43]..[640,106991+49])
                              Pexp_ident "lexbuf" (src/lexer.mll[640,106991+43]..[640,106991+49])
                        ]
                      expression (src/lexer.mll[640,106991+51]..[640,106991+78])
                        Pexp_apply
                        expression (src/lexer.mll[640,106991+51]..[640,106991+60])
                          Pexp_ident "ocamltype" (src/lexer.mll[640,106991+51]..[640,106991+60])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[640,106991+61]..[640,106991+71])
                              Pexp_ident "openingpos" (src/lexer.mll[640,106991+61]..[640,106991+71])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[640,106991+72]..[640,106991+78])
                              Pexp_ident "lexbuf" (src/lexer.mll[640,106991+72]..[640,106991+78])
                        ]
                  <case>
                    pattern (src/lexer.ml[1985,107095+4]..[1985,107095+5])
                      Ppat_constant PConst_int (3,None)
                    expression (src/lexer.mll[642,107126+4]..[642,107126+52])
                      Pexp_sequence
                      expression (src/lexer.mll[642,107126+6]..[642,107126+21])
                        Pexp_apply
                        expression (src/lexer.mll[642,107126+6]..[642,107126+14])
                          Pexp_ident "new_line" (src/lexer.mll[642,107126+6]..[642,107126+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[642,107126+15]..[642,107126+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[642,107126+15]..[642,107126+21])
                        ]
                      expression (src/lexer.mll[642,107126+23]..[642,107126+50])
                        Pexp_apply
                        expression (src/lexer.mll[642,107126+23]..[642,107126+32])
                          Pexp_ident "ocamltype" (src/lexer.mll[642,107126+23]..[642,107126+32])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[642,107126+33]..[642,107126+43])
                              Pexp_ident "openingpos" (src/lexer.mll[642,107126+33]..[642,107126+43])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[642,107126+44]..[642,107126+50])
                              Pexp_ident "lexbuf" (src/lexer.mll[642,107126+44]..[642,107126+50])
                        ]
                  <case>
                    pattern (src/lexer.ml[1990,107202+4]..[1990,107202+5])
                      Ppat_constant PConst_int (4,None)
                    expression (src/lexer.mll[644,107233+4]..[644,107233+52])
                      Pexp_apply
                      expression (src/lexer.mll[644,107233+6]..[644,107233+12])
                        Pexp_ident "error1" (src/lexer.mll[644,107233+6]..[644,107233+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[644,107233+13]..[644,107233+23])
                            Pexp_ident "openingpos" (src/lexer.mll[644,107233+13]..[644,107233+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[644,107233+24]..[644,107233+50])
                            Pexp_constant PConst_string("unterminated OCaml type.",(src/lexer.mll[644,107233+25]..[644,107233+49]),None)
                      ]
                  <case>
                    pattern (src/lexer.ml[1995,107309+4]..[1995,107309+5])
                      Ppat_constant PConst_int (5,None)
                    expression (src/lexer.mll[646,107340+4]..[646,107340+35])
                      Pexp_apply
                      expression (src/lexer.mll[646,107340+6]..[646,107340+15])
                        Pexp_ident "ocamltype" (src/lexer.mll[646,107340+6]..[646,107340+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[646,107340+16]..[646,107340+26])
                            Pexp_ident "openingpos" (src/lexer.mll[646,107340+16]..[646,107340+26])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[646,107340+27]..[646,107340+33])
                            Pexp_ident "lexbuf" (src/lexer.mll[646,107340+27]..[646,107340+33])
                      ]
                  <case>
                    pattern (src/lexer.ml[2000,107399+4]..[2000,107399+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[2000,107399+4]..[2000,107399+21])
                    expression (src/lexer.ml[2000,107399+25]..[2001,107458+67])
                      Pexp_sequence
                      expression (src/lexer.ml[2000,107399+25]..[2000,107399+57])
                        Pexp_apply
                        expression (src/lexer.ml[2000,107399+25]..[2000,107399+50])
                          Pexp_field
                          expression (src/lexer.ml[2000,107399+25]..[2000,107399+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[2000,107399+25]..[2000,107399+31])
                          "Lexing.refill_buff" (src/lexer.ml[2000,107399+32]..[2000,107399+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2000,107399+51]..[2000,107399+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[2000,107399+51]..[2000,107399+57])
                        ]
                      expression (src/lexer.ml[2001,107458+6]..[2001,107458+67])
                        Pexp_apply
                        expression (src/lexer.ml[2001,107458+6]..[2001,107458+31])
                          Pexp_ident "__ocaml_lex_ocamltype_rec" (src/lexer.ml[2001,107458+6]..[2001,107458+31])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2001,107458+32]..[2001,107458+42])
                              Pexp_ident "openingpos" (src/lexer.ml[2001,107458+32]..[2001,107458+42])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2001,107458+43]..[2001,107458+49])
                              Pexp_ident "lexbuf" (src/lexer.ml[2001,107458+43]..[2001,107458+49])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2001,107458+50]..[2001,107458+67])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2001,107458+50]..[2001,107458+67])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[2003,107527+4]..[2003,107527+10])
          Ppat_var "action" (src/lexer.ml[2003,107527+4]..[2003,107527+10])
        expression (src/lexer.ml[2003,107527+11]..[2004,107575+107]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2003,107527+11]..[2003,107527+18])
            Ppat_var "percent" (src/lexer.ml[2003,107527+11]..[2003,107527+18])
          expression (src/lexer.ml[2003,107527+19]..[2004,107575+107]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2003,107527+19]..[2003,107527+29])
              Ppat_var "openingpos" (src/lexer.ml[2003,107527+19]..[2003,107527+29])
            expression (src/lexer.ml[2003,107527+30]..[2004,107575+107]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2003,107527+30]..[2003,107527+38])
                Ppat_var "monsters" (src/lexer.ml[2003,107527+30]..[2003,107527+38])
              expression (src/lexer.ml[2003,107527+39]..[2004,107575+107]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.ml[2003,107527+39]..[2003,107527+45])
                  Ppat_var "lexbuf" (src/lexer.ml[2003,107527+39]..[2003,107527+45])
                expression (src/lexer.ml[2004,107575+2]..[2004,107575+107])
                  Pexp_sequence
                  expression (src/lexer.ml[2004,107575+2]..[2004,107575+45])
                    Pexp_setfield
                    expression (src/lexer.ml[2004,107575+2]..[2004,107575+8])
                      Pexp_ident "lexbuf" (src/lexer.ml[2004,107575+2]..[2004,107575+8])
                    "Lexing.lex_mem" (src/lexer.ml[2004,107575+9]..[2004,107575+23])
                    expression (src/lexer.ml[2004,107575+27]..[2004,107575+45])
                      Pexp_apply
                      expression (src/lexer.ml[2004,107575+27]..[2004,107575+37])
                        Pexp_ident "Array.make" (src/lexer.ml[2004,107575+27]..[2004,107575+37])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2004,107575+38]..[2004,107575+40])
                            Pexp_constant PConst_int (16,None)
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2004,107575+41]..[2004,107575+45])
                            Pexp_constant PConst_int (-1,None)
                      ]
                  expression (src/lexer.ml[2004,107575+47]..[2004,107575+107])
                    Pexp_apply
                    expression (src/lexer.ml[2004,107575+47]..[2004,107575+69])
                      Pexp_ident "__ocaml_lex_action_rec" (src/lexer.ml[2004,107575+47]..[2004,107575+69])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2004,107575+70]..[2004,107575+77])
                          Pexp_ident "percent" (src/lexer.ml[2004,107575+70]..[2004,107575+77])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2004,107575+78]..[2004,107575+88])
                          Pexp_ident "openingpos" (src/lexer.ml[2004,107575+78]..[2004,107575+88])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2004,107575+89]..[2004,107575+97])
                          Pexp_ident "monsters" (src/lexer.ml[2004,107575+89]..[2004,107575+97])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2004,107575+98]..[2004,107575+104])
                          Pexp_ident "lexbuf" (src/lexer.ml[2004,107575+98]..[2004,107575+104])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2004,107575+105]..[2004,107575+107])
                          Pexp_constant PConst_int (60,None)
                    ]
      <def>
        pattern (src/lexer.ml[2005,107683+4]..[2005,107683+26])
          Ppat_var "__ocaml_lex_action_rec" (src/lexer.ml[2005,107683+4]..[2005,107683+26])
        expression (src/lexer.ml[2005,107683+27]..[2121,111095+81]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2005,107683+27]..[2005,107683+34])
            Ppat_var "percent" (src/lexer.ml[2005,107683+27]..[2005,107683+34])
          expression (src/lexer.ml[2005,107683+35]..[2121,111095+81]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2005,107683+35]..[2005,107683+45])
              Ppat_var "openingpos" (src/lexer.ml[2005,107683+35]..[2005,107683+45])
            expression (src/lexer.ml[2005,107683+46]..[2121,111095+81]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2005,107683+46]..[2005,107683+54])
                Ppat_var "monsters" (src/lexer.ml[2005,107683+46]..[2005,107683+54])
              expression (src/lexer.ml[2005,107683+55]..[2121,111095+81]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.ml[2005,107683+55]..[2005,107683+61])
                  Ppat_var "lexbuf" (src/lexer.ml[2005,107683+55]..[2005,107683+61])
                expression (src/lexer.ml[2005,107683+62]..[2121,111095+81]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/lexer.ml[2005,107683+62]..[2005,107683+79])
                    Ppat_var "__ocaml_lex_state" (src/lexer.ml[2005,107683+62]..[2005,107683+79])
                  expression (src/lexer.ml[2006,107765+2]..[2121,111095+81])
                    Pexp_match
                    expression (src/lexer.ml[2006,107765+8]..[2006,107765+69])
                      Pexp_apply
                      expression (src/lexer.ml[2006,107765+8]..[2006,107765+25])
                        Pexp_ident "Lexing.new_engine" (src/lexer.ml[2006,107765+8]..[2006,107765+25])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2006,107765+26]..[2006,107765+44])
                            Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2006,107765+26]..[2006,107765+44])
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2006,107765+45]..[2006,107765+62])
                            Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2006,107765+45]..[2006,107765+62])
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2006,107765+63]..[2006,107765+69])
                            Pexp_ident "lexbuf" (src/lexer.ml[2006,107765+63]..[2006,107765+69])
                      ]
                    [
                      <case>
                        pattern (src/lexer.ml[2007,107840+8]..[2007,107840+9])
                          Ppat_constant PConst_int (0,None)
                        expression (src/lexer.mll[657,107875+4]..[658,107955+49])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[657,107875+10]..[657,107875+21])
                                Ppat_tuple
                                [
                                  pattern (src/lexer.mll[657,107875+10]..[657,107875+11])
                                    Ppat_any
                                  pattern (src/lexer.mll[657,107875+13]..[657,107875+21])
                                    Ppat_var "monsters" (src/lexer.mll[657,107875+13]..[657,107875+21])
                                ]
                              expression (src/lexer.mll[657,107875+24]..[657,107875+76])
                                Pexp_apply
                                expression (src/lexer.mll[657,107875+24]..[657,107875+30])
                                  Pexp_ident "action" (src/lexer.mll[657,107875+24]..[657,107875+30])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[657,107875+31]..[657,107875+36])
                                      Pexp_construct "false" (src/lexer.mll[657,107875+31]..[657,107875+36])
                                      None
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[657,107875+37]..[657,107875+60])
                                      Pexp_apply
                                      expression (src/lexer.mll[657,107875+38]..[657,107875+52])
                                        Pexp_ident "lexeme_start_p" (src/lexer.mll[657,107875+38]..[657,107875+52])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[657,107875+53]..[657,107875+59])
                                            Pexp_ident "lexbuf" (src/lexer.mll[657,107875+53]..[657,107875+59])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[657,107875+61]..[657,107875+69])
                                      Pexp_ident "monsters" (src/lexer.mll[657,107875+61]..[657,107875+69])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[657,107875+70]..[657,107875+76])
                                      Pexp_ident "lexbuf" (src/lexer.mll[657,107875+70]..[657,107875+76])
                                ]
                          ]
                          expression (src/lexer.mll[658,107955+6]..[658,107955+47])
                            Pexp_apply
                            expression (src/lexer.mll[658,107955+6]..[658,107955+12])
                              Pexp_ident "action" (src/lexer.mll[658,107955+6]..[658,107955+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[658,107955+13]..[658,107955+20])
                                  Pexp_ident "percent" (src/lexer.mll[658,107955+13]..[658,107955+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[658,107955+21]..[658,107955+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[658,107955+21]..[658,107955+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[658,107955+32]..[658,107955+40])
                                  Pexp_ident "monsters" (src/lexer.mll[658,107955+32]..[658,107955+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[658,107955+41]..[658,107955+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[658,107955+41]..[658,107955+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2013,108028+4]..[2013,108028+5])
                          Ppat_constant PConst_int (1,None)
                        expression (src/lexer.ml[2014,108037+0]..src/lexer.mll[668,108513+5])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[659,108063+18]..[659,108063+27])
                                Ppat_var "delimiter" (src/lexer.mll[659,108063+18]..[659,108063+27])
                              expression (src/lexer.ml[2018,108113+2]..[2018,108113+81])
                                Pexp_apply
                                expression (src/lexer.ml[2018,108113+2]..[2018,108113+19])
                                  Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2018,108113+2]..[2018,108113+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2018,108113+20]..[2018,108113+26])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2018,108113+20]..[2018,108113+26])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2018,108113+27]..[2018,108113+54])
                                      Pexp_field
                                      expression (src/lexer.ml[2018,108113+27]..[2018,108113+33])
                                        Pexp_ident "lexbuf" (src/lexer.ml[2018,108113+27]..[2018,108113+33])
                                      "Lexing.lex_start_pos" (src/lexer.ml[2018,108113+34]..[2018,108113+54])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2018,108113+55]..[2018,108113+81])
                                      Pexp_field
                                      expression (src/lexer.ml[2018,108113+55]..[2018,108113+61])
                                        Pexp_ident "lexbuf" (src/lexer.ml[2018,108113+55]..[2018,108113+61])
                                      "Lexing.lex_curr_pos" (src/lexer.ml[2018,108113+62]..[2018,108113+81])
                                ]
                          ]
                          expression (src/lexer.mll[660,108220+4]..[668,108513+5])
                            Pexp_match
                            expression (src/lexer.mll[660,108220+12]..[660,108220+30])
                              Pexp_tuple
                              [
                                expression (src/lexer.mll[660,108220+12]..[660,108220+19])
                                  Pexp_ident "percent" (src/lexer.mll[660,108220+12]..[660,108220+19])
                                expression (src/lexer.mll[660,108220+21]..[660,108220+30])
                                  Pexp_ident "delimiter" (src/lexer.mll[660,108220+21]..[660,108220+30])
                              ]
                            [
                              <case>
                                pattern (src/lexer.mll[661,108256+8]..[662,108275+18])
                                  Ppat_or
                                  pattern (src/lexer.mll[661,108256+8]..[661,108256+18])
                                    Ppat_tuple
                                    [
                                      pattern (src/lexer.mll[661,108256+8]..[661,108256+12])
                                        Ppat_construct "true" (src/lexer.mll[661,108256+8]..[661,108256+12])
                                        None
                                      pattern (src/lexer.mll[661,108256+14]..[661,108256+18])
                                        Ppat_constant PConst_string("%}",(src/lexer.mll[661,108256+15]..[661,108256+17]),None)
                                    ]
                                  pattern (src/lexer.mll[662,108275+8]..[662,108275+18])
                                    Ppat_tuple
                                    [
                                      pattern (src/lexer.mll[662,108275+8]..[662,108275+13])
                                        Ppat_construct "false" (src/lexer.mll[662,108275+8]..[662,108275+13])
                                        None
                                      pattern (src/lexer.mll[662,108275+15]..[662,108275+18])
                                        Ppat_constant PConst_string("}",(src/lexer.mll[662,108275+16]..[662,108275+17]),None)
                                    ]
                                expression (src/lexer.mll[664,108367+10]..[664,108367+41])
                                  Pexp_tuple
                                  [
                                    expression (src/lexer.mll[664,108367+10]..[664,108367+31])
                                      Pexp_apply
                                      expression (src/lexer.mll[664,108367+10]..[664,108367+24])
                                        Pexp_ident "lexeme_start_p" (src/lexer.mll[664,108367+10]..[664,108367+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[664,108367+25]..[664,108367+31])
                                            Pexp_ident "lexbuf" (src/lexer.mll[664,108367+25]..[664,108367+31])
                                      ]
                                    expression (src/lexer.mll[664,108367+33]..[664,108367+41])
                                      Pexp_ident "monsters" (src/lexer.mll[664,108367+33]..[664,108367+41])
                                  ]
                              <case>
                                pattern (src/lexer.mll[665,108409+8]..[665,108409+12])
                                  Ppat_tuple
                                  [
                                    pattern (src/lexer.mll[665,108409+8]..[665,108409+9])
                                      Ppat_any
                                    pattern (src/lexer.mll[665,108409+11]..[665,108409+12])
                                      Ppat_any
                                  ]
                                expression (src/lexer.mll[667,108457+10]..[667,108457+55])
                                  Pexp_apply
                                  expression (src/lexer.mll[667,108457+10]..[667,108457+16])
                                    Pexp_ident "error1" (src/lexer.mll[667,108457+10]..[667,108457+16])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[667,108457+17]..[667,108457+27])
                                        Pexp_ident "openingpos" (src/lexer.mll[667,108457+17]..[667,108457+27])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[667,108457+28]..[667,108457+55])
                                        Pexp_constant PConst_string("unbalanced opening brace.",(src/lexer.mll[667,108457+29]..[667,108457+54]),None)
                                  ]
                            ]
                      <case>
                        pattern (src/lexer.ml[2031,108542+4]..[2031,108542+5])
                          Ppat_constant PConst_int (2,None)
                        expression (src/lexer.mll[670,108573+4]..[671,108652+49])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[670,108573+10]..[670,108573+21])
                                Ppat_tuple
                                [
                                  pattern (src/lexer.mll[670,108573+10]..[670,108573+11])
                                    Ppat_any
                                  pattern (src/lexer.mll[670,108573+13]..[670,108573+21])
                                    Ppat_var "monsters" (src/lexer.mll[670,108573+13]..[670,108573+21])
                                ]
                              expression (src/lexer.mll[670,108573+24]..[670,108573+75])
                                Pexp_apply
                                expression (src/lexer.mll[670,108573+24]..[670,108573+35])
                                  Pexp_ident "parentheses" (src/lexer.mll[670,108573+24]..[670,108573+35])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[670,108573+36]..[670,108573+59])
                                      Pexp_apply
                                      expression (src/lexer.mll[670,108573+37]..[670,108573+51])
                                        Pexp_ident "lexeme_start_p" (src/lexer.mll[670,108573+37]..[670,108573+51])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[670,108573+52]..[670,108573+58])
                                            Pexp_ident "lexbuf" (src/lexer.mll[670,108573+52]..[670,108573+58])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[670,108573+60]..[670,108573+68])
                                      Pexp_ident "monsters" (src/lexer.mll[670,108573+60]..[670,108573+68])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[670,108573+69]..[670,108573+75])
                                      Pexp_ident "lexbuf" (src/lexer.mll[670,108573+69]..[670,108573+75])
                                ]
                          ]
                          expression (src/lexer.mll[671,108652+6]..[671,108652+47])
                            Pexp_apply
                            expression (src/lexer.mll[671,108652+6]..[671,108652+12])
                              Pexp_ident "action" (src/lexer.mll[671,108652+6]..[671,108652+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[671,108652+13]..[671,108652+20])
                                  Pexp_ident "percent" (src/lexer.mll[671,108652+13]..[671,108652+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[671,108652+21]..[671,108652+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[671,108652+21]..[671,108652+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[671,108652+32]..[671,108652+40])
                                  Pexp_ident "monsters" (src/lexer.mll[671,108652+32]..[671,108652+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[671,108652+41]..[671,108652+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[671,108652+41]..[671,108652+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2037,108725+4]..[2037,108725+5])
                          Ppat_constant PConst_int (3,None)
                        expression (src/lexer.ml[2038,108734+0]..src/lexer.mll[675,109021+62])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[672,108760+21]..[672,108760+22])
                                Ppat_var "i" (src/lexer.mll[672,108760+21]..[672,108760+22])
                              expression (src/lexer.ml[2042,108805+2]..[2042,108805+87])
                                Pexp_apply
                                expression (src/lexer.ml[2042,108805+2]..[2042,108805+19])
                                  Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2042,108805+2]..[2042,108805+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2042,108805+20]..[2042,108805+26])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2042,108805+20]..[2042,108805+26])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2042,108805+27]..[2042,108805+60])
                                      Pexp_apply
                                      expression (src/lexer.ml[2042,108805+56]..[2042,108805+57])
                                        Pexp_ident "+" (src/lexer.ml[2042,108805+56]..[2042,108805+57])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2042,108805+28]..[2042,108805+55])
                                            Pexp_field
                                            expression (src/lexer.ml[2042,108805+28]..[2042,108805+34])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2042,108805+28]..[2042,108805+34])
                                            "Lexing.lex_start_pos" (src/lexer.ml[2042,108805+35]..[2042,108805+55])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2042,108805+58]..[2042,108805+59])
                                            Pexp_constant PConst_int (1,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2042,108805+61]..[2042,108805+87])
                                      Pexp_field
                                      expression (src/lexer.ml[2042,108805+61]..[2042,108805+67])
                                        Pexp_ident "lexbuf" (src/lexer.ml[2042,108805+61]..[2042,108805+67])
                                      "Lexing.lex_curr_pos" (src/lexer.ml[2042,108805+68]..[2042,108805+87])
                                ]
                          ]
                          expression (src/lexer.mll[673,108918+4]..[675,109021+62])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[673,108918+10]..[673,108918+11])
                                  Ppat_var "i" (src/lexer.mll[673,108918+10]..[673,108918+11])
                                expression (src/lexer.mll[673,108918+14]..[673,108918+53])
                                  Pexp_apply
                                  expression (src/lexer.mll[673,108918+14]..[673,108918+27])
                                    Pexp_ident "int_of_string" (src/lexer.mll[673,108918+14]..[673,108918+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[673,108918+28]..[673,108918+51])
                                        Pexp_apply
                                        expression (src/lexer.mll[673,108918+29]..[673,108918+43])
                                          Pexp_ident "lexeme_start_p" (src/lexer.mll[673,108918+29]..[673,108918+43])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[673,108918+44]..[673,108918+50])
                                              Pexp_ident "lexbuf" (src/lexer.mll[673,108918+44]..[673,108918+50])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[673,108918+52]..[673,108918+53])
                                        Pexp_ident "i" (src/lexer.mll[673,108918+52]..[673,108918+53])
                                  ]
                            ]
                            expression (src/lexer.mll[674,108975+6]..[675,109021+60])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[674,108975+10]..[674,108975+17])
                                    Ppat_var "monster" (src/lexer.mll[674,108975+10]..[674,108975+17])
                                  expression (src/lexer.mll[674,108975+20]..[674,108975+42])
                                    Pexp_apply
                                    expression (src/lexer.mll[674,108975+20]..[674,108975+26])
                                      Pexp_ident "dollar" (src/lexer.mll[674,108975+20]..[674,108975+26])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[674,108975+27]..[674,108975+40])
                                          Pexp_apply
                                          expression (src/lexer.mll[674,108975+28]..[674,108975+32])
                                            Pexp_ident "cpos" (src/lexer.mll[674,108975+28]..[674,108975+32])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/lexer.mll[674,108975+33]..[674,108975+39])
                                                Pexp_ident "lexbuf" (src/lexer.mll[674,108975+33]..[674,108975+39])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[674,108975+41]..[674,108975+42])
                                          Pexp_ident "i" (src/lexer.mll[674,108975+41]..[674,108975+42])
                                    ]
                              ]
                              expression (src/lexer.mll[675,109021+6]..[675,109021+60])
                                Pexp_apply
                                expression (src/lexer.mll[675,109021+6]..[675,109021+12])
                                  Pexp_ident "action" (src/lexer.mll[675,109021+6]..[675,109021+12])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[675,109021+13]..[675,109021+20])
                                      Pexp_ident "percent" (src/lexer.mll[675,109021+13]..[675,109021+20])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[675,109021+21]..[675,109021+31])
                                      Pexp_ident "openingpos" (src/lexer.mll[675,109021+21]..[675,109021+31])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[675,109021+32]..[675,109021+53])
                                      Pexp_construct "::" (src/lexer.mll[675,109021+41]..[675,109021+43])
                                      Some
                                        expression (src/lexer.mll[675,109021+33]..[675,109021+52]) ghost
                                          Pexp_tuple
                                          [
                                            expression (src/lexer.mll[675,109021+33]..[675,109021+40])
                                              Pexp_ident "monster" (src/lexer.mll[675,109021+33]..[675,109021+40])
                                            expression (src/lexer.mll[675,109021+44]..[675,109021+52])
                                              Pexp_ident "monsters" (src/lexer.mll[675,109021+44]..[675,109021+52])
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[675,109021+54]..[675,109021+60])
                                      Pexp_ident "lexbuf" (src/lexer.mll[675,109021+54]..[675,109021+60])
                                ]
                      <case>
                        pattern (src/lexer.ml[2049,109107+4]..[2049,109107+5])
                          Ppat_constant PConst_int (4,None)
                        expression (src/lexer.ml[2050,109116+0]..src/lexer.mll[678,109898+62])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[467,109142+21]..[467,109142+22])
                                Ppat_var "i" (src/lexer.mll[467,109142+21]..[467,109142+22])
                              expression (src/lexer.ml[2054,109187+2]..[2054,109187+82])
                                Pexp_apply
                                expression (src/lexer.ml[2054,109187+2]..[2054,109187+23])
                                  Pexp_ident "Lexing.sub_lexeme_opt" (src/lexer.ml[2054,109187+2]..[2054,109187+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2054,109187+24]..[2054,109187+30])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2054,109187+24]..[2054,109187+30])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2054,109187+31]..[2054,109187+56])
                                      Pexp_apply
                                      expression (src/lexer.ml[2054,109187+31]..[2054,109187+56]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2054,109187+31]..[2054,109187+56]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2054,109187+31]..[2054,109187+52])
                                            Pexp_field
                                            expression (src/lexer.ml[2054,109187+31]..[2054,109187+37])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2054,109187+31]..[2054,109187+37])
                                            "Lexing.lex_mem" (src/lexer.ml[2054,109187+38]..[2054,109187+52])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2054,109187+54]..[2054,109187+55])
                                            Pexp_constant PConst_int (3,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2054,109187+57]..[2054,109187+82])
                                      Pexp_apply
                                      expression (src/lexer.ml[2054,109187+57]..[2054,109187+82]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2054,109187+57]..[2054,109187+82]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2054,109187+57]..[2054,109187+78])
                                            Pexp_field
                                            expression (src/lexer.ml[2054,109187+57]..[2054,109187+63])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2054,109187+57]..[2054,109187+63])
                                            "Lexing.lex_mem" (src/lexer.ml[2054,109187+64]..[2054,109187+78])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2054,109187+80]..[2054,109187+81])
                                            Pexp_constant PConst_int (2,None)
                                      ]
                                ]
                            <def>
                              pattern (src/lexer.mll[468,109296+29]..[468,109296+30])
                                Ppat_var "x" (src/lexer.mll[468,109296+29]..[468,109296+30])
                              expression (src/lexer.ml[2059,109349+2]..[2059,109349+82])
                                Pexp_apply
                                expression (src/lexer.ml[2059,109349+2]..[2059,109349+23])
                                  Pexp_ident "Lexing.sub_lexeme_opt" (src/lexer.ml[2059,109349+2]..[2059,109349+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2059,109349+24]..[2059,109349+30])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2059,109349+24]..[2059,109349+30])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2059,109349+31]..[2059,109349+56])
                                      Pexp_apply
                                      expression (src/lexer.ml[2059,109349+31]..[2059,109349+56]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2059,109349+31]..[2059,109349+56]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2059,109349+31]..[2059,109349+52])
                                            Pexp_field
                                            expression (src/lexer.ml[2059,109349+31]..[2059,109349+37])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2059,109349+31]..[2059,109349+37])
                                            "Lexing.lex_mem" (src/lexer.ml[2059,109349+38]..[2059,109349+52])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2059,109349+54]..[2059,109349+55])
                                            Pexp_constant PConst_int (7,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2059,109349+57]..[2059,109349+82])
                                      Pexp_apply
                                      expression (src/lexer.ml[2059,109349+57]..[2059,109349+82]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2059,109349+57]..[2059,109349+82]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2059,109349+57]..[2059,109349+78])
                                            Pexp_field
                                            expression (src/lexer.ml[2059,109349+57]..[2059,109349+63])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2059,109349+57]..[2059,109349+63])
                                            "Lexing.lex_mem" (src/lexer.ml[2059,109349+64]..[2059,109349+78])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2059,109349+80]..[2059,109349+81])
                                            Pexp_constant PConst_int (6,None)
                                      ]
                                ]
                            <def>
                              pattern (src/lexer.mll[473,109458+42]..[473,109458+47])
                                Ppat_var "where" (src/lexer.mll[473,109458+42]..[473,109458+47])
                              expression (src/lexer.ml[2064,109528+2]..[2064,109528+78])
                                Pexp_apply
                                expression (src/lexer.ml[2064,109528+2]..[2064,109528+19])
                                  Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2064,109528+2]..[2064,109528+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2064,109528+20]..[2064,109528+26])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2064,109528+20]..[2064,109528+26])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2064,109528+27]..[2064,109528+52])
                                      Pexp_apply
                                      expression (src/lexer.ml[2064,109528+27]..[2064,109528+52]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2064,109528+27]..[2064,109528+52]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2064,109528+27]..[2064,109528+48])
                                            Pexp_field
                                            expression (src/lexer.ml[2064,109528+27]..[2064,109528+33])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2064,109528+27]..[2064,109528+33])
                                            "Lexing.lex_mem" (src/lexer.ml[2064,109528+34]..[2064,109528+48])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2064,109528+50]..[2064,109528+51])
                                            Pexp_constant PConst_int (5,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2064,109528+53]..[2064,109528+78])
                                      Pexp_apply
                                      expression (src/lexer.ml[2064,109528+53]..[2064,109528+78]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2064,109528+53]..[2064,109528+78]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2064,109528+53]..[2064,109528+74])
                                            Pexp_field
                                            expression (src/lexer.ml[2064,109528+53]..[2064,109528+59])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2064,109528+53]..[2064,109528+59])
                                            "Lexing.lex_mem" (src/lexer.ml[2064,109528+60]..[2064,109528+74])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2064,109528+76]..[2064,109528+77])
                                            Pexp_constant PConst_int (4,None)
                                      ]
                                ]
                            <def>
                              pattern (src/lexer.mll[473,109633+69]..[473,109633+75])
                                Ppat_var "flavor" (src/lexer.mll[473,109633+69]..[473,109633+75])
                              expression (src/lexer.ml[2069,109731+2]..[2069,109731+78])
                                Pexp_apply
                                expression (src/lexer.ml[2069,109731+2]..[2069,109731+19])
                                  Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2069,109731+2]..[2069,109731+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2069,109731+20]..[2069,109731+26])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2069,109731+20]..[2069,109731+26])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2069,109731+27]..[2069,109731+52])
                                      Pexp_apply
                                      expression (src/lexer.ml[2069,109731+27]..[2069,109731+52]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2069,109731+27]..[2069,109731+52]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2069,109731+27]..[2069,109731+48])
                                            Pexp_field
                                            expression (src/lexer.ml[2069,109731+27]..[2069,109731+33])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2069,109731+27]..[2069,109731+33])
                                            "Lexing.lex_mem" (src/lexer.ml[2069,109731+34]..[2069,109731+48])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2069,109731+50]..[2069,109731+51])
                                            Pexp_constant PConst_int (1,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.ml[2069,109731+53]..[2069,109731+78])
                                      Pexp_apply
                                      expression (src/lexer.ml[2069,109731+53]..[2069,109731+78]) ghost
                                        Pexp_ident "Array.get" (src/lexer.ml[2069,109731+53]..[2069,109731+78]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2069,109731+53]..[2069,109731+74])
                                            Pexp_field
                                            expression (src/lexer.ml[2069,109731+53]..[2069,109731+59])
                                              Pexp_ident "lexbuf" (src/lexer.ml[2069,109731+53]..[2069,109731+59])
                                            "Lexing.lex_mem" (src/lexer.ml[2069,109731+60]..[2069,109731+74])
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.ml[2069,109731+76]..[2069,109731+77])
                                            Pexp_constant PConst_int (0,None)
                                      ]
                                ]
                          ]
                          expression (src/lexer.mll[677,109835+4]..[678,109898+62])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[677,109835+10]..[677,109835+17])
                                  Ppat_var "monster" (src/lexer.mll[677,109835+10]..[677,109835+17])
                                expression (src/lexer.mll[677,109835+20]..[677,109835+59])
                                  Pexp_apply
                                  expression (src/lexer.mll[677,109835+20]..[677,109835+28])
                                    Pexp_ident "position" (src/lexer.mll[677,109835+20]..[677,109835+28])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[677,109835+29]..[677,109835+42])
                                        Pexp_apply
                                        expression (src/lexer.mll[677,109835+30]..[677,109835+34])
                                          Pexp_ident "cpos" (src/lexer.mll[677,109835+30]..[677,109835+34])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[677,109835+35]..[677,109835+41])
                                              Pexp_ident "lexbuf" (src/lexer.mll[677,109835+35]..[677,109835+41])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[677,109835+43]..[677,109835+48])
                                        Pexp_ident "where" (src/lexer.mll[677,109835+43]..[677,109835+48])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[677,109835+49]..[677,109835+55])
                                        Pexp_ident "flavor" (src/lexer.mll[677,109835+49]..[677,109835+55])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[677,109835+56]..[677,109835+57])
                                        Pexp_ident "i" (src/lexer.mll[677,109835+56]..[677,109835+57])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[677,109835+58]..[677,109835+59])
                                        Pexp_ident "x" (src/lexer.mll[677,109835+58]..[677,109835+59])
                                  ]
                            ]
                            expression (src/lexer.mll[678,109898+6]..[678,109898+60])
                              Pexp_apply
                              expression (src/lexer.mll[678,109898+6]..[678,109898+12])
                                Pexp_ident "action" (src/lexer.mll[678,109898+6]..[678,109898+12])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[678,109898+13]..[678,109898+20])
                                    Pexp_ident "percent" (src/lexer.mll[678,109898+13]..[678,109898+20])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[678,109898+21]..[678,109898+31])
                                    Pexp_ident "openingpos" (src/lexer.mll[678,109898+21]..[678,109898+31])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[678,109898+32]..[678,109898+53])
                                    Pexp_construct "::" (src/lexer.mll[678,109898+41]..[678,109898+43])
                                    Some
                                      expression (src/lexer.mll[678,109898+33]..[678,109898+52]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[678,109898+33]..[678,109898+40])
                                            Pexp_ident "monster" (src/lexer.mll[678,109898+33]..[678,109898+40])
                                          expression (src/lexer.mll[678,109898+44]..[678,109898+52])
                                            Pexp_ident "monsters" (src/lexer.mll[678,109898+44]..[678,109898+52])
                                        ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[678,109898+54]..[678,109898+60])
                                    Pexp_ident "lexbuf" (src/lexer.mll[678,109898+54]..[678,109898+60])
                              ]
                      <case>
                        pattern (src/lexer.ml[2075,109984+4]..[2075,109984+5])
                          Ppat_constant PConst_int (5,None)
                        expression (src/lexer.mll[680,110015+4]..[680,110015+62])
                          Pexp_apply
                          expression (src/lexer.mll[680,110015+6]..[680,110015+12])
                            Pexp_ident "error2" (src/lexer.mll[680,110015+6]..[680,110015+12])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[680,110015+13]..[680,110015+19])
                                Pexp_ident "lexbuf" (src/lexer.mll[680,110015+13]..[680,110015+19])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[680,110015+20]..[680,110015+60])
                                Pexp_constant PConst_string("$previouserror is no longer supported.",(src/lexer.mll[680,110015+21]..[680,110015+59]),None)
                          ]
                      <case>
                        pattern (src/lexer.ml[2080,110101+4]..[2080,110101+5])
                          Ppat_constant PConst_int (6,None)
                        expression (src/lexer.mll[682,110132+4]..[683,110181+62])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[682,110132+10]..[682,110132+17])
                                Ppat_var "monster" (src/lexer.mll[682,110132+10]..[682,110132+17])
                              expression (src/lexer.mll[682,110132+20]..[682,110132+45])
                                Pexp_apply
                                expression (src/lexer.mll[682,110132+20]..[682,110132+31])
                                  Pexp_ident "syntaxerror" (src/lexer.mll[682,110132+20]..[682,110132+31])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[682,110132+32]..[682,110132+45])
                                      Pexp_apply
                                      expression (src/lexer.mll[682,110132+33]..[682,110132+37])
                                        Pexp_ident "cpos" (src/lexer.mll[682,110132+33]..[682,110132+37])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[682,110132+38]..[682,110132+44])
                                            Pexp_ident "lexbuf" (src/lexer.mll[682,110132+38]..[682,110132+44])
                                      ]
                                ]
                          ]
                          expression (src/lexer.mll[683,110181+6]..[683,110181+60])
                            Pexp_apply
                            expression (src/lexer.mll[683,110181+6]..[683,110181+12])
                              Pexp_ident "action" (src/lexer.mll[683,110181+6]..[683,110181+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[683,110181+13]..[683,110181+20])
                                  Pexp_ident "percent" (src/lexer.mll[683,110181+13]..[683,110181+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[683,110181+21]..[683,110181+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[683,110181+21]..[683,110181+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[683,110181+32]..[683,110181+53])
                                  Pexp_construct "::" (src/lexer.mll[683,110181+41]..[683,110181+43])
                                  Some
                                    expression (src/lexer.mll[683,110181+33]..[683,110181+52]) ghost
                                      Pexp_tuple
                                      [
                                        expression (src/lexer.mll[683,110181+33]..[683,110181+40])
                                          Pexp_ident "monster" (src/lexer.mll[683,110181+33]..[683,110181+40])
                                        expression (src/lexer.mll[683,110181+44]..[683,110181+52])
                                          Pexp_ident "monsters" (src/lexer.mll[683,110181+44]..[683,110181+52])
                                      ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[683,110181+54]..[683,110181+60])
                                  Pexp_ident "lexbuf" (src/lexer.mll[683,110181+54]..[683,110181+60])
                            ]
                      <case>
                        pattern (src/lexer.ml[2086,110267+4]..[2086,110267+5])
                          Ppat_constant PConst_int (7,None)
                        expression (src/lexer.mll[685,110298+4]..[686,110343+49])
                          Pexp_sequence
                          expression (src/lexer.mll[685,110298+6]..[685,110298+43])
                            Pexp_apply
                            expression (src/lexer.mll[685,110298+6]..[685,110298+12])
                              Pexp_ident "string" (src/lexer.mll[685,110298+6]..[685,110298+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[685,110298+13]..[685,110298+36])
                                  Pexp_apply
                                  expression (src/lexer.mll[685,110298+14]..[685,110298+28])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[685,110298+14]..[685,110298+28])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[685,110298+29]..[685,110298+35])
                                        Pexp_ident "lexbuf" (src/lexer.mll[685,110298+29]..[685,110298+35])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[685,110298+37]..[685,110298+43])
                                  Pexp_ident "lexbuf" (src/lexer.mll[685,110298+37]..[685,110298+43])
                            ]
                          expression (src/lexer.mll[686,110343+6]..[686,110343+47])
                            Pexp_apply
                            expression (src/lexer.mll[686,110343+6]..[686,110343+12])
                              Pexp_ident "action" (src/lexer.mll[686,110343+6]..[686,110343+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[686,110343+13]..[686,110343+20])
                                  Pexp_ident "percent" (src/lexer.mll[686,110343+13]..[686,110343+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[686,110343+21]..[686,110343+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[686,110343+21]..[686,110343+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[686,110343+32]..[686,110343+40])
                                  Pexp_ident "monsters" (src/lexer.mll[686,110343+32]..[686,110343+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[686,110343+41]..[686,110343+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[686,110343+41]..[686,110343+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2092,110416+4]..[2092,110416+5])
                          Ppat_constant PConst_int (8,None)
                        expression (src/lexer.mll[688,110447+4]..[689,110466+49])
                          Pexp_sequence
                          expression (src/lexer.mll[688,110447+6]..[688,110447+17])
                            Pexp_apply
                            expression (src/lexer.mll[688,110447+6]..[688,110447+10])
                              Pexp_ident "char" (src/lexer.mll[688,110447+6]..[688,110447+10])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[688,110447+11]..[688,110447+17])
                                  Pexp_ident "lexbuf" (src/lexer.mll[688,110447+11]..[688,110447+17])
                            ]
                          expression (src/lexer.mll[689,110466+6]..[689,110466+47])
                            Pexp_apply
                            expression (src/lexer.mll[689,110466+6]..[689,110466+12])
                              Pexp_ident "action" (src/lexer.mll[689,110466+6]..[689,110466+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[689,110466+13]..[689,110466+20])
                                  Pexp_ident "percent" (src/lexer.mll[689,110466+13]..[689,110466+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[689,110466+21]..[689,110466+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[689,110466+21]..[689,110466+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[689,110466+32]..[689,110466+40])
                                  Pexp_ident "monsters" (src/lexer.mll[689,110466+32]..[689,110466+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[689,110466+41]..[689,110466+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[689,110466+41]..[689,110466+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2098,110539+4]..[2098,110539+5])
                          Ppat_constant PConst_int (9,None)
                        expression (src/lexer.mll[691,110570+4]..[692,110621+49])
                          Pexp_sequence
                          expression (src/lexer.mll[691,110570+6]..[691,110570+49])
                            Pexp_apply
                            expression (src/lexer.mll[691,110570+6]..[691,110570+18])
                              Pexp_ident "ocamlcomment" (src/lexer.mll[691,110570+6]..[691,110570+18])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[691,110570+19]..[691,110570+42])
                                  Pexp_apply
                                  expression (src/lexer.mll[691,110570+20]..[691,110570+34])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[691,110570+20]..[691,110570+34])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[691,110570+35]..[691,110570+41])
                                        Pexp_ident "lexbuf" (src/lexer.mll[691,110570+35]..[691,110570+41])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[691,110570+43]..[691,110570+49])
                                  Pexp_ident "lexbuf" (src/lexer.mll[691,110570+43]..[691,110570+49])
                            ]
                          expression (src/lexer.mll[692,110621+6]..[692,110621+47])
                            Pexp_apply
                            expression (src/lexer.mll[692,110621+6]..[692,110621+12])
                              Pexp_ident "action" (src/lexer.mll[692,110621+6]..[692,110621+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[692,110621+13]..[692,110621+20])
                                  Pexp_ident "percent" (src/lexer.mll[692,110621+13]..[692,110621+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[692,110621+21]..[692,110621+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[692,110621+21]..[692,110621+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[692,110621+32]..[692,110621+40])
                                  Pexp_ident "monsters" (src/lexer.mll[692,110621+32]..[692,110621+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[692,110621+41]..[692,110621+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[692,110621+41]..[692,110621+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2104,110694+4]..[2104,110694+6])
                          Ppat_constant PConst_int (10,None)
                        expression (src/lexer.mll[694,110726+4]..[695,110749+49])
                          Pexp_sequence
                          expression (src/lexer.mll[694,110726+6]..[694,110726+21])
                            Pexp_apply
                            expression (src/lexer.mll[694,110726+6]..[694,110726+14])
                              Pexp_ident "new_line" (src/lexer.mll[694,110726+6]..[694,110726+14])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[694,110726+15]..[694,110726+21])
                                  Pexp_ident "lexbuf" (src/lexer.mll[694,110726+15]..[694,110726+21])
                            ]
                          expression (src/lexer.mll[695,110749+6]..[695,110749+47])
                            Pexp_apply
                            expression (src/lexer.mll[695,110749+6]..[695,110749+12])
                              Pexp_ident "action" (src/lexer.mll[695,110749+6]..[695,110749+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[695,110749+13]..[695,110749+20])
                                  Pexp_ident "percent" (src/lexer.mll[695,110749+13]..[695,110749+20])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[695,110749+21]..[695,110749+31])
                                  Pexp_ident "openingpos" (src/lexer.mll[695,110749+21]..[695,110749+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[695,110749+32]..[695,110749+40])
                                  Pexp_ident "monsters" (src/lexer.mll[695,110749+32]..[695,110749+40])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[695,110749+41]..[695,110749+47])
                                  Pexp_ident "lexbuf" (src/lexer.mll[695,110749+41]..[695,110749+47])
                            ]
                      <case>
                        pattern (src/lexer.ml[2110,110822+4]..[2110,110822+6])
                          Ppat_constant PConst_int (11,None)
                        expression (src/lexer.mll[698,110854+4]..[698,110854+53])
                          Pexp_apply
                          expression (src/lexer.mll[698,110854+6]..[698,110854+12])
                            Pexp_ident "error1" (src/lexer.mll[698,110854+6]..[698,110854+12])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[698,110854+13]..[698,110854+23])
                                Pexp_ident "openingpos" (src/lexer.mll[698,110854+13]..[698,110854+23])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[698,110854+24]..[698,110854+51])
                                Pexp_constant PConst_string("unbalanced opening brace.",(src/lexer.mll[698,110854+25]..[698,110854+50]),None)
                          ]
                      <case>
                        pattern (src/lexer.ml[2115,110931+4]..[2115,110931+6])
                          Ppat_constant PConst_int (12,None)
                        expression (src/lexer.mll[700,110963+4]..[700,110963+49])
                          Pexp_apply
                          expression (src/lexer.mll[700,110963+6]..[700,110963+12])
                            Pexp_ident "action" (src/lexer.mll[700,110963+6]..[700,110963+12])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[700,110963+13]..[700,110963+20])
                                Pexp_ident "percent" (src/lexer.mll[700,110963+13]..[700,110963+20])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[700,110963+21]..[700,110963+31])
                                Pexp_ident "openingpos" (src/lexer.mll[700,110963+21]..[700,110963+31])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[700,110963+32]..[700,110963+40])
                                Pexp_ident "monsters" (src/lexer.mll[700,110963+32]..[700,110963+40])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[700,110963+41]..[700,110963+47])
                                Pexp_ident "lexbuf" (src/lexer.mll[700,110963+41]..[700,110963+47])
                          ]
                      <case>
                        pattern (src/lexer.ml[2120,111036+4]..[2120,111036+21])
                          Ppat_var "__ocaml_lex_state" (src/lexer.ml[2120,111036+4]..[2120,111036+21])
                        expression (src/lexer.ml[2120,111036+25]..[2121,111095+81])
                          Pexp_sequence
                          expression (src/lexer.ml[2120,111036+25]..[2120,111036+57])
                            Pexp_apply
                            expression (src/lexer.ml[2120,111036+25]..[2120,111036+50])
                              Pexp_field
                              expression (src/lexer.ml[2120,111036+25]..[2120,111036+31])
                                Pexp_ident "lexbuf" (src/lexer.ml[2120,111036+25]..[2120,111036+31])
                              "Lexing.refill_buff" (src/lexer.ml[2120,111036+32]..[2120,111036+50])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2120,111036+51]..[2120,111036+57])
                                  Pexp_ident "lexbuf" (src/lexer.ml[2120,111036+51]..[2120,111036+57])
                            ]
                          expression (src/lexer.ml[2121,111095+6]..[2121,111095+81])
                            Pexp_apply
                            expression (src/lexer.ml[2121,111095+6]..[2121,111095+28])
                              Pexp_ident "__ocaml_lex_action_rec" (src/lexer.ml[2121,111095+6]..[2121,111095+28])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2121,111095+29]..[2121,111095+36])
                                  Pexp_ident "percent" (src/lexer.ml[2121,111095+29]..[2121,111095+36])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2121,111095+37]..[2121,111095+47])
                                  Pexp_ident "openingpos" (src/lexer.ml[2121,111095+37]..[2121,111095+47])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2121,111095+48]..[2121,111095+56])
                                  Pexp_ident "monsters" (src/lexer.ml[2121,111095+48]..[2121,111095+56])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2121,111095+57]..[2121,111095+63])
                                  Pexp_ident "lexbuf" (src/lexer.ml[2121,111095+57]..[2121,111095+63])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2121,111095+64]..[2121,111095+81])
                                  Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2121,111095+64]..[2121,111095+81])
                            ]
                    ]
      <def>
        pattern (src/lexer.ml[2123,111178+4]..[2123,111178+15])
          Ppat_var "parentheses" (src/lexer.ml[2123,111178+4]..[2123,111178+15])
        expression (src/lexer.ml[2123,111178+16]..[2124,111223+105]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2123,111178+16]..[2123,111178+26])
            Ppat_var "openingpos" (src/lexer.ml[2123,111178+16]..[2123,111178+26])
          expression (src/lexer.ml[2123,111178+27]..[2124,111223+105]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2123,111178+27]..[2123,111178+35])
              Ppat_var "monsters" (src/lexer.ml[2123,111178+27]..[2123,111178+35])
            expression (src/lexer.ml[2123,111178+36]..[2124,111223+105]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2123,111178+36]..[2123,111178+42])
                Ppat_var "lexbuf" (src/lexer.ml[2123,111178+36]..[2123,111178+42])
              expression (src/lexer.ml[2124,111223+2]..[2124,111223+105])
                Pexp_sequence
                expression (src/lexer.ml[2124,111223+2]..[2124,111223+45])
                  Pexp_setfield
                  expression (src/lexer.ml[2124,111223+2]..[2124,111223+8])
                    Pexp_ident "lexbuf" (src/lexer.ml[2124,111223+2]..[2124,111223+8])
                  "Lexing.lex_mem" (src/lexer.ml[2124,111223+9]..[2124,111223+23])
                  expression (src/lexer.ml[2124,111223+27]..[2124,111223+45])
                    Pexp_apply
                    expression (src/lexer.ml[2124,111223+27]..[2124,111223+37])
                      Pexp_ident "Array.make" (src/lexer.ml[2124,111223+27]..[2124,111223+37])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2124,111223+38]..[2124,111223+40])
                          Pexp_constant PConst_int (16,None)
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2124,111223+41]..[2124,111223+45])
                          Pexp_constant PConst_int (-1,None)
                    ]
                expression (src/lexer.ml[2124,111223+47]..[2124,111223+105])
                  Pexp_apply
                  expression (src/lexer.ml[2124,111223+47]..[2124,111223+74])
                    Pexp_ident "__ocaml_lex_parentheses_rec" (src/lexer.ml[2124,111223+47]..[2124,111223+74])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2124,111223+75]..[2124,111223+85])
                        Pexp_ident "openingpos" (src/lexer.ml[2124,111223+75]..[2124,111223+85])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2124,111223+86]..[2124,111223+94])
                        Pexp_ident "monsters" (src/lexer.ml[2124,111223+86]..[2124,111223+94])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2124,111223+95]..[2124,111223+101])
                        Pexp_ident "lexbuf" (src/lexer.ml[2124,111223+95]..[2124,111223+101])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2124,111223+102]..[2124,111223+105])
                        Pexp_constant PConst_int (125,None)
                  ]
      <def>
        pattern (src/lexer.ml[2125,111329+4]..[2125,111329+31])
          Ppat_var "__ocaml_lex_parentheses_rec" (src/lexer.ml[2125,111329+4]..[2125,111329+31])
        expression (src/lexer.ml[2125,111329+32]..[2224,114270+78]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2125,111329+32]..[2125,111329+42])
            Ppat_var "openingpos" (src/lexer.ml[2125,111329+32]..[2125,111329+42])
          expression (src/lexer.ml[2125,111329+43]..[2224,114270+78]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2125,111329+43]..[2125,111329+51])
              Ppat_var "monsters" (src/lexer.ml[2125,111329+43]..[2125,111329+51])
            expression (src/lexer.ml[2125,111329+52]..[2224,114270+78]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2125,111329+52]..[2125,111329+58])
                Ppat_var "lexbuf" (src/lexer.ml[2125,111329+52]..[2125,111329+58])
              expression (src/lexer.ml[2125,111329+59]..[2224,114270+78]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.ml[2125,111329+59]..[2125,111329+76])
                  Ppat_var "__ocaml_lex_state" (src/lexer.ml[2125,111329+59]..[2125,111329+76])
                expression (src/lexer.ml[2126,111408+2]..[2224,114270+78])
                  Pexp_match
                  expression (src/lexer.ml[2126,111408+8]..[2126,111408+69])
                    Pexp_apply
                    expression (src/lexer.ml[2126,111408+8]..[2126,111408+25])
                      Pexp_ident "Lexing.new_engine" (src/lexer.ml[2126,111408+8]..[2126,111408+25])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2126,111408+26]..[2126,111408+44])
                          Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2126,111408+26]..[2126,111408+44])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2126,111408+45]..[2126,111408+62])
                          Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2126,111408+45]..[2126,111408+62])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2126,111408+63]..[2126,111408+69])
                          Pexp_ident "lexbuf" (src/lexer.ml[2126,111408+63]..[2126,111408+69])
                    ]
                  [
                    <case>
                      pattern (src/lexer.ml[2127,111483+8]..[2127,111483+9])
                        Ppat_constant PConst_int (0,None)
                      expression (src/lexer.mll[709,111518+4]..[710,111597+46])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[709,111518+10]..[709,111518+21])
                              Ppat_tuple
                              [
                                pattern (src/lexer.mll[709,111518+10]..[709,111518+11])
                                  Ppat_any
                                pattern (src/lexer.mll[709,111518+13]..[709,111518+21])
                                  Ppat_var "monsters" (src/lexer.mll[709,111518+13]..[709,111518+21])
                              ]
                            expression (src/lexer.mll[709,111518+24]..[709,111518+75])
                              Pexp_apply
                              expression (src/lexer.mll[709,111518+24]..[709,111518+35])
                                Pexp_ident "parentheses" (src/lexer.mll[709,111518+24]..[709,111518+35])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[709,111518+36]..[709,111518+59])
                                    Pexp_apply
                                    expression (src/lexer.mll[709,111518+37]..[709,111518+51])
                                      Pexp_ident "lexeme_start_p" (src/lexer.mll[709,111518+37]..[709,111518+51])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[709,111518+52]..[709,111518+58])
                                          Pexp_ident "lexbuf" (src/lexer.mll[709,111518+52]..[709,111518+58])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[709,111518+60]..[709,111518+68])
                                    Pexp_ident "monsters" (src/lexer.mll[709,111518+60]..[709,111518+68])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[709,111518+69]..[709,111518+75])
                                    Pexp_ident "lexbuf" (src/lexer.mll[709,111518+69]..[709,111518+75])
                              ]
                        ]
                        expression (src/lexer.mll[710,111597+6]..[710,111597+44])
                          Pexp_apply
                          expression (src/lexer.mll[710,111597+6]..[710,111597+17])
                            Pexp_ident "parentheses" (src/lexer.mll[710,111597+6]..[710,111597+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[710,111597+18]..[710,111597+28])
                                Pexp_ident "openingpos" (src/lexer.mll[710,111597+18]..[710,111597+28])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[710,111597+29]..[710,111597+37])
                                Pexp_ident "monsters" (src/lexer.mll[710,111597+29]..[710,111597+37])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[710,111597+38]..[710,111597+44])
                                Pexp_ident "lexbuf" (src/lexer.mll[710,111597+38]..[710,111597+44])
                          ]
                    <case>
                      pattern (src/lexer.ml[2133,111667+4]..[2133,111667+5])
                        Ppat_constant PConst_int (1,None)
                      expression (src/lexer.mll[712,111698+4]..[712,111698+39])
                        Pexp_tuple
                        [
                          expression (src/lexer.mll[712,111698+6]..[712,111698+27])
                            Pexp_apply
                            expression (src/lexer.mll[712,111698+6]..[712,111698+20])
                              Pexp_ident "lexeme_start_p" (src/lexer.mll[712,111698+6]..[712,111698+20])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[712,111698+21]..[712,111698+27])
                                  Pexp_ident "lexbuf" (src/lexer.mll[712,111698+21]..[712,111698+27])
                            ]
                          expression (src/lexer.mll[712,111698+29]..[712,111698+37])
                            Pexp_ident "monsters" (src/lexer.mll[712,111698+29]..[712,111698+37])
                        ]
                    <case>
                      pattern (src/lexer.ml[2138,111761+4]..[2138,111761+5])
                        Ppat_constant PConst_int (2,None)
                      expression (src/lexer.mll[714,111792+4]..[715,111872+46])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[714,111792+10]..[714,111792+21])
                              Ppat_tuple
                              [
                                pattern (src/lexer.mll[714,111792+10]..[714,111792+11])
                                  Ppat_any
                                pattern (src/lexer.mll[714,111792+13]..[714,111792+21])
                                  Ppat_var "monsters" (src/lexer.mll[714,111792+13]..[714,111792+21])
                              ]
                            expression (src/lexer.mll[714,111792+24]..[714,111792+76])
                              Pexp_apply
                              expression (src/lexer.mll[714,111792+24]..[714,111792+30])
                                Pexp_ident "action" (src/lexer.mll[714,111792+24]..[714,111792+30])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[714,111792+31]..[714,111792+36])
                                    Pexp_construct "false" (src/lexer.mll[714,111792+31]..[714,111792+36])
                                    None
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[714,111792+37]..[714,111792+60])
                                    Pexp_apply
                                    expression (src/lexer.mll[714,111792+38]..[714,111792+52])
                                      Pexp_ident "lexeme_start_p" (src/lexer.mll[714,111792+38]..[714,111792+52])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[714,111792+53]..[714,111792+59])
                                          Pexp_ident "lexbuf" (src/lexer.mll[714,111792+53]..[714,111792+59])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[714,111792+61]..[714,111792+69])
                                    Pexp_ident "monsters" (src/lexer.mll[714,111792+61]..[714,111792+69])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[714,111792+70]..[714,111792+76])
                                    Pexp_ident "lexbuf" (src/lexer.mll[714,111792+70]..[714,111792+76])
                              ]
                        ]
                        expression (src/lexer.mll[715,111872+6]..[715,111872+44])
                          Pexp_apply
                          expression (src/lexer.mll[715,111872+6]..[715,111872+17])
                            Pexp_ident "parentheses" (src/lexer.mll[715,111872+6]..[715,111872+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[715,111872+18]..[715,111872+28])
                                Pexp_ident "openingpos" (src/lexer.mll[715,111872+18]..[715,111872+28])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[715,111872+29]..[715,111872+37])
                                Pexp_ident "monsters" (src/lexer.mll[715,111872+29]..[715,111872+37])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[715,111872+38]..[715,111872+44])
                                Pexp_ident "lexbuf" (src/lexer.mll[715,111872+38]..[715,111872+44])
                          ]
                    <case>
                      pattern (src/lexer.ml[2144,111942+4]..[2144,111942+5])
                        Ppat_constant PConst_int (3,None)
                      expression (src/lexer.ml[2145,111951+0]..src/lexer.mll[719,112238+59])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[716,111977+21]..[716,111977+22])
                              Ppat_var "i" (src/lexer.mll[716,111977+21]..[716,111977+22])
                            expression (src/lexer.ml[2149,112022+2]..[2149,112022+87])
                              Pexp_apply
                              expression (src/lexer.ml[2149,112022+2]..[2149,112022+19])
                                Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2149,112022+2]..[2149,112022+19])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2149,112022+20]..[2149,112022+26])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2149,112022+20]..[2149,112022+26])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2149,112022+27]..[2149,112022+60])
                                    Pexp_apply
                                    expression (src/lexer.ml[2149,112022+56]..[2149,112022+57])
                                      Pexp_ident "+" (src/lexer.ml[2149,112022+56]..[2149,112022+57])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2149,112022+28]..[2149,112022+55])
                                          Pexp_field
                                          expression (src/lexer.ml[2149,112022+28]..[2149,112022+34])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2149,112022+28]..[2149,112022+34])
                                          "Lexing.lex_start_pos" (src/lexer.ml[2149,112022+35]..[2149,112022+55])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2149,112022+58]..[2149,112022+59])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2149,112022+61]..[2149,112022+87])
                                    Pexp_field
                                    expression (src/lexer.ml[2149,112022+61]..[2149,112022+67])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2149,112022+61]..[2149,112022+67])
                                    "Lexing.lex_curr_pos" (src/lexer.ml[2149,112022+68]..[2149,112022+87])
                              ]
                        ]
                        expression (src/lexer.mll[717,112135+4]..[719,112238+59])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[717,112135+10]..[717,112135+11])
                                Ppat_var "i" (src/lexer.mll[717,112135+10]..[717,112135+11])
                              expression (src/lexer.mll[717,112135+14]..[717,112135+53])
                                Pexp_apply
                                expression (src/lexer.mll[717,112135+14]..[717,112135+27])
                                  Pexp_ident "int_of_string" (src/lexer.mll[717,112135+14]..[717,112135+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[717,112135+28]..[717,112135+51])
                                      Pexp_apply
                                      expression (src/lexer.mll[717,112135+29]..[717,112135+43])
                                        Pexp_ident "lexeme_start_p" (src/lexer.mll[717,112135+29]..[717,112135+43])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[717,112135+44]..[717,112135+50])
                                            Pexp_ident "lexbuf" (src/lexer.mll[717,112135+44]..[717,112135+50])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[717,112135+52]..[717,112135+53])
                                      Pexp_ident "i" (src/lexer.mll[717,112135+52]..[717,112135+53])
                                ]
                          ]
                          expression (src/lexer.mll[718,112192+6]..[719,112238+57])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[718,112192+10]..[718,112192+17])
                                  Ppat_var "monster" (src/lexer.mll[718,112192+10]..[718,112192+17])
                                expression (src/lexer.mll[718,112192+20]..[718,112192+42])
                                  Pexp_apply
                                  expression (src/lexer.mll[718,112192+20]..[718,112192+26])
                                    Pexp_ident "dollar" (src/lexer.mll[718,112192+20]..[718,112192+26])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[718,112192+27]..[718,112192+40])
                                        Pexp_apply
                                        expression (src/lexer.mll[718,112192+28]..[718,112192+32])
                                          Pexp_ident "cpos" (src/lexer.mll[718,112192+28]..[718,112192+32])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/lexer.mll[718,112192+33]..[718,112192+39])
                                              Pexp_ident "lexbuf" (src/lexer.mll[718,112192+33]..[718,112192+39])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[718,112192+41]..[718,112192+42])
                                        Pexp_ident "i" (src/lexer.mll[718,112192+41]..[718,112192+42])
                                  ]
                            ]
                            expression (src/lexer.mll[719,112238+6]..[719,112238+57])
                              Pexp_apply
                              expression (src/lexer.mll[719,112238+6]..[719,112238+17])
                                Pexp_ident "parentheses" (src/lexer.mll[719,112238+6]..[719,112238+17])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[719,112238+18]..[719,112238+28])
                                    Pexp_ident "openingpos" (src/lexer.mll[719,112238+18]..[719,112238+28])
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[719,112238+29]..[719,112238+50])
                                    Pexp_construct "::" (src/lexer.mll[719,112238+38]..[719,112238+40])
                                    Some
                                      expression (src/lexer.mll[719,112238+30]..[719,112238+49]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/lexer.mll[719,112238+30]..[719,112238+37])
                                            Pexp_ident "monster" (src/lexer.mll[719,112238+30]..[719,112238+37])
                                          expression (src/lexer.mll[719,112238+41]..[719,112238+49])
                                            Pexp_ident "monsters" (src/lexer.mll[719,112238+41]..[719,112238+49])
                                        ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[719,112238+51]..[719,112238+57])
                                    Pexp_ident "lexbuf" (src/lexer.mll[719,112238+51]..[719,112238+57])
                              ]
                    <case>
                      pattern (src/lexer.ml[2156,112321+4]..[2156,112321+5])
                        Ppat_constant PConst_int (4,None)
                      expression (src/lexer.ml[2157,112330+0]..src/lexer.mll[722,113112+59])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[467,112356+21]..[467,112356+22])
                              Ppat_var "i" (src/lexer.mll[467,112356+21]..[467,112356+22])
                            expression (src/lexer.ml[2161,112401+2]..[2161,112401+82])
                              Pexp_apply
                              expression (src/lexer.ml[2161,112401+2]..[2161,112401+23])
                                Pexp_ident "Lexing.sub_lexeme_opt" (src/lexer.ml[2161,112401+2]..[2161,112401+23])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2161,112401+24]..[2161,112401+30])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2161,112401+24]..[2161,112401+30])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2161,112401+31]..[2161,112401+56])
                                    Pexp_apply
                                    expression (src/lexer.ml[2161,112401+31]..[2161,112401+56]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2161,112401+31]..[2161,112401+56]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2161,112401+31]..[2161,112401+52])
                                          Pexp_field
                                          expression (src/lexer.ml[2161,112401+31]..[2161,112401+37])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2161,112401+31]..[2161,112401+37])
                                          "Lexing.lex_mem" (src/lexer.ml[2161,112401+38]..[2161,112401+52])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2161,112401+54]..[2161,112401+55])
                                          Pexp_constant PConst_int (3,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2161,112401+57]..[2161,112401+82])
                                    Pexp_apply
                                    expression (src/lexer.ml[2161,112401+57]..[2161,112401+82]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2161,112401+57]..[2161,112401+82]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2161,112401+57]..[2161,112401+78])
                                          Pexp_field
                                          expression (src/lexer.ml[2161,112401+57]..[2161,112401+63])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2161,112401+57]..[2161,112401+63])
                                          "Lexing.lex_mem" (src/lexer.ml[2161,112401+64]..[2161,112401+78])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2161,112401+80]..[2161,112401+81])
                                          Pexp_constant PConst_int (2,None)
                                    ]
                              ]
                          <def>
                            pattern (src/lexer.mll[468,112510+29]..[468,112510+30])
                              Ppat_var "x" (src/lexer.mll[468,112510+29]..[468,112510+30])
                            expression (src/lexer.ml[2166,112563+2]..[2166,112563+82])
                              Pexp_apply
                              expression (src/lexer.ml[2166,112563+2]..[2166,112563+23])
                                Pexp_ident "Lexing.sub_lexeme_opt" (src/lexer.ml[2166,112563+2]..[2166,112563+23])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2166,112563+24]..[2166,112563+30])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2166,112563+24]..[2166,112563+30])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2166,112563+31]..[2166,112563+56])
                                    Pexp_apply
                                    expression (src/lexer.ml[2166,112563+31]..[2166,112563+56]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2166,112563+31]..[2166,112563+56]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2166,112563+31]..[2166,112563+52])
                                          Pexp_field
                                          expression (src/lexer.ml[2166,112563+31]..[2166,112563+37])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2166,112563+31]..[2166,112563+37])
                                          "Lexing.lex_mem" (src/lexer.ml[2166,112563+38]..[2166,112563+52])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2166,112563+54]..[2166,112563+55])
                                          Pexp_constant PConst_int (7,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2166,112563+57]..[2166,112563+82])
                                    Pexp_apply
                                    expression (src/lexer.ml[2166,112563+57]..[2166,112563+82]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2166,112563+57]..[2166,112563+82]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2166,112563+57]..[2166,112563+78])
                                          Pexp_field
                                          expression (src/lexer.ml[2166,112563+57]..[2166,112563+63])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2166,112563+57]..[2166,112563+63])
                                          "Lexing.lex_mem" (src/lexer.ml[2166,112563+64]..[2166,112563+78])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2166,112563+80]..[2166,112563+81])
                                          Pexp_constant PConst_int (6,None)
                                    ]
                              ]
                          <def>
                            pattern (src/lexer.mll[473,112672+42]..[473,112672+47])
                              Ppat_var "where" (src/lexer.mll[473,112672+42]..[473,112672+47])
                            expression (src/lexer.ml[2171,112742+2]..[2171,112742+78])
                              Pexp_apply
                              expression (src/lexer.ml[2171,112742+2]..[2171,112742+19])
                                Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2171,112742+2]..[2171,112742+19])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2171,112742+20]..[2171,112742+26])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2171,112742+20]..[2171,112742+26])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2171,112742+27]..[2171,112742+52])
                                    Pexp_apply
                                    expression (src/lexer.ml[2171,112742+27]..[2171,112742+52]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2171,112742+27]..[2171,112742+52]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2171,112742+27]..[2171,112742+48])
                                          Pexp_field
                                          expression (src/lexer.ml[2171,112742+27]..[2171,112742+33])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2171,112742+27]..[2171,112742+33])
                                          "Lexing.lex_mem" (src/lexer.ml[2171,112742+34]..[2171,112742+48])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2171,112742+50]..[2171,112742+51])
                                          Pexp_constant PConst_int (5,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2171,112742+53]..[2171,112742+78])
                                    Pexp_apply
                                    expression (src/lexer.ml[2171,112742+53]..[2171,112742+78]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2171,112742+53]..[2171,112742+78]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2171,112742+53]..[2171,112742+74])
                                          Pexp_field
                                          expression (src/lexer.ml[2171,112742+53]..[2171,112742+59])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2171,112742+53]..[2171,112742+59])
                                          "Lexing.lex_mem" (src/lexer.ml[2171,112742+60]..[2171,112742+74])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2171,112742+76]..[2171,112742+77])
                                          Pexp_constant PConst_int (4,None)
                                    ]
                              ]
                          <def>
                            pattern (src/lexer.mll[473,112847+69]..[473,112847+75])
                              Ppat_var "flavor" (src/lexer.mll[473,112847+69]..[473,112847+75])
                            expression (src/lexer.ml[2176,112945+2]..[2176,112945+78])
                              Pexp_apply
                              expression (src/lexer.ml[2176,112945+2]..[2176,112945+19])
                                Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2176,112945+2]..[2176,112945+19])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2176,112945+20]..[2176,112945+26])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2176,112945+20]..[2176,112945+26])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2176,112945+27]..[2176,112945+52])
                                    Pexp_apply
                                    expression (src/lexer.ml[2176,112945+27]..[2176,112945+52]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2176,112945+27]..[2176,112945+52]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2176,112945+27]..[2176,112945+48])
                                          Pexp_field
                                          expression (src/lexer.ml[2176,112945+27]..[2176,112945+33])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2176,112945+27]..[2176,112945+33])
                                          "Lexing.lex_mem" (src/lexer.ml[2176,112945+34]..[2176,112945+48])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2176,112945+50]..[2176,112945+51])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2176,112945+53]..[2176,112945+78])
                                    Pexp_apply
                                    expression (src/lexer.ml[2176,112945+53]..[2176,112945+78]) ghost
                                      Pexp_ident "Array.get" (src/lexer.ml[2176,112945+53]..[2176,112945+78]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2176,112945+53]..[2176,112945+74])
                                          Pexp_field
                                          expression (src/lexer.ml[2176,112945+53]..[2176,112945+59])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2176,112945+53]..[2176,112945+59])
                                          "Lexing.lex_mem" (src/lexer.ml[2176,112945+60]..[2176,112945+74])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2176,112945+76]..[2176,112945+77])
                                          Pexp_constant PConst_int (0,None)
                                    ]
                              ]
                        ]
                        expression (src/lexer.mll[721,113049+4]..[722,113112+59])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/lexer.mll[721,113049+10]..[721,113049+17])
                                Ppat_var "monster" (src/lexer.mll[721,113049+10]..[721,113049+17])
                              expression (src/lexer.mll[721,113049+20]..[721,113049+59])
                                Pexp_apply
                                expression (src/lexer.mll[721,113049+20]..[721,113049+28])
                                  Pexp_ident "position" (src/lexer.mll[721,113049+20]..[721,113049+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[721,113049+29]..[721,113049+42])
                                      Pexp_apply
                                      expression (src/lexer.mll[721,113049+30]..[721,113049+34])
                                        Pexp_ident "cpos" (src/lexer.mll[721,113049+30]..[721,113049+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexer.mll[721,113049+35]..[721,113049+41])
                                            Pexp_ident "lexbuf" (src/lexer.mll[721,113049+35]..[721,113049+41])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[721,113049+43]..[721,113049+48])
                                      Pexp_ident "where" (src/lexer.mll[721,113049+43]..[721,113049+48])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[721,113049+49]..[721,113049+55])
                                      Pexp_ident "flavor" (src/lexer.mll[721,113049+49]..[721,113049+55])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[721,113049+56]..[721,113049+57])
                                      Pexp_ident "i" (src/lexer.mll[721,113049+56]..[721,113049+57])
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[721,113049+58]..[721,113049+59])
                                      Pexp_ident "x" (src/lexer.mll[721,113049+58]..[721,113049+59])
                                ]
                          ]
                          expression (src/lexer.mll[722,113112+6]..[722,113112+57])
                            Pexp_apply
                            expression (src/lexer.mll[722,113112+6]..[722,113112+17])
                              Pexp_ident "parentheses" (src/lexer.mll[722,113112+6]..[722,113112+17])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[722,113112+18]..[722,113112+28])
                                  Pexp_ident "openingpos" (src/lexer.mll[722,113112+18]..[722,113112+28])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[722,113112+29]..[722,113112+50])
                                  Pexp_construct "::" (src/lexer.mll[722,113112+38]..[722,113112+40])
                                  Some
                                    expression (src/lexer.mll[722,113112+30]..[722,113112+49]) ghost
                                      Pexp_tuple
                                      [
                                        expression (src/lexer.mll[722,113112+30]..[722,113112+37])
                                          Pexp_ident "monster" (src/lexer.mll[722,113112+30]..[722,113112+37])
                                        expression (src/lexer.mll[722,113112+41]..[722,113112+49])
                                          Pexp_ident "monsters" (src/lexer.mll[722,113112+41]..[722,113112+49])
                                      ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[722,113112+51]..[722,113112+57])
                                  Pexp_ident "lexbuf" (src/lexer.mll[722,113112+51]..[722,113112+57])
                            ]
                    <case>
                      pattern (src/lexer.ml[2182,113195+4]..[2182,113195+5])
                        Ppat_constant PConst_int (5,None)
                      expression (src/lexer.mll[724,113226+4]..[724,113226+62])
                        Pexp_apply
                        expression (src/lexer.mll[724,113226+6]..[724,113226+12])
                          Pexp_ident "error2" (src/lexer.mll[724,113226+6]..[724,113226+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[724,113226+13]..[724,113226+19])
                              Pexp_ident "lexbuf" (src/lexer.mll[724,113226+13]..[724,113226+19])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[724,113226+20]..[724,113226+60])
                              Pexp_constant PConst_string("$previouserror is no longer supported.",(src/lexer.mll[724,113226+21]..[724,113226+59]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2187,113312+4]..[2187,113312+5])
                        Ppat_constant PConst_int (6,None)
                      expression (src/lexer.mll[726,113343+4]..[727,113392+59])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[726,113343+10]..[726,113343+17])
                              Ppat_var "monster" (src/lexer.mll[726,113343+10]..[726,113343+17])
                            expression (src/lexer.mll[726,113343+20]..[726,113343+45])
                              Pexp_apply
                              expression (src/lexer.mll[726,113343+20]..[726,113343+31])
                                Pexp_ident "syntaxerror" (src/lexer.mll[726,113343+20]..[726,113343+31])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[726,113343+32]..[726,113343+45])
                                    Pexp_apply
                                    expression (src/lexer.mll[726,113343+33]..[726,113343+37])
                                      Pexp_ident "cpos" (src/lexer.mll[726,113343+33]..[726,113343+37])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.mll[726,113343+38]..[726,113343+44])
                                          Pexp_ident "lexbuf" (src/lexer.mll[726,113343+38]..[726,113343+44])
                                    ]
                              ]
                        ]
                        expression (src/lexer.mll[727,113392+6]..[727,113392+57])
                          Pexp_apply
                          expression (src/lexer.mll[727,113392+6]..[727,113392+17])
                            Pexp_ident "parentheses" (src/lexer.mll[727,113392+6]..[727,113392+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[727,113392+18]..[727,113392+28])
                                Pexp_ident "openingpos" (src/lexer.mll[727,113392+18]..[727,113392+28])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[727,113392+29]..[727,113392+50])
                                Pexp_construct "::" (src/lexer.mll[727,113392+38]..[727,113392+40])
                                Some
                                  expression (src/lexer.mll[727,113392+30]..[727,113392+49]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/lexer.mll[727,113392+30]..[727,113392+37])
                                        Pexp_ident "monster" (src/lexer.mll[727,113392+30]..[727,113392+37])
                                      expression (src/lexer.mll[727,113392+41]..[727,113392+49])
                                        Pexp_ident "monsters" (src/lexer.mll[727,113392+41]..[727,113392+49])
                                    ]
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[727,113392+51]..[727,113392+57])
                                Pexp_ident "lexbuf" (src/lexer.mll[727,113392+51]..[727,113392+57])
                          ]
                    <case>
                      pattern (src/lexer.ml[2193,113475+4]..[2193,113475+5])
                        Ppat_constant PConst_int (7,None)
                      expression (src/lexer.mll[729,113506+4]..[729,113506+85])
                        Pexp_sequence
                        expression (src/lexer.mll[729,113506+6]..[729,113506+43])
                          Pexp_apply
                          expression (src/lexer.mll[729,113506+6]..[729,113506+12])
                            Pexp_ident "string" (src/lexer.mll[729,113506+6]..[729,113506+12])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[729,113506+13]..[729,113506+36])
                                Pexp_apply
                                expression (src/lexer.mll[729,113506+14]..[729,113506+28])
                                  Pexp_ident "lexeme_start_p" (src/lexer.mll[729,113506+14]..[729,113506+28])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[729,113506+29]..[729,113506+35])
                                      Pexp_ident "lexbuf" (src/lexer.mll[729,113506+29]..[729,113506+35])
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[729,113506+37]..[729,113506+43])
                                Pexp_ident "lexbuf" (src/lexer.mll[729,113506+37]..[729,113506+43])
                          ]
                        expression (src/lexer.mll[729,113506+45]..[729,113506+83])
                          Pexp_apply
                          expression (src/lexer.mll[729,113506+45]..[729,113506+56])
                            Pexp_ident "parentheses" (src/lexer.mll[729,113506+45]..[729,113506+56])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[729,113506+57]..[729,113506+67])
                                Pexp_ident "openingpos" (src/lexer.mll[729,113506+57]..[729,113506+67])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[729,113506+68]..[729,113506+76])
                                Pexp_ident "monsters" (src/lexer.mll[729,113506+68]..[729,113506+76])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[729,113506+77]..[729,113506+83])
                                Pexp_ident "lexbuf" (src/lexer.mll[729,113506+77]..[729,113506+83])
                          ]
                    <case>
                      pattern (src/lexer.ml[2198,113615+4]..[2198,113615+5])
                        Ppat_constant PConst_int (8,None)
                      expression (src/lexer.mll[731,113646+4]..[731,113646+59])
                        Pexp_sequence
                        expression (src/lexer.mll[731,113646+6]..[731,113646+17])
                          Pexp_apply
                          expression (src/lexer.mll[731,113646+6]..[731,113646+10])
                            Pexp_ident "char" (src/lexer.mll[731,113646+6]..[731,113646+10])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[731,113646+11]..[731,113646+17])
                                Pexp_ident "lexbuf" (src/lexer.mll[731,113646+11]..[731,113646+17])
                          ]
                        expression (src/lexer.mll[731,113646+19]..[731,113646+57])
                          Pexp_apply
                          expression (src/lexer.mll[731,113646+19]..[731,113646+30])
                            Pexp_ident "parentheses" (src/lexer.mll[731,113646+19]..[731,113646+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[731,113646+31]..[731,113646+41])
                                Pexp_ident "openingpos" (src/lexer.mll[731,113646+31]..[731,113646+41])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[731,113646+42]..[731,113646+50])
                                Pexp_ident "monsters" (src/lexer.mll[731,113646+42]..[731,113646+50])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[731,113646+51]..[731,113646+57])
                                Pexp_ident "lexbuf" (src/lexer.mll[731,113646+51]..[731,113646+57])
                          ]
                    <case>
                      pattern (src/lexer.ml[2203,113729+4]..[2203,113729+5])
                        Ppat_constant PConst_int (9,None)
                      expression (src/lexer.mll[733,113760+4]..[733,113760+91])
                        Pexp_sequence
                        expression (src/lexer.mll[733,113760+6]..[733,113760+49])
                          Pexp_apply
                          expression (src/lexer.mll[733,113760+6]..[733,113760+18])
                            Pexp_ident "ocamlcomment" (src/lexer.mll[733,113760+6]..[733,113760+18])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[733,113760+19]..[733,113760+42])
                                Pexp_apply
                                expression (src/lexer.mll[733,113760+20]..[733,113760+34])
                                  Pexp_ident "lexeme_start_p" (src/lexer.mll[733,113760+20]..[733,113760+34])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[733,113760+35]..[733,113760+41])
                                      Pexp_ident "lexbuf" (src/lexer.mll[733,113760+35]..[733,113760+41])
                                ]
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[733,113760+43]..[733,113760+49])
                                Pexp_ident "lexbuf" (src/lexer.mll[733,113760+43]..[733,113760+49])
                          ]
                        expression (src/lexer.mll[733,113760+51]..[733,113760+89])
                          Pexp_apply
                          expression (src/lexer.mll[733,113760+51]..[733,113760+62])
                            Pexp_ident "parentheses" (src/lexer.mll[733,113760+51]..[733,113760+62])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[733,113760+63]..[733,113760+73])
                                Pexp_ident "openingpos" (src/lexer.mll[733,113760+63]..[733,113760+73])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[733,113760+74]..[733,113760+82])
                                Pexp_ident "monsters" (src/lexer.mll[733,113760+74]..[733,113760+82])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[733,113760+83]..[733,113760+89])
                                Pexp_ident "lexbuf" (src/lexer.mll[733,113760+83]..[733,113760+89])
                          ]
                    <case>
                      pattern (src/lexer.ml[2208,113875+4]..[2208,113875+6])
                        Ppat_constant PConst_int (10,None)
                      expression (src/lexer.mll[735,113907+4]..[735,113907+63])
                        Pexp_sequence
                        expression (src/lexer.mll[735,113907+6]..[735,113907+21])
                          Pexp_apply
                          expression (src/lexer.mll[735,113907+6]..[735,113907+14])
                            Pexp_ident "new_line" (src/lexer.mll[735,113907+6]..[735,113907+14])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[735,113907+15]..[735,113907+21])
                                Pexp_ident "lexbuf" (src/lexer.mll[735,113907+15]..[735,113907+21])
                          ]
                        expression (src/lexer.mll[735,113907+23]..[735,113907+61])
                          Pexp_apply
                          expression (src/lexer.mll[735,113907+23]..[735,113907+34])
                            Pexp_ident "parentheses" (src/lexer.mll[735,113907+23]..[735,113907+34])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[735,113907+35]..[735,113907+45])
                                Pexp_ident "openingpos" (src/lexer.mll[735,113907+35]..[735,113907+45])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[735,113907+46]..[735,113907+54])
                                Pexp_ident "monsters" (src/lexer.mll[735,113907+46]..[735,113907+54])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[735,113907+55]..[735,113907+61])
                                Pexp_ident "lexbuf" (src/lexer.mll[735,113907+55]..[735,113907+61])
                          ]
                    <case>
                      pattern (src/lexer.ml[2213,113994+4]..[2213,113994+6])
                        Ppat_constant PConst_int (11,None)
                      expression (src/lexer.mll[738,114026+4]..[738,114026+59])
                        Pexp_apply
                        expression (src/lexer.mll[738,114026+6]..[738,114026+12])
                          Pexp_ident "error1" (src/lexer.mll[738,114026+6]..[738,114026+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[738,114026+13]..[738,114026+23])
                              Pexp_ident "openingpos" (src/lexer.mll[738,114026+13]..[738,114026+23])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[738,114026+24]..[738,114026+57])
                              Pexp_constant PConst_string("unbalanced opening parenthesis.",(src/lexer.mll[738,114026+25]..[738,114026+56]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2218,114109+4]..[2218,114109+6])
                        Ppat_constant PConst_int (12,None)
                      expression (src/lexer.mll[740,114141+4]..[740,114141+46])
                        Pexp_apply
                        expression (src/lexer.mll[740,114141+6]..[740,114141+17])
                          Pexp_ident "parentheses" (src/lexer.mll[740,114141+6]..[740,114141+17])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[740,114141+18]..[740,114141+28])
                              Pexp_ident "openingpos" (src/lexer.mll[740,114141+18]..[740,114141+28])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[740,114141+29]..[740,114141+37])
                              Pexp_ident "monsters" (src/lexer.mll[740,114141+29]..[740,114141+37])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[740,114141+38]..[740,114141+44])
                              Pexp_ident "lexbuf" (src/lexer.mll[740,114141+38]..[740,114141+44])
                        ]
                    <case>
                      pattern (src/lexer.ml[2223,114211+4]..[2223,114211+21])
                        Ppat_var "__ocaml_lex_state" (src/lexer.ml[2223,114211+4]..[2223,114211+21])
                      expression (src/lexer.ml[2223,114211+25]..[2224,114270+78])
                        Pexp_sequence
                        expression (src/lexer.ml[2223,114211+25]..[2223,114211+57])
                          Pexp_apply
                          expression (src/lexer.ml[2223,114211+25]..[2223,114211+50])
                            Pexp_field
                            expression (src/lexer.ml[2223,114211+25]..[2223,114211+31])
                              Pexp_ident "lexbuf" (src/lexer.ml[2223,114211+25]..[2223,114211+31])
                            "Lexing.refill_buff" (src/lexer.ml[2223,114211+32]..[2223,114211+50])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2223,114211+51]..[2223,114211+57])
                                Pexp_ident "lexbuf" (src/lexer.ml[2223,114211+51]..[2223,114211+57])
                          ]
                        expression (src/lexer.ml[2224,114270+6]..[2224,114270+78])
                          Pexp_apply
                          expression (src/lexer.ml[2224,114270+6]..[2224,114270+33])
                            Pexp_ident "__ocaml_lex_parentheses_rec" (src/lexer.ml[2224,114270+6]..[2224,114270+33])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2224,114270+34]..[2224,114270+44])
                                Pexp_ident "openingpos" (src/lexer.ml[2224,114270+34]..[2224,114270+44])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2224,114270+45]..[2224,114270+53])
                                Pexp_ident "monsters" (src/lexer.ml[2224,114270+45]..[2224,114270+53])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2224,114270+54]..[2224,114270+60])
                                Pexp_ident "lexbuf" (src/lexer.ml[2224,114270+54]..[2224,114270+60])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2224,114270+61]..[2224,114270+78])
                                Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2224,114270+61]..[2224,114270+78])
                          ]
                  ]
      <def>
        pattern (src/lexer.ml[2226,114350+4]..[2226,114350+13])
          Ppat_var "attribute" (src/lexer.ml[2226,114350+4]..[2226,114350+13])
        expression (src/lexer.ml[2226,114350+14]..[2227,114384+50]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2226,114350+14]..[2226,114350+24])
            Ppat_var "openingpos" (src/lexer.ml[2226,114350+14]..[2226,114350+24])
          expression (src/lexer.ml[2226,114350+25]..[2227,114384+50]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2226,114350+25]..[2226,114350+31])
              Ppat_var "lexbuf" (src/lexer.ml[2226,114350+25]..[2226,114350+31])
            expression (src/lexer.ml[2227,114384+3]..[2227,114384+50])
              Pexp_apply
              expression (src/lexer.ml[2227,114384+3]..[2227,114384+28])
                Pexp_ident "__ocaml_lex_attribute_rec" (src/lexer.ml[2227,114384+3]..[2227,114384+28])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[2227,114384+29]..[2227,114384+39])
                    Pexp_ident "openingpos" (src/lexer.ml[2227,114384+29]..[2227,114384+39])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2227,114384+40]..[2227,114384+46])
                    Pexp_ident "lexbuf" (src/lexer.ml[2227,114384+40]..[2227,114384+46])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2227,114384+47]..[2227,114384+50])
                    Pexp_constant PConst_int (189,None)
              ]
      <def>
        pattern (src/lexer.ml[2228,114435+4]..[2228,114435+29])
          Ppat_var "__ocaml_lex_attribute_rec" (src/lexer.ml[2228,114435+4]..[2228,114435+29])
        expression (src/lexer.ml[2228,114435+30]..[2284,115856+67]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2228,114435+30]..[2228,114435+40])
            Ppat_var "openingpos" (src/lexer.ml[2228,114435+30]..[2228,114435+40])
          expression (src/lexer.ml[2228,114435+41]..[2284,115856+67]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2228,114435+41]..[2228,114435+47])
              Ppat_var "lexbuf" (src/lexer.ml[2228,114435+41]..[2228,114435+47])
            expression (src/lexer.ml[2228,114435+48]..[2284,115856+67]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2228,114435+48]..[2228,114435+65])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[2228,114435+48]..[2228,114435+65])
              expression (src/lexer.ml[2229,114503+2]..[2284,115856+67])
                Pexp_match
                expression (src/lexer.ml[2229,114503+8]..[2229,114503+65])
                  Pexp_apply
                  expression (src/lexer.ml[2229,114503+8]..[2229,114503+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[2229,114503+8]..[2229,114503+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2229,114503+22]..[2229,114503+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2229,114503+22]..[2229,114503+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2229,114503+41]..[2229,114503+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2229,114503+41]..[2229,114503+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2229,114503+59]..[2229,114503+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[2229,114503+59]..[2229,114503+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[2230,114574+8]..[2230,114574+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[751,114609+4]..[752,114667+35])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[751,114609+10]..[751,114609+11])
                            Ppat_any
                          expression (src/lexer.mll[751,114609+14]..[751,114609+54])
                            Pexp_apply
                            expression (src/lexer.mll[751,114609+14]..[751,114609+23])
                              Pexp_ident "attribute" (src/lexer.mll[751,114609+14]..[751,114609+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[751,114609+24]..[751,114609+47])
                                  Pexp_apply
                                  expression (src/lexer.mll[751,114609+25]..[751,114609+39])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[751,114609+25]..[751,114609+39])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[751,114609+40]..[751,114609+46])
                                        Pexp_ident "lexbuf" (src/lexer.mll[751,114609+40]..[751,114609+46])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[751,114609+48]..[751,114609+54])
                                  Pexp_ident "lexbuf" (src/lexer.mll[751,114609+48]..[751,114609+54])
                            ]
                      ]
                      expression (src/lexer.mll[752,114667+6]..[752,114667+33])
                        Pexp_apply
                        expression (src/lexer.mll[752,114667+6]..[752,114667+15])
                          Pexp_ident "attribute" (src/lexer.mll[752,114667+6]..[752,114667+15])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[752,114667+16]..[752,114667+26])
                              Pexp_ident "openingpos" (src/lexer.mll[752,114667+16]..[752,114667+26])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[752,114667+27]..[752,114667+33])
                              Pexp_ident "lexbuf" (src/lexer.mll[752,114667+27]..[752,114667+33])
                        ]
                  <case>
                    pattern (src/lexer.ml[2236,114726+4]..[2236,114726+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.mll[754,114757+4]..[754,114757+29])
                      Pexp_apply
                      expression (src/lexer.mll[754,114757+6]..[754,114757+20])
                        Pexp_ident "lexeme_start_p" (src/lexer.mll[754,114757+6]..[754,114757+20])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[754,114757+21]..[754,114757+27])
                            Pexp_ident "lexbuf" (src/lexer.mll[754,114757+21]..[754,114757+27])
                      ]
                  <case>
                    pattern (src/lexer.ml[2241,114810+4]..[2241,114810+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.mll[756,114841+4]..[757,114908+35])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[756,114841+10]..[756,114841+14])
                            Ppat_tuple
                            [
                              pattern (src/lexer.mll[756,114841+10]..[756,114841+11])
                                Ppat_any
                              pattern (src/lexer.mll[756,114841+13]..[756,114841+14])
                                Ppat_any
                            ]
                          expression (src/lexer.mll[756,114841+17]..[756,114841+63])
                            Pexp_apply
                            expression (src/lexer.mll[756,114841+17]..[756,114841+23])
                              Pexp_ident "action" (src/lexer.mll[756,114841+17]..[756,114841+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[756,114841+24]..[756,114841+29])
                                  Pexp_construct "false" (src/lexer.mll[756,114841+24]..[756,114841+29])
                                  None
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[756,114841+30]..[756,114841+53])
                                  Pexp_apply
                                  expression (src/lexer.mll[756,114841+31]..[756,114841+45])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[756,114841+31]..[756,114841+45])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[756,114841+46]..[756,114841+52])
                                        Pexp_ident "lexbuf" (src/lexer.mll[756,114841+46]..[756,114841+52])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[756,114841+54]..[756,114841+56])
                                  Pexp_construct "[]" (src/lexer.mll[756,114841+54]..[756,114841+56])
                                  None
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[756,114841+57]..[756,114841+63])
                                  Pexp_ident "lexbuf" (src/lexer.mll[756,114841+57]..[756,114841+63])
                            ]
                      ]
                      expression (src/lexer.mll[757,114908+6]..[757,114908+33])
                        Pexp_apply
                        expression (src/lexer.mll[757,114908+6]..[757,114908+15])
                          Pexp_ident "attribute" (src/lexer.mll[757,114908+6]..[757,114908+15])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[757,114908+16]..[757,114908+26])
                              Pexp_ident "openingpos" (src/lexer.mll[757,114908+16]..[757,114908+26])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[757,114908+27]..[757,114908+33])
                              Pexp_ident "lexbuf" (src/lexer.mll[757,114908+27]..[757,114908+33])
                        ]
                  <case>
                    pattern (src/lexer.ml[2247,114967+4]..[2247,114967+5])
                      Ppat_constant PConst_int (3,None)
                    expression (src/lexer.mll[759,114998+4]..[760,115064+35])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[759,114998+10]..[759,114998+14])
                            Ppat_tuple
                            [
                              pattern (src/lexer.mll[759,114998+10]..[759,114998+11])
                                Ppat_any
                              pattern (src/lexer.mll[759,114998+13]..[759,114998+14])
                                Ppat_any
                            ]
                          expression (src/lexer.mll[759,114998+17]..[759,114998+62])
                            Pexp_apply
                            expression (src/lexer.mll[759,114998+17]..[759,114998+28])
                              Pexp_ident "parentheses" (src/lexer.mll[759,114998+17]..[759,114998+28])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[759,114998+29]..[759,114998+52])
                                  Pexp_apply
                                  expression (src/lexer.mll[759,114998+30]..[759,114998+44])
                                    Pexp_ident "lexeme_start_p" (src/lexer.mll[759,114998+30]..[759,114998+44])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.mll[759,114998+45]..[759,114998+51])
                                        Pexp_ident "lexbuf" (src/lexer.mll[759,114998+45]..[759,114998+51])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[759,114998+53]..[759,114998+55])
                                  Pexp_construct "[]" (src/lexer.mll[759,114998+53]..[759,114998+55])
                                  None
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[759,114998+56]..[759,114998+62])
                                  Pexp_ident "lexbuf" (src/lexer.mll[759,114998+56]..[759,114998+62])
                            ]
                      ]
                      expression (src/lexer.mll[760,115064+6]..[760,115064+33])
                        Pexp_apply
                        expression (src/lexer.mll[760,115064+6]..[760,115064+15])
                          Pexp_ident "attribute" (src/lexer.mll[760,115064+6]..[760,115064+15])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[760,115064+16]..[760,115064+26])
                              Pexp_ident "openingpos" (src/lexer.mll[760,115064+16]..[760,115064+26])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[760,115064+27]..[760,115064+33])
                              Pexp_ident "lexbuf" (src/lexer.mll[760,115064+27]..[760,115064+33])
                        ]
                  <case>
                    pattern (src/lexer.ml[2253,115123+4]..[2253,115123+5])
                      Ppat_constant PConst_int (4,None)
                    expression (src/lexer.mll[762,115154+4]..[762,115154+74])
                      Pexp_sequence
                      expression (src/lexer.mll[762,115154+6]..[762,115154+43])
                        Pexp_apply
                        expression (src/lexer.mll[762,115154+6]..[762,115154+12])
                          Pexp_ident "string" (src/lexer.mll[762,115154+6]..[762,115154+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[762,115154+13]..[762,115154+36])
                              Pexp_apply
                              expression (src/lexer.mll[762,115154+14]..[762,115154+28])
                                Pexp_ident "lexeme_start_p" (src/lexer.mll[762,115154+14]..[762,115154+28])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[762,115154+29]..[762,115154+35])
                                    Pexp_ident "lexbuf" (src/lexer.mll[762,115154+29]..[762,115154+35])
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[762,115154+37]..[762,115154+43])
                              Pexp_ident "lexbuf" (src/lexer.mll[762,115154+37]..[762,115154+43])
                        ]
                      expression (src/lexer.mll[762,115154+45]..[762,115154+72])
                        Pexp_apply
                        expression (src/lexer.mll[762,115154+45]..[762,115154+54])
                          Pexp_ident "attribute" (src/lexer.mll[762,115154+45]..[762,115154+54])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[762,115154+55]..[762,115154+65])
                              Pexp_ident "openingpos" (src/lexer.mll[762,115154+55]..[762,115154+65])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[762,115154+66]..[762,115154+72])
                              Pexp_ident "lexbuf" (src/lexer.mll[762,115154+66]..[762,115154+72])
                        ]
                  <case>
                    pattern (src/lexer.ml[2258,115252+4]..[2258,115252+5])
                      Ppat_constant PConst_int (5,None)
                    expression (src/lexer.mll[764,115283+4]..[764,115283+48])
                      Pexp_sequence
                      expression (src/lexer.mll[764,115283+6]..[764,115283+17])
                        Pexp_apply
                        expression (src/lexer.mll[764,115283+6]..[764,115283+10])
                          Pexp_ident "char" (src/lexer.mll[764,115283+6]..[764,115283+10])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[764,115283+11]..[764,115283+17])
                              Pexp_ident "lexbuf" (src/lexer.mll[764,115283+11]..[764,115283+17])
                        ]
                      expression (src/lexer.mll[764,115283+19]..[764,115283+46])
                        Pexp_apply
                        expression (src/lexer.mll[764,115283+19]..[764,115283+28])
                          Pexp_ident "attribute" (src/lexer.mll[764,115283+19]..[764,115283+28])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[764,115283+29]..[764,115283+39])
                              Pexp_ident "openingpos" (src/lexer.mll[764,115283+29]..[764,115283+39])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[764,115283+40]..[764,115283+46])
                              Pexp_ident "lexbuf" (src/lexer.mll[764,115283+40]..[764,115283+46])
                        ]
                  <case>
                    pattern (src/lexer.ml[2263,115355+4]..[2263,115355+5])
                      Ppat_constant PConst_int (6,None)
                    expression (src/lexer.mll[766,115386+4]..[766,115386+80])
                      Pexp_sequence
                      expression (src/lexer.mll[766,115386+6]..[766,115386+49])
                        Pexp_apply
                        expression (src/lexer.mll[766,115386+6]..[766,115386+18])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[766,115386+6]..[766,115386+18])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[766,115386+19]..[766,115386+42])
                              Pexp_apply
                              expression (src/lexer.mll[766,115386+20]..[766,115386+34])
                                Pexp_ident "lexeme_start_p" (src/lexer.mll[766,115386+20]..[766,115386+34])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[766,115386+35]..[766,115386+41])
                                    Pexp_ident "lexbuf" (src/lexer.mll[766,115386+35]..[766,115386+41])
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[766,115386+43]..[766,115386+49])
                              Pexp_ident "lexbuf" (src/lexer.mll[766,115386+43]..[766,115386+49])
                        ]
                      expression (src/lexer.mll[766,115386+51]..[766,115386+78])
                        Pexp_apply
                        expression (src/lexer.mll[766,115386+51]..[766,115386+60])
                          Pexp_ident "attribute" (src/lexer.mll[766,115386+51]..[766,115386+60])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[766,115386+61]..[766,115386+71])
                              Pexp_ident "openingpos" (src/lexer.mll[766,115386+61]..[766,115386+71])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[766,115386+72]..[766,115386+78])
                              Pexp_ident "lexbuf" (src/lexer.mll[766,115386+72]..[766,115386+78])
                        ]
                  <case>
                    pattern (src/lexer.ml[2268,115490+4]..[2268,115490+5])
                      Ppat_constant PConst_int (7,None)
                    expression (src/lexer.mll[768,115521+4]..[768,115521+52])
                      Pexp_sequence
                      expression (src/lexer.mll[768,115521+6]..[768,115521+21])
                        Pexp_apply
                        expression (src/lexer.mll[768,115521+6]..[768,115521+14])
                          Pexp_ident "new_line" (src/lexer.mll[768,115521+6]..[768,115521+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[768,115521+15]..[768,115521+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[768,115521+15]..[768,115521+21])
                        ]
                      expression (src/lexer.mll[768,115521+23]..[768,115521+50])
                        Pexp_apply
                        expression (src/lexer.mll[768,115521+23]..[768,115521+32])
                          Pexp_ident "attribute" (src/lexer.mll[768,115521+23]..[768,115521+32])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[768,115521+33]..[768,115521+43])
                              Pexp_ident "openingpos" (src/lexer.mll[768,115521+33]..[768,115521+43])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[768,115521+44]..[768,115521+50])
                              Pexp_ident "lexbuf" (src/lexer.mll[768,115521+44]..[768,115521+50])
                        ]
                  <case>
                    pattern (src/lexer.ml[2273,115597+4]..[2273,115597+5])
                      Ppat_constant PConst_int (8,None)
                    expression (src/lexer.mll[772,115628+4]..[772,115628+55])
                      Pexp_apply
                      expression (src/lexer.mll[772,115628+6]..[772,115628+12])
                        Pexp_ident "error1" (src/lexer.mll[772,115628+6]..[772,115628+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[772,115628+13]..[772,115628+23])
                            Pexp_ident "openingpos" (src/lexer.mll[772,115628+13]..[772,115628+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[772,115628+24]..[772,115628+53])
                            Pexp_constant PConst_string("unbalanced opening bracket.",(src/lexer.mll[772,115628+25]..[772,115628+52]),None)
                      ]
                  <case>
                    pattern (src/lexer.ml[2278,115707+4]..[2278,115707+5])
                      Ppat_constant PConst_int (9,None)
                    expression (src/lexer.mll[774,115738+4]..[774,115738+35])
                      Pexp_apply
                      expression (src/lexer.mll[774,115738+6]..[774,115738+15])
                        Pexp_ident "attribute" (src/lexer.mll[774,115738+6]..[774,115738+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[774,115738+16]..[774,115738+26])
                            Pexp_ident "openingpos" (src/lexer.mll[774,115738+16]..[774,115738+26])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[774,115738+27]..[774,115738+33])
                            Pexp_ident "lexbuf" (src/lexer.mll[774,115738+27]..[774,115738+33])
                      ]
                  <case>
                    pattern (src/lexer.ml[2283,115797+4]..[2283,115797+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[2283,115797+4]..[2283,115797+21])
                    expression (src/lexer.ml[2283,115797+25]..[2284,115856+67])
                      Pexp_sequence
                      expression (src/lexer.ml[2283,115797+25]..[2283,115797+57])
                        Pexp_apply
                        expression (src/lexer.ml[2283,115797+25]..[2283,115797+50])
                          Pexp_field
                          expression (src/lexer.ml[2283,115797+25]..[2283,115797+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[2283,115797+25]..[2283,115797+31])
                          "Lexing.refill_buff" (src/lexer.ml[2283,115797+32]..[2283,115797+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2283,115797+51]..[2283,115797+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[2283,115797+51]..[2283,115797+57])
                        ]
                      expression (src/lexer.ml[2284,115856+6]..[2284,115856+67])
                        Pexp_apply
                        expression (src/lexer.ml[2284,115856+6]..[2284,115856+31])
                          Pexp_ident "__ocaml_lex_attribute_rec" (src/lexer.ml[2284,115856+6]..[2284,115856+31])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2284,115856+32]..[2284,115856+42])
                              Pexp_ident "openingpos" (src/lexer.ml[2284,115856+32]..[2284,115856+42])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2284,115856+43]..[2284,115856+49])
                              Pexp_ident "lexbuf" (src/lexer.ml[2284,115856+43]..[2284,115856+49])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2284,115856+50]..[2284,115856+67])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2284,115856+50]..[2284,115856+67])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[2286,115925+4]..[2286,115925+16])
          Ppat_var "ocamlcomment" (src/lexer.ml[2286,115925+4]..[2286,115925+16])
        expression (src/lexer.ml[2286,115925+17]..[2287,115962+53]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2286,115925+17]..[2286,115925+27])
            Ppat_var "openingpos" (src/lexer.ml[2286,115925+17]..[2286,115925+27])
          expression (src/lexer.ml[2286,115925+28]..[2287,115962+53]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2286,115925+28]..[2286,115925+34])
              Ppat_var "lexbuf" (src/lexer.ml[2286,115925+28]..[2286,115925+34])
            expression (src/lexer.ml[2287,115962+3]..[2287,115962+53])
              Pexp_apply
              expression (src/lexer.ml[2287,115962+3]..[2287,115962+31])
                Pexp_ident "__ocaml_lex_ocamlcomment_rec" (src/lexer.ml[2287,115962+3]..[2287,115962+31])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[2287,115962+32]..[2287,115962+42])
                    Pexp_ident "openingpos" (src/lexer.ml[2287,115962+32]..[2287,115962+42])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2287,115962+43]..[2287,115962+49])
                    Pexp_ident "lexbuf" (src/lexer.ml[2287,115962+43]..[2287,115962+49])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2287,115962+50]..[2287,115962+53])
                    Pexp_constant PConst_int (201,None)
              ]
      <def>
        pattern (src/lexer.ml[2288,116016+4]..[2288,116016+32])
          Ppat_var "__ocaml_lex_ocamlcomment_rec" (src/lexer.ml[2288,116016+4]..[2288,116016+32])
        expression (src/lexer.ml[2288,116016+33]..[2326,116975+70]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2288,116016+33]..[2288,116016+43])
            Ppat_var "openingpos" (src/lexer.ml[2288,116016+33]..[2288,116016+43])
          expression (src/lexer.ml[2288,116016+44]..[2326,116975+70]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2288,116016+44]..[2288,116016+50])
              Ppat_var "lexbuf" (src/lexer.ml[2288,116016+44]..[2288,116016+50])
            expression (src/lexer.ml[2288,116016+51]..[2326,116975+70]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2288,116016+51]..[2288,116016+68])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[2288,116016+51]..[2288,116016+68])
              expression (src/lexer.ml[2289,116087+2]..[2326,116975+70])
                Pexp_match
                expression (src/lexer.ml[2289,116087+8]..[2289,116087+65])
                  Pexp_apply
                  expression (src/lexer.ml[2289,116087+8]..[2289,116087+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[2289,116087+8]..[2289,116087+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2289,116087+22]..[2289,116087+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2289,116087+22]..[2289,116087+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2289,116087+41]..[2289,116087+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2289,116087+41]..[2289,116087+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2289,116087+59]..[2289,116087+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[2289,116087+59]..[2289,116087+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[2290,116158+8]..[2290,116158+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[786,116193+4]..[786,116193+10])
                      Pexp_construct "()" (src/lexer.mll[786,116193+6]..[786,116193+8])
                      None
                  <case>
                    pattern (src/lexer.ml[2295,116227+4]..[2295,116227+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.mll[788,116258+4]..[788,116258+83])
                      Pexp_sequence
                      expression (src/lexer.mll[788,116258+6]..[788,116258+49])
                        Pexp_apply
                        expression (src/lexer.mll[788,116258+6]..[788,116258+18])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[788,116258+6]..[788,116258+18])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[788,116258+19]..[788,116258+42])
                              Pexp_apply
                              expression (src/lexer.mll[788,116258+20]..[788,116258+34])
                                Pexp_ident "lexeme_start_p" (src/lexer.mll[788,116258+20]..[788,116258+34])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[788,116258+35]..[788,116258+41])
                                    Pexp_ident "lexbuf" (src/lexer.mll[788,116258+35]..[788,116258+41])
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[788,116258+43]..[788,116258+49])
                              Pexp_ident "lexbuf" (src/lexer.mll[788,116258+43]..[788,116258+49])
                        ]
                      expression (src/lexer.mll[788,116258+51]..[788,116258+81])
                        Pexp_apply
                        expression (src/lexer.mll[788,116258+51]..[788,116258+63])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[788,116258+51]..[788,116258+63])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[788,116258+64]..[788,116258+74])
                              Pexp_ident "openingpos" (src/lexer.mll[788,116258+64]..[788,116258+74])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[788,116258+75]..[788,116258+81])
                              Pexp_ident "lexbuf" (src/lexer.mll[788,116258+75]..[788,116258+81])
                        ]
                  <case>
                    pattern (src/lexer.ml[2300,116365+4]..[2300,116365+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.mll[790,116396+4]..[790,116396+77])
                      Pexp_sequence
                      expression (src/lexer.mll[790,116396+6]..[790,116396+43])
                        Pexp_apply
                        expression (src/lexer.mll[790,116396+6]..[790,116396+12])
                          Pexp_ident "string" (src/lexer.mll[790,116396+6]..[790,116396+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[790,116396+13]..[790,116396+36])
                              Pexp_apply
                              expression (src/lexer.mll[790,116396+14]..[790,116396+28])
                                Pexp_ident "lexeme_start_p" (src/lexer.mll[790,116396+14]..[790,116396+28])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.mll[790,116396+29]..[790,116396+35])
                                    Pexp_ident "lexbuf" (src/lexer.mll[790,116396+29]..[790,116396+35])
                              ]
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[790,116396+37]..[790,116396+43])
                              Pexp_ident "lexbuf" (src/lexer.mll[790,116396+37]..[790,116396+43])
                        ]
                      expression (src/lexer.mll[790,116396+45]..[790,116396+75])
                        Pexp_apply
                        expression (src/lexer.mll[790,116396+45]..[790,116396+57])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[790,116396+45]..[790,116396+57])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[790,116396+58]..[790,116396+68])
                              Pexp_ident "openingpos" (src/lexer.mll[790,116396+58]..[790,116396+68])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[790,116396+69]..[790,116396+75])
                              Pexp_ident "lexbuf" (src/lexer.mll[790,116396+69]..[790,116396+75])
                        ]
                  <case>
                    pattern (src/lexer.ml[2305,116497+4]..[2305,116497+5])
                      Ppat_constant PConst_int (3,None)
                    expression (src/lexer.mll[792,116528+4]..[792,116528+51])
                      Pexp_sequence
                      expression (src/lexer.mll[792,116528+6]..[792,116528+17])
                        Pexp_apply
                        expression (src/lexer.mll[792,116528+6]..[792,116528+10])
                          Pexp_ident "char" (src/lexer.mll[792,116528+6]..[792,116528+10])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[792,116528+11]..[792,116528+17])
                              Pexp_ident "lexbuf" (src/lexer.mll[792,116528+11]..[792,116528+17])
                        ]
                      expression (src/lexer.mll[792,116528+19]..[792,116528+49])
                        Pexp_apply
                        expression (src/lexer.mll[792,116528+19]..[792,116528+31])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[792,116528+19]..[792,116528+31])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[792,116528+32]..[792,116528+42])
                              Pexp_ident "openingpos" (src/lexer.mll[792,116528+32]..[792,116528+42])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[792,116528+43]..[792,116528+49])
                              Pexp_ident "lexbuf" (src/lexer.mll[792,116528+43]..[792,116528+49])
                        ]
                  <case>
                    pattern (src/lexer.ml[2310,116603+4]..[2310,116603+5])
                      Ppat_constant PConst_int (4,None)
                    expression (src/lexer.mll[794,116634+4]..[794,116634+55])
                      Pexp_sequence
                      expression (src/lexer.mll[794,116634+6]..[794,116634+21])
                        Pexp_apply
                        expression (src/lexer.mll[794,116634+6]..[794,116634+14])
                          Pexp_ident "new_line" (src/lexer.mll[794,116634+6]..[794,116634+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[794,116634+15]..[794,116634+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[794,116634+15]..[794,116634+21])
                        ]
                      expression (src/lexer.mll[794,116634+23]..[794,116634+53])
                        Pexp_apply
                        expression (src/lexer.mll[794,116634+23]..[794,116634+35])
                          Pexp_ident "ocamlcomment" (src/lexer.mll[794,116634+23]..[794,116634+35])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[794,116634+36]..[794,116634+46])
                              Pexp_ident "openingpos" (src/lexer.mll[794,116634+36]..[794,116634+46])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[794,116634+47]..[794,116634+53])
                              Pexp_ident "lexbuf" (src/lexer.mll[794,116634+47]..[794,116634+53])
                        ]
                  <case>
                    pattern (src/lexer.ml[2315,116713+4]..[2315,116713+5])
                      Ppat_constant PConst_int (5,None)
                    expression (src/lexer.mll[796,116744+4]..[796,116744+55])
                      Pexp_apply
                      expression (src/lexer.mll[796,116744+6]..[796,116744+12])
                        Pexp_ident "error1" (src/lexer.mll[796,116744+6]..[796,116744+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[796,116744+13]..[796,116744+23])
                            Pexp_ident "openingpos" (src/lexer.mll[796,116744+13]..[796,116744+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[796,116744+24]..[796,116744+53])
                            Pexp_constant PConst_string("unterminated OCaml comment.",(src/lexer.mll[796,116744+25]..[796,116744+52]),None)
                      ]
                  <case>
                    pattern (src/lexer.ml[2320,116823+4]..[2320,116823+5])
                      Ppat_constant PConst_int (6,None)
                    expression (src/lexer.mll[798,116854+4]..[798,116854+38])
                      Pexp_apply
                      expression (src/lexer.mll[798,116854+6]..[798,116854+18])
                        Pexp_ident "ocamlcomment" (src/lexer.mll[798,116854+6]..[798,116854+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[798,116854+19]..[798,116854+29])
                            Pexp_ident "openingpos" (src/lexer.mll[798,116854+19]..[798,116854+29])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[798,116854+30]..[798,116854+36])
                            Pexp_ident "lexbuf" (src/lexer.mll[798,116854+30]..[798,116854+36])
                      ]
                  <case>
                    pattern (src/lexer.ml[2325,116916+4]..[2325,116916+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[2325,116916+4]..[2325,116916+21])
                    expression (src/lexer.ml[2325,116916+25]..[2326,116975+70])
                      Pexp_sequence
                      expression (src/lexer.ml[2325,116916+25]..[2325,116916+57])
                        Pexp_apply
                        expression (src/lexer.ml[2325,116916+25]..[2325,116916+50])
                          Pexp_field
                          expression (src/lexer.ml[2325,116916+25]..[2325,116916+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[2325,116916+25]..[2325,116916+31])
                          "Lexing.refill_buff" (src/lexer.ml[2325,116916+32]..[2325,116916+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2325,116916+51]..[2325,116916+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[2325,116916+51]..[2325,116916+57])
                        ]
                      expression (src/lexer.ml[2326,116975+6]..[2326,116975+70])
                        Pexp_apply
                        expression (src/lexer.ml[2326,116975+6]..[2326,116975+34])
                          Pexp_ident "__ocaml_lex_ocamlcomment_rec" (src/lexer.ml[2326,116975+6]..[2326,116975+34])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2326,116975+35]..[2326,116975+45])
                              Pexp_ident "openingpos" (src/lexer.ml[2326,116975+35]..[2326,116975+45])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2326,116975+46]..[2326,116975+52])
                              Pexp_ident "lexbuf" (src/lexer.ml[2326,116975+46]..[2326,116975+52])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2326,116975+53]..[2326,116975+70])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2326,116975+53]..[2326,116975+70])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[2328,117047+4]..[2328,117047+10])
          Ppat_var "string" (src/lexer.ml[2328,117047+4]..[2328,117047+10])
        expression (src/lexer.ml[2328,117047+11]..[2329,117078+47]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2328,117047+11]..[2328,117047+21])
            Ppat_var "openingpos" (src/lexer.ml[2328,117047+11]..[2328,117047+21])
          expression (src/lexer.ml[2328,117047+22]..[2329,117078+47]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2328,117047+22]..[2328,117047+28])
              Ppat_var "lexbuf" (src/lexer.ml[2328,117047+22]..[2328,117047+28])
            expression (src/lexer.ml[2329,117078+3]..[2329,117078+47])
              Pexp_apply
              expression (src/lexer.ml[2329,117078+3]..[2329,117078+25])
                Pexp_ident "__ocaml_lex_string_rec" (src/lexer.ml[2329,117078+3]..[2329,117078+25])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[2329,117078+26]..[2329,117078+36])
                    Pexp_ident "openingpos" (src/lexer.ml[2329,117078+26]..[2329,117078+36])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2329,117078+37]..[2329,117078+43])
                    Pexp_ident "lexbuf" (src/lexer.ml[2329,117078+37]..[2329,117078+43])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2329,117078+44]..[2329,117078+47])
                    Pexp_constant PConst_int (212,None)
              ]
      <def>
        pattern (src/lexer.ml[2330,117126+4]..[2330,117126+26])
          Ppat_var "__ocaml_lex_string_rec" (src/lexer.ml[2330,117126+4]..[2330,117126+26])
        expression (src/lexer.ml[2330,117126+27]..[2358,117777+64]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2330,117126+27]..[2330,117126+37])
            Ppat_var "openingpos" (src/lexer.ml[2330,117126+27]..[2330,117126+37])
          expression (src/lexer.ml[2330,117126+38]..[2358,117777+64]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2330,117126+38]..[2330,117126+44])
              Ppat_var "lexbuf" (src/lexer.ml[2330,117126+38]..[2330,117126+44])
            expression (src/lexer.ml[2330,117126+45]..[2358,117777+64]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2330,117126+45]..[2330,117126+62])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[2330,117126+45]..[2330,117126+62])
              expression (src/lexer.ml[2331,117191+2]..[2358,117777+64])
                Pexp_match
                expression (src/lexer.ml[2331,117191+8]..[2331,117191+65])
                  Pexp_apply
                  expression (src/lexer.ml[2331,117191+8]..[2331,117191+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[2331,117191+8]..[2331,117191+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2331,117191+22]..[2331,117191+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2331,117191+22]..[2331,117191+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2331,117191+41]..[2331,117191+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2331,117191+41]..[2331,117191+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2331,117191+59]..[2331,117191+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[2331,117191+59]..[2331,117191+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[2332,117262+8]..[2332,117262+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[806,117297+4]..[806,117297+10])
                      Pexp_construct "()" (src/lexer.mll[806,117297+6]..[806,117297+8])
                      None
                  <case>
                    pattern (src/lexer.ml[2337,117331+4]..[2337,117331+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.mll[809,117362+4]..[809,117362+49])
                      Pexp_sequence
                      expression (src/lexer.mll[809,117362+6]..[809,117362+21])
                        Pexp_apply
                        expression (src/lexer.mll[809,117362+6]..[809,117362+14])
                          Pexp_ident "new_line" (src/lexer.mll[809,117362+6]..[809,117362+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[809,117362+15]..[809,117362+21])
                              Pexp_ident "lexbuf" (src/lexer.mll[809,117362+15]..[809,117362+21])
                        ]
                      expression (src/lexer.mll[809,117362+23]..[809,117362+47])
                        Pexp_apply
                        expression (src/lexer.mll[809,117362+23]..[809,117362+29])
                          Pexp_ident "string" (src/lexer.mll[809,117362+23]..[809,117362+29])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[809,117362+30]..[809,117362+40])
                              Pexp_ident "openingpos" (src/lexer.mll[809,117362+30]..[809,117362+40])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[809,117362+41]..[809,117362+47])
                              Pexp_ident "lexbuf" (src/lexer.mll[809,117362+41]..[809,117362+47])
                        ]
                  <case>
                    pattern (src/lexer.ml[2342,117435+4]..[2342,117435+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.mll[813,117466+4]..[813,117466+32])
                      Pexp_apply
                      expression (src/lexer.mll[813,117466+6]..[813,117466+12])
                        Pexp_ident "string" (src/lexer.mll[813,117466+6]..[813,117466+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[813,117466+13]..[813,117466+23])
                            Pexp_ident "openingpos" (src/lexer.mll[813,117466+13]..[813,117466+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[813,117466+24]..[813,117466+30])
                            Pexp_ident "lexbuf" (src/lexer.mll[813,117466+24]..[813,117466+30])
                      ]
                  <case>
                    pattern (src/lexer.ml[2347,117522+4]..[2347,117522+5])
                      Ppat_constant PConst_int (3,None)
                    expression (src/lexer.mll[815,117553+4]..[815,117553+54])
                      Pexp_apply
                      expression (src/lexer.mll[815,117553+6]..[815,117553+12])
                        Pexp_ident "error1" (src/lexer.mll[815,117553+6]..[815,117553+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[815,117553+13]..[815,117553+23])
                            Pexp_ident "openingpos" (src/lexer.mll[815,117553+13]..[815,117553+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[815,117553+24]..[815,117553+52])
                            Pexp_constant PConst_string("unterminated OCaml string.",(src/lexer.mll[815,117553+25]..[815,117553+51]),None)
                      ]
                  <case>
                    pattern (src/lexer.ml[2352,117631+4]..[2352,117631+5])
                      Ppat_constant PConst_int (4,None)
                    expression (src/lexer.mll[817,117662+4]..[817,117662+32])
                      Pexp_apply
                      expression (src/lexer.mll[817,117662+6]..[817,117662+12])
                        Pexp_ident "string" (src/lexer.mll[817,117662+6]..[817,117662+12])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[817,117662+13]..[817,117662+23])
                            Pexp_ident "openingpos" (src/lexer.mll[817,117662+13]..[817,117662+23])
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[817,117662+24]..[817,117662+30])
                            Pexp_ident "lexbuf" (src/lexer.mll[817,117662+24]..[817,117662+30])
                      ]
                  <case>
                    pattern (src/lexer.ml[2357,117718+4]..[2357,117718+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[2357,117718+4]..[2357,117718+21])
                    expression (src/lexer.ml[2357,117718+25]..[2358,117777+64])
                      Pexp_sequence
                      expression (src/lexer.ml[2357,117718+25]..[2357,117718+57])
                        Pexp_apply
                        expression (src/lexer.ml[2357,117718+25]..[2357,117718+50])
                          Pexp_field
                          expression (src/lexer.ml[2357,117718+25]..[2357,117718+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[2357,117718+25]..[2357,117718+31])
                          "Lexing.refill_buff" (src/lexer.ml[2357,117718+32]..[2357,117718+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2357,117718+51]..[2357,117718+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[2357,117718+51]..[2357,117718+57])
                        ]
                      expression (src/lexer.ml[2358,117777+6]..[2358,117777+64])
                        Pexp_apply
                        expression (src/lexer.ml[2358,117777+6]..[2358,117777+28])
                          Pexp_ident "__ocaml_lex_string_rec" (src/lexer.ml[2358,117777+6]..[2358,117777+28])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2358,117777+29]..[2358,117777+39])
                              Pexp_ident "openingpos" (src/lexer.ml[2358,117777+29]..[2358,117777+39])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2358,117777+40]..[2358,117777+46])
                              Pexp_ident "lexbuf" (src/lexer.ml[2358,117777+40]..[2358,117777+46])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2358,117777+47]..[2358,117777+64])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2358,117777+47]..[2358,117777+64])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[2360,117843+4]..[2360,117843+17])
          Ppat_var "record_string" (src/lexer.ml[2360,117843+4]..[2360,117843+17])
        expression (src/lexer.ml[2360,117843+18]..[2361,117888+61]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2360,117843+18]..[2360,117843+28])
            Ppat_var "openingpos" (src/lexer.ml[2360,117843+18]..[2360,117843+28])
          expression (src/lexer.ml[2360,117843+29]..[2361,117888+61]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2360,117843+29]..[2360,117843+35])
              Ppat_var "buffer" (src/lexer.ml[2360,117843+29]..[2360,117843+35])
            expression (src/lexer.ml[2360,117843+36]..[2361,117888+61]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2360,117843+36]..[2360,117843+42])
                Ppat_var "lexbuf" (src/lexer.ml[2360,117843+36]..[2360,117843+42])
              expression (src/lexer.ml[2361,117888+3]..[2361,117888+61])
                Pexp_apply
                expression (src/lexer.ml[2361,117888+3]..[2361,117888+32])
                  Pexp_ident "__ocaml_lex_record_string_rec" (src/lexer.ml[2361,117888+3]..[2361,117888+32])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2361,117888+33]..[2361,117888+43])
                      Pexp_ident "openingpos" (src/lexer.ml[2361,117888+33]..[2361,117888+43])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2361,117888+44]..[2361,117888+50])
                      Pexp_ident "buffer" (src/lexer.ml[2361,117888+44]..[2361,117888+50])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2361,117888+51]..[2361,117888+57])
                      Pexp_ident "lexbuf" (src/lexer.ml[2361,117888+51]..[2361,117888+57])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2361,117888+58]..[2361,117888+61])
                      Pexp_constant PConst_int (221,None)
                ]
      <def>
        pattern (src/lexer.ml[2362,117950+4]..[2362,117950+33])
          Ppat_var "__ocaml_lex_record_string_rec" (src/lexer.ml[2362,117950+4]..[2362,117950+33])
        expression (src/lexer.ml[2362,117950+34]..[2413,119350+78]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2362,117950+34]..[2362,117950+44])
            Ppat_var "openingpos" (src/lexer.ml[2362,117950+34]..[2362,117950+44])
          expression (src/lexer.ml[2362,117950+45]..[2413,119350+78]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2362,117950+45]..[2362,117950+51])
              Ppat_var "buffer" (src/lexer.ml[2362,117950+45]..[2362,117950+51])
            expression (src/lexer.ml[2362,117950+52]..[2413,119350+78]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2362,117950+52]..[2362,117950+58])
                Ppat_var "lexbuf" (src/lexer.ml[2362,117950+52]..[2362,117950+58])
              expression (src/lexer.ml[2362,117950+59]..[2413,119350+78]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/lexer.ml[2362,117950+59]..[2362,117950+76])
                  Ppat_var "__ocaml_lex_state" (src/lexer.ml[2362,117950+59]..[2362,117950+76])
                expression (src/lexer.ml[2363,118029+2]..[2413,119350+78])
                  Pexp_match
                  expression (src/lexer.ml[2363,118029+8]..[2363,118029+65])
                    Pexp_apply
                    expression (src/lexer.ml[2363,118029+8]..[2363,118029+21])
                      Pexp_ident "Lexing.engine" (src/lexer.ml[2363,118029+8]..[2363,118029+21])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2363,118029+22]..[2363,118029+40])
                          Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2363,118029+22]..[2363,118029+40])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2363,118029+41]..[2363,118029+58])
                          Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2363,118029+41]..[2363,118029+58])
                      <arg>
                      Nolabel
                        expression (src/lexer.ml[2363,118029+59]..[2363,118029+65])
                          Pexp_ident "lexbuf" (src/lexer.ml[2363,118029+59]..[2363,118029+65])
                    ]
                  [
                    <case>
                      pattern (src/lexer.ml[2364,118100+8]..[2364,118100+9])
                        Ppat_constant PConst_int (0,None)
                      expression (src/lexer.mll[825,118135+4]..[825,118135+30])
                        Pexp_apply
                        expression (src/lexer.mll[825,118135+6]..[825,118135+21])
                          Pexp_ident "Buffer.contents" (src/lexer.mll[825,118135+6]..[825,118135+21])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[825,118135+22]..[825,118135+28])
                              Pexp_ident "buffer" (src/lexer.mll[825,118135+22]..[825,118135+28])
                        ]
                    <case>
                      pattern (src/lexer.ml[2369,118189+4]..[2369,118189+5])
                        Ppat_constant PConst_int (1,None)
                      expression (src/lexer.ml[2370,118198+0]..src/lexer.mll[829,118527+46])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[826,118224+44]..[826,118224+52])
                              Ppat_var "sequence" (src/lexer.mll[826,118224+44]..[826,118224+52])
                            expression (src/lexer.ml[2374,118299+2]..[2374,118299+88])
                              Pexp_apply
                              expression (src/lexer.ml[2374,118299+2]..[2374,118299+19])
                                Pexp_ident "Lexing.sub_lexeme" (src/lexer.ml[2374,118299+2]..[2374,118299+19])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2374,118299+20]..[2374,118299+26])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2374,118299+20]..[2374,118299+26])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2374,118299+27]..[2374,118299+54])
                                    Pexp_field
                                    expression (src/lexer.ml[2374,118299+27]..[2374,118299+33])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2374,118299+27]..[2374,118299+33])
                                    "Lexing.lex_start_pos" (src/lexer.ml[2374,118299+34]..[2374,118299+54])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2374,118299+55]..[2374,118299+88])
                                    Pexp_apply
                                    expression (src/lexer.ml[2374,118299+84]..[2374,118299+85])
                                      Pexp_ident "+" (src/lexer.ml[2374,118299+84]..[2374,118299+85])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2374,118299+56]..[2374,118299+83])
                                          Pexp_field
                                          expression (src/lexer.ml[2374,118299+56]..[2374,118299+62])
                                            Pexp_ident "lexbuf" (src/lexer.ml[2374,118299+56]..[2374,118299+62])
                                          "Lexing.lex_start_pos" (src/lexer.ml[2374,118299+63]..[2374,118299+83])
                                      <arg>
                                      Nolabel
                                        expression (src/lexer.ml[2374,118299+86]..[2374,118299+87])
                                          Pexp_constant PConst_int (2,None)
                                    ]
                              ]
                        ]
                        expression (src/lexer.mll[827,118413+4]..[829,118527+46])
                          Pexp_sequence
                          expression (src/lexer.mll[828,118486+6]..[828,118486+39])
                            Pexp_apply
                            expression (src/lexer.mll[828,118486+6]..[828,118486+23])
                              Pexp_ident "Buffer.add_string" (src/lexer.mll[828,118486+6]..[828,118486+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[828,118486+24]..[828,118486+30])
                                  Pexp_ident "buffer" (src/lexer.mll[828,118486+24]..[828,118486+30])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[828,118486+31]..[828,118486+39])
                                  Pexp_ident "sequence" (src/lexer.mll[828,118486+31]..[828,118486+39])
                            ]
                          expression (src/lexer.mll[829,118527+6]..[829,118527+44])
                            Pexp_apply
                            expression (src/lexer.mll[829,118527+6]..[829,118527+19])
                              Pexp_ident "record_string" (src/lexer.mll[829,118527+6]..[829,118527+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[829,118527+20]..[829,118527+30])
                                  Pexp_ident "openingpos" (src/lexer.mll[829,118527+20]..[829,118527+30])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[829,118527+31]..[829,118527+37])
                                  Pexp_ident "buffer" (src/lexer.mll[829,118527+31]..[829,118527+37])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[829,118527+38]..[829,118527+44])
                                  Pexp_ident "lexbuf" (src/lexer.mll[829,118527+38]..[829,118527+44])
                            ]
                    <case>
                      pattern (src/lexer.ml[2381,118597+4]..[2381,118597+5])
                        Ppat_constant PConst_int (2,None)
                      expression (src/lexer.mll[835,118628+4]..[835,118628+64])
                        Pexp_apply
                        expression (src/lexer.mll[835,118628+6]..[835,118628+12])
                          Pexp_ident "error2" (src/lexer.mll[835,118628+6]..[835,118628+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[835,118628+13]..[835,118628+19])
                              Pexp_ident "lexbuf" (src/lexer.mll[835,118628+13]..[835,118628+19])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[835,118628+20]..[835,118628+62])
                              Pexp_constant PConst_string("'\\n' is not permitted in a token alias.",(src/lexer.mll[835,118628+21]..[835,118628+61]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2386,118716+4]..[2386,118716+5])
                        Ppat_constant PConst_int (3,None)
                      expression (src/lexer.mll[837,118747+4]..[837,118747+59])
                        Pexp_apply
                        expression (src/lexer.mll[837,118747+6]..[837,118747+12])
                          Pexp_ident "error2" (src/lexer.mll[837,118747+6]..[837,118747+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[837,118747+13]..[837,118747+19])
                              Pexp_ident "lexbuf" (src/lexer.mll[837,118747+13]..[837,118747+19])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[837,118747+20]..[837,118747+57])
                              Pexp_constant PConst_string("illegal backslash escape in string.",(src/lexer.mll[837,118747+21]..[837,118747+56]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2391,118830+4]..[2391,118830+5])
                        Ppat_constant PConst_int (4,None)
                      expression (src/lexer.mll[839,118861+4]..[839,118861+50])
                        Pexp_apply
                        expression (src/lexer.mll[839,118861+6]..[839,118861+12])
                          Pexp_ident "error2" (src/lexer.mll[839,118861+6]..[839,118861+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[839,118861+13]..[839,118861+19])
                              Pexp_ident "lexbuf" (src/lexer.mll[839,118861+13]..[839,118861+19])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[839,118861+20]..[839,118861+48])
                              Pexp_constant PConst_string("illegal newline in string.",(src/lexer.mll[839,118861+21]..[839,118861+47]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2396,118935+4]..[2396,118935+5])
                        Ppat_constant PConst_int (5,None)
                      expression (src/lexer.mll[841,118966+4]..[841,118966+48])
                        Pexp_apply
                        expression (src/lexer.mll[841,118966+6]..[841,118966+12])
                          Pexp_ident "error1" (src/lexer.mll[841,118966+6]..[841,118966+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[841,118966+13]..[841,118966+23])
                              Pexp_ident "openingpos" (src/lexer.mll[841,118966+13]..[841,118966+23])
                          <arg>
                          Nolabel
                            expression (src/lexer.mll[841,118966+24]..[841,118966+46])
                              Pexp_constant PConst_string("unterminated string.",(src/lexer.mll[841,118966+25]..[841,118966+45]),None)
                        ]
                    <case>
                      pattern (src/lexer.ml[2401,119038+4]..[2401,119038+5])
                        Ppat_constant PConst_int (6,None)
                      expression (src/lexer.ml[2402,119047+0]..src/lexer.mll[844,119221+46])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[842,119073+7]..[842,119073+8])
                              Ppat_var "c" (src/lexer.mll[842,119073+7]..[842,119073+8])
                            expression (src/lexer.ml[2406,119104+2]..[2406,119104+59])
                              Pexp_apply
                              expression (src/lexer.ml[2406,119104+2]..[2406,119104+24])
                                Pexp_ident "Lexing.sub_lexeme_char" (src/lexer.ml[2406,119104+2]..[2406,119104+24])
                              [
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2406,119104+25]..[2406,119104+31])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2406,119104+25]..[2406,119104+31])
                                <arg>
                                Nolabel
                                  expression (src/lexer.ml[2406,119104+32]..[2406,119104+59])
                                    Pexp_field
                                    expression (src/lexer.ml[2406,119104+32]..[2406,119104+38])
                                      Pexp_ident "lexbuf" (src/lexer.ml[2406,119104+32]..[2406,119104+38])
                                    "Lexing.lex_start_pos" (src/lexer.ml[2406,119104+39]..[2406,119104+59])
                              ]
                        ]
                        expression (src/lexer.mll[843,119189+4]..[844,119221+46])
                          Pexp_sequence
                          expression (src/lexer.mll[843,119189+6]..[843,119189+30])
                            Pexp_apply
                            expression (src/lexer.mll[843,119189+6]..[843,119189+21])
                              Pexp_ident "Buffer.add_char" (src/lexer.mll[843,119189+6]..[843,119189+21])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[843,119189+22]..[843,119189+28])
                                  Pexp_ident "buffer" (src/lexer.mll[843,119189+22]..[843,119189+28])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[843,119189+29]..[843,119189+30])
                                  Pexp_ident "c" (src/lexer.mll[843,119189+29]..[843,119189+30])
                            ]
                          expression (src/lexer.mll[844,119221+6]..[844,119221+44])
                            Pexp_apply
                            expression (src/lexer.mll[844,119221+6]..[844,119221+19])
                              Pexp_ident "record_string" (src/lexer.mll[844,119221+6]..[844,119221+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[844,119221+20]..[844,119221+30])
                                  Pexp_ident "openingpos" (src/lexer.mll[844,119221+20]..[844,119221+30])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[844,119221+31]..[844,119221+37])
                                  Pexp_ident "buffer" (src/lexer.mll[844,119221+31]..[844,119221+37])
                              <arg>
                              Nolabel
                                expression (src/lexer.mll[844,119221+38]..[844,119221+44])
                                  Pexp_ident "lexbuf" (src/lexer.mll[844,119221+38]..[844,119221+44])
                            ]
                    <case>
                      pattern (src/lexer.ml[2412,119291+4]..[2412,119291+21])
                        Ppat_var "__ocaml_lex_state" (src/lexer.ml[2412,119291+4]..[2412,119291+21])
                      expression (src/lexer.ml[2412,119291+25]..[2413,119350+78])
                        Pexp_sequence
                        expression (src/lexer.ml[2412,119291+25]..[2412,119291+57])
                          Pexp_apply
                          expression (src/lexer.ml[2412,119291+25]..[2412,119291+50])
                            Pexp_field
                            expression (src/lexer.ml[2412,119291+25]..[2412,119291+31])
                              Pexp_ident "lexbuf" (src/lexer.ml[2412,119291+25]..[2412,119291+31])
                            "Lexing.refill_buff" (src/lexer.ml[2412,119291+32]..[2412,119291+50])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2412,119291+51]..[2412,119291+57])
                                Pexp_ident "lexbuf" (src/lexer.ml[2412,119291+51]..[2412,119291+57])
                          ]
                        expression (src/lexer.ml[2413,119350+6]..[2413,119350+78])
                          Pexp_apply
                          expression (src/lexer.ml[2413,119350+6]..[2413,119350+35])
                            Pexp_ident "__ocaml_lex_record_string_rec" (src/lexer.ml[2413,119350+6]..[2413,119350+35])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2413,119350+36]..[2413,119350+46])
                                Pexp_ident "openingpos" (src/lexer.ml[2413,119350+36]..[2413,119350+46])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2413,119350+47]..[2413,119350+53])
                                Pexp_ident "buffer" (src/lexer.ml[2413,119350+47]..[2413,119350+53])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2413,119350+54]..[2413,119350+60])
                                Pexp_ident "lexbuf" (src/lexer.ml[2413,119350+54]..[2413,119350+60])
                            <arg>
                            Nolabel
                              expression (src/lexer.ml[2413,119350+61]..[2413,119350+78])
                                Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2413,119350+61]..[2413,119350+78])
                          ]
                  ]
      <def>
        pattern (src/lexer.ml[2415,119430+4]..[2415,119430+17])
          Ppat_var "decode_string" (src/lexer.ml[2415,119430+4]..[2415,119430+17])
        expression (src/lexer.ml[2415,119430+18]..[2416,119464+50]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2415,119430+18]..[2415,119430+24])
            Ppat_var "buffer" (src/lexer.ml[2415,119430+18]..[2415,119430+24])
          expression (src/lexer.ml[2415,119430+25]..[2416,119464+50]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2415,119430+25]..[2415,119430+31])
              Ppat_var "lexbuf" (src/lexer.ml[2415,119430+25]..[2415,119430+31])
            expression (src/lexer.ml[2416,119464+3]..[2416,119464+50])
              Pexp_apply
              expression (src/lexer.ml[2416,119464+3]..[2416,119464+32])
                Pexp_ident "__ocaml_lex_decode_string_rec" (src/lexer.ml[2416,119464+3]..[2416,119464+32])
              [
                <arg>
                Nolabel
                  expression (src/lexer.ml[2416,119464+33]..[2416,119464+39])
                    Pexp_ident "buffer" (src/lexer.ml[2416,119464+33]..[2416,119464+39])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2416,119464+40]..[2416,119464+46])
                    Pexp_ident "lexbuf" (src/lexer.ml[2416,119464+40]..[2416,119464+46])
                <arg>
                Nolabel
                  expression (src/lexer.ml[2416,119464+47]..[2416,119464+50])
                    Pexp_constant PConst_int (231,None)
              ]
      <def>
        pattern (src/lexer.ml[2417,119515+4]..[2417,119515+33])
          Ppat_var "__ocaml_lex_decode_string_rec" (src/lexer.ml[2417,119515+4]..[2417,119515+33])
        expression (src/lexer.ml[2417,119515+34]..[2447,120371+67]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2417,119515+34]..[2417,119515+40])
            Ppat_var "buffer" (src/lexer.ml[2417,119515+34]..[2417,119515+40])
          expression (src/lexer.ml[2417,119515+41]..[2447,120371+67]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2417,119515+41]..[2417,119515+47])
              Ppat_var "lexbuf" (src/lexer.ml[2417,119515+41]..[2417,119515+47])
            expression (src/lexer.ml[2417,119515+48]..[2447,120371+67]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexer.ml[2417,119515+48]..[2417,119515+65])
                Ppat_var "__ocaml_lex_state" (src/lexer.ml[2417,119515+48]..[2417,119515+65])
              expression (src/lexer.ml[2418,119583+2]..[2447,120371+67])
                Pexp_match
                expression (src/lexer.ml[2418,119583+8]..[2418,119583+65])
                  Pexp_apply
                  expression (src/lexer.ml[2418,119583+8]..[2418,119583+21])
                    Pexp_ident "Lexing.engine" (src/lexer.ml[2418,119583+8]..[2418,119583+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2418,119583+22]..[2418,119583+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2418,119583+22]..[2418,119583+40])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2418,119583+41]..[2418,119583+58])
                        Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2418,119583+41]..[2418,119583+58])
                    <arg>
                    Nolabel
                      expression (src/lexer.ml[2418,119583+59]..[2418,119583+65])
                        Pexp_ident "lexbuf" (src/lexer.ml[2418,119583+59]..[2418,119583+65])
                  ]
                [
                  <case>
                    pattern (src/lexer.ml[2419,119654+8]..[2419,119654+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexer.mll[850,119689+4]..[850,119689+48])
                      Pexp_construct "()" (src/lexer.mll[850,119689+4]..[850,119689+48])
                      None
                  <case>
                    pattern (src/lexer.ml[2424,119761+4]..[2424,119761+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexer.ml[2425,119770+0]..src/lexer.mll[853,120011+35])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[851,119796+47]..[851,119796+48])
                            Ppat_var "c" (src/lexer.mll[851,119796+47]..[851,119796+48])
                          expression (src/lexer.ml[2429,119867+2]..[2429,119867+65])
                            Pexp_apply
                            expression (src/lexer.ml[2429,119867+2]..[2429,119867+24])
                              Pexp_ident "Lexing.sub_lexeme_char" (src/lexer.ml[2429,119867+2]..[2429,119867+24])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2429,119867+25]..[2429,119867+31])
                                  Pexp_ident "lexbuf" (src/lexer.ml[2429,119867+25]..[2429,119867+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2429,119867+32]..[2429,119867+65])
                                  Pexp_apply
                                  expression (src/lexer.ml[2429,119867+61]..[2429,119867+62])
                                    Pexp_ident "+" (src/lexer.ml[2429,119867+61]..[2429,119867+62])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.ml[2429,119867+33]..[2429,119867+60])
                                        Pexp_field
                                        expression (src/lexer.ml[2429,119867+33]..[2429,119867+39])
                                          Pexp_ident "lexbuf" (src/lexer.ml[2429,119867+33]..[2429,119867+39])
                                        "Lexing.lex_start_pos" (src/lexer.ml[2429,119867+40]..[2429,119867+60])
                                    <arg>
                                    Nolabel
                                      expression (src/lexer.ml[2429,119867+63]..[2429,119867+64])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                            ]
                      ]
                      expression (src/lexer.mll[852,119958+4]..[853,120011+35])
                        Pexp_sequence
                        expression (src/lexer.mll[852,119958+6]..[852,119958+51])
                          Pexp_apply
                          expression (src/lexer.mll[852,119958+6]..[852,119958+21])
                            Pexp_ident "Buffer.add_char" (src/lexer.mll[852,119958+6]..[852,119958+21])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[852,119958+22]..[852,119958+28])
                                Pexp_ident "buffer" (src/lexer.mll[852,119958+22]..[852,119958+28])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[852,119958+29]..[852,119958+51])
                                Pexp_apply
                                expression (src/lexer.mll[852,119958+30]..[852,119958+48])
                                  Pexp_ident "char_for_backslash" (src/lexer.mll[852,119958+30]..[852,119958+48])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexer.mll[852,119958+49]..[852,119958+50])
                                      Pexp_ident "c" (src/lexer.mll[852,119958+49]..[852,119958+50])
                                ]
                          ]
                        expression (src/lexer.mll[853,120011+6]..[853,120011+33])
                          Pexp_apply
                          expression (src/lexer.mll[853,120011+6]..[853,120011+19])
                            Pexp_ident "decode_string" (src/lexer.mll[853,120011+6]..[853,120011+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[853,120011+20]..[853,120011+26])
                                Pexp_ident "buffer" (src/lexer.mll[853,120011+20]..[853,120011+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[853,120011+27]..[853,120011+33])
                                Pexp_ident "lexbuf" (src/lexer.mll[853,120011+27]..[853,120011+33])
                          ]
                  <case>
                    pattern (src/lexer.ml[2435,120070+4]..[2435,120070+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexer.ml[2436,120079+0]..src/lexer.mll[856,120253+35])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[854,120105+7]..[854,120105+8])
                            Ppat_var "c" (src/lexer.mll[854,120105+7]..[854,120105+8])
                          expression (src/lexer.ml[2440,120136+2]..[2440,120136+59])
                            Pexp_apply
                            expression (src/lexer.ml[2440,120136+2]..[2440,120136+24])
                              Pexp_ident "Lexing.sub_lexeme_char" (src/lexer.ml[2440,120136+2]..[2440,120136+24])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2440,120136+25]..[2440,120136+31])
                                  Pexp_ident "lexbuf" (src/lexer.ml[2440,120136+25]..[2440,120136+31])
                              <arg>
                              Nolabel
                                expression (src/lexer.ml[2440,120136+32]..[2440,120136+59])
                                  Pexp_field
                                  expression (src/lexer.ml[2440,120136+32]..[2440,120136+38])
                                    Pexp_ident "lexbuf" (src/lexer.ml[2440,120136+32]..[2440,120136+38])
                                  "Lexing.lex_start_pos" (src/lexer.ml[2440,120136+39]..[2440,120136+59])
                            ]
                      ]
                      expression (src/lexer.mll[855,120221+4]..[856,120253+35])
                        Pexp_sequence
                        expression (src/lexer.mll[855,120221+6]..[855,120221+30])
                          Pexp_apply
                          expression (src/lexer.mll[855,120221+6]..[855,120221+21])
                            Pexp_ident "Buffer.add_char" (src/lexer.mll[855,120221+6]..[855,120221+21])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[855,120221+22]..[855,120221+28])
                                Pexp_ident "buffer" (src/lexer.mll[855,120221+22]..[855,120221+28])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[855,120221+29]..[855,120221+30])
                                Pexp_ident "c" (src/lexer.mll[855,120221+29]..[855,120221+30])
                          ]
                        expression (src/lexer.mll[856,120253+6]..[856,120253+33])
                          Pexp_apply
                          expression (src/lexer.mll[856,120253+6]..[856,120253+19])
                            Pexp_ident "decode_string" (src/lexer.mll[856,120253+6]..[856,120253+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[856,120253+20]..[856,120253+26])
                                Pexp_ident "buffer" (src/lexer.mll[856,120253+20]..[856,120253+26])
                            <arg>
                            Nolabel
                              expression (src/lexer.mll[856,120253+27]..[856,120253+33])
                                Pexp_ident "lexbuf" (src/lexer.mll[856,120253+27]..[856,120253+33])
                          ]
                  <case>
                    pattern (src/lexer.ml[2446,120312+4]..[2446,120312+21])
                      Ppat_var "__ocaml_lex_state" (src/lexer.ml[2446,120312+4]..[2446,120312+21])
                    expression (src/lexer.ml[2446,120312+25]..[2447,120371+67])
                      Pexp_sequence
                      expression (src/lexer.ml[2446,120312+25]..[2446,120312+57])
                        Pexp_apply
                        expression (src/lexer.ml[2446,120312+25]..[2446,120312+50])
                          Pexp_field
                          expression (src/lexer.ml[2446,120312+25]..[2446,120312+31])
                            Pexp_ident "lexbuf" (src/lexer.ml[2446,120312+25]..[2446,120312+31])
                          "Lexing.refill_buff" (src/lexer.ml[2446,120312+32]..[2446,120312+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2446,120312+51]..[2446,120312+57])
                              Pexp_ident "lexbuf" (src/lexer.ml[2446,120312+51]..[2446,120312+57])
                        ]
                      expression (src/lexer.ml[2447,120371+6]..[2447,120371+67])
                        Pexp_apply
                        expression (src/lexer.ml[2447,120371+6]..[2447,120371+35])
                          Pexp_ident "__ocaml_lex_decode_string_rec" (src/lexer.ml[2447,120371+6]..[2447,120371+35])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2447,120371+36]..[2447,120371+42])
                              Pexp_ident "buffer" (src/lexer.ml[2447,120371+36]..[2447,120371+42])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2447,120371+43]..[2447,120371+49])
                              Pexp_ident "lexbuf" (src/lexer.ml[2447,120371+43]..[2447,120371+49])
                          <arg>
                          Nolabel
                            expression (src/lexer.ml[2447,120371+50]..[2447,120371+67])
                              Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2447,120371+50]..[2447,120371+67])
                        ]
                ]
      <def>
        pattern (src/lexer.ml[2449,120440+4]..[2449,120440+8])
          Ppat_var "char" (src/lexer.ml[2449,120440+4]..[2449,120440+8])
        expression (src/lexer.ml[2449,120440+9]..[2450,120458+34]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2449,120440+9]..[2449,120440+15])
            Ppat_var "lexbuf" (src/lexer.ml[2449,120440+9]..[2449,120440+15])
          expression (src/lexer.ml[2450,120458+3]..[2450,120458+34])
            Pexp_apply
            expression (src/lexer.ml[2450,120458+3]..[2450,120458+23])
              Pexp_ident "__ocaml_lex_char_rec" (src/lexer.ml[2450,120458+3]..[2450,120458+23])
            [
              <arg>
              Nolabel
                expression (src/lexer.ml[2450,120458+24]..[2450,120458+30])
                  Pexp_ident "lexbuf" (src/lexer.ml[2450,120458+24]..[2450,120458+30])
              <arg>
              Nolabel
                expression (src/lexer.ml[2450,120458+31]..[2450,120458+34])
                  Pexp_constant PConst_int (236,None)
            ]
      <def>
        pattern (src/lexer.ml[2451,120493+4]..[2451,120493+24])
          Ppat_var "__ocaml_lex_char_rec" (src/lexer.ml[2451,120493+4]..[2451,120493+24])
        expression (src/lexer.ml[2451,120493+25]..[2464,120820+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2451,120493+25]..[2451,120493+31])
            Ppat_var "lexbuf" (src/lexer.ml[2451,120493+25]..[2451,120493+31])
          expression (src/lexer.ml[2451,120493+32]..[2464,120820+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2451,120493+32]..[2451,120493+49])
              Ppat_var "__ocaml_lex_state" (src/lexer.ml[2451,120493+32]..[2451,120493+49])
            expression (src/lexer.ml[2452,120545+2]..[2464,120820+51])
              Pexp_match
              expression (src/lexer.ml[2452,120545+8]..[2452,120545+65])
                Pexp_apply
                expression (src/lexer.ml[2452,120545+8]..[2452,120545+21])
                  Pexp_ident "Lexing.engine" (src/lexer.ml[2452,120545+8]..[2452,120545+21])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2452,120545+22]..[2452,120545+40])
                      Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2452,120545+22]..[2452,120545+40])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2452,120545+41]..[2452,120545+58])
                      Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2452,120545+41]..[2452,120545+58])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2452,120545+59]..[2452,120545+65])
                      Pexp_ident "lexbuf" (src/lexer.ml[2452,120545+59]..[2452,120545+65])
                ]
              [
                <case>
                  pattern (src/lexer.ml[2453,120616+8]..[2453,120616+9])
                    Ppat_constant PConst_int (0,None)
                  expression (src/lexer.mll[866,120651+3]..[866,120651+22])
                    Pexp_apply
                    expression (src/lexer.mll[866,120651+5]..[866,120651+13])
                      Pexp_ident "new_line" (src/lexer.mll[866,120651+5]..[866,120651+13])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[866,120651+14]..[866,120651+20])
                          Pexp_ident "lexbuf" (src/lexer.mll[866,120651+14]..[866,120651+20])
                    ]
                <case>
                  pattern (src/lexer.ml[2458,120697+4]..[2458,120697+5])
                    Ppat_constant PConst_int (1,None)
                  expression (src/lexer.mll[872,120728+3]..[872,120728+9])
                    Pexp_construct "()" (src/lexer.mll[872,120728+5]..[872,120728+7])
                    None
                <case>
                  pattern (src/lexer.ml[2463,120761+4]..[2463,120761+21])
                    Ppat_var "__ocaml_lex_state" (src/lexer.ml[2463,120761+4]..[2463,120761+21])
                  expression (src/lexer.ml[2463,120761+25]..[2464,120820+51])
                    Pexp_sequence
                    expression (src/lexer.ml[2463,120761+25]..[2463,120761+57])
                      Pexp_apply
                      expression (src/lexer.ml[2463,120761+25]..[2463,120761+50])
                        Pexp_field
                        expression (src/lexer.ml[2463,120761+25]..[2463,120761+31])
                          Pexp_ident "lexbuf" (src/lexer.ml[2463,120761+25]..[2463,120761+31])
                        "Lexing.refill_buff" (src/lexer.ml[2463,120761+32]..[2463,120761+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2463,120761+51]..[2463,120761+57])
                            Pexp_ident "lexbuf" (src/lexer.ml[2463,120761+51]..[2463,120761+57])
                      ]
                    expression (src/lexer.ml[2464,120820+6]..[2464,120820+51])
                      Pexp_apply
                      expression (src/lexer.ml[2464,120820+6]..[2464,120820+26])
                        Pexp_ident "__ocaml_lex_char_rec" (src/lexer.ml[2464,120820+6]..[2464,120820+26])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2464,120820+27]..[2464,120820+33])
                            Pexp_ident "lexbuf" (src/lexer.ml[2464,120820+27]..[2464,120820+33])
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2464,120820+34]..[2464,120820+51])
                            Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2464,120820+34]..[2464,120820+51])
                      ]
              ]
      <def>
        pattern (src/lexer.ml[2466,120873+4]..[2466,120873+10])
          Ppat_var "finish" (src/lexer.ml[2466,120873+4]..[2466,120873+10])
        expression (src/lexer.ml[2466,120873+11]..[2467,120893+36]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2466,120873+11]..[2466,120873+17])
            Ppat_var "lexbuf" (src/lexer.ml[2466,120873+11]..[2466,120873+17])
          expression (src/lexer.ml[2467,120893+3]..[2467,120893+36])
            Pexp_apply
            expression (src/lexer.ml[2467,120893+3]..[2467,120893+25])
              Pexp_ident "__ocaml_lex_finish_rec" (src/lexer.ml[2467,120893+3]..[2467,120893+25])
            [
              <arg>
              Nolabel
                expression (src/lexer.ml[2467,120893+26]..[2467,120893+32])
                  Pexp_ident "lexbuf" (src/lexer.ml[2467,120893+26]..[2467,120893+32])
              <arg>
              Nolabel
                expression (src/lexer.ml[2467,120893+33]..[2467,120893+36])
                  Pexp_constant PConst_int (253,None)
            ]
      <def>
        pattern (src/lexer.ml[2468,120930+4]..[2468,120930+26])
          Ppat_var "__ocaml_lex_finish_rec" (src/lexer.ml[2468,120930+4]..[2468,120930+26])
        expression (src/lexer.ml[2468,120930+27]..[2486,121371+53]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexer.ml[2468,120930+27]..[2468,120930+33])
            Ppat_var "lexbuf" (src/lexer.ml[2468,120930+27]..[2468,120930+33])
          expression (src/lexer.ml[2468,120930+34]..[2486,121371+53]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexer.ml[2468,120930+34]..[2468,120930+51])
              Ppat_var "__ocaml_lex_state" (src/lexer.ml[2468,120930+34]..[2468,120930+51])
            expression (src/lexer.ml[2469,120984+2]..[2486,121371+53])
              Pexp_match
              expression (src/lexer.ml[2469,120984+8]..[2469,120984+65])
                Pexp_apply
                expression (src/lexer.ml[2469,120984+8]..[2469,120984+21])
                  Pexp_ident "Lexing.engine" (src/lexer.ml[2469,120984+8]..[2469,120984+21])
                [
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2469,120984+22]..[2469,120984+40])
                      Pexp_ident "__ocaml_lex_tables" (src/lexer.ml[2469,120984+22]..[2469,120984+40])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2469,120984+41]..[2469,120984+58])
                      Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2469,120984+41]..[2469,120984+58])
                  <arg>
                  Nolabel
                    expression (src/lexer.ml[2469,120984+59]..[2469,120984+65])
                      Pexp_ident "lexbuf" (src/lexer.ml[2469,120984+59]..[2469,120984+65])
                ]
              [
                <case>
                  pattern (src/lexer.ml[2470,121055+8]..[2470,121055+9])
                    Ppat_constant PConst_int (0,None)
                  expression (src/lexer.mll[883,121090+4]..[883,121090+38])
                    Pexp_sequence
                    expression (src/lexer.mll[883,121090+6]..[883,121090+21])
                      Pexp_apply
                      expression (src/lexer.mll[883,121090+6]..[883,121090+14])
                        Pexp_ident "new_line" (src/lexer.mll[883,121090+6]..[883,121090+14])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[883,121090+15]..[883,121090+21])
                            Pexp_ident "lexbuf" (src/lexer.mll[883,121090+15]..[883,121090+21])
                      ]
                    expression (src/lexer.mll[883,121090+23]..[883,121090+36])
                      Pexp_apply
                      expression (src/lexer.mll[883,121090+23]..[883,121090+29])
                        Pexp_ident "finish" (src/lexer.mll[883,121090+23]..[883,121090+29])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.mll[883,121090+30]..[883,121090+36])
                            Pexp_ident "lexbuf" (src/lexer.mll[883,121090+30]..[883,121090+36])
                      ]
                <case>
                  pattern (src/lexer.ml[2475,121152+4]..[2475,121152+5])
                    Ppat_constant PConst_int (1,None)
                  expression (src/lexer.mll[885,121183+4]..[885,121183+29])
                    Pexp_apply
                    expression (src/lexer.mll[885,121183+6]..[885,121183+20])
                      Pexp_ident "lexeme_start_p" (src/lexer.mll[885,121183+6]..[885,121183+20])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[885,121183+21]..[885,121183+27])
                          Pexp_ident "lexbuf" (src/lexer.mll[885,121183+21]..[885,121183+27])
                    ]
                <case>
                  pattern (src/lexer.ml[2480,121236+4]..[2480,121236+5])
                    Ppat_constant PConst_int (2,None)
                  expression (src/lexer.mll[887,121267+4]..[887,121267+21])
                    Pexp_apply
                    expression (src/lexer.mll[887,121267+6]..[887,121267+12])
                      Pexp_ident "finish" (src/lexer.mll[887,121267+6]..[887,121267+12])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexer.mll[887,121267+13]..[887,121267+19])
                          Pexp_ident "lexbuf" (src/lexer.mll[887,121267+13]..[887,121267+19])
                    ]
                <case>
                  pattern (src/lexer.ml[2485,121312+4]..[2485,121312+21])
                    Ppat_var "__ocaml_lex_state" (src/lexer.ml[2485,121312+4]..[2485,121312+21])
                  expression (src/lexer.ml[2485,121312+25]..[2486,121371+53])
                    Pexp_sequence
                    expression (src/lexer.ml[2485,121312+25]..[2485,121312+57])
                      Pexp_apply
                      expression (src/lexer.ml[2485,121312+25]..[2485,121312+50])
                        Pexp_field
                        expression (src/lexer.ml[2485,121312+25]..[2485,121312+31])
                          Pexp_ident "lexbuf" (src/lexer.ml[2485,121312+25]..[2485,121312+31])
                        "Lexing.refill_buff" (src/lexer.ml[2485,121312+32]..[2485,121312+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2485,121312+51]..[2485,121312+57])
                            Pexp_ident "lexbuf" (src/lexer.ml[2485,121312+51]..[2485,121312+57])
                      ]
                    expression (src/lexer.ml[2486,121371+6]..[2486,121371+53])
                      Pexp_apply
                      expression (src/lexer.ml[2486,121371+6]..[2486,121371+28])
                        Pexp_ident "__ocaml_lex_finish_rec" (src/lexer.ml[2486,121371+6]..[2486,121371+28])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2486,121371+29]..[2486,121371+35])
                            Pexp_ident "lexbuf" (src/lexer.ml[2486,121371+29]..[2486,121371+35])
                        <arg>
                        Nolabel
                          expression (src/lexer.ml[2486,121371+36]..[2486,121371+53])
                            Pexp_ident "__ocaml_lex_state" (src/lexer.ml[2486,121371+36]..[2486,121371+53])
                      ]
              ]
    ]
]

open Lexing
open Parser
open Positions
open Keyword
let error1 pos = Error.error (Positions.one pos)
let error2 lexbuf = Error.error (Positions.lexbuf lexbuf)
let int_of_string (pos : Lexing.position) i =
  try int_of_string i
  with | Failure _ -> error1 pos "unreasonably large integer."
let savestart lexbuf f =
  let startp = lexbuf.lex_start_p in
  let token = f lexbuf in lexbuf.lex_start_p <- startp; token
let overwrite content offset c1 c2 =
  assert ((Bytes.get content offset) = c1); Bytes.set content offset c2
type monster =
  {
  pos: Positions.t ;
  check: check ;
  transform: int -> bytes -> unit ;
  keyword: keyword option ;
  oid: string option }
and check = Settings.dollars -> string option array -> unit
let none : check = fun _ -> fun _ -> ()
let syntaxerror pos =
  (let check = none
   and transform ofs1 content =
     let pos = start_of_position pos in
     let ofs = pos.pos_cnum - ofs1 in
     let source = "(raise _eRR)" in
     Bytes.blit_string source 0 content ofs (String.length source)
   and keyword = Some SyntaxError
   and oid = None in { pos; check; transform; keyword; oid } : monster)
let check_dollar pos i =
  (fun dollars ->
     fun producers ->
       if not ((0 <= (i - 1)) && ((i - 1) < (Array.length producers)))
       then Error.error [pos] "$%d refers to a nonexistent symbol." i;
       (producers.(i - 1)) |>
         (Option.iter
            (fun x ->
               Error.error [pos] "please do not say: $%d. Instead, say: %s."
                 i x));
       (match dollars with
        | Settings.DollarsDisallowed ->
            Error.error [pos]
              "please do not use $%d. Instead, name this value." i
        | Settings.DollarsAllowed -> ()) : check)
let check_producer pos x =
  (fun _ ->
     fun producers ->
       if not (List.mem (Some x) (Array.to_list producers))
       then Error.error [pos] "%s refers to a nonexistent symbol." x : 
  check)
let dollar pos i =
  (let check : check = check_dollar pos i
   and transform ofs1 content =
     let pos = start_of_position pos in
     let ofs = pos.pos_cnum - ofs1 in overwrite content ofs '$' '_'
   and keyword = None
   and oid = Some (Printf.sprintf "_%d" i) in
   { pos; check; transform; keyword; oid } : monster)
let position pos (where : string) (flavor : string) (i : string option)
  (x : string option) =
  let check_no_parameter () =
    if (i <> None) || (x <> None)
    then Error.error [pos] "$%s%s does not take a parameter." where flavor in
  let ofslpar = (1 + (String.length where)) + 3 in
  let where =
    match where with
    | "symbolstart" | "s" -> (check_no_parameter (); WhereSymbolStart)
    | "start" -> WhereStart
    | "end" -> WhereEnd
    | "" -> WhereStart
    | _ -> assert false in
  let flavor =
    match flavor with
    | "pos" -> FlavorPosition
    | "ofs" -> FlavorOffset
    | "loc" -> FlavorLocation
    | _ -> assert false in
  let (subject, check) =
    match (i, x) with
    | (Some i, None) ->
        let ii = int_of_string (start_of_position pos) i in
        if (ii = 0) && (where = WhereEnd)
        then (Before, none)
        else ((RightNamed ("_" ^ i)), (check_dollar pos ii))
    | (None, Some x) -> ((RightNamed x), (check_producer pos x))
    | (None, None) -> (Left, none)
    | (Some _, Some _) -> assert false in
  let transform ofs1 content =
    let pos = start_of_position pos in
    let ofs = pos.pos_cnum - ofs1 in
    overwrite content ofs '$' '_';
    (let ofslpar = ofs + ofslpar in
     match (i, x) with
     | (None, Some x) ->
         (overwrite content ofslpar '(' '_';
          overwrite content ((ofslpar + 1) + (String.length x)) ')' '_')
     | (Some i, None) ->
         (overwrite content ofslpar '(' '_';
          overwrite content (ofslpar + 1) '$' '_';
          overwrite content ((ofslpar + 2) + (String.length i)) ')' '_')
     | (_, _) -> ()) in
  let keyword = Some (Position (subject, where, flavor))
  and oid = None in { pos; check; transform; keyword; oid }
let no_monsters monsters =
  match monsters with
  | [] -> ()
  | monster::_ ->
      Error.error [monster.pos]
        "a Menhir keyword cannot be used in an OCaml header."
let gather_oid xs oid =
  match oid with | Some x -> StringSet.add x xs | None -> xs
let gather_oids oids = Array.fold_left gather_oid StringSet.empty oids
let gather_monsters monsters =
  List.fold_left (fun xs -> fun monster -> gather_oid xs monster.oid)
    StringSet.empty monsters
let mk_stretch pos1 pos2 parenthesize monsters =
  let raw_content : string = InputFile.chunk (pos1, pos2) in
  let content : string =
    match monsters with
    | [] -> raw_content
    | _::_ ->
        let content : bytes = Bytes.of_string raw_content in
        (List.iter (fun monster -> monster.transform pos1.pos_cnum content)
           monsters;
         Bytes.unsafe_to_string content) in
  let content =
    if parenthesize
    then
      (String.make ((pos1.pos_cnum - pos1.pos_bol) - 1) ' ') ^
        ("(" ^ (content ^ ")"))
    else (String.make (pos1.pos_cnum - pos1.pos_bol) ' ') ^ content in
  let open Stretch in
    {
      stretch_filename = (InputFile.get_input_file_name ());
      stretch_linenum = (pos1.pos_lnum);
      stretch_linecount = (pos2.pos_lnum - pos1.pos_lnum);
      stretch_content = content;
      stretch_raw_content = raw_content;
      stretch_keywords =
        (Misc.filter_map (fun monster -> monster.keyword) monsters)
    }
let stretch_of_id (id : string located) =
  let (raw_content, pos) = Positions.decompose id in
  let pos1 = Positions.start_of_position pos
  and pos2 = Positions.end_of_position pos
  and filename = Positions.filename_of_position pos in
  assert (pos1 != Lexing.dummy_pos);
  (let padding = pos1.pos_cnum - pos1.pos_bol in
   let content = (String.make padding ' ') ^ raw_content in
   let open Stretch in
     {
       stretch_filename = filename;
       stretch_linenum = (pos1.pos_lnum);
       stretch_linecount = (pos2.pos_lnum - pos1.pos_lnum);
       stretch_content = content;
       stretch_raw_content = raw_content;
       stretch_keywords = []
     })
let table words =
  let table = Hashtbl.create 149 in
  List.iter (fun word -> Hashtbl.add table word ()) words; table
let reserved =
  table
    ["and";
    "as";
    "assert";
    "begin";
    "class";
    "constraint";
    "do";
    "done";
    "downto";
    "else";
    "end";
    "exception";
    "external";
    "false";
    "for";
    "fun";
    "function";
    "functor";
    "if";
    "in";
    "include";
    "inherit";
    "initializer";
    "lazy";
    "let";
    "match";
    "method";
    "module";
    "mutable";
    "new";
    "object";
    "of";
    "open";
    "or";
    "parser";
    "private";
    "rec";
    "sig";
    "struct";
    "then";
    "to";
    "true";
    "try";
    "type";
    "val";
    "virtual";
    "when";
    "while";
    "with";
    "mod";
    "land";
    "lor";
    "lxor";
    "lsl";
    "lsr";
    "asr"]
let table directives =
  let table = Hashtbl.create 149 in
  List.iter (fun (word, token) -> Hashtbl.add table word token) directives;
  table
let directives =
  table
    [("token", TOKEN);
    ("type", TYPE);
    ("left", LEFT);
    ("right", RIGHT);
    ("nonassoc", NONASSOC);
    ("start", START);
    ("prec", PREC);
    ("public", PUBLIC);
    ("parameter", PARAMETER);
    ("inline", INLINE);
    ("attribute", PERCENTATTRIBUTE);
    ("on_error_reduce", ON_ERROR_REDUCE)]
let char_for_backslash =
  function | 'n' -> '\n' | 'r' -> '\r' | 'b' -> '\b' | 't' -> '\t' | c -> c
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\226\255\227\255\000\000\229\255\231\255\003\000\001\000\235\255\003\000\236\255\209\000\161\001q\002A\003\243\255\244\255\245\255\246\255\247\255\248\255\004\000\001\000\251\255\031\000\253\255\019\004\029\000\230\255\254\255\227\004\181\005\163\006\006\000\241\255\240\255\232\255s\007C\b\233\255\011\000\004\000\012\000\252\255\253\255\001\000\006\000\255\255\254\255|\000\250\255\251\255\007\000\252\255\007\000\254\255 \000\"\000\255\255\253\255`\001\243\255\244\255\b\000\245\255\247\255\248\255\236\001\t\000\000\000\254\255\255\255\246\255\r\000\017\000\019\000\022\000`\000\"\000\023\000\019\000&\000\028\000 \000\026\000\026\0009\000)\000(\000.\0009\0001\000.\000\012\000z\bQ\tz\000#\001\251\255\251\255/\000B\000-\000A\0005\0006\000E\000C\000\249\255D\000C\000T\000V\000V\000F\000T\000O\000J\000\132\000\168\000\156\000\157\000\161\000\159\000\250\255\000\003\243\255\244\255\t\000\245\255\247\255\248\255\140\003\253\255\254\255\011\000\246\255\186\000\190\000\192\000\242\000>\001\206\000\224\000\189\000\237\000\225\000\229\000\223\000\233\000\254\000\238\000\237\000\243\000\254\000\246\000\244\000\015\000\136\t_\n\246\001\007\002\251\255\251\255\245\000\b\001\244\000\019\001\007\001\b\001\012\001\011\001\249\255\012\001\011\001\028\001\030\001\030\001\016\001!\001\028\001\023\001\026\001)\001\029\001\030\0019\001V\001\250\255U\011\246\255\247\255\n\000\248\255\250\255\251\255\014\000\253\255\254\255\255\255\249\255\228\002\249\255\250\255\r\000\251\255\252\255\253\255\015\000\179\001\255\255\254\255\188\003\251\255\252\255\016\000\254\255\242\001\255\255\253\255\017\000\142\004\249\255\250\255\018\000\251\255A\011\255\255\252\255\253\255\254\255\202\002\253\255I\011\255\255\254\255\236\002\000\000\214\001\183\001\146\004\184\0017\005\204\002\215\001\218\001\255\255\n\002\017\002\254\255\011\002\000\006\012\002\161\002\253\255\254\255\019\000\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\029\000\255\255\255\255\021\000\020\000\255\255\029\000\255\255\018\000\017\000\017\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\255\255\003\000\255\255\029\000\255\255\255\255\255\255\000\000\255\255\027\000\027\000\255\255\255\255\255\255\017\000\016\000\255\255\255\255\020\000\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\255\255\255\255\255\255\255\255\nn
    Lexing.lex_default =
~
    Lexing.lex_trans =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\b\000\b\000\006\000\007\000\b\000!\000/\0005\000@\000\129\000\193\000\b\000/\000\205\000)\000.\000\216\000\216\000\225\000\001\001\000\000\000\000\006\000\000\000\n\000\006\000\000\000\026\000!\000\249\000\021\000\020\000\017\000\016\000\023\000'\000$\000\t\0000\000;\000(\000H\000^\000\136\000-\000\158\000\200\000\211\000\024\000\025\000\005\000\022\000#\000\018\000\031\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\"\000\031\000:\000\014\000:\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\004\000\019\000F\000\015\000q\000p\000o\000J\000m\000Q\000P\0005\000e\000R\0004\000N\000S\000T\000U\000V\000O\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000W\000X\000Y\000Z\000[\000d\000\\\000]\000]\000f\0006\000g\000h\000i\000j\0009\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000k\000l\000n\000Y\000Y\000]\0007\000r\000s\000t\000u\000v\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\0008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000w\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\002\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255,\000x\000y\000z\000{\000|\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\177\000\176\000\175\000\173\000\011\000\165\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000b\000\145\000\144\000\146\000\147\000\148\000\149\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a`c
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\007\000\006\000\000\000)\000!\000.\0004\000?\000\128\000\192\000(\000*\000\204\000(\000*\000\215\000\220\000\224\000\000\001\255\255\255\255\000\000\255\255\000\000\006\000\255\255\000\000!\000\237\000\000\000\000\000\000\000\000\000\000\000\t\000\021\000\000\000-\0006\000\td\000e\0001\000f\000g\000h\000i\0001\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000j\000k\000m\000n\000o\000p\0001\000q\000r\000s\000t\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000(\000*\000w\000x\000y\000z\000{\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\137\000\138\000\139\000\142\000\011\000\144\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000a\000\143\000\143\000\145\000\146\000\147\000\148\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000\149\000\140\000\150\000\151\000\152\000\153\000\153\000\154\000\155\000\140\000\156\000\164\000\165\000<\000\140\000\166\000<\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\167\000\168\000\169\000\170\0001\000\171\000\173\000\174\000\175\000\176\000<\000\177\000<\000<\000\178\000<\000<\000<\000\179\000\180\000\181\000\182\000\183\000\184\000\185\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\186\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\187\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000<\000\209\000<\000\239\000\241\000\238\000\244\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\217\000\238\000\244\000\217\000\012\000\245\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000C\000C\000C\000C\000C\000C\000C\000C\000C\000C\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\161\000\247\000\250\000\252\000\255\255\255\255\255\255\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\255\255\255\255\255\255\255\255\255\255\255\255C\000\255\255\255\255\255\255\255\255\255\255\255\255C\000\255\255\255\255\255\255C\000\255\255\255\255C\000<\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\253\000\255\255\255\255\253\000\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\231\000\255\255\201\000\255\255\255\255\201\000\217\000\243\000\255\255\255\255\236\000\255\255\255\255\236\000\255\255\255\255\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\201\000\255\255\255\255\255\255}\000\201\000\201\000}\000\201\000\255\255\255\255\255\255\255\255\236\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}\000\255\255\231\000}\000}\000}\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\236\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000}\000\255\255}}
    Lexing.lex_base_code =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\n\000\000\000\t\001\217\001N\000X\0004\000C\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000%\000\001\000\016\002\224\002i\000s\0004\000C\000:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:\000K\000M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    Lexing.lex_backtrk_code =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    Lexing.lex_default_code =

    Lexing.lex_trans_code =

    Lexing.lex_check_code =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255<\000\000\000}`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000d\000n\000o\000p
    Lexing.lex_code =
      "\255\002\255\255\003\255\255\000\002\001\003\255\n\255\t\255\b\255\255\n\255\t\255\255\011\255\255\007\255\003\255\005\b\004\n\001\t\000\011\255\012\255\255\014\255\255\r\255\255\015\255\255\007\255\005\b\004\n\003\014\002\015\001\t\000\011\255\003\255\007\012\006\r\005\b\004\n\001\t\000\011\255"
  }
let rec main lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 4 (-1));
  (lexbuf.Lexing.lex_mem).(2) <- (lexbuf.Lexing.lex_curr_pos);
  __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let directive =
        Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1)
          lexbuf.Lexing.lex_curr_pos in
      (try Hashtbl.find directives directive
       with | Not_found -> error2 lexbuf "unknown directive: %s." directive)
  | 1 ->
      PERCENTPERCENT
        (lazy
           (let openingpos = lexeme_end_p lexbuf in
            let closingpos = finish lexbuf in
            mk_stretch openingpos closingpos false []))
  | 2 -> SEMI
  | 3 -> COLON
  | 4 -> COMMA
  | 5 -> EQUAL
  | 6 -> LPAREN
  | 7 -> RPAREN
  | 8 -> BAR
  | 9 -> QUESTION
  | 10 -> STAR
  | 11 -> PLUS
  | 12 -> TILDE
  | 13 -> UNDERSCORE
  | 14 -> COLONEQUAL
  | 15 -> EQUALEQUAL
  | 16 -> LET
  | 17 ->
      let id =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      if Hashtbl.mem reserved id
      then error2 lexbuf "this is an OCaml reserved word."
      else LID (with_pos (cpos lexbuf) id)
  | 18 ->
      let id =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      UID (with_pos (cpos lexbuf) id)
  | 19 ->
      let buffer = Buffer.create 16 in
      let openingpos = lexeme_start_p lexbuf in
      let content = record_string openingpos buffer lexbuf in
      let id = Printf.sprintf "\"%s\"" content in
      let pos = import (openingpos, (lexbuf.lex_curr_p)) in
      QID (with_pos pos id)
  | 20 -> (new_line lexbuf; main lexbuf)
  | 21 -> main lexbuf
  | 22 -> (comment (lexeme_start_p lexbuf) lexbuf; main lexbuf)
  | 23 -> (ocamlcomment (lexeme_start_p lexbuf) lexbuf; main lexbuf)
  | 24 -> savestart lexbuf (ocamltype (lexeme_end_p lexbuf))
  | 25 ->
      savestart lexbuf
        (fun lexbuf ->
           let openingpos = lexeme_start_p lexbuf in
           let stretchpos = lexeme_end_p lexbuf in
           let (closingpos, monsters) = action true openingpos [] lexbuf in
           no_monsters monsters;
           HEADER (mk_stretch stretchpos closingpos false []))
  | 26 ->
      savestart lexbuf
        (fun lexbuf ->
           let openingpos = lexeme_start_p lexbuf in
           let stretchpos = lexeme_end_p lexbuf in
           let (closingpos, monsters) = action false openingpos [] lexbuf in
           ACTION
             (fun dollars ->
                fun producers ->
                  List.iter (fun monster -> monster.check dollars producers)
                    monsters;
                  (let ids =
                     StringSet.union (gather_oids producers)
                       (gather_monsters monsters) in
                   let stretch =
                     mk_stretch stretchpos closingpos true monsters in
                   Action.from_stretch ids stretch)))
  | 27 ->
      let percent =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          ((lexbuf.Lexing.lex_mem).(0))
      and id =
        Lexing.sub_lexeme lexbuf (((lexbuf.Lexing.lex_mem).(0)) + 2)
          ((lexbuf.Lexing.lex_mem).(1)) in
      let openingpos = lexeme_start_p lexbuf in
      let stretchpos = lexeme_end_p lexbuf in
      let closingpos = attribute openingpos lexbuf in
      let pos = Positions.import (openingpos, (lexeme_end_p lexbuf)) in
      let attr = mk_stretch stretchpos closingpos false [] in
      if percent = ""
      then ATTRIBUTE ((Positions.with_pos pos id), attr)
      else GRAMMARATTRIBUTE ((Positions.with_pos pos id), attr)
  | 28 -> EOF
  | 29 -> error2 lexbuf "unexpected character(s)."
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_main_rec lexbuf __ocaml_lex_state)
and comment openingpos lexbuf = __ocaml_lex_comment_rec openingpos lexbuf 42
and __ocaml_lex_comment_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> (new_line lexbuf; comment openingpos lexbuf)
  | 1 -> ()
  | 2 -> error1 openingpos "unterminated comment."
  | 3 -> comment openingpos lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_comment_rec openingpos lexbuf __ocaml_lex_state)
and ocamltype openingpos lexbuf =
  __ocaml_lex_ocamltype_rec openingpos lexbuf 49
and __ocaml_lex_ocamltype_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> ocamltype openingpos lexbuf
  | 1 ->
      OCAMLTYPE
        (Stretch.Declared
           (mk_stretch openingpos (lexeme_start_p lexbuf) true []))
  | 2 ->
      (ocamlcomment (lexeme_start_p lexbuf) lexbuf;
       ocamltype openingpos lexbuf)
  | 3 -> (new_line lexbuf; ocamltype openingpos lexbuf)
  | 4 -> error1 openingpos "unterminated OCaml type."
  | 5 -> ocamltype openingpos lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_ocamltype_rec openingpos lexbuf __ocaml_lex_state)
and action percent openingpos monsters lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 16 (-1));
  __ocaml_lex_action_rec percent openingpos monsters lexbuf 60
and __ocaml_lex_action_rec percent openingpos monsters lexbuf
  __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let (_, monsters) =
        action false (lexeme_start_p lexbuf) monsters lexbuf in
      action percent openingpos monsters lexbuf
  | 1 ->
      let delimiter =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      (match (percent, delimiter) with
       | (true, "%}") | (false, "}") -> ((lexeme_start_p lexbuf), monsters)
       | (_, _) -> error1 openingpos "unbalanced opening brace.")
  | 2 ->
      let (_, monsters) = parentheses (lexeme_start_p lexbuf) monsters lexbuf in
      action percent openingpos monsters lexbuf
  | 3 ->
      let i =
        Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1)
          lexbuf.Lexing.lex_curr_pos in
      let i = int_of_string (lexeme_start_p lexbuf) i in
      let monster = dollar (cpos lexbuf) i in
      action percent openingpos (monster :: monsters) lexbuf
  | 4 ->
      let i =
        Lexing.sub_lexeme_opt lexbuf ((lexbuf.Lexing.lex_mem).(3))
          ((lexbuf.Lexing.lex_mem).(2))
      and x =
        Lexing.sub_lexeme_opt lexbuf ((lexbuf.Lexing.lex_mem).(7))
          ((lexbuf.Lexing.lex_mem).(6))
      and where =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(5))
          ((lexbuf.Lexing.lex_mem).(4))
      and flavor =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(1))
          ((lexbuf.Lexing.lex_mem).(0)) in
      let monster = position (cpos lexbuf) where flavor i x in
      action percent openingpos (monster :: monsters) lexbuf
  | 5 -> error2 lexbuf "$previouserror is no longer supported."
  | 6 ->
      let monster = syntaxerror (cpos lexbuf) in
      action percent openingpos (monster :: monsters) lexbuf
  | 7 ->
      (string (lexeme_start_p lexbuf) lexbuf;
       action percent openingpos monsters lexbuf)
  | 8 -> (char lexbuf; action percent openingpos monsters lexbuf)
  | 9 ->
      (ocamlcomment (lexeme_start_p lexbuf) lexbuf;
       action percent openingpos monsters lexbuf)
  | 10 -> (new_line lexbuf; action percent openingpos monsters lexbuf)
  | 11 -> error1 openingpos "unbalanced opening brace."
  | 12 -> action percent openingpos monsters lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_action_rec percent openingpos monsters lexbuf
         __ocaml_lex_state)
and parentheses openingpos monsters lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 16 (-1));
  __ocaml_lex_parentheses_rec openingpos monsters lexbuf 125
and __ocaml_lex_parentheses_rec openingpos monsters lexbuf __ocaml_lex_state
  =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let (_, monsters) = parentheses (lexeme_start_p lexbuf) monsters lexbuf in
      parentheses openingpos monsters lexbuf
  | 1 -> ((lexeme_start_p lexbuf), monsters)
  | 2 ->
      let (_, monsters) =
        action false (lexeme_start_p lexbuf) monsters lexbuf in
      parentheses openingpos monsters lexbuf
  | 3 ->
      let i =
        Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1)
          lexbuf.Lexing.lex_curr_pos in
      let i = int_of_string (lexeme_start_p lexbuf) i in
      let monster = dollar (cpos lexbuf) i in
      parentheses openingpos (monster :: monsters) lexbuf
  | 4 ->
      let i =
        Lexing.sub_lexeme_opt lexbuf ((lexbuf.Lexing.lex_mem).(3))
          ((lexbuf.Lexing.lex_mem).(2))
      and x =
        Lexing.sub_lexeme_opt lexbuf ((lexbuf.Lexing.lex_mem).(7))
          ((lexbuf.Lexing.lex_mem).(6))
      and where =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(5))
          ((lexbuf.Lexing.lex_mem).(4))
      and flavor =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(1))
          ((lexbuf.Lexing.lex_mem).(0)) in
      let monster = position (cpos lexbuf) where flavor i x in
      parentheses openingpos (monster :: monsters) lexbuf
  | 5 -> error2 lexbuf "$previouserror is no longer supported."
  | 6 ->
      let monster = syntaxerror (cpos lexbuf) in
      parentheses openingpos (monster :: monsters) lexbuf
  | 7 ->
      (string (lexeme_start_p lexbuf) lexbuf;
       parentheses openingpos monsters lexbuf)
  | 8 -> (char lexbuf; parentheses openingpos monsters lexbuf)
  | 9 ->
      (ocamlcomment (lexeme_start_p lexbuf) lexbuf;
       parentheses openingpos monsters lexbuf)
  | 10 -> (new_line lexbuf; parentheses openingpos monsters lexbuf)
  | 11 -> error1 openingpos "unbalanced opening parenthesis."
  | 12 -> parentheses openingpos monsters lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_parentheses_rec openingpos monsters lexbuf
         __ocaml_lex_state)
and attribute openingpos lexbuf =
  __ocaml_lex_attribute_rec openingpos lexbuf 189
and __ocaml_lex_attribute_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let _ = attribute (lexeme_start_p lexbuf) lexbuf in
      attribute openingpos lexbuf
  | 1 -> lexeme_start_p lexbuf
  | 2 ->
      let (_, _) = action false (lexeme_start_p lexbuf) [] lexbuf in
      attribute openingpos lexbuf
  | 3 ->
      let (_, _) = parentheses (lexeme_start_p lexbuf) [] lexbuf in
      attribute openingpos lexbuf
  | 4 -> (string (lexeme_start_p lexbuf) lexbuf; attribute openingpos lexbuf)
  | 5 -> (char lexbuf; attribute openingpos lexbuf)
  | 6 ->
      (ocamlcomment (lexeme_start_p lexbuf) lexbuf;
       attribute openingpos lexbuf)
  | 7 -> (new_line lexbuf; attribute openingpos lexbuf)
  | 8 -> error1 openingpos "unbalanced opening bracket."
  | 9 -> attribute openingpos lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_attribute_rec openingpos lexbuf __ocaml_lex_state)
and ocamlcomment openingpos lexbuf =
  __ocaml_lex_ocamlcomment_rec openingpos lexbuf 201
and __ocaml_lex_ocamlcomment_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> ()
  | 1 ->
      (ocamlcomment (lexeme_start_p lexbuf) lexbuf;
       ocamlcomment openingpos lexbuf)
  | 2 ->
      (string (lexeme_start_p lexbuf) lexbuf; ocamlcomment openingpos lexbuf)
  | 3 -> (char lexbuf; ocamlcomment openingpos lexbuf)
  | 4 -> (new_line lexbuf; ocamlcomment openingpos lexbuf)
  | 5 -> error1 openingpos "unterminated OCaml comment."
  | 6 -> ocamlcomment openingpos lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_ocamlcomment_rec openingpos lexbuf __ocaml_lex_state)
and string openingpos lexbuf = __ocaml_lex_string_rec openingpos lexbuf 212
and __ocaml_lex_string_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> ()
  | 1 -> (new_line lexbuf; string openingpos lexbuf)
  | 2 -> string openingpos lexbuf
  | 3 -> error1 openingpos "unterminated OCaml string."
  | 4 -> string openingpos lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_string_rec openingpos lexbuf __ocaml_lex_state)
and record_string openingpos buffer lexbuf =
  __ocaml_lex_record_string_rec openingpos buffer lexbuf 221
and __ocaml_lex_record_string_rec openingpos buffer lexbuf __ocaml_lex_state
  =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Buffer.contents buffer
  | 1 ->
      let sequence =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          (lexbuf.Lexing.lex_start_pos + 2) in
      (Buffer.add_string buffer sequence;
       record_string openingpos buffer lexbuf)
  | 2 -> error2 lexbuf "'\\n' is not permitted in a token alias."
  | 3 -> error2 lexbuf "illegal backslash escape in string."
  | 4 -> error2 lexbuf "illegal newline in string."
  | 5 -> error1 openingpos "unterminated string."
  | 6 ->
      let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      (Buffer.add_char buffer c; record_string openingpos buffer lexbuf)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_record_string_rec openingpos buffer lexbuf
         __ocaml_lex_state)
and decode_string buffer lexbuf =
  __ocaml_lex_decode_string_rec buffer lexbuf 231
and __ocaml_lex_decode_string_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> ()
  | 1 ->
      let c = Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
      (Buffer.add_char buffer (char_for_backslash c);
       decode_string buffer lexbuf)
  | 2 ->
      let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      (Buffer.add_char buffer c; decode_string buffer lexbuf)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_decode_string_rec buffer lexbuf __ocaml_lex_state)
and char lexbuf = __ocaml_lex_char_rec lexbuf 236
and __ocaml_lex_char_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> new_line lexbuf
  | 1 -> ()
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_char_rec lexbuf __ocaml_lex_state)
and finish lexbuf = __ocaml_lex_finish_rec lexbuf 253
and __ocaml_lex_finish_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> (new_line lexbuf; finish lexbuf)
  | 1 -> lexeme_start_p lexbuf
  | 2 -> finish lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_finish_rec lexbuf __ocaml_lex_state)
[
  structure_item (src/lexer.mll[16,43+0]..src/lexer.mll[16,43+11])
    Tstr_open Fresh
    module_expr (src/lexer.mll[16,43+5]..src/lexer.mll[16,43+11])
      Tmod_ident "Stdlib!.Lexing"
  structure_item (src/lexer.mll[17,55+0]..src/lexer.mll[17,55+11])
    Tstr_open Fresh
    module_expr (src/lexer.mll[17,55+5]..src/lexer.mll[17,55+11])
      Tmod_ident "Dune__exe!.Parser"
  structure_item (src/lexer.mll[18,67+0]..src/lexer.mll[18,67+14])
    Tstr_open Fresh
    module_expr (src/lexer.mll[18,67+5]..src/lexer.mll[18,67+14])
      Tmod_ident "Dune__exe!.Positions"
  structure_item (src/lexer.mll[19,82+0]..src/lexer.mll[19,82+12])
    Tstr_open Fresh
    module_expr (src/lexer.mll[19,82+5]..src/lexer.mll[19,82+12])
      Tmod_ident "MenhirSdk!.Keyword"
  structure_item (src/lexer.mll[25,196+0]..src/lexer.mll[26,213+33])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[25,196+4]..src/lexer.mll[25,196+10])
          Tpat_var "error1/467"
        expression (src/lexer.mll[25,196+11]..src/lexer.mll[26,213+33]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[25,196+11]..src/lexer.mll[25,196+14])
                Tpat_var "pos/469"
              expression (src/lexer.mll[26,213+2]..src/lexer.mll[26,213+33])
                Texp_apply
                expression (src/lexer.mll[26,213+2]..src/lexer.mll[26,213+13])
                  Texp_ident "Dune__exe!.Error.error"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[26,213+14]..src/lexer.mll[26,213+33])
                      Texp_apply
                      expression (src/lexer.mll[26,213+15]..src/lexer.mll[26,213+28])
                        Texp_ident "Dune__exe!.Positions.one"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[26,213+29]..src/lexer.mll[26,213+32])
                            Texp_ident "pos/469"
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[28,248+0]..src/lexer.mll[29,268+39])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[28,248+4]..src/lexer.mll[28,248+10])
          Tpat_var "error2/509"
        expression (src/lexer.mll[28,248+11]..src/lexer.mll[29,268+39]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[28,248+11]..src/lexer.mll[28,248+17])
                Tpat_var "lexbuf/511"
              expression (src/lexer.mll[29,268+2]..src/lexer.mll[29,268+39])
                Texp_apply
                expression (src/lexer.mll[29,268+2]..src/lexer.mll[29,268+13])
                  Texp_ident "Dune__exe!.Error.error"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[29,268+14]..src/lexer.mll[29,268+39])
                      Texp_apply
                      expression (src/lexer.mll[29,268+15]..src/lexer.mll[29,268+31])
                        Texp_ident "Dune__exe!.Positions.lexbuf"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[29,268+32]..src/lexer.mll[29,268+38])
                            Texp_ident "lexbuf/511"
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[37,591+0]..src/lexer.mll[41,683+44])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[37,591+4]..src/lexer.mll[37,591+17])
          Tpat_var "int_of_string/512"
        expression (src/lexer.mll[37,591+18]..src/lexer.mll[41,683+44]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[37,591+19]..src/lexer.mll[37,591+22])
                extra
                  Tpat_extra_constraint
                  core_type (src/lexer.mll[37,591+25]..src/lexer.mll[37,591+40])
                    Ttyp_constr "Stdlib!.Lexing.position"
                    []
                Tpat_alias "pos/513"
                pattern (src/lexer.mll[37,591+19]..src/lexer.mll[37,591+22])
                  Tpat_any
              expression (src/lexer.mll[37,591+42]..src/lexer.mll[41,683+44]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[37,591+42]..src/lexer.mll[37,591+43])
                      Tpat_var "i/514"
                    expression (src/lexer.mll[38,637+2]..src/lexer.mll[41,683+44])
                      Texp_try
                      expression (src/lexer.mll[39,643+4]..src/lexer.mll[39,643+19])
                        Texp_apply
                        expression (src/lexer.mll[39,643+4]..src/lexer.mll[39,643+17])
                          Texp_ident "Stdlib!.int_of_string"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[39,643+18]..src/lexer.mll[39,643+19])
                              Texp_ident "i/514"
                        ]
                      [
                        <case>
                          pattern (src/lexer.mll[40,663+7]..src/lexer.mll[40,663+16])
                            Tpat_construct "Failure"
                            [
                              pattern (src/lexer.mll[40,663+15]..src/lexer.mll[40,663+16])
                                Tpat_any
                            ]
                            None
                          expression (src/lexer.mll[41,683+4]..src/lexer.mll[41,683+44])
                            Texp_apply
                            expression (src/lexer.mll[41,683+4]..src/lexer.mll[41,683+10])
                              Texp_ident "error1/467"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[41,683+11]..src/lexer.mll[41,683+14])
                                  Texp_ident "pos/513"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44])
                                  Texp_construct "CamlinternalFormatBasics.Format"
                                  [
                                    expression (src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                      [
                                        expression (src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost
                                          Texp_constant Const_string("unreasonably large integer.",(src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost,None)
                                        expression (src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost
                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                          []
                                      ]
                                    expression (src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost
                                      Texp_constant Const_string("unreasonably large integer.",(src/lexer.mll[41,683+15]..src/lexer.mll[41,683+44]) ghost,None)
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[49,963+0]..src/lexer.mll[53,1083+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[49,963+4]..src/lexer.mll[49,963+13])
          Tpat_var "savestart/538"
        expression (src/lexer.mll[49,963+14]..src/lexer.mll[53,1083+7]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[49,963+14]..src/lexer.mll[49,963+20])
                Tpat_var "lexbuf/540"
              expression (src/lexer.mll[49,963+21]..src/lexer.mll[53,1083+7]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[49,963+21]..src/lexer.mll[49,963+22])
                      Tpat_var "f/541"
                    expression (src/lexer.mll[50,988+2]..src/lexer.mll[53,1083+7])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[50,988+6]..src/lexer.mll[50,988+12])
                            Tpat_var "startp/542"
                          expression (src/lexer.mll[50,988+15]..src/lexer.mll[50,988+33])
                            Texp_field
                            expression (src/lexer.mll[50,988+15]..src/lexer.mll[50,988+21])
                              Texp_ident "lexbuf/540"
                            "lex_start_p"
                      ]
                      expression (src/lexer.mll[51,1025+2]..src/lexer.mll[53,1083+7])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[51,1025+6]..src/lexer.mll[51,1025+11])
                              Tpat_var "token/543"
                            expression (src/lexer.mll[51,1025+14]..src/lexer.mll[51,1025+22])
                              Texp_apply
                              expression (src/lexer.mll[51,1025+14]..src/lexer.mll[51,1025+15])
                                Texp_ident "f/541"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[51,1025+16]..src/lexer.mll[51,1025+22])
                                    Texp_ident "lexbuf/540"
                              ]
                        ]
                        expression (src/lexer.mll[52,1051+2]..src/lexer.mll[53,1083+7])
                          Texp_sequence
                          expression (src/lexer.mll[52,1051+2]..src/lexer.mll[52,1051+30])
                            Texp_setfield
                            expression (src/lexer.mll[52,1051+2]..src/lexer.mll[52,1051+8])
                              Texp_ident "lexbuf/540"
                            "lex_start_p"
                            expression (src/lexer.mll[52,1051+24]..src/lexer.mll[52,1051+30])
                              Texp_ident "startp/542"
                          expression (src/lexer.mll[53,1083+2]..src/lexer.mll[53,1083+7])
                            Texp_ident "token/543"
                ]
          ]
    ]
  structure_item (src/lexer.mll[60,1268+0]..src/lexer.mll[62,1347+29])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[60,1268+4]..src/lexer.mll[60,1268+13])
          Tpat_var "overwrite/544"
        expression (src/lexer.mll[60,1268+14]..src/lexer.mll[62,1347+29]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[60,1268+14]..src/lexer.mll[60,1268+21])
                Tpat_var "content/546"
              expression (src/lexer.mll[60,1268+22]..src/lexer.mll[62,1347+29]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[60,1268+22]..src/lexer.mll[60,1268+28])
                      Tpat_var "offset/547"
                    expression (src/lexer.mll[60,1268+29]..src/lexer.mll[62,1347+29]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[60,1268+29]..src/lexer.mll[60,1268+31])
                            Tpat_var "c1/548"
                          expression (src/lexer.mll[60,1268+32]..src/lexer.mll[62,1347+29]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[60,1268+32]..src/lexer.mll[60,1268+34])
                                  Tpat_var "c2/549"
                                expression (src/lexer.mll[61,1305+2]..src/lexer.mll[62,1347+29])
                                  Texp_sequence
                                  expression (src/lexer.mll[61,1305+2]..src/lexer.mll[61,1305+40])
                                    Texp_assert                                    expression (src/lexer.mll[61,1305+9]..src/lexer.mll[61,1305+40])
                                      Texp_apply
                                      expression (src/lexer.mll[61,1305+35]..src/lexer.mll[61,1305+36])
                                        Texp_ident "Stdlib!.="
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[61,1305+10]..src/lexer.mll[61,1305+34])
                                            Texp_apply
                                            expression (src/lexer.mll[61,1305+10]..src/lexer.mll[61,1305+19])
                                              Texp_ident "Stdlib!.Bytes.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[61,1305+20]..src/lexer.mll[61,1305+27])
                                                  Texp_ident "content/546"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[61,1305+28]..src/lexer.mll[61,1305+34])
                                                  Texp_ident "offset/547"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[61,1305+37]..src/lexer.mll[61,1305+39])
                                            Texp_ident "c1/548"
                                      ]
                                  expression (src/lexer.mll[62,1347+2]..src/lexer.mll[62,1347+29])
                                    Texp_apply
                                    expression (src/lexer.mll[62,1347+2]..src/lexer.mll[62,1347+11])
                                      Texp_ident "Stdlib!.Bytes.set"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[62,1347+12]..src/lexer.mll[62,1347+19])
                                          Texp_ident "content/546"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[62,1347+20]..src/lexer.mll[62,1347+26])
                                          Texp_ident "offset/547"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[62,1347+27]..src/lexer.mll[62,1347+29])
                                          Texp_ident "c2/549"
                                    ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[71,1651+0]..src/lexer.mll[97,2530+49])
    Tstr_type Rec
    [
      type_declaration monster/647 (src/lexer.mll[71,1651+0]..src/lexer.mll[94,2515+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/lexer.mll[74,1706+2]..src/lexer.mll[74,1706+19])
                Immutable
                pos/649                core_type (src/lexer.mll[74,1706+7]..src/lexer.mll[74,1706+18])
                  Ttyp_poly
                  core_type (src/lexer.mll[74,1706+7]..src/lexer.mll[74,1706+18])
                    Ttyp_constr "Dune__exe!.Positions.t"
                    []
              (src/lexer.mll[80,2013+2]..src/lexer.mll[80,2013+15])
                Immutable
                check/650                core_type (src/lexer.mll[80,2013+9]..src/lexer.mll[80,2013+14])
                  Ttyp_poly
                  core_type (src/lexer.mll[80,2013+9]..src/lexer.mll[80,2013+14])
                    Ttyp_constr "check/648"
                    []
              (src/lexer.mll[86,2303+2]..src/lexer.mll[86,2303+34])
                Immutable
                transform/651                core_type (src/lexer.mll[86,2303+13]..src/lexer.mll[86,2303+33])
                  Ttyp_poly
                  core_type (src/lexer.mll[86,2303+13]..src/lexer.mll[86,2303+33])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/lexer.mll[86,2303+13]..src/lexer.mll[86,2303+16])
                      Ttyp_constr "int/1!"
                      []
                    core_type (src/lexer.mll[86,2303+20]..src/lexer.mll[86,2303+33])
                      Ttyp_arrow
                      Nolabel
                      core_type (src/lexer.mll[86,2303+20]..src/lexer.mll[86,2303+25])
                        Ttyp_constr "bytes/3!"
                        []
                      core_type (src/lexer.mll[86,2303+29]..src/lexer.mll[86,2303+33])
                        Ttyp_constr "unit/6!"
                        []
              (src/lexer.mll[89,2388+2]..src/lexer.mll[89,2388+26])
                Immutable
                keyword/652                core_type (src/lexer.mll[89,2388+11]..src/lexer.mll[89,2388+25])
                  Ttyp_poly
                  core_type (src/lexer.mll[89,2388+11]..src/lexer.mll[89,2388+25])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/lexer.mll[89,2388+11]..src/lexer.mll[89,2388+18])
                        Ttyp_constr "MenhirSdk!.Keyword.keyword"
                        []
                    ]
              (src/lexer.mll[92,2492+2]..src/lexer.mll[92,2492+21])
                Immutable
                oid/653                core_type (src/lexer.mll[92,2492+7]..src/lexer.mll[92,2492+20])
                  Ttyp_poly
                  core_type (src/lexer.mll[92,2492+7]..src/lexer.mll[92,2492+20])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/lexer.mll[92,2492+7]..src/lexer.mll[92,2492+13])
                        Ttyp_constr "string/15!"
                        []
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration check/648 (src/lexer.mll[96,2518+0]..src/lexer.mll[97,2530+49])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/lexer.mll[97,2530+2]..src/lexer.mll[97,2530+49])
              Ttyp_arrow
              Nolabel
              core_type (src/lexer.mll[97,2530+2]..src/lexer.mll[97,2530+18])
                Ttyp_constr "Dune__exe!.Settings.dollars"
                []
              core_type (src/lexer.mll[97,2530+22]..src/lexer.mll[97,2530+49])
                Ttyp_arrow
                Nolabel
                core_type (src/lexer.mll[97,2530+22]..src/lexer.mll[97,2530+41])
                  Ttyp_constr "array/8!"
                  [
                    core_type (src/lexer.mll[97,2530+22]..src/lexer.mll[97,2530+35])
                      Ttyp_constr "option/10!"
                      [
                        core_type (src/lexer.mll[97,2530+22]..src/lexer.mll[97,2530+28])
                          Ttyp_constr "string/15!"
                          []
                      ]
                  ]
                core_type (src/lexer.mll[97,2530+45]..src/lexer.mll[97,2530+49])
                  Ttyp_constr "unit/6!"
                  []
    ]
  structure_item (src/lexer.mll[101,2598+0]..src/lexer.mll[102,2617+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[101,2598+4]..src/lexer.mll[101,2598+8])
          extra
            Tpat_extra_constraint
            core_type (src/lexer.mll[101,2598+11]..src/lexer.mll[101,2598+16])
              Ttyp_constr "check/648"
              []
          Tpat_alias "none/815"
          pattern (src/lexer.mll[101,2598+4]..src/lexer.mll[101,2598+8])
            Tpat_any
        expression (src/lexer.mll[102,2617+2]..src/lexer.mll[102,2617+15])
          extra
            Texp_constraint
            core_type (src/lexer.mll[101,2598+11]..src/lexer.mll[101,2598+16])
              Ttyp_constr "check/648"
              []
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[102,2617+6]..src/lexer.mll[102,2617+7])
                Tpat_any
              expression (src/lexer.mll[102,2617+8]..src/lexer.mll[102,2617+15]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[102,2617+8]..src/lexer.mll[102,2617+9])
                      Tpat_any
                    expression (src/lexer.mll[102,2617+13]..src/lexer.mll[102,2617+15])
                      Texp_construct "()"
                      []
                ]
          ]
    ]
  structure_item (src/lexer.mll[108,2749+0]..src/lexer.mll[123,3153+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[108,2749+4]..src/lexer.mll[108,2749+15])
          Tpat_var "syntaxerror/819"
        expression (src/lexer.mll[108,2749+16]..src/lexer.mll[123,3153+41]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[108,2749+16]..src/lexer.mll[108,2749+19])
                Tpat_var "pos/821"
              expression (src/lexer.mll[109,2781+2]..src/lexer.mll[123,3153+41])
                extra
                  Texp_constraint
                  core_type (src/lexer.mll[108,2749+22]..src/lexer.mll[108,2749+29])
                    Ttyp_constr "monster/647"
                    []
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[109,2781+6]..src/lexer.mll[109,2781+11])
                      Tpat_var "check/822"
                    expression (src/lexer.mll[110,2795+4]..src/lexer.mll[110,2795+8])
                      Texp_ident "none/815"
                  <def>
                    pattern (src/lexer.mll[111,2804+6]..src/lexer.mll[111,2804+15])
                      Tpat_var "transform/823"
                    expression (src/lexer.mll[111,2804+16]..src/lexer.mll[117,3024+65]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[111,2804+16]..src/lexer.mll[111,2804+20])
                            Tpat_var "ofs1/826"
                          expression (src/lexer.mll[111,2804+21]..src/lexer.mll[117,3024+65]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[111,2804+21]..src/lexer.mll[111,2804+28])
                                  Tpat_var "content/827"
                                expression (src/lexer.mll[114,2913+4]..src/lexer.mll[117,3024+65])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[114,2913+8]..src/lexer.mll[114,2913+11])
                                        Tpat_var "pos/828"
                                      expression (src/lexer.mll[114,2913+14]..src/lexer.mll[114,2913+35])
                                        Texp_apply
                                        expression (src/lexer.mll[114,2913+14]..src/lexer.mll[114,2913+31])
                                          Texp_ident "Dune__exe!.Positions.start_of_position"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[114,2913+32]..src/lexer.mll[114,2913+35])
                                              Texp_ident "pos/821"
                                        ]
                                  ]
                                  expression (src/lexer.mll[115,2952+4]..src/lexer.mll[117,3024+65])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/lexer.mll[115,2952+8]..src/lexer.mll[115,2952+11])
                                          Tpat_var "ofs/829"
                                        expression (src/lexer.mll[115,2952+14]..src/lexer.mll[115,2952+33])
                                          Texp_apply
                                          expression (src/lexer.mll[115,2952+27]..src/lexer.mll[115,2952+28])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[115,2952+14]..src/lexer.mll[115,2952+26])
                                                Texp_field
                                                expression (src/lexer.mll[115,2952+14]..src/lexer.mll[115,2952+17])
                                                  Texp_ident "pos/828"
                                                "pos_cnum"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[115,2952+29]..src/lexer.mll[115,2952+33])
                                                Texp_ident "ofs1/826"
                                          ]
                                    ]
                                    expression (src/lexer.mll[116,2989+4]..src/lexer.mll[117,3024+65])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/lexer.mll[116,2989+8]..src/lexer.mll[116,2989+14])
                                            Tpat_var "source/830"
                                          expression (src/lexer.mll[116,2989+17]..src/lexer.mll[116,2989+31])
                                            Texp_constant Const_string("(raise _eRR)",(src/lexer.mll[116,2989+18]..src/lexer.mll[116,2989+30]),None)
                                      ]
                                      expression (src/lexer.mll[117,3024+4]..src/lexer.mll[117,3024+65])
                                        Texp_apply
                                        expression (src/lexer.mll[117,3024+4]..src/lexer.mll[117,3024+21])
                                          Texp_ident "Stdlib!.Bytes.blit_string"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[117,3024+22]..src/lexer.mll[117,3024+28])
                                              Texp_ident "source/830"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[117,3024+29]..src/lexer.mll[117,3024+30])
                                              Texp_constant Const_int 0
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[117,3024+31]..src/lexer.mll[117,3024+38])
                                              Texp_ident "content/827"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[117,3024+39]..src/lexer.mll[117,3024+42])
                                              Texp_ident "ofs/829"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[117,3024+43]..src/lexer.mll[117,3024+65])
                                              Texp_apply
                                              expression (src/lexer.mll[117,3024+44]..src/lexer.mll[117,3024+57])
                                                Texp_ident "Stdlib!.String.length"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[117,3024+58]..src/lexer.mll[117,3024+64])
                                                    Texp_ident "source/830"
                                              ]
                                        ]
                            ]
                      ]
                  <def>
                    pattern (src/lexer.mll[118,3090+6]..src/lexer.mll[118,3090+13])
                      Tpat_var "keyword/824"
                    expression (src/lexer.mll[119,3106+4]..src/lexer.mll[119,3106+20])
                      Texp_construct "Some"
                      [
                        expression (src/lexer.mll[119,3106+9]..src/lexer.mll[119,3106+20])
                          Texp_construct "SyntaxError"
                          []
                      ]
                  <def>
                    pattern (src/lexer.mll[120,3127+6]..src/lexer.mll[120,3127+9])
                      Tpat_var "oid/825"
                    expression (src/lexer.mll[121,3139+4]..src/lexer.mll[121,3139+8])
                      Texp_construct "None"
                      []
                ]
                expression (src/lexer.mll[123,3153+2]..src/lexer.mll[123,3153+41])
                  Texp_record
                    fields =
                      [
                        "pos"
                          expression (src/lexer.mll[123,3153+4]..src/lexer.mll[123,3153+7])
                            Texp_ident "pos/821"
                        "check"
                          expression (src/lexer.mll[123,3153+9]..src/lexer.mll[123,3153+14])
                            Texp_ident "check/822"
                        "transform"
                          expression (src/lexer.mll[123,3153+16]..src/lexer.mll[123,3153+25])
                            Texp_ident "transform/823"
                        "keyword"
                          expression (src/lexer.mll[123,3153+27]..src/lexer.mll[123,3153+34])
                            Texp_ident "keyword/824"
                        "oid"
                          expression (src/lexer.mll[123,3153+36]..src/lexer.mll[123,3153+39])
                            Texp_ident "oid/825"
                      ]
                    representation =
                      Record_regular
                    extended_expression =
                      None
          ]
    ]
  structure_item (src/lexer.mll[132,3571+0]..src/lexer.mll[145,4179+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[132,3571+4]..src/lexer.mll[132,3571+16])
          Tpat_var "check_dollar/900"
        expression (src/lexer.mll[132,3571+17]..src/lexer.mll[145,4179+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[132,3571+17]..src/lexer.mll[132,3571+20])
                Tpat_var "pos/902"
              expression (src/lexer.mll[132,3571+21]..src/lexer.mll[145,4179+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[132,3571+21]..src/lexer.mll[132,3571+22])
                      Tpat_var "i/903"
                    expression (src/lexer.mll[132,3571+33]..src/lexer.mll[145,4179+8])
                      extra
                        Texp_constraint
                        core_type (src/lexer.mll[132,3571+25]..src/lexer.mll[132,3571+30])
                          Ttyp_constr "check/648"
                          []
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[132,3571+37]..src/lexer.mll[132,3571+44])
                            Tpat_var "dollars/904"
                          expression (src/lexer.mll[132,3571+45]..src/lexer.mll[145,4179+8]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[132,3571+45]..src/lexer.mll[132,3571+54])
                                  Tpat_var "producers/905"
                                expression (src/lexer.mll[134,3669+2]..src/lexer.mll[145,4179+8])
                                  Texp_sequence
                                  expression (src/lexer.mll[134,3669+2]..src/lexer.mll[135,3730+61])
                                    Texp_ifthenelse
                                    expression (src/lexer.mll[134,3669+5]..src/lexer.mll[134,3669+55])
                                      Texp_apply
                                      expression (src/lexer.mll[134,3669+5]..src/lexer.mll[134,3669+8])
                                        Texp_ident "Stdlib!.not"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[134,3669+9]..src/lexer.mll[134,3669+55])
                                            Texp_apply
                                            expression (src/lexer.mll[134,3669+21]..src/lexer.mll[134,3669+23])
                                              Texp_ident "Stdlib!.&&"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[134,3669+10]..src/lexer.mll[134,3669+20])
                                                  Texp_apply
                                                  expression (src/lexer.mll[134,3669+12]..src/lexer.mll[134,3669+14])
                                                    Texp_ident "Stdlib!.<="
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[134,3669+10]..src/lexer.mll[134,3669+11])
                                                        Texp_constant Const_int 0
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[134,3669+15]..src/lexer.mll[134,3669+20])
                                                        Texp_apply
                                                        expression (src/lexer.mll[134,3669+17]..src/lexer.mll[134,3669+18])
                                                          Texp_ident "Stdlib!.-"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[134,3669+15]..src/lexer.mll[134,3669+16])
                                                              Texp_ident "i/903"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[134,3669+19]..src/lexer.mll[134,3669+20])
                                                              Texp_constant Const_int 1
                                                        ]
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[134,3669+24]..src/lexer.mll[134,3669+54])
                                                  Texp_apply
                                                  expression (src/lexer.mll[134,3669+30]..src/lexer.mll[134,3669+31])
                                                    Texp_ident "Stdlib!.<"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[134,3669+24]..src/lexer.mll[134,3669+29])
                                                        Texp_apply
                                                        expression (src/lexer.mll[134,3669+26]..src/lexer.mll[134,3669+27])
                                                          Texp_ident "Stdlib!.-"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[134,3669+24]..src/lexer.mll[134,3669+25])
                                                              Texp_ident "i/903"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[134,3669+28]..src/lexer.mll[134,3669+29])
                                                              Texp_constant Const_int 1
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[134,3669+32]..src/lexer.mll[134,3669+54])
                                                        Texp_apply
                                                        expression (src/lexer.mll[134,3669+32]..src/lexer.mll[134,3669+44])
                                                          Texp_ident "Stdlib!.Array.length"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[134,3669+45]..src/lexer.mll[134,3669+54])
                                                              Texp_ident "producers/905"
                                                        ]
                                                  ]
                                            ]
                                      ]
                                    expression (src/lexer.mll[135,3730+4]..src/lexer.mll[135,3730+61])
                                      Texp_apply
                                      expression (src/lexer.mll[135,3730+4]..src/lexer.mll[135,3730+15])
                                        Texp_ident "Dune__exe!.Error.error"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[135,3730+16]..src/lexer.mll[135,3730+21])
                                            Texp_construct "::"
                                            [
                                              expression (src/lexer.mll[135,3730+17]..src/lexer.mll[135,3730+20])
                                                Texp_ident "pos/902"
                                              expression (src/lexer.mll[135,3730+20]..src/lexer.mll[135,3730+21]) ghost
                                                Texp_construct "[]"
                                                []
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59])
                                            Texp_construct "CamlinternalFormatBasics.Format"
                                            [
                                              expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                [
                                                  expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                    Texp_constant Const_char 24
                                                  expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                    [
                                                      expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                        []
                                                      expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                        []
                                                      expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                        []
                                                      expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                            Texp_constant Const_string(" refers to a nonexistent symbol.",(src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost,None)
                                                          expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                    ]
                                                ]
                                              expression (src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost
                                                Texp_constant Const_string("$%d refers to a nonexistent symbol.",(src/lexer.mll[135,3730+22]..src/lexer.mll[135,3730+59]) ghost,None)
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[135,3730+60]..src/lexer.mll[135,3730+61])
                                            Texp_ident "i/903"
                                      ]
                                    None
                                  expression (src/lexer.mll[137,3850+2]..src/lexer.mll[145,4179+8])
                                    Texp_sequence
                                    expression (src/lexer.mll[137,3850+2]..src/lexer.mll[139,3965+3])
                                      Texp_apply
                                      expression (src/lexer.mll[137,3850+23]..src/lexer.mll[139,3965+3])
                                        Texp_apply
                                        expression (src/lexer.mll[137,3850+23]..src/lexer.mll[137,3850+34])
                                          Texp_ident "Dune__exe!.Option.iter"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[137,3850+35]..src/lexer.mll[139,3965+3])
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/lexer.mll[137,3850+40]..src/lexer.mll[137,3850+41])
                                                    Tpat_var "x/965"
                                                  expression (src/lexer.mll[138,3895+4]..src/lexer.mll[138,3895+69])
                                                    Texp_apply
                                                    expression (src/lexer.mll[138,3895+4]..src/lexer.mll[138,3895+15])
                                                      Texp_ident "Dune__exe!.Error.error"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[138,3895+16]..src/lexer.mll[138,3895+21])
                                                          Texp_construct "::"
                                                          [
                                                            expression (src/lexer.mll[138,3895+17]..src/lexer.mll[138,3895+20])
                                                              Texp_ident "pos/902"
                                                            expression (src/lexer.mll[138,3895+20]..src/lexer.mll[138,3895+21]) ghost
                                                              Texp_construct "[]"
                                                              []
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65])
                                                          Texp_construct "CamlinternalFormatBasics.Format"
                                                          [
                                                            expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                              [
                                                                expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                  Texp_constant Const_string("please do not say: $",(src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost,None)
                                                                expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Int"
                                                                  [
                                                                    expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                      []
                                                                    expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                      []
                                                                    expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                      [
                                                                        expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                          Texp_constant Const_string(". Instead, say: ",(src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost,None)
                                                                        expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                                          [
                                                                            expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                              []
                                                                            expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                              [
                                                                                expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                                  Texp_constant Const_char 2e
                                                                                expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                  []
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                            expression (src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost
                                                              Texp_constant Const_string("please do not say: $%d. Instead, say: %s.",(src/lexer.mll[138,3895+22]..src/lexer.mll[138,3895+65]) ghost,None)
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[138,3895+66]..src/lexer.mll[138,3895+67])
                                                          Texp_ident "i/903"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[138,3895+68]..src/lexer.mll[138,3895+69])
                                                          Texp_ident "x/965"
                                                    ]
                                              ]
                                        ]
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[137,3850+2]..src/lexer.mll[137,3850+19])
                                            Texp_apply
                                            expression (src/lexer.mll[137,3850+2]..src/lexer.mll[137,3850+19]) ghost
                                              Texp_ident "Stdlib!.Array.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[137,3850+2]..src/lexer.mll[137,3850+11])
                                                  Texp_ident "producers/905"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[137,3850+13]..src/lexer.mll[137,3850+18])
                                                  Texp_apply
                                                  expression (src/lexer.mll[137,3850+15]..src/lexer.mll[137,3850+16])
                                                    Texp_ident "Stdlib!.-"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[137,3850+13]..src/lexer.mll[137,3850+14])
                                                        Texp_ident "i/903"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[137,3850+17]..src/lexer.mll[137,3850+18])
                                                        Texp_constant Const_int 1
                                                  ]
                                            ]
                                      ]
                                    expression (src/lexer.mll[141,4016+2]..src/lexer.mll[145,4179+8])
                                      Texp_match
                                      expression (src/lexer.mll[141,4016+8]..src/lexer.mll[141,4016+15])
                                        Texp_ident "dollars/904"
                                      [
                                        <case>
                                          pattern (src/lexer.mll[142,4037+4]..src/lexer.mll[142,4037+30])
                                            Tpat_value
                                            pattern (src/lexer.mll[142,4037+4]..src/lexer.mll[142,4037+30])
                                              Tpat_construct "Settings.DollarsDisallowed"
                                              []
                                              None
                                          expression (src/lexer.mll[143,4071+6]..src/lexer.mll[143,4071+76])
                                            Texp_apply
                                            expression (src/lexer.mll[143,4071+6]..src/lexer.mll[143,4071+17])
                                              Texp_ident "Dune__exe!.Error.error"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[143,4071+18]..src/lexer.mll[143,4071+23])
                                                  Texp_construct "::"
                                                  [
                                                    expression (src/lexer.mll[143,4071+19]..src/lexer.mll[143,4071+22])
                                                      Texp_ident "pos/902"
                                                    expression (src/lexer.mll[143,4071+22]..src/lexer.mll[143,4071+23]) ghost
                                                      Texp_construct "[]"
                                                      []
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74])
                                                  Texp_construct "CamlinternalFormatBasics.Format"
                                                  [
                                                    expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                      [
                                                        expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                          Texp_constant Const_string("please do not use $",(src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost,None)
                                                        expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.Int"
                                                          [
                                                            expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.Int_d"
                                                              []
                                                            expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                              []
                                                            expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.No_precision"
                                                              []
                                                            expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                              [
                                                                expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                                  Texp_constant Const_string(". Instead, name this value.",(src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost,None)
                                                                expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                  []
                                                              ]
                                                          ]
                                                      ]
                                                    expression (src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost
                                                      Texp_constant Const_string("please do not use $%d. Instead, name this value.",(src/lexer.mll[143,4071+24]..src/lexer.mll[143,4071+74]) ghost,None)
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[143,4071+75]..src/lexer.mll[143,4071+76])
                                                  Texp_ident "i/903"
                                            ]
                                        <case>
                                          pattern (src/lexer.mll[144,4148+4]..src/lexer.mll[144,4148+27])
                                            Tpat_value
                                            pattern (src/lexer.mll[144,4148+4]..src/lexer.mll[144,4148+27])
                                              Tpat_construct "Settings.DollarsAllowed"
                                              []
                                              None
                                          expression (src/lexer.mll[145,4179+6]..src/lexer.mll[145,4179+8])
                                            Texp_construct "()"
                                            []
                                      ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[150,4302+0]..src/lexer.mll[152,4416+60])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[150,4302+4]..src/lexer.mll[150,4302+18])
          Tpat_var "check_producer/966"
        expression (src/lexer.mll[150,4302+19]..src/lexer.mll[152,4416+60]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[150,4302+19]..src/lexer.mll[150,4302+22])
                Tpat_var "pos/968"
              expression (src/lexer.mll[150,4302+23]..src/lexer.mll[152,4416+60]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[150,4302+23]..src/lexer.mll[150,4302+24])
                      Tpat_var "x/969"
                    expression (src/lexer.mll[150,4302+35]..src/lexer.mll[152,4416+60])
                      extra
                        Texp_constraint
                        core_type (src/lexer.mll[150,4302+27]..src/lexer.mll[150,4302+32])
                          Ttyp_constr "check/648"
                          []
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[150,4302+39]..src/lexer.mll[150,4302+40])
                            Tpat_any
                          expression (src/lexer.mll[150,4302+41]..src/lexer.mll[152,4416+60]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[150,4302+41]..src/lexer.mll[150,4302+50])
                                  Tpat_var "producers/970"
                                expression (src/lexer.mll[151,4356+2]..src/lexer.mll[152,4416+60])
                                  Texp_ifthenelse
                                  expression (src/lexer.mll[151,4356+5]..src/lexer.mll[151,4356+54])
                                    Texp_apply
                                    expression (src/lexer.mll[151,4356+5]..src/lexer.mll[151,4356+8])
                                      Texp_ident "Stdlib!.not"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[151,4356+9]..src/lexer.mll[151,4356+54])
                                          Texp_apply
                                          expression (src/lexer.mll[151,4356+10]..src/lexer.mll[151,4356+18])
                                            Texp_ident "Stdlib!.List.mem"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[151,4356+19]..src/lexer.mll[151,4356+27])
                                                Texp_construct "Some"
                                                [
                                                  expression (src/lexer.mll[151,4356+25]..src/lexer.mll[151,4356+26])
                                                    Texp_ident "x/969"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[151,4356+28]..src/lexer.mll[151,4356+53])
                                                Texp_apply
                                                expression (src/lexer.mll[151,4356+29]..src/lexer.mll[151,4356+42])
                                                  Texp_ident "Stdlib!.Array.to_list"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[151,4356+43]..src/lexer.mll[151,4356+52])
                                                      Texp_ident "producers/970"
                                                ]
                                          ]
                                    ]
                                  expression (src/lexer.mll[152,4416+4]..src/lexer.mll[152,4416+60])
                                    Texp_apply
                                    expression (src/lexer.mll[152,4416+4]..src/lexer.mll[152,4416+15])
                                      Texp_ident "Dune__exe!.Error.error"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[152,4416+16]..src/lexer.mll[152,4416+21])
                                          Texp_construct "::"
                                          [
                                            expression (src/lexer.mll[152,4416+17]..src/lexer.mll[152,4416+20])
                                              Texp_ident "pos/968"
                                            expression (src/lexer.mll[152,4416+20]..src/lexer.mll[152,4416+21]) ghost
                                              Texp_construct "[]"
                                              []
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58])
                                          Texp_construct "CamlinternalFormatBasics.Format"
                                          [
                                            expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String"
                                              [
                                                expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                  []
                                                expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                                      Texp_constant Const_string(" refers to a nonexistent symbol.",(src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost,None)
                                                    expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                              ]
                                            expression (src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost
                                              Texp_constant Const_string("%s refers to a nonexistent symbol.",(src/lexer.mll[152,4416+22]..src/lexer.mll[152,4416+58]) ghost,None)
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[152,4416+59]..src/lexer.mll[152,4416+60])
                                          Texp_ident "x/969"
                                    ]
                                  None
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[158,4583+0]..src/lexer.mll[170,4941+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[158,4583+4]..src/lexer.mll[158,4583+10])
          Tpat_var "dollar/1038"
        expression (src/lexer.mll[158,4583+11]..src/lexer.mll[170,4941+41]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[158,4583+11]..src/lexer.mll[158,4583+14])
                Tpat_var "pos/1040"
              expression (src/lexer.mll[158,4583+15]..src/lexer.mll[170,4941+41]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[158,4583+15]..src/lexer.mll[158,4583+16])
                      Tpat_var "i/1041"
                    expression (src/lexer.mll[159,4612+2]..src/lexer.mll[170,4941+41])
                      extra
                        Texp_constraint
                        core_type (src/lexer.mll[158,4583+19]..src/lexer.mll[158,4583+26])
                          Ttyp_constr "monster/647"
                          []
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[159,4612+6]..src/lexer.mll[159,4612+11])
                            extra
                              Tpat_extra_constraint
                              core_type (src/lexer.mll[159,4612+14]..src/lexer.mll[159,4612+19])
                                Ttyp_constr "check/648"
                                []
                            Tpat_alias "check/1042"
                            pattern (src/lexer.mll[159,4612+6]..src/lexer.mll[159,4612+11])
                              Tpat_any
                          expression (src/lexer.mll[159,4612+22]..src/lexer.mll[159,4612+40])
                            extra
                              Texp_constraint
                              core_type (src/lexer.mll[159,4612+14]..src/lexer.mll[159,4612+19])
                                Ttyp_constr "check/648"
                                []
                            Texp_apply
                            expression (src/lexer.mll[159,4612+22]..src/lexer.mll[159,4612+34])
                              Texp_ident "check_dollar/900"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[159,4612+35]..src/lexer.mll[159,4612+38])
                                  Texp_ident "pos/1040"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[159,4612+39]..src/lexer.mll[159,4612+40])
                                  Texp_ident "i/1041"
                            ]
                        <def>
                          pattern (src/lexer.mll[160,4653+6]..src/lexer.mll[160,4653+15])
                            Tpat_var "transform/1043"
                          expression (src/lexer.mll[160,4653+16]..src/lexer.mll[164,4831+33]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[160,4653+16]..src/lexer.mll[160,4653+20])
                                  Tpat_var "ofs1/1046"
                                expression (src/lexer.mll[160,4653+21]..src/lexer.mll[164,4831+33]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/lexer.mll[160,4653+21]..src/lexer.mll[160,4653+28])
                                        Tpat_var "content/1047"
                                      expression (src/lexer.mll[162,4755+4]..src/lexer.mll[164,4831+33])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[162,4755+8]..src/lexer.mll[162,4755+11])
                                              Tpat_var "pos/1048"
                                            expression (src/lexer.mll[162,4755+14]..src/lexer.mll[162,4755+35])
                                              Texp_apply
                                              expression (src/lexer.mll[162,4755+14]..src/lexer.mll[162,4755+31])
                                                Texp_ident "Dune__exe!.Positions.start_of_position"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[162,4755+32]..src/lexer.mll[162,4755+35])
                                                    Texp_ident "pos/1040"
                                              ]
                                        ]
                                        expression (src/lexer.mll[163,4794+4]..src/lexer.mll[164,4831+33])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[163,4794+8]..src/lexer.mll[163,4794+11])
                                                Tpat_var "ofs/1049"
                                              expression (src/lexer.mll[163,4794+14]..src/lexer.mll[163,4794+33])
                                                Texp_apply
                                                expression (src/lexer.mll[163,4794+27]..src/lexer.mll[163,4794+28])
                                                  Texp_ident "Stdlib!.-"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[163,4794+14]..src/lexer.mll[163,4794+26])
                                                      Texp_field
                                                      expression (src/lexer.mll[163,4794+14]..src/lexer.mll[163,4794+17])
                                                        Texp_ident "pos/1048"
                                                      "pos_cnum"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[163,4794+29]..src/lexer.mll[163,4794+33])
                                                      Texp_ident "ofs1/1046"
                                                ]
                                          ]
                                          expression (src/lexer.mll[164,4831+4]..src/lexer.mll[164,4831+33])
                                            Texp_apply
                                            expression (src/lexer.mll[164,4831+4]..src/lexer.mll[164,4831+13])
                                              Texp_ident "overwrite/544"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[164,4831+14]..src/lexer.mll[164,4831+21])
                                                  Texp_ident "content/1047"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[164,4831+22]..src/lexer.mll[164,4831+25])
                                                  Texp_ident "ofs/1049"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[164,4831+26]..src/lexer.mll[164,4831+29])
                                                  Texp_constant Const_char 24
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[164,4831+30]..src/lexer.mll[164,4831+33])
                                                  Texp_constant Const_char 5f
                                            ]
                                  ]
                            ]
                        <def>
                          pattern (src/lexer.mll[165,4865+6]..src/lexer.mll[165,4865+13])
                            Tpat_var "keyword/1044"
                          expression (src/lexer.mll[166,4881+4]..src/lexer.mll[166,4881+8])
                            Texp_construct "None"
                            []
                        <def>
                          pattern (src/lexer.mll[167,4890+6]..src/lexer.mll[167,4890+9])
                            Tpat_var "oid/1045"
                          expression (src/lexer.mll[168,4902+4]..src/lexer.mll[168,4902+33])
                            Texp_construct "Some"
                            [
                              expression (src/lexer.mll[168,4902+9]..src/lexer.mll[168,4902+33])
                                Texp_apply
                                expression (src/lexer.mll[168,4902+10]..src/lexer.mll[168,4902+24])
                                  Texp_ident "Stdlib!.Printf.sprintf"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30])
                                      Texp_construct "CamlinternalFormatBasics.Format"
                                      [
                                        expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                          Texp_construct "CamlinternalFormatBasics.Char_literal"
                                          [
                                            expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                              Texp_constant Const_char 5f
                                            expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                              Texp_construct "CamlinternalFormatBasics.Int"
                                              [
                                                expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.Int_d"
                                                  []
                                                expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                  []
                                                expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.No_precision"
                                                  []
                                                expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                  []
                                              ]
                                          ]
                                        expression (src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost
                                          Texp_constant Const_string("_%d",(src/lexer.mll[168,4902+25]..src/lexer.mll[168,4902+30]) ghost,None)
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[168,4902+31]..src/lexer.mll[168,4902+32])
                                      Texp_ident "i/1041"
                                ]
                            ]
                      ]
                      expression (src/lexer.mll[170,4941+2]..src/lexer.mll[170,4941+41])
                        Texp_record
                          fields =
                            [
                              "pos"
                                expression (src/lexer.mll[170,4941+4]..src/lexer.mll[170,4941+7])
                                  Texp_ident "pos/1040"
                              "check"
                                expression (src/lexer.mll[170,4941+9]..src/lexer.mll[170,4941+14])
                                  Texp_ident "check/1042"
                              "transform"
                                expression (src/lexer.mll[170,4941+16]..src/lexer.mll[170,4941+25])
                                  Texp_ident "transform/1043"
                              "keyword"
                                expression (src/lexer.mll[170,4941+27]..src/lexer.mll[170,4941+34])
                                  Texp_ident "keyword/1044"
                              "oid"
                                expression (src/lexer.mll[170,4941+36]..src/lexer.mll[170,4941+39])
                                  Texp_ident "oid/1045"
                            ]
                          representation =
                            Record_regular
                          extended_expression =
                            None
                ]
          ]
    ]
  structure_item (src/lexer.mll[176,5127+0]..src/lexer.mll[246,7158+41])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[176,5127+4]..src/lexer.mll[176,5127+12])
          Tpat_var "position/1063"
        expression (src/lexer.mll[176,5127+13]..src/lexer.mll[246,7158+41]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[176,5127+13]..src/lexer.mll[176,5127+16])
                Tpat_var "pos/1064"
              expression (src/lexer.mll[177,5144+2]..src/lexer.mll[246,7158+41]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[177,5144+3]..src/lexer.mll[177,5144+8])
                      extra
                        Tpat_extra_constraint
                        core_type (src/lexer.mll[177,5144+11]..src/lexer.mll[177,5144+17])
                          Ttyp_constr "string/15!"
                          []
                      Tpat_alias "where/1065"
                      pattern (src/lexer.mll[177,5144+3]..src/lexer.mll[177,5144+8])
                        Tpat_any
                    expression (src/lexer.mll[178,5163+2]..src/lexer.mll[246,7158+41]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[178,5163+3]..src/lexer.mll[178,5163+9])
                            extra
                              Tpat_extra_constraint
                              core_type (src/lexer.mll[178,5163+12]..src/lexer.mll[178,5163+18])
                                Ttyp_constr "string/15!"
                                []
                            Tpat_alias "flavor/1066"
                            pattern (src/lexer.mll[178,5163+3]..src/lexer.mll[178,5163+9])
                              Tpat_any
                          expression (src/lexer.mll[179,5183+2]..src/lexer.mll[246,7158+41]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[179,5183+3]..src/lexer.mll[179,5183+4])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/lexer.mll[179,5183+7]..src/lexer.mll[179,5183+20])
                                      Ttyp_constr "option/10!"
                                      [
                                        core_type (src/lexer.mll[179,5183+7]..src/lexer.mll[179,5183+13])
                                          Ttyp_constr "string/15!"
                                          []
                                      ]
                                  Tpat_alias "i/1067"
                                  pattern (src/lexer.mll[179,5183+3]..src/lexer.mll[179,5183+4])
                                    Tpat_any
                                expression (src/lexer.mll[179,5183+22]..src/lexer.mll[246,7158+41]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/lexer.mll[179,5183+23]..src/lexer.mll[179,5183+24])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/lexer.mll[179,5183+27]..src/lexer.mll[179,5183+40])
                                            Ttyp_constr "option/10!"
                                            [
                                              core_type (src/lexer.mll[179,5183+27]..src/lexer.mll[179,5183+33])
                                                Ttyp_constr "string/15!"
                                                []
                                            ]
                                        Tpat_alias "x/1068"
                                        pattern (src/lexer.mll[179,5183+23]..src/lexer.mll[179,5183+24])
                                          Tpat_any
                                      expression (src/lexer.mll[181,5227+2]..src/lexer.mll[246,7158+41])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[181,5227+6]..src/lexer.mll[181,5227+24])
                                              Tpat_var "check_no_parameter/1069"
                                            expression (src/lexer.mll[181,5227+25]..src/lexer.mll[183,5292+71]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/lexer.mll[181,5227+25]..src/lexer.mll[181,5227+27])
                                                    Tpat_construct "()"
                                                    []
                                                    None
                                                  expression (src/lexer.mll[182,5257+4]..src/lexer.mll[183,5292+71])
                                                    Texp_ifthenelse
                                                    expression (src/lexer.mll[182,5257+7]..src/lexer.mll[182,5257+29])
                                                      Texp_apply
                                                      expression (src/lexer.mll[182,5257+17]..src/lexer.mll[182,5257+19])
                                                        Texp_ident "Stdlib!.||"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[182,5257+7]..src/lexer.mll[182,5257+16])
                                                            Texp_apply
                                                            expression (src/lexer.mll[182,5257+9]..src/lexer.mll[182,5257+11])
                                                              Texp_ident "Stdlib!.<>"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[182,5257+7]..src/lexer.mll[182,5257+8])
                                                                  Texp_ident "i/1067"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[182,5257+12]..src/lexer.mll[182,5257+16])
                                                                  Texp_construct "None"
                                                                  []
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[182,5257+20]..src/lexer.mll[182,5257+29])
                                                            Texp_apply
                                                            expression (src/lexer.mll[182,5257+22]..src/lexer.mll[182,5257+24])
                                                              Texp_ident "Stdlib!.<>"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[182,5257+20]..src/lexer.mll[182,5257+21])
                                                                  Texp_ident "x/1068"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[182,5257+25]..src/lexer.mll[182,5257+29])
                                                                  Texp_construct "None"
                                                                  []
                                                            ]
                                                      ]
                                                    expression (src/lexer.mll[183,5292+6]..src/lexer.mll[183,5292+71])
                                                      Texp_apply
                                                      expression (src/lexer.mll[183,5292+6]..src/lexer.mll[183,5292+17])
                                                        Texp_ident "Dune__exe!.Error.error"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[183,5292+18]..src/lexer.mll[183,5292+23])
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/lexer.mll[183,5292+19]..src/lexer.mll[183,5292+22])
                                                                Texp_ident "pos/1064"
                                                              expression (src/lexer.mll[183,5292+22]..src/lexer.mll[183,5292+23]) ghost
                                                                Texp_construct "[]"
                                                                []
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                [
                                                                  expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                    Texp_constant Const_char 24
                                                                  expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                                        [
                                                                          expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                            []
                                                                          expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                                Texp_constant Const_string(" does not take a parameter.",(src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost,None)
                                                                              expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                []
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              expression (src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost
                                                                Texp_constant Const_string("$%s%s does not take a parameter.",(src/lexer.mll[183,5292+24]..src/lexer.mll[183,5292+58]) ghost,None)
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[183,5292+59]..src/lexer.mll[183,5292+64])
                                                            Texp_ident "where/1065"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[183,5292+65]..src/lexer.mll[183,5292+71])
                                                            Texp_ident "flavor/1066"
                                                      ]
                                                    None
                                              ]
                                        ]
                                        expression (src/lexer.mll[185,5369+2]..src/lexer.mll[246,7158+41])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[185,5369+6]..src/lexer.mll[185,5369+13])
                                                Tpat_var "ofslpar/1072"
                                              expression (src/lexer.mll[186,5442+4]..src/lexer.mll[188,5502+5])
                                                Texp_apply
                                                expression (src/lexer.mll[187,5476+24]..src/lexer.mll[187,5476+25])
                                                  Texp_ident "Stdlib!.+"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[186,5442+4]..src/lexer.mll[187,5476+23])
                                                      Texp_apply
                                                      expression (src/lexer.mll[186,5442+6]..src/lexer.mll[186,5442+7])
                                                        Texp_ident "Stdlib!.+"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[186,5442+4]..src/lexer.mll[186,5442+5])
                                                            Texp_constant Const_int 1
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[187,5476+4]..src/lexer.mll[187,5476+23])
                                                            Texp_apply
                                                            expression (src/lexer.mll[187,5476+4]..src/lexer.mll[187,5476+17])
                                                              Texp_ident "Stdlib!.String.length"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[187,5476+18]..src/lexer.mll[187,5476+23])
                                                                  Texp_ident "where/1065"
                                                            ]
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[188,5502+4]..src/lexer.mll[188,5502+5])
                                                      Texp_constant Const_int 3
                                                ]
                                          ]
                                          expression (src/lexer.mll[190,5549+2]..src/lexer.mll[246,7158+41])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/lexer.mll[190,5549+6]..src/lexer.mll[190,5549+11])
                                                  Tpat_var "where/1073"
                                                expression (src/lexer.mll[191,5563+4]..src/lexer.mll[197,5766+35])
                                                  Texp_match
                                                  expression (src/lexer.mll[191,5563+10]..src/lexer.mll[191,5563+15])
                                                    Texp_ident "where/1065"
                                                  [
                                                    <case>
                                                      pattern (src/lexer.mll[192,5584+6]..src/lexer.mll[193,5604+9])
                                                        Tpat_or
                                                        pattern (src/lexer.mll[192,5584+6]..src/lexer.mll[192,5584+19])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[192,5584+6]..src/lexer.mll[192,5584+19])
                                                            Tpat_constant Const_string("symbolstart",(src/lexer.mll[192,5584+7]..src/lexer.mll[192,5584+18]),None)
                                                        pattern (src/lexer.mll[193,5604+6]..src/lexer.mll[193,5604+9])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[193,5604+6]..src/lexer.mll[193,5604+9])
                                                            Tpat_constant Const_string("s",(src/lexer.mll[193,5604+7]..src/lexer.mll[193,5604+8]),None)
                                                      expression (src/lexer.mll[193,5604+23]..src/lexer.mll[193,5604+61])
                                                        Texp_sequence
                                                        expression (src/lexer.mll[193,5604+23]..src/lexer.mll[193,5604+43])
                                                          Texp_apply
                                                          expression (src/lexer.mll[193,5604+23]..src/lexer.mll[193,5604+41])
                                                            Texp_ident "check_no_parameter/1069"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[193,5604+41]..src/lexer.mll[193,5604+43])
                                                                Texp_construct "()"
                                                                []
                                                          ]
                                                        expression (src/lexer.mll[193,5604+45]..src/lexer.mll[193,5604+61])
                                                          Texp_construct "WhereSymbolStart"
                                                          []
                                                    <case>
                                                      pattern (src/lexer.mll[194,5666+6]..src/lexer.mll[194,5666+13])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[194,5666+6]..src/lexer.mll[194,5666+13])
                                                          Tpat_constant Const_string("start",(src/lexer.mll[194,5666+7]..src/lexer.mll[194,5666+12]),None)
                                                      expression (src/lexer.mll[194,5666+23]..src/lexer.mll[194,5666+33])
                                                        Texp_construct "WhereStart"
                                                        []
                                                    <case>
                                                      pattern (src/lexer.mll[195,5700+6]..src/lexer.mll[195,5700+11])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[195,5700+6]..src/lexer.mll[195,5700+11])
                                                          Tpat_constant Const_string("end",(src/lexer.mll[195,5700+7]..src/lexer.mll[195,5700+10]),None)
                                                      expression (src/lexer.mll[195,5700+23]..src/lexer.mll[195,5700+31])
                                                        Texp_construct "WhereEnd"
                                                        []
                                                    <case>
                                                      pattern (src/lexer.mll[196,5732+6]..src/lexer.mll[196,5732+8])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[196,5732+6]..src/lexer.mll[196,5732+8])
                                                          Tpat_constant Const_string("",(src/lexer.mll[196,5732+7]..src/lexer.mll[196,5732+7]),None)
                                                      expression (src/lexer.mll[196,5732+23]..src/lexer.mll[196,5732+33])
                                                        Texp_construct "WhereStart"
                                                        []
                                                    <case>
                                                      pattern (src/lexer.mll[197,5766+6]..src/lexer.mll[197,5766+7])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[197,5766+6]..src/lexer.mll[197,5766+7])
                                                          Tpat_any
                                                      expression (src/lexer.mll[197,5766+23]..src/lexer.mll[197,5766+35])
                                                        Texp_assert                                                        expression (src/lexer.mll[197,5766+30]..src/lexer.mll[197,5766+35])
                                                          Texp_construct "false"
                                                          []
                                                  ]
                                            ]
                                            expression (src/lexer.mll[199,5807+2]..src/lexer.mll[246,7158+41])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[199,5807+6]..src/lexer.mll[199,5807+12])
                                                    Tpat_var "flavor/1074"
                                                  expression (src/lexer.mll[200,5822+4]..src/lexer.mll[204,5938+29])
                                                    Texp_match
                                                    expression (src/lexer.mll[200,5822+10]..src/lexer.mll[200,5822+16])
                                                      Texp_ident "flavor/1066"
                                                    [
                                                      <case>
                                                        pattern (src/lexer.mll[201,5844+6]..src/lexer.mll[201,5844+11])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[201,5844+6]..src/lexer.mll[201,5844+11])
                                                            Tpat_constant Const_string("pos",(src/lexer.mll[201,5844+7]..src/lexer.mll[201,5844+10]),None)
                                                        expression (src/lexer.mll[201,5844+17]..src/lexer.mll[201,5844+31])
                                                          Texp_construct "FlavorPosition"
                                                          []
                                                      <case>
                                                        pattern (src/lexer.mll[202,5876+6]..src/lexer.mll[202,5876+11])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[202,5876+6]..src/lexer.mll[202,5876+11])
                                                            Tpat_constant Const_string("ofs",(src/lexer.mll[202,5876+7]..src/lexer.mll[202,5876+10]),None)
                                                        expression (src/lexer.mll[202,5876+17]..src/lexer.mll[202,5876+29])
                                                          Texp_construct "FlavorOffset"
                                                          []
                                                      <case>
                                                        pattern (src/lexer.mll[203,5906+6]..src/lexer.mll[203,5906+11])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[203,5906+6]..src/lexer.mll[203,5906+11])
                                                            Tpat_constant Const_string("loc",(src/lexer.mll[203,5906+7]..src/lexer.mll[203,5906+10]),None)
                                                        expression (src/lexer.mll[203,5906+17]..src/lexer.mll[203,5906+31])
                                                          Texp_construct "FlavorLocation"
                                                          []
                                                      <case>
                                                        pattern (src/lexer.mll[204,5938+6]..src/lexer.mll[204,5938+7])
                                                          Tpat_value
                                                          pattern (src/lexer.mll[204,5938+6]..src/lexer.mll[204,5938+7])
                                                            Tpat_any
                                                        expression (src/lexer.mll[204,5938+17]..src/lexer.mll[204,5938+29])
                                                          Texp_assert                                                          expression (src/lexer.mll[204,5938+24]..src/lexer.mll[204,5938+29])
                                                            Texp_construct "false"
                                                            []
                                                    ]
                                              ]
                                              expression (src/lexer.mll[206,5973+2]..src/lexer.mll[246,7158+41])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/lexer.mll[206,5973+6]..src/lexer.mll[206,5973+20])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/lexer.mll[206,5973+6]..src/lexer.mll[206,5973+13])
                                                          Tpat_var "subject/1075"
                                                        pattern (src/lexer.mll[206,5973+15]..src/lexer.mll[206,5973+20])
                                                          Tpat_var "check/1076"
                                                      ]
                                                    expression (src/lexer.mll[207,5996+4]..src/lexer.mll[223,6507+20])
                                                      Texp_match
                                                      expression (src/lexer.mll[207,5996+10]..src/lexer.mll[207,5996+14])
                                                        Texp_tuple
                                                        [
                                                          expression (src/lexer.mll[207,5996+10]..src/lexer.mll[207,5996+11])
                                                            Texp_ident "i/1067"
                                                          expression (src/lexer.mll[207,5996+13]..src/lexer.mll[207,5996+14])
                                                            Texp_ident "x/1068"
                                                        ]
                                                      [
                                                        <case>
                                                          pattern (src/lexer.mll[208,6016+6]..src/lexer.mll[208,6016+18])
                                                            Tpat_value
                                                            pattern (src/lexer.mll[208,6016+6]..src/lexer.mll[208,6016+18])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/lexer.mll[208,6016+6]..src/lexer.mll[208,6016+12])
                                                                  Tpat_construct "Some"
                                                                  [
                                                                    pattern (src/lexer.mll[208,6016+11]..src/lexer.mll[208,6016+12])
                                                                      Tpat_var "i/1077"
                                                                  ]
                                                                  None
                                                                pattern (src/lexer.mll[208,6016+14]..src/lexer.mll[208,6016+18])
                                                                  Tpat_construct "None"
                                                                  []
                                                                  None
                                                              ]
                                                          expression (src/lexer.mll[209,6038+8]..src/lexer.mll[215,6272+51])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/lexer.mll[209,6038+12]..src/lexer.mll[209,6038+14])
                                                                  Tpat_var "ii/1079"
                                                                expression (src/lexer.mll[209,6038+17]..src/lexer.mll[209,6038+56])
                                                                  Texp_apply
                                                                  expression (src/lexer.mll[209,6038+17]..src/lexer.mll[209,6038+30])
                                                                    Texp_ident "int_of_string/512"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/lexer.mll[209,6038+31]..src/lexer.mll[209,6038+54])
                                                                        Texp_apply
                                                                        expression (src/lexer.mll[209,6038+32]..src/lexer.mll[209,6038+49])
                                                                          Texp_ident "Dune__exe!.Positions.start_of_position"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/lexer.mll[209,6038+50]..src/lexer.mll[209,6038+53])
                                                                              Texp_ident "pos/1064"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/lexer.mll[209,6038+55]..src/lexer.mll[209,6038+56])
                                                                        Texp_ident "i/1077"
                                                                  ]
                                                            ]
                                                            expression (src/lexer.mll[210,6098+8]..src/lexer.mll[215,6272+51])
                                                              Texp_ifthenelse
                                                              expression (src/lexer.mll[210,6098+11]..src/lexer.mll[210,6098+37])
                                                                Texp_apply
                                                                expression (src/lexer.mll[210,6098+18]..src/lexer.mll[210,6098+20])
                                                                  Texp_ident "Stdlib!.&&"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[210,6098+11]..src/lexer.mll[210,6098+17])
                                                                      Texp_apply
                                                                      expression (src/lexer.mll[210,6098+14]..src/lexer.mll[210,6098+15])
                                                                        Texp_ident "Stdlib!.="
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[210,6098+11]..src/lexer.mll[210,6098+13])
                                                                            Texp_ident "ii/1079"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[210,6098+16]..src/lexer.mll[210,6098+17])
                                                                            Texp_constant Const_int 0
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[210,6098+21]..src/lexer.mll[210,6098+37])
                                                                      Texp_apply
                                                                      expression (src/lexer.mll[210,6098+27]..src/lexer.mll[210,6098+28])
                                                                        Texp_ident "Stdlib!.="
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[210,6098+21]..src/lexer.mll[210,6098+26])
                                                                            Texp_ident "where/1073"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[210,6098+29]..src/lexer.mll[210,6098+37])
                                                                            Texp_construct "WhereEnd"
                                                                            []
                                                                      ]
                                                                ]
                                                              expression (src/lexer.mll[212,6171+10]..src/lexer.mll[212,6171+22])
                                                                Texp_tuple
                                                                [
                                                                  expression (src/lexer.mll[212,6171+10]..src/lexer.mll[212,6171+16])
                                                                    Texp_construct "Before"
                                                                    []
                                                                  expression (src/lexer.mll[212,6171+18]..src/lexer.mll[212,6171+22])
                                                                    Texp_ident "none/815"
                                                                ]
                                                              Some
                                                                expression (src/lexer.mll[215,6272+10]..src/lexer.mll[215,6272+51])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/lexer.mll[215,6272+10]..src/lexer.mll[215,6272+30])
                                                                      Texp_construct "RightNamed"
                                                                      [
                                                                        expression (src/lexer.mll[215,6272+21]..src/lexer.mll[215,6272+30])
                                                                          Texp_apply
                                                                          expression (src/lexer.mll[215,6272+26]..src/lexer.mll[215,6272+27])
                                                                            Texp_ident "Stdlib!.^"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[215,6272+22]..src/lexer.mll[215,6272+25])
                                                                                Texp_constant Const_string("_",(src/lexer.mll[215,6272+23]..src/lexer.mll[215,6272+24]),None)
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[215,6272+28]..src/lexer.mll[215,6272+29])
                                                                                Texp_ident "i/1077"
                                                                          ]
                                                                      ]
                                                                    expression (src/lexer.mll[215,6272+32]..src/lexer.mll[215,6272+51])
                                                                      Texp_apply
                                                                      expression (src/lexer.mll[215,6272+32]..src/lexer.mll[215,6272+44])
                                                                        Texp_ident "check_dollar/900"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[215,6272+45]..src/lexer.mll[215,6272+48])
                                                                            Texp_ident "pos/1064"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[215,6272+49]..src/lexer.mll[215,6272+51])
                                                                            Texp_ident "ii/1079"
                                                                      ]
                                                                  ]
                                                        <case>
                                                          pattern (src/lexer.mll[216,6324+6]..src/lexer.mll[216,6324+18])
                                                            Tpat_value
                                                            pattern (src/lexer.mll[216,6324+6]..src/lexer.mll[216,6324+18])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/lexer.mll[216,6324+6]..src/lexer.mll[216,6324+10])
                                                                  Tpat_construct "None"
                                                                  []
                                                                  None
                                                                pattern (src/lexer.mll[216,6324+12]..src/lexer.mll[216,6324+18])
                                                                  Tpat_construct "Some"
                                                                  [
                                                                    pattern (src/lexer.mll[216,6324+17]..src/lexer.mll[216,6324+18])
                                                                      Tpat_var "x/1078"
                                                                  ]
                                                                  None
                                                              ]
                                                          expression (src/lexer.mll[218,6375+8]..src/lexer.mll[218,6375+42])
                                                            Texp_tuple
                                                            [
                                                              expression (src/lexer.mll[218,6375+8]..src/lexer.mll[218,6375+20])
                                                                Texp_construct "RightNamed"
                                                                [
                                                                  expression (src/lexer.mll[218,6375+19]..src/lexer.mll[218,6375+20])
                                                                    Texp_ident "x/1078"
                                                                ]
                                                              expression (src/lexer.mll[218,6375+22]..src/lexer.mll[218,6375+42])
                                                                Texp_apply
                                                                expression (src/lexer.mll[218,6375+22]..src/lexer.mll[218,6375+36])
                                                                  Texp_ident "check_producer/966"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[218,6375+37]..src/lexer.mll[218,6375+40])
                                                                      Texp_ident "pos/1064"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[218,6375+41]..src/lexer.mll[218,6375+42])
                                                                      Texp_ident "x/1078"
                                                                ]
                                                            ]
                                                        <case>
                                                          pattern (src/lexer.mll[219,6418+6]..src/lexer.mll[219,6418+16])
                                                            Tpat_value
                                                            pattern (src/lexer.mll[219,6418+6]..src/lexer.mll[219,6418+16])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/lexer.mll[219,6418+6]..src/lexer.mll[219,6418+10])
                                                                  Tpat_construct "None"
                                                                  []
                                                                  None
                                                                pattern (src/lexer.mll[219,6418+12]..src/lexer.mll[219,6418+16])
                                                                  Tpat_construct "None"
                                                                  []
                                                                  None
                                                              ]
                                                          expression (src/lexer.mll[221,6464+8]..src/lexer.mll[221,6464+18])
                                                            Texp_tuple
                                                            [
                                                              expression (src/lexer.mll[221,6464+8]..src/lexer.mll[221,6464+12])
                                                                Texp_construct "Left"
                                                                []
                                                              expression (src/lexer.mll[221,6464+14]..src/lexer.mll[221,6464+18])
                                                                Texp_ident "none/815"
                                                            ]
                                                        <case>
                                                          pattern (src/lexer.mll[222,6483+6]..src/lexer.mll[222,6483+20])
                                                            Tpat_value
                                                            pattern (src/lexer.mll[222,6483+6]..src/lexer.mll[222,6483+20])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/lexer.mll[222,6483+6]..src/lexer.mll[222,6483+12])
                                                                  Tpat_construct "Some"
                                                                  [
                                                                    pattern (src/lexer.mll[222,6483+11]..src/lexer.mll[222,6483+12])
                                                                      Tpat_any
                                                                  ]
                                                                  None
                                                                pattern (src/lexer.mll[222,6483+14]..src/lexer.mll[222,6483+20])
                                                                  Tpat_construct "Some"
                                                                  [
                                                                    pattern (src/lexer.mll[222,6483+19]..src/lexer.mll[222,6483+20])
                                                                      Tpat_any
                                                                  ]
                                                                  None
                                                              ]
                                                          expression (src/lexer.mll[223,6507+8]..src/lexer.mll[223,6507+20])
                                                            Texp_assert                                                            expression (src/lexer.mll[223,6507+15]..src/lexer.mll[223,6507+20])
                                                              Texp_construct "false"
                                                              []
                                                      ]
                                                ]
                                                expression (src/lexer.mll[225,6533+2]..src/lexer.mll[246,7158+41])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/lexer.mll[225,6533+6]..src/lexer.mll[225,6533+15])
                                                        Tpat_var "transform/1080"
                                                      expression (src/lexer.mll[225,6533+16]..src/lexer.mll[239,7055+10]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/lexer.mll[225,6533+16]..src/lexer.mll[225,6533+20])
                                                              Tpat_var "ofs1/1082"
                                                            expression (src/lexer.mll[225,6533+21]..src/lexer.mll[239,7055+10]) ghost
                                                              Texp_function
                                                              Nolabel
                                                              [
                                                                <case>
                                                                  pattern (src/lexer.mll[225,6533+21]..src/lexer.mll[225,6533+28])
                                                                    Tpat_var "content/1083"
                                                                  expression (src/lexer.mll[226,6564+4]..src/lexer.mll[239,7055+10])
                                                                    Texp_let Nonrec
                                                                    [
                                                                      <def>
                                                                        pattern (src/lexer.mll[226,6564+8]..src/lexer.mll[226,6564+11])
                                                                          Tpat_var "pos/1084"
                                                                        expression (src/lexer.mll[226,6564+14]..src/lexer.mll[226,6564+35])
                                                                          Texp_apply
                                                                          expression (src/lexer.mll[226,6564+14]..src/lexer.mll[226,6564+31])
                                                                            Texp_ident "Dune__exe!.Positions.start_of_position"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[226,6564+32]..src/lexer.mll[226,6564+35])
                                                                                Texp_ident "pos/1064"
                                                                          ]
                                                                    ]
                                                                    expression (src/lexer.mll[227,6603+4]..src/lexer.mll[239,7055+10])
                                                                      Texp_let Nonrec
                                                                      [
                                                                        <def>
                                                                          pattern (src/lexer.mll[227,6603+8]..src/lexer.mll[227,6603+11])
                                                                            Tpat_var "ofs/1085"
                                                                          expression (src/lexer.mll[227,6603+14]..src/lexer.mll[227,6603+33])
                                                                            Texp_apply
                                                                            expression (src/lexer.mll[227,6603+27]..src/lexer.mll[227,6603+28])
                                                                              Texp_ident "Stdlib!.-"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[227,6603+14]..src/lexer.mll[227,6603+26])
                                                                                  Texp_field
                                                                                  expression (src/lexer.mll[227,6603+14]..src/lexer.mll[227,6603+17])
                                                                                    Texp_ident "pos/1084"
                                                                                  "pos_cnum"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[227,6603+29]..src/lexer.mll[227,6603+33])
                                                                                  Texp_ident "ofs1/1082"
                                                                            ]
                                                                      ]
                                                                      expression (src/lexer.mll[228,6640+4]..src/lexer.mll[239,7055+10])
                                                                        Texp_sequence
                                                                        expression (src/lexer.mll[228,6640+4]..src/lexer.mll[228,6640+33])
                                                                          Texp_apply
                                                                          expression (src/lexer.mll[228,6640+4]..src/lexer.mll[228,6640+13])
                                                                            Texp_ident "overwrite/544"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[228,6640+14]..src/lexer.mll[228,6640+21])
                                                                                Texp_ident "content/1083"
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[228,6640+22]..src/lexer.mll[228,6640+25])
                                                                                Texp_ident "ofs/1085"
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[228,6640+26]..src/lexer.mll[228,6640+29])
                                                                                Texp_constant Const_char 24
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/lexer.mll[228,6640+30]..src/lexer.mll[228,6640+33])
                                                                                Texp_constant Const_char 5f
                                                                          ]
                                                                        expression (src/lexer.mll[229,6675+4]..src/lexer.mll[239,7055+10])
                                                                          Texp_let Nonrec
                                                                          [
                                                                            <def>
                                                                              pattern (src/lexer.mll[229,6675+8]..src/lexer.mll[229,6675+15])
                                                                                Tpat_var "ofslpar/1086"
                                                                              expression (src/lexer.mll[229,6675+18]..src/lexer.mll[229,6675+31])
                                                                                Texp_apply
                                                                                expression (src/lexer.mll[229,6675+22]..src/lexer.mll[229,6675+23])
                                                                                  Texp_ident "Stdlib!.+"
                                                                                [
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/lexer.mll[229,6675+18]..src/lexer.mll[229,6675+21])
                                                                                      Texp_ident "ofs/1085"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/lexer.mll[229,6675+24]..src/lexer.mll[229,6675+31])
                                                                                      Texp_ident "ofslpar/1072"
                                                                                ]
                                                                          ]
                                                                          expression (src/lexer.mll[230,6710+4]..src/lexer.mll[239,7055+10])
                                                                            Texp_match
                                                                            expression (src/lexer.mll[230,6710+10]..src/lexer.mll[230,6710+14])
                                                                              Texp_tuple
                                                                              [
                                                                                expression (src/lexer.mll[230,6710+10]..src/lexer.mll[230,6710+11])
                                                                                  Texp_ident "i/1067"
                                                                                expression (src/lexer.mll[230,6710+13]..src/lexer.mll[230,6710+14])
                                                                                  Texp_ident "x/1068"
                                                                              ]
                                                                            [
                                                                              <case>
                                                                                pattern (src/lexer.mll[231,6730+6]..src/lexer.mll[231,6730+18])
                                                                                  Tpat_value
                                                                                  pattern (src/lexer.mll[231,6730+6]..src/lexer.mll[231,6730+18])
                                                                                    Tpat_tuple
                                                                                    [
                                                                                      pattern (src/lexer.mll[231,6730+6]..src/lexer.mll[231,6730+10])
                                                                                        Tpat_construct "None"
                                                                                        []
                                                                                        None
                                                                                      pattern (src/lexer.mll[231,6730+12]..src/lexer.mll[231,6730+18])
                                                                                        Tpat_construct "Some"
                                                                                        [
                                                                                          pattern (src/lexer.mll[231,6730+17]..src/lexer.mll[231,6730+18])
                                                                                            Tpat_var "x/1087"
                                                                                        ]
                                                                                        None
                                                                                    ]
                                                                                expression (src/lexer.mll[232,6752+8]..src/lexer.mll[233,6795+65])
                                                                                  Texp_sequence
                                                                                  expression (src/lexer.mll[232,6752+8]..src/lexer.mll[232,6752+41])
                                                                                    Texp_apply
                                                                                    expression (src/lexer.mll[232,6752+8]..src/lexer.mll[232,6752+17])
                                                                                      Texp_ident "overwrite/544"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[232,6752+18]..src/lexer.mll[232,6752+25])
                                                                                          Texp_ident "content/1083"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[232,6752+26]..src/lexer.mll[232,6752+33])
                                                                                          Texp_ident "ofslpar/1086"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[232,6752+34]..src/lexer.mll[232,6752+37])
                                                                                          Texp_constant Const_char 28
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[232,6752+38]..src/lexer.mll[232,6752+41])
                                                                                          Texp_constant Const_char 5f
                                                                                    ]
                                                                                  expression (src/lexer.mll[233,6795+8]..src/lexer.mll[233,6795+65])
                                                                                    Texp_apply
                                                                                    expression (src/lexer.mll[233,6795+8]..src/lexer.mll[233,6795+17])
                                                                                      Texp_ident "overwrite/544"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[233,6795+18]..src/lexer.mll[233,6795+25])
                                                                                          Texp_ident "content/1083"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[233,6795+26]..src/lexer.mll[233,6795+57])
                                                                                          Texp_apply
                                                                                          expression (src/lexer.mll[233,6795+39]..src/lexer.mll[233,6795+40])
                                                                                            Texp_ident "Stdlib!.+"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/lexer.mll[233,6795+27]..src/lexer.mll[233,6795+38])
                                                                                                Texp_apply
                                                                                                expression (src/lexer.mll[233,6795+35]..src/lexer.mll[233,6795+36])
                                                                                                  Texp_ident "Stdlib!.+"
                                                                                                [
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/lexer.mll[233,6795+27]..src/lexer.mll[233,6795+34])
                                                                                                      Texp_ident "ofslpar/1086"
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/lexer.mll[233,6795+37]..src/lexer.mll[233,6795+38])
                                                                                                      Texp_constant Const_int 1
                                                                                                ]
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/lexer.mll[233,6795+41]..src/lexer.mll[233,6795+56])
                                                                                                Texp_apply
                                                                                                expression (src/lexer.mll[233,6795+41]..src/lexer.mll[233,6795+54])
                                                                                                  Texp_ident "Stdlib!.String.length"
                                                                                                [
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/lexer.mll[233,6795+55]..src/lexer.mll[233,6795+56])
                                                                                                      Texp_ident "x/1087"
                                                                                                ]
                                                                                          ]
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[233,6795+58]..src/lexer.mll[233,6795+61])
                                                                                          Texp_constant Const_char 29
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[233,6795+62]..src/lexer.mll[233,6795+65])
                                                                                          Texp_constant Const_char 5f
                                                                                    ]
                                                                              <case>
                                                                                pattern (src/lexer.mll[234,6861+6]..src/lexer.mll[234,6861+18])
                                                                                  Tpat_value
                                                                                  pattern (src/lexer.mll[234,6861+6]..src/lexer.mll[234,6861+18])
                                                                                    Tpat_tuple
                                                                                    [
                                                                                      pattern (src/lexer.mll[234,6861+6]..src/lexer.mll[234,6861+12])
                                                                                        Tpat_construct "Some"
                                                                                        [
                                                                                          pattern (src/lexer.mll[234,6861+11]..src/lexer.mll[234,6861+12])
                                                                                            Tpat_var "i/1088"
                                                                                        ]
                                                                                        None
                                                                                      pattern (src/lexer.mll[234,6861+14]..src/lexer.mll[234,6861+18])
                                                                                        Tpat_construct "None"
                                                                                        []
                                                                                        None
                                                                                    ]
                                                                                expression (src/lexer.mll[235,6883+8]..src/lexer.mll[237,6975+65])
                                                                                  Texp_sequence
                                                                                  expression (src/lexer.mll[235,6883+8]..src/lexer.mll[235,6883+41])
                                                                                    Texp_apply
                                                                                    expression (src/lexer.mll[235,6883+8]..src/lexer.mll[235,6883+17])
                                                                                      Texp_ident "overwrite/544"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[235,6883+18]..src/lexer.mll[235,6883+25])
                                                                                          Texp_ident "content/1083"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[235,6883+26]..src/lexer.mll[235,6883+33])
                                                                                          Texp_ident "ofslpar/1086"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[235,6883+34]..src/lexer.mll[235,6883+37])
                                                                                          Texp_constant Const_char 28
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/lexer.mll[235,6883+38]..src/lexer.mll[235,6883+41])
                                                                                          Texp_constant Const_char 5f
                                                                                    ]
                                                                                  expression (src/lexer.mll[236,6926+8]..src/lexer.mll[237,6975+65])
                                                                                    Texp_sequence
                                                                                    expression (src/lexer.mll[236,6926+8]..src/lexer.mll[236,6926+47])
                                                                                      Texp_apply
                                                                                      expression (src/lexer.mll[236,6926+8]..src/lexer.mll[236,6926+17])
                                                                                        Texp_ident "overwrite/544"
                                                                                      [
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[236,6926+18]..src/lexer.mll[236,6926+25])
                                                                                            Texp_ident "content/1083"
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[236,6926+26]..src/lexer.mll[236,6926+39])
                                                                                            Texp_apply
                                                                                            expression (src/lexer.mll[236,6926+35]..src/lexer.mll[236,6926+36])
                                                                                              Texp_ident "Stdlib!.+"
                                                                                            [
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/lexer.mll[236,6926+27]..src/lexer.mll[236,6926+34])
                                                                                                  Texp_ident "ofslpar/1086"
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/lexer.mll[236,6926+37]..src/lexer.mll[236,6926+38])
                                                                                                  Texp_constant Const_int 1
                                                                                            ]
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[236,6926+40]..src/lexer.mll[236,6926+43])
                                                                                            Texp_constant Const_char 24
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[236,6926+44]..src/lexer.mll[236,6926+47])
                                                                                            Texp_constant Const_char 5f
                                                                                      ]
                                                                                    expression (src/lexer.mll[237,6975+8]..src/lexer.mll[237,6975+65])
                                                                                      Texp_apply
                                                                                      expression (src/lexer.mll[237,6975+8]..src/lexer.mll[237,6975+17])
                                                                                        Texp_ident "overwrite/544"
                                                                                      [
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[237,6975+18]..src/lexer.mll[237,6975+25])
                                                                                            Texp_ident "content/1083"
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[237,6975+26]..src/lexer.mll[237,6975+57])
                                                                                            Texp_apply
                                                                                            expression (src/lexer.mll[237,6975+39]..src/lexer.mll[237,6975+40])
                                                                                              Texp_ident "Stdlib!.+"
                                                                                            [
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/lexer.mll[237,6975+27]..src/lexer.mll[237,6975+38])
                                                                                                  Texp_apply
                                                                                                  expression (src/lexer.mll[237,6975+35]..src/lexer.mll[237,6975+36])
                                                                                                    Texp_ident "Stdlib!.+"
                                                                                                  [
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/lexer.mll[237,6975+27]..src/lexer.mll[237,6975+34])
                                                                                                        Texp_ident "ofslpar/1086"
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/lexer.mll[237,6975+37]..src/lexer.mll[237,6975+38])
                                                                                                        Texp_constant Const_int 2
                                                                                                  ]
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/lexer.mll[237,6975+41]..src/lexer.mll[237,6975+56])
                                                                                                  Texp_apply
                                                                                                  expression (src/lexer.mll[237,6975+41]..src/lexer.mll[237,6975+54])
                                                                                                    Texp_ident "Stdlib!.String.length"
                                                                                                  [
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/lexer.mll[237,6975+55]..src/lexer.mll[237,6975+56])
                                                                                                        Texp_ident "i/1088"
                                                                                                  ]
                                                                                            ]
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[237,6975+58]..src/lexer.mll[237,6975+61])
                                                                                            Texp_constant Const_char 29
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/lexer.mll[237,6975+62]..src/lexer.mll[237,6975+65])
                                                                                            Texp_constant Const_char 5f
                                                                                      ]
                                                                              <case>
                                                                                pattern (src/lexer.mll[238,7041+6]..src/lexer.mll[238,7041+10])
                                                                                  Tpat_value
                                                                                  pattern (src/lexer.mll[238,7041+6]..src/lexer.mll[238,7041+10])
                                                                                    Tpat_tuple
                                                                                    [
                                                                                      pattern (src/lexer.mll[238,7041+6]..src/lexer.mll[238,7041+7])
                                                                                        Tpat_any
                                                                                      pattern (src/lexer.mll[238,7041+9]..src/lexer.mll[238,7041+10])
                                                                                        Tpat_any
                                                                                    ]
                                                                                expression (src/lexer.mll[239,7055+8]..src/lexer.mll[239,7055+10])
                                                                                  Texp_construct "()"
                                                                                  []
                                                                            ]
                                                              ]
                                                        ]
                                                  ]
                                                  expression (src/lexer.mll[241,7071+2]..src/lexer.mll[246,7158+41])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/lexer.mll[241,7071+6]..src/lexer.mll[241,7071+13])
                                                          Tpat_var "keyword/1089"
                                                        expression (src/lexer.mll[242,7087+4]..src/lexer.mll[242,7087+44])
                                                          Texp_construct "Some"
                                                          [
                                                            expression (src/lexer.mll[242,7087+9]..src/lexer.mll[242,7087+44])
                                                              Texp_construct "Position"
                                                              [
                                                                expression (src/lexer.mll[242,7087+20]..src/lexer.mll[242,7087+27])
                                                                  Texp_ident "subject/1075"
                                                                expression (src/lexer.mll[242,7087+29]..src/lexer.mll[242,7087+34])
                                                                  Texp_ident "where/1073"
                                                                expression (src/lexer.mll[242,7087+36]..src/lexer.mll[242,7087+42])
                                                                  Texp_ident "flavor/1074"
                                                              ]
                                                          ]
                                                      <def>
                                                        pattern (src/lexer.mll[243,7132+6]..src/lexer.mll[243,7132+9])
                                                          Tpat_var "oid/1090"
                                                        expression (src/lexer.mll[244,7144+4]..src/lexer.mll[244,7144+8])
                                                          Texp_construct "None"
                                                          []
                                                    ]
                                                    expression (src/lexer.mll[246,7158+2]..src/lexer.mll[246,7158+41])
                                                      Texp_record
                                                        fields =
                                                          [
                                                            "pos"
                                                              expression (src/lexer.mll[246,7158+4]..src/lexer.mll[246,7158+7])
                                                                Texp_ident "pos/1064"
                                                            "check"
                                                              expression (src/lexer.mll[246,7158+9]..src/lexer.mll[246,7158+14])
                                                                Texp_ident "check/1076"
                                                            "transform"
                                                              expression (src/lexer.mll[246,7158+16]..src/lexer.mll[246,7158+25])
                                                                Texp_ident "transform/1080"
                                                            "keyword"
                                                              expression (src/lexer.mll[246,7158+27]..src/lexer.mll[246,7158+34])
                                                                Texp_ident "keyword/1089"
                                                            "oid"
                                                              expression (src/lexer.mll[246,7158+36]..src/lexer.mll[246,7158+39])
                                                                Texp_ident "oid/1090"
                                                          ]
                                                        representation =
                                                          Record_regular
                                                        extended_expression =
                                                          None
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[253,7369+0]..src/lexer.mll[259,7489+61])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[253,7369+4]..src/lexer.mll[253,7369+15])
          Tpat_var "no_monsters/1091"
        expression (src/lexer.mll[253,7369+16]..src/lexer.mll[259,7489+61]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[253,7369+16]..src/lexer.mll[253,7369+24])
                Tpat_var "monsters/1093"
              expression (src/lexer.mll[254,7396+2]..src/lexer.mll[259,7489+61])
                Texp_match
                expression (src/lexer.mll[254,7396+8]..src/lexer.mll[254,7396+16])
                  Texp_ident "monsters/1093"
                [
                  <case>
                    pattern (src/lexer.mll[255,7418+4]..src/lexer.mll[255,7418+6])
                      Tpat_value
                      pattern (src/lexer.mll[255,7418+4]..src/lexer.mll[255,7418+6])
                        Tpat_construct "[]"
                        []
                        None
                    expression (src/lexer.mll[256,7428+6]..src/lexer.mll[256,7428+8])
                      Texp_construct "()"
                      []
                  <case>
                    pattern (src/lexer.mll[257,7437+4]..src/lexer.mll[257,7437+16])
                      Tpat_value
                      pattern (src/lexer.mll[257,7437+4]..src/lexer.mll[257,7437+16])
                        Tpat_construct "::"
                        [
                          pattern (src/lexer.mll[257,7437+4]..src/lexer.mll[257,7437+11])
                            Tpat_var "monster/1094"
                          pattern (src/lexer.mll[257,7437+15]..src/lexer.mll[257,7437+16])
                            Tpat_any
                        ]
                        None
                    expression (src/lexer.mll[258,7457+6]..src/lexer.mll[259,7489+61])
                      Texp_apply
                      expression (src/lexer.mll[258,7457+6]..src/lexer.mll[258,7457+17])
                        Texp_ident "Dune__exe!.Error.error"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[258,7457+18]..src/lexer.mll[258,7457+31])
                            Texp_construct "::"
                            [
                              expression (src/lexer.mll[258,7457+19]..src/lexer.mll[258,7457+30])
                                Texp_field
                                expression (src/lexer.mll[258,7457+19]..src/lexer.mll[258,7457+26])
                                  Texp_ident "monster/1094"
                                "pos"
                              expression (src/lexer.mll[258,7457+30]..src/lexer.mll[258,7457+31]) ghost
                                Texp_construct "[]"
                                []
                            ]
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61])
                            Texp_construct "CamlinternalFormatBasics.Format"
                            [
                              expression (src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost
                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                [
                                  expression (src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost
                                    Texp_constant Const_string("a Menhir keyword cannot be used in an OCaml header.",(src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost,None)
                                  expression (src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost
                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                    []
                                ]
                              expression (src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost
                                Texp_constant Const_string("a Menhir keyword cannot be used in an OCaml header.",(src/lexer.mll[259,7489+8]..src/lexer.mll[259,7489+61]) ghost,None)
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[265,7709+0]..src/lexer.mll[270,7801+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[265,7709+4]..src/lexer.mll[265,7709+14])
          Tpat_var "gather_oid/1095"
        expression (src/lexer.mll[265,7709+15]..src/lexer.mll[270,7801+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[265,7709+15]..src/lexer.mll[265,7709+17])
                Tpat_var "xs/1097"
              expression (src/lexer.mll[265,7709+18]..src/lexer.mll[270,7801+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[265,7709+18]..src/lexer.mll[265,7709+21])
                      Tpat_var "oid/1098"
                    expression (src/lexer.mll[266,7733+2]..src/lexer.mll[270,7801+8])
                      Texp_match
                      expression (src/lexer.mll[266,7733+8]..src/lexer.mll[266,7733+11])
                        Texp_ident "oid/1098"
                      [
                        <case>
                          pattern (src/lexer.mll[267,7750+4]..src/lexer.mll[267,7750+10])
                            Tpat_value
                            pattern (src/lexer.mll[267,7750+4]..src/lexer.mll[267,7750+10])
                              Tpat_construct "Some"
                              [
                                pattern (src/lexer.mll[267,7750+9]..src/lexer.mll[267,7750+10])
                                  Tpat_var "x/1099"
                              ]
                              None
                          expression (src/lexer.mll[268,7764+6]..src/lexer.mll[268,7764+24])
                            Texp_apply
                            expression (src/lexer.mll[268,7764+6]..src/lexer.mll[268,7764+19])
                              Texp_ident "Dune__exe!.StringSet.add"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[268,7764+20]..src/lexer.mll[268,7764+21])
                                  Texp_ident "x/1099"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[268,7764+22]..src/lexer.mll[268,7764+24])
                                  Texp_ident "xs/1097"
                            ]
                        <case>
                          pattern (src/lexer.mll[269,7789+4]..src/lexer.mll[269,7789+8])
                            Tpat_value
                            pattern (src/lexer.mll[269,7789+4]..src/lexer.mll[269,7789+8])
                              Tpat_construct "None"
                              []
                              None
                          expression (src/lexer.mll[270,7801+6]..src/lexer.mll[270,7801+8])
                            Texp_ident "xs/1097"
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[272,7811+0]..src/lexer.mll[273,7834+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[272,7811+4]..src/lexer.mll[272,7811+15])
          Tpat_var "gather_oids/1192"
        expression (src/lexer.mll[272,7811+16]..src/lexer.mll[273,7834+49]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[272,7811+16]..src/lexer.mll[272,7811+20])
                Tpat_var "oids/1194"
              expression (src/lexer.mll[273,7834+2]..src/lexer.mll[273,7834+49])
                Texp_apply
                expression (src/lexer.mll[273,7834+2]..src/lexer.mll[273,7834+17])
                  Texp_ident "Stdlib!.Array.fold_left"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[273,7834+18]..src/lexer.mll[273,7834+28])
                      Texp_ident "gather_oid/1095"
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[273,7834+29]..src/lexer.mll[273,7834+44])
                      Texp_ident "Dune__exe!.StringSet.empty"
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[273,7834+45]..src/lexer.mll[273,7834+49])
                      Texp_ident "oids/1194"
                ]
          ]
    ]
  structure_item (src/lexer.mll[277,7954+0]..src/lexer.mll[280,8051+28])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[277,7954+4]..src/lexer.mll[277,7954+19])
          Tpat_var "gather_monsters/1195"
        expression (src/lexer.mll[277,7954+20]..src/lexer.mll[280,8051+28]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[277,7954+20]..src/lexer.mll[277,7954+28])
                Tpat_var "monsters/1197"
              expression (src/lexer.mll[278,7985+2]..src/lexer.mll[280,8051+28])
                Texp_apply
                expression (src/lexer.mll[278,7985+2]..src/lexer.mll[278,7985+16])
                  Texp_ident "Stdlib!.List.fold_left"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[278,7985+17]..src/lexer.mll[280,8051+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[278,7985+22]..src/lexer.mll[278,7985+24])
                            Tpat_var "xs/1198"
                          expression (src/lexer.mll[278,7985+25]..src/lexer.mll[279,8021+29]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[278,7985+25]..src/lexer.mll[278,7985+32])
                                  Tpat_var "monster/1199"
                                expression (src/lexer.mll[279,8021+4]..src/lexer.mll[279,8021+29])
                                  Texp_apply
                                  expression (src/lexer.mll[279,8021+4]..src/lexer.mll[279,8021+14])
                                    Texp_ident "gather_oid/1095"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[279,8021+15]..src/lexer.mll[279,8021+17])
                                        Texp_ident "xs/1198"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[279,8021+18]..src/lexer.mll[279,8021+29])
                                        Texp_field
                                        expression (src/lexer.mll[279,8021+18]..src/lexer.mll[279,8021+25])
                                          Texp_ident "monster/1199"
                                        "oid"
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[280,8051+4]..src/lexer.mll[280,8051+19])
                      Texp_ident "Dune__exe!.StringSet.empty"
                  <arg>
                    Nolabel
                    expression (src/lexer.mll[280,8051+20]..src/lexer.mll[280,8051+28])
                      Texp_ident "monsters/1197"
                ]
          ]
    ]
  structure_item (src/lexer.mll[286,8187+0]..src/lexer.mll[320,9757+4])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[286,8187+4]..src/lexer.mll[286,8187+14])
          Tpat_var "mk_stretch/1200"
        expression (src/lexer.mll[286,8187+15]..src/lexer.mll[320,9757+4]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[286,8187+15]..src/lexer.mll[286,8187+19])
                Tpat_var "pos1/1202"
              expression (src/lexer.mll[286,8187+20]..src/lexer.mll[320,9757+4]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.mll[286,8187+20]..src/lexer.mll[286,8187+24])
                      Tpat_var "pos2/1203"
                    expression (src/lexer.mll[286,8187+25]..src/lexer.mll[320,9757+4]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.mll[286,8187+25]..src/lexer.mll[286,8187+37])
                            Tpat_var "parenthesize/1204"
                          expression (src/lexer.mll[286,8187+38]..src/lexer.mll[320,9757+4]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.mll[286,8187+38]..src/lexer.mll[286,8187+46])
                                  Tpat_var "monsters/1205"
                                expression (src/lexer.mll[288,8282+2]..src/lexer.mll[320,9757+4])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[288,8282+6]..src/lexer.mll[288,8282+17])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/lexer.mll[288,8282+20]..src/lexer.mll[288,8282+26])
                                            Ttyp_constr "string/15!"
                                            []
                                        Tpat_alias "raw_content/1206"
                                        pattern (src/lexer.mll[288,8282+6]..src/lexer.mll[288,8282+17])
                                          Tpat_any
                                      expression (src/lexer.mll[288,8282+29]..src/lexer.mll[288,8282+57])
                                        extra
                                          Texp_constraint
                                          core_type (src/lexer.mll[288,8282+20]..src/lexer.mll[288,8282+26])
                                            Ttyp_constr "string/15!"
                                            []
                                        Texp_apply
                                        expression (src/lexer.mll[288,8282+29]..src/lexer.mll[288,8282+44])
                                          Texp_ident "Dune__exe!.InputFile.chunk"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[288,8282+45]..src/lexer.mll[288,8282+57])
                                              Texp_tuple
                                              [
                                                expression (src/lexer.mll[288,8282+46]..src/lexer.mll[288,8282+50])
                                                  Texp_ident "pos1/1202"
                                                expression (src/lexer.mll[288,8282+52]..src/lexer.mll[288,8282+56])
                                                  Texp_ident "pos2/1203"
                                              ]
                                        ]
                                  ]
                                  expression (src/lexer.mll[291,8481+2]..src/lexer.mll[320,9757+4])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/lexer.mll[291,8481+6]..src/lexer.mll[291,8481+13])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (src/lexer.mll[291,8481+16]..src/lexer.mll[291,8481+22])
                                              Ttyp_constr "string/15!"
                                              []
                                          Tpat_alias "content/1216"
                                          pattern (src/lexer.mll[291,8481+6]..src/lexer.mll[291,8481+13])
                                            Tpat_any
                                        expression (src/lexer.mll[292,8506+4]..src/lexer.mll[298,8724+38])
                                          extra
                                            Texp_constraint
                                            core_type (src/lexer.mll[291,8481+16]..src/lexer.mll[291,8481+22])
                                              Ttyp_constr "string/15!"
                                              []
                                          Texp_match
                                          expression (src/lexer.mll[292,8506+10]..src/lexer.mll[292,8506+18])
                                            Texp_ident "monsters/1205"
                                          [
                                            <case>
                                              pattern (src/lexer.mll[293,8530+6]..src/lexer.mll[293,8530+8])
                                                Tpat_value
                                                pattern (src/lexer.mll[293,8530+6]..src/lexer.mll[293,8530+8])
                                                  Tpat_construct "[]"
                                                  []
                                                  None
                                              expression (src/lexer.mll[294,8542+8]..src/lexer.mll[294,8542+19])
                                                Texp_ident "raw_content/1206"
                                            <case>
                                              pattern (src/lexer.mll[295,8562+6]..src/lexer.mll[295,8562+12])
                                                Tpat_value
                                                pattern (src/lexer.mll[295,8562+6]..src/lexer.mll[295,8562+12])
                                                  Tpat_construct "::"
                                                  [
                                                    pattern (src/lexer.mll[295,8562+6]..src/lexer.mll[295,8562+7])
                                                      Tpat_any
                                                    pattern (src/lexer.mll[295,8562+11]..src/lexer.mll[295,8562+12])
                                                      Tpat_any
                                                  ]
                                                  None
                                              expression (src/lexer.mll[296,8578+8]..src/lexer.mll[298,8724+38])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/lexer.mll[296,8578+12]..src/lexer.mll[296,8578+19])
                                                      extra
                                                        Tpat_extra_constraint
                                                        core_type (src/lexer.mll[296,8578+22]..src/lexer.mll[296,8578+27])
                                                          Ttyp_constr "bytes/3!"
                                                          []
                                                      Tpat_alias "content/1217"
                                                      pattern (src/lexer.mll[296,8578+12]..src/lexer.mll[296,8578+19])
                                                        Tpat_any
                                                    expression (src/lexer.mll[296,8578+30]..src/lexer.mll[296,8578+57])
                                                      extra
                                                        Texp_constraint
                                                        core_type (src/lexer.mll[296,8578+22]..src/lexer.mll[296,8578+27])
                                                          Ttyp_constr "bytes/3!"
                                                          []
                                                      Texp_apply
                                                      expression (src/lexer.mll[296,8578+30]..src/lexer.mll[296,8578+45])
                                                        Texp_ident "Stdlib!.Bytes.of_string"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[296,8578+46]..src/lexer.mll[296,8578+57])
                                                            Texp_ident "raw_content/1206"
                                                      ]
                                                ]
                                                expression (src/lexer.mll[297,8639+8]..src/lexer.mll[298,8724+38])
                                                  Texp_sequence
                                                  expression (src/lexer.mll[297,8639+8]..src/lexer.mll[297,8639+83])
                                                    Texp_apply
                                                    expression (src/lexer.mll[297,8639+8]..src/lexer.mll[297,8639+17])
                                                      Texp_ident "Stdlib!.List.iter"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[297,8639+18]..src/lexer.mll[297,8639+74])
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/lexer.mll[297,8639+23]..src/lexer.mll[297,8639+30])
                                                                Tpat_var "monster/1218"
                                                              expression (src/lexer.mll[297,8639+34]..src/lexer.mll[297,8639+73])
                                                                Texp_apply
                                                                expression (src/lexer.mll[297,8639+34]..src/lexer.mll[297,8639+51])
                                                                  Texp_field
                                                                  expression (src/lexer.mll[297,8639+34]..src/lexer.mll[297,8639+41])
                                                                    Texp_ident "monster/1218"
                                                                  "transform"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[297,8639+52]..src/lexer.mll[297,8639+65])
                                                                      Texp_field
                                                                      expression (src/lexer.mll[297,8639+52]..src/lexer.mll[297,8639+56])
                                                                        Texp_ident "pos1/1202"
                                                                      "pos_cnum"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[297,8639+66]..src/lexer.mll[297,8639+73])
                                                                      Texp_ident "content/1217"
                                                                ]
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[297,8639+75]..src/lexer.mll[297,8639+83])
                                                          Texp_ident "monsters/1205"
                                                    ]
                                                  expression (src/lexer.mll[298,8724+8]..src/lexer.mll[298,8724+38])
                                                    Texp_apply
                                                    expression (src/lexer.mll[298,8724+8]..src/lexer.mll[298,8724+30])
                                                      Texp_ident "Stdlib!.Bytes.unsafe_to_string"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[298,8724+31]..src/lexer.mll[298,8724+38])
                                                          Texp_ident "content/1217"
                                                    ]
                                          ]
                                    ]
                                    expression (src/lexer.mll[303,8969+2]..src/lexer.mll[320,9757+4])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/lexer.mll[303,8969+6]..src/lexer.mll[303,8969+13])
                                            Tpat_var "content/1219"
                                          expression (src/lexer.mll[304,8985+4]..src/lexer.mll[311,9375+64])
                                            Texp_ifthenelse
                                            expression (src/lexer.mll[304,8985+7]..src/lexer.mll[304,8985+19])
                                              Texp_ident "parenthesize/1204"
                                            expression (src/lexer.mll[309,9285+6]..src/lexer.mll[309,9285+80])
                                              Texp_apply
                                              expression (src/lexer.mll[309,9285+59]..src/lexer.mll[309,9285+60])
                                                Texp_ident "Stdlib!.^"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[309,9285+6]..src/lexer.mll[309,9285+58])
                                                    Texp_apply
                                                    expression (src/lexer.mll[309,9285+7]..src/lexer.mll[309,9285+18])
                                                      Texp_ident "Stdlib!.String.make"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[309,9285+19]..src/lexer.mll[309,9285+53])
                                                          Texp_apply
                                                          expression (src/lexer.mll[309,9285+49]..src/lexer.mll[309,9285+50])
                                                            Texp_ident "Stdlib!.-"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[309,9285+20]..src/lexer.mll[309,9285+48])
                                                                Texp_apply
                                                                expression (src/lexer.mll[309,9285+34]..src/lexer.mll[309,9285+35])
                                                                  Texp_ident "Stdlib!.-"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[309,9285+20]..src/lexer.mll[309,9285+33])
                                                                      Texp_field
                                                                      expression (src/lexer.mll[309,9285+20]..src/lexer.mll[309,9285+24])
                                                                        Texp_ident "pos1/1202"
                                                                      "pos_cnum"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[309,9285+36]..src/lexer.mll[309,9285+48])
                                                                      Texp_field
                                                                      expression (src/lexer.mll[309,9285+36]..src/lexer.mll[309,9285+40])
                                                                        Texp_ident "pos1/1202"
                                                                      "pos_bol"
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[309,9285+51]..src/lexer.mll[309,9285+52])
                                                                Texp_constant Const_int 1
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[309,9285+54]..src/lexer.mll[309,9285+57])
                                                          Texp_constant Const_char 20
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[309,9285+61]..src/lexer.mll[309,9285+80])
                                                    Texp_apply
                                                    expression (src/lexer.mll[309,9285+65]..src/lexer.mll[309,9285+66])
                                                      Texp_ident "Stdlib!.^"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[309,9285+61]..src/lexer.mll[309,9285+64])
                                                          Texp_constant Const_string("(",(src/lexer.mll[309,9285+62]..src/lexer.mll[309,9285+63]),None)
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[309,9285+67]..src/lexer.mll[309,9285+80])
                                                          Texp_apply
                                                          expression (src/lexer.mll[309,9285+75]..src/lexer.mll[309,9285+76])
                                                            Texp_ident "Stdlib!.^"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[309,9285+67]..src/lexer.mll[309,9285+74])
                                                                Texp_ident "content/1216"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[309,9285+77]..src/lexer.mll[309,9285+80])
                                                                Texp_constant Const_string(")",(src/lexer.mll[309,9285+78]..src/lexer.mll[309,9285+79]),None)
                                                          ]
                                                    ]
                                              ]
                                            Some
                                              expression (src/lexer.mll[311,9375+6]..src/lexer.mll[311,9375+64])
                                                Texp_apply
                                                expression (src/lexer.mll[311,9375+55]..src/lexer.mll[311,9375+56])
                                                  Texp_ident "Stdlib!.^"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[311,9375+6]..src/lexer.mll[311,9375+54])
                                                      Texp_apply
                                                      expression (src/lexer.mll[311,9375+7]..src/lexer.mll[311,9375+18])
                                                        Texp_ident "Stdlib!.String.make"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[311,9375+19]..src/lexer.mll[311,9375+49])
                                                            Texp_apply
                                                            expression (src/lexer.mll[311,9375+34]..src/lexer.mll[311,9375+35])
                                                              Texp_ident "Stdlib!.-"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[311,9375+20]..src/lexer.mll[311,9375+33])
                                                                  Texp_field
                                                                  expression (src/lexer.mll[311,9375+20]..src/lexer.mll[311,9375+24])
                                                                    Texp_ident "pos1/1202"
                                                                  "pos_cnum"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[311,9375+36]..src/lexer.mll[311,9375+48])
                                                                  Texp_field
                                                                  expression (src/lexer.mll[311,9375+36]..src/lexer.mll[311,9375+40])
                                                                    Texp_ident "pos1/1202"
                                                                  "pos_bol"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[311,9375+50]..src/lexer.mll[311,9375+53])
                                                            Texp_constant Const_char 20
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[311,9375+57]..src/lexer.mll[311,9375+64])
                                                      Texp_ident "content/1216"
                                                ]
                                      ]
                                      expression (src/lexer.mll[313,9445+2]..src/lexer.mll[320,9757+4])
                                        Texp_open Fresh
                                        module_expr (src/lexer.mll[313,9445+2]..src/lexer.mll[313,9445+9])
                                          Tmod_ident "Dune__exe!.Stretch"
                                        expression (src/lexer.mll[313,9445+11]..src/lexer.mll[320,9757+3])
                                          Texp_record
                                            fields =
                                              [
                                                "stretch_filename"
                                                  expression (src/lexer.mll[314,9458+23]..src/lexer.mll[314,9458+54])
                                                    Texp_apply
                                                    expression (src/lexer.mll[314,9458+23]..src/lexer.mll[314,9458+52])
                                                      Texp_ident "Dune__exe!.InputFile.get_input_file_name"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[314,9458+52]..src/lexer.mll[314,9458+54])
                                                          Texp_construct "()"
                                                          []
                                                    ]
                                                "stretch_linenum"
                                                  expression (src/lexer.mll[315,9514+22]..src/lexer.mll[315,9514+35])
                                                    Texp_field
                                                    expression (src/lexer.mll[315,9514+22]..src/lexer.mll[315,9514+26])
                                                      Texp_ident "pos1/1202"
                                                    "pos_lnum"
                                                "stretch_linecount"
                                                  expression (src/lexer.mll[316,9551+24]..src/lexer.mll[316,9551+53])
                                                    Texp_apply
                                                    expression (src/lexer.mll[316,9551+38]..src/lexer.mll[316,9551+39])
                                                      Texp_ident "Stdlib!.-"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[316,9551+24]..src/lexer.mll[316,9551+37])
                                                          Texp_field
                                                          expression (src/lexer.mll[316,9551+24]..src/lexer.mll[316,9551+28])
                                                            Texp_ident "pos2/1203"
                                                          "pos_lnum"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[316,9551+40]..src/lexer.mll[316,9551+53])
                                                          Texp_field
                                                          expression (src/lexer.mll[316,9551+40]..src/lexer.mll[316,9551+44])
                                                            Texp_ident "pos1/1202"
                                                          "pos_lnum"
                                                    ]
                                                "stretch_raw_content"
                                                  expression (src/lexer.mll[318,9637+26]..src/lexer.mll[318,9637+37])
                                                    Texp_ident "raw_content/1206"
                                                "stretch_content"
                                                  expression (src/lexer.mll[317,9606+22]..src/lexer.mll[317,9606+29])
                                                    Texp_ident "content/1219"
                                                "stretch_keywords"
                                                  expression (src/lexer.mll[319,9676+23]..src/lexer.mll[319,9676+80])
                                                    Texp_apply
                                                    expression (src/lexer.mll[319,9676+23]..src/lexer.mll[319,9676+38])
                                                      Texp_ident "Dune__exe!.Misc.filter_map"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[319,9676+39]..src/lexer.mll[319,9676+71])
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/lexer.mll[319,9676+44]..src/lexer.mll[319,9676+51])
                                                                Tpat_var "monster/1258"
                                                              expression (src/lexer.mll[319,9676+55]..src/lexer.mll[319,9676+70])
                                                                Texp_field
                                                                expression (src/lexer.mll[319,9676+55]..src/lexer.mll[319,9676+62])
                                                                  Texp_ident "monster/1258"
                                                                "keyword"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[319,9676+72]..src/lexer.mll[319,9676+80])
                                                          Texp_ident "monsters/1205"
                                                    ]
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[326,9948+0]..src/lexer.mll[341,10560+4])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[326,9948+4]..src/lexer.mll[326,9948+17])
          Tpat_var "stretch_of_id/1259"
        expression (src/lexer.mll[326,9948+18]..src/lexer.mll[341,10560+4]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[326,9948+19]..src/lexer.mll[326,9948+21])
                extra
                  Tpat_extra_constraint
                  core_type (src/lexer.mll[326,9948+24]..src/lexer.mll[326,9948+38])
                    Ttyp_constr "Dune__exe!.Positions.located"
                    [
                      core_type (src/lexer.mll[326,9948+24]..src/lexer.mll[326,9948+30])
                        Ttyp_constr "string/15!"
                        []
                    ]
                Tpat_alias "id/1261"
                pattern (src/lexer.mll[326,9948+19]..src/lexer.mll[326,9948+21])
                  Tpat_any
              expression (src/lexer.mll[327,9990+2]..src/lexer.mll[341,10560+4])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[327,9990+6]..src/lexer.mll[327,9990+22])
                      Tpat_tuple
                      [
                        pattern (src/lexer.mll[327,9990+6]..src/lexer.mll[327,9990+17])
                          Tpat_var "raw_content/1262"
                        pattern (src/lexer.mll[327,9990+19]..src/lexer.mll[327,9990+22])
                          Tpat_var "pos/1263"
                      ]
                    expression (src/lexer.mll[327,9990+25]..src/lexer.mll[327,9990+47])
                      Texp_apply
                      expression (src/lexer.mll[327,9990+25]..src/lexer.mll[327,9990+44])
                        Texp_ident "Dune__exe!.Positions.decompose"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[327,9990+45]..src/lexer.mll[327,9990+47])
                            Texp_ident "id/1261"
                      ]
                ]
                expression (src/lexer.mll[328,10041+2]..src/lexer.mll[341,10560+4])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/lexer.mll[328,10041+6]..src/lexer.mll[328,10041+10])
                        Tpat_var "pos1/1264"
                      expression (src/lexer.mll[328,10041+13]..src/lexer.mll[328,10041+44])
                        Texp_apply
                        expression (src/lexer.mll[328,10041+13]..src/lexer.mll[328,10041+40])
                          Texp_ident "Dune__exe!.Positions.start_of_position"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[328,10041+41]..src/lexer.mll[328,10041+44])
                              Texp_ident "pos/1263"
                        ]
                    <def>
                      pattern (src/lexer.mll[329,10086+6]..src/lexer.mll[329,10086+10])
                        Tpat_var "pos2/1265"
                      expression (src/lexer.mll[329,10086+13]..src/lexer.mll[329,10086+42])
                        Texp_apply
                        expression (src/lexer.mll[329,10086+13]..src/lexer.mll[329,10086+38])
                          Texp_ident "Dune__exe!.Positions.end_of_position"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[329,10086+39]..src/lexer.mll[329,10086+42])
                              Texp_ident "pos/1263"
                        ]
                    <def>
                      pattern (src/lexer.mll[330,10129+6]..src/lexer.mll[330,10129+14])
                        Tpat_var "filename/1266"
                      expression (src/lexer.mll[330,10129+17]..src/lexer.mll[330,10129+51])
                        Texp_apply
                        expression (src/lexer.mll[330,10129+17]..src/lexer.mll[330,10129+47])
                          Texp_ident "Dune__exe!.Positions.filename_of_position"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[330,10129+48]..src/lexer.mll[330,10129+51])
                              Texp_ident "pos/1263"
                        ]
                  ]
                  expression (src/lexer.mll[331,10184+2]..src/lexer.mll[341,10560+4])
                    Texp_sequence
                    expression (src/lexer.mll[331,10184+2]..src/lexer.mll[331,10184+35])
                      Texp_assert                      expression (src/lexer.mll[331,10184+9]..src/lexer.mll[331,10184+35])
                        Texp_apply
                        expression (src/lexer.mll[331,10184+15]..src/lexer.mll[331,10184+17])
                          Texp_ident "Stdlib!.!="
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[331,10184+10]..src/lexer.mll[331,10184+14])
                              Texp_ident "pos1/1264"
                          <arg>
                            Nolabel
                            expression (src/lexer.mll[331,10184+18]..src/lexer.mll[331,10184+34])
                              Texp_ident "Stdlib!.Lexing.dummy_pos"
                        ]
                    expression (src/lexer.mll[332,10221+2]..src/lexer.mll[341,10560+4])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/lexer.mll[332,10221+6]..src/lexer.mll[332,10221+13])
                            Tpat_var "padding/1267"
                          expression (src/lexer.mll[332,10221+16]..src/lexer.mll[332,10221+44])
                            Texp_apply
                            expression (src/lexer.mll[332,10221+30]..src/lexer.mll[332,10221+31])
                              Texp_ident "Stdlib!.-"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[332,10221+16]..src/lexer.mll[332,10221+29])
                                  Texp_field
                                  expression (src/lexer.mll[332,10221+16]..src/lexer.mll[332,10221+20])
                                    Texp_ident "pos1/1264"
                                  "pos_cnum"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[332,10221+32]..src/lexer.mll[332,10221+44])
                                  Texp_field
                                  expression (src/lexer.mll[332,10221+32]..src/lexer.mll[332,10221+36])
                                    Texp_ident "pos1/1264"
                                  "pos_bol"
                            ]
                      ]
                      expression (src/lexer.mll[333,10269+2]..src/lexer.mll[341,10560+4])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/lexer.mll[333,10269+6]..src/lexer.mll[333,10269+13])
                              Tpat_var "content/1268"
                            expression (src/lexer.mll[333,10269+16]..src/lexer.mll[333,10269+53])
                              Texp_apply
                              expression (src/lexer.mll[333,10269+40]..src/lexer.mll[333,10269+41])
                                Texp_ident "Stdlib!.^"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[333,10269+16]..src/lexer.mll[333,10269+39])
                                    Texp_apply
                                    expression (src/lexer.mll[333,10269+16]..src/lexer.mll[333,10269+27])
                                      Texp_ident "Stdlib!.String.make"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[333,10269+28]..src/lexer.mll[333,10269+35])
                                          Texp_ident "padding/1267"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[333,10269+36]..src/lexer.mll[333,10269+39])
                                          Texp_constant Const_char 20
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[333,10269+42]..src/lexer.mll[333,10269+53])
                                    Texp_ident "raw_content/1262"
                              ]
                        ]
                        expression (src/lexer.mll[334,10326+2]..src/lexer.mll[341,10560+4])
                          Texp_open Fresh
                          module_expr (src/lexer.mll[334,10326+2]..src/lexer.mll[334,10326+9])
                            Tmod_ident "Dune__exe!.Stretch"
                          expression (src/lexer.mll[334,10326+11]..src/lexer.mll[341,10560+3])
                            Texp_record
                              fields =
                                [
                                  "stretch_filename"
                                    expression (src/lexer.mll[335,10339+23]..src/lexer.mll[335,10339+31])
                                      Texp_ident "filename/1266"
                                  "stretch_linenum"
                                    expression (src/lexer.mll[336,10372+22]..src/lexer.mll[336,10372+35])
                                      Texp_field
                                      expression (src/lexer.mll[336,10372+22]..src/lexer.mll[336,10372+26])
                                        Texp_ident "pos1/1264"
                                      "pos_lnum"
                                  "stretch_linecount"
                                    expression (src/lexer.mll[337,10409+24]..src/lexer.mll[337,10409+53])
                                      Texp_apply
                                      expression (src/lexer.mll[337,10409+38]..src/lexer.mll[337,10409+39])
                                        Texp_ident "Stdlib!.-"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[337,10409+24]..src/lexer.mll[337,10409+37])
                                            Texp_field
                                            expression (src/lexer.mll[337,10409+24]..src/lexer.mll[337,10409+28])
                                              Texp_ident "pos2/1265"
                                            "pos_lnum"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[337,10409+40]..src/lexer.mll[337,10409+53])
                                            Texp_field
                                            expression (src/lexer.mll[337,10409+40]..src/lexer.mll[337,10409+44])
                                              Texp_ident "pos1/1264"
                                            "pos_lnum"
                                      ]
                                  "stretch_raw_content"
                                    expression (src/lexer.mll[339,10495+26]..src/lexer.mll[339,10495+37])
                                      Texp_ident "raw_content/1262"
                                  "stretch_content"
                                    expression (src/lexer.mll[338,10464+22]..src/lexer.mll[338,10464+29])
                                      Texp_ident "content/1268"
                                  "stretch_keywords"
                                    expression (src/lexer.mll[340,10534+23]..src/lexer.mll[340,10534+25])
                                      Texp_construct "[]"
                                      []
                                ]
                              representation =
                                Record_regular
                              extended_expression =
                                None
          ]
    ]
  structure_item (src/lexer.mll[347,10677+0]..src/lexer.mll[350,10790+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[347,10677+4]..src/lexer.mll[347,10677+9])
          Tpat_var "table/1269"
        expression (src/lexer.mll[347,10677+10]..src/lexer.mll[350,10790+7]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[347,10677+10]..src/lexer.mll[347,10677+15])
                Tpat_var "words/1271"
              expression (src/lexer.mll[348,10695+2]..src/lexer.mll[350,10790+7])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[348,10695+6]..src/lexer.mll[348,10695+11])
                      Tpat_var "table/1272"
                    expression (src/lexer.mll[348,10695+14]..src/lexer.mll[348,10695+32])
                      Texp_apply
                      expression (src/lexer.mll[348,10695+14]..src/lexer.mll[348,10695+28])
                        Texp_ident "Stdlib!.Hashtbl.create"
                      [
                        <arg>
                          Optional "random"
                          expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                            Texp_construct "None"
                            []
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[348,10695+29]..src/lexer.mll[348,10695+32])
                            Texp_constant Const_int 149
                      ]
                ]
                expression (src/lexer.mll[349,10731+2]..src/lexer.mll[350,10790+7])
                  Texp_sequence
                  expression (src/lexer.mll[349,10731+2]..src/lexer.mll[349,10731+57])
                    Texp_apply
                    expression (src/lexer.mll[349,10731+2]..src/lexer.mll[349,10731+11])
                      Texp_ident "Stdlib!.List.iter"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexer.mll[349,10731+12]..src/lexer.mll[349,10731+51])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/lexer.mll[349,10731+17]..src/lexer.mll[349,10731+21])
                                Tpat_var "word/1353"
                              expression (src/lexer.mll[349,10731+25]..src/lexer.mll[349,10731+50])
                                Texp_apply
                                expression (src/lexer.mll[349,10731+25]..src/lexer.mll[349,10731+36])
                                  Texp_ident "Stdlib!.Hashtbl.add"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[349,10731+37]..src/lexer.mll[349,10731+42])
                                      Texp_ident "table/1272"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[349,10731+43]..src/lexer.mll[349,10731+47])
                                      Texp_ident "word/1353"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[349,10731+48]..src/lexer.mll[349,10731+50])
                                      Texp_construct "()"
                                      []
                                ]
                          ]
                      <arg>
                        Nolabel
                        expression (src/lexer.mll[349,10731+52]..src/lexer.mll[349,10731+57])
                          Texp_ident "words/1271"
                    ]
                  expression (src/lexer.mll[350,10790+2]..src/lexer.mll[350,10790+7])
                    Texp_ident "table/1272"
          ]
    ]
  structure_item (src/lexer.mll[352,10799+0]..src/lexer.mll[410,11530+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[352,10799+4]..src/lexer.mll[352,10799+12])
          Tpat_var "reserved/1354"
        expression (src/lexer.mll[353,10814+2]..src/lexer.mll[410,11530+3])
          Texp_apply
          expression (src/lexer.mll[353,10814+2]..src/lexer.mll[353,10814+7])
            Texp_ident "table/1269"
          [
            <arg>
              Nolabel
              expression (src/lexer.mll[353,10814+8]..src/lexer.mll[410,11530+3])
                Texp_construct "::"
                [
                  expression (src/lexer.mll[354,10824+4]..src/lexer.mll[354,10824+9])
                    Texp_constant Const_string("and",(src/lexer.mll[354,10824+5]..src/lexer.mll[354,10824+8]),None)
                  expression (src/lexer.mll[355,10835+4]..src/lexer.mll[410,11530+3]) ghost
                    Texp_construct "::"
                    [
                      expression (src/lexer.mll[355,10835+4]..src/lexer.mll[355,10835+8])
                        Texp_constant Const_string("as",(src/lexer.mll[355,10835+5]..src/lexer.mll[355,10835+7]),None)
                      expression (src/lexer.mll[356,10845+4]..src/lexer.mll[410,11530+3]) ghost
                        Texp_construct "::"
                        [
                          expression (src/lexer.mll[356,10845+4]..src/lexer.mll[356,10845+12])
                            Texp_constant Const_string("assert",(src/lexer.mll[356,10845+5]..src/lexer.mll[356,10845+11]),None)
                          expression (src/lexer.mll[357,10859+4]..src/lexer.mll[410,11530+3]) ghost
                            Texp_construct "::"
                            [
                              expression (src/lexer.mll[357,10859+4]..src/lexer.mll[357,10859+11])
                                Texp_constant Const_string("begin",(src/lexer.mll[357,10859+5]..src/lexer.mll[357,10859+10]),None)
                              expression (src/lexer.mll[358,10872+4]..src/lexer.mll[410,11530+3]) ghost
                                Texp_construct "::"
                                [
                                  expression (src/lexer.mll[358,10872+4]..src/lexer.mll[358,10872+11])
                                    Texp_constant Const_string("class",(src/lexer.mll[358,10872+5]..src/lexer.mll[358,10872+10]),None)
                                  expression (src/lexer.mll[359,10885+4]..src/lexer.mll[410,11530+3]) ghost
                                    Texp_construct "::"
                                    [
                                      expression (src/lexer.mll[359,10885+4]..src/lexer.mll[359,10885+16])
                                        Texp_constant Const_string("constraint",(src/lexer.mll[359,10885+5]..src/lexer.mll[359,10885+15]),None)
                                      expression (src/lexer.mll[360,10903+4]..src/lexer.mll[410,11530+3]) ghost
                                        Texp_construct "::"
                                        [
                                          expression (src/lexer.mll[360,10903+4]..src/lexer.mll[360,10903+8])
                                            Texp_constant Const_string("do",(src/lexer.mll[360,10903+5]..src/lexer.mll[360,10903+7]),None)
                                          expression (src/lexer.mll[361,10913+4]..src/lexer.mll[410,11530+3]) ghost
                                            Texp_construct "::"
                                            [
                                              expression (src/lexer.mll[361,10913+4]..src/lexer.mll[361,10913+10])
                                                Texp_constant Const_string("done",(src/lexer.mll[361,10913+5]..src/lexer.mll[361,10913+9]),None)
                                              expression (src/lexer.mll[362,10925+4]..src/lexer.mll[410,11530+3]) ghost
                                                Texp_construct "::"
                                                [
                                                  expression (src/lexer.mll[362,10925+4]..src/lexer.mll[362,10925+12])
                                                    Texp_constant Const_string("downto",(src/lexer.mll[362,10925+5]..src/lexer.mll[362,10925+11]),None)
                                                  expression (src/lexer.mll[363,10939+4]..src/lexer.mll[410,11530+3]) ghost
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/lexer.mll[363,10939+4]..src/lexer.mll[363,10939+10])
                                                        Texp_constant Const_string("else",(src/lexer.mll[363,10939+5]..src/lexer.mll[363,10939+9]),None)
                                                      expression (src/lexer.mll[364,10951+4]..src/lexer.mll[410,11530+3]) ghost
                                                        Texp_construct "::"
                                                        [
                                                          expression (src/lexer.mll[364,10951+4]..src/lexer.mll[364,10951+9])
                                                            Texp_constant Const_string("end",(src/lexer.mll[364,10951+5]..src/lexer.mll[364,10951+8]),None)
                                                          expression (src/lexer.mll[365,10962+4]..src/lexer.mll[410,11530+3]) ghost
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/lexer.mll[365,10962+4]..src/lexer.mll[365,10962+15])
                                                                Texp_constant Const_string("exception",(src/lexer.mll[365,10962+5]..src/lexer.mll[365,10962+14]),None)
                                                              expression (src/lexer.mll[366,10979+4]..src/lexer.mll[410,11530+3]) ghost
                                                                Texp_construct "::"
                                                                [
                                                                  expression (src/lexer.mll[366,10979+4]..src/lexer.mll[366,10979+14])
                                                                    Texp_constant Const_string("external",(src/lexer.mll[366,10979+5]..src/lexer.mll[366,10979+13]),None)
                                                                  expression (src/lexer.mll[367,10995+4]..src/lexer.mll[410,11530+3]) ghost
                                                                    Texp_construct "::"
                                                                    [
                                                                      expression (src/lexer.mll[367,10995+4]..src/lexer.mll[367,10995+11])
                                                                        Texp_constant Const_string("false",(src/lexer.mll[367,10995+5]..src/lexer.mll[367,10995+10]),None)
                                                                      expression (src/lexer.mll[368,11008+4]..src/lexer.mll[410,11530+3]) ghost
                                                                        Texp_construct "::"
                                                                        [
                                                                          expression (src/lexer.mll[368,11008+4]..src/lexer.mll[368,11008+9])
                                                                            Texp_constant Const_string("for",(src/lexer.mll[368,11008+5]..src/lexer.mll[368,11008+8]),None)
                                                                          expression (src/lexer.mll[369,11019+4]..src/lexer.mll[410,11530+3]) ghost
                                                                            Texp_construct "::"
                                                                            [
                                                                              expression (src/lexer.mll[369,11019+4]..src/lexer.mll[369,11019+9])
                                                                                Texp_constant Const_string("fun",(src/lexer.mll[369,11019+5]..src/lexer.mll[369,11019+8]),None)
                                                                              expression (src/lexer.mll[370,11030+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                Texp_construct "::"
                                                                                [
                                                                                  expression (src/lexer.mll[370,11030+4]..src/lexer.mll[370,11030+14])
                                                                                    Texp_constant Const_string("function",(src/lexer.mll[370,11030+5]..src/lexer.mll[370,11030+13]),None)
                                                                                  expression (src/lexer.mll[371,11046+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                    Texp_construct "::"
                                                                                    [
                                                                                      expression (src/lexer.mll[371,11046+4]..src/lexer.mll[371,11046+13])
                                                                                        Texp_constant Const_string("functor",(src/lexer.mll[371,11046+5]..src/lexer.mll[371,11046+12]),None)
                                                                                      expression (src/lexer.mll[372,11061+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                        Texp_construct "::"
                                                                                        [
                                                                                          expression (src/lexer.mll[372,11061+4]..src/lexer.mll[372,11061+8])
                                                                                            Texp_constant Const_string("if",(src/lexer.mll[372,11061+5]..src/lexer.mll[372,11061+7]),None)
                                                                                          expression (src/lexer.mll[373,11071+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                            Texp_construct "::"
                                                                                            [
                                                                                              expression (src/lexer.mll[373,11071+4]..src/lexer.mll[373,11071+8])
                                                                                                Texp_constant Const_string("in",(src/lexer.mll[373,11071+5]..src/lexer.mll[373,11071+7]),None)
                                                                                              expression (src/lexer.mll[374,11081+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                Texp_construct "::"
                                                                                                [
                                                                                                  expression (src/lexer.mll[374,11081+4]..src/lexer.mll[374,11081+13])
                                                                                                    Texp_constant Const_string("include",(src/lexer.mll[374,11081+5]..src/lexer.mll[374,11081+12]),None)
                                                                                                  expression (src/lexer.mll[375,11096+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                    Texp_construct "::"
                                                                                                    [
                                                                                                      expression (src/lexer.mll[375,11096+4]..src/lexer.mll[375,11096+13])
                                                                                                        Texp_constant Const_string("inherit",(src/lexer.mll[375,11096+5]..src/lexer.mll[375,11096+12]),None)
                                                                                                      expression (src/lexer.mll[376,11111+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                        Texp_construct "::"
                                                                                                        [
                                                                                                          expression (src/lexer.mll[376,11111+4]..src/lexer.mll[376,11111+17])
                                                                                                            Texp_constant Const_string("initializer",(src/lexer.mll[376,11111+5]..src/lexer.mll[376,11111+16]),None)
                                                                                                          expression (src/lexer.mll[377,11130+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                            Texp_construct "::"
                                                                                                            [
                                                                                                              expression (src/lexer.mll[377,11130+4]..src/lexer.mll[377,11130+10])
                                                                                                                Texp_constant Const_string("lazy",(src/lexer.mll[377,11130+5]..src/lexer.mll[377,11130+9]),None)
                                                                                                              expression (src/lexer.mll[378,11142+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                Texp_construct "::"
                                                                                                                [
                                                                                                                  expression (src/lexer.mll[378,11142+4]..src/lexer.mll[378,11142+9])
                                                                                                                    Texp_constant Const_string("let",(src/lexer.mll[378,11142+5]..src/lexer.mll[378,11142+8]),None)
                                                                                                                  expression (src/lexer.mll[379,11153+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                    Texp_construct "::"
                                                                                                                    [
                                                                                                                      expression (src/lexer.mll[379,11153+4]..src/lexer.mll[379,11153+11])
                                                                                                                        Texp_constant Const_string("match",(src/lexer.mll[379,11153+5]..src/lexer.mll[379,11153+10]),None)
                                                                                                                      expression (src/lexer.mll[380,11166+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                        Texp_construct "::"
                                                                                                                        [
                                                                                                                          expression (src/lexer.mll[380,11166+4]..src/lexer.mll[380,11166+12])
                                                                                                                            Texp_constant Const_string("method",(src/lexer.mll[380,11166+5]..src/lexer.mll[380,11166+11]),None)
                                                                                                                          expression (src/lexer.mll[381,11180+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                            Texp_construct "::"
                                                                                                                            [
                                                                                                                              expression (src/lexer.mll[381,11180+4]..src/lexer.mll[381,11180+12])
                                                                                                                                Texp_constant Const_string("module",(src/lexer.mll[381,11180+5]..src/lexer.mll[381,11180+11]),None)
                                                                                                                              expression (src/lexer.mll[382,11194+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                Texp_construct "::"
                                                                                                                                [
                                                                                                                                  expression (src/lexer.mll[382,11194+4]..src/lexer.mll[382,11194+13])
                                                                                                                                    Texp_constant Const_string("mutable",(src/lexer.mll[382,11194+5]..src/lexer.mll[382,11194+12]),None)
                                                                                                                                  expression (src/lexer.mll[383,11209+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                    Texp_construct "::"
                                                                                                                                    [
                                                                                                                                      expression (src/lexer.mll[383,11209+4]..src/lexer.mll[383,11209+9])
                                                                                                                                        Texp_constant Const_string("new",(src/lexer.mll[383,11209+5]..src/lexer.mll[383,11209+8]),None)
                                                                                                                                      expression (src/lexer.mll[384,11220+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                        Texp_construct "::"
                                                                                                                                        [
                                                                                                                                          expression (src/lexer.mll[384,11220+4]..src/lexer.mll[384,11220+12])
                                                                                                                                            Texp_constant Const_string("object",(src/lexer.mll[384,11220+5]..src/lexer.mll[384,11220+11]),None)
                                                                                                                                          expression (src/lexer.mll[385,11234+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                            Texp_construct "::"
                                                                                                                                            [
                                                                                                                                              expression (src/lexer.mll[385,11234+4]..src/lexer.mll[385,11234+8])
                                                                                                                                                Texp_constant Const_string("of",(src/lexer.mll[385,11234+5]..src/lexer.mll[385,11234+7]),None)
                                                                                                                                              expression (src/lexer.mll[386,11244+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                Texp_construct "::"
                                                                                                                                                [
                                                                                                                                                  expression (src/lexer.mll[386,11244+4]..src/lexer.mll[386,11244+10])
                                                                                                                                                    Texp_constant Const_string("open",(src/lexer.mll[386,11244+5]..src/lexer.mll[386,11244+9]),None)
                                                                                                                                                  expression (src/lexer.mll[387,11256+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                    Texp_construct "::"
                                                                                                                                                    [
                                                                                                                                                      expression (src/lexer.mll[387,11256+4]..src/lexer.mll[387,11256+8])
                                                                                                                                                        Texp_constant Const_string("or",(src/lexer.mll[387,11256+5]..src/lexer.mll[387,11256+7]),None)
                                                                                                                                                      expression (src/lexer.mll[388,11266+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                        Texp_construct "::"
                                                                                                                                                        [
                                                                                                                                                          expression (src/lexer.mll[388,11266+4]..src/lexer.mll[388,11266+12])
                                                                                                                                                            Texp_constant Const_string("parser",(src/lexer.mll[388,11266+5]..src/lexer.mll[388,11266+11]),None)
                                                                                                                                                          expression (src/lexer.mll[389,11280+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                            Texp_construct "::"
                                                                                                                                                            [
                                                                                                                                                              expression (src/lexer.mll[389,11280+4]..src/lexer.mll[389,11280+13])
                                                                                                                                                                Texp_constant Const_string("private",(src/lexer.mll[389,11280+5]..src/lexer.mll[389,11280+12]),None)
                                                                                                                                                              expression (src/lexer.mll[390,11295+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                Texp_construct "::"
                                                                                                                                                                [
                                                                                                                                                                  expression (src/lexer.mll[390,11295+4]..src/lexer.mll[390,11295+9])
                                                                                                                                                                    Texp_constant Const_string("rec",(src/lexer.mll[390,11295+5]..src/lexer.mll[390,11295+8]),None)
                                                                                                                                                                  expression (src/lexer.mll[391,11306+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                    Texp_construct "::"
                                                                                                                                                                    [
                                                                                                                                                                      expression (src/lexer.mll[391,11306+4]..src/lexer.mll[391,11306+9])
                                                                                                                                                                        Texp_constant Const_string("sig",(src/lexer.mll[391,11306+5]..src/lexer.mll[391,11306+8]),None)
                                                                                                                                                                      expression (src/lexer.mll[392,11317+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                        Texp_construct "::"
                                                                                                                                                                        [
                                                                                                                                                                          expression (src/lexer.mll[392,11317+4]..src/lexer.mll[392,11317+12])
                                                                                                                                                                            Texp_constant Const_string("struct",(src/lexer.mll[392,11317+5]..src/lexer.mll[392,11317+11]),None)
                                                                                                                                                                          expression (src/lexer.mll[393,11331+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                            Texp_construct "::"
                                                                                                                                                                            [
                                                                                                                                                                              expression (src/lexer.mll[393,11331+4]..src/lexer.mll[393,11331+10])
                                                                                                                                                                                Texp_constant Const_string("then",(src/lexer.mll[393,11331+5]..src/lexer.mll[393,11331+9]),None)
                                                                                                                                                                              expression (src/lexer.mll[394,11343+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                Texp_construct "::"
                                                                                                                                                                                [
                                                                                                                                                                                  expression (src/lexer.mll[394,11343+4]..src/lexer.mll[394,11343+8])
                                                                                                                                                                                    Texp_constant Const_string("to",(src/lexer.mll[394,11343+5]..src/lexer.mll[394,11343+7]),None)
                                                                                                                                                                                  expression (src/lexer.mll[395,11353+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                    Texp_construct "::"
                                                                                                                                                                                    [
                                                                                                                                                                                      expression (src/lexer.mll[395,11353+4]..src/lexer.mll[395,11353+10])
                                                                                                                                                                                        Texp_constant Const_string("true",(src/lexer.mll[395,11353+5]..src/lexer.mll[395,11353+9]),None)
                                                                                                                                                                                      expression (src/lexer.mll[396,11365+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                        Texp_construct "::"
                                                                                                                                                                                        [
                                                                                                                                                                                          expression (src/lexer.mll[396,11365+4]..src/lexer.mll[396,11365+9])
                                                                                                                                                                                            Texp_constant Const_string("try",(src/lexer.mll[396,11365+5]..src/lexer.mll[396,11365+8]),None)
                                                                                                                                                                                          expression (src/lexer.mll[397,11376+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                            Texp_construct "::"
                                                                                                                                                                                            [
                                                                                                                                                                                              expression (src/lexer.mll[397,11376+4]..src/lexer.mll[397,11376+10])
                                                                                                                                                                                                Texp_constant Const_string("type",(src/lexer.mll[397,11376+5]..src/lexer.mll[397,11376+9]),None)
                                                                                                                                                                                              expression (src/lexer.mll[398,11388+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                Texp_construct "::"
                                                                                                                                                                                                [
                                                                                                                                                                                                  expression (src/lexer.mll[398,11388+4]..src/lexer.mll[398,11388+9])
                                                                                                                                                                                                    Texp_constant Const_string("val",(src/lexer.mll[398,11388+5]..src/lexer.mll[398,11388+8]),None)
                                                                                                                                                                                                  expression (src/lexer.mll[399,11399+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                    Texp_construct "::"
                                                                                                                                                                                                    [
                                                                                                                                                                                                      expression (src/lexer.mll[399,11399+4]..src/lexer.mll[399,11399+13])
                                                                                                                                                                                                        Texp_constant Const_string("virtual",(src/lexer.mll[399,11399+5]..src/lexer.mll[399,11399+12]),None)
                                                                                                                                                                                                      expression (src/lexer.mll[400,11414+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                        Texp_construct "::"
                                                                                                                                                                                                        [
                                                                                                                                                                                                          expression (src/lexer.mll[400,11414+4]..src/lexer.mll[400,11414+10])
                                                                                                                                                                                                            Texp_constant Const_string("when",(src/lexer.mll[400,11414+5]..src/lexer.mll[400,11414+9]),None)
                                                                                                                                                                                                          expression (src/lexer.mll[401,11426+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                            Texp_construct "::"
                                                                                                                                                                                                            [
                                                                                                                                                                                                              expression (src/lexer.mll[401,11426+4]..src/lexer.mll[401,11426+11])
                                                                                                                                                                                                                Texp_constant Const_string("while",(src/lexer.mll[401,11426+5]..src/lexer.mll[401,11426+10]),None)
                                                                                                                                                                                                              expression (src/lexer.mll[402,11439+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                Texp_construct "::"
                                                                                                                                                                                                                [
                                                                                                                                                                                                                  expression (src/lexer.mll[402,11439+4]..src/lexer.mll[402,11439+10])
                                                                                                                                                                                                                    Texp_constant Const_string("with",(src/lexer.mll[402,11439+5]..src/lexer.mll[402,11439+9]),None)
                                                                                                                                                                                                                  expression (src/lexer.mll[403,11451+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                    Texp_construct "::"
                                                                                                                                                                                                                    [
                                                                                                                                                                                                                      expression (src/lexer.mll[403,11451+4]..src/lexer.mll[403,11451+9])
                                                                                                                                                                                                                        Texp_constant Const_string("mod",(src/lexer.mll[403,11451+5]..src/lexer.mll[403,11451+8]),None)
                                                                                                                                                                                                                      expression (src/lexer.mll[404,11462+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                        Texp_construct "::"
                                                                                                                                                                                                                        [
                                                                                                                                                                                                                          expression (src/lexer.mll[404,11462+4]..src/lexer.mll[404,11462+10])
                                                                                                                                                                                                                            Texp_constant Const_string("land",(src/lexer.mll[404,11462+5]..src/lexer.mll[404,11462+9]),None)
                                                                                                                                                                                                                          expression (src/lexer.mll[405,11474+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                            Texp_construct "::"
                                                                                                                                                                                                                            [
                                                                                                                                                                                                                              expression (src/lexer.mll[405,11474+4]..src/lexer.mll[405,11474+9])
                                                                                                                                                                                                                                Texp_constant Const_string("lor",(src/lexer.mll[405,11474+5]..src/lexer.mll[405,11474+8]),None)
                                                                                                                                                                                                                              expression (src/lexer.mll[406,11485+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                                Texp_construct "::"
                                                                                                                                                                                                                                [
                                                                                                                                                                                                                                  expression (src/lexer.mll[406,11485+4]..src/lexer.mll[406,11485+10])
                                                                                                                                                                                                                                    Texp_constant Const_string("lxor",(src/lexer.mll[406,11485+5]..src/lexer.mll[406,11485+9]),None)
                                                                                                                                                                                                                                  expression (src/lexer.mll[407,11497+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                                    Texp_construct "::"
                                                                                                                                                                                                                                    [
                                                                                                                                                                                                                                      expression (src/lexer.mll[407,11497+4]..src/lexer.mll[407,11497+9])
                                                                                                                                                                                                                                        Texp_constant Const_string("lsl",(src/lexer.mll[407,11497+5]..src/lexer.mll[407,11497+8]),None)
                                                                                                                                                                                                                                      expression (src/lexer.mll[408,11508+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                                        Texp_construct "::"
                                                                                                                                                                                                                                        [
                                                                                                                                                                                                                                          expression (src/lexer.mll[408,11508+4]..src/lexer.mll[408,11508+9])
                                                                                                                                                                                                                                            Texp_constant Const_string("lsr",(src/lexer.mll[408,11508+5]..src/lexer.mll[408,11508+8]),None)
                                                                                                                                                                                                                                          expression (src/lexer.mll[409,11519+4]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                                            Texp_construct "::"
                                                                                                                                                                                                                                            [
                                                                                                                                                                                                                                              expression (src/lexer.mll[409,11519+4]..src/lexer.mll[409,11519+9])
                                                                                                                                                                                                                                                Texp_constant Const_string("asr",(src/lexer.mll[409,11519+5]..src/lexer.mll[409,11519+8]),None)
                                                                                                                                                                                                                                              expression (src/lexer.mll[410,11530+2]..src/lexer.mll[410,11530+3]) ghost
                                                                                                                                                                                                                                                Texp_construct "[]"
                                                                                                                                                                                                                                                []
                                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                                ]
                                                                                                                                                                                                                            ]
                                                                                                                                                                                                                        ]
                                                                                                                                                                                                                    ]
                                                                                                                                                                                                                ]
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        ]
                                                                                                                                                                                                    ]
                                                                                                                                                                                                ]
                                                                                                                                                                                            ]
                                                                                                                                                                                        ]
                                                                                                                                                                                    ]
                                                                                                                                                                                ]
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                ]
                                                                                                                                                            ]
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[416,11651+0]..src/lexer.mll[419,11786+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[416,11651+4]..src/lexer.mll[416,11651+9])
          Tpat_var "table/1355"
        expression (src/lexer.mll[416,11651+10]..src/lexer.mll[419,11786+7]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[416,11651+10]..src/lexer.mll[416,11651+20])
                Tpat_var "directives/1356"
              expression (src/lexer.mll[417,11674+2]..src/lexer.mll[419,11786+7])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/lexer.mll[417,11674+6]..src/lexer.mll[417,11674+11])
                      Tpat_var "table/1357"
                    expression (src/lexer.mll[417,11674+14]..src/lexer.mll[417,11674+32])
                      Texp_apply
                      expression (src/lexer.mll[417,11674+14]..src/lexer.mll[417,11674+28])
                        Texp_ident "Stdlib!.Hashtbl.create"
                      [
                        <arg>
                          Optional "random"
                          expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                            Texp_construct "None"
                            []
                        <arg>
                          Nolabel
                          expression (src/lexer.mll[417,11674+29]..src/lexer.mll[417,11674+32])
                            Texp_constant Const_int 149
                      ]
                ]
                expression (src/lexer.mll[418,11710+2]..src/lexer.mll[419,11786+7])
                  Texp_sequence
                  expression (src/lexer.mll[418,11710+2]..src/lexer.mll[418,11710+74])
                    Texp_apply
                    expression (src/lexer.mll[418,11710+2]..src/lexer.mll[418,11710+11])
                      Texp_ident "Stdlib!.List.iter"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexer.mll[418,11710+12]..src/lexer.mll[418,11710+63])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/lexer.mll[418,11710+17]..src/lexer.mll[418,11710+30])
                                Tpat_tuple
                                [
                                  pattern (src/lexer.mll[418,11710+18]..src/lexer.mll[418,11710+22])
                                    Tpat_var "word/1358"
                                  pattern (src/lexer.mll[418,11710+24]..src/lexer.mll[418,11710+29])
                                    Tpat_var "token/1359"
                                ]
                              expression (src/lexer.mll[418,11710+34]..src/lexer.mll[418,11710+62])
                                Texp_apply
                                expression (src/lexer.mll[418,11710+34]..src/lexer.mll[418,11710+45])
                                  Texp_ident "Stdlib!.Hashtbl.add"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[418,11710+46]..src/lexer.mll[418,11710+51])
                                      Texp_ident "table/1357"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[418,11710+52]..src/lexer.mll[418,11710+56])
                                      Texp_ident "word/1358"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[418,11710+57]..src/lexer.mll[418,11710+62])
                                      Texp_ident "token/1359"
                                ]
                          ]
                      <arg>
                        Nolabel
                        expression (src/lexer.mll[418,11710+64]..src/lexer.mll[418,11710+74])
                          Texp_ident "directives/1356"
                    ]
                  expression (src/lexer.mll[419,11786+2]..src/lexer.mll[419,11786+7])
                    Texp_ident "table/1357"
          ]
    ]
  structure_item (src/lexer.mll[421,11795+0]..src/lexer.mll[435,12109+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[421,11795+4]..src/lexer.mll[421,11795+14])
          Tpat_var "directives/1361"
        expression (src/lexer.mll[422,11812+2]..src/lexer.mll[435,12109+3])
          Texp_apply
          expression (src/lexer.mll[422,11812+2]..src/lexer.mll[422,11812+7])
            Texp_ident "table/1355"
          [
            <arg>
              Nolabel
              expression (src/lexer.mll[422,11812+8]..src/lexer.mll[435,12109+3])
                Texp_construct "::"
                [
                  expression (src/lexer.mll[423,11822+4]..src/lexer.mll[423,11822+18])
                    Texp_tuple
                    [
                      expression (src/lexer.mll[423,11822+4]..src/lexer.mll[423,11822+11])
                        Texp_constant Const_string("token",(src/lexer.mll[423,11822+5]..src/lexer.mll[423,11822+10]),None)
                      expression (src/lexer.mll[423,11822+13]..src/lexer.mll[423,11822+18])
                        Texp_construct "TOKEN"
                        []
                    ]
                  expression (src/lexer.mll[424,11842+4]..src/lexer.mll[435,12109+3]) ghost
                    Texp_construct "::"
                    [
                      expression (src/lexer.mll[424,11842+4]..src/lexer.mll[424,11842+16])
                        Texp_tuple
                        [
                          expression (src/lexer.mll[424,11842+4]..src/lexer.mll[424,11842+10])
                            Texp_constant Const_string("type",(src/lexer.mll[424,11842+5]..src/lexer.mll[424,11842+9]),None)
                          expression (src/lexer.mll[424,11842+12]..src/lexer.mll[424,11842+16])
                            Texp_construct "TYPE"
                            []
                        ]
                      expression (src/lexer.mll[425,11860+4]..src/lexer.mll[435,12109+3]) ghost
                        Texp_construct "::"
                        [
                          expression (src/lexer.mll[425,11860+4]..src/lexer.mll[425,11860+16])
                            Texp_tuple
                            [
                              expression (src/lexer.mll[425,11860+4]..src/lexer.mll[425,11860+10])
                                Texp_constant Const_string("left",(src/lexer.mll[425,11860+5]..src/lexer.mll[425,11860+9]),None)
                              expression (src/lexer.mll[425,11860+12]..src/lexer.mll[425,11860+16])
                                Texp_construct "LEFT"
                                []
                            ]
                          expression (src/lexer.mll[426,11878+4]..src/lexer.mll[435,12109+3]) ghost
                            Texp_construct "::"
                            [
                              expression (src/lexer.mll[426,11878+4]..src/lexer.mll[426,11878+18])
                                Texp_tuple
                                [
                                  expression (src/lexer.mll[426,11878+4]..src/lexer.mll[426,11878+11])
                                    Texp_constant Const_string("right",(src/lexer.mll[426,11878+5]..src/lexer.mll[426,11878+10]),None)
                                  expression (src/lexer.mll[426,11878+13]..src/lexer.mll[426,11878+18])
                                    Texp_construct "RIGHT"
                                    []
                                ]
                              expression (src/lexer.mll[427,11898+4]..src/lexer.mll[435,12109+3]) ghost
                                Texp_construct "::"
                                [
                                  expression (src/lexer.mll[427,11898+4]..src/lexer.mll[427,11898+24])
                                    Texp_tuple
                                    [
                                      expression (src/lexer.mll[427,11898+4]..src/lexer.mll[427,11898+14])
                                        Texp_constant Const_string("nonassoc",(src/lexer.mll[427,11898+5]..src/lexer.mll[427,11898+13]),None)
                                      expression (src/lexer.mll[427,11898+16]..src/lexer.mll[427,11898+24])
                                        Texp_construct "NONASSOC"
                                        []
                                    ]
                                  expression (src/lexer.mll[428,11924+4]..src/lexer.mll[435,12109+3]) ghost
                                    Texp_construct "::"
                                    [
                                      expression (src/lexer.mll[428,11924+4]..src/lexer.mll[428,11924+18])
                                        Texp_tuple
                                        [
                                          expression (src/lexer.mll[428,11924+4]..src/lexer.mll[428,11924+11])
                                            Texp_constant Const_string("start",(src/lexer.mll[428,11924+5]..src/lexer.mll[428,11924+10]),None)
                                          expression (src/lexer.mll[428,11924+13]..src/lexer.mll[428,11924+18])
                                            Texp_construct "START"
                                            []
                                        ]
                                      expression (src/lexer.mll[429,11944+4]..src/lexer.mll[435,12109+3]) ghost
                                        Texp_construct "::"
                                        [
                                          expression (src/lexer.mll[429,11944+4]..src/lexer.mll[429,11944+16])
                                            Texp_tuple
                                            [
                                              expression (src/lexer.mll[429,11944+4]..src/lexer.mll[429,11944+10])
                                                Texp_constant Const_string("prec",(src/lexer.mll[429,11944+5]..src/lexer.mll[429,11944+9]),None)
                                              expression (src/lexer.mll[429,11944+12]..src/lexer.mll[429,11944+16])
                                                Texp_construct "PREC"
                                                []
                                            ]
                                          expression (src/lexer.mll[430,11962+4]..src/lexer.mll[435,12109+3]) ghost
                                            Texp_construct "::"
                                            [
                                              expression (src/lexer.mll[430,11962+4]..src/lexer.mll[430,11962+20])
                                                Texp_tuple
                                                [
                                                  expression (src/lexer.mll[430,11962+4]..src/lexer.mll[430,11962+12])
                                                    Texp_constant Const_string("public",(src/lexer.mll[430,11962+5]..src/lexer.mll[430,11962+11]),None)
                                                  expression (src/lexer.mll[430,11962+14]..src/lexer.mll[430,11962+20])
                                                    Texp_construct "PUBLIC"
                                                    []
                                                ]
                                              expression (src/lexer.mll[431,11984+4]..src/lexer.mll[435,12109+3]) ghost
                                                Texp_construct "::"
                                                [
                                                  expression (src/lexer.mll[431,11984+4]..src/lexer.mll[431,11984+26])
                                                    Texp_tuple
                                                    [
                                                      expression (src/lexer.mll[431,11984+4]..src/lexer.mll[431,11984+15])
                                                        Texp_constant Const_string("parameter",(src/lexer.mll[431,11984+5]..src/lexer.mll[431,11984+14]),None)
                                                      expression (src/lexer.mll[431,11984+17]..src/lexer.mll[431,11984+26])
                                                        Texp_construct "PARAMETER"
                                                        []
                                                    ]
                                                  expression (src/lexer.mll[432,12012+4]..src/lexer.mll[435,12109+3]) ghost
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/lexer.mll[432,12012+4]..src/lexer.mll[432,12012+20])
                                                        Texp_tuple
                                                        [
                                                          expression (src/lexer.mll[432,12012+4]..src/lexer.mll[432,12012+12])
                                                            Texp_constant Const_string("inline",(src/lexer.mll[432,12012+5]..src/lexer.mll[432,12012+11]),None)
                                                          expression (src/lexer.mll[432,12012+14]..src/lexer.mll[432,12012+20])
                                                            Texp_construct "INLINE"
                                                            []
                                                        ]
                                                      expression (src/lexer.mll[433,12034+4]..src/lexer.mll[435,12109+3]) ghost
                                                        Texp_construct "::"
                                                        [
                                                          expression (src/lexer.mll[433,12034+4]..src/lexer.mll[433,12034+33])
                                                            Texp_tuple
                                                            [
                                                              expression (src/lexer.mll[433,12034+4]..src/lexer.mll[433,12034+15])
                                                                Texp_constant Const_string("attribute",(src/lexer.mll[433,12034+5]..src/lexer.mll[433,12034+14]),None)
                                                              expression (src/lexer.mll[433,12034+17]..src/lexer.mll[433,12034+33])
                                                                Texp_construct "PERCENTATTRIBUTE"
                                                                []
                                                            ]
                                                          expression (src/lexer.mll[434,12069+4]..src/lexer.mll[435,12109+3]) ghost
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/lexer.mll[434,12069+4]..src/lexer.mll[434,12069+38])
                                                                Texp_tuple
                                                                [
                                                                  expression (src/lexer.mll[434,12069+4]..src/lexer.mll[434,12069+21])
                                                                    Texp_constant Const_string("on_error_reduce",(src/lexer.mll[434,12069+5]..src/lexer.mll[434,12069+20]),None)
                                                                  expression (src/lexer.mll[434,12069+23]..src/lexer.mll[434,12069+38])
                                                                    Texp_construct "ON_ERROR_REDUCE"
                                                                    []
                                                                ]
                                                              expression (src/lexer.mll[435,12109+2]..src/lexer.mll[435,12109+3]) ghost
                                                                Texp_construct "[]"
                                                                []
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
          ]
    ]
  structure_item (src/lexer.mll[441,12230+0]..src/lexer.mll[446,12336+12])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.mll[441,12230+4]..src/lexer.mll[441,12230+22])
          Tpat_var "char_for_backslash/1367"
        expression (src/lexer.mll[441,12230+25]..src/lexer.mll[446,12336+12])
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.mll[442,12264+4]..src/lexer.mll[442,12264+7])
                Tpat_constant Const_char 6e
              expression (src/lexer.mll[442,12264+11]..src/lexer.mll[442,12264+17])
                Texp_constant Const_char 0a
            <case>
              pattern (src/lexer.mll[443,12282+4]..src/lexer.mll[443,12282+7])
                Tpat_constant Const_char 72
              expression (src/lexer.mll[443,12282+11]..src/lexer.mll[443,12282+17])
                Texp_constant Const_char 0d
            <case>
              pattern (src/lexer.mll[444,12300+4]..src/lexer.mll[444,12300+7])
                Tpat_constant Const_char 62
              expression (src/lexer.mll[444,12300+11]..src/lexer.mll[444,12300+17])
                Texp_constant Const_char 08
            <case>
              pattern (src/lexer.mll[445,12318+4]..src/lexer.mll[445,12318+7])
                Tpat_constant Const_char 74
              expression (src/lexer.mll[445,12318+11]..src/lexer.mll[445,12318+17])
                Texp_constant Const_char 09
            <case>
              pattern (src/lexer.mll[446,12336+4]..src/lexer.mll[446,12336+5])
                Tpat_var "c/1369"
              expression (src/lexer.mll[446,12336+11]..src/lexer.mll[446,12336+12])
                Texp_ident "c/1369"
          ]
    ]
  structure_item (src/lexer.ml[438,12372+0]..src/lexer.ml[1694,99263+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexer.ml[438,12372+4]..src/lexer.ml[438,12372+22])
          Tpat_var "__ocaml_lex_tables/1370"
        expression (src/lexer.ml[438,12372+25]..src/lexer.ml[1694,99263+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (src/lexer.ml[440,12419+3]..src/lexer.ml[472,14659+21])
                    Texp_constant Const_string("\000\000\226\255\227\255\000\000\229\255\231\255\003\000\001\000\235\255\003\000\236\255\209\000\161\001q\002A\003\243\255\244\255\245\255\246\255\247\255\248\255\004\000\001\000\251\255\031\000\253\255\019\004\029\000\230\255\254\255\227\004\181\005\163\006\006\000\241\255\240\255\232\255s\007C\b\233\255\011\000\004\000\012\000\252\255\253\255\001\000\006\000\255\255\254\255|\000\250\255\251\255\007\000\252\255\007\000\254\255 \000\"\000\255\255\253\255`\001\243\255\244\255\b\000\245\255\247\255\248\255\236\001\t\000\000\000\254\255\255\255\246\255\r\000\017\000\019\000\022\000`\000\"\000\023\000\019\000&\000\028\000 \000\026\000\026\0009\000)\000(\000.\0009\0001\000.\000\012\000z\bQ\tz\000#\001\251\255\251\255/\000B\000-\000A\0005\0006\000E\000C\000\249\255D\000C\000T\000V\000V\000F\000T\000O\000J\000\132\000\168\000\156\000\157\000\161\000\159\000\250\255\000\003\243\255\244\255\t\000\245\255\247\255\248\255\140\003\253\255\254\255\011\000\246\255\186\000\190\000\192\000\242\000>\001\206\000\224\000\189\000\237\000\225\000\229\000\223\000\233\000\254\000\238\000\237\000\243\000\254\000\246\000\244\000\015\000\136\t_\n\246\001\007\002\251\255\251\255\245\000\b\001\244\000\019\001\007\001\b\001\012\001\011\001\249\255\012\001\011\001\028\001\030\001\030\001\016\001!\001\028\001\023\001\026\001)\001\029\001\030\0019\001V\001\250\255U\011\246\255\247\255\n\000\248\255\250\255\251\255\014\000\253\255\254\255\255\255\249\255\228\002\249\255\250\255\r\000\251\255\252\255\253\255\015\000\179\001\255\255\254\255\188\003\251\255\252\255\016\000\254\255\242\001\255\255\253\255\017\000\142\004\249\255\250\255\018\000\251\255A\011\255\255\252\255\253\255\254\255\202\002\253\255I\011\255\255\254\255\236\002\000\000\214\001\183\001\146\004\184\0017\005\204\002\215\001\218\001\255\255\n\002\017\002\254\255\011\002\000\006\012\002\161\002\253\255\254\255\019\000\255\255",(src/lexer.ml[440,12419+4]..src/lexer.ml[472,14659+20]),None)
                "Lexing.lex_backtrk"
                  expression (src/lexer.ml[474,14705+3]..src/lexer.ml[506,16945+21])
                    Texp_constant Const_string("\255\255\255\255\255\255\029\000\255\255\255\255\021\000\020\000\255\255\029\000\255\255\018\000\017\000\017\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\255\255\003\000\255\255\029\000\255\255\255\255\255\255\000\000\255\255\027\000\027\000\255\255\255\255\255\255\017\000\016\000\255\255\255\255\020\000\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\255\255\255\255\255\255\255\255\nnsrc/lexer.ml[474,14705+4]..src/lexer.ml[506,16945+20]),None)
                "Lexing.lex_default"
                  expression (src/lexer.ml[508,16991+3]..src/lexer.ml[540,19231+21])
                    Texp_constant Const_string~src/lexer.ml[508,16991+4]..src/lexer.ml[540,19231+20]),None)
                "Lexing.lex_trans"
                  expression (src/lexer.ml[542,19275+3]..src/lexer.ml[936,46855+53])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\b\000\b\000\006\000\007\000\b\000!\000/\0005\000@\000\129\000\193\000\b\000/\000\205\000)\000.\000\216\000\216\000\225\000\001\001\000\000\000\000\006\000\000\000\n\000\006\000\000\000\026\000!\000\249\000\021\000\020\000\017\000\016\000\023\000'\000$\000\t\0000\000;\000(\000H\000^\000\136\000-\000\158\000\200\000\211\000\024\000\025\000\005\000\022\000#\000\018\000\031\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\"\000\031\000:\000\014\000:\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\004\000\019\000F\000\015\000q\000p\000o\000J\000m\000Q\000P\0005\000e\000R\0004\000N\000S\000T\000U\000V\000O\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000W\000X\000Y\000Z\000[\000d\000\\\000]\000]\000f\0006\000g\000h\000i\000j\0009\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000k\000l\000n\000Y\000Y\000]\0007\000r\000s\000t\000u\000v\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\0008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000w\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\002\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255,\000x\000y\000z\000{\000|\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\177\000\176\000\175\000\173\000\011\000\165\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000b\000\145\000\144\000\146\000\147\000\148\000\149\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a`csrc/lexer.ml[542,19275+4]..src/lexer.ml[936,46855+52]),None)
                "Lexing.lex_check"
                  expression (src/lexer.ml[938,46931+3]..src/lexer.ml[1332,74511+53])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\007\000\006\000\000\000)\000!\000.\0004\000?\000\128\000\192\000(\000*\000\204\000(\000*\000\215\000\220\000\224\000\000\001\255\255\255\255\000\000\255\255\000\000\006\000\255\255\000\000!\000\237\000\000\000\000\000\000\000\000\000\000\000\t\000\021\000\000\000-\0006\000\t\000D\000]\000\135\000*\000\157\000\196\000\208\000\000\000\000\000\000\000\000\000\022\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\027\0008\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000\000\000I\000J\000K\000L\000N\000O\000O\0001\000P\000Q\0001\000L\000R\000S\000T\000U\000L\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000V\000W\000X\000Y\000Y\000Z\000[\000\\\000d\000e\0001\000f\000g\000h\000i\0001\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000j\000k\000m\000n\000o\000p\0001\000q\000r\000s\000t\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000(\000*\000w\000x\000y\000z\000{\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\137\000\138\000\139\000\142\000\011\000\144\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000a\000\143\000\143\000\145\000\146\000\147\000\148\000a\000a\000a\000a\000a\000a\000a\000a\000a\000ar\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\253\000\255\255\255\255\253\000\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\231\000\255\255\201\000\255\255\255\255\201\000\217\000\243\000\255\255\255\255\236\000\255\255\255\255\236\000\255\255\255\255\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\201\000\255\255\255\255\255\255}\000\201\000\201\000}\000\201\000\255\255\255\255\255\255\255\255\236\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}\000\255\255\231\000}\000}\000}\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\236\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000}\000\255\255}}src/lexer.ml[938,46931+4]..src/lexer.ml[1332,74511+52]),None)
                "Lexing.lex_base_code"
                  expression (src/lexer.ml[1334,74591+3]..src/lexer.ml[1366,76831+21])
                    Texp_constant Const_stringb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\n\000\000\000\t\001\217\001N\000X\0004\000C\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000%\000\001\000\016\002\224\002i\000ssrc/lexer.ml[1334,74591+4]..src/lexer.ml[1366,76831+20]),None)
                "Lexing.lex_backtrk_code"
                  expression (src/lexer.ml[1368,76882+3]..src/lexer.ml[1400,79122+21])
                    Texp_constant Const_stringsrc/lexer.ml[1368,76882+4]..src/lexer.ml[1400,79122+20]),None)
                "Lexing.lex_default_code"
                  expression (src/lexer.ml[1402,79173+3]..src/lexer.ml[1434,81413+21])
                    Texp_constant Const_stringsrc/lexer.ml[1402,79173+4]..src/lexer.ml[1434,81413+20]),None)
                "Lexing.lex_trans_code"
                  expression (src/lexer.ml[1436,81462+3]..src/lexer.ml[1560,90142+13])
                    Texp_constant Const_stringsrc/lexer.ml[1436,81462+4]..src/lexer.ml[1560,90142+12]),None)
                "Lexing.lex_check_code"
                  expression (src/lexer.ml[1562,90183+3]..src/lexer.ml[1686,98863+13])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255<\000\000\000}\000\255\255]\000\157\000\255\255\255\255\255\255\255\255\031\000\255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\255\255\255\255\255\255\031\000\255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000C\000X\000\\\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000d\000n\000o\000psrc/lexer.ml[1562,90183+4]..src/lexer.ml[1686,98863+12]),None)
                "Lexing.lex_code"
                  expression (src/lexer.ml[1688,98898+3]..src/lexer.ml[1693,99248+13])
                    Texp_constant Const_string("\255\002\255\255\003\255\255\000\002\001\003\255\n\255\t\255\b\255\255\n\255\t\255\255\011\255\255\007\255\003\255\005\b\004\n\001\t\000\011\255\012\255\255\014\255\255\r\255\255\015\255\255\007\255\005\b\004\n\003\014\002\015\001\t\000\011\255\003\255\007\012\006\r\005\b\004\n\001\t\000\011\255",(src/lexer.ml[1688,98898+4]..src/lexer.ml[1693,99248+12]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/lexer.ml[1696,99266+0]..src/lexer.ml[2486,121371+53])
    Tstr_value Rec
    [
      <def>
        pattern (src/lexer.ml[1696,99266+8]..src/lexer.ml[1696,99266+12])
          Tpat_var "main/1371"
        expression (src/lexer.ml[1696,99266+13]..src/lexer.ml[1699,99415+30]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1696,99266+13]..src/lexer.ml[1696,99266+19])
                Tpat_var "lexbuf/1395"
              expression (src/lexer.ml[1697,99288+2]..src/lexer.ml[1699,99415+30])
                Texp_sequence
                expression (src/lexer.ml[1697,99288+2]..src/lexer.ml[1697,99288+44])
                  Texp_setfield
                  expression (src/lexer.ml[1697,99288+2]..src/lexer.ml[1697,99288+8])
                    Texp_ident "lexbuf/1395"
                  "Lexing.lex_mem"
                  expression (src/lexer.ml[1697,99288+27]..src/lexer.ml[1697,99288+44])
                    Texp_apply
                    expression (src/lexer.ml[1697,99288+27]..src/lexer.ml[1697,99288+37])
                      Texp_ident "Stdlib!.Array.make"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1697,99288+38]..src/lexer.ml[1697,99288+39])
                          Texp_constant Const_int 4
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1697,99288+40]..src/lexer.ml[1697,99288+44])
                          Texp_constant Const_int -1
                    ]
                expression (src/lexer.ml[1698,99355+2]..src/lexer.ml[1699,99415+30])
                  Texp_sequence
                  expression (src/lexer.ml[1698,99355+2]..src/lexer.ml[1698,99355+57])
                    Texp_apply
                    expression (src/lexer.ml[1698,99355+2]..src/lexer.ml[1698,99355+57]) ghost
                      Texp_ident "Stdlib!.Array.set"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1698,99355+2]..src/lexer.ml[1698,99355+23])
                          Texp_field
                          expression (src/lexer.ml[1698,99355+2]..src/lexer.ml[1698,99355+8])
                            Texp_ident "lexbuf/1395"
                          "Lexing.lex_mem"
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1698,99355+25]..src/lexer.ml[1698,99355+26])
                          Texp_constant Const_int 2
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1698,99355+31]..src/lexer.ml[1698,99355+57])
                          Texp_field
                          expression (src/lexer.ml[1698,99355+31]..src/lexer.ml[1698,99355+37])
                            Texp_ident "lexbuf/1395"
                          "Lexing.lex_curr_pos"
                    ]
                  expression (src/lexer.ml[1699,99415+1]..src/lexer.ml[1699,99415+30])
                    Texp_apply
                    expression (src/lexer.ml[1699,99415+1]..src/lexer.ml[1699,99415+21])
                      Texp_ident "__ocaml_lex_main_rec/1372"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1699,99415+22]..src/lexer.ml[1699,99415+28])
                          Texp_ident "lexbuf/1395"
                      <arg>
                        Nolabel
                        expression (src/lexer.ml[1699,99415+29]..src/lexer.ml[1699,99415+30])
                          Texp_constant Const_int 0
                    ]
          ]
      <def>
        pattern (src/lexer.ml[1700,99446+4]..src/lexer.ml[1700,99446+24])
          Tpat_var "__ocaml_lex_main_rec/1372"
        expression (src/lexer.ml[1700,99446+25]..src/lexer.ml[1937,105734+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1700,99446+25]..src/lexer.ml[1700,99446+31])
                Tpat_var "lexbuf/1396"
              expression (src/lexer.ml[1700,99446+32]..src/lexer.ml[1937,105734+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[1700,99446+32]..src/lexer.ml[1700,99446+49])
                      Tpat_var "__ocaml_lex_state/1397"
                    expression (src/lexer.ml[1701,99498+2]..src/lexer.ml[1937,105734+51])
                      Texp_match
                      expression (src/lexer.ml[1701,99498+8]..src/lexer.ml[1701,99498+69])
                        Texp_apply
                        expression (src/lexer.ml[1701,99498+8]..src/lexer.ml[1701,99498+25])
                          Texp_ident "Stdlib!.Lexing.new_engine"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[1701,99498+26]..src/lexer.ml[1701,99498+44])
                              Texp_ident "__ocaml_lex_tables/1370"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[1701,99498+45]..src/lexer.ml[1701,99498+62])
                              Texp_ident "__ocaml_lex_state/1397"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[1701,99498+63]..src/lexer.ml[1701,99498+69])
                              Texp_ident "lexbuf/1396"
                        ]
                      [
                        <case>
                          pattern (src/lexer.ml[1702,99573+8]..src/lexer.ml[1702,99573+9])
                            Tpat_value
                            pattern (src/lexer.ml[1702,99573+8]..src/lexer.ml[1702,99573+9])
                              Tpat_constant Const_int 0
                          expression (src/lexer.ml[1703,99586+0]..src/lexer.mll[491,99822+74])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[489,99612+21]..src/lexer.mll[489,99612+30])
                                  Tpat_var "directive/1399"
                                expression (src/lexer.ml[1707,99665+2]..src/lexer.ml[1707,99665+87])
                                  Texp_apply
                                  expression (src/lexer.ml[1707,99665+2]..src/lexer.ml[1707,99665+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1707,99665+20]..src/lexer.ml[1707,99665+26])
                                        Texp_ident "lexbuf/1396"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1707,99665+27]..src/lexer.ml[1707,99665+60])
                                        Texp_apply
                                        expression (src/lexer.ml[1707,99665+56]..src/lexer.ml[1707,99665+57])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1707,99665+28]..src/lexer.ml[1707,99665+55])
                                              Texp_field
                                              expression (src/lexer.ml[1707,99665+28]..src/lexer.ml[1707,99665+34])
                                                Texp_ident "lexbuf/1396"
                                              "Lexing.lex_start_pos"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1707,99665+58]..src/lexer.ml[1707,99665+59])
                                              Texp_constant Const_int 1
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1707,99665+61]..src/lexer.ml[1707,99665+87])
                                        Texp_field
                                        expression (src/lexer.ml[1707,99665+61]..src/lexer.ml[1707,99665+67])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (src/lexer.mll[490,99778+4]..src/lexer.mll[491,99822+74])
                              Texp_try
                              expression (src/lexer.mll[490,99778+10]..src/lexer.mll[490,99778+43])
                                Texp_apply
                                expression (src/lexer.mll[490,99778+10]..src/lexer.mll[490,99778+22])
                                  Texp_ident "Stdlib!.Hashtbl.find"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[490,99778+23]..src/lexer.mll[490,99778+33])
                                      Texp_ident "directives/1361"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[490,99778+34]..src/lexer.mll[490,99778+43])
                                      Texp_ident "directive/1399"
                                ]
                              [
                                <case>
                                  pattern (src/lexer.mll[491,99822+11]..src/lexer.mll[491,99822+20])
                                    Tpat_construct "Not_found"
                                    []
                                    None
                                  expression (src/lexer.mll[491,99822+24]..src/lexer.mll[491,99822+72])
                                    Texp_apply
                                    expression (src/lexer.mll[491,99822+24]..src/lexer.mll[491,99822+30])
                                      Texp_ident "error2/509"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[491,99822+31]..src/lexer.mll[491,99822+37])
                                          Texp_ident "lexbuf/1396"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62])
                                          Texp_construct "CamlinternalFormatBasics.Format"
                                          [
                                            expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                              [
                                                expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                  Texp_constant Const_string("unknown directive: ",(src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost,None)
                                                expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                  [
                                                    expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                      []
                                                    expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                      [
                                                        expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                          Texp_constant Const_char 2e
                                                        expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                          []
                                                      ]
                                                  ]
                                              ]
                                            expression (src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost
                                              Texp_constant Const_string("unknown directive: %s.",(src/lexer.mll[491,99822+38]..src/lexer.mll[491,99822+62]) ghost,None)
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[491,99822+63]..src/lexer.mll[491,99822+72])
                                          Texp_ident "directive/1399"
                                    ]
                              ]
                        <case>
                          pattern (src/lexer.ml[1713,99920+4]..src/lexer.ml[1713,99920+5])
                            Tpat_value
                            pattern (src/lexer.ml[1713,99920+4]..src/lexer.ml[1713,99920+5])
                              Tpat_constant Const_int 1
                          expression (src/lexer.mll[493,99951+4]..src/lexer.mll[503,100488+10])
                            Texp_construct "PERCENTPERCENT"
                            [
                              expression (src/lexer.mll[499,100319+21]..src/lexer.mll[503,100488+8])
                                Texp_lazy                                expression (src/lexer.mll[499,100319+27]..src/lexer.mll[503,100488+7])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[500,100348+12]..src/lexer.mll[500,100348+22])
                                        Tpat_var "openingpos/1413"
                                      expression (src/lexer.mll[500,100348+25]..src/lexer.mll[500,100348+44])
                                        Texp_apply
                                        expression (src/lexer.mll[500,100348+25]..src/lexer.mll[500,100348+37])
                                          Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[500,100348+38]..src/lexer.mll[500,100348+44])
                                              Texp_ident "lexbuf/1396"
                                        ]
                                  ]
                                  expression (src/lexer.mll[501,100396+8]..src/lexer.mll[502,100438+49])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/lexer.mll[501,100396+12]..src/lexer.mll[501,100396+22])
                                          Tpat_var "closingpos/1414"
                                        expression (src/lexer.mll[501,100396+25]..src/lexer.mll[501,100396+38])
                                          Texp_apply
                                          expression (src/lexer.mll[501,100396+25]..src/lexer.mll[501,100396+31])
                                            Texp_ident "finish/1393"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[501,100396+32]..src/lexer.mll[501,100396+38])
                                                Texp_ident "lexbuf/1396"
                                          ]
                                    ]
                                    expression (src/lexer.mll[502,100438+8]..src/lexer.mll[502,100438+49])
                                      Texp_apply
                                      expression (src/lexer.mll[502,100438+8]..src/lexer.mll[502,100438+18])
                                        Texp_ident "mk_stretch/1200"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[502,100438+19]..src/lexer.mll[502,100438+29])
                                            Texp_ident "openingpos/1413"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[502,100438+30]..src/lexer.mll[502,100438+40])
                                            Texp_ident "closingpos/1414"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[502,100438+41]..src/lexer.mll[502,100438+46])
                                            Texp_construct "false"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[502,100438+47]..src/lexer.mll[502,100438+49])
                                            Texp_construct "[]"
                                            []
                                      ]
                            ]
                        <case>
                          pattern (src/lexer.ml[1728,100522+4]..src/lexer.ml[1728,100522+5])
                            Tpat_value
                            pattern (src/lexer.ml[1728,100522+4]..src/lexer.ml[1728,100522+5])
                              Tpat_constant Const_int 2
                          expression (src/lexer.mll[505,100553+4]..src/lexer.mll[505,100553+12])
                            Texp_construct "SEMI"
                            []
                        <case>
                          pattern (src/lexer.ml[1733,100589+4]..src/lexer.ml[1733,100589+5])
                            Tpat_value
                            pattern (src/lexer.ml[1733,100589+4]..src/lexer.ml[1733,100589+5])
                              Tpat_constant Const_int 3
                          expression (src/lexer.mll[507,100620+4]..src/lexer.mll[507,100620+13])
                            Texp_construct "COLON"
                            []
                        <case>
                          pattern (src/lexer.ml[1738,100657+4]..src/lexer.ml[1738,100657+5])
                            Tpat_value
                            pattern (src/lexer.ml[1738,100657+4]..src/lexer.ml[1738,100657+5])
                              Tpat_constant Const_int 4
                          expression (src/lexer.mll[509,100688+4]..src/lexer.mll[509,100688+13])
                            Texp_construct "COMMA"
                            []
                        <case>
                          pattern (src/lexer.ml[1743,100725+4]..src/lexer.ml[1743,100725+5])
                            Tpat_value
                            pattern (src/lexer.ml[1743,100725+4]..src/lexer.ml[1743,100725+5])
                              Tpat_constant Const_int 5
                          expression (src/lexer.mll[511,100756+4]..src/lexer.mll[511,100756+13])
                            Texp_construct "EQUAL"
                            []
                        <case>
                          pattern (src/lexer.ml[1748,100793+4]..src/lexer.ml[1748,100793+5])
                            Tpat_value
                            pattern (src/lexer.ml[1748,100793+4]..src/lexer.ml[1748,100793+5])
                              Tpat_constant Const_int 6
                          expression (src/lexer.mll[513,100824+4]..src/lexer.mll[513,100824+14])
                            Texp_construct "LPAREN"
                            []
                        <case>
                          pattern (src/lexer.ml[1753,100862+4]..src/lexer.ml[1753,100862+5])
                            Tpat_value
                            pattern (src/lexer.ml[1753,100862+4]..src/lexer.ml[1753,100862+5])
                              Tpat_constant Const_int 7
                          expression (src/lexer.mll[515,100893+4]..src/lexer.mll[515,100893+14])
                            Texp_construct "RPAREN"
                            []
                        <case>
                          pattern (src/lexer.ml[1758,100931+4]..src/lexer.ml[1758,100931+5])
                            Tpat_value
                            pattern (src/lexer.ml[1758,100931+4]..src/lexer.ml[1758,100931+5])
                              Tpat_constant Const_int 8
                          expression (src/lexer.mll[517,100962+4]..src/lexer.mll[517,100962+11])
                            Texp_construct "BAR"
                            []
                        <case>
                          pattern (src/lexer.ml[1763,100997+4]..src/lexer.ml[1763,100997+5])
                            Tpat_value
                            pattern (src/lexer.ml[1763,100997+4]..src/lexer.ml[1763,100997+5])
                              Tpat_constant Const_int 9
                          expression (src/lexer.mll[519,101028+4]..src/lexer.mll[519,101028+16])
                            Texp_construct "QUESTION"
                            []
                        <case>
                          pattern (src/lexer.ml[1768,101068+4]..src/lexer.ml[1768,101068+6])
                            Tpat_value
                            pattern (src/lexer.ml[1768,101068+4]..src/lexer.ml[1768,101068+6])
                              Tpat_constant Const_int 10
                          expression (src/lexer.mll[521,101100+4]..src/lexer.mll[521,101100+12])
                            Texp_construct "STAR"
                            []
                        <case>
                          pattern (src/lexer.ml[1773,101136+4]..src/lexer.ml[1773,101136+6])
                            Tpat_value
                            pattern (src/lexer.ml[1773,101136+4]..src/lexer.ml[1773,101136+6])
                              Tpat_constant Const_int 11
                          expression (src/lexer.mll[523,101168+4]..src/lexer.mll[523,101168+12])
                            Texp_construct "PLUS"
                            []
                        <case>
                          pattern (src/lexer.ml[1778,101204+4]..src/lexer.ml[1778,101204+6])
                            Tpat_value
                            pattern (src/lexer.ml[1778,101204+4]..src/lexer.ml[1778,101204+6])
                              Tpat_constant Const_int 12
                          expression (src/lexer.mll[525,101236+4]..src/lexer.mll[525,101236+13])
                            Texp_construct "TILDE"
                            []
                        <case>
                          pattern (src/lexer.ml[1783,101273+4]..src/lexer.ml[1783,101273+6])
                            Tpat_value
                            pattern (src/lexer.ml[1783,101273+4]..src/lexer.ml[1783,101273+6])
                              Tpat_constant Const_int 13
                          expression (src/lexer.mll[527,101305+4]..src/lexer.mll[527,101305+18])
                            Texp_construct "UNDERSCORE"
                            []
                        <case>
                          pattern (src/lexer.ml[1788,101347+4]..src/lexer.ml[1788,101347+6])
                            Tpat_value
                            pattern (src/lexer.ml[1788,101347+4]..src/lexer.ml[1788,101347+6])
                              Tpat_constant Const_int 14
                          expression (src/lexer.mll[529,101379+4]..src/lexer.mll[529,101379+18])
                            Texp_construct "COLONEQUAL"
                            []
                        <case>
                          pattern (src/lexer.ml[1793,101421+4]..src/lexer.ml[1793,101421+6])
                            Tpat_value
                            pattern (src/lexer.ml[1793,101421+4]..src/lexer.ml[1793,101421+6])
                              Tpat_constant Const_int 15
                          expression (src/lexer.mll[531,101453+4]..src/lexer.mll[531,101453+18])
                            Texp_construct "EQUALEQUAL"
                            []
                        <case>
                          pattern (src/lexer.ml[1798,101495+4]..src/lexer.ml[1798,101495+6])
                            Tpat_value
                            pattern (src/lexer.ml[1798,101495+4]..src/lexer.ml[1798,101495+6])
                              Tpat_constant Const_int 16
                          expression (src/lexer.mll[533,101527+4]..src/lexer.mll[533,101527+11])
                            Texp_construct "LET"
                            []
                        <case>
                          pattern (src/lexer.ml[1803,101562+4]..src/lexer.ml[1803,101562+6])
                            Tpat_value
                            pattern (src/lexer.ml[1803,101562+4]..src/lexer.ml[1803,101562+6])
                              Tpat_constant Const_int 17
                          expression (src/lexer.ml[1804,101572+0]..src/lexer.mll[539,101904+5])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[534,101598+29]..src/lexer.mll[534,101598+31])
                                  Tpat_var "id/1417"
                                expression (src/lexer.ml[1808,101652+2]..src/lexer.ml[1808,101652+81])
                                  Texp_apply
                                  expression (src/lexer.ml[1808,101652+2]..src/lexer.ml[1808,101652+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1808,101652+20]..src/lexer.ml[1808,101652+26])
                                        Texp_ident "lexbuf/1396"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1808,101652+27]..src/lexer.ml[1808,101652+54])
                                        Texp_field
                                        expression (src/lexer.ml[1808,101652+27]..src/lexer.ml[1808,101652+33])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1808,101652+55]..src/lexer.ml[1808,101652+81])
                                        Texp_field
                                        expression (src/lexer.ml[1808,101652+55]..src/lexer.ml[1808,101652+61])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (src/lexer.mll[535,101759+4]..src/lexer.mll[539,101904+5])
                              Texp_ifthenelse
                              expression (src/lexer.mll[535,101759+9]..src/lexer.mll[535,101759+32])
                                Texp_apply
                                expression (src/lexer.mll[535,101759+9]..src/lexer.mll[535,101759+20])
                                  Texp_ident "Stdlib!.Hashtbl.mem"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[535,101759+21]..src/lexer.mll[535,101759+29])
                                      Texp_ident "reserved/1354"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[535,101759+30]..src/lexer.mll[535,101759+32])
                                      Texp_ident "id/1417"
                                ]
                              expression (src/lexer.mll[536,101797+8]..src/lexer.mll[536,101797+55])
                                Texp_apply
                                expression (src/lexer.mll[536,101797+8]..src/lexer.mll[536,101797+14])
                                  Texp_ident "error2/509"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[536,101797+15]..src/lexer.mll[536,101797+21])
                                      Texp_ident "lexbuf/1396"
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55])
                                      Texp_construct "CamlinternalFormatBasics.Format"
                                      [
                                        expression (src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost
                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                          [
                                            expression (src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost
                                              Texp_constant Const_string("this is an OCaml reserved word.",(src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost,None)
                                            expression (src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost
                                              Texp_construct "CamlinternalFormatBasics.End_of_format"
                                              []
                                          ]
                                        expression (src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost
                                          Texp_constant Const_string("this is an OCaml reserved word.",(src/lexer.mll[536,101797+22]..src/lexer.mll[536,101797+55]) ghost,None)
                                      ]
                                ]
                              Some
                                expression (src/lexer.mll[538,101864+8]..src/lexer.mll[538,101864+39])
                                  Texp_construct "LID"
                                  [
                                    expression (src/lexer.mll[538,101864+12]..src/lexer.mll[538,101864+39])
                                      Texp_apply
                                      expression (src/lexer.mll[538,101864+13]..src/lexer.mll[538,101864+21])
                                        Texp_ident "Dune__exe!.Positions.with_pos"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[538,101864+22]..src/lexer.mll[538,101864+35])
                                            Texp_apply
                                            expression (src/lexer.mll[538,101864+23]..src/lexer.mll[538,101864+27])
                                              Texp_ident "Dune__exe!.Positions.cpos"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[538,101864+28]..src/lexer.mll[538,101864+34])
                                                  Texp_ident "lexbuf/1396"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[538,101864+36]..src/lexer.mll[538,101864+38])
                                            Texp_ident "id/1417"
                                      ]
                                  ]
                        <case>
                          pattern (src/lexer.ml[1817,101933+4]..src/lexer.ml[1817,101933+6])
                            Tpat_value
                            pattern (src/lexer.ml[1817,101933+4]..src/lexer.ml[1817,101933+6])
                              Tpat_constant Const_int 18
                          expression (src/lexer.ml[1818,101943+0]..src/lexer.mll[541,102130+39])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[540,101969+29]..src/lexer.mll[540,101969+31])
                                  Tpat_var "id/1418"
                                expression (src/lexer.ml[1822,102023+2]..src/lexer.ml[1822,102023+81])
                                  Texp_apply
                                  expression (src/lexer.ml[1822,102023+2]..src/lexer.ml[1822,102023+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1822,102023+20]..src/lexer.ml[1822,102023+26])
                                        Texp_ident "lexbuf/1396"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1822,102023+27]..src/lexer.ml[1822,102023+54])
                                        Texp_field
                                        expression (src/lexer.ml[1822,102023+27]..src/lexer.ml[1822,102023+33])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1822,102023+55]..src/lexer.ml[1822,102023+81])
                                        Texp_field
                                        expression (src/lexer.ml[1822,102023+55]..src/lexer.ml[1822,102023+61])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (src/lexer.mll[541,102130+4]..src/lexer.mll[541,102130+39])
                              Texp_construct "UID"
                              [
                                expression (src/lexer.mll[541,102130+10]..src/lexer.mll[541,102130+37])
                                  Texp_apply
                                  expression (src/lexer.mll[541,102130+11]..src/lexer.mll[541,102130+19])
                                    Texp_ident "Dune__exe!.Positions.with_pos"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[541,102130+20]..src/lexer.mll[541,102130+33])
                                        Texp_apply
                                        expression (src/lexer.mll[541,102130+21]..src/lexer.mll[541,102130+25])
                                          Texp_ident "Dune__exe!.Positions.cpos"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[541,102130+26]..src/lexer.mll[541,102130+32])
                                              Texp_ident "lexbuf/1396"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[541,102130+34]..src/lexer.mll[541,102130+36])
                                        Texp_ident "id/1418"
                                  ]
                              ]
                        <case>
                          pattern (src/lexer.ml[1827,102193+4]..src/lexer.ml[1827,102193+6])
                            Tpat_value
                            pattern (src/lexer.ml[1827,102193+4]..src/lexer.ml[1827,102193+6])
                              Tpat_constant Const_int 19
                          expression (src/lexer.mll[546,102225+4]..src/lexer.mll[551,102482+29])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[546,102225+10]..src/lexer.mll[546,102225+16])
                                  Tpat_var "buffer/1419"
                                expression (src/lexer.mll[546,102225+19]..src/lexer.mll[546,102225+35])
                                  Texp_apply
                                  expression (src/lexer.mll[546,102225+19]..src/lexer.mll[546,102225+32])
                                    Texp_ident "Stdlib!.Buffer.create"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[546,102225+33]..src/lexer.mll[546,102225+35])
                                        Texp_constant Const_int 16
                                  ]
                            ]
                            expression (src/lexer.mll[547,102264+6]..src/lexer.mll[551,102482+27])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[547,102264+10]..src/lexer.mll[547,102264+20])
                                    Tpat_var "openingpos/1502"
                                  expression (src/lexer.mll[547,102264+23]..src/lexer.mll[547,102264+44])
                                    Texp_apply
                                    expression (src/lexer.mll[547,102264+23]..src/lexer.mll[547,102264+37])
                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[547,102264+38]..src/lexer.mll[547,102264+44])
                                          Texp_ident "lexbuf/1396"
                                    ]
                              ]
                              expression (src/lexer.mll[548,102312+6]..src/lexer.mll[551,102482+27])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[548,102312+10]..src/lexer.mll[548,102312+17])
                                      Tpat_var "content/1503"
                                    expression (src/lexer.mll[548,102312+20]..src/lexer.mll[548,102312+58])
                                      Texp_apply
                                      expression (src/lexer.mll[548,102312+20]..src/lexer.mll[548,102312+33])
                                        Texp_ident "record_string/1387"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[548,102312+34]..src/lexer.mll[548,102312+44])
                                            Texp_ident "openingpos/1502"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[548,102312+45]..src/lexer.mll[548,102312+51])
                                            Texp_ident "buffer/1419"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[548,102312+52]..src/lexer.mll[548,102312+58])
                                            Texp_ident "lexbuf/1396"
                                      ]
                                ]
                                expression (src/lexer.mll[549,102374+6]..src/lexer.mll[551,102482+27])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[549,102374+10]..src/lexer.mll[549,102374+12])
                                        Tpat_var "id/1504"
                                      expression (src/lexer.mll[549,102374+15]..src/lexer.mll[549,102374+46])
                                        Texp_apply
                                        expression (src/lexer.mll[549,102374+15]..src/lexer.mll[549,102374+29])
                                          Texp_ident "Stdlib!.Printf.sprintf"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                  [
                                                    expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                      Texp_constant Const_char 22
                                                    expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                          [
                                                            expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                              Texp_constant Const_char 22
                                                            expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                              []
                                                          ]
                                                      ]
                                                  ]
                                                expression (src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost
                                                  Texp_constant Const_string("\"%s\"",(src/lexer.mll[549,102374+30]..src/lexer.mll[549,102374+38]) ghost,None)
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[549,102374+39]..src/lexer.mll[549,102374+46])
                                              Texp_ident "content/1503"
                                        ]
                                  ]
                                  expression (src/lexer.mll[550,102424+6]..src/lexer.mll[551,102482+27])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/lexer.mll[550,102424+10]..src/lexer.mll[550,102424+13])
                                          Tpat_var "pos/1505"
                                        expression (src/lexer.mll[550,102424+16]..src/lexer.mll[550,102424+54])
                                          Texp_apply
                                          expression (src/lexer.mll[550,102424+16]..src/lexer.mll[550,102424+22])
                                            Texp_ident "Dune__exe!.Positions.import"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[550,102424+23]..src/lexer.mll[550,102424+54])
                                                Texp_tuple
                                                [
                                                  expression (src/lexer.mll[550,102424+24]..src/lexer.mll[550,102424+34])
                                                    Texp_ident "openingpos/1502"
                                                  expression (src/lexer.mll[550,102424+36]..src/lexer.mll[550,102424+53])
                                                    Texp_field
                                                    expression (src/lexer.mll[550,102424+36]..src/lexer.mll[550,102424+42])
                                                      Texp_ident "lexbuf/1396"
                                                    "lex_curr_p"
                                                ]
                                          ]
                                    ]
                                    expression (src/lexer.mll[551,102482+6]..src/lexer.mll[551,102482+27])
                                      Texp_construct "QID"
                                      [
                                        expression (src/lexer.mll[551,102482+10]..src/lexer.mll[551,102482+27])
                                          Texp_apply
                                          expression (src/lexer.mll[551,102482+11]..src/lexer.mll[551,102482+19])
                                            Texp_ident "Dune__exe!.Positions.with_pos"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[551,102482+20]..src/lexer.mll[551,102482+23])
                                                Texp_ident "pos/1505"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[551,102482+24]..src/lexer.mll[551,102482+26])
                                                Texp_ident "id/1504"
                                          ]
                                      ]
                        <case>
                          pattern (src/lexer.ml[1837,102535+4]..src/lexer.ml[1837,102535+6])
                            Tpat_value
                            pattern (src/lexer.ml[1837,102535+4]..src/lexer.ml[1837,102535+6])
                              Tpat_constant Const_int 20
                          expression (src/lexer.mll[554,102567+4]..src/lexer.mll[554,102567+36])
                            Texp_sequence
                            expression (src/lexer.mll[554,102567+6]..src/lexer.mll[554,102567+21])
                              Texp_apply
                              expression (src/lexer.mll[554,102567+6]..src/lexer.mll[554,102567+14])
                                Texp_ident "Stdlib!.Lexing.new_line"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[554,102567+15]..src/lexer.mll[554,102567+21])
                                    Texp_ident "lexbuf/1396"
                              ]
                            expression (src/lexer.mll[554,102567+23]..src/lexer.mll[554,102567+34])
                              Texp_apply
                              expression (src/lexer.mll[554,102567+23]..src/lexer.mll[554,102567+27])
                                Texp_ident "main/1371"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[554,102567+28]..src/lexer.mll[554,102567+34])
                                    Texp_ident "lexbuf/1396"
                              ]
                        <case>
                          pattern (src/lexer.ml[1842,102627+4]..src/lexer.ml[1842,102627+6])
                            Tpat_value
                            pattern (src/lexer.ml[1842,102627+4]..src/lexer.ml[1842,102627+6])
                              Tpat_constant Const_int 21
                          expression (src/lexer.mll[556,102659+4]..src/lexer.mll[556,102659+19])
                            Texp_apply
                            expression (src/lexer.mll[556,102659+6]..src/lexer.mll[556,102659+10])
                              Texp_ident "main/1371"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[556,102659+11]..src/lexer.mll[556,102659+17])
                                  Texp_ident "lexbuf/1396"
                            ]
                        <case>
                          pattern (src/lexer.ml[1847,102702+4]..src/lexer.ml[1847,102702+6])
                            Tpat_value
                            pattern (src/lexer.ml[1847,102702+4]..src/lexer.ml[1847,102702+6])
                              Tpat_constant Const_int 22
                          expression (src/lexer.mll[558,102734+4]..src/lexer.mll[558,102734+59])
                            Texp_sequence
                            expression (src/lexer.mll[558,102734+6]..src/lexer.mll[558,102734+44])
                              Texp_apply
                              expression (src/lexer.mll[558,102734+6]..src/lexer.mll[558,102734+13])
                                Texp_ident "comment/1373"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[558,102734+14]..src/lexer.mll[558,102734+37])
                                    Texp_apply
                                    expression (src/lexer.mll[558,102734+15]..src/lexer.mll[558,102734+29])
                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[558,102734+30]..src/lexer.mll[558,102734+36])
                                          Texp_ident "lexbuf/1396"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[558,102734+38]..src/lexer.mll[558,102734+44])
                                    Texp_ident "lexbuf/1396"
                              ]
                            expression (src/lexer.mll[558,102734+46]..src/lexer.mll[558,102734+57])
                              Texp_apply
                              expression (src/lexer.mll[558,102734+46]..src/lexer.mll[558,102734+50])
                                Texp_ident "main/1371"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[558,102734+51]..src/lexer.mll[558,102734+57])
                                    Texp_ident "lexbuf/1396"
                              ]
                        <case>
                          pattern (src/lexer.ml[1852,102817+4]..src/lexer.ml[1852,102817+6])
                            Tpat_value
                            pattern (src/lexer.ml[1852,102817+4]..src/lexer.ml[1852,102817+6])
                              Tpat_constant Const_int 23
                          expression (src/lexer.mll[560,102849+4]..src/lexer.mll[560,102849+64])
                            Texp_sequence
                            expression (src/lexer.mll[560,102849+6]..src/lexer.mll[560,102849+49])
                              Texp_apply
                              expression (src/lexer.mll[560,102849+6]..src/lexer.mll[560,102849+18])
                                Texp_ident "ocamlcomment/1383"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[560,102849+19]..src/lexer.mll[560,102849+42])
                                    Texp_apply
                                    expression (src/lexer.mll[560,102849+20]..src/lexer.mll[560,102849+34])
                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[560,102849+35]..src/lexer.mll[560,102849+41])
                                          Texp_ident "lexbuf/1396"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[560,102849+43]..src/lexer.mll[560,102849+49])
                                    Texp_ident "lexbuf/1396"
                              ]
                            expression (src/lexer.mll[560,102849+51]..src/lexer.mll[560,102849+62])
                              Texp_apply
                              expression (src/lexer.mll[560,102849+51]..src/lexer.mll[560,102849+55])
                                Texp_ident "main/1371"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[560,102849+56]..src/lexer.mll[560,102849+62])
                                    Texp_ident "lexbuf/1396"
                              ]
                        <case>
                          pattern (src/lexer.ml[1857,102937+4]..src/lexer.ml[1857,102937+6])
                            Tpat_value
                            pattern (src/lexer.ml[1857,102937+4]..src/lexer.ml[1857,102937+6])
                              Tpat_constant Const_int 24
                          expression (src/lexer.mll[562,102969+4]..src/lexer.mll[562,102969+58])
                            Texp_apply
                            expression (src/lexer.mll[562,102969+6]..src/lexer.mll[562,102969+15])
                              Texp_ident "savestart/538"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[562,102969+16]..src/lexer.mll[562,102969+22])
                                  Texp_ident "lexbuf/1396"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[562,102969+23]..src/lexer.mll[562,102969+56])
                                  Texp_apply
                                  expression (src/lexer.mll[562,102969+24]..src/lexer.mll[562,102969+33])
                                    Texp_ident "ocamltype/1375"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[562,102969+34]..src/lexer.mll[562,102969+55])
                                        Texp_apply
                                        expression (src/lexer.mll[562,102969+35]..src/lexer.mll[562,102969+47])
                                          Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[562,102969+48]..src/lexer.mll[562,102969+54])
                                              Texp_ident "lexbuf/1396"
                                        ]
                                  ]
                            ]
                        <case>
                          pattern (src/lexer.ml[1862,103051+4]..src/lexer.ml[1862,103051+6])
                            Tpat_value
                            pattern (src/lexer.ml[1862,103051+4]..src/lexer.ml[1862,103051+6])
                              Tpat_constant Const_int 25
                          expression (src/lexer.mll[564,103083+4]..src/lexer.mll[570,103379+9])
                            Texp_apply
                            expression (src/lexer.mll[564,103083+6]..src/lexer.mll[564,103083+15])
                              Texp_ident "savestart/538"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[564,103083+16]..src/lexer.mll[564,103083+22])
                                  Texp_ident "lexbuf/1396"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[564,103083+23]..src/lexer.mll[570,103379+7])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/lexer.mll[564,103083+28]..src/lexer.mll[564,103083+34])
                                        Tpat_var "lexbuf/1506"
                                      expression (src/lexer.mll[565,103121+8]..src/lexer.mll[569,103320+58])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[565,103121+12]..src/lexer.mll[565,103121+22])
                                              Tpat_var "openingpos/1507"
                                            expression (src/lexer.mll[565,103121+25]..src/lexer.mll[565,103121+46])
                                              Texp_apply
                                              expression (src/lexer.mll[565,103121+25]..src/lexer.mll[565,103121+39])
                                                Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[565,103121+40]..src/lexer.mll[565,103121+46])
                                                    Texp_ident "lexbuf/1506"
                                              ]
                                        ]
                                        expression (src/lexer.mll[566,103171+8]..src/lexer.mll[569,103320+58])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[566,103171+12]..src/lexer.mll[566,103171+22])
                                                Tpat_var "stretchpos/1508"
                                              expression (src/lexer.mll[566,103171+25]..src/lexer.mll[566,103171+44])
                                                Texp_apply
                                                expression (src/lexer.mll[566,103171+25]..src/lexer.mll[566,103171+37])
                                                  Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[566,103171+38]..src/lexer.mll[566,103171+44])
                                                      Texp_ident "lexbuf/1506"
                                                ]
                                          ]
                                          expression (src/lexer.mll[567,103219+8]..src/lexer.mll[569,103320+58])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/lexer.mll[567,103219+12]..src/lexer.mll[567,103219+32])
                                                  Tpat_tuple
                                                  [
                                                    pattern (src/lexer.mll[567,103219+12]..src/lexer.mll[567,103219+22])
                                                      Tpat_var "closingpos/1509"
                                                    pattern (src/lexer.mll[567,103219+24]..src/lexer.mll[567,103219+32])
                                                      Tpat_var "monsters/1510"
                                                  ]
                                                expression (src/lexer.mll[567,103219+35]..src/lexer.mll[567,103219+67])
                                                  Texp_apply
                                                  expression (src/lexer.mll[567,103219+35]..src/lexer.mll[567,103219+41])
                                                    Texp_ident "action/1377"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[567,103219+42]..src/lexer.mll[567,103219+46])
                                                        Texp_construct "true"
                                                        []
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[567,103219+47]..src/lexer.mll[567,103219+57])
                                                        Texp_ident "openingpos/1507"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[567,103219+58]..src/lexer.mll[567,103219+60])
                                                        Texp_construct "[]"
                                                        []
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[567,103219+61]..src/lexer.mll[567,103219+67])
                                                        Texp_ident "lexbuf/1506"
                                                  ]
                                            ]
                                            expression (src/lexer.mll[568,103290+8]..src/lexer.mll[569,103320+58])
                                              Texp_sequence
                                              expression (src/lexer.mll[568,103290+8]..src/lexer.mll[568,103290+28])
                                                Texp_apply
                                                expression (src/lexer.mll[568,103290+8]..src/lexer.mll[568,103290+19])
                                                  Texp_ident "no_monsters/1091"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[568,103290+20]..src/lexer.mll[568,103290+28])
                                                      Texp_ident "monsters/1510"
                                                ]
                                              expression (src/lexer.mll[569,103320+8]..src/lexer.mll[569,103320+58])
                                                Texp_construct "HEADER"
                                                [
                                                  expression (src/lexer.mll[569,103320+15]..src/lexer.mll[569,103320+58])
                                                    Texp_apply
                                                    expression (src/lexer.mll[569,103320+16]..src/lexer.mll[569,103320+26])
                                                      Texp_ident "mk_stretch/1200"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[569,103320+27]..src/lexer.mll[569,103320+37])
                                                          Texp_ident "stretchpos/1508"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[569,103320+38]..src/lexer.mll[569,103320+48])
                                                          Texp_ident "closingpos/1509"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[569,103320+49]..src/lexer.mll[569,103320+54])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[569,103320+55]..src/lexer.mll[569,103320+57])
                                                          Texp_construct "[]"
                                                          []
                                                    ]
                                                ]
                                  ]
                            ]
                        <case>
                          pattern (src/lexer.ml[1873,103412+4]..src/lexer.ml[1873,103412+6])
                            Tpat_value
                            pattern (src/lexer.ml[1873,103412+4]..src/lexer.ml[1873,103412+6])
                              Tpat_constant Const_int 26
                          expression (src/lexer.mll[572,103444+4]..src/lexer.mll[594,104528+5])
                            Texp_apply
                            expression (src/lexer.mll[572,103444+6]..src/lexer.mll[572,103444+15])
                              Texp_ident "savestart/538"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[572,103444+16]..src/lexer.mll[572,103444+22])
                                  Texp_ident "lexbuf/1396"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[572,103444+23]..src/lexer.mll[593,104520+7])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/lexer.mll[572,103444+28]..src/lexer.mll[572,103444+34])
                                        Tpat_var "lexbuf/1511"
                                      expression (src/lexer.mll[573,103482+8]..src/lexer.mll[592,104510+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[573,103482+12]..src/lexer.mll[573,103482+22])
                                              Tpat_var "openingpos/1512"
                                            expression (src/lexer.mll[573,103482+25]..src/lexer.mll[573,103482+46])
                                              Texp_apply
                                              expression (src/lexer.mll[573,103482+25]..src/lexer.mll[573,103482+39])
                                                Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[573,103482+40]..src/lexer.mll[573,103482+46])
                                                    Texp_ident "lexbuf/1511"
                                              ]
                                        ]
                                        expression (src/lexer.mll[574,103532+8]..src/lexer.mll[592,104510+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[574,103532+12]..src/lexer.mll[574,103532+22])
                                                Tpat_var "stretchpos/1513"
                                              expression (src/lexer.mll[574,103532+25]..src/lexer.mll[574,103532+44])
                                                Texp_apply
                                                expression (src/lexer.mll[574,103532+25]..src/lexer.mll[574,103532+37])
                                                  Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[574,103532+38]..src/lexer.mll[574,103532+44])
                                                      Texp_ident "lexbuf/1511"
                                                ]
                                          ]
                                          expression (src/lexer.mll[575,103580+8]..src/lexer.mll[592,104510+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/lexer.mll[575,103580+12]..src/lexer.mll[575,103580+32])
                                                  Tpat_tuple
                                                  [
                                                    pattern (src/lexer.mll[575,103580+12]..src/lexer.mll[575,103580+22])
                                                      Tpat_var "closingpos/1514"
                                                    pattern (src/lexer.mll[575,103580+24]..src/lexer.mll[575,103580+32])
                                                      Tpat_var "monsters/1515"
                                                  ]
                                                expression (src/lexer.mll[575,103580+35]..src/lexer.mll[575,103580+68])
                                                  Texp_apply
                                                  expression (src/lexer.mll[575,103580+35]..src/lexer.mll[575,103580+41])
                                                    Texp_ident "action/1377"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[575,103580+42]..src/lexer.mll[575,103580+47])
                                                        Texp_construct "false"
                                                        []
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[575,103580+48]..src/lexer.mll[575,103580+58])
                                                        Texp_ident "openingpos/1512"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[575,103580+59]..src/lexer.mll[575,103580+61])
                                                        Texp_construct "[]"
                                                        []
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[575,103580+62]..src/lexer.mll[575,103580+68])
                                                        Texp_ident "lexbuf/1511"
                                                  ]
                                            ]
                                            expression (src/lexer.mll[576,103652+8]..src/lexer.mll[592,104510+9])
                                              Texp_construct "ACTION"
                                              [
                                                expression (src/lexer.mll[576,103652+15]..src/lexer.mll[592,104510+9])
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/lexer.mll[577,103669+14]..src/lexer.mll[577,103669+21])
                                                        Tpat_var "dollars/1551"
                                                      expression (src/lexer.mll[577,103669+22]..src/lexer.mll[591,104466+43]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/lexer.mll[577,103669+22]..src/lexer.mll[577,103669+31])
                                                              Tpat_var "producers/1552"
                                                            expression (src/lexer.mll[579,103763+12]..src/lexer.mll[591,104466+43])
                                                              Texp_sequence
                                                              expression (src/lexer.mll[579,103763+12]..src/lexer.mll[579,103763+79])
                                                                Texp_apply
                                                                expression (src/lexer.mll[579,103763+12]..src/lexer.mll[579,103763+21])
                                                                  Texp_ident "Stdlib!.List.iter"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[579,103763+22]..src/lexer.mll[579,103763+70])
                                                                      Texp_function
                                                                      Nolabel
                                                                      [
                                                                        <case>
                                                                          pattern (src/lexer.mll[579,103763+27]..src/lexer.mll[579,103763+34])
                                                                            Tpat_var "monster/1553"
                                                                          expression (src/lexer.mll[579,103763+38]..src/lexer.mll[579,103763+69])
                                                                            Texp_apply
                                                                            expression (src/lexer.mll[579,103763+38]..src/lexer.mll[579,103763+51])
                                                                              Texp_field
                                                                              expression (src/lexer.mll[579,103763+38]..src/lexer.mll[579,103763+45])
                                                                                Texp_ident "monster/1553"
                                                                              "check"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[579,103763+52]..src/lexer.mll[579,103763+59])
                                                                                  Texp_ident "dollars/1551"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[579,103763+60]..src/lexer.mll[579,103763+69])
                                                                                  Texp_ident "producers/1552"
                                                                            ]
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/lexer.mll[579,103763+71]..src/lexer.mll[579,103763+79])
                                                                      Texp_ident "monsters/1515"
                                                                ]
                                                              expression (src/lexer.mll[585,104184+12]..src/lexer.mll[591,104466+43])
                                                                Texp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (src/lexer.mll[585,104184+16]..src/lexer.mll[585,104184+19])
                                                                      Tpat_var "ids/1554"
                                                                    expression (src/lexer.mll[586,104206+14]..src/lexer.mll[586,104206+80])
                                                                      Texp_apply
                                                                      expression (src/lexer.mll[586,104206+14]..src/lexer.mll[586,104206+29])
                                                                        Texp_ident "Dune__exe!.StringSet.union"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[586,104206+30]..src/lexer.mll[586,104206+53])
                                                                            Texp_apply
                                                                            expression (src/lexer.mll[586,104206+31]..src/lexer.mll[586,104206+42])
                                                                              Texp_ident "gather_oids/1192"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[586,104206+43]..src/lexer.mll[586,104206+52])
                                                                                  Texp_ident "producers/1552"
                                                                            ]
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/lexer.mll[586,104206+54]..src/lexer.mll[586,104206+80])
                                                                            Texp_apply
                                                                            expression (src/lexer.mll[586,104206+55]..src/lexer.mll[586,104206+70])
                                                                              Texp_ident "gather_monsters/1195"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/lexer.mll[586,104206+71]..src/lexer.mll[586,104206+79])
                                                                                  Texp_ident "monsters/1515"
                                                                            ]
                                                                      ]
                                                                ]
                                                                expression (src/lexer.mll[589,104347+12]..src/lexer.mll[591,104466+43])
                                                                  Texp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (src/lexer.mll[589,104347+16]..src/lexer.mll[589,104347+23])
                                                                        Tpat_var "stretch/1555"
                                                                      expression (src/lexer.mll[589,104347+26]..src/lexer.mll[589,104347+72])
                                                                        Texp_apply
                                                                        expression (src/lexer.mll[589,104347+26]..src/lexer.mll[589,104347+36])
                                                                          Texp_ident "mk_stretch/1200"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/lexer.mll[589,104347+37]..src/lexer.mll[589,104347+47])
                                                                              Texp_ident "stretchpos/1513"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/lexer.mll[589,104347+48]..src/lexer.mll[589,104347+58])
                                                                              Texp_ident "closingpos/1514"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/lexer.mll[589,104347+59]..src/lexer.mll[589,104347+63])
                                                                              Texp_construct "true"
                                                                              []
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/lexer.mll[589,104347+64]..src/lexer.mll[589,104347+72])
                                                                              Texp_ident "monsters/1515"
                                                                        ]
                                                                  ]
                                                                  expression (src/lexer.mll[591,104466+12]..src/lexer.mll[591,104466+43])
                                                                    Texp_apply
                                                                    expression (src/lexer.mll[591,104466+12]..src/lexer.mll[591,104466+31])
                                                                      Texp_ident "Dune__exe!.Action.from_stretch"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/lexer.mll[591,104466+32]..src/lexer.mll[591,104466+35])
                                                                          Texp_ident "ids/1554"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/lexer.mll[591,104466+36]..src/lexer.mll[591,104466+43])
                                                                          Texp_ident "stretch/1555"
                                                                    ]
                                                        ]
                                                  ]
                                              ]
                                  ]
                            ]
                        <case>
                          pattern (src/lexer.ml[1900,104557+4]..src/lexer.ml[1900,104557+6])
                            Tpat_value
                            pattern (src/lexer.ml[1900,104557+4]..src/lexer.ml[1900,104557+6])
                              Tpat_constant Const_int 27
                          expression (src/lexer.ml[1901,104567+0]..src/lexer.mll[607,105475+5])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexer.mll[595,104593+11]..src/lexer.mll[595,104593+18])
                                  Tpat_var "percent/1592"
                                expression (src/lexer.ml[1905,104634+2]..src/lexer.ml[1905,104634+80])
                                  Texp_apply
                                  expression (src/lexer.ml[1905,104634+2]..src/lexer.ml[1905,104634+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1905,104634+20]..src/lexer.ml[1905,104634+26])
                                        Texp_ident "lexbuf/1396"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1905,104634+27]..src/lexer.ml[1905,104634+54])
                                        Texp_field
                                        expression (src/lexer.ml[1905,104634+27]..src/lexer.ml[1905,104634+33])
                                          Texp_ident "lexbuf/1396"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1905,104634+55]..src/lexer.ml[1905,104634+80])
                                        Texp_apply
                                        expression (src/lexer.ml[1905,104634+55]..src/lexer.ml[1905,104634+80]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1905,104634+55]..src/lexer.ml[1905,104634+76])
                                              Texp_field
                                              expression (src/lexer.ml[1905,104634+55]..src/lexer.ml[1905,104634+61])
                                                Texp_ident "lexbuf/1396"
                                              "Lexing.lex_mem"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1905,104634+78]..src/lexer.ml[1905,104634+79])
                                              Texp_constant Const_int 0
                                        ]
                                  ]
                              <def>
                                pattern (src/lexer.mll[595,104741+44]..src/lexer.mll[595,104741+46])
                                  Tpat_var "id/1593"
                                expression (src/lexer.ml[1910,104810+2]..src/lexer.ml[1910,104810+84])
                                  Texp_apply
                                  expression (src/lexer.ml[1910,104810+2]..src/lexer.ml[1910,104810+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1910,104810+20]..src/lexer.ml[1910,104810+26])
                                        Texp_ident "lexbuf/1396"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1910,104810+27]..src/lexer.ml[1910,104810+58])
                                        Texp_apply
                                        expression (src/lexer.ml[1910,104810+54]..src/lexer.ml[1910,104810+55])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1910,104810+28]..src/lexer.ml[1910,104810+53])
                                              Texp_apply
                                              expression (src/lexer.ml[1910,104810+28]..src/lexer.ml[1910,104810+53]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[1910,104810+28]..src/lexer.ml[1910,104810+49])
                                                    Texp_field
                                                    expression (src/lexer.ml[1910,104810+28]..src/lexer.ml[1910,104810+34])
                                                      Texp_ident "lexbuf/1396"
                                                    "Lexing.lex_mem"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[1910,104810+51]..src/lexer.ml[1910,104810+52])
                                                    Texp_constant Const_int 0
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1910,104810+56]..src/lexer.ml[1910,104810+57])
                                              Texp_constant Const_int 2
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.ml[1910,104810+59]..src/lexer.ml[1910,104810+84])
                                        Texp_apply
                                        expression (src/lexer.ml[1910,104810+59]..src/lexer.ml[1910,104810+84]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1910,104810+59]..src/lexer.ml[1910,104810+80])
                                              Texp_field
                                              expression (src/lexer.ml[1910,104810+59]..src/lexer.ml[1910,104810+65])
                                                Texp_ident "lexbuf/1396"
                                              "Lexing.lex_mem"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[1910,104810+82]..src/lexer.ml[1910,104810+83])
                                              Texp_constant Const_int 1
                                        ]
                                  ]
                            ]
                            expression (src/lexer.mll[596,104920+4]..src/lexer.mll[607,105475+5])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexer.mll[596,104920+10]..src/lexer.mll[596,104920+20])
                                    Tpat_var "openingpos/1594"
                                  expression (src/lexer.mll[596,104920+23]..src/lexer.mll[596,104920+44])
                                    Texp_apply
                                    expression (src/lexer.mll[596,104920+23]..src/lexer.mll[596,104920+37])
                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[596,104920+38]..src/lexer.mll[596,104920+44])
                                          Texp_ident "lexbuf/1396"
                                    ]
                              ]
                              expression (src/lexer.mll[597,104968+6]..src/lexer.mll[606,105416+58])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/lexer.mll[597,104968+10]..src/lexer.mll[597,104968+20])
                                      Tpat_var "stretchpos/1595"
                                    expression (src/lexer.mll[597,104968+23]..src/lexer.mll[597,104968+42])
                                      Texp_apply
                                      expression (src/lexer.mll[597,104968+23]..src/lexer.mll[597,104968+35])
                                        Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[597,104968+36]..src/lexer.mll[597,104968+42])
                                            Texp_ident "lexbuf/1396"
                                      ]
                                ]
                                expression (src/lexer.mll[598,105014+6]..src/lexer.mll[606,105416+58])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[598,105014+10]..src/lexer.mll[598,105014+20])
                                        Tpat_var "closingpos/1596"
                                      expression (src/lexer.mll[598,105014+23]..src/lexer.mll[598,105014+50])
                                        Texp_apply
                                        expression (src/lexer.mll[598,105014+23]..src/lexer.mll[598,105014+32])
                                          Texp_ident "attribute/1381"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[598,105014+33]..src/lexer.mll[598,105014+43])
                                              Texp_ident "openingpos/1594"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[598,105014+44]..src/lexer.mll[598,105014+50])
                                              Texp_ident "lexbuf/1396"
                                        ]
                                  ]
                                  expression (src/lexer.mll[599,105068+6]..src/lexer.mll[606,105416+58])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/lexer.mll[599,105068+10]..src/lexer.mll[599,105068+13])
                                          Tpat_var "pos/1597"
                                        expression (src/lexer.mll[599,105068+16]..src/lexer.mll[599,105068+66])
                                          Texp_apply
                                          expression (src/lexer.mll[599,105068+16]..src/lexer.mll[599,105068+32])
                                            Texp_ident "Dune__exe!.Positions.import"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[599,105068+33]..src/lexer.mll[599,105068+66])
                                                Texp_tuple
                                                [
                                                  expression (src/lexer.mll[599,105068+34]..src/lexer.mll[599,105068+44])
                                                    Texp_ident "openingpos/1594"
                                                  expression (src/lexer.mll[599,105068+46]..src/lexer.mll[599,105068+65])
                                                    Texp_apply
                                                    expression (src/lexer.mll[599,105068+46]..src/lexer.mll[599,105068+58])
                                                      Texp_ident "Stdlib!.Lexing.lexeme_end_p"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[599,105068+59]..src/lexer.mll[599,105068+65])
                                                          Texp_ident "lexbuf/1396"
                                                    ]
                                                ]
                                          ]
                                    ]
                                    expression (src/lexer.mll[600,105138+6]..src/lexer.mll[606,105416+58])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/lexer.mll[600,105138+10]..src/lexer.mll[600,105138+14])
                                            Tpat_var "attr/1598"
                                          expression (src/lexer.mll[600,105138+17]..src/lexer.mll[600,105138+58])
                                            Texp_apply
                                            expression (src/lexer.mll[600,105138+17]..src/lexer.mll[600,105138+27])
                                              Texp_ident "mk_stretch/1200"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[600,105138+28]..src/lexer.mll[600,105138+38])
                                                  Texp_ident "stretchpos/1595"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[600,105138+39]..src/lexer.mll[600,105138+49])
                                                  Texp_ident "closingpos/1596"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[600,105138+50]..src/lexer.mll[600,105138+55])
                                                  Texp_construct "false"
                                                  []
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[600,105138+56]..src/lexer.mll[600,105138+58])
                                                  Texp_construct "[]"
                                                  []
                                            ]
                                      ]
                                      expression (src/lexer.mll[601,105200+6]..src/lexer.mll[606,105416+58])
                                        Texp_ifthenelse
                                        expression (src/lexer.mll[601,105200+9]..src/lexer.mll[601,105200+21])
                                          Texp_apply
                                          expression (src/lexer.mll[601,105200+17]..src/lexer.mll[601,105200+18])
                                            Texp_ident "Stdlib!.="
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[601,105200+9]..src/lexer.mll[601,105200+16])
                                                Texp_ident "percent/1592"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[601,105200+19]..src/lexer.mll[601,105200+21])
                                                Texp_constant Const_string("",(src/lexer.mll[601,105200+20]..src/lexer.mll[601,105200+20]),None)
                                          ]
                                        expression (src/lexer.mll[603,105282+8]..src/lexer.mll[603,105282+51])
                                          Texp_construct "ATTRIBUTE"
                                          [
                                            expression (src/lexer.mll[603,105282+18]..src/lexer.mll[603,105282+51])
                                              Texp_tuple
                                              [
                                                expression (src/lexer.mll[603,105282+19]..src/lexer.mll[603,105282+44])
                                                  Texp_apply
                                                  expression (src/lexer.mll[603,105282+19]..src/lexer.mll[603,105282+37])
                                                    Texp_ident "Dune__exe!.Positions.with_pos"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[603,105282+38]..src/lexer.mll[603,105282+41])
                                                        Texp_ident "pos/1597"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[603,105282+42]..src/lexer.mll[603,105282+44])
                                                        Texp_ident "id/1593"
                                                  ]
                                                expression (src/lexer.mll[603,105282+46]..src/lexer.mll[603,105282+50])
                                                  Texp_ident "attr/1598"
                                              ]
                                          ]
                                        Some
                                          expression (src/lexer.mll[606,105416+8]..src/lexer.mll[606,105416+58])
                                            Texp_construct "GRAMMARATTRIBUTE"
                                            [
                                              expression (src/lexer.mll[606,105416+25]..src/lexer.mll[606,105416+58])
                                                Texp_tuple
                                                [
                                                  expression (src/lexer.mll[606,105416+26]..src/lexer.mll[606,105416+51])
                                                    Texp_apply
                                                    expression (src/lexer.mll[606,105416+26]..src/lexer.mll[606,105416+44])
                                                      Texp_ident "Dune__exe!.Positions.with_pos"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[606,105416+45]..src/lexer.mll[606,105416+48])
                                                          Texp_ident "pos/1597"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[606,105416+49]..src/lexer.mll[606,105416+51])
                                                          Texp_ident "id/1593"
                                                    ]
                                                  expression (src/lexer.mll[606,105416+53]..src/lexer.mll[606,105416+57])
                                                    Texp_ident "attr/1598"
                                                ]
                                            ]
                        <case>
                          pattern (src/lexer.ml[1926,105504+4]..src/lexer.ml[1926,105504+6])
                            Tpat_value
                            pattern (src/lexer.ml[1926,105504+4]..src/lexer.ml[1926,105504+6])
                              Tpat_constant Const_int 28
                          expression (src/lexer.mll[609,105536+4]..src/lexer.mll[609,105536+11])
                            Texp_construct "EOF"
                            []
                        <case>
                          pattern (src/lexer.ml[1931,105571+4]..src/lexer.ml[1931,105571+6])
                            Tpat_value
                            pattern (src/lexer.ml[1931,105571+4]..src/lexer.ml[1931,105571+6])
                              Tpat_constant Const_int 29
                          expression (src/lexer.mll[611,105603+4]..src/lexer.mll[611,105603+48])
                            Texp_apply
                            expression (src/lexer.mll[611,105603+6]..src/lexer.mll[611,105603+12])
                              Texp_ident "error2/509"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[611,105603+13]..src/lexer.mll[611,105603+19])
                                  Texp_ident "lexbuf/1396"
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46])
                                  Texp_construct "CamlinternalFormatBasics.Format"
                                  [
                                    expression (src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                      [
                                        expression (src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost
                                          Texp_constant Const_string("unexpected character(s).",(src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost,None)
                                        expression (src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost
                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                          []
                                      ]
                                    expression (src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost
                                      Texp_constant Const_string("unexpected character(s).",(src/lexer.mll[611,105603+20]..src/lexer.mll[611,105603+46]) ghost,None)
                                  ]
                            ]
                        <case>
                          pattern (src/lexer.ml[1936,105675+4]..src/lexer.ml[1936,105675+21])
                            Tpat_value
                            pattern (src/lexer.ml[1936,105675+4]..src/lexer.ml[1936,105675+21])
                              Tpat_var "__ocaml_lex_state/1398"
                          expression (src/lexer.ml[1936,105675+25]..src/lexer.ml[1937,105734+51])
                            Texp_sequence
                            expression (src/lexer.ml[1936,105675+25]..src/lexer.ml[1936,105675+57])
                              Texp_apply
                              expression (src/lexer.ml[1936,105675+25]..src/lexer.ml[1936,105675+50])
                                Texp_field
                                expression (src/lexer.ml[1936,105675+25]..src/lexer.ml[1936,105675+31])
                                  Texp_ident "lexbuf/1396"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1936,105675+51]..src/lexer.ml[1936,105675+57])
                                    Texp_ident "lexbuf/1396"
                              ]
                            expression (src/lexer.ml[1937,105734+6]..src/lexer.ml[1937,105734+51])
                              Texp_apply
                              expression (src/lexer.ml[1937,105734+6]..src/lexer.ml[1937,105734+26])
                                Texp_ident "__ocaml_lex_main_rec/1372"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1937,105734+27]..src/lexer.ml[1937,105734+33])
                                    Texp_ident "lexbuf/1396"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1937,105734+34]..src/lexer.ml[1937,105734+51])
                                    Texp_ident "__ocaml_lex_state/1398"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[1939,105787+4]..src/lexer.ml[1939,105787+11])
          Tpat_var "comment/1373"
        expression (src/lexer.ml[1939,105787+12]..src/lexer.ml[1940,105819+47]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1939,105787+12]..src/lexer.ml[1939,105787+22])
                Tpat_var "openingpos/1599"
              expression (src/lexer.ml[1939,105787+23]..src/lexer.ml[1940,105819+47]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[1939,105787+23]..src/lexer.ml[1939,105787+29])
                      Tpat_var "lexbuf/1600"
                    expression (src/lexer.ml[1940,105819+3]..src/lexer.ml[1940,105819+47])
                      Texp_apply
                      expression (src/lexer.ml[1940,105819+3]..src/lexer.ml[1940,105819+26])
                        Texp_ident "__ocaml_lex_comment_rec/1374"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1940,105819+27]..src/lexer.ml[1940,105819+37])
                            Texp_ident "openingpos/1599"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1940,105819+38]..src/lexer.ml[1940,105819+44])
                            Texp_ident "lexbuf/1600"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1940,105819+45]..src/lexer.ml[1940,105819+47])
                            Texp_constant Const_int 42
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[1941,105867+4]..src/lexer.ml[1941,105867+27])
          Tpat_var "__ocaml_lex_comment_rec/1374"
        expression (src/lexer.ml[1941,105867+28]..src/lexer.ml[1964,106429+65]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1941,105867+28]..src/lexer.ml[1941,105867+38])
                Tpat_var "openingpos/1601"
              expression (src/lexer.ml[1941,105867+39]..src/lexer.ml[1964,106429+65]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[1941,105867+39]..src/lexer.ml[1941,105867+45])
                      Tpat_var "lexbuf/1602"
                    expression (src/lexer.ml[1941,105867+46]..src/lexer.ml[1964,106429+65]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[1941,105867+46]..src/lexer.ml[1941,105867+63])
                            Tpat_var "__ocaml_lex_state/1603"
                          expression (src/lexer.ml[1942,105933+2]..src/lexer.ml[1964,106429+65])
                            Texp_match
                            expression (src/lexer.ml[1942,105933+8]..src/lexer.ml[1942,105933+65])
                              Texp_apply
                              expression (src/lexer.ml[1942,105933+8]..src/lexer.ml[1942,105933+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1942,105933+22]..src/lexer.ml[1942,105933+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1942,105933+41]..src/lexer.ml[1942,105933+58])
                                    Texp_ident "__ocaml_lex_state/1603"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1942,105933+59]..src/lexer.ml[1942,105933+65])
                                    Texp_ident "lexbuf/1602"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[1943,106004+8]..src/lexer.ml[1943,106004+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[1943,106004+8]..src/lexer.ml[1943,106004+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[619,106039+4]..src/lexer.mll[619,106039+50])
                                  Texp_sequence
                                  expression (src/lexer.mll[619,106039+6]..src/lexer.mll[619,106039+21])
                                    Texp_apply
                                    expression (src/lexer.mll[619,106039+6]..src/lexer.mll[619,106039+14])
                                      Texp_ident "Stdlib!.Lexing.new_line"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[619,106039+15]..src/lexer.mll[619,106039+21])
                                          Texp_ident "lexbuf/1602"
                                    ]
                                  expression (src/lexer.mll[619,106039+23]..src/lexer.mll[619,106039+48])
                                    Texp_apply
                                    expression (src/lexer.mll[619,106039+23]..src/lexer.mll[619,106039+30])
                                      Texp_ident "comment/1373"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[619,106039+31]..src/lexer.mll[619,106039+41])
                                          Texp_ident "openingpos/1601"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[619,106039+42]..src/lexer.mll[619,106039+48])
                                          Texp_ident "lexbuf/1602"
                                    ]
                              <case>
                                pattern (src/lexer.ml[1948,106113+4]..src/lexer.ml[1948,106113+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1948,106113+4]..src/lexer.ml[1948,106113+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.mll[621,106144+4]..src/lexer.mll[621,106144+10])
                                  Texp_construct "()"
                                  []
                              <case>
                                pattern (src/lexer.ml[1953,106178+4]..src/lexer.ml[1953,106178+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1953,106178+4]..src/lexer.ml[1953,106178+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.mll[623,106209+4]..src/lexer.mll[623,106209+49])
                                  Texp_apply
                                  expression (src/lexer.mll[623,106209+6]..src/lexer.mll[623,106209+12])
                                    Texp_ident "error1/467"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[623,106209+13]..src/lexer.mll[623,106209+23])
                                        Texp_ident "openingpos/1601"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost
                                                Texp_constant Const_string("unterminated comment.",(src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost,None)
                                              expression (src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                          expression (src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost
                                            Texp_constant Const_string("unterminated comment.",(src/lexer.mll[623,106209+24]..src/lexer.mll[623,106209+47]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[1958,106282+4]..src/lexer.ml[1958,106282+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1958,106282+4]..src/lexer.ml[1958,106282+5])
                                    Tpat_constant Const_int 3
                                expression (src/lexer.mll[625,106313+4]..src/lexer.mll[625,106313+33])
                                  Texp_apply
                                  expression (src/lexer.mll[625,106313+6]..src/lexer.mll[625,106313+13])
                                    Texp_ident "comment/1373"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[625,106313+14]..src/lexer.mll[625,106313+24])
                                        Texp_ident "openingpos/1601"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[625,106313+25]..src/lexer.mll[625,106313+31])
                                        Texp_ident "lexbuf/1602"
                                  ]
                              <case>
                                pattern (src/lexer.ml[1963,106370+4]..src/lexer.ml[1963,106370+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[1963,106370+4]..src/lexer.ml[1963,106370+21])
                                    Tpat_var "__ocaml_lex_state/1604"
                                expression (src/lexer.ml[1963,106370+25]..src/lexer.ml[1964,106429+65])
                                  Texp_sequence
                                  expression (src/lexer.ml[1963,106370+25]..src/lexer.ml[1963,106370+57])
                                    Texp_apply
                                    expression (src/lexer.ml[1963,106370+25]..src/lexer.ml[1963,106370+50])
                                      Texp_field
                                      expression (src/lexer.ml[1963,106370+25]..src/lexer.ml[1963,106370+31])
                                        Texp_ident "lexbuf/1602"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[1963,106370+51]..src/lexer.ml[1963,106370+57])
                                          Texp_ident "lexbuf/1602"
                                    ]
                                  expression (src/lexer.ml[1964,106429+6]..src/lexer.ml[1964,106429+65])
                                    Texp_apply
                                    expression (src/lexer.ml[1964,106429+6]..src/lexer.ml[1964,106429+29])
                                      Texp_ident "__ocaml_lex_comment_rec/1374"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[1964,106429+30]..src/lexer.ml[1964,106429+40])
                                          Texp_ident "openingpos/1601"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[1964,106429+41]..src/lexer.ml[1964,106429+47])
                                          Texp_ident "lexbuf/1602"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[1964,106429+48]..src/lexer.ml[1964,106429+65])
                                          Texp_ident "__ocaml_lex_state/1604"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[1966,106496+4]..src/lexer.ml[1966,106496+13])
          Tpat_var "ocamltype/1375"
        expression (src/lexer.ml[1966,106496+14]..src/lexer.ml[1967,106530+49]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1966,106496+14]..src/lexer.ml[1966,106496+24])
                Tpat_var "openingpos/1605"
              expression (src/lexer.ml[1966,106496+25]..src/lexer.ml[1967,106530+49]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[1966,106496+25]..src/lexer.ml[1966,106496+31])
                      Tpat_var "lexbuf/1606"
                    expression (src/lexer.ml[1967,106530+3]..src/lexer.ml[1967,106530+49])
                      Texp_apply
                      expression (src/lexer.ml[1967,106530+3]..src/lexer.ml[1967,106530+28])
                        Texp_ident "__ocaml_lex_ocamltype_rec/1376"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1967,106530+29]..src/lexer.ml[1967,106530+39])
                            Texp_ident "openingpos/1605"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1967,106530+40]..src/lexer.ml[1967,106530+46])
                            Texp_ident "lexbuf/1606"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[1967,106530+47]..src/lexer.ml[1967,106530+49])
                            Texp_constant Const_int 49
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[1968,106580+4]..src/lexer.ml[1968,106580+29])
          Tpat_var "__ocaml_lex_ocamltype_rec/1376"
        expression (src/lexer.ml[1968,106580+30]..src/lexer.ml[2001,107458+67]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[1968,106580+30]..src/lexer.ml[1968,106580+40])
                Tpat_var "openingpos/1607"
              expression (src/lexer.ml[1968,106580+41]..src/lexer.ml[2001,107458+67]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[1968,106580+41]..src/lexer.ml[1968,106580+47])
                      Tpat_var "lexbuf/1608"
                    expression (src/lexer.ml[1968,106580+48]..src/lexer.ml[2001,107458+67]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[1968,106580+48]..src/lexer.ml[1968,106580+65])
                            Tpat_var "__ocaml_lex_state/1609"
                          expression (src/lexer.ml[1969,106648+2]..src/lexer.ml[2001,107458+67])
                            Texp_match
                            expression (src/lexer.ml[1969,106648+8]..src/lexer.ml[1969,106648+65])
                              Texp_apply
                              expression (src/lexer.ml[1969,106648+8]..src/lexer.ml[1969,106648+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1969,106648+22]..src/lexer.ml[1969,106648+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1969,106648+41]..src/lexer.ml[1969,106648+58])
                                    Texp_ident "__ocaml_lex_state/1609"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[1969,106648+59]..src/lexer.ml[1969,106648+65])
                                    Texp_ident "lexbuf/1608"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[1970,106719+8]..src/lexer.ml[1970,106719+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[1970,106719+8]..src/lexer.ml[1970,106719+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[636,106754+4]..src/lexer.mll[636,106754+35])
                                  Texp_apply
                                  expression (src/lexer.mll[636,106754+6]..src/lexer.mll[636,106754+15])
                                    Texp_ident "ocamltype/1375"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[636,106754+16]..src/lexer.mll[636,106754+26])
                                        Texp_ident "openingpos/1607"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[636,106754+27]..src/lexer.mll[636,106754+33])
                                        Texp_ident "lexbuf/1608"
                                  ]
                              <case>
                                pattern (src/lexer.ml[1975,106813+4]..src/lexer.ml[1975,106813+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1975,106813+4]..src/lexer.ml[1975,106813+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.mll[638,106844+4]..src/lexer.mll[638,106844+92])
                                  Texp_construct "OCAMLTYPE"
                                  [
                                    expression (src/lexer.mll[638,106844+16]..src/lexer.mll[638,106844+90])
                                      Texp_construct "Stretch.Declared"
                                      [
                                        expression (src/lexer.mll[638,106844+34]..src/lexer.mll[638,106844+89])
                                          Texp_apply
                                          expression (src/lexer.mll[638,106844+35]..src/lexer.mll[638,106844+45])
                                            Texp_ident "mk_stretch/1200"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[638,106844+46]..src/lexer.mll[638,106844+56])
                                                Texp_ident "openingpos/1607"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[638,106844+57]..src/lexer.mll[638,106844+80])
                                                Texp_apply
                                                expression (src/lexer.mll[638,106844+58]..src/lexer.mll[638,106844+72])
                                                  Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[638,106844+73]..src/lexer.mll[638,106844+79])
                                                      Texp_ident "lexbuf/1608"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[638,106844+81]..src/lexer.mll[638,106844+85])
                                                Texp_construct "true"
                                                []
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[638,106844+86]..src/lexer.mll[638,106844+88])
                                                Texp_construct "[]"
                                                []
                                          ]
                                      ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[1980,106960+4]..src/lexer.ml[1980,106960+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1980,106960+4]..src/lexer.ml[1980,106960+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.mll[640,106991+4]..src/lexer.mll[640,106991+80])
                                  Texp_sequence
                                  expression (src/lexer.mll[640,106991+6]..src/lexer.mll[640,106991+49])
                                    Texp_apply
                                    expression (src/lexer.mll[640,106991+6]..src/lexer.mll[640,106991+18])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[640,106991+19]..src/lexer.mll[640,106991+42])
                                          Texp_apply
                                          expression (src/lexer.mll[640,106991+20]..src/lexer.mll[640,106991+34])
                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[640,106991+35]..src/lexer.mll[640,106991+41])
                                                Texp_ident "lexbuf/1608"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[640,106991+43]..src/lexer.mll[640,106991+49])
                                          Texp_ident "lexbuf/1608"
                                    ]
                                  expression (src/lexer.mll[640,106991+51]..src/lexer.mll[640,106991+78])
                                    Texp_apply
                                    expression (src/lexer.mll[640,106991+51]..src/lexer.mll[640,106991+60])
                                      Texp_ident "ocamltype/1375"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[640,106991+61]..src/lexer.mll[640,106991+71])
                                          Texp_ident "openingpos/1607"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[640,106991+72]..src/lexer.mll[640,106991+78])
                                          Texp_ident "lexbuf/1608"
                                    ]
                              <case>
                                pattern (src/lexer.ml[1985,107095+4]..src/lexer.ml[1985,107095+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1985,107095+4]..src/lexer.ml[1985,107095+5])
                                    Tpat_constant Const_int 3
                                expression (src/lexer.mll[642,107126+4]..src/lexer.mll[642,107126+52])
                                  Texp_sequence
                                  expression (src/lexer.mll[642,107126+6]..src/lexer.mll[642,107126+21])
                                    Texp_apply
                                    expression (src/lexer.mll[642,107126+6]..src/lexer.mll[642,107126+14])
                                      Texp_ident "Stdlib!.Lexing.new_line"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[642,107126+15]..src/lexer.mll[642,107126+21])
                                          Texp_ident "lexbuf/1608"
                                    ]
                                  expression (src/lexer.mll[642,107126+23]..src/lexer.mll[642,107126+50])
                                    Texp_apply
                                    expression (src/lexer.mll[642,107126+23]..src/lexer.mll[642,107126+32])
                                      Texp_ident "ocamltype/1375"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[642,107126+33]..src/lexer.mll[642,107126+43])
                                          Texp_ident "openingpos/1607"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[642,107126+44]..src/lexer.mll[642,107126+50])
                                          Texp_ident "lexbuf/1608"
                                    ]
                              <case>
                                pattern (src/lexer.ml[1990,107202+4]..src/lexer.ml[1990,107202+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1990,107202+4]..src/lexer.ml[1990,107202+5])
                                    Tpat_constant Const_int 4
                                expression (src/lexer.mll[644,107233+4]..src/lexer.mll[644,107233+52])
                                  Texp_apply
                                  expression (src/lexer.mll[644,107233+6]..src/lexer.mll[644,107233+12])
                                    Texp_ident "error1/467"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[644,107233+13]..src/lexer.mll[644,107233+23])
                                        Texp_ident "openingpos/1607"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost
                                                Texp_constant Const_string("unterminated OCaml type.",(src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost,None)
                                              expression (src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                          expression (src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost
                                            Texp_constant Const_string("unterminated OCaml type.",(src/lexer.mll[644,107233+24]..src/lexer.mll[644,107233+50]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[1995,107309+4]..src/lexer.ml[1995,107309+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[1995,107309+4]..src/lexer.ml[1995,107309+5])
                                    Tpat_constant Const_int 5
                                expression (src/lexer.mll[646,107340+4]..src/lexer.mll[646,107340+35])
                                  Texp_apply
                                  expression (src/lexer.mll[646,107340+6]..src/lexer.mll[646,107340+15])
                                    Texp_ident "ocamltype/1375"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[646,107340+16]..src/lexer.mll[646,107340+26])
                                        Texp_ident "openingpos/1607"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[646,107340+27]..src/lexer.mll[646,107340+33])
                                        Texp_ident "lexbuf/1608"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2000,107399+4]..src/lexer.ml[2000,107399+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[2000,107399+4]..src/lexer.ml[2000,107399+21])
                                    Tpat_var "__ocaml_lex_state/1610"
                                expression (src/lexer.ml[2000,107399+25]..src/lexer.ml[2001,107458+67])
                                  Texp_sequence
                                  expression (src/lexer.ml[2000,107399+25]..src/lexer.ml[2000,107399+57])
                                    Texp_apply
                                    expression (src/lexer.ml[2000,107399+25]..src/lexer.ml[2000,107399+50])
                                      Texp_field
                                      expression (src/lexer.ml[2000,107399+25]..src/lexer.ml[2000,107399+31])
                                        Texp_ident "lexbuf/1608"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2000,107399+51]..src/lexer.ml[2000,107399+57])
                                          Texp_ident "lexbuf/1608"
                                    ]
                                  expression (src/lexer.ml[2001,107458+6]..src/lexer.ml[2001,107458+67])
                                    Texp_apply
                                    expression (src/lexer.ml[2001,107458+6]..src/lexer.ml[2001,107458+31])
                                      Texp_ident "__ocaml_lex_ocamltype_rec/1376"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2001,107458+32]..src/lexer.ml[2001,107458+42])
                                          Texp_ident "openingpos/1607"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2001,107458+43]..src/lexer.ml[2001,107458+49])
                                          Texp_ident "lexbuf/1608"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2001,107458+50]..src/lexer.ml[2001,107458+67])
                                          Texp_ident "__ocaml_lex_state/1610"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2003,107527+4]..src/lexer.ml[2003,107527+10])
          Tpat_var "action/1377"
        expression (src/lexer.ml[2003,107527+11]..src/lexer.ml[2004,107575+107]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2003,107527+11]..src/lexer.ml[2003,107527+18])
                Tpat_var "percent/1611"
              expression (src/lexer.ml[2003,107527+19]..src/lexer.ml[2004,107575+107]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2003,107527+19]..src/lexer.ml[2003,107527+29])
                      Tpat_var "openingpos/1612"
                    expression (src/lexer.ml[2003,107527+30]..src/lexer.ml[2004,107575+107]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2003,107527+30]..src/lexer.ml[2003,107527+38])
                            Tpat_var "monsters/1613"
                          expression (src/lexer.ml[2003,107527+39]..src/lexer.ml[2004,107575+107]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.ml[2003,107527+39]..src/lexer.ml[2003,107527+45])
                                  Tpat_var "lexbuf/1614"
                                expression (src/lexer.ml[2004,107575+2]..src/lexer.ml[2004,107575+107])
                                  Texp_sequence
                                  expression (src/lexer.ml[2004,107575+2]..src/lexer.ml[2004,107575+45])
                                    Texp_setfield
                                    expression (src/lexer.ml[2004,107575+2]..src/lexer.ml[2004,107575+8])
                                      Texp_ident "lexbuf/1614"
                                    "Lexing.lex_mem"
                                    expression (src/lexer.ml[2004,107575+27]..src/lexer.ml[2004,107575+45])
                                      Texp_apply
                                      expression (src/lexer.ml[2004,107575+27]..src/lexer.ml[2004,107575+37])
                                        Texp_ident "Stdlib!.Array.make"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.ml[2004,107575+38]..src/lexer.ml[2004,107575+40])
                                            Texp_constant Const_int 16
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.ml[2004,107575+41]..src/lexer.ml[2004,107575+45])
                                            Texp_constant Const_int -1
                                      ]
                                  expression (src/lexer.ml[2004,107575+47]..src/lexer.ml[2004,107575+107])
                                    Texp_apply
                                    expression (src/lexer.ml[2004,107575+47]..src/lexer.ml[2004,107575+69])
                                      Texp_ident "__ocaml_lex_action_rec/1378"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2004,107575+70]..src/lexer.ml[2004,107575+77])
                                          Texp_ident "percent/1611"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2004,107575+78]..src/lexer.ml[2004,107575+88])
                                          Texp_ident "openingpos/1612"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2004,107575+89]..src/lexer.ml[2004,107575+97])
                                          Texp_ident "monsters/1613"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2004,107575+98]..src/lexer.ml[2004,107575+104])
                                          Texp_ident "lexbuf/1614"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2004,107575+105]..src/lexer.ml[2004,107575+107])
                                          Texp_constant Const_int 60
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2005,107683+4]..src/lexer.ml[2005,107683+26])
          Tpat_var "__ocaml_lex_action_rec/1378"
        expression (src/lexer.ml[2005,107683+27]..src/lexer.ml[2121,111095+81]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2005,107683+27]..src/lexer.ml[2005,107683+34])
                Tpat_var "percent/1615"
              expression (src/lexer.ml[2005,107683+35]..src/lexer.ml[2121,111095+81]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2005,107683+35]..src/lexer.ml[2005,107683+45])
                      Tpat_var "openingpos/1616"
                    expression (src/lexer.ml[2005,107683+46]..src/lexer.ml[2121,111095+81]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2005,107683+46]..src/lexer.ml[2005,107683+54])
                            Tpat_var "monsters/1617"
                          expression (src/lexer.ml[2005,107683+55]..src/lexer.ml[2121,111095+81]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.ml[2005,107683+55]..src/lexer.ml[2005,107683+61])
                                  Tpat_var "lexbuf/1618"
                                expression (src/lexer.ml[2005,107683+62]..src/lexer.ml[2121,111095+81]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/lexer.ml[2005,107683+62]..src/lexer.ml[2005,107683+79])
                                        Tpat_var "__ocaml_lex_state/1619"
                                      expression (src/lexer.ml[2006,107765+2]..src/lexer.ml[2121,111095+81])
                                        Texp_match
                                        expression (src/lexer.ml[2006,107765+8]..src/lexer.ml[2006,107765+69])
                                          Texp_apply
                                          expression (src/lexer.ml[2006,107765+8]..src/lexer.ml[2006,107765+25])
                                            Texp_ident "Stdlib!.Lexing.new_engine"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2006,107765+26]..src/lexer.ml[2006,107765+44])
                                                Texp_ident "__ocaml_lex_tables/1370"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2006,107765+45]..src/lexer.ml[2006,107765+62])
                                                Texp_ident "__ocaml_lex_state/1619"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2006,107765+63]..src/lexer.ml[2006,107765+69])
                                                Texp_ident "lexbuf/1618"
                                          ]
                                        [
                                          <case>
                                            pattern (src/lexer.ml[2007,107840+8]..src/lexer.ml[2007,107840+9])
                                              Tpat_value
                                              pattern (src/lexer.ml[2007,107840+8]..src/lexer.ml[2007,107840+9])
                                                Tpat_constant Const_int 0
                                            expression (src/lexer.mll[657,107875+4]..src/lexer.mll[658,107955+49])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[657,107875+10]..src/lexer.mll[657,107875+21])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/lexer.mll[657,107875+10]..src/lexer.mll[657,107875+11])
                                                        Tpat_any
                                                      pattern (src/lexer.mll[657,107875+13]..src/lexer.mll[657,107875+21])
                                                        Tpat_var "monsters/1621"
                                                    ]
                                                  expression (src/lexer.mll[657,107875+24]..src/lexer.mll[657,107875+76])
                                                    Texp_apply
                                                    expression (src/lexer.mll[657,107875+24]..src/lexer.mll[657,107875+30])
                                                      Texp_ident "action/1377"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[657,107875+31]..src/lexer.mll[657,107875+36])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[657,107875+37]..src/lexer.mll[657,107875+60])
                                                          Texp_apply
                                                          expression (src/lexer.mll[657,107875+38]..src/lexer.mll[657,107875+52])
                                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[657,107875+53]..src/lexer.mll[657,107875+59])
                                                                Texp_ident "lexbuf/1618"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[657,107875+61]..src/lexer.mll[657,107875+69])
                                                          Texp_ident "monsters/1617"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[657,107875+70]..src/lexer.mll[657,107875+76])
                                                          Texp_ident "lexbuf/1618"
                                                    ]
                                              ]
                                              expression (src/lexer.mll[658,107955+6]..src/lexer.mll[658,107955+47])
                                                Texp_apply
                                                expression (src/lexer.mll[658,107955+6]..src/lexer.mll[658,107955+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[658,107955+13]..src/lexer.mll[658,107955+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[658,107955+21]..src/lexer.mll[658,107955+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[658,107955+32]..src/lexer.mll[658,107955+40])
                                                      Texp_ident "monsters/1621"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[658,107955+41]..src/lexer.mll[658,107955+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2013,108028+4]..src/lexer.ml[2013,108028+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2013,108028+4]..src/lexer.ml[2013,108028+5])
                                                Tpat_constant Const_int 1
                                            expression (src/lexer.ml[2014,108037+0]..src/lexer.mll[668,108513+5])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[659,108063+18]..src/lexer.mll[659,108063+27])
                                                    Tpat_var "delimiter/1622"
                                                  expression (src/lexer.ml[2018,108113+2]..src/lexer.ml[2018,108113+81])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2018,108113+2]..src/lexer.ml[2018,108113+19])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2018,108113+20]..src/lexer.ml[2018,108113+26])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2018,108113+27]..src/lexer.ml[2018,108113+54])
                                                          Texp_field
                                                          expression (src/lexer.ml[2018,108113+27]..src/lexer.ml[2018,108113+33])
                                                            Texp_ident "lexbuf/1618"
                                                          "Lexing.lex_start_pos"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2018,108113+55]..src/lexer.ml[2018,108113+81])
                                                          Texp_field
                                                          expression (src/lexer.ml[2018,108113+55]..src/lexer.ml[2018,108113+61])
                                                            Texp_ident "lexbuf/1618"
                                                          "Lexing.lex_curr_pos"
                                                    ]
                                              ]
                                              expression (src/lexer.mll[660,108220+4]..src/lexer.mll[668,108513+5])
                                                Texp_match
                                                expression (src/lexer.mll[660,108220+12]..src/lexer.mll[660,108220+30])
                                                  Texp_tuple
                                                  [
                                                    expression (src/lexer.mll[660,108220+12]..src/lexer.mll[660,108220+19])
                                                      Texp_ident "percent/1615"
                                                    expression (src/lexer.mll[660,108220+21]..src/lexer.mll[660,108220+30])
                                                      Texp_ident "delimiter/1622"
                                                  ]
                                                [
                                                  <case>
                                                    pattern (src/lexer.mll[661,108256+8]..src/lexer.mll[662,108275+18])
                                                      Tpat_or
                                                      pattern (src/lexer.mll[661,108256+8]..src/lexer.mll[661,108256+18])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[661,108256+8]..src/lexer.mll[661,108256+18])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/lexer.mll[661,108256+8]..src/lexer.mll[661,108256+12])
                                                              Tpat_construct "true"
                                                              []
                                                              None
                                                            pattern (src/lexer.mll[661,108256+14]..src/lexer.mll[661,108256+18])
                                                              Tpat_constant Const_string("%}",(src/lexer.mll[661,108256+15]..src/lexer.mll[661,108256+17]),None)
                                                          ]
                                                      pattern (src/lexer.mll[662,108275+8]..src/lexer.mll[662,108275+18])
                                                        Tpat_value
                                                        pattern (src/lexer.mll[662,108275+8]..src/lexer.mll[662,108275+18])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/lexer.mll[662,108275+8]..src/lexer.mll[662,108275+13])
                                                              Tpat_construct "false"
                                                              []
                                                              None
                                                            pattern (src/lexer.mll[662,108275+15]..src/lexer.mll[662,108275+18])
                                                              Tpat_constant Const_string("}",(src/lexer.mll[662,108275+16]..src/lexer.mll[662,108275+17]),None)
                                                          ]
                                                    expression (src/lexer.mll[664,108367+10]..src/lexer.mll[664,108367+41])
                                                      Texp_tuple
                                                      [
                                                        expression (src/lexer.mll[664,108367+10]..src/lexer.mll[664,108367+31])
                                                          Texp_apply
                                                          expression (src/lexer.mll[664,108367+10]..src/lexer.mll[664,108367+24])
                                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[664,108367+25]..src/lexer.mll[664,108367+31])
                                                                Texp_ident "lexbuf/1618"
                                                          ]
                                                        expression (src/lexer.mll[664,108367+33]..src/lexer.mll[664,108367+41])
                                                          Texp_ident "monsters/1617"
                                                      ]
                                                  <case>
                                                    pattern (src/lexer.mll[665,108409+8]..src/lexer.mll[665,108409+12])
                                                      Tpat_value
                                                      pattern (src/lexer.mll[665,108409+8]..src/lexer.mll[665,108409+12])
                                                        Tpat_tuple
                                                        [
                                                          pattern (src/lexer.mll[665,108409+8]..src/lexer.mll[665,108409+9])
                                                            Tpat_any
                                                          pattern (src/lexer.mll[665,108409+11]..src/lexer.mll[665,108409+12])
                                                            Tpat_any
                                                        ]
                                                    expression (src/lexer.mll[667,108457+10]..src/lexer.mll[667,108457+55])
                                                      Texp_apply
                                                      expression (src/lexer.mll[667,108457+10]..src/lexer.mll[667,108457+16])
                                                        Texp_ident "error1/467"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[667,108457+17]..src/lexer.mll[667,108457+27])
                                                            Texp_ident "openingpos/1616"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost
                                                                    Texp_constant Const_string("unbalanced opening brace.",(src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost,None)
                                                                  expression (src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                    []
                                                                ]
                                                              expression (src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost
                                                                Texp_constant Const_string("unbalanced opening brace.",(src/lexer.mll[667,108457+28]..src/lexer.mll[667,108457+55]) ghost,None)
                                                            ]
                                                      ]
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2031,108542+4]..src/lexer.ml[2031,108542+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2031,108542+4]..src/lexer.ml[2031,108542+5])
                                                Tpat_constant Const_int 2
                                            expression (src/lexer.mll[670,108573+4]..src/lexer.mll[671,108652+49])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[670,108573+10]..src/lexer.mll[670,108573+21])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/lexer.mll[670,108573+10]..src/lexer.mll[670,108573+11])
                                                        Tpat_any
                                                      pattern (src/lexer.mll[670,108573+13]..src/lexer.mll[670,108573+21])
                                                        Tpat_var "monsters/1623"
                                                    ]
                                                  expression (src/lexer.mll[670,108573+24]..src/lexer.mll[670,108573+75])
                                                    Texp_apply
                                                    expression (src/lexer.mll[670,108573+24]..src/lexer.mll[670,108573+35])
                                                      Texp_ident "parentheses/1379"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[670,108573+36]..src/lexer.mll[670,108573+59])
                                                          Texp_apply
                                                          expression (src/lexer.mll[670,108573+37]..src/lexer.mll[670,108573+51])
                                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[670,108573+52]..src/lexer.mll[670,108573+58])
                                                                Texp_ident "lexbuf/1618"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[670,108573+60]..src/lexer.mll[670,108573+68])
                                                          Texp_ident "monsters/1617"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[670,108573+69]..src/lexer.mll[670,108573+75])
                                                          Texp_ident "lexbuf/1618"
                                                    ]
                                              ]
                                              expression (src/lexer.mll[671,108652+6]..src/lexer.mll[671,108652+47])
                                                Texp_apply
                                                expression (src/lexer.mll[671,108652+6]..src/lexer.mll[671,108652+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[671,108652+13]..src/lexer.mll[671,108652+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[671,108652+21]..src/lexer.mll[671,108652+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[671,108652+32]..src/lexer.mll[671,108652+40])
                                                      Texp_ident "monsters/1623"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[671,108652+41]..src/lexer.mll[671,108652+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2037,108725+4]..src/lexer.ml[2037,108725+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2037,108725+4]..src/lexer.ml[2037,108725+5])
                                                Tpat_constant Const_int 3
                                            expression (src/lexer.ml[2038,108734+0]..src/lexer.mll[675,109021+62])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[672,108760+21]..src/lexer.mll[672,108760+22])
                                                    Tpat_var "i/1624"
                                                  expression (src/lexer.ml[2042,108805+2]..src/lexer.ml[2042,108805+87])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2042,108805+2]..src/lexer.ml[2042,108805+19])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2042,108805+20]..src/lexer.ml[2042,108805+26])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2042,108805+27]..src/lexer.ml[2042,108805+60])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2042,108805+56]..src/lexer.ml[2042,108805+57])
                                                            Texp_ident "Stdlib!.+"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2042,108805+28]..src/lexer.ml[2042,108805+55])
                                                                Texp_field
                                                                expression (src/lexer.ml[2042,108805+28]..src/lexer.ml[2042,108805+34])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_start_pos"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2042,108805+58]..src/lexer.ml[2042,108805+59])
                                                                Texp_constant Const_int 1
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2042,108805+61]..src/lexer.ml[2042,108805+87])
                                                          Texp_field
                                                          expression (src/lexer.ml[2042,108805+61]..src/lexer.ml[2042,108805+67])
                                                            Texp_ident "lexbuf/1618"
                                                          "Lexing.lex_curr_pos"
                                                    ]
                                              ]
                                              expression (src/lexer.mll[673,108918+4]..src/lexer.mll[675,109021+62])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/lexer.mll[673,108918+10]..src/lexer.mll[673,108918+11])
                                                      Tpat_var "i/1625"
                                                    expression (src/lexer.mll[673,108918+14]..src/lexer.mll[673,108918+53])
                                                      Texp_apply
                                                      expression (src/lexer.mll[673,108918+14]..src/lexer.mll[673,108918+27])
                                                        Texp_ident "int_of_string/512"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[673,108918+28]..src/lexer.mll[673,108918+51])
                                                            Texp_apply
                                                            expression (src/lexer.mll[673,108918+29]..src/lexer.mll[673,108918+43])
                                                              Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[673,108918+44]..src/lexer.mll[673,108918+50])
                                                                  Texp_ident "lexbuf/1618"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[673,108918+52]..src/lexer.mll[673,108918+53])
                                                            Texp_ident "i/1624"
                                                      ]
                                                ]
                                                expression (src/lexer.mll[674,108975+6]..src/lexer.mll[675,109021+60])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/lexer.mll[674,108975+10]..src/lexer.mll[674,108975+17])
                                                        Tpat_var "monster/1626"
                                                      expression (src/lexer.mll[674,108975+20]..src/lexer.mll[674,108975+42])
                                                        Texp_apply
                                                        expression (src/lexer.mll[674,108975+20]..src/lexer.mll[674,108975+26])
                                                          Texp_ident "dollar/1038"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[674,108975+27]..src/lexer.mll[674,108975+40])
                                                              Texp_apply
                                                              expression (src/lexer.mll[674,108975+28]..src/lexer.mll[674,108975+32])
                                                                Texp_ident "Dune__exe!.Positions.cpos"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/lexer.mll[674,108975+33]..src/lexer.mll[674,108975+39])
                                                                    Texp_ident "lexbuf/1618"
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[674,108975+41]..src/lexer.mll[674,108975+42])
                                                              Texp_ident "i/1625"
                                                        ]
                                                  ]
                                                  expression (src/lexer.mll[675,109021+6]..src/lexer.mll[675,109021+60])
                                                    Texp_apply
                                                    expression (src/lexer.mll[675,109021+6]..src/lexer.mll[675,109021+12])
                                                      Texp_ident "action/1377"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[675,109021+13]..src/lexer.mll[675,109021+20])
                                                          Texp_ident "percent/1615"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[675,109021+21]..src/lexer.mll[675,109021+31])
                                                          Texp_ident "openingpos/1616"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[675,109021+32]..src/lexer.mll[675,109021+53])
                                                          Texp_construct "::"
                                                          [
                                                            expression (src/lexer.mll[675,109021+33]..src/lexer.mll[675,109021+40])
                                                              Texp_ident "monster/1626"
                                                            expression (src/lexer.mll[675,109021+44]..src/lexer.mll[675,109021+52])
                                                              Texp_ident "monsters/1617"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[675,109021+54]..src/lexer.mll[675,109021+60])
                                                          Texp_ident "lexbuf/1618"
                                                    ]
                                          <case>
                                            pattern (src/lexer.ml[2049,109107+4]..src/lexer.ml[2049,109107+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2049,109107+4]..src/lexer.ml[2049,109107+5])
                                                Tpat_constant Const_int 4
                                            expression (src/lexer.ml[2050,109116+0]..src/lexer.mll[678,109898+62])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[467,109142+21]..src/lexer.mll[467,109142+22])
                                                    Tpat_var "i/1627"
                                                  expression (src/lexer.ml[2054,109187+2]..src/lexer.ml[2054,109187+82])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2054,109187+2]..src/lexer.ml[2054,109187+23])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme_opt"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2054,109187+24]..src/lexer.ml[2054,109187+30])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2054,109187+31]..src/lexer.ml[2054,109187+56])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2054,109187+31]..src/lexer.ml[2054,109187+56]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2054,109187+31]..src/lexer.ml[2054,109187+52])
                                                                Texp_field
                                                                expression (src/lexer.ml[2054,109187+31]..src/lexer.ml[2054,109187+37])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2054,109187+54]..src/lexer.ml[2054,109187+55])
                                                                Texp_constant Const_int 3
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2054,109187+57]..src/lexer.ml[2054,109187+82])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2054,109187+57]..src/lexer.ml[2054,109187+82]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2054,109187+57]..src/lexer.ml[2054,109187+78])
                                                                Texp_field
                                                                expression (src/lexer.ml[2054,109187+57]..src/lexer.ml[2054,109187+63])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2054,109187+80]..src/lexer.ml[2054,109187+81])
                                                                Texp_constant Const_int 2
                                                          ]
                                                    ]
                                                <def>
                                                  pattern (src/lexer.mll[468,109296+29]..src/lexer.mll[468,109296+30])
                                                    Tpat_var "x/1628"
                                                  expression (src/lexer.ml[2059,109349+2]..src/lexer.ml[2059,109349+82])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2059,109349+2]..src/lexer.ml[2059,109349+23])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme_opt"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2059,109349+24]..src/lexer.ml[2059,109349+30])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2059,109349+31]..src/lexer.ml[2059,109349+56])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2059,109349+31]..src/lexer.ml[2059,109349+56]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2059,109349+31]..src/lexer.ml[2059,109349+52])
                                                                Texp_field
                                                                expression (src/lexer.ml[2059,109349+31]..src/lexer.ml[2059,109349+37])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2059,109349+54]..src/lexer.ml[2059,109349+55])
                                                                Texp_constant Const_int 7
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2059,109349+57]..src/lexer.ml[2059,109349+82])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2059,109349+57]..src/lexer.ml[2059,109349+82]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2059,109349+57]..src/lexer.ml[2059,109349+78])
                                                                Texp_field
                                                                expression (src/lexer.ml[2059,109349+57]..src/lexer.ml[2059,109349+63])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2059,109349+80]..src/lexer.ml[2059,109349+81])
                                                                Texp_constant Const_int 6
                                                          ]
                                                    ]
                                                <def>
                                                  pattern (src/lexer.mll[473,109458+42]..src/lexer.mll[473,109458+47])
                                                    Tpat_var "where/1629"
                                                  expression (src/lexer.ml[2064,109528+2]..src/lexer.ml[2064,109528+78])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2064,109528+2]..src/lexer.ml[2064,109528+19])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2064,109528+20]..src/lexer.ml[2064,109528+26])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2064,109528+27]..src/lexer.ml[2064,109528+52])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2064,109528+27]..src/lexer.ml[2064,109528+52]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2064,109528+27]..src/lexer.ml[2064,109528+48])
                                                                Texp_field
                                                                expression (src/lexer.ml[2064,109528+27]..src/lexer.ml[2064,109528+33])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2064,109528+50]..src/lexer.ml[2064,109528+51])
                                                                Texp_constant Const_int 5
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2064,109528+53]..src/lexer.ml[2064,109528+78])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2064,109528+53]..src/lexer.ml[2064,109528+78]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2064,109528+53]..src/lexer.ml[2064,109528+74])
                                                                Texp_field
                                                                expression (src/lexer.ml[2064,109528+53]..src/lexer.ml[2064,109528+59])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2064,109528+76]..src/lexer.ml[2064,109528+77])
                                                                Texp_constant Const_int 4
                                                          ]
                                                    ]
                                                <def>
                                                  pattern (src/lexer.mll[473,109633+69]..src/lexer.mll[473,109633+75])
                                                    Tpat_var "flavor/1630"
                                                  expression (src/lexer.ml[2069,109731+2]..src/lexer.ml[2069,109731+78])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2069,109731+2]..src/lexer.ml[2069,109731+19])
                                                      Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2069,109731+20]..src/lexer.ml[2069,109731+26])
                                                          Texp_ident "lexbuf/1618"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2069,109731+27]..src/lexer.ml[2069,109731+52])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2069,109731+27]..src/lexer.ml[2069,109731+52]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2069,109731+27]..src/lexer.ml[2069,109731+48])
                                                                Texp_field
                                                                expression (src/lexer.ml[2069,109731+27]..src/lexer.ml[2069,109731+33])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2069,109731+50]..src/lexer.ml[2069,109731+51])
                                                                Texp_constant Const_int 1
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2069,109731+53]..src/lexer.ml[2069,109731+78])
                                                          Texp_apply
                                                          expression (src/lexer.ml[2069,109731+53]..src/lexer.ml[2069,109731+78]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2069,109731+53]..src/lexer.ml[2069,109731+74])
                                                                Texp_field
                                                                expression (src/lexer.ml[2069,109731+53]..src/lexer.ml[2069,109731+59])
                                                                  Texp_ident "lexbuf/1618"
                                                                "Lexing.lex_mem"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.ml[2069,109731+76]..src/lexer.ml[2069,109731+77])
                                                                Texp_constant Const_int 0
                                                          ]
                                                    ]
                                              ]
                                              expression (src/lexer.mll[677,109835+4]..src/lexer.mll[678,109898+62])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/lexer.mll[677,109835+10]..src/lexer.mll[677,109835+17])
                                                      Tpat_var "monster/1631"
                                                    expression (src/lexer.mll[677,109835+20]..src/lexer.mll[677,109835+59])
                                                      Texp_apply
                                                      expression (src/lexer.mll[677,109835+20]..src/lexer.mll[677,109835+28])
                                                        Texp_ident "position/1063"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[677,109835+29]..src/lexer.mll[677,109835+42])
                                                            Texp_apply
                                                            expression (src/lexer.mll[677,109835+30]..src/lexer.mll[677,109835+34])
                                                              Texp_ident "Dune__exe!.Positions.cpos"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/lexer.mll[677,109835+35]..src/lexer.mll[677,109835+41])
                                                                  Texp_ident "lexbuf/1618"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[677,109835+43]..src/lexer.mll[677,109835+48])
                                                            Texp_ident "where/1629"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[677,109835+49]..src/lexer.mll[677,109835+55])
                                                            Texp_ident "flavor/1630"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[677,109835+56]..src/lexer.mll[677,109835+57])
                                                            Texp_ident "i/1627"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[677,109835+58]..src/lexer.mll[677,109835+59])
                                                            Texp_ident "x/1628"
                                                      ]
                                                ]
                                                expression (src/lexer.mll[678,109898+6]..src/lexer.mll[678,109898+60])
                                                  Texp_apply
                                                  expression (src/lexer.mll[678,109898+6]..src/lexer.mll[678,109898+12])
                                                    Texp_ident "action/1377"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[678,109898+13]..src/lexer.mll[678,109898+20])
                                                        Texp_ident "percent/1615"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[678,109898+21]..src/lexer.mll[678,109898+31])
                                                        Texp_ident "openingpos/1616"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[678,109898+32]..src/lexer.mll[678,109898+53])
                                                        Texp_construct "::"
                                                        [
                                                          expression (src/lexer.mll[678,109898+33]..src/lexer.mll[678,109898+40])
                                                            Texp_ident "monster/1631"
                                                          expression (src/lexer.mll[678,109898+44]..src/lexer.mll[678,109898+52])
                                                            Texp_ident "monsters/1617"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[678,109898+54]..src/lexer.mll[678,109898+60])
                                                        Texp_ident "lexbuf/1618"
                                                  ]
                                          <case>
                                            pattern (src/lexer.ml[2075,109984+4]..src/lexer.ml[2075,109984+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2075,109984+4]..src/lexer.ml[2075,109984+5])
                                                Tpat_constant Const_int 5
                                            expression (src/lexer.mll[680,110015+4]..src/lexer.mll[680,110015+62])
                                              Texp_apply
                                              expression (src/lexer.mll[680,110015+6]..src/lexer.mll[680,110015+12])
                                                Texp_ident "error2/509"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[680,110015+13]..src/lexer.mll[680,110015+19])
                                                    Texp_ident "lexbuf/1618"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost
                                                            Texp_constant Const_string("$previouserror is no longer supported.",(src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost,None)
                                                          expression (src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                      expression (src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost
                                                        Texp_constant Const_string("$previouserror is no longer supported.",(src/lexer.mll[680,110015+20]..src/lexer.mll[680,110015+60]) ghost,None)
                                                    ]
                                              ]
                                          <case>
                                            pattern (src/lexer.ml[2080,110101+4]..src/lexer.ml[2080,110101+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2080,110101+4]..src/lexer.ml[2080,110101+5])
                                                Tpat_constant Const_int 6
                                            expression (src/lexer.mll[682,110132+4]..src/lexer.mll[683,110181+62])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/lexer.mll[682,110132+10]..src/lexer.mll[682,110132+17])
                                                    Tpat_var "monster/1632"
                                                  expression (src/lexer.mll[682,110132+20]..src/lexer.mll[682,110132+45])
                                                    Texp_apply
                                                    expression (src/lexer.mll[682,110132+20]..src/lexer.mll[682,110132+31])
                                                      Texp_ident "syntaxerror/819"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[682,110132+32]..src/lexer.mll[682,110132+45])
                                                          Texp_apply
                                                          expression (src/lexer.mll[682,110132+33]..src/lexer.mll[682,110132+37])
                                                            Texp_ident "Dune__exe!.Positions.cpos"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/lexer.mll[682,110132+38]..src/lexer.mll[682,110132+44])
                                                                Texp_ident "lexbuf/1618"
                                                          ]
                                                    ]
                                              ]
                                              expression (src/lexer.mll[683,110181+6]..src/lexer.mll[683,110181+60])
                                                Texp_apply
                                                expression (src/lexer.mll[683,110181+6]..src/lexer.mll[683,110181+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[683,110181+13]..src/lexer.mll[683,110181+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[683,110181+21]..src/lexer.mll[683,110181+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[683,110181+32]..src/lexer.mll[683,110181+53])
                                                      Texp_construct "::"
                                                      [
                                                        expression (src/lexer.mll[683,110181+33]..src/lexer.mll[683,110181+40])
                                                          Texp_ident "monster/1632"
                                                        expression (src/lexer.mll[683,110181+44]..src/lexer.mll[683,110181+52])
                                                          Texp_ident "monsters/1617"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[683,110181+54]..src/lexer.mll[683,110181+60])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2086,110267+4]..src/lexer.ml[2086,110267+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2086,110267+4]..src/lexer.ml[2086,110267+5])
                                                Tpat_constant Const_int 7
                                            expression (src/lexer.mll[685,110298+4]..src/lexer.mll[686,110343+49])
                                              Texp_sequence
                                              expression (src/lexer.mll[685,110298+6]..src/lexer.mll[685,110298+43])
                                                Texp_apply
                                                expression (src/lexer.mll[685,110298+6]..src/lexer.mll[685,110298+12])
                                                  Texp_ident "string/1385"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[685,110298+13]..src/lexer.mll[685,110298+36])
                                                      Texp_apply
                                                      expression (src/lexer.mll[685,110298+14]..src/lexer.mll[685,110298+28])
                                                        Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[685,110298+29]..src/lexer.mll[685,110298+35])
                                                            Texp_ident "lexbuf/1618"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[685,110298+37]..src/lexer.mll[685,110298+43])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                              expression (src/lexer.mll[686,110343+6]..src/lexer.mll[686,110343+47])
                                                Texp_apply
                                                expression (src/lexer.mll[686,110343+6]..src/lexer.mll[686,110343+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[686,110343+13]..src/lexer.mll[686,110343+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[686,110343+21]..src/lexer.mll[686,110343+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[686,110343+32]..src/lexer.mll[686,110343+40])
                                                      Texp_ident "monsters/1617"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[686,110343+41]..src/lexer.mll[686,110343+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2092,110416+4]..src/lexer.ml[2092,110416+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2092,110416+4]..src/lexer.ml[2092,110416+5])
                                                Tpat_constant Const_int 8
                                            expression (src/lexer.mll[688,110447+4]..src/lexer.mll[689,110466+49])
                                              Texp_sequence
                                              expression (src/lexer.mll[688,110447+6]..src/lexer.mll[688,110447+17])
                                                Texp_apply
                                                expression (src/lexer.mll[688,110447+6]..src/lexer.mll[688,110447+10])
                                                  Texp_ident "char/1391"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[688,110447+11]..src/lexer.mll[688,110447+17])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                              expression (src/lexer.mll[689,110466+6]..src/lexer.mll[689,110466+47])
                                                Texp_apply
                                                expression (src/lexer.mll[689,110466+6]..src/lexer.mll[689,110466+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[689,110466+13]..src/lexer.mll[689,110466+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[689,110466+21]..src/lexer.mll[689,110466+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[689,110466+32]..src/lexer.mll[689,110466+40])
                                                      Texp_ident "monsters/1617"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[689,110466+41]..src/lexer.mll[689,110466+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2098,110539+4]..src/lexer.ml[2098,110539+5])
                                              Tpat_value
                                              pattern (src/lexer.ml[2098,110539+4]..src/lexer.ml[2098,110539+5])
                                                Tpat_constant Const_int 9
                                            expression (src/lexer.mll[691,110570+4]..src/lexer.mll[692,110621+49])
                                              Texp_sequence
                                              expression (src/lexer.mll[691,110570+6]..src/lexer.mll[691,110570+49])
                                                Texp_apply
                                                expression (src/lexer.mll[691,110570+6]..src/lexer.mll[691,110570+18])
                                                  Texp_ident "ocamlcomment/1383"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[691,110570+19]..src/lexer.mll[691,110570+42])
                                                      Texp_apply
                                                      expression (src/lexer.mll[691,110570+20]..src/lexer.mll[691,110570+34])
                                                        Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[691,110570+35]..src/lexer.mll[691,110570+41])
                                                            Texp_ident "lexbuf/1618"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[691,110570+43]..src/lexer.mll[691,110570+49])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                              expression (src/lexer.mll[692,110621+6]..src/lexer.mll[692,110621+47])
                                                Texp_apply
                                                expression (src/lexer.mll[692,110621+6]..src/lexer.mll[692,110621+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[692,110621+13]..src/lexer.mll[692,110621+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[692,110621+21]..src/lexer.mll[692,110621+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[692,110621+32]..src/lexer.mll[692,110621+40])
                                                      Texp_ident "monsters/1617"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[692,110621+41]..src/lexer.mll[692,110621+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2104,110694+4]..src/lexer.ml[2104,110694+6])
                                              Tpat_value
                                              pattern (src/lexer.ml[2104,110694+4]..src/lexer.ml[2104,110694+6])
                                                Tpat_constant Const_int 10
                                            expression (src/lexer.mll[694,110726+4]..src/lexer.mll[695,110749+49])
                                              Texp_sequence
                                              expression (src/lexer.mll[694,110726+6]..src/lexer.mll[694,110726+21])
                                                Texp_apply
                                                expression (src/lexer.mll[694,110726+6]..src/lexer.mll[694,110726+14])
                                                  Texp_ident "Stdlib!.Lexing.new_line"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[694,110726+15]..src/lexer.mll[694,110726+21])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                              expression (src/lexer.mll[695,110749+6]..src/lexer.mll[695,110749+47])
                                                Texp_apply
                                                expression (src/lexer.mll[695,110749+6]..src/lexer.mll[695,110749+12])
                                                  Texp_ident "action/1377"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[695,110749+13]..src/lexer.mll[695,110749+20])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[695,110749+21]..src/lexer.mll[695,110749+31])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[695,110749+32]..src/lexer.mll[695,110749+40])
                                                      Texp_ident "monsters/1617"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[695,110749+41]..src/lexer.mll[695,110749+47])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                          <case>
                                            pattern (src/lexer.ml[2110,110822+4]..src/lexer.ml[2110,110822+6])
                                              Tpat_value
                                              pattern (src/lexer.ml[2110,110822+4]..src/lexer.ml[2110,110822+6])
                                                Tpat_constant Const_int 11
                                            expression (src/lexer.mll[698,110854+4]..src/lexer.mll[698,110854+53])
                                              Texp_apply
                                              expression (src/lexer.mll[698,110854+6]..src/lexer.mll[698,110854+12])
                                                Texp_ident "error1/467"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[698,110854+13]..src/lexer.mll[698,110854+23])
                                                    Texp_ident "openingpos/1616"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost
                                                            Texp_constant Const_string("unbalanced opening brace.",(src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost,None)
                                                          expression (src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                      expression (src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost
                                                        Texp_constant Const_string("unbalanced opening brace.",(src/lexer.mll[698,110854+24]..src/lexer.mll[698,110854+51]) ghost,None)
                                                    ]
                                              ]
                                          <case>
                                            pattern (src/lexer.ml[2115,110931+4]..src/lexer.ml[2115,110931+6])
                                              Tpat_value
                                              pattern (src/lexer.ml[2115,110931+4]..src/lexer.ml[2115,110931+6])
                                                Tpat_constant Const_int 12
                                            expression (src/lexer.mll[700,110963+4]..src/lexer.mll[700,110963+49])
                                              Texp_apply
                                              expression (src/lexer.mll[700,110963+6]..src/lexer.mll[700,110963+12])
                                                Texp_ident "action/1377"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[700,110963+13]..src/lexer.mll[700,110963+20])
                                                    Texp_ident "percent/1615"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[700,110963+21]..src/lexer.mll[700,110963+31])
                                                    Texp_ident "openingpos/1616"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[700,110963+32]..src/lexer.mll[700,110963+40])
                                                    Texp_ident "monsters/1617"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[700,110963+41]..src/lexer.mll[700,110963+47])
                                                    Texp_ident "lexbuf/1618"
                                              ]
                                          <case>
                                            pattern (src/lexer.ml[2120,111036+4]..src/lexer.ml[2120,111036+21])
                                              Tpat_value
                                              pattern (src/lexer.ml[2120,111036+4]..src/lexer.ml[2120,111036+21])
                                                Tpat_var "__ocaml_lex_state/1620"
                                            expression (src/lexer.ml[2120,111036+25]..src/lexer.ml[2121,111095+81])
                                              Texp_sequence
                                              expression (src/lexer.ml[2120,111036+25]..src/lexer.ml[2120,111036+57])
                                                Texp_apply
                                                expression (src/lexer.ml[2120,111036+25]..src/lexer.ml[2120,111036+50])
                                                  Texp_field
                                                  expression (src/lexer.ml[2120,111036+25]..src/lexer.ml[2120,111036+31])
                                                    Texp_ident "lexbuf/1618"
                                                  "Lexing.refill_buff"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2120,111036+51]..src/lexer.ml[2120,111036+57])
                                                      Texp_ident "lexbuf/1618"
                                                ]
                                              expression (src/lexer.ml[2121,111095+6]..src/lexer.ml[2121,111095+81])
                                                Texp_apply
                                                expression (src/lexer.ml[2121,111095+6]..src/lexer.ml[2121,111095+28])
                                                  Texp_ident "__ocaml_lex_action_rec/1378"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2121,111095+29]..src/lexer.ml[2121,111095+36])
                                                      Texp_ident "percent/1615"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2121,111095+37]..src/lexer.ml[2121,111095+47])
                                                      Texp_ident "openingpos/1616"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2121,111095+48]..src/lexer.ml[2121,111095+56])
                                                      Texp_ident "monsters/1617"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2121,111095+57]..src/lexer.ml[2121,111095+63])
                                                      Texp_ident "lexbuf/1618"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.ml[2121,111095+64]..src/lexer.ml[2121,111095+81])
                                                      Texp_ident "__ocaml_lex_state/1620"
                                                ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2123,111178+4]..src/lexer.ml[2123,111178+15])
          Tpat_var "parentheses/1379"
        expression (src/lexer.ml[2123,111178+16]..src/lexer.ml[2124,111223+105]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2123,111178+16]..src/lexer.ml[2123,111178+26])
                Tpat_var "openingpos/1633"
              expression (src/lexer.ml[2123,111178+27]..src/lexer.ml[2124,111223+105]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2123,111178+27]..src/lexer.ml[2123,111178+35])
                      Tpat_var "monsters/1634"
                    expression (src/lexer.ml[2123,111178+36]..src/lexer.ml[2124,111223+105]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2123,111178+36]..src/lexer.ml[2123,111178+42])
                            Tpat_var "lexbuf/1635"
                          expression (src/lexer.ml[2124,111223+2]..src/lexer.ml[2124,111223+105])
                            Texp_sequence
                            expression (src/lexer.ml[2124,111223+2]..src/lexer.ml[2124,111223+45])
                              Texp_setfield
                              expression (src/lexer.ml[2124,111223+2]..src/lexer.ml[2124,111223+8])
                                Texp_ident "lexbuf/1635"
                              "Lexing.lex_mem"
                              expression (src/lexer.ml[2124,111223+27]..src/lexer.ml[2124,111223+45])
                                Texp_apply
                                expression (src/lexer.ml[2124,111223+27]..src/lexer.ml[2124,111223+37])
                                  Texp_ident "Stdlib!.Array.make"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.ml[2124,111223+38]..src/lexer.ml[2124,111223+40])
                                      Texp_constant Const_int 16
                                  <arg>
                                    Nolabel
                                    expression (src/lexer.ml[2124,111223+41]..src/lexer.ml[2124,111223+45])
                                      Texp_constant Const_int -1
                                ]
                            expression (src/lexer.ml[2124,111223+47]..src/lexer.ml[2124,111223+105])
                              Texp_apply
                              expression (src/lexer.ml[2124,111223+47]..src/lexer.ml[2124,111223+74])
                                Texp_ident "__ocaml_lex_parentheses_rec/1380"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2124,111223+75]..src/lexer.ml[2124,111223+85])
                                    Texp_ident "openingpos/1633"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2124,111223+86]..src/lexer.ml[2124,111223+94])
                                    Texp_ident "monsters/1634"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2124,111223+95]..src/lexer.ml[2124,111223+101])
                                    Texp_ident "lexbuf/1635"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2124,111223+102]..src/lexer.ml[2124,111223+105])
                                    Texp_constant Const_int 125
                              ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2125,111329+4]..src/lexer.ml[2125,111329+31])
          Tpat_var "__ocaml_lex_parentheses_rec/1380"
        expression (src/lexer.ml[2125,111329+32]..src/lexer.ml[2224,114270+78]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2125,111329+32]..src/lexer.ml[2125,111329+42])
                Tpat_var "openingpos/1636"
              expression (src/lexer.ml[2125,111329+43]..src/lexer.ml[2224,114270+78]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2125,111329+43]..src/lexer.ml[2125,111329+51])
                      Tpat_var "monsters/1637"
                    expression (src/lexer.ml[2125,111329+52]..src/lexer.ml[2224,114270+78]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2125,111329+52]..src/lexer.ml[2125,111329+58])
                            Tpat_var "lexbuf/1638"
                          expression (src/lexer.ml[2125,111329+59]..src/lexer.ml[2224,114270+78]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.ml[2125,111329+59]..src/lexer.ml[2125,111329+76])
                                  Tpat_var "__ocaml_lex_state/1639"
                                expression (src/lexer.ml[2126,111408+2]..src/lexer.ml[2224,114270+78])
                                  Texp_match
                                  expression (src/lexer.ml[2126,111408+8]..src/lexer.ml[2126,111408+69])
                                    Texp_apply
                                    expression (src/lexer.ml[2126,111408+8]..src/lexer.ml[2126,111408+25])
                                      Texp_ident "Stdlib!.Lexing.new_engine"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2126,111408+26]..src/lexer.ml[2126,111408+44])
                                          Texp_ident "__ocaml_lex_tables/1370"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2126,111408+45]..src/lexer.ml[2126,111408+62])
                                          Texp_ident "__ocaml_lex_state/1639"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2126,111408+63]..src/lexer.ml[2126,111408+69])
                                          Texp_ident "lexbuf/1638"
                                    ]
                                  [
                                    <case>
                                      pattern (src/lexer.ml[2127,111483+8]..src/lexer.ml[2127,111483+9])
                                        Tpat_value
                                        pattern (src/lexer.ml[2127,111483+8]..src/lexer.ml[2127,111483+9])
                                          Tpat_constant Const_int 0
                                      expression (src/lexer.mll[709,111518+4]..src/lexer.mll[710,111597+46])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[709,111518+10]..src/lexer.mll[709,111518+21])
                                              Tpat_tuple
                                              [
                                                pattern (src/lexer.mll[709,111518+10]..src/lexer.mll[709,111518+11])
                                                  Tpat_any
                                                pattern (src/lexer.mll[709,111518+13]..src/lexer.mll[709,111518+21])
                                                  Tpat_var "monsters/1641"
                                              ]
                                            expression (src/lexer.mll[709,111518+24]..src/lexer.mll[709,111518+75])
                                              Texp_apply
                                              expression (src/lexer.mll[709,111518+24]..src/lexer.mll[709,111518+35])
                                                Texp_ident "parentheses/1379"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[709,111518+36]..src/lexer.mll[709,111518+59])
                                                    Texp_apply
                                                    expression (src/lexer.mll[709,111518+37]..src/lexer.mll[709,111518+51])
                                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[709,111518+52]..src/lexer.mll[709,111518+58])
                                                          Texp_ident "lexbuf/1638"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[709,111518+60]..src/lexer.mll[709,111518+68])
                                                    Texp_ident "monsters/1637"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[709,111518+69]..src/lexer.mll[709,111518+75])
                                                    Texp_ident "lexbuf/1638"
                                              ]
                                        ]
                                        expression (src/lexer.mll[710,111597+6]..src/lexer.mll[710,111597+44])
                                          Texp_apply
                                          expression (src/lexer.mll[710,111597+6]..src/lexer.mll[710,111597+17])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[710,111597+18]..src/lexer.mll[710,111597+28])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[710,111597+29]..src/lexer.mll[710,111597+37])
                                                Texp_ident "monsters/1641"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[710,111597+38]..src/lexer.mll[710,111597+44])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2133,111667+4]..src/lexer.ml[2133,111667+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2133,111667+4]..src/lexer.ml[2133,111667+5])
                                          Tpat_constant Const_int 1
                                      expression (src/lexer.mll[712,111698+4]..src/lexer.mll[712,111698+39])
                                        Texp_tuple
                                        [
                                          expression (src/lexer.mll[712,111698+6]..src/lexer.mll[712,111698+27])
                                            Texp_apply
                                            expression (src/lexer.mll[712,111698+6]..src/lexer.mll[712,111698+20])
                                              Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[712,111698+21]..src/lexer.mll[712,111698+27])
                                                  Texp_ident "lexbuf/1638"
                                            ]
                                          expression (src/lexer.mll[712,111698+29]..src/lexer.mll[712,111698+37])
                                            Texp_ident "monsters/1637"
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2138,111761+4]..src/lexer.ml[2138,111761+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2138,111761+4]..src/lexer.ml[2138,111761+5])
                                          Tpat_constant Const_int 2
                                      expression (src/lexer.mll[714,111792+4]..src/lexer.mll[715,111872+46])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[714,111792+10]..src/lexer.mll[714,111792+21])
                                              Tpat_tuple
                                              [
                                                pattern (src/lexer.mll[714,111792+10]..src/lexer.mll[714,111792+11])
                                                  Tpat_any
                                                pattern (src/lexer.mll[714,111792+13]..src/lexer.mll[714,111792+21])
                                                  Tpat_var "monsters/1642"
                                              ]
                                            expression (src/lexer.mll[714,111792+24]..src/lexer.mll[714,111792+76])
                                              Texp_apply
                                              expression (src/lexer.mll[714,111792+24]..src/lexer.mll[714,111792+30])
                                                Texp_ident "action/1377"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[714,111792+31]..src/lexer.mll[714,111792+36])
                                                    Texp_construct "false"
                                                    []
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[714,111792+37]..src/lexer.mll[714,111792+60])
                                                    Texp_apply
                                                    expression (src/lexer.mll[714,111792+38]..src/lexer.mll[714,111792+52])
                                                      Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[714,111792+53]..src/lexer.mll[714,111792+59])
                                                          Texp_ident "lexbuf/1638"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[714,111792+61]..src/lexer.mll[714,111792+69])
                                                    Texp_ident "monsters/1637"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[714,111792+70]..src/lexer.mll[714,111792+76])
                                                    Texp_ident "lexbuf/1638"
                                              ]
                                        ]
                                        expression (src/lexer.mll[715,111872+6]..src/lexer.mll[715,111872+44])
                                          Texp_apply
                                          expression (src/lexer.mll[715,111872+6]..src/lexer.mll[715,111872+17])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[715,111872+18]..src/lexer.mll[715,111872+28])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[715,111872+29]..src/lexer.mll[715,111872+37])
                                                Texp_ident "monsters/1642"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[715,111872+38]..src/lexer.mll[715,111872+44])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2144,111942+4]..src/lexer.ml[2144,111942+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2144,111942+4]..src/lexer.ml[2144,111942+5])
                                          Tpat_constant Const_int 3
                                      expression (src/lexer.ml[2145,111951+0]..src/lexer.mll[719,112238+59])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[716,111977+21]..src/lexer.mll[716,111977+22])
                                              Tpat_var "i/1643"
                                            expression (src/lexer.ml[2149,112022+2]..src/lexer.ml[2149,112022+87])
                                              Texp_apply
                                              expression (src/lexer.ml[2149,112022+2]..src/lexer.ml[2149,112022+19])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2149,112022+20]..src/lexer.ml[2149,112022+26])
                                                    Texp_ident "lexbuf/1638"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2149,112022+27]..src/lexer.ml[2149,112022+60])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2149,112022+56]..src/lexer.ml[2149,112022+57])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2149,112022+28]..src/lexer.ml[2149,112022+55])
                                                          Texp_field
                                                          expression (src/lexer.ml[2149,112022+28]..src/lexer.ml[2149,112022+34])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_start_pos"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2149,112022+58]..src/lexer.ml[2149,112022+59])
                                                          Texp_constant Const_int 1
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2149,112022+61]..src/lexer.ml[2149,112022+87])
                                                    Texp_field
                                                    expression (src/lexer.ml[2149,112022+61]..src/lexer.ml[2149,112022+67])
                                                      Texp_ident "lexbuf/1638"
                                                    "Lexing.lex_curr_pos"
                                              ]
                                        ]
                                        expression (src/lexer.mll[717,112135+4]..src/lexer.mll[719,112238+59])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[717,112135+10]..src/lexer.mll[717,112135+11])
                                                Tpat_var "i/1644"
                                              expression (src/lexer.mll[717,112135+14]..src/lexer.mll[717,112135+53])
                                                Texp_apply
                                                expression (src/lexer.mll[717,112135+14]..src/lexer.mll[717,112135+27])
                                                  Texp_ident "int_of_string/512"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[717,112135+28]..src/lexer.mll[717,112135+51])
                                                      Texp_apply
                                                      expression (src/lexer.mll[717,112135+29]..src/lexer.mll[717,112135+43])
                                                        Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[717,112135+44]..src/lexer.mll[717,112135+50])
                                                            Texp_ident "lexbuf/1638"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[717,112135+52]..src/lexer.mll[717,112135+53])
                                                      Texp_ident "i/1643"
                                                ]
                                          ]
                                          expression (src/lexer.mll[718,112192+6]..src/lexer.mll[719,112238+57])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/lexer.mll[718,112192+10]..src/lexer.mll[718,112192+17])
                                                  Tpat_var "monster/1645"
                                                expression (src/lexer.mll[718,112192+20]..src/lexer.mll[718,112192+42])
                                                  Texp_apply
                                                  expression (src/lexer.mll[718,112192+20]..src/lexer.mll[718,112192+26])
                                                    Texp_ident "dollar/1038"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[718,112192+27]..src/lexer.mll[718,112192+40])
                                                        Texp_apply
                                                        expression (src/lexer.mll[718,112192+28]..src/lexer.mll[718,112192+32])
                                                          Texp_ident "Dune__exe!.Positions.cpos"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/lexer.mll[718,112192+33]..src/lexer.mll[718,112192+39])
                                                              Texp_ident "lexbuf/1638"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/lexer.mll[718,112192+41]..src/lexer.mll[718,112192+42])
                                                        Texp_ident "i/1644"
                                                  ]
                                            ]
                                            expression (src/lexer.mll[719,112238+6]..src/lexer.mll[719,112238+57])
                                              Texp_apply
                                              expression (src/lexer.mll[719,112238+6]..src/lexer.mll[719,112238+17])
                                                Texp_ident "parentheses/1379"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[719,112238+18]..src/lexer.mll[719,112238+28])
                                                    Texp_ident "openingpos/1636"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[719,112238+29]..src/lexer.mll[719,112238+50])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/lexer.mll[719,112238+30]..src/lexer.mll[719,112238+37])
                                                        Texp_ident "monster/1645"
                                                      expression (src/lexer.mll[719,112238+41]..src/lexer.mll[719,112238+49])
                                                        Texp_ident "monsters/1637"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[719,112238+51]..src/lexer.mll[719,112238+57])
                                                    Texp_ident "lexbuf/1638"
                                              ]
                                    <case>
                                      pattern (src/lexer.ml[2156,112321+4]..src/lexer.ml[2156,112321+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2156,112321+4]..src/lexer.ml[2156,112321+5])
                                          Tpat_constant Const_int 4
                                      expression (src/lexer.ml[2157,112330+0]..src/lexer.mll[722,113112+59])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[467,112356+21]..src/lexer.mll[467,112356+22])
                                              Tpat_var "i/1646"
                                            expression (src/lexer.ml[2161,112401+2]..src/lexer.ml[2161,112401+82])
                                              Texp_apply
                                              expression (src/lexer.ml[2161,112401+2]..src/lexer.ml[2161,112401+23])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme_opt"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2161,112401+24]..src/lexer.ml[2161,112401+30])
                                                    Texp_ident "lexbuf/1638"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2161,112401+31]..src/lexer.ml[2161,112401+56])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2161,112401+31]..src/lexer.ml[2161,112401+56]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2161,112401+31]..src/lexer.ml[2161,112401+52])
                                                          Texp_field
                                                          expression (src/lexer.ml[2161,112401+31]..src/lexer.ml[2161,112401+37])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2161,112401+54]..src/lexer.ml[2161,112401+55])
                                                          Texp_constant Const_int 3
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2161,112401+57]..src/lexer.ml[2161,112401+82])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2161,112401+57]..src/lexer.ml[2161,112401+82]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2161,112401+57]..src/lexer.ml[2161,112401+78])
                                                          Texp_field
                                                          expression (src/lexer.ml[2161,112401+57]..src/lexer.ml[2161,112401+63])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2161,112401+80]..src/lexer.ml[2161,112401+81])
                                                          Texp_constant Const_int 2
                                                    ]
                                              ]
                                          <def>
                                            pattern (src/lexer.mll[468,112510+29]..src/lexer.mll[468,112510+30])
                                              Tpat_var "x/1647"
                                            expression (src/lexer.ml[2166,112563+2]..src/lexer.ml[2166,112563+82])
                                              Texp_apply
                                              expression (src/lexer.ml[2166,112563+2]..src/lexer.ml[2166,112563+23])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme_opt"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2166,112563+24]..src/lexer.ml[2166,112563+30])
                                                    Texp_ident "lexbuf/1638"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2166,112563+31]..src/lexer.ml[2166,112563+56])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2166,112563+31]..src/lexer.ml[2166,112563+56]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2166,112563+31]..src/lexer.ml[2166,112563+52])
                                                          Texp_field
                                                          expression (src/lexer.ml[2166,112563+31]..src/lexer.ml[2166,112563+37])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2166,112563+54]..src/lexer.ml[2166,112563+55])
                                                          Texp_constant Const_int 7
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2166,112563+57]..src/lexer.ml[2166,112563+82])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2166,112563+57]..src/lexer.ml[2166,112563+82]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2166,112563+57]..src/lexer.ml[2166,112563+78])
                                                          Texp_field
                                                          expression (src/lexer.ml[2166,112563+57]..src/lexer.ml[2166,112563+63])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2166,112563+80]..src/lexer.ml[2166,112563+81])
                                                          Texp_constant Const_int 6
                                                    ]
                                              ]
                                          <def>
                                            pattern (src/lexer.mll[473,112672+42]..src/lexer.mll[473,112672+47])
                                              Tpat_var "where/1648"
                                            expression (src/lexer.ml[2171,112742+2]..src/lexer.ml[2171,112742+78])
                                              Texp_apply
                                              expression (src/lexer.ml[2171,112742+2]..src/lexer.ml[2171,112742+19])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2171,112742+20]..src/lexer.ml[2171,112742+26])
                                                    Texp_ident "lexbuf/1638"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2171,112742+27]..src/lexer.ml[2171,112742+52])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2171,112742+27]..src/lexer.ml[2171,112742+52]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2171,112742+27]..src/lexer.ml[2171,112742+48])
                                                          Texp_field
                                                          expression (src/lexer.ml[2171,112742+27]..src/lexer.ml[2171,112742+33])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2171,112742+50]..src/lexer.ml[2171,112742+51])
                                                          Texp_constant Const_int 5
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2171,112742+53]..src/lexer.ml[2171,112742+78])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2171,112742+53]..src/lexer.ml[2171,112742+78]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2171,112742+53]..src/lexer.ml[2171,112742+74])
                                                          Texp_field
                                                          expression (src/lexer.ml[2171,112742+53]..src/lexer.ml[2171,112742+59])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2171,112742+76]..src/lexer.ml[2171,112742+77])
                                                          Texp_constant Const_int 4
                                                    ]
                                              ]
                                          <def>
                                            pattern (src/lexer.mll[473,112847+69]..src/lexer.mll[473,112847+75])
                                              Tpat_var "flavor/1649"
                                            expression (src/lexer.ml[2176,112945+2]..src/lexer.ml[2176,112945+78])
                                              Texp_apply
                                              expression (src/lexer.ml[2176,112945+2]..src/lexer.ml[2176,112945+19])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2176,112945+20]..src/lexer.ml[2176,112945+26])
                                                    Texp_ident "lexbuf/1638"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2176,112945+27]..src/lexer.ml[2176,112945+52])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2176,112945+27]..src/lexer.ml[2176,112945+52]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2176,112945+27]..src/lexer.ml[2176,112945+48])
                                                          Texp_field
                                                          expression (src/lexer.ml[2176,112945+27]..src/lexer.ml[2176,112945+33])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2176,112945+50]..src/lexer.ml[2176,112945+51])
                                                          Texp_constant Const_int 1
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2176,112945+53]..src/lexer.ml[2176,112945+78])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2176,112945+53]..src/lexer.ml[2176,112945+78]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2176,112945+53]..src/lexer.ml[2176,112945+74])
                                                          Texp_field
                                                          expression (src/lexer.ml[2176,112945+53]..src/lexer.ml[2176,112945+59])
                                                            Texp_ident "lexbuf/1638"
                                                          "Lexing.lex_mem"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2176,112945+76]..src/lexer.ml[2176,112945+77])
                                                          Texp_constant Const_int 0
                                                    ]
                                              ]
                                        ]
                                        expression (src/lexer.mll[721,113049+4]..src/lexer.mll[722,113112+59])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/lexer.mll[721,113049+10]..src/lexer.mll[721,113049+17])
                                                Tpat_var "monster/1650"
                                              expression (src/lexer.mll[721,113049+20]..src/lexer.mll[721,113049+59])
                                                Texp_apply
                                                expression (src/lexer.mll[721,113049+20]..src/lexer.mll[721,113049+28])
                                                  Texp_ident "position/1063"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[721,113049+29]..src/lexer.mll[721,113049+42])
                                                      Texp_apply
                                                      expression (src/lexer.mll[721,113049+30]..src/lexer.mll[721,113049+34])
                                                        Texp_ident "Dune__exe!.Positions.cpos"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/lexer.mll[721,113049+35]..src/lexer.mll[721,113049+41])
                                                            Texp_ident "lexbuf/1638"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[721,113049+43]..src/lexer.mll[721,113049+48])
                                                      Texp_ident "where/1648"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[721,113049+49]..src/lexer.mll[721,113049+55])
                                                      Texp_ident "flavor/1649"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[721,113049+56]..src/lexer.mll[721,113049+57])
                                                      Texp_ident "i/1646"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[721,113049+58]..src/lexer.mll[721,113049+59])
                                                      Texp_ident "x/1647"
                                                ]
                                          ]
                                          expression (src/lexer.mll[722,113112+6]..src/lexer.mll[722,113112+57])
                                            Texp_apply
                                            expression (src/lexer.mll[722,113112+6]..src/lexer.mll[722,113112+17])
                                              Texp_ident "parentheses/1379"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[722,113112+18]..src/lexer.mll[722,113112+28])
                                                  Texp_ident "openingpos/1636"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[722,113112+29]..src/lexer.mll[722,113112+50])
                                                  Texp_construct "::"
                                                  [
                                                    expression (src/lexer.mll[722,113112+30]..src/lexer.mll[722,113112+37])
                                                      Texp_ident "monster/1650"
                                                    expression (src/lexer.mll[722,113112+41]..src/lexer.mll[722,113112+49])
                                                      Texp_ident "monsters/1637"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[722,113112+51]..src/lexer.mll[722,113112+57])
                                                  Texp_ident "lexbuf/1638"
                                            ]
                                    <case>
                                      pattern (src/lexer.ml[2182,113195+4]..src/lexer.ml[2182,113195+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2182,113195+4]..src/lexer.ml[2182,113195+5])
                                          Tpat_constant Const_int 5
                                      expression (src/lexer.mll[724,113226+4]..src/lexer.mll[724,113226+62])
                                        Texp_apply
                                        expression (src/lexer.mll[724,113226+6]..src/lexer.mll[724,113226+12])
                                          Texp_ident "error2/509"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[724,113226+13]..src/lexer.mll[724,113226+19])
                                              Texp_ident "lexbuf/1638"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost
                                                      Texp_constant Const_string("$previouserror is no longer supported.",(src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost,None)
                                                    expression (src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost
                                                  Texp_constant Const_string("$previouserror is no longer supported.",(src/lexer.mll[724,113226+20]..src/lexer.mll[724,113226+60]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2187,113312+4]..src/lexer.ml[2187,113312+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2187,113312+4]..src/lexer.ml[2187,113312+5])
                                          Tpat_constant Const_int 6
                                      expression (src/lexer.mll[726,113343+4]..src/lexer.mll[727,113392+59])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[726,113343+10]..src/lexer.mll[726,113343+17])
                                              Tpat_var "monster/1651"
                                            expression (src/lexer.mll[726,113343+20]..src/lexer.mll[726,113343+45])
                                              Texp_apply
                                              expression (src/lexer.mll[726,113343+20]..src/lexer.mll[726,113343+31])
                                                Texp_ident "syntaxerror/819"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[726,113343+32]..src/lexer.mll[726,113343+45])
                                                    Texp_apply
                                                    expression (src/lexer.mll[726,113343+33]..src/lexer.mll[726,113343+37])
                                                      Texp_ident "Dune__exe!.Positions.cpos"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.mll[726,113343+38]..src/lexer.mll[726,113343+44])
                                                          Texp_ident "lexbuf/1638"
                                                    ]
                                              ]
                                        ]
                                        expression (src/lexer.mll[727,113392+6]..src/lexer.mll[727,113392+57])
                                          Texp_apply
                                          expression (src/lexer.mll[727,113392+6]..src/lexer.mll[727,113392+17])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[727,113392+18]..src/lexer.mll[727,113392+28])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[727,113392+29]..src/lexer.mll[727,113392+50])
                                                Texp_construct "::"
                                                [
                                                  expression (src/lexer.mll[727,113392+30]..src/lexer.mll[727,113392+37])
                                                    Texp_ident "monster/1651"
                                                  expression (src/lexer.mll[727,113392+41]..src/lexer.mll[727,113392+49])
                                                    Texp_ident "monsters/1637"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[727,113392+51]..src/lexer.mll[727,113392+57])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2193,113475+4]..src/lexer.ml[2193,113475+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2193,113475+4]..src/lexer.ml[2193,113475+5])
                                          Tpat_constant Const_int 7
                                      expression (src/lexer.mll[729,113506+4]..src/lexer.mll[729,113506+85])
                                        Texp_sequence
                                        expression (src/lexer.mll[729,113506+6]..src/lexer.mll[729,113506+43])
                                          Texp_apply
                                          expression (src/lexer.mll[729,113506+6]..src/lexer.mll[729,113506+12])
                                            Texp_ident "string/1385"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[729,113506+13]..src/lexer.mll[729,113506+36])
                                                Texp_apply
                                                expression (src/lexer.mll[729,113506+14]..src/lexer.mll[729,113506+28])
                                                  Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[729,113506+29]..src/lexer.mll[729,113506+35])
                                                      Texp_ident "lexbuf/1638"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[729,113506+37]..src/lexer.mll[729,113506+43])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                        expression (src/lexer.mll[729,113506+45]..src/lexer.mll[729,113506+83])
                                          Texp_apply
                                          expression (src/lexer.mll[729,113506+45]..src/lexer.mll[729,113506+56])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[729,113506+57]..src/lexer.mll[729,113506+67])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[729,113506+68]..src/lexer.mll[729,113506+76])
                                                Texp_ident "monsters/1637"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[729,113506+77]..src/lexer.mll[729,113506+83])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2198,113615+4]..src/lexer.ml[2198,113615+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2198,113615+4]..src/lexer.ml[2198,113615+5])
                                          Tpat_constant Const_int 8
                                      expression (src/lexer.mll[731,113646+4]..src/lexer.mll[731,113646+59])
                                        Texp_sequence
                                        expression (src/lexer.mll[731,113646+6]..src/lexer.mll[731,113646+17])
                                          Texp_apply
                                          expression (src/lexer.mll[731,113646+6]..src/lexer.mll[731,113646+10])
                                            Texp_ident "char/1391"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[731,113646+11]..src/lexer.mll[731,113646+17])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                        expression (src/lexer.mll[731,113646+19]..src/lexer.mll[731,113646+57])
                                          Texp_apply
                                          expression (src/lexer.mll[731,113646+19]..src/lexer.mll[731,113646+30])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[731,113646+31]..src/lexer.mll[731,113646+41])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[731,113646+42]..src/lexer.mll[731,113646+50])
                                                Texp_ident "monsters/1637"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[731,113646+51]..src/lexer.mll[731,113646+57])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2203,113729+4]..src/lexer.ml[2203,113729+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2203,113729+4]..src/lexer.ml[2203,113729+5])
                                          Tpat_constant Const_int 9
                                      expression (src/lexer.mll[733,113760+4]..src/lexer.mll[733,113760+91])
                                        Texp_sequence
                                        expression (src/lexer.mll[733,113760+6]..src/lexer.mll[733,113760+49])
                                          Texp_apply
                                          expression (src/lexer.mll[733,113760+6]..src/lexer.mll[733,113760+18])
                                            Texp_ident "ocamlcomment/1383"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[733,113760+19]..src/lexer.mll[733,113760+42])
                                                Texp_apply
                                                expression (src/lexer.mll[733,113760+20]..src/lexer.mll[733,113760+34])
                                                  Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/lexer.mll[733,113760+35]..src/lexer.mll[733,113760+41])
                                                      Texp_ident "lexbuf/1638"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[733,113760+43]..src/lexer.mll[733,113760+49])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                        expression (src/lexer.mll[733,113760+51]..src/lexer.mll[733,113760+89])
                                          Texp_apply
                                          expression (src/lexer.mll[733,113760+51]..src/lexer.mll[733,113760+62])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[733,113760+63]..src/lexer.mll[733,113760+73])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[733,113760+74]..src/lexer.mll[733,113760+82])
                                                Texp_ident "monsters/1637"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[733,113760+83]..src/lexer.mll[733,113760+89])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2208,113875+4]..src/lexer.ml[2208,113875+6])
                                        Tpat_value
                                        pattern (src/lexer.ml[2208,113875+4]..src/lexer.ml[2208,113875+6])
                                          Tpat_constant Const_int 10
                                      expression (src/lexer.mll[735,113907+4]..src/lexer.mll[735,113907+63])
                                        Texp_sequence
                                        expression (src/lexer.mll[735,113907+6]..src/lexer.mll[735,113907+21])
                                          Texp_apply
                                          expression (src/lexer.mll[735,113907+6]..src/lexer.mll[735,113907+14])
                                            Texp_ident "Stdlib!.Lexing.new_line"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[735,113907+15]..src/lexer.mll[735,113907+21])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                        expression (src/lexer.mll[735,113907+23]..src/lexer.mll[735,113907+61])
                                          Texp_apply
                                          expression (src/lexer.mll[735,113907+23]..src/lexer.mll[735,113907+34])
                                            Texp_ident "parentheses/1379"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[735,113907+35]..src/lexer.mll[735,113907+45])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[735,113907+46]..src/lexer.mll[735,113907+54])
                                                Texp_ident "monsters/1637"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[735,113907+55]..src/lexer.mll[735,113907+61])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                    <case>
                                      pattern (src/lexer.ml[2213,113994+4]..src/lexer.ml[2213,113994+6])
                                        Tpat_value
                                        pattern (src/lexer.ml[2213,113994+4]..src/lexer.ml[2213,113994+6])
                                          Tpat_constant Const_int 11
                                      expression (src/lexer.mll[738,114026+4]..src/lexer.mll[738,114026+59])
                                        Texp_apply
                                        expression (src/lexer.mll[738,114026+6]..src/lexer.mll[738,114026+12])
                                          Texp_ident "error1/467"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[738,114026+13]..src/lexer.mll[738,114026+23])
                                              Texp_ident "openingpos/1636"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost
                                                      Texp_constant Const_string("unbalanced opening parenthesis.",(src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost,None)
                                                    expression (src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost
                                                  Texp_constant Const_string("unbalanced opening parenthesis.",(src/lexer.mll[738,114026+24]..src/lexer.mll[738,114026+57]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2218,114109+4]..src/lexer.ml[2218,114109+6])
                                        Tpat_value
                                        pattern (src/lexer.ml[2218,114109+4]..src/lexer.ml[2218,114109+6])
                                          Tpat_constant Const_int 12
                                      expression (src/lexer.mll[740,114141+4]..src/lexer.mll[740,114141+46])
                                        Texp_apply
                                        expression (src/lexer.mll[740,114141+6]..src/lexer.mll[740,114141+17])
                                          Texp_ident "parentheses/1379"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[740,114141+18]..src/lexer.mll[740,114141+28])
                                              Texp_ident "openingpos/1636"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[740,114141+29]..src/lexer.mll[740,114141+37])
                                              Texp_ident "monsters/1637"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[740,114141+38]..src/lexer.mll[740,114141+44])
                                              Texp_ident "lexbuf/1638"
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2223,114211+4]..src/lexer.ml[2223,114211+21])
                                        Tpat_value
                                        pattern (src/lexer.ml[2223,114211+4]..src/lexer.ml[2223,114211+21])
                                          Tpat_var "__ocaml_lex_state/1640"
                                      expression (src/lexer.ml[2223,114211+25]..src/lexer.ml[2224,114270+78])
                                        Texp_sequence
                                        expression (src/lexer.ml[2223,114211+25]..src/lexer.ml[2223,114211+57])
                                          Texp_apply
                                          expression (src/lexer.ml[2223,114211+25]..src/lexer.ml[2223,114211+50])
                                            Texp_field
                                            expression (src/lexer.ml[2223,114211+25]..src/lexer.ml[2223,114211+31])
                                              Texp_ident "lexbuf/1638"
                                            "Lexing.refill_buff"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2223,114211+51]..src/lexer.ml[2223,114211+57])
                                                Texp_ident "lexbuf/1638"
                                          ]
                                        expression (src/lexer.ml[2224,114270+6]..src/lexer.ml[2224,114270+78])
                                          Texp_apply
                                          expression (src/lexer.ml[2224,114270+6]..src/lexer.ml[2224,114270+33])
                                            Texp_ident "__ocaml_lex_parentheses_rec/1380"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2224,114270+34]..src/lexer.ml[2224,114270+44])
                                                Texp_ident "openingpos/1636"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2224,114270+45]..src/lexer.ml[2224,114270+53])
                                                Texp_ident "monsters/1637"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2224,114270+54]..src/lexer.ml[2224,114270+60])
                                                Texp_ident "lexbuf/1638"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2224,114270+61]..src/lexer.ml[2224,114270+78])
                                                Texp_ident "__ocaml_lex_state/1640"
                                          ]
                                  ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2226,114350+4]..src/lexer.ml[2226,114350+13])
          Tpat_var "attribute/1381"
        expression (src/lexer.ml[2226,114350+14]..src/lexer.ml[2227,114384+50]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2226,114350+14]..src/lexer.ml[2226,114350+24])
                Tpat_var "openingpos/1652"
              expression (src/lexer.ml[2226,114350+25]..src/lexer.ml[2227,114384+50]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2226,114350+25]..src/lexer.ml[2226,114350+31])
                      Tpat_var "lexbuf/1653"
                    expression (src/lexer.ml[2227,114384+3]..src/lexer.ml[2227,114384+50])
                      Texp_apply
                      expression (src/lexer.ml[2227,114384+3]..src/lexer.ml[2227,114384+28])
                        Texp_ident "__ocaml_lex_attribute_rec/1382"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2227,114384+29]..src/lexer.ml[2227,114384+39])
                            Texp_ident "openingpos/1652"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2227,114384+40]..src/lexer.ml[2227,114384+46])
                            Texp_ident "lexbuf/1653"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2227,114384+47]..src/lexer.ml[2227,114384+50])
                            Texp_constant Const_int 189
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2228,114435+4]..src/lexer.ml[2228,114435+29])
          Tpat_var "__ocaml_lex_attribute_rec/1382"
        expression (src/lexer.ml[2228,114435+30]..src/lexer.ml[2284,115856+67]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2228,114435+30]..src/lexer.ml[2228,114435+40])
                Tpat_var "openingpos/1654"
              expression (src/lexer.ml[2228,114435+41]..src/lexer.ml[2284,115856+67]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2228,114435+41]..src/lexer.ml[2228,114435+47])
                      Tpat_var "lexbuf/1655"
                    expression (src/lexer.ml[2228,114435+48]..src/lexer.ml[2284,115856+67]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2228,114435+48]..src/lexer.ml[2228,114435+65])
                            Tpat_var "__ocaml_lex_state/1656"
                          expression (src/lexer.ml[2229,114503+2]..src/lexer.ml[2284,115856+67])
                            Texp_match
                            expression (src/lexer.ml[2229,114503+8]..src/lexer.ml[2229,114503+65])
                              Texp_apply
                              expression (src/lexer.ml[2229,114503+8]..src/lexer.ml[2229,114503+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2229,114503+22]..src/lexer.ml[2229,114503+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2229,114503+41]..src/lexer.ml[2229,114503+58])
                                    Texp_ident "__ocaml_lex_state/1656"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2229,114503+59]..src/lexer.ml[2229,114503+65])
                                    Texp_ident "lexbuf/1655"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[2230,114574+8]..src/lexer.ml[2230,114574+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[2230,114574+8]..src/lexer.ml[2230,114574+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[751,114609+4]..src/lexer.mll[752,114667+35])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[751,114609+10]..src/lexer.mll[751,114609+11])
                                        Tpat_any
                                      expression (src/lexer.mll[751,114609+14]..src/lexer.mll[751,114609+54])
                                        Texp_apply
                                        expression (src/lexer.mll[751,114609+14]..src/lexer.mll[751,114609+23])
                                          Texp_ident "attribute/1381"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[751,114609+24]..src/lexer.mll[751,114609+47])
                                              Texp_apply
                                              expression (src/lexer.mll[751,114609+25]..src/lexer.mll[751,114609+39])
                                                Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[751,114609+40]..src/lexer.mll[751,114609+46])
                                                    Texp_ident "lexbuf/1655"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[751,114609+48]..src/lexer.mll[751,114609+54])
                                              Texp_ident "lexbuf/1655"
                                        ]
                                  ]
                                  expression (src/lexer.mll[752,114667+6]..src/lexer.mll[752,114667+33])
                                    Texp_apply
                                    expression (src/lexer.mll[752,114667+6]..src/lexer.mll[752,114667+15])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[752,114667+16]..src/lexer.mll[752,114667+26])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[752,114667+27]..src/lexer.mll[752,114667+33])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2236,114726+4]..src/lexer.ml[2236,114726+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2236,114726+4]..src/lexer.ml[2236,114726+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.mll[754,114757+4]..src/lexer.mll[754,114757+29])
                                  Texp_apply
                                  expression (src/lexer.mll[754,114757+6]..src/lexer.mll[754,114757+20])
                                    Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[754,114757+21]..src/lexer.mll[754,114757+27])
                                        Texp_ident "lexbuf/1655"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2241,114810+4]..src/lexer.ml[2241,114810+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2241,114810+4]..src/lexer.ml[2241,114810+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.mll[756,114841+4]..src/lexer.mll[757,114908+35])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[756,114841+10]..src/lexer.mll[756,114841+14])
                                        Tpat_tuple
                                        [
                                          pattern (src/lexer.mll[756,114841+10]..src/lexer.mll[756,114841+11])
                                            Tpat_any
                                          pattern (src/lexer.mll[756,114841+13]..src/lexer.mll[756,114841+14])
                                            Tpat_any
                                        ]
                                      expression (src/lexer.mll[756,114841+17]..src/lexer.mll[756,114841+63])
                                        Texp_apply
                                        expression (src/lexer.mll[756,114841+17]..src/lexer.mll[756,114841+23])
                                          Texp_ident "action/1377"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[756,114841+24]..src/lexer.mll[756,114841+29])
                                              Texp_construct "false"
                                              []
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[756,114841+30]..src/lexer.mll[756,114841+53])
                                              Texp_apply
                                              expression (src/lexer.mll[756,114841+31]..src/lexer.mll[756,114841+45])
                                                Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[756,114841+46]..src/lexer.mll[756,114841+52])
                                                    Texp_ident "lexbuf/1655"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[756,114841+54]..src/lexer.mll[756,114841+56])
                                              Texp_construct "[]"
                                              []
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[756,114841+57]..src/lexer.mll[756,114841+63])
                                              Texp_ident "lexbuf/1655"
                                        ]
                                  ]
                                  expression (src/lexer.mll[757,114908+6]..src/lexer.mll[757,114908+33])
                                    Texp_apply
                                    expression (src/lexer.mll[757,114908+6]..src/lexer.mll[757,114908+15])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[757,114908+16]..src/lexer.mll[757,114908+26])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[757,114908+27]..src/lexer.mll[757,114908+33])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2247,114967+4]..src/lexer.ml[2247,114967+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2247,114967+4]..src/lexer.ml[2247,114967+5])
                                    Tpat_constant Const_int 3
                                expression (src/lexer.mll[759,114998+4]..src/lexer.mll[760,115064+35])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[759,114998+10]..src/lexer.mll[759,114998+14])
                                        Tpat_tuple
                                        [
                                          pattern (src/lexer.mll[759,114998+10]..src/lexer.mll[759,114998+11])
                                            Tpat_any
                                          pattern (src/lexer.mll[759,114998+13]..src/lexer.mll[759,114998+14])
                                            Tpat_any
                                        ]
                                      expression (src/lexer.mll[759,114998+17]..src/lexer.mll[759,114998+62])
                                        Texp_apply
                                        expression (src/lexer.mll[759,114998+17]..src/lexer.mll[759,114998+28])
                                          Texp_ident "parentheses/1379"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[759,114998+29]..src/lexer.mll[759,114998+52])
                                              Texp_apply
                                              expression (src/lexer.mll[759,114998+30]..src/lexer.mll[759,114998+44])
                                                Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.mll[759,114998+45]..src/lexer.mll[759,114998+51])
                                                    Texp_ident "lexbuf/1655"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[759,114998+53]..src/lexer.mll[759,114998+55])
                                              Texp_construct "[]"
                                              []
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[759,114998+56]..src/lexer.mll[759,114998+62])
                                              Texp_ident "lexbuf/1655"
                                        ]
                                  ]
                                  expression (src/lexer.mll[760,115064+6]..src/lexer.mll[760,115064+33])
                                    Texp_apply
                                    expression (src/lexer.mll[760,115064+6]..src/lexer.mll[760,115064+15])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[760,115064+16]..src/lexer.mll[760,115064+26])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[760,115064+27]..src/lexer.mll[760,115064+33])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2253,115123+4]..src/lexer.ml[2253,115123+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2253,115123+4]..src/lexer.ml[2253,115123+5])
                                    Tpat_constant Const_int 4
                                expression (src/lexer.mll[762,115154+4]..src/lexer.mll[762,115154+74])
                                  Texp_sequence
                                  expression (src/lexer.mll[762,115154+6]..src/lexer.mll[762,115154+43])
                                    Texp_apply
                                    expression (src/lexer.mll[762,115154+6]..src/lexer.mll[762,115154+12])
                                      Texp_ident "string/1385"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[762,115154+13]..src/lexer.mll[762,115154+36])
                                          Texp_apply
                                          expression (src/lexer.mll[762,115154+14]..src/lexer.mll[762,115154+28])
                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[762,115154+29]..src/lexer.mll[762,115154+35])
                                                Texp_ident "lexbuf/1655"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[762,115154+37]..src/lexer.mll[762,115154+43])
                                          Texp_ident "lexbuf/1655"
                                    ]
                                  expression (src/lexer.mll[762,115154+45]..src/lexer.mll[762,115154+72])
                                    Texp_apply
                                    expression (src/lexer.mll[762,115154+45]..src/lexer.mll[762,115154+54])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[762,115154+55]..src/lexer.mll[762,115154+65])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[762,115154+66]..src/lexer.mll[762,115154+72])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2258,115252+4]..src/lexer.ml[2258,115252+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2258,115252+4]..src/lexer.ml[2258,115252+5])
                                    Tpat_constant Const_int 5
                                expression (src/lexer.mll[764,115283+4]..src/lexer.mll[764,115283+48])
                                  Texp_sequence
                                  expression (src/lexer.mll[764,115283+6]..src/lexer.mll[764,115283+17])
                                    Texp_apply
                                    expression (src/lexer.mll[764,115283+6]..src/lexer.mll[764,115283+10])
                                      Texp_ident "char/1391"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[764,115283+11]..src/lexer.mll[764,115283+17])
                                          Texp_ident "lexbuf/1655"
                                    ]
                                  expression (src/lexer.mll[764,115283+19]..src/lexer.mll[764,115283+46])
                                    Texp_apply
                                    expression (src/lexer.mll[764,115283+19]..src/lexer.mll[764,115283+28])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[764,115283+29]..src/lexer.mll[764,115283+39])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[764,115283+40]..src/lexer.mll[764,115283+46])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2263,115355+4]..src/lexer.ml[2263,115355+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2263,115355+4]..src/lexer.ml[2263,115355+5])
                                    Tpat_constant Const_int 6
                                expression (src/lexer.mll[766,115386+4]..src/lexer.mll[766,115386+80])
                                  Texp_sequence
                                  expression (src/lexer.mll[766,115386+6]..src/lexer.mll[766,115386+49])
                                    Texp_apply
                                    expression (src/lexer.mll[766,115386+6]..src/lexer.mll[766,115386+18])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[766,115386+19]..src/lexer.mll[766,115386+42])
                                          Texp_apply
                                          expression (src/lexer.mll[766,115386+20]..src/lexer.mll[766,115386+34])
                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[766,115386+35]..src/lexer.mll[766,115386+41])
                                                Texp_ident "lexbuf/1655"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[766,115386+43]..src/lexer.mll[766,115386+49])
                                          Texp_ident "lexbuf/1655"
                                    ]
                                  expression (src/lexer.mll[766,115386+51]..src/lexer.mll[766,115386+78])
                                    Texp_apply
                                    expression (src/lexer.mll[766,115386+51]..src/lexer.mll[766,115386+60])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[766,115386+61]..src/lexer.mll[766,115386+71])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[766,115386+72]..src/lexer.mll[766,115386+78])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2268,115490+4]..src/lexer.ml[2268,115490+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2268,115490+4]..src/lexer.ml[2268,115490+5])
                                    Tpat_constant Const_int 7
                                expression (src/lexer.mll[768,115521+4]..src/lexer.mll[768,115521+52])
                                  Texp_sequence
                                  expression (src/lexer.mll[768,115521+6]..src/lexer.mll[768,115521+21])
                                    Texp_apply
                                    expression (src/lexer.mll[768,115521+6]..src/lexer.mll[768,115521+14])
                                      Texp_ident "Stdlib!.Lexing.new_line"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[768,115521+15]..src/lexer.mll[768,115521+21])
                                          Texp_ident "lexbuf/1655"
                                    ]
                                  expression (src/lexer.mll[768,115521+23]..src/lexer.mll[768,115521+50])
                                    Texp_apply
                                    expression (src/lexer.mll[768,115521+23]..src/lexer.mll[768,115521+32])
                                      Texp_ident "attribute/1381"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[768,115521+33]..src/lexer.mll[768,115521+43])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[768,115521+44]..src/lexer.mll[768,115521+50])
                                          Texp_ident "lexbuf/1655"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2273,115597+4]..src/lexer.ml[2273,115597+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2273,115597+4]..src/lexer.ml[2273,115597+5])
                                    Tpat_constant Const_int 8
                                expression (src/lexer.mll[772,115628+4]..src/lexer.mll[772,115628+55])
                                  Texp_apply
                                  expression (src/lexer.mll[772,115628+6]..src/lexer.mll[772,115628+12])
                                    Texp_ident "error1/467"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[772,115628+13]..src/lexer.mll[772,115628+23])
                                        Texp_ident "openingpos/1654"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost
                                                Texp_constant Const_string("unbalanced opening bracket.",(src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost,None)
                                              expression (src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                          expression (src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost
                                            Texp_constant Const_string("unbalanced opening bracket.",(src/lexer.mll[772,115628+24]..src/lexer.mll[772,115628+53]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[2278,115707+4]..src/lexer.ml[2278,115707+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2278,115707+4]..src/lexer.ml[2278,115707+5])
                                    Tpat_constant Const_int 9
                                expression (src/lexer.mll[774,115738+4]..src/lexer.mll[774,115738+35])
                                  Texp_apply
                                  expression (src/lexer.mll[774,115738+6]..src/lexer.mll[774,115738+15])
                                    Texp_ident "attribute/1381"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[774,115738+16]..src/lexer.mll[774,115738+26])
                                        Texp_ident "openingpos/1654"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[774,115738+27]..src/lexer.mll[774,115738+33])
                                        Texp_ident "lexbuf/1655"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2283,115797+4]..src/lexer.ml[2283,115797+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[2283,115797+4]..src/lexer.ml[2283,115797+21])
                                    Tpat_var "__ocaml_lex_state/1657"
                                expression (src/lexer.ml[2283,115797+25]..src/lexer.ml[2284,115856+67])
                                  Texp_sequence
                                  expression (src/lexer.ml[2283,115797+25]..src/lexer.ml[2283,115797+57])
                                    Texp_apply
                                    expression (src/lexer.ml[2283,115797+25]..src/lexer.ml[2283,115797+50])
                                      Texp_field
                                      expression (src/lexer.ml[2283,115797+25]..src/lexer.ml[2283,115797+31])
                                        Texp_ident "lexbuf/1655"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2283,115797+51]..src/lexer.ml[2283,115797+57])
                                          Texp_ident "lexbuf/1655"
                                    ]
                                  expression (src/lexer.ml[2284,115856+6]..src/lexer.ml[2284,115856+67])
                                    Texp_apply
                                    expression (src/lexer.ml[2284,115856+6]..src/lexer.ml[2284,115856+31])
                                      Texp_ident "__ocaml_lex_attribute_rec/1382"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2284,115856+32]..src/lexer.ml[2284,115856+42])
                                          Texp_ident "openingpos/1654"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2284,115856+43]..src/lexer.ml[2284,115856+49])
                                          Texp_ident "lexbuf/1655"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2284,115856+50]..src/lexer.ml[2284,115856+67])
                                          Texp_ident "__ocaml_lex_state/1657"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2286,115925+4]..src/lexer.ml[2286,115925+16])
          Tpat_var "ocamlcomment/1383"
        expression (src/lexer.ml[2286,115925+17]..src/lexer.ml[2287,115962+53]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2286,115925+17]..src/lexer.ml[2286,115925+27])
                Tpat_var "openingpos/1658"
              expression (src/lexer.ml[2286,115925+28]..src/lexer.ml[2287,115962+53]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2286,115925+28]..src/lexer.ml[2286,115925+34])
                      Tpat_var "lexbuf/1659"
                    expression (src/lexer.ml[2287,115962+3]..src/lexer.ml[2287,115962+53])
                      Texp_apply
                      expression (src/lexer.ml[2287,115962+3]..src/lexer.ml[2287,115962+31])
                        Texp_ident "__ocaml_lex_ocamlcomment_rec/1384"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2287,115962+32]..src/lexer.ml[2287,115962+42])
                            Texp_ident "openingpos/1658"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2287,115962+43]..src/lexer.ml[2287,115962+49])
                            Texp_ident "lexbuf/1659"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2287,115962+50]..src/lexer.ml[2287,115962+53])
                            Texp_constant Const_int 201
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2288,116016+4]..src/lexer.ml[2288,116016+32])
          Tpat_var "__ocaml_lex_ocamlcomment_rec/1384"
        expression (src/lexer.ml[2288,116016+33]..src/lexer.ml[2326,116975+70]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2288,116016+33]..src/lexer.ml[2288,116016+43])
                Tpat_var "openingpos/1660"
              expression (src/lexer.ml[2288,116016+44]..src/lexer.ml[2326,116975+70]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2288,116016+44]..src/lexer.ml[2288,116016+50])
                      Tpat_var "lexbuf/1661"
                    expression (src/lexer.ml[2288,116016+51]..src/lexer.ml[2326,116975+70]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2288,116016+51]..src/lexer.ml[2288,116016+68])
                            Tpat_var "__ocaml_lex_state/1662"
                          expression (src/lexer.ml[2289,116087+2]..src/lexer.ml[2326,116975+70])
                            Texp_match
                            expression (src/lexer.ml[2289,116087+8]..src/lexer.ml[2289,116087+65])
                              Texp_apply
                              expression (src/lexer.ml[2289,116087+8]..src/lexer.ml[2289,116087+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2289,116087+22]..src/lexer.ml[2289,116087+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2289,116087+41]..src/lexer.ml[2289,116087+58])
                                    Texp_ident "__ocaml_lex_state/1662"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2289,116087+59]..src/lexer.ml[2289,116087+65])
                                    Texp_ident "lexbuf/1661"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[2290,116158+8]..src/lexer.ml[2290,116158+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[2290,116158+8]..src/lexer.ml[2290,116158+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[786,116193+4]..src/lexer.mll[786,116193+10])
                                  Texp_construct "()"
                                  []
                              <case>
                                pattern (src/lexer.ml[2295,116227+4]..src/lexer.ml[2295,116227+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2295,116227+4]..src/lexer.ml[2295,116227+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.mll[788,116258+4]..src/lexer.mll[788,116258+83])
                                  Texp_sequence
                                  expression (src/lexer.mll[788,116258+6]..src/lexer.mll[788,116258+49])
                                    Texp_apply
                                    expression (src/lexer.mll[788,116258+6]..src/lexer.mll[788,116258+18])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[788,116258+19]..src/lexer.mll[788,116258+42])
                                          Texp_apply
                                          expression (src/lexer.mll[788,116258+20]..src/lexer.mll[788,116258+34])
                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[788,116258+35]..src/lexer.mll[788,116258+41])
                                                Texp_ident "lexbuf/1661"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[788,116258+43]..src/lexer.mll[788,116258+49])
                                          Texp_ident "lexbuf/1661"
                                    ]
                                  expression (src/lexer.mll[788,116258+51]..src/lexer.mll[788,116258+81])
                                    Texp_apply
                                    expression (src/lexer.mll[788,116258+51]..src/lexer.mll[788,116258+63])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[788,116258+64]..src/lexer.mll[788,116258+74])
                                          Texp_ident "openingpos/1660"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[788,116258+75]..src/lexer.mll[788,116258+81])
                                          Texp_ident "lexbuf/1661"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2300,116365+4]..src/lexer.ml[2300,116365+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2300,116365+4]..src/lexer.ml[2300,116365+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.mll[790,116396+4]..src/lexer.mll[790,116396+77])
                                  Texp_sequence
                                  expression (src/lexer.mll[790,116396+6]..src/lexer.mll[790,116396+43])
                                    Texp_apply
                                    expression (src/lexer.mll[790,116396+6]..src/lexer.mll[790,116396+12])
                                      Texp_ident "string/1385"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[790,116396+13]..src/lexer.mll[790,116396+36])
                                          Texp_apply
                                          expression (src/lexer.mll[790,116396+14]..src/lexer.mll[790,116396+28])
                                            Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.mll[790,116396+29]..src/lexer.mll[790,116396+35])
                                                Texp_ident "lexbuf/1661"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[790,116396+37]..src/lexer.mll[790,116396+43])
                                          Texp_ident "lexbuf/1661"
                                    ]
                                  expression (src/lexer.mll[790,116396+45]..src/lexer.mll[790,116396+75])
                                    Texp_apply
                                    expression (src/lexer.mll[790,116396+45]..src/lexer.mll[790,116396+57])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[790,116396+58]..src/lexer.mll[790,116396+68])
                                          Texp_ident "openingpos/1660"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[790,116396+69]..src/lexer.mll[790,116396+75])
                                          Texp_ident "lexbuf/1661"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2305,116497+4]..src/lexer.ml[2305,116497+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2305,116497+4]..src/lexer.ml[2305,116497+5])
                                    Tpat_constant Const_int 3
                                expression (src/lexer.mll[792,116528+4]..src/lexer.mll[792,116528+51])
                                  Texp_sequence
                                  expression (src/lexer.mll[792,116528+6]..src/lexer.mll[792,116528+17])
                                    Texp_apply
                                    expression (src/lexer.mll[792,116528+6]..src/lexer.mll[792,116528+10])
                                      Texp_ident "char/1391"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[792,116528+11]..src/lexer.mll[792,116528+17])
                                          Texp_ident "lexbuf/1661"
                                    ]
                                  expression (src/lexer.mll[792,116528+19]..src/lexer.mll[792,116528+49])
                                    Texp_apply
                                    expression (src/lexer.mll[792,116528+19]..src/lexer.mll[792,116528+31])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[792,116528+32]..src/lexer.mll[792,116528+42])
                                          Texp_ident "openingpos/1660"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[792,116528+43]..src/lexer.mll[792,116528+49])
                                          Texp_ident "lexbuf/1661"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2310,116603+4]..src/lexer.ml[2310,116603+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2310,116603+4]..src/lexer.ml[2310,116603+5])
                                    Tpat_constant Const_int 4
                                expression (src/lexer.mll[794,116634+4]..src/lexer.mll[794,116634+55])
                                  Texp_sequence
                                  expression (src/lexer.mll[794,116634+6]..src/lexer.mll[794,116634+21])
                                    Texp_apply
                                    expression (src/lexer.mll[794,116634+6]..src/lexer.mll[794,116634+14])
                                      Texp_ident "Stdlib!.Lexing.new_line"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[794,116634+15]..src/lexer.mll[794,116634+21])
                                          Texp_ident "lexbuf/1661"
                                    ]
                                  expression (src/lexer.mll[794,116634+23]..src/lexer.mll[794,116634+53])
                                    Texp_apply
                                    expression (src/lexer.mll[794,116634+23]..src/lexer.mll[794,116634+35])
                                      Texp_ident "ocamlcomment/1383"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[794,116634+36]..src/lexer.mll[794,116634+46])
                                          Texp_ident "openingpos/1660"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[794,116634+47]..src/lexer.mll[794,116634+53])
                                          Texp_ident "lexbuf/1661"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2315,116713+4]..src/lexer.ml[2315,116713+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2315,116713+4]..src/lexer.ml[2315,116713+5])
                                    Tpat_constant Const_int 5
                                expression (src/lexer.mll[796,116744+4]..src/lexer.mll[796,116744+55])
                                  Texp_apply
                                  expression (src/lexer.mll[796,116744+6]..src/lexer.mll[796,116744+12])
                                    Texp_ident "error1/467"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[796,116744+13]..src/lexer.mll[796,116744+23])
                                        Texp_ident "openingpos/1660"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost
                                                Texp_constant Const_string("unterminated OCaml comment.",(src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost,None)
                                              expression (src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                          expression (src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost
                                            Texp_constant Const_string("unterminated OCaml comment.",(src/lexer.mll[796,116744+24]..src/lexer.mll[796,116744+53]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[2320,116823+4]..src/lexer.ml[2320,116823+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2320,116823+4]..src/lexer.ml[2320,116823+5])
                                    Tpat_constant Const_int 6
                                expression (src/lexer.mll[798,116854+4]..src/lexer.mll[798,116854+38])
                                  Texp_apply
                                  expression (src/lexer.mll[798,116854+6]..src/lexer.mll[798,116854+18])
                                    Texp_ident "ocamlcomment/1383"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[798,116854+19]..src/lexer.mll[798,116854+29])
                                        Texp_ident "openingpos/1660"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[798,116854+30]..src/lexer.mll[798,116854+36])
                                        Texp_ident "lexbuf/1661"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2325,116916+4]..src/lexer.ml[2325,116916+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[2325,116916+4]..src/lexer.ml[2325,116916+21])
                                    Tpat_var "__ocaml_lex_state/1663"
                                expression (src/lexer.ml[2325,116916+25]..src/lexer.ml[2326,116975+70])
                                  Texp_sequence
                                  expression (src/lexer.ml[2325,116916+25]..src/lexer.ml[2325,116916+57])
                                    Texp_apply
                                    expression (src/lexer.ml[2325,116916+25]..src/lexer.ml[2325,116916+50])
                                      Texp_field
                                      expression (src/lexer.ml[2325,116916+25]..src/lexer.ml[2325,116916+31])
                                        Texp_ident "lexbuf/1661"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2325,116916+51]..src/lexer.ml[2325,116916+57])
                                          Texp_ident "lexbuf/1661"
                                    ]
                                  expression (src/lexer.ml[2326,116975+6]..src/lexer.ml[2326,116975+70])
                                    Texp_apply
                                    expression (src/lexer.ml[2326,116975+6]..src/lexer.ml[2326,116975+34])
                                      Texp_ident "__ocaml_lex_ocamlcomment_rec/1384"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2326,116975+35]..src/lexer.ml[2326,116975+45])
                                          Texp_ident "openingpos/1660"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2326,116975+46]..src/lexer.ml[2326,116975+52])
                                          Texp_ident "lexbuf/1661"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2326,116975+53]..src/lexer.ml[2326,116975+70])
                                          Texp_ident "__ocaml_lex_state/1663"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2328,117047+4]..src/lexer.ml[2328,117047+10])
          Tpat_var "string/1385"
        expression (src/lexer.ml[2328,117047+11]..src/lexer.ml[2329,117078+47]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2328,117047+11]..src/lexer.ml[2328,117047+21])
                Tpat_var "openingpos/1664"
              expression (src/lexer.ml[2328,117047+22]..src/lexer.ml[2329,117078+47]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2328,117047+22]..src/lexer.ml[2328,117047+28])
                      Tpat_var "lexbuf/1665"
                    expression (src/lexer.ml[2329,117078+3]..src/lexer.ml[2329,117078+47])
                      Texp_apply
                      expression (src/lexer.ml[2329,117078+3]..src/lexer.ml[2329,117078+25])
                        Texp_ident "__ocaml_lex_string_rec/1386"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2329,117078+26]..src/lexer.ml[2329,117078+36])
                            Texp_ident "openingpos/1664"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2329,117078+37]..src/lexer.ml[2329,117078+43])
                            Texp_ident "lexbuf/1665"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2329,117078+44]..src/lexer.ml[2329,117078+47])
                            Texp_constant Const_int 212
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2330,117126+4]..src/lexer.ml[2330,117126+26])
          Tpat_var "__ocaml_lex_string_rec/1386"
        expression (src/lexer.ml[2330,117126+27]..src/lexer.ml[2358,117777+64]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2330,117126+27]..src/lexer.ml[2330,117126+37])
                Tpat_var "openingpos/1666"
              expression (src/lexer.ml[2330,117126+38]..src/lexer.ml[2358,117777+64]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2330,117126+38]..src/lexer.ml[2330,117126+44])
                      Tpat_var "lexbuf/1667"
                    expression (src/lexer.ml[2330,117126+45]..src/lexer.ml[2358,117777+64]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2330,117126+45]..src/lexer.ml[2330,117126+62])
                            Tpat_var "__ocaml_lex_state/1668"
                          expression (src/lexer.ml[2331,117191+2]..src/lexer.ml[2358,117777+64])
                            Texp_match
                            expression (src/lexer.ml[2331,117191+8]..src/lexer.ml[2331,117191+65])
                              Texp_apply
                              expression (src/lexer.ml[2331,117191+8]..src/lexer.ml[2331,117191+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2331,117191+22]..src/lexer.ml[2331,117191+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2331,117191+41]..src/lexer.ml[2331,117191+58])
                                    Texp_ident "__ocaml_lex_state/1668"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2331,117191+59]..src/lexer.ml[2331,117191+65])
                                    Texp_ident "lexbuf/1667"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[2332,117262+8]..src/lexer.ml[2332,117262+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[2332,117262+8]..src/lexer.ml[2332,117262+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[806,117297+4]..src/lexer.mll[806,117297+10])
                                  Texp_construct "()"
                                  []
                              <case>
                                pattern (src/lexer.ml[2337,117331+4]..src/lexer.ml[2337,117331+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2337,117331+4]..src/lexer.ml[2337,117331+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.mll[809,117362+4]..src/lexer.mll[809,117362+49])
                                  Texp_sequence
                                  expression (src/lexer.mll[809,117362+6]..src/lexer.mll[809,117362+21])
                                    Texp_apply
                                    expression (src/lexer.mll[809,117362+6]..src/lexer.mll[809,117362+14])
                                      Texp_ident "Stdlib!.Lexing.new_line"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[809,117362+15]..src/lexer.mll[809,117362+21])
                                          Texp_ident "lexbuf/1667"
                                    ]
                                  expression (src/lexer.mll[809,117362+23]..src/lexer.mll[809,117362+47])
                                    Texp_apply
                                    expression (src/lexer.mll[809,117362+23]..src/lexer.mll[809,117362+29])
                                      Texp_ident "string/1385"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[809,117362+30]..src/lexer.mll[809,117362+40])
                                          Texp_ident "openingpos/1666"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.mll[809,117362+41]..src/lexer.mll[809,117362+47])
                                          Texp_ident "lexbuf/1667"
                                    ]
                              <case>
                                pattern (src/lexer.ml[2342,117435+4]..src/lexer.ml[2342,117435+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2342,117435+4]..src/lexer.ml[2342,117435+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.mll[813,117466+4]..src/lexer.mll[813,117466+32])
                                  Texp_apply
                                  expression (src/lexer.mll[813,117466+6]..src/lexer.mll[813,117466+12])
                                    Texp_ident "string/1385"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[813,117466+13]..src/lexer.mll[813,117466+23])
                                        Texp_ident "openingpos/1666"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[813,117466+24]..src/lexer.mll[813,117466+30])
                                        Texp_ident "lexbuf/1667"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2347,117522+4]..src/lexer.ml[2347,117522+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2347,117522+4]..src/lexer.ml[2347,117522+5])
                                    Tpat_constant Const_int 3
                                expression (src/lexer.mll[815,117553+4]..src/lexer.mll[815,117553+54])
                                  Texp_apply
                                  expression (src/lexer.mll[815,117553+6]..src/lexer.mll[815,117553+12])
                                    Texp_ident "error1/467"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[815,117553+13]..src/lexer.mll[815,117553+23])
                                        Texp_ident "openingpos/1666"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost
                                                Texp_constant Const_string("unterminated OCaml string.",(src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost,None)
                                              expression (src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                          expression (src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost
                                            Texp_constant Const_string("unterminated OCaml string.",(src/lexer.mll[815,117553+24]..src/lexer.mll[815,117553+52]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/lexer.ml[2352,117631+4]..src/lexer.ml[2352,117631+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2352,117631+4]..src/lexer.ml[2352,117631+5])
                                    Tpat_constant Const_int 4
                                expression (src/lexer.mll[817,117662+4]..src/lexer.mll[817,117662+32])
                                  Texp_apply
                                  expression (src/lexer.mll[817,117662+6]..src/lexer.mll[817,117662+12])
                                    Texp_ident "string/1385"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[817,117662+13]..src/lexer.mll[817,117662+23])
                                        Texp_ident "openingpos/1666"
                                    <arg>
                                      Nolabel
                                      expression (src/lexer.mll[817,117662+24]..src/lexer.mll[817,117662+30])
                                        Texp_ident "lexbuf/1667"
                                  ]
                              <case>
                                pattern (src/lexer.ml[2357,117718+4]..src/lexer.ml[2357,117718+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[2357,117718+4]..src/lexer.ml[2357,117718+21])
                                    Tpat_var "__ocaml_lex_state/1669"
                                expression (src/lexer.ml[2357,117718+25]..src/lexer.ml[2358,117777+64])
                                  Texp_sequence
                                  expression (src/lexer.ml[2357,117718+25]..src/lexer.ml[2357,117718+57])
                                    Texp_apply
                                    expression (src/lexer.ml[2357,117718+25]..src/lexer.ml[2357,117718+50])
                                      Texp_field
                                      expression (src/lexer.ml[2357,117718+25]..src/lexer.ml[2357,117718+31])
                                        Texp_ident "lexbuf/1667"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2357,117718+51]..src/lexer.ml[2357,117718+57])
                                          Texp_ident "lexbuf/1667"
                                    ]
                                  expression (src/lexer.ml[2358,117777+6]..src/lexer.ml[2358,117777+64])
                                    Texp_apply
                                    expression (src/lexer.ml[2358,117777+6]..src/lexer.ml[2358,117777+28])
                                      Texp_ident "__ocaml_lex_string_rec/1386"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2358,117777+29]..src/lexer.ml[2358,117777+39])
                                          Texp_ident "openingpos/1666"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2358,117777+40]..src/lexer.ml[2358,117777+46])
                                          Texp_ident "lexbuf/1667"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2358,117777+47]..src/lexer.ml[2358,117777+64])
                                          Texp_ident "__ocaml_lex_state/1669"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2360,117843+4]..src/lexer.ml[2360,117843+17])
          Tpat_var "record_string/1387"
        expression (src/lexer.ml[2360,117843+18]..src/lexer.ml[2361,117888+61]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2360,117843+18]..src/lexer.ml[2360,117843+28])
                Tpat_var "openingpos/1670"
              expression (src/lexer.ml[2360,117843+29]..src/lexer.ml[2361,117888+61]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2360,117843+29]..src/lexer.ml[2360,117843+35])
                      Tpat_var "buffer/1671"
                    expression (src/lexer.ml[2360,117843+36]..src/lexer.ml[2361,117888+61]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2360,117843+36]..src/lexer.ml[2360,117843+42])
                            Tpat_var "lexbuf/1672"
                          expression (src/lexer.ml[2361,117888+3]..src/lexer.ml[2361,117888+61])
                            Texp_apply
                            expression (src/lexer.ml[2361,117888+3]..src/lexer.ml[2361,117888+32])
                              Texp_ident "__ocaml_lex_record_string_rec/1388"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.ml[2361,117888+33]..src/lexer.ml[2361,117888+43])
                                  Texp_ident "openingpos/1670"
                              <arg>
                                Nolabel
                                expression (src/lexer.ml[2361,117888+44]..src/lexer.ml[2361,117888+50])
                                  Texp_ident "buffer/1671"
                              <arg>
                                Nolabel
                                expression (src/lexer.ml[2361,117888+51]..src/lexer.ml[2361,117888+57])
                                  Texp_ident "lexbuf/1672"
                              <arg>
                                Nolabel
                                expression (src/lexer.ml[2361,117888+58]..src/lexer.ml[2361,117888+61])
                                  Texp_constant Const_int 221
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2362,117950+4]..src/lexer.ml[2362,117950+33])
          Tpat_var "__ocaml_lex_record_string_rec/1388"
        expression (src/lexer.ml[2362,117950+34]..src/lexer.ml[2413,119350+78]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2362,117950+34]..src/lexer.ml[2362,117950+44])
                Tpat_var "openingpos/1673"
              expression (src/lexer.ml[2362,117950+45]..src/lexer.ml[2413,119350+78]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2362,117950+45]..src/lexer.ml[2362,117950+51])
                      Tpat_var "buffer/1674"
                    expression (src/lexer.ml[2362,117950+52]..src/lexer.ml[2413,119350+78]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2362,117950+52]..src/lexer.ml[2362,117950+58])
                            Tpat_var "lexbuf/1675"
                          expression (src/lexer.ml[2362,117950+59]..src/lexer.ml[2413,119350+78]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/lexer.ml[2362,117950+59]..src/lexer.ml[2362,117950+76])
                                  Tpat_var "__ocaml_lex_state/1676"
                                expression (src/lexer.ml[2363,118029+2]..src/lexer.ml[2413,119350+78])
                                  Texp_match
                                  expression (src/lexer.ml[2363,118029+8]..src/lexer.ml[2363,118029+65])
                                    Texp_apply
                                    expression (src/lexer.ml[2363,118029+8]..src/lexer.ml[2363,118029+21])
                                      Texp_ident "Stdlib!.Lexing.engine"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2363,118029+22]..src/lexer.ml[2363,118029+40])
                                          Texp_ident "__ocaml_lex_tables/1370"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2363,118029+41]..src/lexer.ml[2363,118029+58])
                                          Texp_ident "__ocaml_lex_state/1676"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2363,118029+59]..src/lexer.ml[2363,118029+65])
                                          Texp_ident "lexbuf/1675"
                                    ]
                                  [
                                    <case>
                                      pattern (src/lexer.ml[2364,118100+8]..src/lexer.ml[2364,118100+9])
                                        Tpat_value
                                        pattern (src/lexer.ml[2364,118100+8]..src/lexer.ml[2364,118100+9])
                                          Tpat_constant Const_int 0
                                      expression (src/lexer.mll[825,118135+4]..src/lexer.mll[825,118135+30])
                                        Texp_apply
                                        expression (src/lexer.mll[825,118135+6]..src/lexer.mll[825,118135+21])
                                          Texp_ident "Stdlib!.Buffer.contents"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[825,118135+22]..src/lexer.mll[825,118135+28])
                                              Texp_ident "buffer/1674"
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2369,118189+4]..src/lexer.ml[2369,118189+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2369,118189+4]..src/lexer.ml[2369,118189+5])
                                          Tpat_constant Const_int 1
                                      expression (src/lexer.ml[2370,118198+0]..src/lexer.mll[829,118527+46])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[826,118224+44]..src/lexer.mll[826,118224+52])
                                              Tpat_var "sequence/1678"
                                            expression (src/lexer.ml[2374,118299+2]..src/lexer.ml[2374,118299+88])
                                              Texp_apply
                                              expression (src/lexer.ml[2374,118299+2]..src/lexer.ml[2374,118299+19])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2374,118299+20]..src/lexer.ml[2374,118299+26])
                                                    Texp_ident "lexbuf/1675"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2374,118299+27]..src/lexer.ml[2374,118299+54])
                                                    Texp_field
                                                    expression (src/lexer.ml[2374,118299+27]..src/lexer.ml[2374,118299+33])
                                                      Texp_ident "lexbuf/1675"
                                                    "Lexing.lex_start_pos"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2374,118299+55]..src/lexer.ml[2374,118299+88])
                                                    Texp_apply
                                                    expression (src/lexer.ml[2374,118299+84]..src/lexer.ml[2374,118299+85])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2374,118299+56]..src/lexer.ml[2374,118299+83])
                                                          Texp_field
                                                          expression (src/lexer.ml[2374,118299+56]..src/lexer.ml[2374,118299+62])
                                                            Texp_ident "lexbuf/1675"
                                                          "Lexing.lex_start_pos"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/lexer.ml[2374,118299+86]..src/lexer.ml[2374,118299+87])
                                                          Texp_constant Const_int 2
                                                    ]
                                              ]
                                        ]
                                        expression (src/lexer.mll[827,118413+4]..src/lexer.mll[829,118527+46])
                                          Texp_sequence
                                          expression (src/lexer.mll[828,118486+6]..src/lexer.mll[828,118486+39])
                                            Texp_apply
                                            expression (src/lexer.mll[828,118486+6]..src/lexer.mll[828,118486+23])
                                              Texp_ident "Stdlib!.Buffer.add_string"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[828,118486+24]..src/lexer.mll[828,118486+30])
                                                  Texp_ident "buffer/1674"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[828,118486+31]..src/lexer.mll[828,118486+39])
                                                  Texp_ident "sequence/1678"
                                            ]
                                          expression (src/lexer.mll[829,118527+6]..src/lexer.mll[829,118527+44])
                                            Texp_apply
                                            expression (src/lexer.mll[829,118527+6]..src/lexer.mll[829,118527+19])
                                              Texp_ident "record_string/1387"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[829,118527+20]..src/lexer.mll[829,118527+30])
                                                  Texp_ident "openingpos/1673"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[829,118527+31]..src/lexer.mll[829,118527+37])
                                                  Texp_ident "buffer/1674"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[829,118527+38]..src/lexer.mll[829,118527+44])
                                                  Texp_ident "lexbuf/1675"
                                            ]
                                    <case>
                                      pattern (src/lexer.ml[2381,118597+4]..src/lexer.ml[2381,118597+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2381,118597+4]..src/lexer.ml[2381,118597+5])
                                          Tpat_constant Const_int 2
                                      expression (src/lexer.mll[835,118628+4]..src/lexer.mll[835,118628+64])
                                        Texp_apply
                                        expression (src/lexer.mll[835,118628+6]..src/lexer.mll[835,118628+12])
                                          Texp_ident "error2/509"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[835,118628+13]..src/lexer.mll[835,118628+19])
                                              Texp_ident "lexbuf/1675"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost
                                                      Texp_constant Const_string("'\\n' is not permitted in a token alias.",(src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost,None)
                                                    expression (src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost
                                                  Texp_constant Const_string("'\\n' is not permitted in a token alias.",(src/lexer.mll[835,118628+20]..src/lexer.mll[835,118628+62]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2386,118716+4]..src/lexer.ml[2386,118716+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2386,118716+4]..src/lexer.ml[2386,118716+5])
                                          Tpat_constant Const_int 3
                                      expression (src/lexer.mll[837,118747+4]..src/lexer.mll[837,118747+59])
                                        Texp_apply
                                        expression (src/lexer.mll[837,118747+6]..src/lexer.mll[837,118747+12])
                                          Texp_ident "error2/509"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[837,118747+13]..src/lexer.mll[837,118747+19])
                                              Texp_ident "lexbuf/1675"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost
                                                      Texp_constant Const_string("illegal backslash escape in string.",(src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost,None)
                                                    expression (src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost
                                                  Texp_constant Const_string("illegal backslash escape in string.",(src/lexer.mll[837,118747+20]..src/lexer.mll[837,118747+57]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2391,118830+4]..src/lexer.ml[2391,118830+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2391,118830+4]..src/lexer.ml[2391,118830+5])
                                          Tpat_constant Const_int 4
                                      expression (src/lexer.mll[839,118861+4]..src/lexer.mll[839,118861+50])
                                        Texp_apply
                                        expression (src/lexer.mll[839,118861+6]..src/lexer.mll[839,118861+12])
                                          Texp_ident "error2/509"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[839,118861+13]..src/lexer.mll[839,118861+19])
                                              Texp_ident "lexbuf/1675"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost
                                                      Texp_constant Const_string("illegal newline in string.",(src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost,None)
                                                    expression (src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost
                                                  Texp_constant Const_string("illegal newline in string.",(src/lexer.mll[839,118861+20]..src/lexer.mll[839,118861+48]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2396,118935+4]..src/lexer.ml[2396,118935+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2396,118935+4]..src/lexer.ml[2396,118935+5])
                                          Tpat_constant Const_int 5
                                      expression (src/lexer.mll[841,118966+4]..src/lexer.mll[841,118966+48])
                                        Texp_apply
                                        expression (src/lexer.mll[841,118966+6]..src/lexer.mll[841,118966+12])
                                          Texp_ident "error1/467"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[841,118966+13]..src/lexer.mll[841,118966+23])
                                              Texp_ident "openingpos/1673"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost
                                                      Texp_constant Const_string("unterminated string.",(src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost,None)
                                                    expression (src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                      []
                                                  ]
                                                expression (src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost
                                                  Texp_constant Const_string("unterminated string.",(src/lexer.mll[841,118966+24]..src/lexer.mll[841,118966+46]) ghost,None)
                                              ]
                                        ]
                                    <case>
                                      pattern (src/lexer.ml[2401,119038+4]..src/lexer.ml[2401,119038+5])
                                        Tpat_value
                                        pattern (src/lexer.ml[2401,119038+4]..src/lexer.ml[2401,119038+5])
                                          Tpat_constant Const_int 6
                                      expression (src/lexer.ml[2402,119047+0]..src/lexer.mll[844,119221+46])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/lexer.mll[842,119073+7]..src/lexer.mll[842,119073+8])
                                              Tpat_var "c/1679"
                                            expression (src/lexer.ml[2406,119104+2]..src/lexer.ml[2406,119104+59])
                                              Texp_apply
                                              expression (src/lexer.ml[2406,119104+2]..src/lexer.ml[2406,119104+24])
                                                Texp_ident "Stdlib!.Lexing.sub_lexeme_char"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2406,119104+25]..src/lexer.ml[2406,119104+31])
                                                    Texp_ident "lexbuf/1675"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2406,119104+32]..src/lexer.ml[2406,119104+59])
                                                    Texp_field
                                                    expression (src/lexer.ml[2406,119104+32]..src/lexer.ml[2406,119104+38])
                                                      Texp_ident "lexbuf/1675"
                                                    "Lexing.lex_start_pos"
                                              ]
                                        ]
                                        expression (src/lexer.mll[843,119189+4]..src/lexer.mll[844,119221+46])
                                          Texp_sequence
                                          expression (src/lexer.mll[843,119189+6]..src/lexer.mll[843,119189+30])
                                            Texp_apply
                                            expression (src/lexer.mll[843,119189+6]..src/lexer.mll[843,119189+21])
                                              Texp_ident "Stdlib!.Buffer.add_char"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[843,119189+22]..src/lexer.mll[843,119189+28])
                                                  Texp_ident "buffer/1674"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[843,119189+29]..src/lexer.mll[843,119189+30])
                                                  Texp_ident "c/1679"
                                            ]
                                          expression (src/lexer.mll[844,119221+6]..src/lexer.mll[844,119221+44])
                                            Texp_apply
                                            expression (src/lexer.mll[844,119221+6]..src/lexer.mll[844,119221+19])
                                              Texp_ident "record_string/1387"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[844,119221+20]..src/lexer.mll[844,119221+30])
                                                  Texp_ident "openingpos/1673"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[844,119221+31]..src/lexer.mll[844,119221+37])
                                                  Texp_ident "buffer/1674"
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[844,119221+38]..src/lexer.mll[844,119221+44])
                                                  Texp_ident "lexbuf/1675"
                                            ]
                                    <case>
                                      pattern (src/lexer.ml[2412,119291+4]..src/lexer.ml[2412,119291+21])
                                        Tpat_value
                                        pattern (src/lexer.ml[2412,119291+4]..src/lexer.ml[2412,119291+21])
                                          Tpat_var "__ocaml_lex_state/1677"
                                      expression (src/lexer.ml[2412,119291+25]..src/lexer.ml[2413,119350+78])
                                        Texp_sequence
                                        expression (src/lexer.ml[2412,119291+25]..src/lexer.ml[2412,119291+57])
                                          Texp_apply
                                          expression (src/lexer.ml[2412,119291+25]..src/lexer.ml[2412,119291+50])
                                            Texp_field
                                            expression (src/lexer.ml[2412,119291+25]..src/lexer.ml[2412,119291+31])
                                              Texp_ident "lexbuf/1675"
                                            "Lexing.refill_buff"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2412,119291+51]..src/lexer.ml[2412,119291+57])
                                                Texp_ident "lexbuf/1675"
                                          ]
                                        expression (src/lexer.ml[2413,119350+6]..src/lexer.ml[2413,119350+78])
                                          Texp_apply
                                          expression (src/lexer.ml[2413,119350+6]..src/lexer.ml[2413,119350+35])
                                            Texp_ident "__ocaml_lex_record_string_rec/1388"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2413,119350+36]..src/lexer.ml[2413,119350+46])
                                                Texp_ident "openingpos/1673"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2413,119350+47]..src/lexer.ml[2413,119350+53])
                                                Texp_ident "buffer/1674"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2413,119350+54]..src/lexer.ml[2413,119350+60])
                                                Texp_ident "lexbuf/1675"
                                            <arg>
                                              Nolabel
                                              expression (src/lexer.ml[2413,119350+61]..src/lexer.ml[2413,119350+78])
                                                Texp_ident "__ocaml_lex_state/1677"
                                          ]
                                  ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2415,119430+4]..src/lexer.ml[2415,119430+17])
          Tpat_var "decode_string/1389"
        expression (src/lexer.ml[2415,119430+18]..src/lexer.ml[2416,119464+50]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2415,119430+18]..src/lexer.ml[2415,119430+24])
                Tpat_var "buffer/1680"
              expression (src/lexer.ml[2415,119430+25]..src/lexer.ml[2416,119464+50]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2415,119430+25]..src/lexer.ml[2415,119430+31])
                      Tpat_var "lexbuf/1681"
                    expression (src/lexer.ml[2416,119464+3]..src/lexer.ml[2416,119464+50])
                      Texp_apply
                      expression (src/lexer.ml[2416,119464+3]..src/lexer.ml[2416,119464+32])
                        Texp_ident "__ocaml_lex_decode_string_rec/1390"
                      [
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2416,119464+33]..src/lexer.ml[2416,119464+39])
                            Texp_ident "buffer/1680"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2416,119464+40]..src/lexer.ml[2416,119464+46])
                            Texp_ident "lexbuf/1681"
                        <arg>
                          Nolabel
                          expression (src/lexer.ml[2416,119464+47]..src/lexer.ml[2416,119464+50])
                            Texp_constant Const_int 231
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2417,119515+4]..src/lexer.ml[2417,119515+33])
          Tpat_var "__ocaml_lex_decode_string_rec/1390"
        expression (src/lexer.ml[2417,119515+34]..src/lexer.ml[2447,120371+67]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2417,119515+34]..src/lexer.ml[2417,119515+40])
                Tpat_var "buffer/1682"
              expression (src/lexer.ml[2417,119515+41]..src/lexer.ml[2447,120371+67]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2417,119515+41]..src/lexer.ml[2417,119515+47])
                      Tpat_var "lexbuf/1683"
                    expression (src/lexer.ml[2417,119515+48]..src/lexer.ml[2447,120371+67]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexer.ml[2417,119515+48]..src/lexer.ml[2417,119515+65])
                            Tpat_var "__ocaml_lex_state/1684"
                          expression (src/lexer.ml[2418,119583+2]..src/lexer.ml[2447,120371+67])
                            Texp_match
                            expression (src/lexer.ml[2418,119583+8]..src/lexer.ml[2418,119583+65])
                              Texp_apply
                              expression (src/lexer.ml[2418,119583+8]..src/lexer.ml[2418,119583+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2418,119583+22]..src/lexer.ml[2418,119583+40])
                                    Texp_ident "__ocaml_lex_tables/1370"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2418,119583+41]..src/lexer.ml[2418,119583+58])
                                    Texp_ident "__ocaml_lex_state/1684"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2418,119583+59]..src/lexer.ml[2418,119583+65])
                                    Texp_ident "lexbuf/1683"
                              ]
                            [
                              <case>
                                pattern (src/lexer.ml[2419,119654+8]..src/lexer.ml[2419,119654+9])
                                  Tpat_value
                                  pattern (src/lexer.ml[2419,119654+8]..src/lexer.ml[2419,119654+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexer.mll[850,119689+4]..src/lexer.mll[850,119689+48])
                                  Texp_construct "()"
                                  []
                              <case>
                                pattern (src/lexer.ml[2424,119761+4]..src/lexer.ml[2424,119761+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2424,119761+4]..src/lexer.ml[2424,119761+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexer.ml[2425,119770+0]..src/lexer.mll[853,120011+35])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[851,119796+47]..src/lexer.mll[851,119796+48])
                                        Tpat_var "c/1686"
                                      expression (src/lexer.ml[2429,119867+2]..src/lexer.ml[2429,119867+65])
                                        Texp_apply
                                        expression (src/lexer.ml[2429,119867+2]..src/lexer.ml[2429,119867+24])
                                          Texp_ident "Stdlib!.Lexing.sub_lexeme_char"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[2429,119867+25]..src/lexer.ml[2429,119867+31])
                                              Texp_ident "lexbuf/1683"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[2429,119867+32]..src/lexer.ml[2429,119867+65])
                                              Texp_apply
                                              expression (src/lexer.ml[2429,119867+61]..src/lexer.ml[2429,119867+62])
                                                Texp_ident "Stdlib!.+"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2429,119867+33]..src/lexer.ml[2429,119867+60])
                                                    Texp_field
                                                    expression (src/lexer.ml[2429,119867+33]..src/lexer.ml[2429,119867+39])
                                                      Texp_ident "lexbuf/1683"
                                                    "Lexing.lex_start_pos"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexer.ml[2429,119867+63]..src/lexer.ml[2429,119867+64])
                                                    Texp_constant Const_int 1
                                              ]
                                        ]
                                  ]
                                  expression (src/lexer.mll[852,119958+4]..src/lexer.mll[853,120011+35])
                                    Texp_sequence
                                    expression (src/lexer.mll[852,119958+6]..src/lexer.mll[852,119958+51])
                                      Texp_apply
                                      expression (src/lexer.mll[852,119958+6]..src/lexer.mll[852,119958+21])
                                        Texp_ident "Stdlib!.Buffer.add_char"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[852,119958+22]..src/lexer.mll[852,119958+28])
                                            Texp_ident "buffer/1682"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[852,119958+29]..src/lexer.mll[852,119958+51])
                                            Texp_apply
                                            expression (src/lexer.mll[852,119958+30]..src/lexer.mll[852,119958+48])
                                              Texp_ident "char_for_backslash/1367"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/lexer.mll[852,119958+49]..src/lexer.mll[852,119958+50])
                                                  Texp_ident "c/1686"
                                            ]
                                      ]
                                    expression (src/lexer.mll[853,120011+6]..src/lexer.mll[853,120011+33])
                                      Texp_apply
                                      expression (src/lexer.mll[853,120011+6]..src/lexer.mll[853,120011+19])
                                        Texp_ident "decode_string/1389"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[853,120011+20]..src/lexer.mll[853,120011+26])
                                            Texp_ident "buffer/1682"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[853,120011+27]..src/lexer.mll[853,120011+33])
                                            Texp_ident "lexbuf/1683"
                                      ]
                              <case>
                                pattern (src/lexer.ml[2435,120070+4]..src/lexer.ml[2435,120070+5])
                                  Tpat_value
                                  pattern (src/lexer.ml[2435,120070+4]..src/lexer.ml[2435,120070+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexer.ml[2436,120079+0]..src/lexer.mll[856,120253+35])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexer.mll[854,120105+7]..src/lexer.mll[854,120105+8])
                                        Tpat_var "c/1687"
                                      expression (src/lexer.ml[2440,120136+2]..src/lexer.ml[2440,120136+59])
                                        Texp_apply
                                        expression (src/lexer.ml[2440,120136+2]..src/lexer.ml[2440,120136+24])
                                          Texp_ident "Stdlib!.Lexing.sub_lexeme_char"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[2440,120136+25]..src/lexer.ml[2440,120136+31])
                                              Texp_ident "lexbuf/1683"
                                          <arg>
                                            Nolabel
                                            expression (src/lexer.ml[2440,120136+32]..src/lexer.ml[2440,120136+59])
                                              Texp_field
                                              expression (src/lexer.ml[2440,120136+32]..src/lexer.ml[2440,120136+38])
                                                Texp_ident "lexbuf/1683"
                                              "Lexing.lex_start_pos"
                                        ]
                                  ]
                                  expression (src/lexer.mll[855,120221+4]..src/lexer.mll[856,120253+35])
                                    Texp_sequence
                                    expression (src/lexer.mll[855,120221+6]..src/lexer.mll[855,120221+30])
                                      Texp_apply
                                      expression (src/lexer.mll[855,120221+6]..src/lexer.mll[855,120221+21])
                                        Texp_ident "Stdlib!.Buffer.add_char"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[855,120221+22]..src/lexer.mll[855,120221+28])
                                            Texp_ident "buffer/1682"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[855,120221+29]..src/lexer.mll[855,120221+30])
                                            Texp_ident "c/1687"
                                      ]
                                    expression (src/lexer.mll[856,120253+6]..src/lexer.mll[856,120253+33])
                                      Texp_apply
                                      expression (src/lexer.mll[856,120253+6]..src/lexer.mll[856,120253+19])
                                        Texp_ident "decode_string/1389"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[856,120253+20]..src/lexer.mll[856,120253+26])
                                            Texp_ident "buffer/1682"
                                        <arg>
                                          Nolabel
                                          expression (src/lexer.mll[856,120253+27]..src/lexer.mll[856,120253+33])
                                            Texp_ident "lexbuf/1683"
                                      ]
                              <case>
                                pattern (src/lexer.ml[2446,120312+4]..src/lexer.ml[2446,120312+21])
                                  Tpat_value
                                  pattern (src/lexer.ml[2446,120312+4]..src/lexer.ml[2446,120312+21])
                                    Tpat_var "__ocaml_lex_state/1685"
                                expression (src/lexer.ml[2446,120312+25]..src/lexer.ml[2447,120371+67])
                                  Texp_sequence
                                  expression (src/lexer.ml[2446,120312+25]..src/lexer.ml[2446,120312+57])
                                    Texp_apply
                                    expression (src/lexer.ml[2446,120312+25]..src/lexer.ml[2446,120312+50])
                                      Texp_field
                                      expression (src/lexer.ml[2446,120312+25]..src/lexer.ml[2446,120312+31])
                                        Texp_ident "lexbuf/1683"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2446,120312+51]..src/lexer.ml[2446,120312+57])
                                          Texp_ident "lexbuf/1683"
                                    ]
                                  expression (src/lexer.ml[2447,120371+6]..src/lexer.ml[2447,120371+67])
                                    Texp_apply
                                    expression (src/lexer.ml[2447,120371+6]..src/lexer.ml[2447,120371+35])
                                      Texp_ident "__ocaml_lex_decode_string_rec/1390"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2447,120371+36]..src/lexer.ml[2447,120371+42])
                                          Texp_ident "buffer/1682"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2447,120371+43]..src/lexer.ml[2447,120371+49])
                                          Texp_ident "lexbuf/1683"
                                      <arg>
                                        Nolabel
                                        expression (src/lexer.ml[2447,120371+50]..src/lexer.ml[2447,120371+67])
                                          Texp_ident "__ocaml_lex_state/1685"
                                    ]
                            ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2449,120440+4]..src/lexer.ml[2449,120440+8])
          Tpat_var "char/1391"
        expression (src/lexer.ml[2449,120440+9]..src/lexer.ml[2450,120458+34]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2449,120440+9]..src/lexer.ml[2449,120440+15])
                Tpat_var "lexbuf/1688"
              expression (src/lexer.ml[2450,120458+3]..src/lexer.ml[2450,120458+34])
                Texp_apply
                expression (src/lexer.ml[2450,120458+3]..src/lexer.ml[2450,120458+23])
                  Texp_ident "__ocaml_lex_char_rec/1392"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.ml[2450,120458+24]..src/lexer.ml[2450,120458+30])
                      Texp_ident "lexbuf/1688"
                  <arg>
                    Nolabel
                    expression (src/lexer.ml[2450,120458+31]..src/lexer.ml[2450,120458+34])
                      Texp_constant Const_int 236
                ]
          ]
      <def>
        pattern (src/lexer.ml[2451,120493+4]..src/lexer.ml[2451,120493+24])
          Tpat_var "__ocaml_lex_char_rec/1392"
        expression (src/lexer.ml[2451,120493+25]..src/lexer.ml[2464,120820+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2451,120493+25]..src/lexer.ml[2451,120493+31])
                Tpat_var "lexbuf/1689"
              expression (src/lexer.ml[2451,120493+32]..src/lexer.ml[2464,120820+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2451,120493+32]..src/lexer.ml[2451,120493+49])
                      Tpat_var "__ocaml_lex_state/1690"
                    expression (src/lexer.ml[2452,120545+2]..src/lexer.ml[2464,120820+51])
                      Texp_match
                      expression (src/lexer.ml[2452,120545+8]..src/lexer.ml[2452,120545+65])
                        Texp_apply
                        expression (src/lexer.ml[2452,120545+8]..src/lexer.ml[2452,120545+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2452,120545+22]..src/lexer.ml[2452,120545+40])
                              Texp_ident "__ocaml_lex_tables/1370"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2452,120545+41]..src/lexer.ml[2452,120545+58])
                              Texp_ident "__ocaml_lex_state/1690"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2452,120545+59]..src/lexer.ml[2452,120545+65])
                              Texp_ident "lexbuf/1689"
                        ]
                      [
                        <case>
                          pattern (src/lexer.ml[2453,120616+8]..src/lexer.ml[2453,120616+9])
                            Tpat_value
                            pattern (src/lexer.ml[2453,120616+8]..src/lexer.ml[2453,120616+9])
                              Tpat_constant Const_int 0
                          expression (src/lexer.mll[866,120651+3]..src/lexer.mll[866,120651+22])
                            Texp_apply
                            expression (src/lexer.mll[866,120651+5]..src/lexer.mll[866,120651+13])
                              Texp_ident "Stdlib!.Lexing.new_line"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[866,120651+14]..src/lexer.mll[866,120651+20])
                                  Texp_ident "lexbuf/1689"
                            ]
                        <case>
                          pattern (src/lexer.ml[2458,120697+4]..src/lexer.ml[2458,120697+5])
                            Tpat_value
                            pattern (src/lexer.ml[2458,120697+4]..src/lexer.ml[2458,120697+5])
                              Tpat_constant Const_int 1
                          expression (src/lexer.mll[872,120728+3]..src/lexer.mll[872,120728+9])
                            Texp_construct "()"
                            []
                        <case>
                          pattern (src/lexer.ml[2463,120761+4]..src/lexer.ml[2463,120761+21])
                            Tpat_value
                            pattern (src/lexer.ml[2463,120761+4]..src/lexer.ml[2463,120761+21])
                              Tpat_var "__ocaml_lex_state/1691"
                          expression (src/lexer.ml[2463,120761+25]..src/lexer.ml[2464,120820+51])
                            Texp_sequence
                            expression (src/lexer.ml[2463,120761+25]..src/lexer.ml[2463,120761+57])
                              Texp_apply
                              expression (src/lexer.ml[2463,120761+25]..src/lexer.ml[2463,120761+50])
                                Texp_field
                                expression (src/lexer.ml[2463,120761+25]..src/lexer.ml[2463,120761+31])
                                  Texp_ident "lexbuf/1689"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2463,120761+51]..src/lexer.ml[2463,120761+57])
                                    Texp_ident "lexbuf/1689"
                              ]
                            expression (src/lexer.ml[2464,120820+6]..src/lexer.ml[2464,120820+51])
                              Texp_apply
                              expression (src/lexer.ml[2464,120820+6]..src/lexer.ml[2464,120820+26])
                                Texp_ident "__ocaml_lex_char_rec/1392"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2464,120820+27]..src/lexer.ml[2464,120820+33])
                                    Texp_ident "lexbuf/1689"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2464,120820+34]..src/lexer.ml[2464,120820+51])
                                    Texp_ident "__ocaml_lex_state/1691"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexer.ml[2466,120873+4]..src/lexer.ml[2466,120873+10])
          Tpat_var "finish/1393"
        expression (src/lexer.ml[2466,120873+11]..src/lexer.ml[2467,120893+36]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2466,120873+11]..src/lexer.ml[2466,120873+17])
                Tpat_var "lexbuf/1692"
              expression (src/lexer.ml[2467,120893+3]..src/lexer.ml[2467,120893+36])
                Texp_apply
                expression (src/lexer.ml[2467,120893+3]..src/lexer.ml[2467,120893+25])
                  Texp_ident "__ocaml_lex_finish_rec/1394"
                [
                  <arg>
                    Nolabel
                    expression (src/lexer.ml[2467,120893+26]..src/lexer.ml[2467,120893+32])
                      Texp_ident "lexbuf/1692"
                  <arg>
                    Nolabel
                    expression (src/lexer.ml[2467,120893+33]..src/lexer.ml[2467,120893+36])
                      Texp_constant Const_int 253
                ]
          ]
      <def>
        pattern (src/lexer.ml[2468,120930+4]..src/lexer.ml[2468,120930+26])
          Tpat_var "__ocaml_lex_finish_rec/1394"
        expression (src/lexer.ml[2468,120930+27]..src/lexer.ml[2486,121371+53]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexer.ml[2468,120930+27]..src/lexer.ml[2468,120930+33])
                Tpat_var "lexbuf/1693"
              expression (src/lexer.ml[2468,120930+34]..src/lexer.ml[2486,121371+53]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexer.ml[2468,120930+34]..src/lexer.ml[2468,120930+51])
                      Tpat_var "__ocaml_lex_state/1694"
                    expression (src/lexer.ml[2469,120984+2]..src/lexer.ml[2486,121371+53])
                      Texp_match
                      expression (src/lexer.ml[2469,120984+8]..src/lexer.ml[2469,120984+65])
                        Texp_apply
                        expression (src/lexer.ml[2469,120984+8]..src/lexer.ml[2469,120984+21])
                          Texp_ident "Stdlib!.Lexing.engine"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2469,120984+22]..src/lexer.ml[2469,120984+40])
                              Texp_ident "__ocaml_lex_tables/1370"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2469,120984+41]..src/lexer.ml[2469,120984+58])
                              Texp_ident "__ocaml_lex_state/1694"
                          <arg>
                            Nolabel
                            expression (src/lexer.ml[2469,120984+59]..src/lexer.ml[2469,120984+65])
                              Texp_ident "lexbuf/1693"
                        ]
                      [
                        <case>
                          pattern (src/lexer.ml[2470,121055+8]..src/lexer.ml[2470,121055+9])
                            Tpat_value
                            pattern (src/lexer.ml[2470,121055+8]..src/lexer.ml[2470,121055+9])
                              Tpat_constant Const_int 0
                          expression (src/lexer.mll[883,121090+4]..src/lexer.mll[883,121090+38])
                            Texp_sequence
                            expression (src/lexer.mll[883,121090+6]..src/lexer.mll[883,121090+21])
                              Texp_apply
                              expression (src/lexer.mll[883,121090+6]..src/lexer.mll[883,121090+14])
                                Texp_ident "Stdlib!.Lexing.new_line"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[883,121090+15]..src/lexer.mll[883,121090+21])
                                    Texp_ident "lexbuf/1693"
                              ]
                            expression (src/lexer.mll[883,121090+23]..src/lexer.mll[883,121090+36])
                              Texp_apply
                              expression (src/lexer.mll[883,121090+23]..src/lexer.mll[883,121090+29])
                                Texp_ident "finish/1393"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.mll[883,121090+30]..src/lexer.mll[883,121090+36])
                                    Texp_ident "lexbuf/1693"
                              ]
                        <case>
                          pattern (src/lexer.ml[2475,121152+4]..src/lexer.ml[2475,121152+5])
                            Tpat_value
                            pattern (src/lexer.ml[2475,121152+4]..src/lexer.ml[2475,121152+5])
                              Tpat_constant Const_int 1
                          expression (src/lexer.mll[885,121183+4]..src/lexer.mll[885,121183+29])
                            Texp_apply
                            expression (src/lexer.mll[885,121183+6]..src/lexer.mll[885,121183+20])
                              Texp_ident "Stdlib!.Lexing.lexeme_start_p"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[885,121183+21]..src/lexer.mll[885,121183+27])
                                  Texp_ident "lexbuf/1693"
                            ]
                        <case>
                          pattern (src/lexer.ml[2480,121236+4]..src/lexer.ml[2480,121236+5])
                            Tpat_value
                            pattern (src/lexer.ml[2480,121236+4]..src/lexer.ml[2480,121236+5])
                              Tpat_constant Const_int 2
                          expression (src/lexer.mll[887,121267+4]..src/lexer.mll[887,121267+21])
                            Texp_apply
                            expression (src/lexer.mll[887,121267+6]..src/lexer.mll[887,121267+12])
                              Texp_ident "finish/1393"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexer.mll[887,121267+13]..src/lexer.mll[887,121267+19])
                                  Texp_ident "lexbuf/1693"
                            ]
                        <case>
                          pattern (src/lexer.ml[2485,121312+4]..src/lexer.ml[2485,121312+21])
                            Tpat_value
                            pattern (src/lexer.ml[2485,121312+4]..src/lexer.ml[2485,121312+21])
                              Tpat_var "__ocaml_lex_state/1695"
                          expression (src/lexer.ml[2485,121312+25]..src/lexer.ml[2486,121371+53])
                            Texp_sequence
                            expression (src/lexer.ml[2485,121312+25]..src/lexer.ml[2485,121312+57])
                              Texp_apply
                              expression (src/lexer.ml[2485,121312+25]..src/lexer.ml[2485,121312+50])
                                Texp_field
                                expression (src/lexer.ml[2485,121312+25]..src/lexer.ml[2485,121312+31])
                                  Texp_ident "lexbuf/1693"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2485,121312+51]..src/lexer.ml[2485,121312+57])
                                    Texp_ident "lexbuf/1693"
                              ]
                            expression (src/lexer.ml[2486,121371+6]..src/lexer.ml[2486,121371+53])
                              Texp_apply
                              expression (src/lexer.ml[2486,121371+6]..src/lexer.ml[2486,121371+28])
                                Texp_ident "__ocaml_lex_finish_rec/1394"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2486,121371+29]..src/lexer.ml[2486,121371+35])
                                    Texp_ident "lexbuf/1693"
                                <arg>
                                  Nolabel
                                  expression (src/lexer.ml[2486,121371+36]..src/lexer.ml[2486,121371+53])
                                    Texp_ident "__ocaml_lex_state/1695"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexer>
 "__ocaml_lex_action_rec"[value] -> <Dune__exe__Lexer.136>;
 "__ocaml_lex_attribute_rec"[value] -> <Dune__exe__Lexer.140>;
 "__ocaml_lex_char_rec"[value] -> <Dune__exe__Lexer.150>;
 "__ocaml_lex_comment_rec"[value] -> <Dune__exe__Lexer.132>;
 "__ocaml_lex_decode_string_rec"[value] -> <Dune__exe__Lexer.148>;
 "__ocaml_lex_finish_rec"[value] -> <Dune__exe__Lexer.152>;
 "__ocaml_lex_main_rec"[value] -> <Dune__exe__Lexer.130>;
 "__ocaml_lex_ocamlcomment_rec"[value] -> <Dune__exe__Lexer.142>;
 "__ocaml_lex_ocamltype_rec"[value] -> <Dune__exe__Lexer.134>;
 "__ocaml_lex_parentheses_rec"[value] -> <Dune__exe__Lexer.138>;
 "__ocaml_lex_record_string_rec"[value] -> <Dune__exe__Lexer.146>;
 "__ocaml_lex_string_rec"[value] -> <Dune__exe__Lexer.144>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexer.128>;
 "action"[value] -> <Dune__exe__Lexer.135>;
 "attribute"[value] -> <Dune__exe__Lexer.139>;
 "char"[value] -> <Dune__exe__Lexer.149>;
 "char_for_backslash"[value] -> <Dune__exe__Lexer.126>;
 "check"[type] -> <Dune__exe__Lexer.18>;
 "check_dollar"[value] -> <Dune__exe__Lexer.36>;
 "check_producer"[value] -> <Dune__exe__Lexer.42>;
 "comment"[value] -> <Dune__exe__Lexer.131>;
 "decode_string"[value] -> <Dune__exe__Lexer.147>;
 "directives"[value] -> <Dune__exe__Lexer.125>;
 "dollar"[value] -> <Dune__exe__Lexer.46>;
 "error1"[value] -> <Dune__exe__Lexer.0>;
 "error2"[value] -> <Dune__exe__Lexer.2>;
 "finish"[value] -> <Dune__exe__Lexer.151>;
 "gather_monsters"[value] -> <Dune__exe__Lexer.91>;
 "gather_oid"[value] -> <Dune__exe__Lexer.85>;
 "gather_oids"[value] -> <Dune__exe__Lexer.89>;
 "int_of_string"[value] -> <Dune__exe__Lexer.4>;
 "main"[value] -> <Dune__exe__Lexer.129>;
 "mk_stretch"[value] -> <Dune__exe__Lexer.95>;
 "monster"[type] -> <Dune__exe__Lexer.17>;
 "no_monsters"[value] -> <Dune__exe__Lexer.82>;
 "none"[value] -> <Dune__exe__Lexer.24>;
 "ocamlcomment"[value] -> <Dune__exe__Lexer.141>;
 "ocamltype"[value] -> <Dune__exe__Lexer.133>;
 "overwrite"[value] -> <Dune__exe__Lexer.12>;
 "parentheses"[value] -> <Dune__exe__Lexer.137>;
 "position"[value] -> <Dune__exe__Lexer.57>;
 "record_string"[value] -> <Dune__exe__Lexer.145>;
 "reserved"[value] -> <Dune__exe__Lexer.119>;
 "savestart"[value] -> <Dune__exe__Lexer.7>;
 "stretch_of_id"[value] -> <Dune__exe__Lexer.106>;
 "string"[value] -> <Dune__exe__Lexer.143>;
 "syntaxerror"[value] -> <Dune__exe__Lexer.25>;
 "table"[value] -> <Dune__exe__Lexer.120>;
 }

(setglobal Dune__exe__Lexer!
  (let
    (error1/467 =
       (function pos/469
         (funct-body Dune__exe__Lexer.error1 src/lexer.mll(25)<ghost>:207-246
           (before Dune__exe__Lexer.error1 src/lexer.mll(26):215-246
             (after Dune__exe__Lexer.error1 src/lexer.mll(26):215-246
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (after Dune__exe__Lexer.error1 src/lexer.mll(26):227-246
                   (apply (field_imm 29 (global Dune__exe__Positions!))
                     pos/469)))))))
     error2/509 =
       (function lexbuf/511
         (funct-body Dune__exe__Lexer.error2 src/lexer.mll(28)<ghost>:259-307
           (before Dune__exe__Lexer.error2 src/lexer.mll(29):270-307
             (after Dune__exe__Lexer.error2 src/lexer.mll(29):270-307
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (after Dune__exe__Lexer.error2 src/lexer.mll(29):282-307
                   (apply (field_imm 30 (global Dune__exe__Positions!))
                     lexbuf/511)))))))
     int_of_string/512 =
       (function pos/513 i/514 : int
         (funct-body Dune__exe__Lexer.int_of_string src/lexer.mll(37)<ghost>:609-727
           (before Dune__exe__Lexer.int_of_string src/lexer.mll(38):639-727
             (try
               (after Dune__exe__Lexer.int_of_string src/lexer.mll(39):647-662
                 (caml_int_of_string i/514))
              with exn/3240
               (catch
                 (let (tag/3242 =a (field_imm 0 exn/3240))
                   (if (== tag/3242 (field_imm 6 (global Stdlib!)))
                     (let (*match*/3241 =a (field_imm 1 exn/3240))
                       (before Dune__exe__Lexer.int_of_string src/lexer.mll(41):687-727
                         (after Dune__exe__Lexer.int_of_string src/lexer.mll(41):687-727
                           (apply error1/467 pos/513
                             [0:
                              [11: "unreasonably large integer." 0]
                              "unreasonably large integer."]))))
                     (exit 1)))
                with (1) (reraise exn/3240))))))
     savestart/538 =
       (function lexbuf/540 f/541
         (funct-body Dune__exe__Lexer.savestart src/lexer.mll(49)<ghost>:977-1090
           (before Dune__exe__Lexer.savestart src/lexer.mll(50):990-1090
             (let (startp/542 = (field_mut 10 lexbuf/540))
               (before Dune__exe__Lexer.savestart src/lexer.mll(51):1027-1090
                 (let
                   (token/543 =
                      (after Dune__exe__Lexer.savestart src/lexer.mll(51):1039-1047
                        (apply f/541 lexbuf/540)))
                   (before Dune__exe__Lexer.savestart src/lexer.mll(52):1053-1090
                     (seq (setfield_ptr 10 lexbuf/540 startp/542)
                       (before Dune__exe__Lexer.savestart src/lexer.mll(53):1085-1090
                         token/543)))))))))
     overwrite/544 =
       (function content/546 offset/547[int] c1/548[int] c2/549[int] : int
         (funct-body Dune__exe__Lexer.overwrite src/lexer.mll(60)<ghost>:1282-1376
           (before Dune__exe__Lexer.overwrite src/lexer.mll(61):1307-1376
             (seq
               (if
                 (==
                   (after Dune__exe__Lexer.overwrite src/lexer.mll(61):1315-1339
                     (bytes.get content/546 offset/547))
                   c1/548)
                 0
                 (raise
                   (after Dune__exe__Lexer.overwrite src/lexer.mll(61):1307-1345
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/lexer.mll" 61 2]))))
               (before Dune__exe__Lexer.overwrite src/lexer.mll(62):1349-1376
                 (after Dune__exe__Lexer.overwrite src/lexer.mll(62):1349-1376
                   (bytes.set content/546 offset/547 c2/549)))))))
     none/815 =
       (function param/818[int] param/817 : int
         (funct-body Dune__exe__Lexer.none src/lexer.mll(102):2619-2632
           (before Dune__exe__Lexer.none src/lexer.mll(102):2630-2632 0)))
     syntaxerror/819 =
       (function pos/821
         (funct-body Dune__exe__Lexer.syntaxerror src/lexer.mll(108)<ghost>:2765-3194
           (before Dune__exe__Lexer.syntaxerror src/lexer.mll(109):2783-3194
             (let
               (check/822 = none/815
                transform/823 =
                  (function ofs1/826[int] content/827 : int
                    (funct-body Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(111)<ghost>:2820-3089
                      (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(114):2917-3089
                        (let
                          (pos/828 =
                             (after Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(114):2927-2948
                               (apply
                                 (field_imm 15
                                   (global Dune__exe__Positions!))
                                 pos/821)))
                          (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(115):2956-3089
                            (let
                              (ofs/829 =[int]
                                 (- (field_int 3 pos/828) ofs1/826))
                              (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(116):2993-3089
                                (let (source/830 = "(raise _eRR)")
                                  (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(117):3028-3089
                                    (after Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(117):3028-3089
                                      (apply
                                        (field_imm 11
                                          (global Stdlib__Bytes!))
                                        source/830 0 content/827 ofs/829
                                        (string.length source/830))))))))))))
                keyword/824 = [0: 0]
                oid/825 = 0)
               (before Dune__exe__Lexer.syntaxerror src/lexer.mll(123):3155-3194
                 (makeblock 0 pos/821 check/822 transform/823 keyword/824
                   oid/825))))))
     check_dollar/900 =
       (function pos/902 i/903[int] dollars/904[int] producers/905 : int
         (funct-body Dune__exe__Lexer.check_dollar src/lexer.mll(132)<ghost>:3588-4187
           (before Dune__exe__Lexer.check_dollar src/lexer.mll(134):3671-4187
             (seq
               (if
                 (not
                   (&& (<= 0 (- i/903 1))
                     (< (- i/903 1) (array.length[addr] producers/905))))
                 (before Dune__exe__Lexer.check_dollar src/lexer.mll(135):3734-3791
                   (after Dune__exe__Lexer.check_dollar src/lexer.mll(135):3734-3791
                     (apply (field_imm 5 (global Dune__exe__Error!))
                       (makeblock 0 pos/902 0)
                       [0:
                        [12:
                         '$'
                         [4:
                          0 0 0 [11: " refers to a nonexistent symbol." 0]]]
                        "$%d refers to a nonexistent symbol."]
                       i/903)))
                 0)
               (before Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-4187
                 (seq
                   (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-3968
                     (apply
                       (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3873-3968
                         (apply (field_imm 2 (global Dune__exe__Option!))
                           (function x/965 : int
                             (funct-body Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(137):3885-3968
                               (before Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(138):3899-3964
                                 (after Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(138):3899-3964
                                   (apply
                                     (field_imm 5 (global Dune__exe__Error!))
                                     (makeblock 0 pos/902 0)
                                     [0:
                                      [11:
                                       "please do not say: $"
                                       [4:
                                        0 0 0
                                        [11:
                                         ". Instead, say: "
                                         [2: 0 [12: '.' 0]]]]]
                                      "please do not say: $%d. Instead, say: %s."]
                                     i/903 x/965)))))))
                       (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-3869
                         (array.get[addr] producers/905 (- i/903 1)))))
                   (before Dune__exe__Lexer.check_dollar src/lexer.mll(141):4018-4187
                     (if dollars/904
                       (before Dune__exe__Lexer.check_dollar src/lexer.mll(145):4185-4187
                         0)
                       (before Dune__exe__Lexer.check_dollar src/lexer.mll(143):4077-4147
                         (after Dune__exe__Lexer.check_dollar src/lexer.mll(143):4077-4147
                           (apply (field_imm 5 (global Dune__exe__Error!))
                             (makeblock 0 pos/902 0)
                             [0:
                              [11:
                               "please do not use $"
                               [4:
                                0 0 0 [11: ". Instead, name this value." 0]]]
                              "please do not use $%d. Instead, name this value."]
                             i/903)))))))))))
     check_producer/966 =
       (function pos/968 x/969 param/1037[int] producers/970 : int
         (funct-body Dune__exe__Lexer.check_producer src/lexer.mll(150)<ghost>:4321-4476
           (before Dune__exe__Lexer.check_producer src/lexer.mll(151):4358-4476
             (if
               (not
                 (after Dune__exe__Lexer.check_producer src/lexer.mll(151):4365-4410
                   (apply (field_imm 36 (global Stdlib__List!))
                     (makeblock 0 x/969)
                     (after Dune__exe__Lexer.check_producer src/lexer.mll(151):4384-4409
                       (apply (field_imm 8 (global Stdlib__Array!))
                         producers/970)))))
               (before Dune__exe__Lexer.check_producer src/lexer.mll(152):4420-4476
                 (after Dune__exe__Lexer.check_producer src/lexer.mll(152):4420-4476
                   (apply (field_imm 5 (global Dune__exe__Error!))
                     (makeblock 0 pos/968 0)
                     [0:
                      [2: 0 [11: " refers to a nonexistent symbol." 0]]
                      "%s refers to a nonexistent symbol."]
                     x/969)))
               0))))
     dollar/1038 =
       (function pos/1040 i/1041[int]
         (funct-body Dune__exe__Lexer.dollar src/lexer.mll(158)<ghost>:4594-4982
           (before Dune__exe__Lexer.dollar src/lexer.mll(159):4614-4982
             (let
               (check/1042 =
                  (after Dune__exe__Lexer.dollar src/lexer.mll(159):4634-4652
                    (apply check_dollar/900 pos/1040 i/1041))
                transform/1043 =
                  (function ofs1/1046[int] content/1047 : int
                    (funct-body Dune__exe__Lexer.dollar.transform src/lexer.mll(160)<ghost>:4669-4864
                      (before Dune__exe__Lexer.dollar.transform src/lexer.mll(162):4759-4864
                        (let
                          (pos/1048 =
                             (after Dune__exe__Lexer.dollar.transform src/lexer.mll(162):4769-4790
                               (apply
                                 (field_imm 15
                                   (global Dune__exe__Positions!))
                                 pos/1040)))
                          (before Dune__exe__Lexer.dollar.transform src/lexer.mll(163):4798-4864
                            (let
                              (ofs/1049 =[int]
                                 (- (field_int 3 pos/1048) ofs1/1046))
                              (before Dune__exe__Lexer.dollar.transform src/lexer.mll(164):4835-4864
                                (after Dune__exe__Lexer.dollar.transform src/lexer.mll(164):4835-4864
                                  (apply overwrite/544 content/1047 ofs/1049
                                    '$' '_')))))))))
                keyword/1044 = 0
                oid/1045 =
                  (makeblock 0
                    (after Dune__exe__Lexer.dollar src/lexer.mll(168):4911-4935
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0: [12: '_' [4: 0 0 0 0]] "_%d"] i/1041))))
               (before Dune__exe__Lexer.dollar src/lexer.mll(170):4943-4982
                 (makeblock 0 pos/1040 check/1042 transform/1043 keyword/1044
                   oid/1045))))))
     position/1063 =
       (function pos/1064 where/1065 flavor/1066 i/1067 x/1068
         (funct-body Dune__exe__Lexer.position src/lexer.mll(176)<ghost>:5140-7199
           (before Dune__exe__Lexer.position src/lexer.mll(181):5229-7199
             (let
               (check_no_parameter/1069 =
                  (function param/1071[int] : int
                    (funct-body Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(181)<ghost>:5252-5363
                      (before Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(182):5261-5363
                        (if (|| (!= i/1067 0) (!= x/1068 0))
                          (before Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(183):5298-5363
                            (after Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(183):5298-5363
                              (apply (field_imm 5 (global Dune__exe__Error!))
                                (makeblock 0 pos/1064 0)
                                [0:
                                 [12:
                                  '$'
                                  [2:
                                   0
                                   [2:
                                    0 [11: " does not take a parameter." 0]]]]
                                 "$%s%s does not take a parameter."]
                                where/1065 flavor/1066)))
                          0)))))
               (before Dune__exe__Lexer.position src/lexer.mll(185):5371-7199
                 (let
                   (ofslpar/1072 =[int]
                      (+ (+ 1 (string.length where/1065)) 3))
                   (before Dune__exe__Lexer.position src/lexer.mll(190):5551-7199
                     (let
                       (where/1073 =[int]
                          (catch
                            (catch
                              (stringswitch where/1065
                               case "":
                                (before Dune__exe__Lexer.position src/lexer.mll(196):5755-5765
                                  1)
                               case "end":
                                (before Dune__exe__Lexer.position src/lexer.mll(195):5723-5731
                                  2)
                               case "s": (exit 16)
                               case "start":
                                (before Dune__exe__Lexer.position src/lexer.mll(194):5689-5699
                                  1)
                               case "symbolstart": (exit 16)
                               default: (exit 17))
                             with (17)
                              (before Dune__exe__Lexer.position src/lexer.mll(197):5789-5801
                                (raise
                                  (after Dune__exe__Lexer.position src/lexer.mll(197):5789-5801
                                    (makeblock 0 (global Assert_failure/28!)
                                      [0: "src/lexer.mll" 197 23])))))
                           with (16)
                            (before Dune__exe__Lexer.position src/lexer.mll(193):5627-5665
                              (seq
                                (after Dune__exe__Lexer.position src/lexer.mll(193):5627-5647
                                  (apply check_no_parameter/1069 0))
                                (before Dune__exe__Lexer.position src/lexer.mll(193):5649-5665
                                  0)))))
                       (before Dune__exe__Lexer.position src/lexer.mll(199):5809-7199
                         (let
                           (flavor/1074 =[int]
                              (catch
                                (stringswitch flavor/1066
                                 case "loc":
                                  (before Dune__exe__Lexer.position src/lexer.mll(203):5923-5937
                                    2)
                                 case "ofs":
                                  (before Dune__exe__Lexer.position src/lexer.mll(202):5893-5905
                                    0)
                                 case "pos":
                                  (before Dune__exe__Lexer.position src/lexer.mll(201):5861-5875
                                    1)
                                 default: (exit 15))
                               with (15)
                                (before Dune__exe__Lexer.position src/lexer.mll(204):5955-5967
                                  (raise
                                    (after Dune__exe__Lexer.position src/lexer.mll(204):5955-5967
                                      (makeblock 0
                                        (global Assert_failure/28!)
                                        [0: "src/lexer.mll" 204 17]))))))
                           (before Dune__exe__Lexer.position src/lexer.mll(206):5975-7199
                             (catch
                               (if i/1067
                                 (let (i/1077 =a (field_imm 0 i/1067))
                                   (if x/1068
                                     (let
                                       (*match*/3247 =a (field_imm 0 x/1068))
                                       (before Dune__exe__Lexer.position src/lexer.mll(223):6515-6527
                                         (raise
                                           (after Dune__exe__Lexer.position src/lexer.mll(223):6515-6527
                                             (makeblock 0
                                               (global Assert_failure/28!)
                                               [0: "src/lexer.mll" 223 8])))))
                                     (before Dune__exe__Lexer.position src/lexer.mll(209):6046-6323
                                       (let
                                         (ii/1079 =[int]
                                            (after Dune__exe__Lexer.position src/lexer.mll(209):6055-6094
                                              (apply int_of_string/512
                                                (after Dune__exe__Lexer.position src/lexer.mll(209):6069-6092
                                                  (apply
                                                    (field_imm 15
                                                      (global Dune__exe__Positions!))
                                                    pos/1064))
                                                i/1077)))
                                         (before Dune__exe__Lexer.position src/lexer.mll(210):6106-6323
                                           (if
                                             (&& (== ii/1079 0)
                                               (== where/1073 2))
                                             (before Dune__exe__Lexer.position src/lexer.mll(212):6181-6193
                                               (let
                                                 (check/3255 =a none/815
                                                  subject/3254 = 0)
                                                 (exit 6 subject/3254
                                                   check/3255)))
                                             (before Dune__exe__Lexer.position src/lexer.mll(215):6282-6323
                                               (let
                                                 (check/3253 =
                                                    (after Dune__exe__Lexer.position src/lexer.mll(215):6304-6323
                                                      (apply check_dollar/900
                                                        pos/1064 ii/1079))
                                                  subject/3252 =
                                                    (makeblock 0
                                                      (after Dune__exe__Lexer.position src/lexer.mll(215):6293-6302
                                                        (apply
                                                          (field_imm 27
                                                            (global Stdlib!))
                                                          "_" i/1077))))
                                                 (exit 6 subject/3252
                                                   check/3253)))))))))
                                 (if x/1068
                                   (let (x/1078 =a (field_imm 0 x/1068))
                                     (before Dune__exe__Lexer.position src/lexer.mll(218):6383-6417
                                       (let
                                         (check/3251 =
                                            (after Dune__exe__Lexer.position src/lexer.mll(218):6397-6417
                                              (apply check_producer/966
                                                pos/1064 x/1078))
                                          subject/3250 = (makeblock 0 x/1078))
                                         (exit 6 subject/3250 check/3251))))
                                   (before Dune__exe__Lexer.position src/lexer.mll(221):6472-6482
                                     (let
                                       (check/3249 =a none/815
                                        subject/3248 = 1)
                                       (exit 6 subject/3248 check/3249)))))
                              with (6 subject/1075 check/1076)
                               (before Dune__exe__Lexer.position src/lexer.mll(225):6535-7199
                                 (let
                                   (transform/1080 =
                                      (function ofs1/1082[int] content/1083
                                        : int
                                        (funct-body Dune__exe__Lexer.position.transform src/lexer.mll(225)<ghost>:6549-7065
                                          (before Dune__exe__Lexer.position.transform src/lexer.mll(226):6568-7065
                                            (let
                                              (pos/1084 =
                                                 (after Dune__exe__Lexer.position.transform src/lexer.mll(226):6578-6599
                                                   (apply
                                                     (field_imm 15
                                                       (global Dune__exe__Positions!))
                                                     pos/1064)))
                                              (before Dune__exe__Lexer.position.transform src/lexer.mll(227):6607-7065
                                                (let
                                                  (ofs/1085 =[int]
                                                     (-
                                                       (field_int 3 pos/1084)
                                                       ofs1/1082))
                                                  (before Dune__exe__Lexer.position.transform src/lexer.mll(228):6644-7065
                                                    (seq
                                                      (after Dune__exe__Lexer.position.transform src/lexer.mll(228):6644-6673
                                                        (apply overwrite/544
                                                          content/1083
                                                          ofs/1085 '$' '_'))
                                                      (before Dune__exe__Lexer.position.transform src/lexer.mll(229):6679-7065
                                                        (let
                                                          (ofslpar/1086 =[int]
                                                             (+ ofs/1085
                                                               ofslpar/1072))
                                                          (before Dune__exe__Lexer.position.transform src/lexer.mll(230):6714-7065
                                                            (catch
                                                              (if i/1067
                                                                (if x/1068
                                                                  (exit 5)
                                                                  (let
                                                                    (i/1088 =a
                                                                    (field_imm 0
                                                                    i/1067))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(235):6891-7040
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(235):6891-6924
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    ofslpar/1086
                                                                    '(' '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(236):6934-7040
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(236):6934-6973
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    ofslpar/1086
                                                                    1) '$'
                                                                    '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(237):6983-7040
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(237):6983-7040
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    (+
                                                                    ofslpar/1086
                                                                    2)
                                                                    (string.length
                                                                    i/1088))
                                                                    ')' '_')))))))))
                                                                (if x/1068
                                                                  (let
                                                                    (x/1087 =a
                                                                    (field_imm 0
                                                                    x/1068))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(232):6760-6860
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(232):6760-6793
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    ofslpar/1086
                                                                    '(' '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(233):6803-6860
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(233):6803-6860
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    (+
                                                                    ofslpar/1086
                                                                    1)
                                                                    (string.length
                                                                    x/1087))
                                                                    ')' '_'))))))
                                                                  (exit 5)))
                                                             with (5)
                                                              (before Dune__exe__Lexer.position.transform src/lexer.mll(239):7063-7065
                                                                0))))))))))))))
                                   (before Dune__exe__Lexer.position src/lexer.mll(241):7073-7199
                                     (let
                                       (keyword/1089 =
                                          (makeblock 0
                                            (makeblock 0 (*,int,int)
                                              subject/1075 where/1073
                                              flavor/1074))
                                        oid/1090 = 0)
                                       (before Dune__exe__Lexer.position src/lexer.mll(246):7160-7199
                                         (makeblock 0 pos/1064 check/1076
                                           transform/1080 keyword/1089
                                           oid/1090))))))))))))))))))
     no_monsters/1091 =
       (function monsters/1093 : int
         (funct-body Dune__exe__Lexer.no_monsters src/lexer.mll(253)<ghost>:7385-7550
           (before Dune__exe__Lexer.no_monsters src/lexer.mll(254):7398-7550
             (if monsters/1093
               (let
                 (*match*/3256 =a (field_imm 1 monsters/1093)
                  monster/1094 =a (field_imm 0 monsters/1093))
                 (before Dune__exe__Lexer.no_monsters src/lexer.mll(258):7463-7550
                   (after Dune__exe__Lexer.no_monsters src/lexer.mll(258):7463-7550
                     (apply (field_imm 5 (global Dune__exe__Error!))
                       (makeblock 0 (field_imm 0 monster/1094) 0)
                       [0:
                        [11:
                         "a Menhir keyword cannot be used in an OCaml header."
                         0]
                        "a Menhir keyword cannot be used in an OCaml header."]))))
               (before Dune__exe__Lexer.no_monsters src/lexer.mll(256):7434-7436
                 0)))))
     gather_oid/1095 =
       (function xs/1097 oid/1098
         (funct-body Dune__exe__Lexer.gather_oid src/lexer.mll(265)<ghost>:7724-7809
           (before Dune__exe__Lexer.gather_oid src/lexer.mll(266):7735-7809
             (if oid/1098
               (let (x/1099 =a (field_imm 0 oid/1098))
                 (before Dune__exe__Lexer.gather_oid src/lexer.mll(268):7770-7788
                   (after Dune__exe__Lexer.gather_oid src/lexer.mll(268):7770-7788
                     (apply (field_imm 1 (global Dune__exe__StringSet!))
                       x/1099 xs/1097))))
               (before Dune__exe__Lexer.gather_oid src/lexer.mll(270):7807-7809
                 xs/1097)))))
     gather_oids/1192 =
       (function oids/1194
         (funct-body Dune__exe__Lexer.gather_oids src/lexer.mll(272)<ghost>:7827-7883
           (before Dune__exe__Lexer.gather_oids src/lexer.mll(273):7836-7883
             (after Dune__exe__Lexer.gather_oids src/lexer.mll(273):7836-7883
               (apply (field_imm 16 (global Stdlib__Array!)) gather_oid/1095
                 (field_imm 0 (global Dune__exe__StringSet!)) oids/1194)))))
     gather_monsters/1195 =
       (function monsters/1197
         (funct-body Dune__exe__Lexer.gather_monsters src/lexer.mll(277)<ghost>:7974-8079
           (before Dune__exe__Lexer.gather_monsters src/lexer.mll(278):7987-8079
             (after Dune__exe__Lexer.gather_monsters src/lexer.mll(278):7987-8079
               (apply (field_imm 25 (global Stdlib__List!))
                 (function xs/1198 monster/1199
                   (funct-body Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(278):8002-8054
                     (before Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(279):8025-8050
                       (after Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(279):8025-8050
                         (apply gather_oid/1095 xs/1198
                           (field_imm 4 monster/1199))))))
                 (field_imm 0 (global Dune__exe__StringSet!)) monsters/1197)))))
     mk_stretch/1200 =
       (function pos1/1202 pos2/1203 parenthesize/1204[int] monsters/1205
         (funct-body Dune__exe__Lexer.mk_stretch src/lexer.mll(286)<ghost>:8202-9761
           (before Dune__exe__Lexer.mk_stretch src/lexer.mll(288):8284-9761
             (let
               (raw_content/1206 =
                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(288):8311-8339
                    (apply (field_imm 7 (global Dune__exe__InputFile!))
                      (makeblock 0 pos1/1202 pos2/1203))))
               (before Dune__exe__Lexer.mk_stretch src/lexer.mll(291):8483-9761
                 (let
                   (content/1216 =
                      (if monsters/1205
                        (let
                          (*match*/3260 =a (field_imm 1 monsters/1205)
                           *match*/3259 =a (field_imm 0 monsters/1205))
                          (before Dune__exe__Lexer.mk_stretch src/lexer.mll(296):8586-8762
                            (let
                              (content/1217 =
                                 (after Dune__exe__Lexer.mk_stretch src/lexer.mll(296):8608-8635
                                   (apply
                                     (field_imm 4 (global Stdlib__Bytes!))
                                     raw_content/1206)))
                              (before Dune__exe__Lexer.mk_stretch src/lexer.mll(297):8647-8762
                                (seq
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(297):8647-8722
                                    (apply
                                      (field_imm 17 (global Stdlib__List!))
                                      (function monster/1218 : int
                                        (funct-body Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8657-8713
                                          (before Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8673-8712
                                            (after Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8673-8712
                                              (apply
                                                (field_imm 2 monster/1218)
                                                (field_int 3 pos1/1202)
                                                content/1217)))))
                                      monsters/1205))
                                  (before Dune__exe__Lexer.mk_stretch src/lexer.mll(298):8732-8762
                                    (after Dune__exe__Lexer.mk_stretch src/lexer.mll(298):8732-8762
                                      (apply
                                        (field_imm 43
                                          (global Stdlib__Bytes!))
                                        content/1217))))))))
                        (before Dune__exe__Lexer.mk_stretch src/lexer.mll(294):8550-8561
                          raw_content/1206)))
                   (before Dune__exe__Lexer.mk_stretch src/lexer.mll(303):8971-9761
                     (let
                       (content/1219 =
                          (if parenthesize/1204
                            (before Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9365
                              (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9365
                                (apply (field_imm 27 (global Stdlib!))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9343
                                    (apply
                                      (field_imm 0 (global Stdlib__String!))
                                      (-
                                        (- (field_int 3 pos1/1202)
                                          (field_int 2 pos1/1202))
                                        1)
                                      ' '))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9346-9365
                                    (apply (field_imm 27 (global Stdlib!))
                                      "("
                                      (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9352-9365
                                        (apply
                                          (field_imm 27 (global Stdlib!))
                                          content/1216 ")")))))))
                            (before Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9439
                              (after Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9439
                                (apply (field_imm 27 (global Stdlib!))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9429
                                    (apply
                                      (field_imm 0 (global Stdlib__String!))
                                      (- (field_int 3 pos1/1202)
                                        (field_int 2 pos1/1202))
                                      ' '))
                                  content/1216)))))
                       (before Dune__exe__Lexer.mk_stretch src/lexer.mll(313):9447-9761
                         (makeblock 0 (*,int,int,*,*,*)
                           (after Dune__exe__Lexer.mk_stretch src/lexer.mll(314):9481-9512
                             (apply
                               (field_imm 2 (global Dune__exe__InputFile!))
                               0))
                           (field_int 1 pos1/1202)
                           (- (field_int 1 pos2/1203)
                             (field_int 1 pos1/1202))
                           raw_content/1206 content/1219
                           (after Dune__exe__Lexer.mk_stretch src/lexer.mll(319):9699-9756
                             (apply (field_imm 23 (global Dune__exe__Misc!))
                               (function monster/1258
                                 (funct-body Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(319):9715-9747
                                   (before Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(319):9731-9746
                                     (field_imm 3 monster/1258))))
                               monsters/1205))))))))))))
     stretch_of_id/1259 =
       (function id/1261
         (funct-body Dune__exe__Lexer.stretch_of_id src/lexer.mll(326)<ghost>:9966-10564
           (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(327):9992-10564
             (let
               (*match*/3268 =
                  (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(327):10015-10037
                    (apply (field_imm 2 (global Dune__exe__Positions!))
                      id/1261))
                pos/1263 =a (field_imm 1 *match*/3268)
                raw_content/1262 =a (field_imm 0 *match*/3268))
               (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(328):10043-10564
                 (let
                   (pos1/1264 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(328):10054-10085
                        (apply (field_imm 15 (global Dune__exe__Positions!))
                          pos/1263))
                    pos2/1265 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(329):10099-10128
                        (apply (field_imm 16 (global Dune__exe__Positions!))
                          pos/1263))
                    filename/1266 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(330):10146-10180
                        (apply (field_imm 17 (global Dune__exe__Positions!))
                          pos/1263)))
                   (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(331):10186-10564
                     (seq
                       (if
                         (!= pos1/1264
                           (field_imm 0 (global Stdlib__Lexing!)))
                         0
                         (raise
                           (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(331):10186-10219
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/lexer.mll" 331 2]))))
                       (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(332):10223-10564
                         (let
                           (padding/1267 =[int]
                              (- (field_int 3 pos1/1264)
                                (field_int 2 pos1/1264)))
                           (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10271-10564
                             (let
                               (content/1268 =
                                  (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10285-10322
                                    (apply (field_imm 27 (global Stdlib!))
                                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10285-10308
                                        (apply
                                          (field_imm 0
                                            (global Stdlib__String!))
                                          padding/1267 ' '))
                                      raw_content/1262)))
                               (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(334):10328-10564
                                 (makeblock 0 (*,int,int,*,*,*) filename/1266
                                   (field_int 1 pos1/1264)
                                   (- (field_int 1 pos2/1265)
                                     (field_int 1 pos1/1264))
                                   raw_content/1262 content/1268 0))))))))))))))
     table/1269 =
       (function words/1271
         (funct-body Dune__exe__Lexer.table src/lexer.mll(347)<ghost>:10687-10797
           (before Dune__exe__Lexer.table src/lexer.mll(348):10697-10797
             (let
               (table/1272 =
                  (after Dune__exe__Lexer.table src/lexer.mll(348):10709-10727
                    (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 149)))
               (before Dune__exe__Lexer.table src/lexer.mll(349):10733-10797
                 (seq
                   (after Dune__exe__Lexer.table src/lexer.mll(349):10733-10788
                     (apply (field_imm 17 (global Stdlib__List!))
                       (function word/1353 : int
                         (funct-body Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10743-10782
                           (before Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10756-10781
                             (after Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10756-10781
                               (apply (field_imm 4 (global Stdlib__Hashtbl!))
                                 table/1272 word/1353 0)))))
                       words/1271))
                   (before Dune__exe__Lexer.table src/lexer.mll(350):10792-10797
                     table/1272)))))))
     reserved/1354 =
       (after Dune__exe__Lexer.reserved src/lexer.mll(353):10816-11533
         (apply table/1269
           [0:
            "and"
            [0:
             "as"
             [0:
              "assert"
              [0:
               "begin"
               [0:
                "class"
                [0:
                 "constraint"
                 [0:
                  "do"
                  [0:
                   "done"
                   [0:
                    "downto"
                    [0:
                     "else"
                     [0:
                      "end"
                      [0:
                       "exception"
                       [0:
                        "external"
                        [0:
                         "false"
                         [0:
                          "for"
                          [0:
                           "fun"
                           [0:
                            "function"
                            [0:
                             "functor"
                             [0:
                              "if"
                              [0:
                               "in"
                               [0:
                                "include"
                                [0:
                                 "inherit"
                                 [0:
                                  "initializer"
                                  [0:
                                   "lazy"
                                   [0:
                                    "let"
                                    [0:
                                     "match"
                                     [0:
                                      "method"
                                      [0:
                                       "module"
                                       [0:
                                        "mutable"
                                        [0:
                                         "new"
                                         [0:
                                          "object"
                                          [0:
                                           "of"
                                           [0:
                                            "open"
                                            [0:
                                             "or"
                                             [0:
                                              "parser"
                                              [0:
                                               "private"
                                               [0:
                                                "rec"
                                                [0:
                                                 "sig"
                                                 [0:
                                                  "struct"
                                                  [0:
                                                   "then"
                                                   [0:
                                                    "to"
                                                    [0:
                                                     "true"
                                                     [0:
                                                      "try"
                                                      [0:
                                                       "type"
                                                       [0:
                                                        "val"
                                                        [0:
                                                         "virtual"
                                                         [0:
                                                          "when"
                                                          [0:
                                                           "while"
                                                           [0:
                                                            "with"
                                                            [0:
                                                             "mod"
                                                             [0:
                                                              "land"
                                                              [0:
                                                               "lor"
                                                               [0:
                                                                "lxor"
                                                                [0:
                                                                 "lsl"
                                                                 [0:
                                                                  "lsr"
                                                                  [0:
                                                                   "asr" 0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))
     table/1355 =
       (function directives/1356
         (funct-body Dune__exe__Lexer.table src/lexer.mll(416)<ghost>:11661-11793
           (before Dune__exe__Lexer.table src/lexer.mll(417):11676-11793
             (let
               (table/1357 =
                  (after Dune__exe__Lexer.table src/lexer.mll(417):11688-11706
                    (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 149)))
               (before Dune__exe__Lexer.table src/lexer.mll(418):11712-11793
                 (seq
                   (after Dune__exe__Lexer.table src/lexer.mll(418):11712-11784
                     (apply (field_imm 17 (global Stdlib__List!))
                       (function param/1360 : int
                         (funct-body Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11722-11773
                           (let
                             (token/1359 =a (field_imm 1 param/1360)
                              word/1358 =a (field_imm 0 param/1360))
                             (before Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11744-11772
                               (after Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11744-11772
                                 (apply
                                   (field_imm 4 (global Stdlib__Hashtbl!))
                                   table/1357 word/1358 token/1359))))))
                       directives/1356))
                   (before Dune__exe__Lexer.table src/lexer.mll(419):11788-11793
                     table/1357)))))))
     directives/1361 =
       (after Dune__exe__Lexer.directives src/lexer.mll(422):11814-12112
         (apply table/1355
           [0:
            [0: "token" 2]
            [0:
             [0: "type" 1]
             [0:
              [0: "left" 19]
              [0:
               [0: "right" 8]
               [0:
                [0: "nonassoc" 16]
                [0:
                 [0: "start" 4]
                 [0:
                  [0: "prec" 11]
                  [0:
                   [0: "public" 10]
                   [0:
                    [0: "parameter" 14]
                    [0:
                     [0: "inline" 20]
                     [0:
                      [0: "attribute" 13] [0: [0: "on_error_reduce" 15] 0]]]]]]]]]]]]))
     char_for_backslash/1367 =
       (function c/1369[int] : int
         (funct-body Dune__exe__Lexer.char_for_backslash src/lexer.mll(441):12255-12348
           (catch
             (if (>= c/1369 110)
               (if (>= c/1369 117) (exit 31)
                 (let (switcher/3269 =a (-110+ c/1369))
                   (switch* switcher/3269
                    case int 0:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(442):12275-12281
                       '\n')
                    case int 1: (exit 31)
                    case int 2: (exit 31)
                    case int 3: (exit 31)
                    case int 4:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(443):12293-12299
                       '\r')
                    case int 5: (exit 31)
                    case int 6:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(445):12329-12335
                       '\t'))))
               (if (!= c/1369 98) (exit 31)
                 (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(444):12311-12317
                   '\b')))
            with (31)
             (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(446):12347-12348
               c/1369))))
     __ocaml_lex_tables/1370 =
       [0:
        "\000\000\226\255\227\255\000\000\229\255\231\255\003\000\001\000\235\255\003\000\236\255\209\000\161\001q\002A\003\243\255\244\255\245\255\246\255\247\255\248\255\004\000\001\000\251\255\031\000\253\255\019\004\029\000\230\255\254\255\227\004\181\005\163\006\006\000\241\255\240\255\232\255s\007C\b\233\255\011\000\004\000\012\000\252\255\253\255\001\000\006\000\255\255\254\255|\000\250\255\251\255\007\000\252\255\007\000\254\255 \000\"\000\255\255\253\255`\001\243\255\244\255\b\000\245\255\247\255\248\255\236\001\t\000\000\000\254\255\255\255\246\255\r\000\017\000\019\000\022\000`\000\"\000\023\000\019\000&\000\028\000 \000\026\000\026\0009\000)\000(\000.\0009\0001\000.\000\012\000z\bQ\tz\000#\001\251\255\251\255/\000B\000-\000A\0005\0006\000E\000C\000\249\255D\000C\000T\000V\000V\000F\000T\000O\000J\000\132\000\168\000\156\000\157\000\161\000\159\000\250\255\000\003\243\255\244\255\t\000\245\255\247\255\248\255\140\003\253\255\254\255\011\000\246\255\186\000\190\000\192\000\242\000>\001\206\000\224\000\189\000\237\000\225\000\229\000\223\000\233\000\254\000\238\000\237\000\243\000\254\000\246\000\244\000\015\000\136\t_\n\246\001\007\002\251\255\251\255\245\000\b\001\244\000\019\001\007\001\b\001\012\001\011\001\249\255\012\001\011\001\028\001\030\001\030\001\016\001!\001\028\001\023\001\026\001)\001\029\001\030\0019\001V\001\250\255U\011\246\255\247\255\n\000\248\255\250\255\251\255\014\000\253\255\254\255\255\255\249\255\228\002\249\255\250\255\r\000\251\255\252\255\253\255\015\000\179\001\255\255\254\255\188\003\251\255\252\255\016\000\254\255\242\001\255\255\253\255\017\000\142\004\249\255\250\255\018\000\251\255A\011\255\255\252\255\253\255\254\255\202\002\253\255I\011\255\255\254\255\236\002\000\000\214\001\183\001\146\004\184\0017\005\204\002\215\001\218\001\255\255\n\002\017\002\254\255\011\002\000\006\012\002\161\002\253\255\254\255\019\000\255\255"
        "\255\255\255\255\255\255\029\000\255\255\255\255\021\000\020\000\255\255\029\000\255\255\018\000\017\000\017\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\255\255\003\000\255\255\029\000\255\255\255\255\255\255\000\000\255\255\027\000\027\000\255\255\255\255\255\255\017\000\016\000\255\255\255\255\020\000\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\255\255\255\255\255\255\255\255\nn
~
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\b\000\b\000\006\000\007\000\b\000!\000/\0005\000@\000\129\000\193\000\b\000/\000\205\000)\000.\000\216\000\216\000\225\000\001\001\000\000\000\000\006\000\000\000\n\000\006\000\000\000\026\000!\000\249\000\021\000\020\000\017\000\016\000\023\000'\000$\000\t\0000\000;\000(\000H\000^\000\136\000-\000\158\000\200\000\211\000\024\000\025\000\005\000\022\000#\000\018\000\031\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\"\000\031\000:\000\014\000:\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\004\000\019\000F\000\015\000q\000p\000o\000J\000m\000Q\000P\0005\000e\000R\0004\000N\000S\000T\000U\000V\000O\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000W\000X\000Y\000Z\000[\000d\000\\\000]\000]\000f\0006\000g\000h\000i\000j\0009\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000k\000l\000n\000Y\000Y\000]\0007\000r\000s\000t\000u\000v\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\0008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000w\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\002\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255,\000x\000y\000z\000{\000|\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\177\000\176\000\175\000\173\000\011\000\165\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000b\000\145\000\144\000\146\000\147\000\148\000\149\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000\150\000\138\000\151\000\152\000\153\000\154\000\155\000\164\000\156\000\142\000\157\000\157\000\166\000@\000\143\000\167\000?\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\168\000\169\000\170\000\171\0003\000\172\000\174\000\153\000\153\000\157\000B\000\178\000C\000E\000\179\000A\000D\000>\000\180\000\181\000\182\000\183\000\184\000\185\000\186\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\187\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\188\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000G\000\210\000F\000\246\000\249\000\247\000\247\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\216\000\246\000\246\000\220\000\012\000\246\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\162\000\246\000\249\000\249\000\000\000\000\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\250\000\250\000\250\000\250\000\250\000\250\000\250\000\250\000\250\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000K\000\000\000\000\000\000\000\000\000\000\000\000\000J\000\000\000\000\000\000\000I\000\000\000\000\000L\000>\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\001\001\000\000\000\000\000\001\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\000\000\012\000\012\000\012\000\012\000%\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\234\000\000\000\205\000\000\000\000\000\204\000\255\255\249\000\000\000\000\000\239\000\000\000\000\000\238\000\000\000\000\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\207\000\000\000\000\000\000\000\129\000\206\000\208\000\128\000\209\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\000\000\132\000\000\000\233\000\130\000\135\000\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\240\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\133\000\000\000\127\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\255\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\216\000\000\000\000\000\215\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\139\000\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\137\000\000\000\000\000\140\000\127\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\217\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\029\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\027\000\000\000\000\000\000\000\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\000\000\224\000\245\000\000\000\000\000\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\000\000\000\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\226\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\242\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\251\000\251\000\251\000\251\000\251\000\251\000\251\000\251\000\251\000\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\251\000\251\000\251\000\251\000\251\000\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\251\000\251\000\251\000\251\000\251\000\251\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\000\252\000\252\000\252\000\252\000\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\000\252\000\252\000\252\000\252\000\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000!\000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\000\000 \000 \000 \000 \000 \000 \000 \000 \000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000&\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000`c
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\007\000\006\000\000\000)\000!\000.\0004\000?\000\128\000\192\000(\000*\000\204\000(\000*\000\215\000\220\000\224\000\000\001\255\255\255\255\000\000\255\255\000\000\006\000\255\255\000\000!\000\237\000\000\000\000\000\000\000\000\000\000\000\t\000\021\000\000\000-\0006\000\t\000D\000]\000\135\000*\000\157\000\196\000\208\000\000\000\000\000\000\000\000\000\022\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\027\0008\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000\000\000I\000J\000K\000L\000N\000O\000O\0001\000P\000Q\0001\000L\000R\000S\000T\000U\000L\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000V\000W\000X\000Y\000Y\000Z\000[\000\\\000d\000e\0001\000f\000g\000h\000i\0001\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000j\000k\000m\000n\000o\000p\0001\000q\000r\000s\000t\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000(\000*\000w\000x\000y\000z\000{\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\137\000\138\000\139\000\142\000\011\000\144\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000a\000\143\000\143\000\145\000\146\000\147\000\148\000a\000a\000a\000a\000a\000a\000a\000a\000a\000ar\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\253\000\255\255\255\255\253\000\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\231\000\255\255\201\000\255\255\255\255\201\000\217\000\243\000\255\255\255\255\236\000\255\255\255\255\236\000\255\255\255\255\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\201\000\255\255\255\255\255\255}\000\201\000\201\000}\000\201\000\255\255\255\255\255\255\255\255\236\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}\000\255\255\231\000}\000}\000}\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\236\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000}\000\255\255}}
b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\n\000\000\000\t\001\217\001N\000X\0004\000C\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000%\000\001\000\016\002\224\002i\000s

        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255<\000\000\000}`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000d\000n\000o\000p
        "\255\002\255\255\003\255\255\000\002\001\003\255\n\255\t\255\b\255\255\n\255\t\255\255\011\255\255\007\255\003\255\005\b\004\n\001\t\000\011\255\012\255\255\014\255\255\r\255\255\015\255\255\007\255\005\b\004\n\003\014\002\015\001\t\000\011\255\003\255\007\012\006\r\005\b\004\n\001\t\000\011\255"])
    (letrec
      (main/1371
         (function lexbuf/1395
           (funct-body Dune__exe__Lexer.main src/lexer.ml(1696)<ghost>:99279-99445
             (before Dune__exe__Lexer.main src/lexer.ml(1697):99290-99445
               (seq
                 (setfield_ptr 9 lexbuf/1395
                   (after Dune__exe__Lexer.main src/lexer.ml(1697):99315-99332
                     (caml_make_vect 4 -1)))
                 (before Dune__exe__Lexer.main src/lexer.ml(1698):99357-99445
                   (seq
                     (after Dune__exe__Lexer.main src/lexer.ml(1698):99357-99412
                       (array.set[int] (field_mut 9 lexbuf/1395) 2
                         (field_int 5 lexbuf/1395)))
                     (before Dune__exe__Lexer.main src/lexer.ml(1699):99416-99445
                       (after Dune__exe__Lexer.main src/lexer.ml(1699):99416-99445
                         (apply __ocaml_lex_main_rec/1372 lexbuf/1395 0)))))))))
        __ocaml_lex_main_rec/1372
          (function lexbuf/1396 __ocaml_lex_state/1397[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1700)<ghost>:99471-105785
              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1701):99500-105785
                (let
                  (__ocaml_lex_state/1398 =
                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1701):99506-99567
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1397
                         lexbuf/1396)))
                  (catch
                    (if (isout 29 __ocaml_lex_state/1398) (exit 39)
                      (switch* __ocaml_lex_state/1398
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1703):99586-99896
                          (let
                            (directive/1399 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1707):99667-99752
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1396
                                   (+ (field_int 4 lexbuf/1396) 1)
                                   (field_int 5 lexbuf/1396))))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(490):99782-99896
                              (try
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(490):99788-99821
                                  (apply
                                    (field_imm 5 (global Stdlib__Hashtbl!))
                                    directives/1361 directive/1399))
                               with exn/3271
                                (catch
                                  (if
                                    (== exn/3271
                                      (field_imm 7 (global Stdlib!)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(491):99846-99894
                                      (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(491):99846-99894
                                        (apply error2/509 lexbuf/1396
                                          [0:
                                           [11:
                                            "unknown directive: "
                                            [2: 0 [12: '.' 0]]]
                                           "unknown directive: %s."]
                                          directive/1399)))
                                    (exit 32))
                                 with (32) (reraise exn/3271))))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(493):99955-100498
                          (makeblock 2
                            (makemutable 246
                              (function param/3272
                                (let
                                  (openingpos/1413 =
                                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(500):100373-100392
                                       (apply
                                         (field_imm 12
                                           (global Stdlib__Lexing!))
                                         lexbuf/1396)))
                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(501):100404-100487
                                    (let
                                      (closingpos/1414 =
                                         (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(501):100421-100434
                                           (apply finish/1393 lexbuf/1396)))
                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(502):100446-100487
                                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(502):100446-100487
                                          (apply mk_stretch/1200
                                            openingpos/1413 closingpos/1414 0
                                            0))))))))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(505):100557-100565
                          6)
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(507):100624-100633
                          26)
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(509):100692-100701
                          24)
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(511):100760-100769
                          22)
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(513):100828-100838
                          17)
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(515):100897-100907
                          7)
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(517):100966-100973
                          27)
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(519):101032-101044
                          9)
                       case int 10:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(521):101104-101112
                          5)
                       case int 11:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(523):101172-101180
                          12)
                       case int 12:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(525):101240-101249
                          3)
                       case int 13:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(527):101309-101323
                          0)
                       case int 14:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(529):101383-101397
                          25)
                       case int 15:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(531):101457-101471
                          21)
                       case int 16:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(533):101531-101538
                          18)
                       case int 17:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1804):101572-101909
                          (let
                            (id/1417 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1808):101654-101733
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1396 (field_int 4 lexbuf/1396)
                                   (field_int 5 lexbuf/1396))))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(535):101763-101909
                              (if
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(535):101768-101791
                                  (apply
                                    (field_imm 8 (global Stdlib__Hashtbl!))
                                    reserved/1354 id/1417))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(536):101805-101852
                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(536):101805-101852
                                    (apply error2/509 lexbuf/1396
                                      [0:
                                       [11:
                                        "this is an OCaml reserved word." 0]
                                       "this is an OCaml reserved word."])))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101872-101903
                                  (makeblock 4
                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101876-101903
                                      (apply
                                        (field_imm 3
                                          (global Dune__exe__Positions!))
                                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101886-101899
                                          (apply
                                            (field_imm 27
                                              (global Dune__exe__Positions!))
                                            lexbuf/1396))
                                        id/1417))))))))
                       case int 18:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1818):101943-102169
                          (let
                            (id/1418 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1822):102025-102104
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1396 (field_int 4 lexbuf/1396)
                                   (field_int 5 lexbuf/1396))))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102134-102169
                              (makeblock 0
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102140-102167
                                  (apply
                                    (field_imm 3
                                      (global Dune__exe__Positions!))
                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102150-102163
                                      (apply
                                        (field_imm 27
                                          (global Dune__exe__Positions!))
                                        lexbuf/1396))
                                    id/1418))))))
                       case int 19:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(546):102229-102511
                          (let
                            (buffer/1419 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(546):102244-102260
                                 (apply
                                   (field_imm 0 (global Stdlib__Buffer!)) 16)))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(547):102270-102509
                              (let
                                (openingpos/1502 =
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(547):102287-102308
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1396)))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(548):102318-102509
                                  (let
                                    (content/1503 =
                                       (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(548):102332-102370
                                         (apply record_string/1387
                                           openingpos/1502 buffer/1419
                                           lexbuf/1396)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(549):102380-102509
                                      (let
                                        (id/1504 =
                                           (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(549):102389-102420
                                             (apply
                                               (field_imm 3
                                                 (global Stdlib__Printf!))
                                               [0:
                                                [12: '"' [2: 0 [12: '"' 0]]]
                                                "\"%s\""]
                                               content/1503)))
                                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(550):102430-102509
                                          (let
                                            (pos/1505 =
                                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(550):102440-102478
                                                 (apply
                                                   (field_imm 19
                                                     (global Dune__exe__Positions!))
                                                   (makeblock 0
                                                     openingpos/1502
                                                     (field_mut 11
                                                       lexbuf/1396)))))
                                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(551):102488-102509
                                              (makeblock 1
                                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(551):102492-102509
                                                  (apply
                                                    (field_imm 3
                                                      (global Dune__exe__Positions!))
                                                    pos/1505 id/1504))))))))))))))
                       case int 20:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102571-102603
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102573-102588
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1396))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102590-102601
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102590-102601
                                (apply main/1371 lexbuf/1396)))))
                       case int 21:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(556):102663-102678
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(556):102663-102678
                            (apply main/1371 lexbuf/1396)))
                       case int 22:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102738-102793
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102740-102778
                              (apply comment/1373
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102748-102771
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1396))
                                lexbuf/1396))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102780-102791
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102780-102791
                                (apply main/1371 lexbuf/1396)))))
                       case int 23:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102853-102913
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102855-102898
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102868-102891
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1396))
                                lexbuf/1396))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102900-102911
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102900-102911
                                (apply main/1371 lexbuf/1396)))))
                       case int 24:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102973-103027
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102973-103027
                            (apply savestart/538 lexbuf/1396
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102992-103025
                                (apply ocamltype/1375
                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):103003-103024
                                    (apply
                                      (field_imm 12 (global Stdlib__Lexing!))
                                      lexbuf/1396)))))))
                       case int 25:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(564):103087-103388
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(564):103087-103388
                            (apply savestart/538 lexbuf/1396
                              (function lexbuf/1506
                                (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(564):103106-103386
                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(565):103129-103378
                                    (let
                                      (openingpos/1507 =
                                         (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(565):103146-103167
                                           (apply
                                             (field_imm 11
                                               (global Stdlib__Lexing!))
                                             lexbuf/1506)))
                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(566):103179-103378
                                        (let
                                          (stretchpos/1508 =
                                             (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(566):103196-103215
                                               (apply
                                                 (field_imm 12
                                                   (global Stdlib__Lexing!))
                                                 lexbuf/1506)))
                                          (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(567):103227-103378
                                            (let
                                              (*match*/3276 =
                                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(567):103254-103286
                                                   (apply action/1377 1
                                                     openingpos/1507 0
                                                     lexbuf/1506))
                                               monsters/1510 =a
                                                 (field_imm 1 *match*/3276)
                                               closingpos/1509 =a
                                                 (field_imm 0 *match*/3276))
                                              (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(568):103298-103378
                                                (seq
                                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(568):103298-103318
                                                    (apply no_monsters/1091
                                                      monsters/1510))
                                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(569):103328-103378
                                                    (makeblock 5
                                                      (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(569):103335-103378
                                                        (apply
                                                          mk_stretch/1200
                                                          stretchpos/1508
                                                          closingpos/1509 0
                                                          0)))))))))))))))))
                       case int 26:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(572):103448-104533
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(572):103448-104533
                            (apply savestart/538 lexbuf/1396
                              (function lexbuf/1511
                                (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(572):103467-104527
                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(573):103490-104519
                                    (let
                                      (openingpos/1512 =
                                         (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(573):103507-103528
                                           (apply
                                             (field_imm 11
                                               (global Stdlib__Lexing!))
                                             lexbuf/1511)))
                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(574):103540-104519
                                        (let
                                          (stretchpos/1513 =
                                             (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(574):103557-103576
                                               (apply
                                                 (field_imm 12
                                                   (global Stdlib__Lexing!))
                                                 lexbuf/1511)))
                                          (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(575):103588-104519
                                            (let
                                              (*match*/3280 =
                                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(575):103615-103648
                                                   (apply action/1377 0
                                                     openingpos/1512 0
                                                     lexbuf/1511))
                                               monsters/1515 =a
                                                 (field_imm 1 *match*/3280)
                                               closingpos/1514 =a
                                                 (field_imm 0 *match*/3280))
                                              (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(576):103660-104519
                                                (makeblock 8
                                                  (function dollars/1551[int]
                                                    producers/1552
                                                    (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(576):103667-104519
                                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103775-104509
                                                        (seq
                                                          (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103775-103842
                                                            (apply
                                                              (field_imm 17
                                                                (global Stdlib__List!))
                                                              (function
                                                                monster/1553
                                                                : int
                                                                (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103785-103833
                                                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103801-103832
                                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103801-103832
                                                                    (apply
                                                                    (field_imm 1
                                                                    monster/1553)
                                                                    dollars/1551
                                                                    producers/1552)))))
                                                              monsters/1515))
                                                          (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(585):104196-104509
                                                            (let
                                                              (ids/1554 =
                                                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104220-104286
                                                                   (apply
                                                                    (field_imm 4
                                                                    (global Dune__exe__StringSet!))
                                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104236-104259
                                                                    (apply
                                                                    gather_oids/1192
                                                                    producers/1552))
                                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104260-104286
                                                                    (apply
                                                                    gather_monsters/1195
                                                                    monsters/1515)))))
                                                              (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(589):104359-104509
                                                                (let
                                                                  (stretch/1555 =
                                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(589):104373-104419
                                                                    (apply
                                                                    mk_stretch/1200
                                                                    stretchpos/1513
                                                                    closingpos/1514
                                                                    1
                                                                    monsters/1515)))
                                                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(591):104478-104509
                                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(591):104478-104509
                                                                    (apply
                                                                    (field_imm 0
                                                                    (global Dune__exe__Action!))
                                                                    ids/1554
                                                                    stretch/1555))))))))))))))))))))))))
                       case int 27:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1901):104567-105480
                          (let
                            (percent/1592 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1905):104636-104714
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1396 (field_int 4 lexbuf/1396)
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1905):104689-104714
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1396) 0))))
                             id/1593 =
                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104812-104894
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1396
                                   (+
                                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104838-104863
                                       (array.get[int]
                                         (field_mut 9 lexbuf/1396) 0))
                                     2)
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104869-104894
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1396) 1)))))
                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(596):104924-105480
                              (let
                                (openingpos/1594 =
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(596):104943-104964
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1396)))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(597):104974-105474
                                  (let
                                    (stretchpos/1595 =
                                       (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(597):104991-105010
                                         (apply
                                           (field_imm 12
                                             (global Stdlib__Lexing!))
                                           lexbuf/1396)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(598):105020-105474
                                      (let
                                        (closingpos/1596 =
                                           (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(598):105037-105064
                                             (apply attribute/1381
                                               openingpos/1594 lexbuf/1396)))
                                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105074-105474
                                          (let
                                            (pos/1597 =
                                               (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105084-105134
                                                 (apply
                                                   (field_imm 19
                                                     (global Dune__exe__Positions!))
                                                   (makeblock 0
                                                     openingpos/1594
                                                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105114-105133
                                                       (apply
                                                         (field_imm 12
                                                           (global Stdlib__Lexing!))
                                                         lexbuf/1396))))))
                                            (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(600):105144-105474
                                              (let
                                                (attr/1598 =
                                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(600):105155-105196
                                                     (apply mk_stretch/1200
                                                       stretchpos/1595
                                                       closingpos/1596 0 0)))
                                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(601):105206-105474
                                                  (if
                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(601):105209-105221
                                                      (caml_string_equal
                                                        percent/1592 ""))
                                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(603):105290-105333
                                                      (makeblock 7
                                                        (makeblock 0
                                                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(603):105301-105326
                                                            (apply
                                                              (field_imm 3
                                                                (global Dune__exe__Positions!))
                                                              pos/1597
                                                              id/1593))
                                                          attr/1598)))
                                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(606):105424-105474
                                                      (makeblock 6
                                                        (makeblock 0
                                                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(606):105442-105467
                                                            (apply
                                                              (field_imm 3
                                                                (global Dune__exe__Positions!))
                                                              pos/1597
                                                              id/1593))
                                                          attr/1598)))))))))))))))))
                       case int 28:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(609):105540-105547
                          23)
                       case int 29:
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(611):105607-105651
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(611):105607-105651
                            (apply error2/509 lexbuf/1396
                              [0:
                               [11: "unexpected character(s)." 0]
                               "unexpected character(s)."])))))
                   with (39)
                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1936):105700-105785
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1936):105700-105732
                          (apply (field_imm 0 lexbuf/1396) lexbuf/1396))
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1937):105740-105785
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1937):105740-105785
                            (apply __ocaml_lex_main_rec/1372 lexbuf/1396
                              __ocaml_lex_state/1398))))))))))
        comment/1373
          (function openingpos/1599 lexbuf/1600 : int
            (funct-body Dune__exe__Lexer.comment src/lexer.ml(1939)<ghost>:105799-105866
              (before Dune__exe__Lexer.comment src/lexer.ml(1940):105822-105866
                (after Dune__exe__Lexer.comment src/lexer.ml(1940):105822-105866
                  (apply __ocaml_lex_comment_rec/1374 openingpos/1599
                    lexbuf/1600 42)))))
        __ocaml_lex_comment_rec/1374
          (function openingpos/1601 lexbuf/1602 __ocaml_lex_state/1603[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1941)<ghost>:105895-106494
              (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1942):105935-106494
                (let
                  (__ocaml_lex_state/1604 =
                     (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1942):105941-105998
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1603
                         lexbuf/1602)))
                  (catch
                    (if (isout 3 __ocaml_lex_state/1604) (exit 40)
                      (switch* __ocaml_lex_state/1604
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106043-106089
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106045-106060
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1602))
                            (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106062-106087
                              (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106062-106087
                                (apply comment/1373 openingpos/1601
                                  lexbuf/1602)))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(621):106148-106154
                          0)
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(623):106213-106258
                          (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(623):106213-106258
                            (apply error1/467 openingpos/1601
                              [0:
                               [11: "unterminated comment." 0]
                               "unterminated comment."])))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(625):106317-106346
                          (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(625):106317-106346
                            (apply comment/1373 openingpos/1601 lexbuf/1602)))))
                   with (40)
                    (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1963):106395-106494
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1963):106395-106427
                          (apply (field_imm 0 lexbuf/1602) lexbuf/1602))
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1964):106435-106494
                          (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1964):106435-106494
                            (apply __ocaml_lex_comment_rec/1374
                              openingpos/1601 lexbuf/1602
                              __ocaml_lex_state/1604))))))))))
        ocamltype/1375
          (function openingpos/1605 lexbuf/1606
            (funct-body Dune__exe__Lexer.ocamltype src/lexer.ml(1966)<ghost>:106510-106579
              (before Dune__exe__Lexer.ocamltype src/lexer.ml(1967):106533-106579
                (after Dune__exe__Lexer.ocamltype src/lexer.ml(1967):106533-106579
                  (apply __ocaml_lex_ocamltype_rec/1376 openingpos/1605
                    lexbuf/1606 49)))))
        __ocaml_lex_ocamltype_rec/1376
          (function openingpos/1607 lexbuf/1608 __ocaml_lex_state/1609[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1968)<ghost>:106610-107525
              (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1969):106650-107525
                (let
                  (__ocaml_lex_state/1610 =
                     (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1969):106656-106713
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1609
                         lexbuf/1608)))
                  (catch
                    (if (isout 5 __ocaml_lex_state/1610) (exit 41)
                      (switch* __ocaml_lex_state/1610
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(636):106758-106789
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(636):106758-106789
                            (apply ocamltype/1375 openingpos/1607
                              lexbuf/1608)))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106848-106936
                          (makeblock 3
                            (makeblock 0
                              (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106878-106933
                                (apply mk_stretch/1200 openingpos/1607
                                  (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106901-106924
                                    (apply
                                      (field_imm 11 (global Stdlib__Lexing!))
                                      lexbuf/1608))
                                  1 0)))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):106995-107071
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):106997-107040
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107010-107033
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1608))
                                lexbuf/1608))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107042-107069
                              (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107042-107069
                                (apply ocamltype/1375 openingpos/1607
                                  lexbuf/1608)))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107130-107178
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107132-107147
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1608))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107149-107176
                              (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107149-107176
                                (apply ocamltype/1375 openingpos/1607
                                  lexbuf/1608)))))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(644):107237-107285
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(644):107237-107285
                            (apply error1/467 openingpos/1607
                              [0:
                               [11: "unterminated OCaml type." 0]
                               "unterminated OCaml type."])))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(646):107344-107375
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(646):107344-107375
                            (apply ocamltype/1375 openingpos/1607
                              lexbuf/1608)))))
                   with (41)
                    (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2000):107424-107525
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2000):107424-107456
                          (apply (field_imm 0 lexbuf/1608) lexbuf/1608))
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2001):107464-107525
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2001):107464-107525
                            (apply __ocaml_lex_ocamltype_rec/1376
                              openingpos/1607 lexbuf/1608
                              __ocaml_lex_state/1610))))))))))
        action/1377
          (function percent/1611[int] openingpos/1612 monsters/1613
            lexbuf/1614
            (funct-body Dune__exe__Lexer.action src/lexer.ml(2003)<ghost>:107538-107682
              (before Dune__exe__Lexer.action src/lexer.ml(2004):107577-107682
                (seq
                  (setfield_ptr 9 lexbuf/1614
                    (after Dune__exe__Lexer.action src/lexer.ml(2004):107602-107620
                      (caml_make_vect 16 -1)))
                  (before Dune__exe__Lexer.action src/lexer.ml(2004):107622-107682
                    (after Dune__exe__Lexer.action src/lexer.ml(2004):107622-107682
                      (apply __ocaml_lex_action_rec/1378 percent/1611
                        openingpos/1612 monsters/1613 lexbuf/1614 60)))))))
        __ocaml_lex_action_rec/1378
          (function percent/1615[int] openingpos/1616 monsters/1617
            lexbuf/1618 __ocaml_lex_state/1619[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2005)<ghost>:107710-111176
              (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2006):107767-111176
                (let
                  (__ocaml_lex_state/1620 =
                     (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2006):107773-107834
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1619
                         lexbuf/1618)))
                  (catch
                    (if (isout 12 __ocaml_lex_state/1620) (exit 50)
                      (switch* __ocaml_lex_state/1620
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107879-108004
                          (let
                            (*match*/3284 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107899-107951
                                 (apply action/1377 0
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107912-107935
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1618))
                                   monsters/1617 lexbuf/1618))
                             monsters/1621 =a (field_imm 1 *match*/3284)
                             *match*/3285 =a (field_imm 0 *match*/3284))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(658):107961-108002
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(658):107961-108002
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1621 lexbuf/1618)))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2014):108037-108518
                          (let
                            (delimiter/1622 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2018):108115-108194
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1618 (field_int 4 lexbuf/1618)
                                   (field_int 5 lexbuf/1618))))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(660):108224-108518
                              (catch
                                (catch
                                  (if percent/1615
                                    (stringswitch delimiter/1622
                                     case "%}": (exit 45)
                                     default: (exit 46))
                                    (stringswitch delimiter/1622
                                     case "}": (exit 45)
                                     default: (exit 46)))
                                 with (46)
                                  (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(667):108467-108512
                                    (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(667):108467-108512
                                      (apply error1/467 openingpos/1616
                                        [0:
                                         [11: "unbalanced opening brace." 0]
                                         "unbalanced opening brace."]))))
                               with (45)
                                (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(664):108377-108408
                                  (makeblock 0
                                    (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(664):108377-108398
                                      (apply
                                        (field_imm 11
                                          (global Stdlib__Lexing!))
                                        lexbuf/1618))
                                    monsters/1617))))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108577-108701
                          (let
                            (*match*/3289 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108597-108648
                                 (apply parentheses/1379
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108609-108632
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1618))
                                   monsters/1617 lexbuf/1618))
                             monsters/1623 =a (field_imm 1 *match*/3289)
                             *match*/3290 =a (field_imm 0 *match*/3289))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(671):108658-108699
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(671):108658-108699
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1623 lexbuf/1618)))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2038):108734-109083
                          (let
                            (i/1624 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2042):108807-108892
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1618
                                   (+ (field_int 4 lexbuf/1618) 1)
                                   (field_int 5 lexbuf/1618))))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108922-109083
                              (let
                                (i/1625 =[int]
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108932-108971
                                     (apply int_of_string/512
                                       (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108946-108969
                                         (apply
                                           (field_imm 11
                                             (global Stdlib__Lexing!))
                                           lexbuf/1618))
                                       i/1624)))
                                (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):108981-109081
                                  (let
                                    (monster/1626 =
                                       (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):108995-109017
                                         (apply dollar/1038
                                           (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):109002-109015
                                             (apply
                                               (field_imm 27
                                                 (global Dune__exe__Positions!))
                                               lexbuf/1618))
                                           i/1625)))
                                    (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(675):109027-109081
                                      (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(675):109027-109081
                                        (apply action/1377 percent/1615
                                          openingpos/1616
                                          (makeblock 0 monster/1626
                                            monsters/1617)
                                          lexbuf/1618)))))))))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2050):109116-109960
                          (let
                            (i/1627 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109189-109269
                                 (apply
                                   (field_imm 16 (global Stdlib__Lexing!))
                                   lexbuf/1618
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109218-109243
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 3))
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109244-109269
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 2))))
                             x/1628 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109351-109431
                                 (apply
                                   (field_imm 16 (global Stdlib__Lexing!))
                                   lexbuf/1618
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109380-109405
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 7))
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109406-109431
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 6))))
                             where/1629 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109530-109606
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1618
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109555-109580
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 5))
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109581-109606
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 4))))
                             flavor/1630 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109733-109809
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1618
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109758-109783
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 1))
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109784-109809
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1618) 0)))))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109839-109960
                              (let
                                (monster/1631 =
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109855-109894
                                     (apply position/1063
                                       (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109864-109877
                                         (apply
                                           (field_imm 27
                                             (global Dune__exe__Positions!))
                                           lexbuf/1618))
                                       where/1629 flavor/1630 i/1627 x/1628)))
                                (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(678):109904-109958
                                  (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(678):109904-109958
                                    (apply action/1377 percent/1615
                                      openingpos/1616
                                      (makeblock 0 monster/1631
                                        monsters/1617)
                                      lexbuf/1618)))))))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(680):110019-110077
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(680):110019-110077
                            (apply error2/509 lexbuf/1618
                              [0:
                               [11:
                                "$previouserror is no longer supported." 0]
                               "$previouserror is no longer supported."])))
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110136-110243
                          (let
                            (monster/1632 =
                               (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110152-110177
                                 (apply syntaxerror/819
                                   (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110164-110177
                                     (apply
                                       (field_imm 27
                                         (global Dune__exe__Positions!))
                                       lexbuf/1618)))))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(683):110187-110241
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(683):110187-110241
                                (apply action/1377 percent/1615
                                  openingpos/1616
                                  (makeblock 0 monster/1632 monsters/1617)
                                  lexbuf/1618)))))
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110302-110392
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110304-110341
                              (apply string/1385
                                (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110311-110334
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1618))
                                lexbuf/1618))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(686):110349-110390
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(686):110349-110390
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1617 lexbuf/1618)))))
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(688):110451-110515
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(688):110453-110464
                              (apply char/1391 lexbuf/1618))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(689):110472-110513
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(689):110472-110513
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1617 lexbuf/1618)))))
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110574-110670
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110576-110619
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110589-110612
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1618))
                                lexbuf/1618))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(692):110627-110668
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(692):110627-110668
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1617 lexbuf/1618)))))
                       case int 10:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(694):110730-110798
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(694):110732-110747
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1618))
                            (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(695):110755-110796
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(695):110755-110796
                                (apply action/1377 percent/1615
                                  openingpos/1616 monsters/1617 lexbuf/1618)))))
                       case int 11:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(698):110858-110907
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(698):110858-110907
                            (apply error1/467 openingpos/1616
                              [0:
                               [11: "unbalanced opening brace." 0]
                               "unbalanced opening brace."])))
                       case int 12:
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(700):110967-111012
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(700):110967-111012
                            (apply action/1377 percent/1615 openingpos/1616
                              monsters/1617 lexbuf/1618)))))
                   with (50)
                    (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2120):111061-111176
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2120):111061-111093
                          (apply (field_imm 0 lexbuf/1618) lexbuf/1618))
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2121):111101-111176
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2121):111101-111176
                            (apply __ocaml_lex_action_rec/1378 percent/1615
                              openingpos/1616 monsters/1617 lexbuf/1618
                              __ocaml_lex_state/1620))))))))))
        parentheses/1379
          (function openingpos/1633 monsters/1634 lexbuf/1635
            (funct-body Dune__exe__Lexer.parentheses src/lexer.ml(2123)<ghost>:111194-111328
              (before Dune__exe__Lexer.parentheses src/lexer.ml(2124):111225-111328
                (seq
                  (setfield_ptr 9 lexbuf/1635
                    (after Dune__exe__Lexer.parentheses src/lexer.ml(2124):111250-111268
                      (caml_make_vect 16 -1)))
                  (before Dune__exe__Lexer.parentheses src/lexer.ml(2124):111270-111328
                    (after Dune__exe__Lexer.parentheses src/lexer.ml(2124):111270-111328
                      (apply __ocaml_lex_parentheses_rec/1380 openingpos/1633
                        monsters/1634 lexbuf/1635 125)))))))
        __ocaml_lex_parentheses_rec/1380
          (function openingpos/1636 monsters/1637 lexbuf/1638
            __ocaml_lex_state/1639[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2125)<ghost>:111361-114348
              (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2126):111410-114348
                (let
                  (__ocaml_lex_state/1640 =
                     (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2126):111416-111477
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1639
                         lexbuf/1638)))
                  (catch
                    (if (isout 12 __ocaml_lex_state/1640) (exit 57)
                      (switch* __ocaml_lex_state/1640
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111522-111643
                          (let
                            (*match*/3294 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111542-111593
                                 (apply parentheses/1379
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111554-111577
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1638))
                                   monsters/1637 lexbuf/1638))
                             monsters/1641 =a (field_imm 1 *match*/3294)
                             *match*/3295 =a (field_imm 0 *match*/3294))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(710):111603-111641
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(710):111603-111641
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1641 lexbuf/1638)))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(712):111702-111737
                          (makeblock 0
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(712):111704-111725
                              (apply (field_imm 11 (global Stdlib__Lexing!))
                                lexbuf/1638))
                            monsters/1637))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111796-111918
                          (let
                            (*match*/3299 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111816-111868
                                 (apply action/1377 0
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111829-111852
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1638))
                                   monsters/1637 lexbuf/1638))
                             monsters/1642 =a (field_imm 1 *match*/3299)
                             *match*/3300 =a (field_imm 0 *match*/3299))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(715):111878-111916
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(715):111878-111916
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1642 lexbuf/1638)))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2145):111951-112297
                          (let
                            (i/1643 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2149):112024-112109
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1638
                                   (+ (field_int 4 lexbuf/1638) 1)
                                   (field_int 5 lexbuf/1638))))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112139-112297
                              (let
                                (i/1644 =[int]
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112149-112188
                                     (apply int_of_string/512
                                       (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112163-112186
                                         (apply
                                           (field_imm 11
                                             (global Stdlib__Lexing!))
                                           lexbuf/1638))
                                       i/1643)))
                                (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112198-112295
                                  (let
                                    (monster/1645 =
                                       (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112212-112234
                                         (apply dollar/1038
                                           (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112219-112232
                                             (apply
                                               (field_imm 27
                                                 (global Dune__exe__Positions!))
                                               lexbuf/1638))
                                           i/1644)))
                                    (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(719):112244-112295
                                      (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(719):112244-112295
                                        (apply parentheses/1379
                                          openingpos/1636
                                          (makeblock 0 monster/1645
                                            monsters/1637)
                                          lexbuf/1638)))))))))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2157):112330-113171
                          (let
                            (i/1646 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112403-112483
                                 (apply
                                   (field_imm 16 (global Stdlib__Lexing!))
                                   lexbuf/1638
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112432-112457
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 3))
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112458-112483
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 2))))
                             x/1647 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112565-112645
                                 (apply
                                   (field_imm 16 (global Stdlib__Lexing!))
                                   lexbuf/1638
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112594-112619
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 7))
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112620-112645
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 6))))
                             where/1648 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112744-112820
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1638
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112769-112794
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 5))
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112795-112820
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 4))))
                             flavor/1649 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112947-113023
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1638
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112972-112997
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 1))
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112998-113023
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1638) 0)))))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113053-113171
                              (let
                                (monster/1650 =
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113069-113108
                                     (apply position/1063
                                       (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113078-113091
                                         (apply
                                           (field_imm 27
                                             (global Dune__exe__Positions!))
                                           lexbuf/1638))
                                       where/1648 flavor/1649 i/1646 x/1647)))
                                (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(722):113118-113169
                                  (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(722):113118-113169
                                    (apply parentheses/1379 openingpos/1636
                                      (makeblock 0 monster/1650
                                        monsters/1637)
                                      lexbuf/1638)))))))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(724):113230-113288
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(724):113230-113288
                            (apply error2/509 lexbuf/1638
                              [0:
                               [11:
                                "$previouserror is no longer supported." 0]
                               "$previouserror is no longer supported."])))
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113347-113451
                          (let
                            (monster/1651 =
                               (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113363-113388
                                 (apply syntaxerror/819
                                   (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113375-113388
                                     (apply
                                       (field_imm 27
                                         (global Dune__exe__Positions!))
                                       lexbuf/1638)))))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(727):113398-113449
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(727):113398-113449
                                (apply parentheses/1379 openingpos/1636
                                  (makeblock 0 monster/1651 monsters/1637)
                                  lexbuf/1638)))))
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113510-113591
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113512-113549
                              (apply string/1385
                                (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113519-113542
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1638))
                                lexbuf/1638))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113551-113589
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113551-113589
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1637 lexbuf/1638)))))
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113650-113705
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113652-113663
                              (apply char/1391 lexbuf/1638))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113665-113703
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113665-113703
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1637 lexbuf/1638)))))
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113764-113851
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113766-113809
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113779-113802
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1638))
                                lexbuf/1638))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113811-113849
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113811-113849
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1637 lexbuf/1638)))))
                       case int 10:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113911-113970
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113913-113928
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1638))
                            (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113930-113968
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113930-113968
                                (apply parentheses/1379 openingpos/1636
                                  monsters/1637 lexbuf/1638)))))
                       case int 11:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(738):114030-114085
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(738):114030-114085
                            (apply error1/467 openingpos/1636
                              [0:
                               [11: "unbalanced opening parenthesis." 0]
                               "unbalanced opening parenthesis."])))
                       case int 12:
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(740):114145-114187
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(740):114145-114187
                            (apply parentheses/1379 openingpos/1636
                              monsters/1637 lexbuf/1638)))))
                   with (57)
                    (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2223):114236-114348
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2223):114236-114268
                          (apply (field_imm 0 lexbuf/1638) lexbuf/1638))
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2224):114276-114348
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2224):114276-114348
                            (apply __ocaml_lex_parentheses_rec/1380
                              openingpos/1636 monsters/1637 lexbuf/1638
                              __ocaml_lex_state/1640))))))))))
        attribute/1381
          (function openingpos/1652 lexbuf/1653
            (funct-body Dune__exe__Lexer.attribute src/lexer.ml(2226)<ghost>:114364-114434
              (before Dune__exe__Lexer.attribute src/lexer.ml(2227):114387-114434
                (after Dune__exe__Lexer.attribute src/lexer.ml(2227):114387-114434
                  (apply __ocaml_lex_attribute_rec/1382 openingpos/1652
                    lexbuf/1653 189)))))
        __ocaml_lex_attribute_rec/1382
          (function openingpos/1654 lexbuf/1655 __ocaml_lex_state/1656[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2228)<ghost>:114465-115923
              (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2229):114505-115923
                (let
                  (__ocaml_lex_state/1657 =
                     (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2229):114511-114568
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1656
                         lexbuf/1655)))
                  (catch
                    (if (isout 9 __ocaml_lex_state/1657) (exit 64)
                      (switch* __ocaml_lex_state/1657
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114613-114702
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114623-114663
                              (apply attribute/1381
                                (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114633-114656
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1655))
                                lexbuf/1655))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(752):114673-114700
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(752):114673-114700
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(754):114761-114786
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(754):114761-114786
                            (apply (field_imm 11 (global Stdlib__Lexing!))
                              lexbuf/1655)))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114845-114943
                          (let
                            (*match*/3304 =
                               (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114858-114904
                                 (apply action/1377 0
                                   (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114871-114894
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1655))
                                   0 lexbuf/1655))
                             *match*/3306 =a (field_imm 1 *match*/3304)
                             *match*/3305 =a (field_imm 0 *match*/3304))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(757):114914-114941
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(757):114914-114941
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115002-115099
                          (let
                            (*match*/3310 =
                               (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115015-115060
                                 (apply parentheses/1379
                                   (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115027-115050
                                     (apply
                                       (field_imm 11
                                         (global Stdlib__Lexing!))
                                       lexbuf/1655))
                                   0 lexbuf/1655))
                             *match*/3312 =a (field_imm 1 *match*/3310)
                             *match*/3311 =a (field_imm 0 *match*/3310))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(760):115070-115097
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(760):115070-115097
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115158-115228
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115160-115197
                              (apply string/1385
                                (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115167-115190
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1655))
                                lexbuf/1655))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115199-115226
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115199-115226
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115287-115331
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115289-115300
                              (apply char/1391 lexbuf/1655))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115302-115329
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115302-115329
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115390-115466
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115392-115435
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115405-115428
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1655))
                                lexbuf/1655))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115437-115464
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115437-115464
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 7:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115525-115573
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115527-115542
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1655))
                            (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115544-115571
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115544-115571
                                (apply attribute/1381 openingpos/1654
                                  lexbuf/1655)))))
                       case int 8:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(772):115632-115683
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(772):115632-115683
                            (apply error1/467 openingpos/1654
                              [0:
                               [11: "unbalanced opening bracket." 0]
                               "unbalanced opening bracket."])))
                       case int 9:
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(774):115742-115773
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(774):115742-115773
                            (apply attribute/1381 openingpos/1654
                              lexbuf/1655)))))
                   with (64)
                    (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2283):115822-115923
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2283):115822-115854
                          (apply (field_imm 0 lexbuf/1655) lexbuf/1655))
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2284):115862-115923
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2284):115862-115923
                            (apply __ocaml_lex_attribute_rec/1382
                              openingpos/1654 lexbuf/1655
                              __ocaml_lex_state/1657))))))))))
        ocamlcomment/1383
          (function openingpos/1658 lexbuf/1659 : int
            (funct-body Dune__exe__Lexer.ocamlcomment src/lexer.ml(2286)<ghost>:115942-116015
              (before Dune__exe__Lexer.ocamlcomment src/lexer.ml(2287):115965-116015
                (after Dune__exe__Lexer.ocamlcomment src/lexer.ml(2287):115965-116015
                  (apply __ocaml_lex_ocamlcomment_rec/1384 openingpos/1658
                    lexbuf/1659 201)))))
        __ocaml_lex_ocamlcomment_rec/1384
          (function openingpos/1660 lexbuf/1661 __ocaml_lex_state/1662[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2288)<ghost>:116049-117045
              (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2289):116089-117045
                (let
                  (__ocaml_lex_state/1663 =
                     (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2289):116095-116152
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1662
                         lexbuf/1661)))
                  (catch
                    (if (isout 6 __ocaml_lex_state/1663) (exit 65)
                      (switch* __ocaml_lex_state/1663
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(786):116197-116203
                          0)
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116262-116341
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116264-116307
                              (apply ocamlcomment/1383
                                (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116277-116300
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1661))
                                lexbuf/1661))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116309-116339
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116309-116339
                                (apply ocamlcomment/1383 openingpos/1660
                                  lexbuf/1661)))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116400-116473
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116402-116439
                              (apply string/1385
                                (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116409-116432
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1661))
                                lexbuf/1661))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116441-116471
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116441-116471
                                (apply ocamlcomment/1383 openingpos/1660
                                  lexbuf/1661)))))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116532-116579
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116534-116545
                              (apply char/1391 lexbuf/1661))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116547-116577
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116547-116577
                                (apply ocamlcomment/1383 openingpos/1660
                                  lexbuf/1661)))))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116638-116689
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116640-116655
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1661))
                            (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116657-116687
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116657-116687
                                (apply ocamlcomment/1383 openingpos/1660
                                  lexbuf/1661)))))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(796):116748-116799
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(796):116748-116799
                            (apply error1/467 openingpos/1660
                              [0:
                               [11: "unterminated OCaml comment." 0]
                               "unterminated OCaml comment."])))
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(798):116858-116892
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(798):116858-116892
                            (apply ocamlcomment/1383 openingpos/1660
                              lexbuf/1661)))))
                   with (65)
                    (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2325):116941-117045
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2325):116941-116973
                          (apply (field_imm 0 lexbuf/1661) lexbuf/1661))
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2326):116981-117045
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2326):116981-117045
                            (apply __ocaml_lex_ocamlcomment_rec/1384
                              openingpos/1660 lexbuf/1661
                              __ocaml_lex_state/1663))))))))))
        string/1385
          (function openingpos/1664 lexbuf/1665 : int
            (funct-body Dune__exe__Lexer.string src/lexer.ml(2328)<ghost>:117058-117125
              (before Dune__exe__Lexer.string src/lexer.ml(2329):117081-117125
                (after Dune__exe__Lexer.string src/lexer.ml(2329):117081-117125
                  (apply __ocaml_lex_string_rec/1386 openingpos/1664
                    lexbuf/1665 212)))))
        __ocaml_lex_string_rec/1386
          (function openingpos/1666 lexbuf/1667 __ocaml_lex_state/1668[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2330)<ghost>:117153-117841
              (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2331):117193-117841
                (let
                  (__ocaml_lex_state/1669 =
                     (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2331):117199-117256
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1668
                         lexbuf/1667)))
                  (catch
                    (if (isout 4 __ocaml_lex_state/1669) (exit 66)
                      (switch* __ocaml_lex_state/1669
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(806):117301-117307
                          0)
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117366-117411
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117368-117383
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1667))
                            (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117385-117409
                              (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117385-117409
                                (apply string/1385 openingpos/1666
                                  lexbuf/1667)))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(813):117470-117498
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(813):117470-117498
                            (apply string/1385 openingpos/1666 lexbuf/1667)))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(815):117557-117607
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(815):117557-117607
                            (apply error1/467 openingpos/1666
                              [0:
                               [11: "unterminated OCaml string." 0]
                               "unterminated OCaml string."])))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(817):117666-117694
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(817):117666-117694
                            (apply string/1385 openingpos/1666 lexbuf/1667)))))
                   with (66)
                    (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2357):117743-117841
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2357):117743-117775
                          (apply (field_imm 0 lexbuf/1667) lexbuf/1667))
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2358):117783-117841
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2358):117783-117841
                            (apply __ocaml_lex_string_rec/1386
                              openingpos/1666 lexbuf/1667
                              __ocaml_lex_state/1669))))))))))
        record_string/1387
          (function openingpos/1670 buffer/1671 lexbuf/1672
            (funct-body Dune__exe__Lexer.record_string src/lexer.ml(2360)<ghost>:117861-117949
              (before Dune__exe__Lexer.record_string src/lexer.ml(2361):117891-117949
                (after Dune__exe__Lexer.record_string src/lexer.ml(2361):117891-117949
                  (apply __ocaml_lex_record_string_rec/1388 openingpos/1670
                    buffer/1671 lexbuf/1672 221)))))
        __ocaml_lex_record_string_rec/1388
          (function openingpos/1673 buffer/1674 lexbuf/1675
            __ocaml_lex_state/1676[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2362)<ghost>:117984-119428
              (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2363):118031-119428
                (let
                  (__ocaml_lex_state/1677 =
                     (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2363):118037-118094
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1676
                         lexbuf/1675)))
                  (catch
                    (if (isout 6 __ocaml_lex_state/1677) (exit 67)
                      (switch* __ocaml_lex_state/1677
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(825):118139-118165
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(825):118139-118165
                            (apply (field_imm 1 (global Stdlib__Buffer!))
                              buffer/1674)))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2370):118198-118573
                          (let
                            (sequence/1678 =
                               (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2374):118301-118387
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/1675 (field_int 4 lexbuf/1675)
                                   (+ (field_int 4 lexbuf/1675) 2))))
                            (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(827):118417-118573
                              (seq
                                (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(828):118492-118525
                                  (apply
                                    (field_imm 15 (global Stdlib__Buffer!))
                                    buffer/1674 sequence/1678))
                                (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(829):118533-118571
                                  (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(829):118533-118571
                                    (apply record_string/1387 openingpos/1673
                                      buffer/1674 lexbuf/1675)))))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(835):118632-118692
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(835):118632-118692
                            (apply error2/509 lexbuf/1675
                              [0:
                               [11:
                                "'\\n' is not permitted in a token alias." 0]
                               "'\\n' is not permitted in a token alias."])))
                       case int 3:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(837):118751-118806
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(837):118751-118806
                            (apply error2/509 lexbuf/1675
                              [0:
                               [11: "illegal backslash escape in string." 0]
                               "illegal backslash escape in string."])))
                       case int 4:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(839):118865-118911
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(839):118865-118911
                            (apply error2/509 lexbuf/1675
                              [0:
                               [11: "illegal newline in string." 0]
                               "illegal newline in string."])))
                       case int 5:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(841):118970-119014
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(841):118970-119014
                            (apply error1/467 openingpos/1673
                              [0:
                               [11: "unterminated string." 0]
                               "unterminated string."])))
                       case int 6:
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2402):119047-119267
                          (let
                            (c/1679 =[int]
                               (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2406):119106-119163
                                 (apply
                                   (field_imm 17 (global Stdlib__Lexing!))
                                   lexbuf/1675 (field_int 4 lexbuf/1675))))
                            (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(843):119193-119267
                              (seq
                                (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(843):119195-119219
                                  (apply
                                    (field_imm 11 (global Stdlib__Buffer!))
                                    buffer/1674 c/1679))
                                (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(844):119227-119265
                                  (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(844):119227-119265
                                    (apply record_string/1387 openingpos/1673
                                      buffer/1674 lexbuf/1675)))))))))
                   with (67)
                    (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2412):119316-119428
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2412):119316-119348
                          (apply (field_imm 0 lexbuf/1675) lexbuf/1675))
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2413):119356-119428
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2413):119356-119428
                            (apply __ocaml_lex_record_string_rec/1388
                              openingpos/1673 buffer/1674 lexbuf/1675
                              __ocaml_lex_state/1677))))))))))
        decode_string/1389
          (function buffer/1680 lexbuf/1681 : int
            (funct-body Dune__exe__Lexer.decode_string src/lexer.ml(2415)<ghost>:119448-119514
              (before Dune__exe__Lexer.decode_string src/lexer.ml(2416):119467-119514
                (after Dune__exe__Lexer.decode_string src/lexer.ml(2416):119467-119514
                  (apply __ocaml_lex_decode_string_rec/1390 buffer/1680
                    lexbuf/1681 231)))))
        __ocaml_lex_decode_string_rec/1390
          (function buffer/1682 lexbuf/1683 __ocaml_lex_state/1684[int] : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2417)<ghost>:119549-120438
              (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2418):119585-120438
                (let
                  (__ocaml_lex_state/1685 =
                     (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2418):119591-119648
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1684
                         lexbuf/1683)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/1685) (exit 68)
                      (switch* __ocaml_lex_state/1685
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(850):119693-119737
                          0)
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2425):119770-120046
                          (let
                            (c/1686 =[int]
                               (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2429):119869-119932
                                 (apply
                                   (field_imm 17 (global Stdlib__Lexing!))
                                   lexbuf/1683
                                   (+ (field_int 4 lexbuf/1683) 1))))
                            (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119962-120046
                              (seq
                                (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119964-120009
                                  (apply
                                    (field_imm 11 (global Stdlib__Buffer!))
                                    buffer/1682
                                    (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119987-120009
                                      (apply char_for_backslash/1367 c/1686))))
                                (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(853):120017-120044
                                  (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(853):120017-120044
                                    (apply decode_string/1389 buffer/1682
                                      lexbuf/1683)))))))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2436):120079-120288
                          (let
                            (c/1687 =[int]
                               (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2440):120138-120195
                                 (apply
                                   (field_imm 17 (global Stdlib__Lexing!))
                                   lexbuf/1683 (field_int 4 lexbuf/1683))))
                            (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(855):120225-120288
                              (seq
                                (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(855):120227-120251
                                  (apply
                                    (field_imm 11 (global Stdlib__Buffer!))
                                    buffer/1682 c/1687))
                                (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(856):120259-120286
                                  (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(856):120259-120286
                                    (apply decode_string/1389 buffer/1682
                                      lexbuf/1683)))))))))
                   with (68)
                    (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2446):120337-120438
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2446):120337-120369
                          (apply (field_imm 0 lexbuf/1683) lexbuf/1683))
                        (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2447):120377-120438
                          (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2447):120377-120438
                            (apply __ocaml_lex_decode_string_rec/1390
                              buffer/1682 lexbuf/1683 __ocaml_lex_state/1685))))))))))
        char/1391
          (function lexbuf/1688 : int
            (funct-body Dune__exe__Lexer.char src/lexer.ml(2449)<ghost>:120449-120492
              (before Dune__exe__Lexer.char src/lexer.ml(2450):120461-120492
                (after Dune__exe__Lexer.char src/lexer.ml(2450):120461-120492
                  (apply __ocaml_lex_char_rec/1392 lexbuf/1688 236)))))
        __ocaml_lex_char_rec/1392
          (function lexbuf/1689 __ocaml_lex_state/1690[int] : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2451)<ghost>:120518-120871
              (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2452):120547-120871
                (let
                  (__ocaml_lex_state/1691 =
                     (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2452):120553-120610
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1690
                         lexbuf/1689)))
                  (catch
                    (if (!= __ocaml_lex_state/1691 0)
                      (if (!= __ocaml_lex_state/1691 1) (exit 69)
                        (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(872):120731-120737
                          0))
                      (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(866):120654-120673
                        (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(866):120654-120673
                          (apply (field_imm 13 (global Stdlib__Lexing!))
                            lexbuf/1689))))
                   with (69)
                    (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2463):120786-120871
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2463):120786-120818
                          (apply (field_imm 0 lexbuf/1689) lexbuf/1689))
                        (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2464):120826-120871
                          (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2464):120826-120871
                            (apply __ocaml_lex_char_rec/1392 lexbuf/1689
                              __ocaml_lex_state/1691))))))))))
        finish/1393
          (function lexbuf/1692
            (funct-body Dune__exe__Lexer.finish src/lexer.ml(2466)<ghost>:120884-120929
              (before Dune__exe__Lexer.finish src/lexer.ml(2467):120896-120929
                (after Dune__exe__Lexer.finish src/lexer.ml(2467):120896-120929
                  (apply __ocaml_lex_finish_rec/1394 lexbuf/1692 253)))))
        __ocaml_lex_finish_rec/1394
          (function lexbuf/1693 __ocaml_lex_state/1694[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2468)<ghost>:120957-121424
              (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2469):120986-121424
                (let
                  (__ocaml_lex_state/1695 =
                     (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2469):120992-121049
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1694
                         lexbuf/1693)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/1695) (exit 70)
                      (switch* __ocaml_lex_state/1695
                       case int 0:
                        (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121094-121128
                          (seq
                            (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121096-121111
                              (apply (field_imm 13 (global Stdlib__Lexing!))
                                lexbuf/1693))
                            (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121113-121126
                              (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121113-121126
                                (apply finish/1393 lexbuf/1693)))))
                       case int 1:
                        (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(885):121187-121212
                          (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(885):121187-121212
                            (apply (field_imm 11 (global Stdlib__Lexing!))
                              lexbuf/1693)))
                       case int 2:
                        (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(887):121271-121288
                          (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(887):121271-121288
                            (apply finish/1393 lexbuf/1693)))))
                   with (70)
                    (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2485):121337-121424
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2485):121337-121369
                          (apply (field_imm 0 lexbuf/1693) lexbuf/1693))
                        (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2486):121377-121424
                          (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2486):121377-121424
                            (apply __ocaml_lex_finish_rec/1394 lexbuf/1693
                              __ocaml_lex_state/1695)))))))))))
      (pseudo <unknown location>
        (makeblock 0 error1/467 error2/509 int_of_string/512 savestart/538
          overwrite/544 none/815 syntaxerror/819 check_dollar/900
          check_producer/966 dollar/1038 position/1063 no_monsters/1091
          gather_oid/1095 gather_oids/1192 gather_monsters/1195
          mk_stretch/1200 stretch_of_id/1259 reserved/1354 table/1355
          directives/1361 char_for_backslash/1367 __ocaml_lex_tables/1370
          main/1371 __ocaml_lex_main_rec/1372 comment/1373
          __ocaml_lex_comment_rec/1374 ocamltype/1375
          __ocaml_lex_ocamltype_rec/1376 action/1377
          __ocaml_lex_action_rec/1378 parentheses/1379
          __ocaml_lex_parentheses_rec/1380 attribute/1381
          __ocaml_lex_attribute_rec/1382 ocamlcomment/1383
          __ocaml_lex_ocamlcomment_rec/1384 string/1385
          __ocaml_lex_string_rec/1386 record_string/1387
          __ocaml_lex_record_string_rec/1388 decode_string/1389
          __ocaml_lex_decode_string_rec/1390 char/1391
          __ocaml_lex_char_rec/1392 finish/1393 __ocaml_lex_finish_rec/1394)))))
(setglobal Dune__exe__Lexer!
  (let
    (error1/467 =
       (function pos/469
         (funct-body Dune__exe__Lexer.error1 src/lexer.mll(25)<ghost>:207-246
           (before Dune__exe__Lexer.error1 src/lexer.mll(26):215-246
             (after Dune__exe__Lexer.error1 src/lexer.mll(26):215-246
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (after Dune__exe__Lexer.error1 src/lexer.mll(26):227-246
                   (apply (field_imm 29 (global Dune__exe__Positions!))
                     pos/469)))))))
     error2/509 =
       (function lexbuf/511
         (funct-body Dune__exe__Lexer.error2 src/lexer.mll(28)<ghost>:259-307
           (before Dune__exe__Lexer.error2 src/lexer.mll(29):270-307
             (after Dune__exe__Lexer.error2 src/lexer.mll(29):270-307
               (apply (field_imm 5 (global Dune__exe__Error!))
                 (after Dune__exe__Lexer.error2 src/lexer.mll(29):282-307
                   (apply (field_imm 30 (global Dune__exe__Positions!))
                     lexbuf/511)))))))
     int_of_string/512 =
       (function pos/513 i/514 : int
         (funct-body Dune__exe__Lexer.int_of_string src/lexer.mll(37)<ghost>:609-727
           (before Dune__exe__Lexer.int_of_string src/lexer.mll(38):639-727
             (try
               (after Dune__exe__Lexer.int_of_string src/lexer.mll(39):647-662
                 (caml_int_of_string i/514))
              with exn/3240
               (let (tag/3242 =a (field_imm 0 exn/3240))
                 (if (== tag/3242 (field_imm 6 (global Stdlib!)))
                   (before Dune__exe__Lexer.int_of_string src/lexer.mll(41):687-727
                     (after Dune__exe__Lexer.int_of_string src/lexer.mll(41):687-727
                       (apply error1/467 pos/513
                         [0:
                          [11: "unreasonably large integer." 0]
                          "unreasonably large integer."])))
                   (reraise exn/3240)))))))
     savestart/538 =
       (function lexbuf/540 f/541
         (funct-body Dune__exe__Lexer.savestart src/lexer.mll(49)<ghost>:977-1090
           (before Dune__exe__Lexer.savestart src/lexer.mll(50):990-1090
             (let (startp/542 = (field_mut 10 lexbuf/540))
               (before Dune__exe__Lexer.savestart src/lexer.mll(51):1027-1090
                 (let
                   (token/543 =
                      (after Dune__exe__Lexer.savestart src/lexer.mll(51):1039-1047
                        (apply f/541 lexbuf/540)))
                   (before Dune__exe__Lexer.savestart src/lexer.mll(52):1053-1090
                     (seq (setfield_ptr 10 lexbuf/540 startp/542)
                       (before Dune__exe__Lexer.savestart src/lexer.mll(53):1085-1090
                         token/543)))))))))
     overwrite/544 =
       (function content/546 offset/547[int] c1/548[int] c2/549[int] : int
         (funct-body Dune__exe__Lexer.overwrite src/lexer.mll(60)<ghost>:1282-1376
           (before Dune__exe__Lexer.overwrite src/lexer.mll(61):1307-1376
             (seq
               (if
                 (==
                   (after Dune__exe__Lexer.overwrite src/lexer.mll(61):1315-1339
                     (bytes.get content/546 offset/547))
                   c1/548)
                 0
                 (raise
                   (after Dune__exe__Lexer.overwrite src/lexer.mll(61):1307-1345
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/lexer.mll" 61 2]))))
               (before Dune__exe__Lexer.overwrite src/lexer.mll(62):1349-1376
                 (after Dune__exe__Lexer.overwrite src/lexer.mll(62):1349-1376
                   (bytes.set content/546 offset/547 c2/549)))))))
     none/815 =
       (function param/818[int] param/817 : int
         (funct-body Dune__exe__Lexer.none src/lexer.mll(102):2619-2632
           (before Dune__exe__Lexer.none src/lexer.mll(102):2630-2632 0)))
     syntaxerror/819 =
       (function pos/821
         (funct-body Dune__exe__Lexer.syntaxerror src/lexer.mll(108)<ghost>:2765-3194
           (before Dune__exe__Lexer.syntaxerror src/lexer.mll(109):2783-3194
             (let
               (check/822 = none/815
                transform/823 =
                  (function ofs1/826[int] content/827 : int
                    (funct-body Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(111)<ghost>:2820-3089
                      (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(114):2917-3089
                        (let
                          (pos/828 =
                             (after Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(114):2927-2948
                               (apply
                                 (field_imm 15
                                   (global Dune__exe__Positions!))
                                 pos/821)))
                          (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(115):2956-3089
                            (let
                              (ofs/829 =[int]
                                 (- (field_int 3 pos/828) ofs1/826))
                              (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(116):2993-3089
                                (let (source/830 = "(raise _eRR)")
                                  (before Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(117):3028-3089
                                    (after Dune__exe__Lexer.syntaxerror.transform src/lexer.mll(117):3028-3089
                                      (apply
                                        (field_imm 11
                                          (global Stdlib__Bytes!))
                                        source/830 0 content/827 ofs/829
                                        (string.length source/830))))))))))))
                keyword/824 = [0: 0]
                oid/825 = 0)
               (before Dune__exe__Lexer.syntaxerror src/lexer.mll(123):3155-3194
                 (makeblock 0 pos/821 check/822 transform/823 keyword/824
                   oid/825))))))
     check_dollar/900 =
       (function pos/902 i/903[int] dollars/904[int] producers/905 : int
         (funct-body Dune__exe__Lexer.check_dollar src/lexer.mll(132)<ghost>:3588-4187
           (before Dune__exe__Lexer.check_dollar src/lexer.mll(134):3671-4187
             (seq
               (if
                 (not
                   (&& (<= 0 (- i/903 1))
                     (< (- i/903 1) (array.length[addr] producers/905))))
                 (before Dune__exe__Lexer.check_dollar src/lexer.mll(135):3734-3791
                   (after Dune__exe__Lexer.check_dollar src/lexer.mll(135):3734-3791
                     (apply (field_imm 5 (global Dune__exe__Error!))
                       (makeblock 0 pos/902 0)
                       [0:
                        [12:
                         '$'
                         [4:
                          0 0 0 [11: " refers to a nonexistent symbol." 0]]]
                        "$%d refers to a nonexistent symbol."]
                       i/903)))
                 0)
               (before Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-4187
                 (seq
                   (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-3968
                     (apply
                       (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3873-3968
                         (apply (field_imm 2 (global Dune__exe__Option!))
                           (function x/965 : int
                             (funct-body Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(137):3885-3968
                               (before Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(138):3899-3964
                                 (after Dune__exe__Lexer.check_dollar.(fun) src/lexer.mll(138):3899-3964
                                   (apply
                                     (field_imm 5 (global Dune__exe__Error!))
                                     (makeblock 0 pos/902 0)
                                     [0:
                                      [11:
                                       "please do not say: $"
                                       [4:
                                        0 0 0
                                        [11:
                                         ". Instead, say: "
                                         [2: 0 [12: '.' 0]]]]]
                                      "please do not say: $%d. Instead, say: %s."]
                                     i/903 x/965)))))))
                       (after Dune__exe__Lexer.check_dollar src/lexer.mll(137):3852-3869
                         (array.get[addr] producers/905 (- i/903 1)))))
                   (before Dune__exe__Lexer.check_dollar src/lexer.mll(141):4018-4187
                     (if dollars/904
                       (before Dune__exe__Lexer.check_dollar src/lexer.mll(145):4185-4187
                         0)
                       (before Dune__exe__Lexer.check_dollar src/lexer.mll(143):4077-4147
                         (after Dune__exe__Lexer.check_dollar src/lexer.mll(143):4077-4147
                           (apply (field_imm 5 (global Dune__exe__Error!))
                             (makeblock 0 pos/902 0)
                             [0:
                              [11:
                               "please do not use $"
                               [4:
                                0 0 0 [11: ". Instead, name this value." 0]]]
                              "please do not use $%d. Instead, name this value."]
                             i/903)))))))))))
     check_producer/966 =
       (function pos/968 x/969 param/1037[int] producers/970 : int
         (funct-body Dune__exe__Lexer.check_producer src/lexer.mll(150)<ghost>:4321-4476
           (before Dune__exe__Lexer.check_producer src/lexer.mll(151):4358-4476
             (if
               (not
                 (after Dune__exe__Lexer.check_producer src/lexer.mll(151):4365-4410
                   (apply (field_imm 36 (global Stdlib__List!))
                     (makeblock 0 x/969)
                     (after Dune__exe__Lexer.check_producer src/lexer.mll(151):4384-4409
                       (apply (field_imm 8 (global Stdlib__Array!))
                         producers/970)))))
               (before Dune__exe__Lexer.check_producer src/lexer.mll(152):4420-4476
                 (after Dune__exe__Lexer.check_producer src/lexer.mll(152):4420-4476
                   (apply (field_imm 5 (global Dune__exe__Error!))
                     (makeblock 0 pos/968 0)
                     [0:
                      [2: 0 [11: " refers to a nonexistent symbol." 0]]
                      "%s refers to a nonexistent symbol."]
                     x/969)))
               0))))
     dollar/1038 =
       (function pos/1040 i/1041[int]
         (funct-body Dune__exe__Lexer.dollar src/lexer.mll(158)<ghost>:4594-4982
           (before Dune__exe__Lexer.dollar src/lexer.mll(159):4614-4982
             (let
               (check/1042 =
                  (after Dune__exe__Lexer.dollar src/lexer.mll(159):4634-4652
                    (apply check_dollar/900 pos/1040 i/1041))
                transform/1043 =
                  (function ofs1/1046[int] content/1047 : int
                    (funct-body Dune__exe__Lexer.dollar.transform src/lexer.mll(160)<ghost>:4669-4864
                      (before Dune__exe__Lexer.dollar.transform src/lexer.mll(162):4759-4864
                        (let
                          (pos/1048 =
                             (after Dune__exe__Lexer.dollar.transform src/lexer.mll(162):4769-4790
                               (apply
                                 (field_imm 15
                                   (global Dune__exe__Positions!))
                                 pos/1040)))
                          (before Dune__exe__Lexer.dollar.transform src/lexer.mll(163):4798-4864
                            (let
                              (ofs/1049 =[int]
                                 (- (field_int 3 pos/1048) ofs1/1046))
                              (before Dune__exe__Lexer.dollar.transform src/lexer.mll(164):4835-4864
                                (after Dune__exe__Lexer.dollar.transform src/lexer.mll(164):4835-4864
                                  (apply overwrite/544 content/1047 ofs/1049
                                    '$' '_')))))))))
                keyword/1044 = 0
                oid/1045 =
                  (makeblock 0
                    (after Dune__exe__Lexer.dollar src/lexer.mll(168):4911-4935
                      (apply (field_imm 3 (global Stdlib__Printf!))
                        [0: [12: '_' [4: 0 0 0 0]] "_%d"] i/1041))))
               (before Dune__exe__Lexer.dollar src/lexer.mll(170):4943-4982
                 (makeblock 0 pos/1040 check/1042 transform/1043 keyword/1044
                   oid/1045))))))
     position/1063 =
       (function pos/1064 where/1065 flavor/1066 i/1067 x/1068
         (funct-body Dune__exe__Lexer.position src/lexer.mll(176)<ghost>:5140-7199
           (before Dune__exe__Lexer.position src/lexer.mll(181):5229-7199
             (let
               (check_no_parameter/1069 =
                  (function param/1071[int] : int
                    (funct-body Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(181)<ghost>:5252-5363
                      (before Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(182):5261-5363
                        (if (|| (!= i/1067 0) (!= x/1068 0))
                          (before Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(183):5298-5363
                            (after Dune__exe__Lexer.position.check_no_parameter src/lexer.mll(183):5298-5363
                              (apply (field_imm 5 (global Dune__exe__Error!))
                                (makeblock 0 pos/1064 0)
                                [0:
                                 [12:
                                  '$'
                                  [2:
                                   0
                                   [2:
                                    0 [11: " does not take a parameter." 0]]]]
                                 "$%s%s does not take a parameter."]
                                where/1065 flavor/1066)))
                          0)))))
               (before Dune__exe__Lexer.position src/lexer.mll(185):5371-7199
                 (let
                   (ofslpar/1072 =[int]
                      (+ (+ 1 (string.length where/1065)) 3))
                   (before Dune__exe__Lexer.position src/lexer.mll(190):5551-7199
                     (let
                       (where/1073 =[int]
                          (catch
                            (catch
                              (stringswitch where/1065
                               case "":
                                (before Dune__exe__Lexer.position src/lexer.mll(196):5755-5765
                                  1)
                               case "end":
                                (before Dune__exe__Lexer.position src/lexer.mll(195):5723-5731
                                  2)
                               case "s": (exit 16)
                               case "start":
                                (before Dune__exe__Lexer.position src/lexer.mll(194):5689-5699
                                  1)
                               case "symbolstart": (exit 16)
                               default: (exit 17))
                             with (17)
                              (before Dune__exe__Lexer.position src/lexer.mll(197):5789-5801
                                (raise
                                  (after Dune__exe__Lexer.position src/lexer.mll(197):5789-5801
                                    (makeblock 0 (global Assert_failure/28!)
                                      [0: "src/lexer.mll" 197 23])))))
                           with (16)
                            (before Dune__exe__Lexer.position src/lexer.mll(193):5627-5665
                              (seq
                                (after Dune__exe__Lexer.position src/lexer.mll(193):5627-5647
                                  (apply check_no_parameter/1069 0))
                                (before Dune__exe__Lexer.position src/lexer.mll(193):5649-5665
                                  0)))))
                       (before Dune__exe__Lexer.position src/lexer.mll(199):5809-7199
                         (let
                           (flavor/1074 =[int]
                              (catch
                                (stringswitch flavor/1066
                                 case "loc":
                                  (before Dune__exe__Lexer.position src/lexer.mll(203):5923-5937
                                    2)
                                 case "ofs":
                                  (before Dune__exe__Lexer.position src/lexer.mll(202):5893-5905
                                    0)
                                 case "pos":
                                  (before Dune__exe__Lexer.position src/lexer.mll(201):5861-5875
                                    1)
                                 default: (exit 15))
                               with (15)
                                (before Dune__exe__Lexer.position src/lexer.mll(204):5955-5967
                                  (raise
                                    (after Dune__exe__Lexer.position src/lexer.mll(204):5955-5967
                                      (makeblock 0
                                        (global Assert_failure/28!)
                                        [0: "src/lexer.mll" 204 17]))))))
                           (before Dune__exe__Lexer.position src/lexer.mll(206):5975-7199
                             (catch
                               (if i/1067
                                 (let (i/1077 =a (field_imm 0 i/1067))
                                   (if x/1068
                                     (before Dune__exe__Lexer.position src/lexer.mll(223):6515-6527
                                       (raise
                                         (after Dune__exe__Lexer.position src/lexer.mll(223):6515-6527
                                           (makeblock 0
                                             (global Assert_failure/28!)
                                             [0: "src/lexer.mll" 223 8]))))
                                     (before Dune__exe__Lexer.position src/lexer.mll(209):6046-6323
                                       (let
                                         (ii/1079 =[int]
                                            (after Dune__exe__Lexer.position src/lexer.mll(209):6055-6094
                                              (apply int_of_string/512
                                                (after Dune__exe__Lexer.position src/lexer.mll(209):6069-6092
                                                  (apply
                                                    (field_imm 15
                                                      (global Dune__exe__Positions!))
                                                    pos/1064))
                                                i/1077)))
                                         (before Dune__exe__Lexer.position src/lexer.mll(210):6106-6323
                                           (if
                                             (&& (== ii/1079 0)
                                               (== where/1073 2))
                                             (before Dune__exe__Lexer.position src/lexer.mll(212):6181-6193
                                               (let
                                                 (check/3255 =a none/815
                                                  subject/3254 = 0)
                                                 (exit 6 subject/3254
                                                   check/3255)))
                                             (before Dune__exe__Lexer.position src/lexer.mll(215):6282-6323
                                               (let
                                                 (check/3253 =
                                                    (after Dune__exe__Lexer.position src/lexer.mll(215):6304-6323
                                                      (apply check_dollar/900
                                                        pos/1064 ii/1079))
                                                  subject/3252 =
                                                    (makeblock 0
                                                      (after Dune__exe__Lexer.position src/lexer.mll(215):6293-6302
                                                        (apply
                                                          (field_imm 27
                                                            (global Stdlib!))
                                                          "_" i/1077))))
                                                 (exit 6 subject/3252
                                                   check/3253)))))))))
                                 (if x/1068
                                   (let (x/1078 =a (field_imm 0 x/1068))
                                     (before Dune__exe__Lexer.position src/lexer.mll(218):6383-6417
                                       (let
                                         (check/3251 =
                                            (after Dune__exe__Lexer.position src/lexer.mll(218):6397-6417
                                              (apply check_producer/966
                                                pos/1064 x/1078))
                                          subject/3250 = (makeblock 0 x/1078))
                                         (exit 6 subject/3250 check/3251))))
                                   (before Dune__exe__Lexer.position src/lexer.mll(221):6472-6482
                                     (let
                                       (check/3249 =a none/815
                                        subject/3248 = 1)
                                       (exit 6 subject/3248 check/3249)))))
                              with (6 subject/1075 check/1076)
                               (before Dune__exe__Lexer.position src/lexer.mll(225):6535-7199
                                 (let
                                   (transform/1080 =
                                      (function ofs1/1082[int] content/1083
                                        : int
                                        (funct-body Dune__exe__Lexer.position.transform src/lexer.mll(225)<ghost>:6549-7065
                                          (before Dune__exe__Lexer.position.transform src/lexer.mll(226):6568-7065
                                            (let
                                              (pos/1084 =
                                                 (after Dune__exe__Lexer.position.transform src/lexer.mll(226):6578-6599
                                                   (apply
                                                     (field_imm 15
                                                       (global Dune__exe__Positions!))
                                                     pos/1064)))
                                              (before Dune__exe__Lexer.position.transform src/lexer.mll(227):6607-7065
                                                (let
                                                  (ofs/1085 =[int]
                                                     (-
                                                       (field_int 3 pos/1084)
                                                       ofs1/1082))
                                                  (before Dune__exe__Lexer.position.transform src/lexer.mll(228):6644-7065
                                                    (seq
                                                      (after Dune__exe__Lexer.position.transform src/lexer.mll(228):6644-6673
                                                        (apply overwrite/544
                                                          content/1083
                                                          ofs/1085 '$' '_'))
                                                      (before Dune__exe__Lexer.position.transform src/lexer.mll(229):6679-7065
                                                        (let
                                                          (ofslpar/1086 =[int]
                                                             (+ ofs/1085
                                                               ofslpar/1072))
                                                          (before Dune__exe__Lexer.position.transform src/lexer.mll(230):6714-7065
                                                            (catch
                                                              (if i/1067
                                                                (if x/1068
                                                                  (exit 5)
                                                                  (let
                                                                    (i/1088 =a
                                                                    (field_imm 0
                                                                    i/1067))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(235):6891-7040
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(235):6891-6924
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    ofslpar/1086
                                                                    '(' '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(236):6934-7040
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(236):6934-6973
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    ofslpar/1086
                                                                    1) '$'
                                                                    '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(237):6983-7040
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(237):6983-7040
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    (+
                                                                    ofslpar/1086
                                                                    2)
                                                                    (string.length
                                                                    i/1088))
                                                                    ')' '_')))))))))
                                                                (if x/1068
                                                                  (let
                                                                    (x/1087 =a
                                                                    (field_imm 0
                                                                    x/1068))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(232):6760-6860
                                                                    (seq
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(232):6760-6793
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    ofslpar/1086
                                                                    '(' '_'))
                                                                    (before Dune__exe__Lexer.position.transform src/lexer.mll(233):6803-6860
                                                                    (after Dune__exe__Lexer.position.transform src/lexer.mll(233):6803-6860
                                                                    (apply
                                                                    overwrite/544
                                                                    content/1083
                                                                    (+
                                                                    (+
                                                                    ofslpar/1086
                                                                    1)
                                                                    (string.length
                                                                    x/1087))
                                                                    ')' '_'))))))
                                                                  (exit 5)))
                                                             with (5)
                                                              (before Dune__exe__Lexer.position.transform src/lexer.mll(239):7063-7065
                                                                0))))))))))))))
                                   (before Dune__exe__Lexer.position src/lexer.mll(241):7073-7199
                                     (let
                                       (keyword/1089 =
                                          (makeblock 0
                                            (makeblock 0 (*,int,int)
                                              subject/1075 where/1073
                                              flavor/1074))
                                        oid/1090 = 0)
                                       (before Dune__exe__Lexer.position src/lexer.mll(246):7160-7199
                                         (makeblock 0 pos/1064 check/1076
                                           transform/1080 keyword/1089
                                           oid/1090))))))))))))))))))
     no_monsters/1091 =
       (function monsters/1093 : int
         (funct-body Dune__exe__Lexer.no_monsters src/lexer.mll(253)<ghost>:7385-7550
           (before Dune__exe__Lexer.no_monsters src/lexer.mll(254):7398-7550
             (if monsters/1093
               (let (monster/1094 =a (field_imm 0 monsters/1093))
                 (before Dune__exe__Lexer.no_monsters src/lexer.mll(258):7463-7550
                   (after Dune__exe__Lexer.no_monsters src/lexer.mll(258):7463-7550
                     (apply (field_imm 5 (global Dune__exe__Error!))
                       (makeblock 0 (field_imm 0 monster/1094) 0)
                       [0:
                        [11:
                         "a Menhir keyword cannot be used in an OCaml header."
                         0]
                        "a Menhir keyword cannot be used in an OCaml header."]))))
               (before Dune__exe__Lexer.no_monsters src/lexer.mll(256):7434-7436
                 0)))))
     gather_oid/1095 =
       (function xs/1097 oid/1098
         (funct-body Dune__exe__Lexer.gather_oid src/lexer.mll(265)<ghost>:7724-7809
           (before Dune__exe__Lexer.gather_oid src/lexer.mll(266):7735-7809
             (if oid/1098
               (let (x/1099 =a (field_imm 0 oid/1098))
                 (before Dune__exe__Lexer.gather_oid src/lexer.mll(268):7770-7788
                   (after Dune__exe__Lexer.gather_oid src/lexer.mll(268):7770-7788
                     (apply (field_imm 1 (global Dune__exe__StringSet!))
                       x/1099 xs/1097))))
               (before Dune__exe__Lexer.gather_oid src/lexer.mll(270):7807-7809
                 xs/1097)))))
     gather_oids/1192 =
       (function oids/1194
         (funct-body Dune__exe__Lexer.gather_oids src/lexer.mll(272)<ghost>:7827-7883
           (before Dune__exe__Lexer.gather_oids src/lexer.mll(273):7836-7883
             (after Dune__exe__Lexer.gather_oids src/lexer.mll(273):7836-7883
               (apply (field_imm 16 (global Stdlib__Array!)) gather_oid/1095
                 (field_imm 0 (global Dune__exe__StringSet!)) oids/1194)))))
     gather_monsters/1195 =
       (function monsters/1197
         (funct-body Dune__exe__Lexer.gather_monsters src/lexer.mll(277)<ghost>:7974-8079
           (before Dune__exe__Lexer.gather_monsters src/lexer.mll(278):7987-8079
             (after Dune__exe__Lexer.gather_monsters src/lexer.mll(278):7987-8079
               (apply (field_imm 25 (global Stdlib__List!))
                 (function xs/1198 monster/1199
                   (funct-body Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(278):8002-8054
                     (before Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(279):8025-8050
                       (after Dune__exe__Lexer.gather_monsters.(fun) src/lexer.mll(279):8025-8050
                         (apply gather_oid/1095 xs/1198
                           (field_imm 4 monster/1199))))))
                 (field_imm 0 (global Dune__exe__StringSet!)) monsters/1197)))))
     mk_stretch/1200 =
       (function pos1/1202 pos2/1203 parenthesize/1204[int] monsters/1205
         (funct-body Dune__exe__Lexer.mk_stretch src/lexer.mll(286)<ghost>:8202-9761
           (before Dune__exe__Lexer.mk_stretch src/lexer.mll(288):8284-9761
             (let
               (raw_content/1206 =
                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(288):8311-8339
                    (apply (field_imm 7 (global Dune__exe__InputFile!))
                      (makeblock 0 pos1/1202 pos2/1203))))
               (before Dune__exe__Lexer.mk_stretch src/lexer.mll(291):8483-9761
                 (let
                   (content/1216 =
                      (if monsters/1205
                        (before Dune__exe__Lexer.mk_stretch src/lexer.mll(296):8586-8762
                          (let
                            (content/1217 =
                               (after Dune__exe__Lexer.mk_stretch src/lexer.mll(296):8608-8635
                                 (apply (field_imm 4 (global Stdlib__Bytes!))
                                   raw_content/1206)))
                            (before Dune__exe__Lexer.mk_stretch src/lexer.mll(297):8647-8762
                              (seq
                                (after Dune__exe__Lexer.mk_stretch src/lexer.mll(297):8647-8722
                                  (apply
                                    (field_imm 17 (global Stdlib__List!))
                                    (function monster/1218 : int
                                      (funct-body Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8657-8713
                                        (before Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8673-8712
                                          (after Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(297):8673-8712
                                            (apply (field_imm 2 monster/1218)
                                              (field_int 3 pos1/1202)
                                              content/1217)))))
                                    monsters/1205))
                                (before Dune__exe__Lexer.mk_stretch src/lexer.mll(298):8732-8762
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(298):8732-8762
                                    (apply
                                      (field_imm 43 (global Stdlib__Bytes!))
                                      content/1217)))))))
                        (before Dune__exe__Lexer.mk_stretch src/lexer.mll(294):8550-8561
                          raw_content/1206)))
                   (before Dune__exe__Lexer.mk_stretch src/lexer.mll(303):8971-9761
                     (let
                       (content/1219 =
                          (if parenthesize/1204
                            (before Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9365
                              (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9365
                                (apply (field_imm 27 (global Stdlib!))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9291-9343
                                    (apply
                                      (field_imm 0 (global Stdlib__String!))
                                      (-
                                        (- (field_int 3 pos1/1202)
                                          (field_int 2 pos1/1202))
                                        1)
                                      ' '))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9346-9365
                                    (apply (field_imm 27 (global Stdlib!))
                                      "("
                                      (after Dune__exe__Lexer.mk_stretch src/lexer.mll(309):9352-9365
                                        (apply
                                          (field_imm 27 (global Stdlib!))
                                          content/1216 ")")))))))
                            (before Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9439
                              (after Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9439
                                (apply (field_imm 27 (global Stdlib!))
                                  (after Dune__exe__Lexer.mk_stretch src/lexer.mll(311):9381-9429
                                    (apply
                                      (field_imm 0 (global Stdlib__String!))
                                      (- (field_int 3 pos1/1202)
                                        (field_int 2 pos1/1202))
                                      ' '))
                                  content/1216)))))
                       (before Dune__exe__Lexer.mk_stretch src/lexer.mll(313):9447-9761
                         (makeblock 0 (*,int,int,*,*,*)
                           (after Dune__exe__Lexer.mk_stretch src/lexer.mll(314):9481-9512
                             (apply
                               (field_imm 2 (global Dune__exe__InputFile!))
                               0))
                           (field_int 1 pos1/1202)
                           (- (field_int 1 pos2/1203)
                             (field_int 1 pos1/1202))
                           raw_content/1206 content/1219
                           (after Dune__exe__Lexer.mk_stretch src/lexer.mll(319):9699-9756
                             (apply (field_imm 23 (global Dune__exe__Misc!))
                               (function monster/1258
                                 (funct-body Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(319):9715-9747
                                   (before Dune__exe__Lexer.mk_stretch.(fun) src/lexer.mll(319):9731-9746
                                     (field_imm 3 monster/1258))))
                               monsters/1205))))))))))))
     stretch_of_id/1259 =
       (function id/1261
         (funct-body Dune__exe__Lexer.stretch_of_id src/lexer.mll(326)<ghost>:9966-10564
           (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(327):9992-10564
             (let
               (*match*/3268 =
                  (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(327):10015-10037
                    (apply (field_imm 2 (global Dune__exe__Positions!))
                      id/1261))
                pos/1263 =a (field_imm 1 *match*/3268)
                raw_content/1262 =a (field_imm 0 *match*/3268))
               (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(328):10043-10564
                 (let
                   (pos1/1264 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(328):10054-10085
                        (apply (field_imm 15 (global Dune__exe__Positions!))
                          pos/1263))
                    pos2/1265 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(329):10099-10128
                        (apply (field_imm 16 (global Dune__exe__Positions!))
                          pos/1263))
                    filename/1266 =
                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(330):10146-10180
                        (apply (field_imm 17 (global Dune__exe__Positions!))
                          pos/1263)))
                   (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(331):10186-10564
                     (seq
                       (if
                         (!= pos1/1264
                           (field_imm 0 (global Stdlib__Lexing!)))
                         0
                         (raise
                           (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(331):10186-10219
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/lexer.mll" 331 2]))))
                       (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(332):10223-10564
                         (let
                           (padding/1267 =[int]
                              (- (field_int 3 pos1/1264)
                                (field_int 2 pos1/1264)))
                           (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10271-10564
                             (let
                               (content/1268 =
                                  (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10285-10322
                                    (apply (field_imm 27 (global Stdlib!))
                                      (after Dune__exe__Lexer.stretch_of_id src/lexer.mll(333):10285-10308
                                        (apply
                                          (field_imm 0
                                            (global Stdlib__String!))
                                          padding/1267 ' '))
                                      raw_content/1262)))
                               (before Dune__exe__Lexer.stretch_of_id src/lexer.mll(334):10328-10564
                                 (makeblock 0 (*,int,int,*,*,*) filename/1266
                                   (field_int 1 pos1/1264)
                                   (- (field_int 1 pos2/1265)
                                     (field_int 1 pos1/1264))
                                   raw_content/1262 content/1268 0))))))))))))))
     table/1269 =
       (function words/1271
         (funct-body Dune__exe__Lexer.table src/lexer.mll(347)<ghost>:10687-10797
           (before Dune__exe__Lexer.table src/lexer.mll(348):10697-10797
             (let
               (table/1272 =
                  (after Dune__exe__Lexer.table src/lexer.mll(348):10709-10727
                    (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 149)))
               (before Dune__exe__Lexer.table src/lexer.mll(349):10733-10797
                 (seq
                   (after Dune__exe__Lexer.table src/lexer.mll(349):10733-10788
                     (apply (field_imm 17 (global Stdlib__List!))
                       (function word/1353 : int
                         (funct-body Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10743-10782
                           (before Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10756-10781
                             (after Dune__exe__Lexer.table.(fun) src/lexer.mll(349):10756-10781
                               (apply (field_imm 4 (global Stdlib__Hashtbl!))
                                 table/1272 word/1353 0)))))
                       words/1271))
                   (before Dune__exe__Lexer.table src/lexer.mll(350):10792-10797
                     table/1272)))))))
     reserved/1354 =
       (after Dune__exe__Lexer.reserved src/lexer.mll(353):10816-11533
         (apply table/1269
           [0:
            "and"
            [0:
             "as"
             [0:
              "assert"
              [0:
               "begin"
               [0:
                "class"
                [0:
                 "constraint"
                 [0:
                  "do"
                  [0:
                   "done"
                   [0:
                    "downto"
                    [0:
                     "else"
                     [0:
                      "end"
                      [0:
                       "exception"
                       [0:
                        "external"
                        [0:
                         "false"
                         [0:
                          "for"
                          [0:
                           "fun"
                           [0:
                            "function"
                            [0:
                             "functor"
                             [0:
                              "if"
                              [0:
                               "in"
                               [0:
                                "include"
                                [0:
                                 "inherit"
                                 [0:
                                  "initializer"
                                  [0:
                                   "lazy"
                                   [0:
                                    "let"
                                    [0:
                                     "match"
                                     [0:
                                      "method"
                                      [0:
                                       "module"
                                       [0:
                                        "mutable"
                                        [0:
                                         "new"
                                         [0:
                                          "object"
                                          [0:
                                           "of"
                                           [0:
                                            "open"
                                            [0:
                                             "or"
                                             [0:
                                              "parser"
                                              [0:
                                               "private"
                                               [0:
                                                "rec"
                                                [0:
                                                 "sig"
                                                 [0:
                                                  "struct"
                                                  [0:
                                                   "then"
                                                   [0:
                                                    "to"
                                                    [0:
                                                     "true"
                                                     [0:
                                                      "try"
                                                      [0:
                                                       "type"
                                                       [0:
                                                        "val"
                                                        [0:
                                                         "virtual"
                                                         [0:
                                                          "when"
                                                          [0:
                                                           "while"
                                                           [0:
                                                            "with"
                                                            [0:
                                                             "mod"
                                                             [0:
                                                              "land"
                                                              [0:
                                                               "lor"
                                                               [0:
                                                                "lxor"
                                                                [0:
                                                                 "lsl"
                                                                 [0:
                                                                  "lsr"
                                                                  [0:
                                                                   "asr" 0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))
     table/1355 =
       (function directives/1356
         (funct-body Dune__exe__Lexer.table src/lexer.mll(416)<ghost>:11661-11793
           (before Dune__exe__Lexer.table src/lexer.mll(417):11676-11793
             (let
               (table/1357 =
                  (after Dune__exe__Lexer.table src/lexer.mll(417):11688-11706
                    (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 149)))
               (before Dune__exe__Lexer.table src/lexer.mll(418):11712-11793
                 (seq
                   (after Dune__exe__Lexer.table src/lexer.mll(418):11712-11784
                     (apply (field_imm 17 (global Stdlib__List!))
                       (function param/1360 : int
                         (funct-body Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11722-11773
                           (let
                             (token/1359 =a (field_imm 1 param/1360)
                              word/1358 =a (field_imm 0 param/1360))
                             (before Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11744-11772
                               (after Dune__exe__Lexer.table.(fun) src/lexer.mll(418):11744-11772
                                 (apply
                                   (field_imm 4 (global Stdlib__Hashtbl!))
                                   table/1357 word/1358 token/1359))))))
                       directives/1356))
                   (before Dune__exe__Lexer.table src/lexer.mll(419):11788-11793
                     table/1357)))))))
     directives/1361 =
       (after Dune__exe__Lexer.directives src/lexer.mll(422):11814-12112
         (apply table/1355
           [0:
            [0: "token" 2]
            [0:
             [0: "type" 1]
             [0:
              [0: "left" 19]
              [0:
               [0: "right" 8]
               [0:
                [0: "nonassoc" 16]
                [0:
                 [0: "start" 4]
                 [0:
                  [0: "prec" 11]
                  [0:
                   [0: "public" 10]
                   [0:
                    [0: "parameter" 14]
                    [0:
                     [0: "inline" 20]
                     [0:
                      [0: "attribute" 13] [0: [0: "on_error_reduce" 15] 0]]]]]]]]]]]]))
     char_for_backslash/1367 =
       (function c/1369[int] : int
         (funct-body Dune__exe__Lexer.char_for_backslash src/lexer.mll(441):12255-12348
           (catch
             (if (>= c/1369 110)
               (if (>= c/1369 117) (exit 31)
                 (let (switcher/3269 =a (-110+ c/1369))
                   (switch* switcher/3269
                    case int 0:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(442):12275-12281
                       '\n')
                    case int 1: (exit 31)
                    case int 2: (exit 31)
                    case int 3: (exit 31)
                    case int 4:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(443):12293-12299
                       '\r')
                    case int 5: (exit 31)
                    case int 6:
                     (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(445):12329-12335
                       '\t'))))
               (if (!= c/1369 98) (exit 31)
                 (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(444):12311-12317
                   '\b')))
            with (31)
             (before Dune__exe__Lexer.char_for_backslash src/lexer.mll(446):12347-12348
               c/1369))))
     __ocaml_lex_tables/1370 =
       [0:
        "\000\000\226\255\227\255\000\000\229\255\231\255\003\000\001\000\235\255\003\000\236\255\209\000\161\001q\002A\003\243\255\244\255\245\255\246\255\247\255\248\255\004\000\001\000\251\255\031\000\253\255\019\004\029\000\230\255\254\255\227\004\181\005\163\006\006\000\241\255\240\255\232\255s\007C\b\233\255\011\000\004\000\012\000\252\255\253\255\001\000\006\000\255\255\254\255|\000\250\255\251\255\007\000\252\255\007\000\254\255 \000\"\000\255\255\253\255`\001\243\255\244\255\b\000\245\255\247\255\248\255\236\001\t\000\000\000\254\255\255\255\246\255\r\000\017\000\019\000\022\000`\000\"\000\023\000\019\000&\000\028\000 \000\026\000\026\0009\000)\000(\000.\0009\0001\000.\000\012\000z\bQ\tz\000#\001\251\255\251\255/\000B\000-\000A\0005\0006\000E\000C\000\249\255D\000C\000T\000V\000V\000F\000T\000O\000J\000\132\000\168\000\156\000\157\000\161\000\159\000\250\255\000\003\243\255\244\255\t\000\245\255\247\255\248\255\140\003\253\255\254\255\011\000\246\255\186\000\190\000\192\000\242\000>\001\206\000\224\000\189\000\237\000\225\000\229\000\223\000\233\000\254\000\238\000\237\000\243\000\254\000\246\000\244\000\015\000\136\t_\n\246\001\007\002\251\255\251\255\245\000\b\001\244\000\019\001\007\001\b\001\012\001\011\001\249\255\012\001\011\001\028\001\030\001\030\001\016\001!\001\028\001\023\001\026\001)\001\029\001\030\0019\001V\001\250\255U\011\246\255\247\255\n\000\248\255\250\255\251\255\014\000\253\255\254\255\255\255\249\255\228\002\249\255\250\255\r\000\251\255\252\255\253\255\015\000\179\001\255\255\254\255\188\003\251\255\252\255\016\000\254\255\242\001\255\255\253\255\017\000\142\004\249\255\250\255\018\000\251\255A\011\255\255\252\255\253\255\254\255\202\002\253\255I\011\255\255\254\255\236\002\000\000\214\001\183\001\146\004\184\0017\005\204\002\215\001\218\001\255\255\n\002\017\002\254\255\011\002\000\006\012\002\161\002\253\255\254\255\019\000\255\255"
        "\255\255\255\255\255\255\029\000\255\255\255\255\021\000\020\000\255\255\029\000\255\255\018\000\017\000\017\000\r\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\255\255\003\000\255\255\029\000\255\255\255\255\255\255\000\000\255\255\027\000\027\000\255\255\255\255\255\255\017\000\016\000\255\255\255\255\020\000\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\255\255\255\255\255\255\255\255\nn
~
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\b\000\b\000\006\000\007\000\b\000!\000/\0005\000@\000\129\000\193\000\b\000/\000\205\000)\000.\000\216\000\216\000\225\000\001\001\000\000\000\000\006\000\000\000\n\000\006\000\000\000\026\000!\000\249\000\021\000\020\000\017\000\016\000\023\000'\000$\000\t\0000\000;\000(\000H\000^\000\136\000-\000\158\000\200\000\211\000\024\000\025\000\005\000\022\000#\000\018\000\031\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\"\000\031\000:\000\014\000:\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\r\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\004\000\019\000F\000\015\000q\000p\000o\000J\000m\000Q\000P\0005\000e\000R\0004\000N\000S\000T\000U\000V\000O\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000W\000X\000Y\000Z\000[\000d\000\\\000]\000]\000f\0006\000g\000h\000i\000j\0009\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000k\000l\000n\000Y\000Y\000]\0007\000r\000s\000t\000u\000v\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\0008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000w\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\002\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255,\000x\000y\000z\000{\000|\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\177\000\176\000\175\000\173\000\011\000\165\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000b\000\145\000\144\000\146\000\147\000\148\000\149\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a`c
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\007\000\006\000\000\000)\000!\000.\0004\000?\000\128\000\192\000(\000*\000\204\000(\000*\000\215\000\220\000\224\000\000\001\255\255\255\255\000\000\255\255\000\000\006\000\255\255\000\000!\000\237\000\000\000\000\000\000\000\000\000\000\000\t\000\021\000\000\000-\0006\000\td\000e\0001\000f\000g\000h\000i\0001\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000j\000k\000m\000n\000o\000p\0001\000q\000r\000s\000t\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000(\000*\000w\000x\000y\000z\000{\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\137\000\138\000\139\000\142\000\011\000\144\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000a\000\143\000\143\000\145\000\146\000\147\000\148\000a\000a\000a\000a\000a\000a\000a\000a\000a\000ar\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\253\000\255\255\255\255\253\000\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\255\255\255\255\255\255\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\231\000\255\255\201\000\255\255\255\255\201\000\217\000\243\000\255\255\255\255\236\000\255\255\255\255\236\000\255\255\255\255\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\243\000\201\000\255\255\255\255\255\255}\000\201\000\201\000}\000\201\000\255\255\255\255\255\255\255\255\236\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}\000\255\255\231\000}\000}\000}\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\236\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\255\255\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000}\000\255\255}}
b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\n\000\000\000\t\001\217\001N\000X\0004\000C\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\000\000\000\000%\000\001\000\016\002\224\002i\000s



        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255<\000\000\000}`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000a\000a\000a\000a\000a\000a\000a\000a\000a\000a\000d\000n\000o\000p
        "\255\002\255\255\003\255\255\000\002\001\003\255\n\255\t\255\b\255\255\n\255\t\255\255\011\255\255\007\255\003\255\005\b\004\n\001\t\000\011\255\012\255\255\014\255\255\r\255\255\015\255\255\007\255\005\b\004\n\003\014\002\015\001\t\000\011\255\003\255\007\012\006\r\005\b\004\n\001\t\000\011\255"])
    (letrec
      (main/1371
         (function lexbuf/1395
           (funct-body Dune__exe__Lexer.main src/lexer.ml(1696)<ghost>:99279-99445
             (before Dune__exe__Lexer.main src/lexer.ml(1697):99290-99445
               (seq
                 (setfield_ptr 9 lexbuf/1395
                   (after Dune__exe__Lexer.main src/lexer.ml(1697):99315-99332
                     (caml_make_vect 4 -1)))
                 (before Dune__exe__Lexer.main src/lexer.ml(1698):99357-99445
                   (seq
                     (after Dune__exe__Lexer.main src/lexer.ml(1698):99357-99412
                       (array.set[int] (field_mut 9 lexbuf/1395) 2
                         (field_int 5 lexbuf/1395)))
                     (before Dune__exe__Lexer.main src/lexer.ml(1699):99416-99445
                       (after Dune__exe__Lexer.main src/lexer.ml(1699):99416-99445
                         (apply __ocaml_lex_main_rec/1372 lexbuf/1395 0)))))))))
        __ocaml_lex_main_rec/1372
          (function lexbuf/1396 __ocaml_lex_state/1397[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1700)<ghost>:99471-105785
              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1701):99500-105785
                (let
                  (__ocaml_lex_state/1398 =
                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1701):99506-99567
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1397
                         lexbuf/1396)))
                  (if (isout 29 __ocaml_lex_state/1398)
                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1936):105700-105785
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1936):105700-105732
                          (apply (field_imm 0 lexbuf/1396) lexbuf/1396))
                        (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1937):105740-105785
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1937):105740-105785
                            (apply __ocaml_lex_main_rec/1372 lexbuf/1396
                              __ocaml_lex_state/1398)))))
                    (switch* __ocaml_lex_state/1398
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1703):99586-99896
                        (let
                          (directive/1399 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1707):99667-99752
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1396 (+ (field_int 4 lexbuf/1396) 1)
                                 (field_int 5 lexbuf/1396))))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(490):99782-99896
                            (try
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(490):99788-99821
                                (apply
                                  (field_imm 5 (global Stdlib__Hashtbl!))
                                  directives/1361 directive/1399))
                             with exn/3271
                              (if
                                (== exn/3271 (field_imm 7 (global Stdlib!)))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(491):99846-99894
                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(491):99846-99894
                                    (apply error2/509 lexbuf/1396
                                      [0:
                                       [11:
                                        "unknown directive: "
                                        [2: 0 [12: '.' 0]]]
                                       "unknown directive: %s."]
                                      directive/1399)))
                                (reraise exn/3271))))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(493):99955-100498
                        (makeblock 2
                          (makemutable 246
                            (function param/3272
                              (let
                                (openingpos/1413 =
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(500):100373-100392
                                     (apply
                                       (field_imm 12
                                         (global Stdlib__Lexing!))
                                       lexbuf/1396)))
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(501):100404-100487
                                  (let
                                    (closingpos/1414 =
                                       (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(501):100421-100434
                                         (apply finish/1393 lexbuf/1396)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(502):100446-100487
                                      (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(502):100446-100487
                                        (apply mk_stretch/1200
                                          openingpos/1413 closingpos/1414 0
                                          0))))))))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(505):100557-100565
                        6)
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(507):100624-100633
                        26)
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(509):100692-100701
                        24)
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(511):100760-100769
                        22)
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(513):100828-100838
                        17)
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(515):100897-100907
                        7)
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(517):100966-100973
                        27)
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(519):101032-101044
                        9)
                     case int 10:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(521):101104-101112
                        5)
                     case int 11:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(523):101172-101180
                        12)
                     case int 12:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(525):101240-101249
                        3)
                     case int 13:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(527):101309-101323
                        0)
                     case int 14:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(529):101383-101397
                        25)
                     case int 15:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(531):101457-101471
                        21)
                     case int 16:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(533):101531-101538
                        18)
                     case int 17:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1804):101572-101909
                        (let
                          (id/1417 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1808):101654-101733
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1396 (field_int 4 lexbuf/1396)
                                 (field_int 5 lexbuf/1396))))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(535):101763-101909
                            (if
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(535):101768-101791
                                (apply
                                  (field_imm 8 (global Stdlib__Hashtbl!))
                                  reserved/1354 id/1417))
                              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(536):101805-101852
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(536):101805-101852
                                  (apply error2/509 lexbuf/1396
                                    [0:
                                     [11:
                                      "this is an OCaml reserved word." 0]
                                     "this is an OCaml reserved word."])))
                              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101872-101903
                                (makeblock 4
                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101876-101903
                                    (apply
                                      (field_imm 3
                                        (global Dune__exe__Positions!))
                                      (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(538):101886-101899
                                        (apply
                                          (field_imm 27
                                            (global Dune__exe__Positions!))
                                          lexbuf/1396))
                                      id/1417))))))))
                     case int 18:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1818):101943-102169
                        (let
                          (id/1418 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1822):102025-102104
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1396 (field_int 4 lexbuf/1396)
                                 (field_int 5 lexbuf/1396))))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102134-102169
                            (makeblock 0
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102140-102167
                                (apply
                                  (field_imm 3
                                    (global Dune__exe__Positions!))
                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(541):102150-102163
                                    (apply
                                      (field_imm 27
                                        (global Dune__exe__Positions!))
                                      lexbuf/1396))
                                  id/1418))))))
                     case int 19:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(546):102229-102511
                        (let
                          (buffer/1419 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(546):102244-102260
                               (apply (field_imm 0 (global Stdlib__Buffer!))
                                 16)))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(547):102270-102509
                            (let
                              (openingpos/1502 =
                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(547):102287-102308
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1396)))
                              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(548):102318-102509
                                (let
                                  (content/1503 =
                                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(548):102332-102370
                                       (apply record_string/1387
                                         openingpos/1502 buffer/1419
                                         lexbuf/1396)))
                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(549):102380-102509
                                    (let
                                      (id/1504 =
                                         (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(549):102389-102420
                                           (apply
                                             (field_imm 3
                                               (global Stdlib__Printf!))
                                             [0:
                                              [12: '"' [2: 0 [12: '"' 0]]]
                                              "\"%s\""]
                                             content/1503)))
                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(550):102430-102509
                                        (let
                                          (pos/1505 =
                                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(550):102440-102478
                                               (apply
                                                 (field_imm 19
                                                   (global Dune__exe__Positions!))
                                                 (makeblock 0 openingpos/1502
                                                   (field_mut 11 lexbuf/1396)))))
                                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(551):102488-102509
                                            (makeblock 1
                                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(551):102492-102509
                                                (apply
                                                  (field_imm 3
                                                    (global Dune__exe__Positions!))
                                                  pos/1505 id/1504))))))))))))))
                     case int 20:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102571-102603
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102573-102588
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1396))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102590-102601
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(554):102590-102601
                              (apply main/1371 lexbuf/1396)))))
                     case int 21:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(556):102663-102678
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(556):102663-102678
                          (apply main/1371 lexbuf/1396)))
                     case int 22:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102738-102793
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102740-102778
                            (apply comment/1373
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102748-102771
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1396))
                              lexbuf/1396))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102780-102791
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(558):102780-102791
                              (apply main/1371 lexbuf/1396)))))
                     case int 23:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102853-102913
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102855-102898
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102868-102891
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1396))
                              lexbuf/1396))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102900-102911
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(560):102900-102911
                              (apply main/1371 lexbuf/1396)))))
                     case int 24:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102973-103027
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102973-103027
                          (apply savestart/538 lexbuf/1396
                            (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):102992-103025
                              (apply ocamltype/1375
                                (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(562):103003-103024
                                  (apply
                                    (field_imm 12 (global Stdlib__Lexing!))
                                    lexbuf/1396)))))))
                     case int 25:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(564):103087-103388
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(564):103087-103388
                          (apply savestart/538 lexbuf/1396
                            (function lexbuf/1506
                              (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(564):103106-103386
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(565):103129-103378
                                  (let
                                    (openingpos/1507 =
                                       (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(565):103146-103167
                                         (apply
                                           (field_imm 11
                                             (global Stdlib__Lexing!))
                                           lexbuf/1506)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(566):103179-103378
                                      (let
                                        (stretchpos/1508 =
                                           (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(566):103196-103215
                                             (apply
                                               (field_imm 12
                                                 (global Stdlib__Lexing!))
                                               lexbuf/1506)))
                                        (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(567):103227-103378
                                          (let
                                            (*match*/3276 =
                                               (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(567):103254-103286
                                                 (apply action/1377 1
                                                   openingpos/1507 0
                                                   lexbuf/1506))
                                             monsters/1510 =a
                                               (field_imm 1 *match*/3276)
                                             closingpos/1509 =a
                                               (field_imm 0 *match*/3276))
                                            (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(568):103298-103378
                                              (seq
                                                (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(568):103298-103318
                                                  (apply no_monsters/1091
                                                    monsters/1510))
                                                (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(569):103328-103378
                                                  (makeblock 5
                                                    (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(569):103335-103378
                                                      (apply mk_stretch/1200
                                                        stretchpos/1508
                                                        closingpos/1509 0 0)))))))))))))))))
                     case int 26:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(572):103448-104533
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(572):103448-104533
                          (apply savestart/538 lexbuf/1396
                            (function lexbuf/1511
                              (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(572):103467-104527
                                (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(573):103490-104519
                                  (let
                                    (openingpos/1512 =
                                       (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(573):103507-103528
                                         (apply
                                           (field_imm 11
                                             (global Stdlib__Lexing!))
                                           lexbuf/1511)))
                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(574):103540-104519
                                      (let
                                        (stretchpos/1513 =
                                           (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(574):103557-103576
                                             (apply
                                               (field_imm 12
                                                 (global Stdlib__Lexing!))
                                               lexbuf/1511)))
                                        (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(575):103588-104519
                                          (let
                                            (*match*/3280 =
                                               (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(575):103615-103648
                                                 (apply action/1377 0
                                                   openingpos/1512 0
                                                   lexbuf/1511))
                                             monsters/1515 =a
                                               (field_imm 1 *match*/3280)
                                             closingpos/1514 =a
                                               (field_imm 0 *match*/3280))
                                            (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(576):103660-104519
                                              (makeblock 8
                                                (function dollars/1551[int]
                                                  producers/1552
                                                  (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(576):103667-104519
                                                    (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103775-104509
                                                      (seq
                                                        (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103775-103842
                                                          (apply
                                                            (field_imm 17
                                                              (global Stdlib__List!))
                                                            (function
                                                              monster/1553
                                                              : int
                                                              (funct-body Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103785-103833
                                                                (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103801-103832
                                                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(579):103801-103832
                                                                    (apply
                                                                    (field_imm 1
                                                                    monster/1553)
                                                                    dollars/1551
                                                                    producers/1552)))))
                                                            monsters/1515))
                                                        (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(585):104196-104509
                                                          (let
                                                            (ids/1554 =
                                                               (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104220-104286
                                                                 (apply
                                                                   (field_imm 4
                                                                    (global Dune__exe__StringSet!))
                                                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104236-104259
                                                                    (apply
                                                                    gather_oids/1192
                                                                    producers/1552))
                                                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(586):104260-104286
                                                                    (apply
                                                                    gather_monsters/1195
                                                                    monsters/1515)))))
                                                            (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(589):104359-104509
                                                              (let
                                                                (stretch/1555 =
                                                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(589):104373-104419
                                                                    (apply
                                                                    mk_stretch/1200
                                                                    stretchpos/1513
                                                                    closingpos/1514
                                                                    1
                                                                    monsters/1515)))
                                                                (before Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(591):104478-104509
                                                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec.(fun) src/lexer.mll(591):104478-104509
                                                                    (apply
                                                                    (field_imm 0
                                                                    (global Dune__exe__Action!))
                                                                    ids/1554
                                                                    stretch/1555))))))))))))))))))))))))
                     case int 27:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1901):104567-105480
                        (let
                          (percent/1592 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1905):104636-104714
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1396 (field_int 4 lexbuf/1396)
                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1905):104689-104714
                                   (array.get[int] (field_mut 9 lexbuf/1396)
                                     0))))
                           id/1593 =
                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104812-104894
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1396
                                 (+
                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104838-104863
                                     (array.get[int]
                                       (field_mut 9 lexbuf/1396) 0))
                                   2)
                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.ml(1910):104869-104894
                                   (array.get[int] (field_mut 9 lexbuf/1396)
                                     1)))))
                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(596):104924-105480
                            (let
                              (openingpos/1594 =
                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(596):104943-104964
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1396)))
                              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(597):104974-105474
                                (let
                                  (stretchpos/1595 =
                                     (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(597):104991-105010
                                       (apply
                                         (field_imm 12
                                           (global Stdlib__Lexing!))
                                         lexbuf/1396)))
                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(598):105020-105474
                                    (let
                                      (closingpos/1596 =
                                         (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(598):105037-105064
                                           (apply attribute/1381
                                             openingpos/1594 lexbuf/1396)))
                                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105074-105474
                                        (let
                                          (pos/1597 =
                                             (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105084-105134
                                               (apply
                                                 (field_imm 19
                                                   (global Dune__exe__Positions!))
                                                 (makeblock 0 openingpos/1594
                                                   (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(599):105114-105133
                                                     (apply
                                                       (field_imm 12
                                                         (global Stdlib__Lexing!))
                                                       lexbuf/1396))))))
                                          (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(600):105144-105474
                                            (let
                                              (attr/1598 =
                                                 (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(600):105155-105196
                                                   (apply mk_stretch/1200
                                                     stretchpos/1595
                                                     closingpos/1596 0 0)))
                                              (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(601):105206-105474
                                                (if
                                                  (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(601):105209-105221
                                                    (caml_string_equal
                                                      percent/1592 ""))
                                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(603):105290-105333
                                                    (makeblock 7
                                                      (makeblock 0
                                                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(603):105301-105326
                                                          (apply
                                                            (field_imm 3
                                                              (global Dune__exe__Positions!))
                                                            pos/1597 id/1593))
                                                        attr/1598)))
                                                  (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(606):105424-105474
                                                    (makeblock 6
                                                      (makeblock 0
                                                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(606):105442-105467
                                                          (apply
                                                            (field_imm 3
                                                              (global Dune__exe__Positions!))
                                                            pos/1597 id/1593))
                                                        attr/1598)))))))))))))))))
                     case int 28:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(609):105540-105547
                        23)
                     case int 29:
                      (before Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(611):105607-105651
                        (after Dune__exe__Lexer.__ocaml_lex_main_rec src/lexer.mll(611):105607-105651
                          (apply error2/509 lexbuf/1396
                            [0:
                             [11: "unexpected character(s)." 0]
                             "unexpected character(s)."])))))))))
        comment/1373
          (function openingpos/1599 lexbuf/1600 : int
            (funct-body Dune__exe__Lexer.comment src/lexer.ml(1939)<ghost>:105799-105866
              (before Dune__exe__Lexer.comment src/lexer.ml(1940):105822-105866
                (after Dune__exe__Lexer.comment src/lexer.ml(1940):105822-105866
                  (apply __ocaml_lex_comment_rec/1374 openingpos/1599
                    lexbuf/1600 42)))))
        __ocaml_lex_comment_rec/1374
          (function openingpos/1601 lexbuf/1602 __ocaml_lex_state/1603[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1941)<ghost>:105895-106494
              (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1942):105935-106494
                (let
                  (__ocaml_lex_state/1604 =
                     (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1942):105941-105998
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1603
                         lexbuf/1602)))
                  (if (isout 3 __ocaml_lex_state/1604)
                    (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1963):106395-106494
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1963):106395-106427
                          (apply (field_imm 0 lexbuf/1602) lexbuf/1602))
                        (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1964):106435-106494
                          (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.ml(1964):106435-106494
                            (apply __ocaml_lex_comment_rec/1374
                              openingpos/1601 lexbuf/1602
                              __ocaml_lex_state/1604)))))
                    (switch* __ocaml_lex_state/1604
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106043-106089
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106045-106060
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1602))
                          (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106062-106087
                            (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(619):106062-106087
                              (apply comment/1373 openingpos/1601
                                lexbuf/1602)))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(621):106148-106154
                        0)
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(623):106213-106258
                        (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(623):106213-106258
                          (apply error1/467 openingpos/1601
                            [0:
                             [11: "unterminated comment." 0]
                             "unterminated comment."])))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(625):106317-106346
                        (after Dune__exe__Lexer.__ocaml_lex_comment_rec src/lexer.mll(625):106317-106346
                          (apply comment/1373 openingpos/1601 lexbuf/1602)))))))))
        ocamltype/1375
          (function openingpos/1605 lexbuf/1606
            (funct-body Dune__exe__Lexer.ocamltype src/lexer.ml(1966)<ghost>:106510-106579
              (before Dune__exe__Lexer.ocamltype src/lexer.ml(1967):106533-106579
                (after Dune__exe__Lexer.ocamltype src/lexer.ml(1967):106533-106579
                  (apply __ocaml_lex_ocamltype_rec/1376 openingpos/1605
                    lexbuf/1606 49)))))
        __ocaml_lex_ocamltype_rec/1376
          (function openingpos/1607 lexbuf/1608 __ocaml_lex_state/1609[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1968)<ghost>:106610-107525
              (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1969):106650-107525
                (let
                  (__ocaml_lex_state/1610 =
                     (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(1969):106656-106713
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1609
                         lexbuf/1608)))
                  (if (isout 5 __ocaml_lex_state/1610)
                    (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2000):107424-107525
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2000):107424-107456
                          (apply (field_imm 0 lexbuf/1608) lexbuf/1608))
                        (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2001):107464-107525
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.ml(2001):107464-107525
                            (apply __ocaml_lex_ocamltype_rec/1376
                              openingpos/1607 lexbuf/1608
                              __ocaml_lex_state/1610)))))
                    (switch* __ocaml_lex_state/1610
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(636):106758-106789
                        (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(636):106758-106789
                          (apply ocamltype/1375 openingpos/1607 lexbuf/1608)))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106848-106936
                        (makeblock 3
                          (makeblock 0
                            (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106878-106933
                              (apply mk_stretch/1200 openingpos/1607
                                (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(638):106901-106924
                                  (apply
                                    (field_imm 11 (global Stdlib__Lexing!))
                                    lexbuf/1608))
                                1 0)))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):106995-107071
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):106997-107040
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107010-107033
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1608))
                              lexbuf/1608))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107042-107069
                            (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(640):107042-107069
                              (apply ocamltype/1375 openingpos/1607
                                lexbuf/1608)))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107130-107178
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107132-107147
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1608))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107149-107176
                            (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(642):107149-107176
                              (apply ocamltype/1375 openingpos/1607
                                lexbuf/1608)))))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(644):107237-107285
                        (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(644):107237-107285
                          (apply error1/467 openingpos/1607
                            [0:
                             [11: "unterminated OCaml type." 0]
                             "unterminated OCaml type."])))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(646):107344-107375
                        (after Dune__exe__Lexer.__ocaml_lex_ocamltype_rec src/lexer.mll(646):107344-107375
                          (apply ocamltype/1375 openingpos/1607 lexbuf/1608)))))))))
        action/1377
          (function percent/1611[int] openingpos/1612 monsters/1613
            lexbuf/1614
            (funct-body Dune__exe__Lexer.action src/lexer.ml(2003)<ghost>:107538-107682
              (before Dune__exe__Lexer.action src/lexer.ml(2004):107577-107682
                (seq
                  (setfield_ptr 9 lexbuf/1614
                    (after Dune__exe__Lexer.action src/lexer.ml(2004):107602-107620
                      (caml_make_vect 16 -1)))
                  (before Dune__exe__Lexer.action src/lexer.ml(2004):107622-107682
                    (after Dune__exe__Lexer.action src/lexer.ml(2004):107622-107682
                      (apply __ocaml_lex_action_rec/1378 percent/1611
                        openingpos/1612 monsters/1613 lexbuf/1614 60)))))))
        __ocaml_lex_action_rec/1378
          (function percent/1615[int] openingpos/1616 monsters/1617
            lexbuf/1618 __ocaml_lex_state/1619[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2005)<ghost>:107710-111176
              (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2006):107767-111176
                (let
                  (__ocaml_lex_state/1620 =
                     (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2006):107773-107834
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1619
                         lexbuf/1618)))
                  (if (isout 12 __ocaml_lex_state/1620)
                    (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2120):111061-111176
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2120):111061-111093
                          (apply (field_imm 0 lexbuf/1618) lexbuf/1618))
                        (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2121):111101-111176
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2121):111101-111176
                            (apply __ocaml_lex_action_rec/1378 percent/1615
                              openingpos/1616 monsters/1617 lexbuf/1618
                              __ocaml_lex_state/1620)))))
                    (switch* __ocaml_lex_state/1620
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107879-108004
                        (let
                          (*match*/3284 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107899-107951
                               (apply action/1377 0
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(657):107912-107935
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1618))
                                 monsters/1617 lexbuf/1618))
                           monsters/1621 =a (field_imm 1 *match*/3284))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(658):107961-108002
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(658):107961-108002
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1621 lexbuf/1618)))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2014):108037-108518
                        (let
                          (delimiter/1622 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2018):108115-108194
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1618 (field_int 4 lexbuf/1618)
                                 (field_int 5 lexbuf/1618))))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(660):108224-108518
                            (catch
                              (catch
                                (if percent/1615
                                  (stringswitch delimiter/1622
                                   case "%}": (exit 45)
                                   default: (exit 46))
                                  (stringswitch delimiter/1622
                                   case "}": (exit 45)
                                   default: (exit 46)))
                               with (46)
                                (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(667):108467-108512
                                  (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(667):108467-108512
                                    (apply error1/467 openingpos/1616
                                      [0:
                                       [11: "unbalanced opening brace." 0]
                                       "unbalanced opening brace."]))))
                             with (45)
                              (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(664):108377-108408
                                (makeblock 0
                                  (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(664):108377-108398
                                    (apply
                                      (field_imm 11 (global Stdlib__Lexing!))
                                      lexbuf/1618))
                                  monsters/1617))))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108577-108701
                        (let
                          (*match*/3289 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108597-108648
                               (apply parentheses/1379
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(670):108609-108632
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1618))
                                 monsters/1617 lexbuf/1618))
                           monsters/1623 =a (field_imm 1 *match*/3289))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(671):108658-108699
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(671):108658-108699
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1623 lexbuf/1618)))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2038):108734-109083
                        (let
                          (i/1624 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2042):108807-108892
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1618 (+ (field_int 4 lexbuf/1618) 1)
                                 (field_int 5 lexbuf/1618))))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108922-109083
                            (let
                              (i/1625 =[int]
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108932-108971
                                   (apply int_of_string/512
                                     (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(673):108946-108969
                                       (apply
                                         (field_imm 11
                                           (global Stdlib__Lexing!))
                                         lexbuf/1618))
                                     i/1624)))
                              (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):108981-109081
                                (let
                                  (monster/1626 =
                                     (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):108995-109017
                                       (apply dollar/1038
                                         (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(674):109002-109015
                                           (apply
                                             (field_imm 27
                                               (global Dune__exe__Positions!))
                                             lexbuf/1618))
                                         i/1625)))
                                  (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(675):109027-109081
                                    (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(675):109027-109081
                                      (apply action/1377 percent/1615
                                        openingpos/1616
                                        (makeblock 0 monster/1626
                                          monsters/1617)
                                        lexbuf/1618)))))))))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2050):109116-109960
                        (let
                          (i/1627 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109189-109269
                               (apply (field_imm 16 (global Stdlib__Lexing!))
                                 lexbuf/1618
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109218-109243
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     3))
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2054):109244-109269
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     2))))
                           x/1628 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109351-109431
                               (apply (field_imm 16 (global Stdlib__Lexing!))
                                 lexbuf/1618
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109380-109405
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     7))
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2059):109406-109431
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     6))))
                           where/1629 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109530-109606
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1618
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109555-109580
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     5))
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2064):109581-109606
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     4))))
                           flavor/1630 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109733-109809
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1618
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109758-109783
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     1))
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.ml(2069):109784-109809
                                   (array.get[int] (field_mut 9 lexbuf/1618)
                                     0)))))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109839-109960
                            (let
                              (monster/1631 =
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109855-109894
                                   (apply position/1063
                                     (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(677):109864-109877
                                       (apply
                                         (field_imm 27
                                           (global Dune__exe__Positions!))
                                         lexbuf/1618))
                                     where/1629 flavor/1630 i/1627 x/1628)))
                              (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(678):109904-109958
                                (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(678):109904-109958
                                  (apply action/1377 percent/1615
                                    openingpos/1616
                                    (makeblock 0 monster/1631 monsters/1617)
                                    lexbuf/1618)))))))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(680):110019-110077
                        (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(680):110019-110077
                          (apply error2/509 lexbuf/1618
                            [0:
                             [11: "$previouserror is no longer supported." 0]
                             "$previouserror is no longer supported."])))
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110136-110243
                        (let
                          (monster/1632 =
                             (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110152-110177
                               (apply syntaxerror/819
                                 (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(682):110164-110177
                                   (apply
                                     (field_imm 27
                                       (global Dune__exe__Positions!))
                                     lexbuf/1618)))))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(683):110187-110241
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(683):110187-110241
                              (apply action/1377 percent/1615 openingpos/1616
                                (makeblock 0 monster/1632 monsters/1617)
                                lexbuf/1618)))))
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110302-110392
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110304-110341
                            (apply string/1385
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(685):110311-110334
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1618))
                              lexbuf/1618))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(686):110349-110390
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(686):110349-110390
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1617 lexbuf/1618)))))
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(688):110451-110515
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(688):110453-110464
                            (apply char/1391 lexbuf/1618))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(689):110472-110513
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(689):110472-110513
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1617 lexbuf/1618)))))
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110574-110670
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110576-110619
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(691):110589-110612
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1618))
                              lexbuf/1618))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(692):110627-110668
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(692):110627-110668
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1617 lexbuf/1618)))))
                     case int 10:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(694):110730-110798
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(694):110732-110747
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1618))
                          (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(695):110755-110796
                            (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(695):110755-110796
                              (apply action/1377 percent/1615 openingpos/1616
                                monsters/1617 lexbuf/1618)))))
                     case int 11:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(698):110858-110907
                        (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(698):110858-110907
                          (apply error1/467 openingpos/1616
                            [0:
                             [11: "unbalanced opening brace." 0]
                             "unbalanced opening brace."])))
                     case int 12:
                      (before Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(700):110967-111012
                        (after Dune__exe__Lexer.__ocaml_lex_action_rec src/lexer.mll(700):110967-111012
                          (apply action/1377 percent/1615 openingpos/1616
                            monsters/1617 lexbuf/1618)))))))))
        parentheses/1379
          (function openingpos/1633 monsters/1634 lexbuf/1635
            (funct-body Dune__exe__Lexer.parentheses src/lexer.ml(2123)<ghost>:111194-111328
              (before Dune__exe__Lexer.parentheses src/lexer.ml(2124):111225-111328
                (seq
                  (setfield_ptr 9 lexbuf/1635
                    (after Dune__exe__Lexer.parentheses src/lexer.ml(2124):111250-111268
                      (caml_make_vect 16 -1)))
                  (before Dune__exe__Lexer.parentheses src/lexer.ml(2124):111270-111328
                    (after Dune__exe__Lexer.parentheses src/lexer.ml(2124):111270-111328
                      (apply __ocaml_lex_parentheses_rec/1380 openingpos/1633
                        monsters/1634 lexbuf/1635 125)))))))
        __ocaml_lex_parentheses_rec/1380
          (function openingpos/1636 monsters/1637 lexbuf/1638
            __ocaml_lex_state/1639[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2125)<ghost>:111361-114348
              (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2126):111410-114348
                (let
                  (__ocaml_lex_state/1640 =
                     (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2126):111416-111477
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1639
                         lexbuf/1638)))
                  (if (isout 12 __ocaml_lex_state/1640)
                    (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2223):114236-114348
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2223):114236-114268
                          (apply (field_imm 0 lexbuf/1638) lexbuf/1638))
                        (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2224):114276-114348
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2224):114276-114348
                            (apply __ocaml_lex_parentheses_rec/1380
                              openingpos/1636 monsters/1637 lexbuf/1638
                              __ocaml_lex_state/1640)))))
                    (switch* __ocaml_lex_state/1640
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111522-111643
                        (let
                          (*match*/3294 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111542-111593
                               (apply parentheses/1379
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(709):111554-111577
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1638))
                                 monsters/1637 lexbuf/1638))
                           monsters/1641 =a (field_imm 1 *match*/3294))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(710):111603-111641
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(710):111603-111641
                              (apply parentheses/1379 openingpos/1636
                                monsters/1641 lexbuf/1638)))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(712):111702-111737
                        (makeblock 0
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(712):111704-111725
                            (apply (field_imm 11 (global Stdlib__Lexing!))
                              lexbuf/1638))
                          monsters/1637))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111796-111918
                        (let
                          (*match*/3299 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111816-111868
                               (apply action/1377 0
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(714):111829-111852
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1638))
                                 monsters/1637 lexbuf/1638))
                           monsters/1642 =a (field_imm 1 *match*/3299))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(715):111878-111916
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(715):111878-111916
                              (apply parentheses/1379 openingpos/1636
                                monsters/1642 lexbuf/1638)))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2145):111951-112297
                        (let
                          (i/1643 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2149):112024-112109
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1638 (+ (field_int 4 lexbuf/1638) 1)
                                 (field_int 5 lexbuf/1638))))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112139-112297
                            (let
                              (i/1644 =[int]
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112149-112188
                                   (apply int_of_string/512
                                     (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(717):112163-112186
                                       (apply
                                         (field_imm 11
                                           (global Stdlib__Lexing!))
                                         lexbuf/1638))
                                     i/1643)))
                              (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112198-112295
                                (let
                                  (monster/1645 =
                                     (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112212-112234
                                       (apply dollar/1038
                                         (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(718):112219-112232
                                           (apply
                                             (field_imm 27
                                               (global Dune__exe__Positions!))
                                             lexbuf/1638))
                                         i/1644)))
                                  (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(719):112244-112295
                                    (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(719):112244-112295
                                      (apply parentheses/1379 openingpos/1636
                                        (makeblock 0 monster/1645
                                          monsters/1637)
                                        lexbuf/1638)))))))))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2157):112330-113171
                        (let
                          (i/1646 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112403-112483
                               (apply (field_imm 16 (global Stdlib__Lexing!))
                                 lexbuf/1638
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112432-112457
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     3))
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2161):112458-112483
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     2))))
                           x/1647 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112565-112645
                               (apply (field_imm 16 (global Stdlib__Lexing!))
                                 lexbuf/1638
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112594-112619
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     7))
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2166):112620-112645
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     6))))
                           where/1648 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112744-112820
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1638
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112769-112794
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     5))
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2171):112795-112820
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     4))))
                           flavor/1649 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112947-113023
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1638
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112972-112997
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     1))
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.ml(2176):112998-113023
                                   (array.get[int] (field_mut 9 lexbuf/1638)
                                     0)))))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113053-113171
                            (let
                              (monster/1650 =
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113069-113108
                                   (apply position/1063
                                     (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(721):113078-113091
                                       (apply
                                         (field_imm 27
                                           (global Dune__exe__Positions!))
                                         lexbuf/1638))
                                     where/1648 flavor/1649 i/1646 x/1647)))
                              (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(722):113118-113169
                                (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(722):113118-113169
                                  (apply parentheses/1379 openingpos/1636
                                    (makeblock 0 monster/1650 monsters/1637)
                                    lexbuf/1638)))))))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(724):113230-113288
                        (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(724):113230-113288
                          (apply error2/509 lexbuf/1638
                            [0:
                             [11: "$previouserror is no longer supported." 0]
                             "$previouserror is no longer supported."])))
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113347-113451
                        (let
                          (monster/1651 =
                             (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113363-113388
                               (apply syntaxerror/819
                                 (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(726):113375-113388
                                   (apply
                                     (field_imm 27
                                       (global Dune__exe__Positions!))
                                     lexbuf/1638)))))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(727):113398-113449
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(727):113398-113449
                              (apply parentheses/1379 openingpos/1636
                                (makeblock 0 monster/1651 monsters/1637)
                                lexbuf/1638)))))
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113510-113591
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113512-113549
                            (apply string/1385
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113519-113542
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1638))
                              lexbuf/1638))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113551-113589
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(729):113551-113589
                              (apply parentheses/1379 openingpos/1636
                                monsters/1637 lexbuf/1638)))))
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113650-113705
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113652-113663
                            (apply char/1391 lexbuf/1638))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113665-113703
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(731):113665-113703
                              (apply parentheses/1379 openingpos/1636
                                monsters/1637 lexbuf/1638)))))
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113764-113851
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113766-113809
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113779-113802
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1638))
                              lexbuf/1638))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113811-113849
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(733):113811-113849
                              (apply parentheses/1379 openingpos/1636
                                monsters/1637 lexbuf/1638)))))
                     case int 10:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113911-113970
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113913-113928
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1638))
                          (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113930-113968
                            (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(735):113930-113968
                              (apply parentheses/1379 openingpos/1636
                                monsters/1637 lexbuf/1638)))))
                     case int 11:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(738):114030-114085
                        (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(738):114030-114085
                          (apply error1/467 openingpos/1636
                            [0:
                             [11: "unbalanced opening parenthesis." 0]
                             "unbalanced opening parenthesis."])))
                     case int 12:
                      (before Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(740):114145-114187
                        (after Dune__exe__Lexer.__ocaml_lex_parentheses_rec src/lexer.mll(740):114145-114187
                          (apply parentheses/1379 openingpos/1636
                            monsters/1637 lexbuf/1638)))))))))
        attribute/1381
          (function openingpos/1652 lexbuf/1653
            (funct-body Dune__exe__Lexer.attribute src/lexer.ml(2226)<ghost>:114364-114434
              (before Dune__exe__Lexer.attribute src/lexer.ml(2227):114387-114434
                (after Dune__exe__Lexer.attribute src/lexer.ml(2227):114387-114434
                  (apply __ocaml_lex_attribute_rec/1382 openingpos/1652
                    lexbuf/1653 189)))))
        __ocaml_lex_attribute_rec/1382
          (function openingpos/1654 lexbuf/1655 __ocaml_lex_state/1656[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2228)<ghost>:114465-115923
              (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2229):114505-115923
                (let
                  (__ocaml_lex_state/1657 =
                     (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2229):114511-114568
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1656
                         lexbuf/1655)))
                  (if (isout 9 __ocaml_lex_state/1657)
                    (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2283):115822-115923
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2283):115822-115854
                          (apply (field_imm 0 lexbuf/1655) lexbuf/1655))
                        (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2284):115862-115923
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.ml(2284):115862-115923
                            (apply __ocaml_lex_attribute_rec/1382
                              openingpos/1654 lexbuf/1655
                              __ocaml_lex_state/1657)))))
                    (switch* __ocaml_lex_state/1657
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114613-114702
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114623-114663
                            (apply attribute/1381
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(751):114633-114656
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1655))
                              lexbuf/1655))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(752):114673-114700
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(752):114673-114700
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(754):114761-114786
                        (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(754):114761-114786
                          (apply (field_imm 11 (global Stdlib__Lexing!))
                            lexbuf/1655)))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114845-114943
                        (let
                          (*match*/3304 =
                             (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114858-114904
                               (apply action/1377 0
                                 (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(756):114871-114894
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1655))
                                 0 lexbuf/1655)))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(757):114914-114941
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(757):114914-114941
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115002-115099
                        (let
                          (*match*/3310 =
                             (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115015-115060
                               (apply parentheses/1379
                                 (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(759):115027-115050
                                   (apply
                                     (field_imm 11 (global Stdlib__Lexing!))
                                     lexbuf/1655))
                                 0 lexbuf/1655)))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(760):115070-115097
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(760):115070-115097
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115158-115228
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115160-115197
                            (apply string/1385
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115167-115190
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1655))
                              lexbuf/1655))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115199-115226
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(762):115199-115226
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115287-115331
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115289-115300
                            (apply char/1391 lexbuf/1655))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115302-115329
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(764):115302-115329
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115390-115466
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115392-115435
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115405-115428
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1655))
                              lexbuf/1655))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115437-115464
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(766):115437-115464
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 7:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115525-115573
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115527-115542
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1655))
                          (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115544-115571
                            (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(768):115544-115571
                              (apply attribute/1381 openingpos/1654
                                lexbuf/1655)))))
                     case int 8:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(772):115632-115683
                        (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(772):115632-115683
                          (apply error1/467 openingpos/1654
                            [0:
                             [11: "unbalanced opening bracket." 0]
                             "unbalanced opening bracket."])))
                     case int 9:
                      (before Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(774):115742-115773
                        (after Dune__exe__Lexer.__ocaml_lex_attribute_rec src/lexer.mll(774):115742-115773
                          (apply attribute/1381 openingpos/1654 lexbuf/1655)))))))))
        ocamlcomment/1383
          (function openingpos/1658 lexbuf/1659 : int
            (funct-body Dune__exe__Lexer.ocamlcomment src/lexer.ml(2286)<ghost>:115942-116015
              (before Dune__exe__Lexer.ocamlcomment src/lexer.ml(2287):115965-116015
                (after Dune__exe__Lexer.ocamlcomment src/lexer.ml(2287):115965-116015
                  (apply __ocaml_lex_ocamlcomment_rec/1384 openingpos/1658
                    lexbuf/1659 201)))))
        __ocaml_lex_ocamlcomment_rec/1384
          (function openingpos/1660 lexbuf/1661 __ocaml_lex_state/1662[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2288)<ghost>:116049-117045
              (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2289):116089-117045
                (let
                  (__ocaml_lex_state/1663 =
                     (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2289):116095-116152
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1662
                         lexbuf/1661)))
                  (if (isout 6 __ocaml_lex_state/1663)
                    (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2325):116941-117045
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2325):116941-116973
                          (apply (field_imm 0 lexbuf/1661) lexbuf/1661))
                        (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2326):116981-117045
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.ml(2326):116981-117045
                            (apply __ocaml_lex_ocamlcomment_rec/1384
                              openingpos/1660 lexbuf/1661
                              __ocaml_lex_state/1663)))))
                    (switch* __ocaml_lex_state/1663
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(786):116197-116203
                        0)
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116262-116341
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116264-116307
                            (apply ocamlcomment/1383
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116277-116300
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1661))
                              lexbuf/1661))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116309-116339
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(788):116309-116339
                              (apply ocamlcomment/1383 openingpos/1660
                                lexbuf/1661)))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116400-116473
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116402-116439
                            (apply string/1385
                              (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116409-116432
                                (apply
                                  (field_imm 11 (global Stdlib__Lexing!))
                                  lexbuf/1661))
                              lexbuf/1661))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116441-116471
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(790):116441-116471
                              (apply ocamlcomment/1383 openingpos/1660
                                lexbuf/1661)))))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116532-116579
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116534-116545
                            (apply char/1391 lexbuf/1661))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116547-116577
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(792):116547-116577
                              (apply ocamlcomment/1383 openingpos/1660
                                lexbuf/1661)))))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116638-116689
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116640-116655
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1661))
                          (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116657-116687
                            (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(794):116657-116687
                              (apply ocamlcomment/1383 openingpos/1660
                                lexbuf/1661)))))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(796):116748-116799
                        (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(796):116748-116799
                          (apply error1/467 openingpos/1660
                            [0:
                             [11: "unterminated OCaml comment." 0]
                             "unterminated OCaml comment."])))
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(798):116858-116892
                        (after Dune__exe__Lexer.__ocaml_lex_ocamlcomment_rec src/lexer.mll(798):116858-116892
                          (apply ocamlcomment/1383 openingpos/1660
                            lexbuf/1661)))))))))
        string/1385
          (function openingpos/1664 lexbuf/1665 : int
            (funct-body Dune__exe__Lexer.string src/lexer.ml(2328)<ghost>:117058-117125
              (before Dune__exe__Lexer.string src/lexer.ml(2329):117081-117125
                (after Dune__exe__Lexer.string src/lexer.ml(2329):117081-117125
                  (apply __ocaml_lex_string_rec/1386 openingpos/1664
                    lexbuf/1665 212)))))
        __ocaml_lex_string_rec/1386
          (function openingpos/1666 lexbuf/1667 __ocaml_lex_state/1668[int]
            : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2330)<ghost>:117153-117841
              (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2331):117193-117841
                (let
                  (__ocaml_lex_state/1669 =
                     (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2331):117199-117256
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1668
                         lexbuf/1667)))
                  (if (isout 4 __ocaml_lex_state/1669)
                    (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2357):117743-117841
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2357):117743-117775
                          (apply (field_imm 0 lexbuf/1667) lexbuf/1667))
                        (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2358):117783-117841
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.ml(2358):117783-117841
                            (apply __ocaml_lex_string_rec/1386
                              openingpos/1666 lexbuf/1667
                              __ocaml_lex_state/1669)))))
                    (switch* __ocaml_lex_state/1669
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(806):117301-117307
                        0)
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117366-117411
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117368-117383
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1667))
                          (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117385-117409
                            (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(809):117385-117409
                              (apply string/1385 openingpos/1666 lexbuf/1667)))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(813):117470-117498
                        (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(813):117470-117498
                          (apply string/1385 openingpos/1666 lexbuf/1667)))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(815):117557-117607
                        (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(815):117557-117607
                          (apply error1/467 openingpos/1666
                            [0:
                             [11: "unterminated OCaml string." 0]
                             "unterminated OCaml string."])))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(817):117666-117694
                        (after Dune__exe__Lexer.__ocaml_lex_string_rec src/lexer.mll(817):117666-117694
                          (apply string/1385 openingpos/1666 lexbuf/1667)))))))))
        record_string/1387
          (function openingpos/1670 buffer/1671 lexbuf/1672
            (funct-body Dune__exe__Lexer.record_string src/lexer.ml(2360)<ghost>:117861-117949
              (before Dune__exe__Lexer.record_string src/lexer.ml(2361):117891-117949
                (after Dune__exe__Lexer.record_string src/lexer.ml(2361):117891-117949
                  (apply __ocaml_lex_record_string_rec/1388 openingpos/1670
                    buffer/1671 lexbuf/1672 221)))))
        __ocaml_lex_record_string_rec/1388
          (function openingpos/1673 buffer/1674 lexbuf/1675
            __ocaml_lex_state/1676[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2362)<ghost>:117984-119428
              (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2363):118031-119428
                (let
                  (__ocaml_lex_state/1677 =
                     (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2363):118037-118094
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1676
                         lexbuf/1675)))
                  (if (isout 6 __ocaml_lex_state/1677)
                    (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2412):119316-119428
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2412):119316-119348
                          (apply (field_imm 0 lexbuf/1675) lexbuf/1675))
                        (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2413):119356-119428
                          (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2413):119356-119428
                            (apply __ocaml_lex_record_string_rec/1388
                              openingpos/1673 buffer/1674 lexbuf/1675
                              __ocaml_lex_state/1677)))))
                    (switch* __ocaml_lex_state/1677
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(825):118139-118165
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(825):118139-118165
                          (apply (field_imm 1 (global Stdlib__Buffer!))
                            buffer/1674)))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2370):118198-118573
                        (let
                          (sequence/1678 =
                             (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2374):118301-118387
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/1675 (field_int 4 lexbuf/1675)
                                 (+ (field_int 4 lexbuf/1675) 2))))
                          (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(827):118417-118573
                            (seq
                              (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(828):118492-118525
                                (apply
                                  (field_imm 15 (global Stdlib__Buffer!))
                                  buffer/1674 sequence/1678))
                              (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(829):118533-118571
                                (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(829):118533-118571
                                  (apply record_string/1387 openingpos/1673
                                    buffer/1674 lexbuf/1675)))))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(835):118632-118692
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(835):118632-118692
                          (apply error2/509 lexbuf/1675
                            [0:
                             [11:
                              "'\\n' is not permitted in a token alias." 0]
                             "'\\n' is not permitted in a token alias."])))
                     case int 3:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(837):118751-118806
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(837):118751-118806
                          (apply error2/509 lexbuf/1675
                            [0:
                             [11: "illegal backslash escape in string." 0]
                             "illegal backslash escape in string."])))
                     case int 4:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(839):118865-118911
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(839):118865-118911
                          (apply error2/509 lexbuf/1675
                            [0:
                             [11: "illegal newline in string." 0]
                             "illegal newline in string."])))
                     case int 5:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(841):118970-119014
                        (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(841):118970-119014
                          (apply error1/467 openingpos/1673
                            [0:
                             [11: "unterminated string." 0]
                             "unterminated string."])))
                     case int 6:
                      (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2402):119047-119267
                        (let
                          (c/1679 =[int]
                             (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.ml(2406):119106-119163
                               (apply (field_imm 17 (global Stdlib__Lexing!))
                                 lexbuf/1675 (field_int 4 lexbuf/1675))))
                          (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(843):119193-119267
                            (seq
                              (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(843):119195-119219
                                (apply
                                  (field_imm 11 (global Stdlib__Buffer!))
                                  buffer/1674 c/1679))
                              (before Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(844):119227-119265
                                (after Dune__exe__Lexer.__ocaml_lex_record_string_rec src/lexer.mll(844):119227-119265
                                  (apply record_string/1387 openingpos/1673
                                    buffer/1674 lexbuf/1675)))))))))))))
        decode_string/1389
          (function buffer/1680 lexbuf/1681 : int
            (funct-body Dune__exe__Lexer.decode_string src/lexer.ml(2415)<ghost>:119448-119514
              (before Dune__exe__Lexer.decode_string src/lexer.ml(2416):119467-119514
                (after Dune__exe__Lexer.decode_string src/lexer.ml(2416):119467-119514
                  (apply __ocaml_lex_decode_string_rec/1390 buffer/1680
                    lexbuf/1681 231)))))
        __ocaml_lex_decode_string_rec/1390
          (function buffer/1682 lexbuf/1683 __ocaml_lex_state/1684[int] : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2417)<ghost>:119549-120438
              (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2418):119585-120438
                (let
                  (__ocaml_lex_state/1685 =
                     (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2418):119591-119648
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1684
                         lexbuf/1683)))
                  (if (isout 2 __ocaml_lex_state/1685)
                    (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2446):120337-120438
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2446):120337-120369
                          (apply (field_imm 0 lexbuf/1683) lexbuf/1683))
                        (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2447):120377-120438
                          (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2447):120377-120438
                            (apply __ocaml_lex_decode_string_rec/1390
                              buffer/1682 lexbuf/1683 __ocaml_lex_state/1685)))))
                    (switch* __ocaml_lex_state/1685
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(850):119693-119737
                        0)
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2425):119770-120046
                        (let
                          (c/1686 =[int]
                             (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2429):119869-119932
                               (apply (field_imm 17 (global Stdlib__Lexing!))
                                 lexbuf/1683 (+ (field_int 4 lexbuf/1683) 1))))
                          (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119962-120046
                            (seq
                              (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119964-120009
                                (apply
                                  (field_imm 11 (global Stdlib__Buffer!))
                                  buffer/1682
                                  (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(852):119987-120009
                                    (apply char_for_backslash/1367 c/1686))))
                              (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(853):120017-120044
                                (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(853):120017-120044
                                  (apply decode_string/1389 buffer/1682
                                    lexbuf/1683)))))))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2436):120079-120288
                        (let
                          (c/1687 =[int]
                             (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.ml(2440):120138-120195
                               (apply (field_imm 17 (global Stdlib__Lexing!))
                                 lexbuf/1683 (field_int 4 lexbuf/1683))))
                          (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(855):120225-120288
                            (seq
                              (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(855):120227-120251
                                (apply
                                  (field_imm 11 (global Stdlib__Buffer!))
                                  buffer/1682 c/1687))
                              (before Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(856):120259-120286
                                (after Dune__exe__Lexer.__ocaml_lex_decode_string_rec src/lexer.mll(856):120259-120286
                                  (apply decode_string/1389 buffer/1682
                                    lexbuf/1683)))))))))))))
        char/1391
          (function lexbuf/1688 : int
            (funct-body Dune__exe__Lexer.char src/lexer.ml(2449)<ghost>:120449-120492
              (before Dune__exe__Lexer.char src/lexer.ml(2450):120461-120492
                (after Dune__exe__Lexer.char src/lexer.ml(2450):120461-120492
                  (apply __ocaml_lex_char_rec/1392 lexbuf/1688 236)))))
        __ocaml_lex_char_rec/1392
          (function lexbuf/1689 __ocaml_lex_state/1690[int] : int
            (funct-body Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2451)<ghost>:120518-120871
              (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2452):120547-120871
                (let
                  (__ocaml_lex_state/1691 =
                     (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2452):120553-120610
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1690
                         lexbuf/1689)))
                  (if (!= __ocaml_lex_state/1691 0)
                    (if (!= __ocaml_lex_state/1691 1)
                      (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2463):120786-120871
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2463):120786-120818
                            (apply (field_imm 0 lexbuf/1689) lexbuf/1689))
                          (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2464):120826-120871
                            (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.ml(2464):120826-120871
                              (apply __ocaml_lex_char_rec/1392 lexbuf/1689
                                __ocaml_lex_state/1691)))))
                      (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(872):120731-120737
                        0))
                    (before Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(866):120654-120673
                      (after Dune__exe__Lexer.__ocaml_lex_char_rec src/lexer.mll(866):120654-120673
                        (apply (field_imm 13 (global Stdlib__Lexing!))
                          lexbuf/1689))))))))
        finish/1393
          (function lexbuf/1692
            (funct-body Dune__exe__Lexer.finish src/lexer.ml(2466)<ghost>:120884-120929
              (before Dune__exe__Lexer.finish src/lexer.ml(2467):120896-120929
                (after Dune__exe__Lexer.finish src/lexer.ml(2467):120896-120929
                  (apply __ocaml_lex_finish_rec/1394 lexbuf/1692 253)))))
        __ocaml_lex_finish_rec/1394
          (function lexbuf/1693 __ocaml_lex_state/1694[int]
            (funct-body Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2468)<ghost>:120957-121424
              (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2469):120986-121424
                (let
                  (__ocaml_lex_state/1695 =
                     (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2469):120992-121049
                       (apply (field_imm 19 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/1370 __ocaml_lex_state/1694
                         lexbuf/1693)))
                  (if (isout 2 __ocaml_lex_state/1695)
                    (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2485):121337-121424
                      (seq
                        (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2485):121337-121369
                          (apply (field_imm 0 lexbuf/1693) lexbuf/1693))
                        (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2486):121377-121424
                          (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.ml(2486):121377-121424
                            (apply __ocaml_lex_finish_rec/1394 lexbuf/1693
                              __ocaml_lex_state/1695)))))
                    (switch* __ocaml_lex_state/1695
                     case int 0:
                      (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121094-121128
                        (seq
                          (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121096-121111
                            (apply (field_imm 13 (global Stdlib__Lexing!))
                              lexbuf/1693))
                          (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121113-121126
                            (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(883):121113-121126
                              (apply finish/1393 lexbuf/1693)))))
                     case int 1:
                      (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(885):121187-121212
                        (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(885):121187-121212
                          (apply (field_imm 11 (global Stdlib__Lexing!))
                            lexbuf/1693)))
                     case int 2:
                      (before Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(887):121271-121288
                        (after Dune__exe__Lexer.__ocaml_lex_finish_rec src/lexer.mll(887):121271-121288
                          (apply finish/1393 lexbuf/1693))))))))))
      (pseudo <unknown location>
        (makeblock 0 error1/467 error2/509 int_of_string/512 savestart/538
          overwrite/544 none/815 syntaxerror/819 check_dollar/900
          check_producer/966 dollar/1038 position/1063 no_monsters/1091
          gather_oid/1095 gather_oids/1192 gather_monsters/1195
          mk_stretch/1200 stretch_of_id/1259 reserved/1354 table/1355
          directives/1361 char_for_backslash/1367 __ocaml_lex_tables/1370
          main/1371 __ocaml_lex_main_rec/1372 comment/1373
          __ocaml_lex_comment_rec/1374 ocamltype/1375
          __ocaml_lex_ocamltype_rec/1376 action/1377
          __ocaml_lex_action_rec/1378 parentheses/1379
          __ocaml_lex_parentheses_rec/1380 attribute/1381
          __ocaml_lex_attribute_rec/1382 ocamlcomment/1383
          __ocaml_lex_ocamlcomment_rec/1384 string/1385
          __ocaml_lex_string_rec/1386 record_string/1387
          __ocaml_lex_record_string_rec/1388 decode_string/1389
          __ocaml_lex_decode_string_rec/1390 char/1391
          __ocaml_lex_char_rec/1392 finish/1393 __ocaml_lex_finish_rec/1394)))))

[
  structure_item (src/IL.ml[14,992+0]..[14,992+14])
    Pstr_open Fresh
    module_expr (src/IL.ml[14,992+5]..[14,992+14])
      Pmod_ident "Positions" (src/IL.ml[14,992+5]..[14,992+14])
  structure_item (src/IL.ml[18,1073+0]..[271,6533+23])
    Pstr_type Rec
    [
      type_declaration "interface" (src/IL.ml[18,1073+5]..[18,1073+14]) (src/IL.ml[18,1073+0]..[19,1090+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[19,1090+2]..[19,1090+21])
              Ptyp_constr "list" (src/IL.ml[19,1090+17]..[19,1090+21])
              [
                core_type (src/IL.ml[19,1090+2]..[19,1090+16])
                  Ptyp_constr "interface_item" (src/IL.ml[19,1090+2]..[19,1090+16])
                  []
              ]
      type_declaration "interface_item" (src/IL.ml[21,1113+4]..[21,1113+18]) (src/IL.ml[21,1113+0]..[35,1625+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[23,1210+2]..[23,1210+43])
                "IIFunctor" (src/IL.ml[23,1210+4]..[23,1210+13])
                [
                  core_type (src/IL.ml[23,1210+17]..[23,1210+31])
                    Ptyp_constr "list" (src/IL.ml[23,1210+27]..[23,1210+31])
                    [
                      core_type (src/IL.ml[23,1210+17]..[23,1210+26])
                        Ptyp_constr "Stretch.t" (src/IL.ml[23,1210+17]..[23,1210+26])
                        []
                    ]
                  core_type (src/IL.ml[23,1210+34]..[23,1210+43])
                    Ptyp_constr "interface" (src/IL.ml[23,1210+34]..[23,1210+43])
                    []
                ]
                None
              (src/IL.ml[25,1288+2]..[25,1288+29])
                "IIExcDecls" (src/IL.ml[25,1288+4]..[25,1288+14])
                [
                  core_type (src/IL.ml[25,1288+18]..[25,1288+29])
                    Ptyp_constr "list" (src/IL.ml[25,1288+25]..[25,1288+29])
                    [
                      core_type (src/IL.ml[25,1288+18]..[25,1288+24])
                        Ptyp_constr "excdef" (src/IL.ml[25,1288+18]..[25,1288+24])
                        []
                    ]
                ]
                None
              (src/IL.ml[27,1383+2]..[27,1383+31])
                "IITypeDecls" (src/IL.ml[27,1383+4]..[27,1383+15])
                [
                  core_type (src/IL.ml[27,1383+19]..[27,1383+31])
                    Ptyp_constr "list" (src/IL.ml[27,1383+27]..[27,1383+31])
                    [
                      core_type (src/IL.ml[27,1383+19]..[27,1383+26])
                        Ptyp_constr "typedef" (src/IL.ml[27,1383+19]..[27,1383+26])
                        []
                    ]
                ]
                None
              (src/IL.ml[29,1445+2]..[29,1445+44])
                "IIValDecls" (src/IL.ml[29,1445+4]..[29,1445+14])
                [
                  core_type (src/IL.ml[29,1445+18]..[29,1445+44])
                    Ptyp_constr "list" (src/IL.ml[29,1445+40]..[29,1445+44])
                    [
                      core_type (src/IL.ml[29,1445+19]..[29,1445+38])
                        Ptyp_tuple
                        [
                          core_type (src/IL.ml[29,1445+19]..[29,1445+25])
                            Ptyp_constr "string" (src/IL.ml[29,1445+19]..[29,1445+25])
                            []
                          core_type (src/IL.ml[29,1445+28]..[29,1445+38])
                            Ptyp_constr "typescheme" (src/IL.ml[29,1445+28]..[29,1445+38])
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[31,1519+2]..[31,1519+28])
                "IIInclude" (src/IL.ml[31,1519+4]..[31,1519+13])
                [
                  core_type (src/IL.ml[31,1519+17]..[31,1519+28])
                    Ptyp_constr "module_type" (src/IL.ml[31,1519+17]..[31,1519+28])
                    []
                ]
                None
              (src/IL.ml[33,1569+2]..[33,1569+36])
                "IIModule" (src/IL.ml[33,1569+4]..[33,1569+12])
                [
                  core_type (src/IL.ml[33,1569+16]..[33,1569+22])
                    Ptyp_constr "string" (src/IL.ml[33,1569+16]..[33,1569+22])
                    []
                  core_type (src/IL.ml[33,1569+25]..[33,1569+36])
                    Ptyp_constr "module_type" (src/IL.ml[33,1569+25]..[33,1569+36])
                    []
                ]
                None
              (src/IL.ml[35,1625+2]..[35,1625+23])
                "IIComment" (src/IL.ml[35,1625+4]..[35,1625+13])
                [
                  core_type (src/IL.ml[35,1625+17]..[35,1625+23])
                    Ptyp_constr "string" (src/IL.ml[35,1625+17]..[35,1625+23])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type" (src/IL.ml[37,1650+4]..[37,1650+15]) (src/IL.ml[37,1650+0]..[40,1771+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[38,1668+2]..[38,1668+31])
                "MTNamedModuleType" (src/IL.ml[38,1668+4]..[38,1668+21])
                [
                  core_type (src/IL.ml[38,1668+25]..[38,1668+31])
                    Ptyp_constr "string" (src/IL.ml[38,1668+25]..[38,1668+31])
                    []
                ]
                None
              (src/IL.ml[39,1700+2]..[39,1700+70])
                "MTWithType" (src/IL.ml[39,1700+4]..[39,1700+14])
                [
                  core_type (src/IL.ml[39,1700+18]..[39,1700+29])
                    Ptyp_constr "module_type" (src/IL.ml[39,1700+18]..[39,1700+29])
                    []
                  core_type (src/IL.ml[39,1700+32]..[39,1700+43])
                    Ptyp_constr "list" (src/IL.ml[39,1700+39]..[39,1700+43])
                    [
                      core_type (src/IL.ml[39,1700+32]..[39,1700+38])
                        Ptyp_constr "string" (src/IL.ml[39,1700+32]..[39,1700+38])
                        []
                    ]
                  core_type (src/IL.ml[39,1700+46]..[39,1700+52])
                    Ptyp_constr "string" (src/IL.ml[39,1700+46]..[39,1700+52])
                    []
                  core_type (src/IL.ml[39,1700+55]..[39,1700+64])
                    Ptyp_constr "with_kind" (src/IL.ml[39,1700+55]..[39,1700+64])
                    []
                  core_type (src/IL.ml[39,1700+67]..[39,1700+70])
                    Ptyp_constr "typ" (src/IL.ml[39,1700+67]..[39,1700+70])
                    []
                ]
                None
              (src/IL.ml[40,1771+2]..[40,1771+25])
                "MTSigEnd" (src/IL.ml[40,1771+4]..[40,1771+12])
                [
                  core_type (src/IL.ml[40,1771+16]..[40,1771+25])
                    Ptyp_constr "interface" (src/IL.ml[40,1771+16]..[40,1771+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "with_kind" (src/IL.ml[42,1798+4]..[42,1798+13]) (src/IL.ml[42,1798+0]..[44,1843+17])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[43,1814+2]..[43,1814+20])
                "WKNonDestructive" (src/IL.ml[43,1814+4]..[43,1814+20])
                []
                None
              (src/IL.ml[44,1843+2]..[44,1843+17])
                "WKDestructive" (src/IL.ml[44,1843+4]..[44,1843+17])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "excdef" (src/IL.ml[46,1873+4]..[46,1873+10]) (src/IL.ml[46,1873+0]..[54,2000+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[49,1922+4]..[49,1922+20])
                Immutable
                "excname" (src/IL.ml[49,1922+4]..[49,1922+11])                core_type (src/IL.ml[49,1922+13]..[49,1922+19])
                  Ptyp_constr "string" (src/IL.ml[49,1922+13]..[49,1922+19])
                  []
              (src/IL.ml[52,1973+4]..[52,1973+25])
                Immutable
                "exceq" (src/IL.ml[52,1973+4]..[52,1973+9])                core_type (src/IL.ml[52,1973+11]..[52,1973+24])
                  Ptyp_constr "option" (src/IL.ml[52,1973+18]..[52,1973+24])
                  [
                    core_type (src/IL.ml[52,1973+11]..[52,1973+17])
                      Ptyp_constr "string" (src/IL.ml[52,1973+11]..[52,1973+17])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typedef" (src/IL.ml[56,2005+4]..[56,2005+11]) (src/IL.ml[56,2005+0]..[72,2402+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[59,2065+4]..[59,2065+21])
                Immutable
                "typename" (src/IL.ml[59,2065+4]..[59,2065+12])                core_type (src/IL.ml[59,2065+14]..[59,2065+20])
                  Ptyp_constr "string" (src/IL.ml[59,2065+14]..[59,2065+20])
                  []
              (src/IL.ml[64,2255+4]..[64,2255+28])
                Immutable
                "typeparams" (src/IL.ml[64,2255+4]..[64,2255+14])                core_type (src/IL.ml[64,2255+16]..[64,2255+27])
                  Ptyp_constr "list" (src/IL.ml[64,2255+23]..[64,2255+27])
                  [
                    core_type (src/IL.ml[64,2255+16]..[64,2255+22])
                      Ptyp_constr "string" (src/IL.ml[64,2255+16]..[64,2255+22])
                      []
                  ]
              (src/IL.ml[67,2314+4]..[67,2314+24])
                Immutable
                "typerhs" (src/IL.ml[67,2314+4]..[67,2314+11])                core_type (src/IL.ml[67,2314+13]..[67,2314+23])
                  Ptyp_constr "typedefrhs" (src/IL.ml[67,2314+13]..[67,2314+23])
                  []
              (src/IL.ml[70,2362+4]..[70,2362+38])
                Immutable
                "typeconstraint" (src/IL.ml[70,2362+4]..[70,2362+18])                core_type (src/IL.ml[70,2362+20]..[70,2362+38])
                  Ptyp_constr "option" (src/IL.ml[70,2362+32]..[70,2362+38])
                  [
                    core_type (src/IL.ml[70,2362+21]..[70,2362+30])
                      Ptyp_tuple
                      [
                        core_type (src/IL.ml[70,2362+21]..[70,2362+24])
                          Ptyp_constr "typ" (src/IL.ml[70,2362+21]..[70,2362+24])
                          []
                        core_type (src/IL.ml[70,2362+27]..[70,2362+30])
                          Ptyp_constr "typ" (src/IL.ml[70,2362+27]..[70,2362+30])
                          []
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typedefrhs" (src/IL.ml[74,2407+4]..[74,2407+14]) (src/IL.ml[74,2407+0]..[77,2484+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[75,2424+2]..[75,2424+31])
                "TDefRecord" (src/IL.ml[75,2424+4]..[75,2424+14])
                [
                  core_type (src/IL.ml[75,2424+18]..[75,2424+31])
                    Ptyp_constr "list" (src/IL.ml[75,2424+27]..[75,2424+31])
                    [
                      core_type (src/IL.ml[75,2424+18]..[75,2424+26])
                        Ptyp_constr "fielddef" (src/IL.ml[75,2424+18]..[75,2424+26])
                        []
                    ]
                ]
                None
              (src/IL.ml[76,2456+2]..[76,2456+27])
                "TDefSum" (src/IL.ml[76,2456+4]..[76,2456+11])
                [
                  core_type (src/IL.ml[76,2456+15]..[76,2456+27])
                    Ptyp_constr "list" (src/IL.ml[76,2456+23]..[76,2456+27])
                    [
                      core_type (src/IL.ml[76,2456+15]..[76,2456+22])
                        Ptyp_constr "datadef" (src/IL.ml[76,2456+15]..[76,2456+22])
                        []
                    ]
                ]
                None
              (src/IL.ml[77,2484+2]..[77,2484+18])
                "TAbbrev" (src/IL.ml[77,2484+4]..[77,2484+11])
                [
                  core_type (src/IL.ml[77,2484+15]..[77,2484+18])
                    Ptyp_constr "typ" (src/IL.ml[77,2484+15]..[77,2484+18])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "fielddef" (src/IL.ml[79,2504+4]..[79,2504+12]) (src/IL.ml[79,2504+0]..[90,2694+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[82,2562+4]..[82,2562+21])
                Immutable
                "modifiable" (src/IL.ml[82,2562+4]..[82,2562+14])                core_type (src/IL.ml[82,2562+16]..[82,2562+20])
                  Ptyp_constr "bool" (src/IL.ml[82,2562+16]..[82,2562+20])
                  []
              (src/IL.ml[85,2614+4]..[85,2614+22])
                Immutable
                "fieldname" (src/IL.ml[85,2614+4]..[85,2614+13])                core_type (src/IL.ml[85,2614+15]..[85,2614+21])
                  Ptyp_constr "string" (src/IL.ml[85,2614+15]..[85,2614+21])
                  []
              (src/IL.ml[88,2667+4]..[88,2667+25])
                Immutable
                "fieldtype" (src/IL.ml[88,2667+4]..[88,2667+13])                core_type (src/IL.ml[88,2667+15]..[88,2667+25])
                  Ptyp_constr "typescheme" (src/IL.ml[88,2667+15]..[88,2667+25])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "datadef" (src/IL.ml[92,2699+4]..[92,2699+11]) (src/IL.ml[92,2699+0]..[104,2991+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[95,2756+4]..[95,2756+21])
                Immutable
                "dataname" (src/IL.ml[95,2756+4]..[95,2756+12])                core_type (src/IL.ml[95,2756+14]..[95,2756+20])
                  Ptyp_constr "string" (src/IL.ml[95,2756+14]..[95,2756+20])
                  []
              (src/IL.ml[98,2820+4]..[98,2820+28])
                Immutable
                "datavalparams" (src/IL.ml[98,2820+4]..[98,2820+17])                core_type (src/IL.ml[98,2820+19]..[98,2820+27])
                  Ptyp_constr "list" (src/IL.ml[98,2820+23]..[98,2820+27])
                  [
                    core_type (src/IL.ml[98,2820+19]..[98,2820+22])
                      Ptyp_constr "typ" (src/IL.ml[98,2820+19]..[98,2820+22])
                      []
                  ]
              (src/IL.ml[102,2953+4]..[102,2953+36])
                Immutable
                "datatypeparams" (src/IL.ml[102,2953+4]..[102,2953+18])                core_type (src/IL.ml[102,2953+20]..[102,2953+35])
                  Ptyp_constr "option" (src/IL.ml[102,2953+29]..[102,2953+35])
                  [
                    core_type (src/IL.ml[102,2953+20]..[102,2953+28])
                      Ptyp_constr "list" (src/IL.ml[102,2953+24]..[102,2953+28])
                      [
                        core_type (src/IL.ml[102,2953+20]..[102,2953+23])
                          Ptyp_constr "typ" (src/IL.ml[102,2953+20]..[102,2953+23])
                          []
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typ" (src/IL.ml[106,2996+4]..[106,2996+7]) (src/IL.ml[106,2996+0]..[121,3324+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[109,3035+2]..[109,3035+35])
                "TypTextual" (src/IL.ml[109,3035+4]..[109,3035+14])
                [
                  core_type (src/IL.ml[109,3035+18]..[109,3035+35])
                    Ptyp_constr "Stretch.ocamltype" (src/IL.ml[109,3035+18]..[109,3035+35])
                    []
                ]
                None
              (src/IL.ml[112,3139+2]..[112,3139+20])
                "TypVar" (src/IL.ml[112,3139+4]..[112,3139+10])
                [
                  core_type (src/IL.ml[112,3139+14]..[112,3139+20])
                    Ptyp_constr "string" (src/IL.ml[112,3139+14]..[112,3139+20])
                    []
                ]
                None
              (src/IL.ml[115,3220+2]..[115,3220+31])
                "TypApp" (src/IL.ml[115,3220+4]..[115,3220+10])
                [
                  core_type (src/IL.ml[115,3220+14]..[115,3220+20])
                    Ptyp_constr "string" (src/IL.ml[115,3220+14]..[115,3220+20])
                    []
                  core_type (src/IL.ml[115,3220+23]..[115,3220+31])
                    Ptyp_constr "list" (src/IL.ml[115,3220+27]..[115,3220+31])
                    [
                      core_type (src/IL.ml[115,3220+23]..[115,3220+26])
                        Ptyp_constr "typ" (src/IL.ml[115,3220+23]..[115,3220+26])
                        []
                    ]
                ]
                None
              (src/IL.ml[118,3278+2]..[118,3278+24])
                "TypTuple" (src/IL.ml[118,3278+4]..[118,3278+12])
                [
                  core_type (src/IL.ml[118,3278+16]..[118,3278+24])
                    Ptyp_constr "list" (src/IL.ml[118,3278+20]..[118,3278+24])
                    [
                      core_type (src/IL.ml[118,3278+16]..[118,3278+19])
                        Ptyp_constr "typ" (src/IL.ml[118,3278+16]..[118,3278+19])
                        []
                    ]
                ]
                None
              (src/IL.ml[121,3324+2]..[121,3324+25])
                "TypArrow" (src/IL.ml[121,3324+4]..[121,3324+12])
                [
                  core_type (src/IL.ml[121,3324+16]..[121,3324+19])
                    Ptyp_constr "typ" (src/IL.ml[121,3324+16]..[121,3324+19])
                    []
                  core_type (src/IL.ml[121,3324+22]..[121,3324+25])
                    Ptyp_constr "typ" (src/IL.ml[121,3324+22]..[121,3324+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typescheme" (src/IL.ml[123,3351+4]..[123,3351+14]) (src/IL.ml[123,3351+0]..[131,3483+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[126,3426+2]..[126,3426+27])
                Immutable
                "quantifiers" (src/IL.ml[126,3426+2]..[126,3426+13])                core_type (src/IL.ml[126,3426+15]..[126,3426+26])
                  Ptyp_constr "list" (src/IL.ml[126,3426+22]..[126,3426+26])
                  [
                    core_type (src/IL.ml[126,3426+15]..[126,3426+21])
                      Ptyp_constr "string" (src/IL.ml[126,3426+15]..[126,3426+21])
                      []
                  ]
              (src/IL.ml[129,3469+2]..[129,3469+12])
                Immutable
                "body" (src/IL.ml[129,3469+2]..[129,3469+6])                core_type (src/IL.ml[129,3469+8]..[129,3469+11])
                  Ptyp_constr "typ" (src/IL.ml[129,3469+8]..[129,3469+11])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "valdef" (src/IL.ml[133,3488+4]..[133,3488+10]) (src/IL.ml[133,3488+0]..[147,3780+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[139,3651+2]..[139,3651+18])
                Immutable
                "valpublic" (src/IL.ml[139,3651+2]..[139,3651+11])                core_type (src/IL.ml[139,3651+13]..[139,3651+17])
                  Ptyp_constr "bool" (src/IL.ml[139,3651+13]..[139,3651+17])
                  []
              (src/IL.ml[142,3708+2]..[142,3708+18])
                Immutable
                "valpat" (src/IL.ml[142,3708+2]..[142,3708+8])                core_type (src/IL.ml[142,3708+10]..[142,3708+17])
                  Ptyp_constr "pattern" (src/IL.ml[142,3708+10]..[142,3708+17])
                  []
              (src/IL.ml[145,3764+2]..[145,3764+14])
                Immutable
                "valval" (src/IL.ml[145,3764+2]..[145,3764+8])                core_type (src/IL.ml[145,3764+10]..[145,3764+14])
                  Ptyp_constr "expr" (src/IL.ml[145,3764+10]..[145,3764+14])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "expr" (src/IL.ml[149,3785+4]..[149,3785+8]) (src/IL.ml[149,3785+0]..[205,5032+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[152,3815+2]..[152,3815+18])
                "EVar" (src/IL.ml[152,3815+4]..[152,3815+8])
                [
                  core_type (src/IL.ml[152,3815+12]..[152,3815+18])
                    Ptyp_constr "string" (src/IL.ml[152,3815+12]..[152,3815+18])
                    []
                ]
                None
              (src/IL.ml[155,3853+2]..[155,3853+31])
                "EFun" (src/IL.ml[155,3853+4]..[155,3853+8])
                [
                  core_type (src/IL.ml[155,3853+12]..[155,3853+24])
                    Ptyp_constr "list" (src/IL.ml[155,3853+20]..[155,3853+24])
                    [
                      core_type (src/IL.ml[155,3853+12]..[155,3853+19])
                        Ptyp_constr "pattern" (src/IL.ml[155,3853+12]..[155,3853+19])
                        []
                    ]
                  core_type (src/IL.ml[155,3853+27]..[155,3853+31])
                    Ptyp_constr "expr" (src/IL.ml[155,3853+27]..[155,3853+31])
                    []
                ]
                None
              (src/IL.ml[158,3909+2]..[158,3909+28])
                "EApp" (src/IL.ml[158,3909+4]..[158,3909+8])
                [
                  core_type (src/IL.ml[158,3909+12]..[158,3909+16])
                    Ptyp_constr "expr" (src/IL.ml[158,3909+12]..[158,3909+16])
                    []
                  core_type (src/IL.ml[158,3909+19]..[158,3909+28])
                    Ptyp_constr "list" (src/IL.ml[158,3909+24]..[158,3909+28])
                    [
                      core_type (src/IL.ml[158,3909+19]..[158,3909+23])
                        Ptyp_constr "expr" (src/IL.ml[158,3909+19]..[158,3909+23])
                        []
                    ]
                ]
                None
              (src/IL.ml[162,4019+2]..[162,4019+40])
                "ELet" (src/IL.ml[162,4019+4]..[162,4019+8])
                [
                  core_type (src/IL.ml[162,4019+12]..[162,4019+33])
                    Ptyp_constr "list" (src/IL.ml[162,4019+29]..[162,4019+33])
                    [
                      core_type (src/IL.ml[162,4019+13]..[162,4019+27])
                        Ptyp_tuple
                        [
                          core_type (src/IL.ml[162,4019+13]..[162,4019+20])
                            Ptyp_constr "pattern" (src/IL.ml[162,4019+13]..[162,4019+20])
                            []
                          core_type (src/IL.ml[162,4019+23]..[162,4019+27])
                            Ptyp_constr "expr" (src/IL.ml[162,4019+23]..[162,4019+27])
                            []
                        ]
                    ]
                  core_type (src/IL.ml[162,4019+36]..[162,4019+40])
                    Ptyp_constr "expr" (src/IL.ml[162,4019+36]..[162,4019+40])
                    []
                ]
                None
              (src/IL.ml[165,4084+2]..[165,4084+32])
                "EMatch" (src/IL.ml[165,4084+4]..[165,4084+10])
                [
                  core_type (src/IL.ml[165,4084+14]..[165,4084+18])
                    Ptyp_constr "expr" (src/IL.ml[165,4084+14]..[165,4084+18])
                    []
                  core_type (src/IL.ml[165,4084+21]..[165,4084+32])
                    Ptyp_constr "list" (src/IL.ml[165,4084+28]..[165,4084+32])
                    [
                      core_type (src/IL.ml[165,4084+21]..[165,4084+27])
                        Ptyp_constr "branch" (src/IL.ml[165,4084+21]..[165,4084+27])
                        []
                    ]
                ]
                None
              (src/IL.ml[166,4117+2]..[166,4117+26])
                "EIfThen" (src/IL.ml[166,4117+4]..[166,4117+11])
                [
                  core_type (src/IL.ml[166,4117+15]..[166,4117+19])
                    Ptyp_constr "expr" (src/IL.ml[166,4117+15]..[166,4117+19])
                    []
                  core_type (src/IL.ml[166,4117+22]..[166,4117+26])
                    Ptyp_constr "expr" (src/IL.ml[166,4117+22]..[166,4117+26])
                    []
                ]
                None
              (src/IL.ml[167,4144+2]..[167,4144+37])
                "EIfThenElse" (src/IL.ml[167,4144+4]..[167,4144+15])
                [
                  core_type (src/IL.ml[167,4144+19]..[167,4144+23])
                    Ptyp_constr "expr" (src/IL.ml[167,4144+19]..[167,4144+23])
                    []
                  core_type (src/IL.ml[167,4144+26]..[167,4144+30])
                    Ptyp_constr "expr" (src/IL.ml[167,4144+26]..[167,4144+30])
                    []
                  core_type (src/IL.ml[167,4144+33]..[167,4144+37])
                    Ptyp_constr "expr" (src/IL.ml[167,4144+33]..[167,4144+37])
                    []
                ]
                None
              (src/IL.ml[170,4211+2]..[170,4211+18])
                "ERaise" (src/IL.ml[170,4211+4]..[170,4211+10])
                [
                  core_type (src/IL.ml[170,4211+14]..[170,4211+18])
                    Ptyp_constr "expr" (src/IL.ml[170,4211+14]..[170,4211+18])
                    []
                ]
                None
              (src/IL.ml[173,4259+2]..[173,4259+30])
                "ETry" (src/IL.ml[173,4259+4]..[173,4259+8])
                [
                  core_type (src/IL.ml[173,4259+12]..[173,4259+16])
                    Ptyp_constr "expr" (src/IL.ml[173,4259+12]..[173,4259+16])
                    []
                  core_type (src/IL.ml[173,4259+19]..[173,4259+30])
                    Ptyp_constr "list" (src/IL.ml[173,4259+26]..[173,4259+30])
                    [
                      core_type (src/IL.ml[173,4259+19]..[173,4259+25])
                        Ptyp_constr "branch" (src/IL.ml[173,4259+19]..[173,4259+25])
                        []
                    ]
                ]
                None
              (src/IL.ml[178,4435+2]..[178,4435+9])
                "EUnit" (src/IL.ml[178,4435+4]..[178,4435+9])
                []
                None
              (src/IL.ml[179,4445+2]..[179,4445+20])
                "EIntConst" (src/IL.ml[179,4445+4]..[179,4445+13])
                [
                  core_type (src/IL.ml[179,4445+17]..[179,4445+20])
                    Ptyp_constr "int" (src/IL.ml[179,4445+17]..[179,4445+20])
                    []
                ]
                None
              (src/IL.ml[180,4466+2]..[180,4466+26])
                "EStringConst" (src/IL.ml[180,4466+4]..[180,4466+16])
                [
                  core_type (src/IL.ml[180,4466+20]..[180,4466+26])
                    Ptyp_constr "string" (src/IL.ml[180,4466+20]..[180,4466+26])
                    []
                ]
                None
              (src/IL.ml[181,4493+2]..[181,4493+31])
                "EData" (src/IL.ml[181,4493+4]..[181,4493+9])
                [
                  core_type (src/IL.ml[181,4493+13]..[181,4493+19])
                    Ptyp_constr "string" (src/IL.ml[181,4493+13]..[181,4493+19])
                    []
                  core_type (src/IL.ml[181,4493+22]..[181,4493+31])
                    Ptyp_constr "list" (src/IL.ml[181,4493+27]..[181,4493+31])
                    [
                      core_type (src/IL.ml[181,4493+22]..[181,4493+26])
                        Ptyp_constr "expr" (src/IL.ml[181,4493+22]..[181,4493+26])
                        []
                    ]
                ]
                None
              (src/IL.ml[182,4525+2]..[182,4525+23])
                "ETuple" (src/IL.ml[182,4525+4]..[182,4525+10])
                [
                  core_type (src/IL.ml[182,4525+14]..[182,4525+23])
                    Ptyp_constr "list" (src/IL.ml[182,4525+19]..[182,4525+23])
                    [
                      core_type (src/IL.ml[182,4525+14]..[182,4525+18])
                        Ptyp_constr "expr" (src/IL.ml[182,4525+14]..[182,4525+18])
                        []
                    ]
                ]
                None
              (src/IL.ml[185,4575+2]..[185,4575+31])
                "EAnnot" (src/IL.ml[185,4575+4]..[185,4575+10])
                [
                  core_type (src/IL.ml[185,4575+14]..[185,4575+18])
                    Ptyp_constr "expr" (src/IL.ml[185,4575+14]..[185,4575+18])
                    []
                  core_type (src/IL.ml[185,4575+21]..[185,4575+31])
                    Ptyp_constr "typescheme" (src/IL.ml[185,4575+21]..[185,4575+31])
                    []
                ]
                None
              (src/IL.ml[188,4645+2]..[188,4645+18])
                "EMagic" (src/IL.ml[188,4645+4]..[188,4645+10])
                [
                  core_type (src/IL.ml[188,4645+14]..[188,4645+18])
                    Ptyp_constr "expr" (src/IL.ml[188,4645+14]..[188,4645+18])
                    []
                ]
                None
              (src/IL.ml[189,4680+2]..[189,4680+17])
                "ERepr" (src/IL.ml[189,4680+4]..[189,4680+9])
                [
                  core_type (src/IL.ml[189,4680+13]..[189,4680+17])
                    Ptyp_constr "expr" (src/IL.ml[189,4680+13]..[189,4680+17])
                    []
                ]
                None
              (src/IL.ml[192,4732+2]..[192,4732+35])
                "ERecord" (src/IL.ml[192,4732+4]..[192,4732+11])
                [
                  core_type (src/IL.ml[192,4732+15]..[192,4732+35])
                    Ptyp_constr "list" (src/IL.ml[192,4732+31]..[192,4732+35])
                    [
                      core_type (src/IL.ml[192,4732+16]..[192,4732+29])
                        Ptyp_tuple
                        [
                          core_type (src/IL.ml[192,4732+16]..[192,4732+22])
                            Ptyp_constr "string" (src/IL.ml[192,4732+16]..[192,4732+22])
                            []
                          core_type (src/IL.ml[192,4732+25]..[192,4732+29])
                            Ptyp_constr "expr" (src/IL.ml[192,4732+25]..[192,4732+29])
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[193,4768+2]..[193,4768+34])
                "ERecordAccess" (src/IL.ml[193,4768+4]..[193,4768+17])
                [
                  core_type (src/IL.ml[193,4768+21]..[193,4768+25])
                    Ptyp_constr "expr" (src/IL.ml[193,4768+21]..[193,4768+25])
                    []
                  core_type (src/IL.ml[193,4768+28]..[193,4768+34])
                    Ptyp_constr "string" (src/IL.ml[193,4768+28]..[193,4768+34])
                    []
                ]
                None
              (src/IL.ml[194,4803+2]..[194,4803+40])
                "ERecordWrite" (src/IL.ml[194,4803+4]..[194,4803+16])
                [
                  core_type (src/IL.ml[194,4803+20]..[194,4803+24])
                    Ptyp_constr "expr" (src/IL.ml[194,4803+20]..[194,4803+24])
                    []
                  core_type (src/IL.ml[194,4803+27]..[194,4803+33])
                    Ptyp_constr "string" (src/IL.ml[194,4803+27]..[194,4803+33])
                    []
                  core_type (src/IL.ml[194,4803+36]..[194,4803+40])
                    Ptyp_constr "expr" (src/IL.ml[194,4803+36]..[194,4803+40])
                    []
                ]
                None
              (src/IL.ml[197,4873+2]..[197,4873+25])
                "ETextual" (src/IL.ml[197,4873+4]..[197,4873+12])
                [
                  core_type (src/IL.ml[197,4873+16]..[197,4873+25])
                    Ptyp_constr "Stretch.t" (src/IL.ml[197,4873+16]..[197,4873+25])
                    []
                ]
                None
              (src/IL.ml[200,4918+2]..[200,4918+29])
                "EComment" (src/IL.ml[200,4918+4]..[200,4918+12])
                [
                  core_type (src/IL.ml[200,4918+16]..[200,4918+22])
                    Ptyp_constr "string" (src/IL.ml[200,4918+16]..[200,4918+22])
                    []
                  core_type (src/IL.ml[200,4918+25]..[200,4918+29])
                    Ptyp_constr "expr" (src/IL.ml[200,4918+25]..[200,4918+29])
                    []
                ]
                None
              (src/IL.ml[201,4948+2]..[201,4948+42])
                "EPatComment" (src/IL.ml[201,4948+4]..[201,4948+15])
                [
                  core_type (src/IL.ml[201,4948+19]..[201,4948+25])
                    Ptyp_constr "string" (src/IL.ml[201,4948+19]..[201,4948+25])
                    []
                  core_type (src/IL.ml[201,4948+28]..[201,4948+35])
                    Ptyp_constr "pattern" (src/IL.ml[201,4948+28]..[201,4948+35])
                    []
                  core_type (src/IL.ml[201,4948+38]..[201,4948+42])
                    Ptyp_constr "expr" (src/IL.ml[201,4948+38]..[201,4948+42])
                    []
                ]
                None
              (src/IL.ml[204,5008+2]..[204,5008+23])
                "EArray" (src/IL.ml[204,5008+4]..[204,5008+10])
                [
                  core_type (src/IL.ml[204,5008+14]..[204,5008+23])
                    Ptyp_constr "list" (src/IL.ml[204,5008+19]..[204,5008+23])
                    [
                      core_type (src/IL.ml[204,5008+14]..[204,5008+18])
                        Ptyp_constr "expr" (src/IL.ml[204,5008+14]..[204,5008+18])
                        []
                    ]
                ]
                None
              (src/IL.ml[205,5032+2]..[205,5032+31])
                "EArrayAccess" (src/IL.ml[205,5032+4]..[205,5032+16])
                [
                  core_type (src/IL.ml[205,5032+20]..[205,5032+24])
                    Ptyp_constr "expr" (src/IL.ml[205,5032+20]..[205,5032+24])
                    []
                  core_type (src/IL.ml[205,5032+27]..[205,5032+31])
                    Ptyp_constr "expr" (src/IL.ml[205,5032+27]..[205,5032+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "branch" (src/IL.ml[207,5065+4]..[207,5065+10]) (src/IL.ml[207,5065+0]..[215,5170+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/IL.ml[210,5105+2]..[210,5105+21])
                Immutable
                "branchpat" (src/IL.ml[210,5105+2]..[210,5105+11])                core_type (src/IL.ml[210,5105+13]..[210,5105+20])
                  Ptyp_constr "pattern" (src/IL.ml[210,5105+13]..[210,5105+20])
                  []
              (src/IL.ml[213,5149+2]..[213,5149+19])
                Immutable
                "branchbody" (src/IL.ml[213,5149+2]..[213,5149+12])                core_type (src/IL.ml[213,5149+14]..[213,5149+18])
                  Ptyp_constr "expr" (src/IL.ml[213,5149+14]..[213,5149+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "pattern" (src/IL.ml[217,5175+4]..[217,5175+11]) (src/IL.ml[217,5175+0]..[238,5686+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[220,5208+2]..[220,5208+13])
                "PWildcard" (src/IL.ml[220,5208+4]..[220,5208+13])
                []
                None
              (src/IL.ml[223,5241+2]..[223,5241+18])
                "PVar" (src/IL.ml[223,5241+4]..[223,5241+8])
                [
                  core_type (src/IL.ml[223,5241+12]..[223,5241+18])
                    Ptyp_constr "string" (src/IL.ml[223,5241+12]..[223,5241+18])
                    []
                ]
                None
              (src/IL.ml[224,5260+2]..[224,5260+33])
                "PVarLocated" (src/IL.ml[224,5260+4]..[224,5260+15])
                [
                  core_type (src/IL.ml[224,5260+19]..[224,5260+33])
                    Ptyp_constr "located" (src/IL.ml[224,5260+26]..[224,5260+33])
                    [
                      core_type (src/IL.ml[224,5260+19]..[224,5260+25])
                        Ptyp_constr "string" (src/IL.ml[224,5260+19]..[224,5260+25])
                        []
                    ]
                ]
                None
              (src/IL.ml[229,5503+2]..[229,5503+9])
                "PUnit" (src/IL.ml[229,5503+4]..[229,5503+9])
                []
                None
              (src/IL.ml[230,5513+2]..[230,5513+34])
                "PData" (src/IL.ml[230,5513+4]..[230,5513+9])
                [
                  core_type (src/IL.ml[230,5513+13]..[230,5513+19])
                    Ptyp_constr "string" (src/IL.ml[230,5513+13]..[230,5513+19])
                    []
                  core_type (src/IL.ml[230,5513+22]..[230,5513+34])
                    Ptyp_constr "list" (src/IL.ml[230,5513+30]..[230,5513+34])
                    [
                      core_type (src/IL.ml[230,5513+22]..[230,5513+29])
                        Ptyp_constr "pattern" (src/IL.ml[230,5513+22]..[230,5513+29])
                        []
                    ]
                ]
                None
              (src/IL.ml[231,5548+2]..[231,5548+26])
                "PTuple" (src/IL.ml[231,5548+4]..[231,5548+10])
                [
                  core_type (src/IL.ml[231,5548+14]..[231,5548+26])
                    Ptyp_constr "list" (src/IL.ml[231,5548+22]..[231,5548+26])
                    [
                      core_type (src/IL.ml[231,5548+14]..[231,5548+21])
                        Ptyp_constr "pattern" (src/IL.ml[231,5548+14]..[231,5548+21])
                        []
                    ]
                ]
                None
              (src/IL.ml[232,5575+2]..[232,5575+38])
                "PRecord" (src/IL.ml[232,5575+4]..[232,5575+11])
                [
                  core_type (src/IL.ml[232,5575+15]..[232,5575+38])
                    Ptyp_constr "list" (src/IL.ml[232,5575+34]..[232,5575+38])
                    [
                      core_type (src/IL.ml[232,5575+16]..[232,5575+32])
                        Ptyp_tuple
                        [
                          core_type (src/IL.ml[232,5575+16]..[232,5575+22])
                            Ptyp_constr "string" (src/IL.ml[232,5575+16]..[232,5575+22])
                            []
                          core_type (src/IL.ml[232,5575+25]..[232,5575+32])
                            Ptyp_constr "pattern" (src/IL.ml[232,5575+25]..[232,5575+32])
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[235,5636+2]..[235,5636+23])
                "POr" (src/IL.ml[235,5636+4]..[235,5636+7])
                [
                  core_type (src/IL.ml[235,5636+11]..[235,5636+23])
                    Ptyp_constr "list" (src/IL.ml[235,5636+19]..[235,5636+23])
                    [
                      core_type (src/IL.ml[235,5636+11]..[235,5636+18])
                        Ptyp_constr "pattern" (src/IL.ml[235,5636+11]..[235,5636+18])
                        []
                    ]
                ]
                None
              (src/IL.ml[238,5686+2]..[238,5686+27])
                "PAnnot" (src/IL.ml[238,5686+4]..[238,5686+10])
                [
                  core_type (src/IL.ml[238,5686+14]..[238,5686+21])
                    Ptyp_constr "pattern" (src/IL.ml[238,5686+14]..[238,5686+21])
                    []
                  core_type (src/IL.ml[238,5686+24]..[238,5686+27])
                    Ptyp_constr "typ" (src/IL.ml[238,5686+24]..[238,5686+27])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "modexpr" (src/IL.ml[242,5742+4]..[242,5742+11]) (src/IL.ml[242,5742+0]..[245,5804+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[243,5756+4]..[243,5756+20])
                "MVar" (src/IL.ml[243,5756+6]..[243,5756+10])
                [
                  core_type (src/IL.ml[243,5756+14]..[243,5756+20])
                    Ptyp_constr "string" (src/IL.ml[243,5756+14]..[243,5756+20])
                    []
                ]
                None
              (src/IL.ml[244,5777+4]..[244,5777+26])
                "MStruct" (src/IL.ml[244,5777+6]..[244,5777+13])
                [
                  core_type (src/IL.ml[244,5777+17]..[244,5777+26])
                    Ptyp_constr "structure" (src/IL.ml[244,5777+17]..[244,5777+26])
                    []
                ]
                None
              (src/IL.ml[245,5804+4]..[245,5804+31])
                "MApp" (src/IL.ml[245,5804+6]..[245,5804+10])
                [
                  core_type (src/IL.ml[245,5804+14]..[245,5804+21])
                    Ptyp_constr "modexpr" (src/IL.ml[245,5804+14]..[245,5804+21])
                    []
                  core_type (src/IL.ml[245,5804+24]..[245,5804+31])
                    Ptyp_constr "modexpr" (src/IL.ml[245,5804+24]..[245,5804+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "program" (src/IL.ml[249,5856+4]..[249,5856+11]) (src/IL.ml[249,5856+0]..[250,5870+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[250,5870+4]..[250,5870+13])
              Ptyp_constr "structure" (src/IL.ml[250,5870+4]..[250,5870+13])
              []
      type_declaration "structure" (src/IL.ml[252,5885+4]..[252,5885+13]) (src/IL.ml[252,5885+0]..[253,5901+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[253,5901+4]..[253,5901+23])
              Ptyp_constr "list" (src/IL.ml[253,5901+19]..[253,5901+23])
              [
                core_type (src/IL.ml[253,5901+4]..[253,5901+18])
                  Ptyp_constr "structure_item" (src/IL.ml[253,5901+4]..[253,5901+18])
                  []
              ]
      type_declaration "structure_item" (src/IL.ml[255,5926+4]..[255,5926+18]) (src/IL.ml[255,5926+0]..[271,6533+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[257,6023+2]..[257,6023+43])
                "SIFunctor" (src/IL.ml[257,6023+4]..[257,6023+13])
                [
                  core_type (src/IL.ml[257,6023+17]..[257,6023+31])
                    Ptyp_constr "list" (src/IL.ml[257,6023+27]..[257,6023+31])
                    [
                      core_type (src/IL.ml[257,6023+17]..[257,6023+26])
                        Ptyp_constr "Stretch.t" (src/IL.ml[257,6023+17]..[257,6023+26])
                        []
                    ]
                  core_type (src/IL.ml[257,6023+34]..[257,6023+43])
                    Ptyp_constr "structure" (src/IL.ml[257,6023+34]..[257,6023+43])
                    []
                ]
                None
              (src/IL.ml[259,6100+2]..[259,6100+28])
                "SIExcDefs" (src/IL.ml[259,6100+4]..[259,6100+13])
                [
                  core_type (src/IL.ml[259,6100+17]..[259,6100+28])
                    Ptyp_constr "list" (src/IL.ml[259,6100+24]..[259,6100+28])
                    [
                      core_type (src/IL.ml[259,6100+17]..[259,6100+23])
                        Ptyp_constr "excdef" (src/IL.ml[259,6100+17]..[259,6100+23])
                        []
                    ]
                ]
                None
              (src/IL.ml[261,6193+2]..[261,6193+30])
                "SITypeDefs" (src/IL.ml[261,6193+4]..[261,6193+14])
                [
                  core_type (src/IL.ml[261,6193+18]..[261,6193+30])
                    Ptyp_constr "list" (src/IL.ml[261,6193+26]..[261,6193+30])
                    [
                      core_type (src/IL.ml[261,6193+18]..[261,6193+25])
                        Ptyp_constr "typedef" (src/IL.ml[261,6193+18]..[261,6193+25])
                        []
                    ]
                ]
                None
              (src/IL.ml[263,6298+2]..[263,6298+35])
                "SIValDefs" (src/IL.ml[263,6298+4]..[263,6298+13])
                [
                  core_type (src/IL.ml[263,6298+17]..[263,6298+21])
                    Ptyp_constr "bool" (src/IL.ml[263,6298+17]..[263,6298+21])
                    []
                  core_type (src/IL.ml[263,6298+24]..[263,6298+35])
                    Ptyp_constr "list" (src/IL.ml[263,6298+31]..[263,6298+35])
                    [
                      core_type (src/IL.ml[263,6298+24]..[263,6298+30])
                        Ptyp_constr "valdef" (src/IL.ml[263,6298+24]..[263,6298+30])
                        []
                    ]
                ]
                None
              (src/IL.ml[265,6360+2]..[265,6360+31])
                "SIStretch" (src/IL.ml[265,6360+4]..[265,6360+13])
                [
                  core_type (src/IL.ml[265,6360+17]..[265,6360+31])
                    Ptyp_constr "list" (src/IL.ml[265,6360+27]..[265,6360+31])
                    [
                      core_type (src/IL.ml[265,6360+17]..[265,6360+26])
                        Ptyp_constr "Stretch.t" (src/IL.ml[265,6360+17]..[265,6360+26])
                        []
                    ]
                ]
                None
              (src/IL.ml[267,6425+2]..[267,6425+35])
                "SIModuleDef" (src/IL.ml[267,6425+4]..[267,6425+15])
                [
                  core_type (src/IL.ml[267,6425+19]..[267,6425+25])
                    Ptyp_constr "string" (src/IL.ml[267,6425+19]..[267,6425+25])
                    []
                  core_type (src/IL.ml[267,6425+28]..[267,6425+35])
                    Ptyp_constr "modexpr" (src/IL.ml[267,6425+28]..[267,6425+35])
                    []
                ]
                None
              (src/IL.ml[269,6489+2]..[269,6489+24])
                "SIInclude" (src/IL.ml[269,6489+4]..[269,6489+13])
                [
                  core_type (src/IL.ml[269,6489+17]..[269,6489+24])
                    Ptyp_constr "modexpr" (src/IL.ml[269,6489+17]..[269,6489+24])
                    []
                ]
                None
              (src/IL.ml[271,6533+2]..[271,6533+23])
                "SIComment" (src/IL.ml[271,6533+4]..[271,6533+13])
                [
                  core_type (src/IL.ml[271,6533+17]..[271,6533+23])
                    Ptyp_constr "string" (src/IL.ml[271,6533+17]..[271,6533+23])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/IL.ml[276,6687+0]..[278,6720+20])
    Pstr_type Rec
    [
      type_declaration "xparam" (src/IL.ml[276,6687+5]..[276,6687+11]) (src/IL.ml[276,6687+0]..[278,6720+20])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/IL.ml[277,6701+2]..[277,6701+18])
                "XVar" (src/IL.ml[277,6701+4]..[277,6701+8])
                [
                  core_type (src/IL.ml[277,6701+12]..[277,6701+18])
                    Ptyp_constr "string" (src/IL.ml[277,6701+12]..[277,6701+18])
                    []
                ]
                None
              (src/IL.ml[278,6720+2]..[278,6720+20])
                "XMagic" (src/IL.ml[278,6720+4]..[278,6720+10])
                [
                  core_type (src/IL.ml[278,6720+14]..[278,6720+20])
                    Ptyp_constr "xparam" (src/IL.ml[278,6720+14]..[278,6720+20])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/IL.ml[280,6742+0]..[281,6755+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[280,6742+4]..[280,6742+8])
          Ppat_var "xvar" (src/IL.ml[280,6742+4]..[280,6742+8])
        expression (src/IL.ml[280,6742+9]..[281,6755+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/IL.ml[280,6742+9]..[280,6742+10])
            Ppat_var "x" (src/IL.ml[280,6742+9]..[280,6742+10])
          expression (src/IL.ml[281,6755+2]..[281,6755+8])
            Pexp_construct "XVar" (src/IL.ml[281,6755+2]..[281,6755+6])
            Some
              expression (src/IL.ml[281,6755+7]..[281,6755+8])
                Pexp_ident "x" (src/IL.ml[281,6755+7]..[281,6755+8])
    ]
  structure_item (src/IL.ml[283,6765+0]..[284,6781+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[283,6765+4]..[283,6765+10])
          Ppat_var "xmagic" (src/IL.ml[283,6765+4]..[283,6765+10])
        expression (src/IL.ml[283,6765+11]..[284,6781+11]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/IL.ml[283,6765+11]..[283,6765+13])
            Ppat_var "xp" (src/IL.ml[283,6765+11]..[283,6765+13])
          expression (src/IL.ml[284,6781+2]..[284,6781+11])
            Pexp_construct "XMagic" (src/IL.ml[284,6781+2]..[284,6781+8])
            Some
              expression (src/IL.ml[284,6781+9]..[284,6781+11])
                Pexp_ident "xp" (src/IL.ml[284,6781+9]..[284,6781+11])
    ]
  structure_item (src/IL.ml[286,6794+0]..[290,6869+29])
    Pstr_value Rec
    [
      <def>
        pattern (src/IL.ml[286,6794+8]..[286,6794+19])
          Ppat_var "xparam2expr" (src/IL.ml[286,6794+8]..[286,6794+19])
        expression (src/IL.ml[286,6794+22]..[290,6869+29])
          Pexp_function
          [
            <case>
              pattern (src/IL.ml[287,6825+4]..[287,6825+10])
                Ppat_construct "XVar" (src/IL.ml[287,6825+4]..[287,6825+8])
                Some
                  []
                  pattern (src/IL.ml[287,6825+9]..[287,6825+10])
                    Ppat_var "x" (src/IL.ml[287,6825+9]..[287,6825+10])
              expression (src/IL.ml[288,6839+6]..[288,6839+12])
                Pexp_construct "EVar" (src/IL.ml[288,6839+6]..[288,6839+10])
                Some
                  expression (src/IL.ml[288,6839+11]..[288,6839+12])
                    Pexp_ident "x" (src/IL.ml[288,6839+11]..[288,6839+12])
            <case>
              pattern (src/IL.ml[289,6852+4]..[289,6852+13])
                Ppat_construct "XMagic" (src/IL.ml[289,6852+4]..[289,6852+10])
                Some
                  []
                  pattern (src/IL.ml[289,6852+11]..[289,6852+13])
                    Ppat_var "xp" (src/IL.ml[289,6852+11]..[289,6852+13])
              expression (src/IL.ml[290,6869+6]..[290,6869+29])
                Pexp_construct "EMagic" (src/IL.ml[290,6869+6]..[290,6869+12])
                Some
                  expression (src/IL.ml[290,6869+13]..[290,6869+29])
                    Pexp_apply
                    expression (src/IL.ml[290,6869+14]..[290,6869+25])
                      Pexp_ident "xparam2expr" (src/IL.ml[290,6869+14]..[290,6869+25])
                    [
                      <arg>
                      Nolabel
                        expression (src/IL.ml[290,6869+26]..[290,6869+28])
                          Pexp_ident "xp" (src/IL.ml[290,6869+26]..[290,6869+28])
                    ]
          ]
    ]
  structure_item (src/IL.ml[292,6900+0]..[296,6974+19])
    Pstr_value Rec
    [
      <def>
        pattern (src/IL.ml[292,6900+8]..[292,6900+18])
          Ppat_var "xparam2pat" (src/IL.ml[292,6900+8]..[292,6900+18])
        expression (src/IL.ml[292,6900+21]..[296,6974+19])
          Pexp_function
          [
            <case>
              pattern (src/IL.ml[293,6930+4]..[293,6930+10])
                Ppat_construct "XVar" (src/IL.ml[293,6930+4]..[293,6930+8])
                Some
                  []
                  pattern (src/IL.ml[293,6930+9]..[293,6930+10])
                    Ppat_var "x" (src/IL.ml[293,6930+9]..[293,6930+10])
              expression (src/IL.ml[294,6944+6]..[294,6944+12])
                Pexp_construct "PVar" (src/IL.ml[294,6944+6]..[294,6944+10])
                Some
                  expression (src/IL.ml[294,6944+11]..[294,6944+12])
                    Pexp_ident "x" (src/IL.ml[294,6944+11]..[294,6944+12])
            <case>
              pattern (src/IL.ml[295,6957+4]..[295,6957+13])
                Ppat_construct "XMagic" (src/IL.ml[295,6957+4]..[295,6957+10])
                Some
                  []
                  pattern (src/IL.ml[295,6957+11]..[295,6957+13])
                    Ppat_var "xp" (src/IL.ml[295,6957+11]..[295,6957+13])
              expression (src/IL.ml[296,6974+6]..[296,6974+19])
                Pexp_apply
                expression (src/IL.ml[296,6974+6]..[296,6974+16])
                  Pexp_ident "xparam2pat" (src/IL.ml[296,6974+6]..[296,6974+16])
                [
                  <arg>
                  Nolabel
                    expression (src/IL.ml[296,6974+17]..[296,6974+19])
                      Pexp_ident "xp" (src/IL.ml[296,6974+17]..[296,6974+19])
                ]
          ]
    ]
  structure_item (src/IL.ml[298,7010+0]..[299,7025+13])
    Pstr_type Rec
    [
      type_declaration "xparams" (src/IL.ml[298,7010+5]..[298,7010+12]) (src/IL.ml[298,7010+0]..[299,7025+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[299,7025+2]..[299,7025+13])
              Ptyp_constr "list" (src/IL.ml[299,7025+9]..[299,7025+13])
              [
                core_type (src/IL.ml[299,7025+2]..[299,7025+8])
                  Ptyp_constr "xparam" (src/IL.ml[299,7025+2]..[299,7025+8])
                  []
              ]
    ]
  structure_item (src/IL.ml[301,7040+0]..[302,7064+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[301,7040+4]..[301,7040+17])
          Ppat_var "xparams2exprs" (src/IL.ml[301,7040+4]..[301,7040+17])
        expression (src/IL.ml[301,7040+18]..[302,7064+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/IL.ml[301,7040+18]..[301,7040+21])
            Ppat_var "xps" (src/IL.ml[301,7040+18]..[301,7040+21])
          expression (src/IL.ml[302,7064+2]..[302,7064+26])
            Pexp_apply
            expression (src/IL.ml[302,7064+2]..[302,7064+10])
              Pexp_ident "List.map" (src/IL.ml[302,7064+2]..[302,7064+10])
            [
              <arg>
              Nolabel
                expression (src/IL.ml[302,7064+11]..[302,7064+22])
                  Pexp_ident "xparam2expr" (src/IL.ml[302,7064+11]..[302,7064+22])
              <arg>
              Nolabel
                expression (src/IL.ml[302,7064+23]..[302,7064+26])
                  Pexp_ident "xps" (src/IL.ml[302,7064+23]..[302,7064+26])
            ]
    ]
  structure_item (src/IL.ml[304,7092+0]..[305,7115+25])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[304,7092+4]..[304,7092+16])
          Ppat_var "xparams2pats" (src/IL.ml[304,7092+4]..[304,7092+16])
        expression (src/IL.ml[304,7092+17]..[305,7115+25]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/IL.ml[304,7092+17]..[304,7092+20])
            Ppat_var "xps" (src/IL.ml[304,7092+17]..[304,7092+20])
          expression (src/IL.ml[305,7115+2]..[305,7115+25])
            Pexp_apply
            expression (src/IL.ml[305,7115+2]..[305,7115+10])
              Pexp_ident "List.map" (src/IL.ml[305,7115+2]..[305,7115+10])
            [
              <arg>
              Nolabel
                expression (src/IL.ml[305,7115+11]..[305,7115+21])
                  Pexp_ident "xparam2pat" (src/IL.ml[305,7115+11]..[305,7115+21])
              <arg>
              Nolabel
                expression (src/IL.ml[305,7115+22]..[305,7115+25])
                  Pexp_ident "xps" (src/IL.ml[305,7115+22]..[305,7115+25])
            ]
    ]
]

open Positions
type interface = interface_item list
and interface_item =
  | IIFunctor of Stretch.t list * interface 
  | IIExcDecls of excdef list 
  | IITypeDecls of typedef list 
  | IIValDecls of (string * typescheme) list 
  | IIInclude of module_type 
  | IIModule of string * module_type 
  | IIComment of string 
and module_type =
  | MTNamedModuleType of string 
  | MTWithType of module_type * string list * string * with_kind * typ 
  | MTSigEnd of interface 
and with_kind =
  | WKNonDestructive 
  | WKDestructive 
and excdef = {
  excname: string ;
  exceq: string option }
and typedef =
  {
  typename: string ;
  typeparams: string list ;
  typerhs: typedefrhs ;
  typeconstraint: (typ * typ) option }
and typedefrhs =
  | TDefRecord of fielddef list 
  | TDefSum of datadef list 
  | TAbbrev of typ 
and fielddef = {
  modifiable: bool ;
  fieldname: string ;
  fieldtype: typescheme }
and datadef =
  {
  dataname: string ;
  datavalparams: typ list ;
  datatypeparams: typ list option }
and typ =
  | TypTextual of Stretch.ocamltype 
  | TypVar of string 
  | TypApp of string * typ list 
  | TypTuple of typ list 
  | TypArrow of typ * typ 
and typescheme = {
  quantifiers: string list ;
  body: typ }
and valdef = {
  valpublic: bool ;
  valpat: pattern ;
  valval: expr }
and expr =
  | EVar of string 
  | EFun of pattern list * expr 
  | EApp of expr * expr list 
  | ELet of (pattern * expr) list * expr 
  | EMatch of expr * branch list 
  | EIfThen of expr * expr 
  | EIfThenElse of expr * expr * expr 
  | ERaise of expr 
  | ETry of expr * branch list 
  | EUnit 
  | EIntConst of int 
  | EStringConst of string 
  | EData of string * expr list 
  | ETuple of expr list 
  | EAnnot of expr * typescheme 
  | EMagic of expr 
  | ERepr of expr 
  | ERecord of (string * expr) list 
  | ERecordAccess of expr * string 
  | ERecordWrite of expr * string * expr 
  | ETextual of Stretch.t 
  | EComment of string * expr 
  | EPatComment of string * pattern * expr 
  | EArray of expr list 
  | EArrayAccess of expr * expr 
and branch = {
  branchpat: pattern ;
  branchbody: expr }
and pattern =
  | PWildcard 
  | PVar of string 
  | PVarLocated of string located 
  | PUnit 
  | PData of string * pattern list 
  | PTuple of pattern list 
  | PRecord of (string * pattern) list 
  | POr of pattern list 
  | PAnnot of pattern * typ 
and modexpr =
  | MVar of string 
  | MStruct of structure 
  | MApp of modexpr * modexpr 
and program = structure
and structure = structure_item list
and structure_item =
  | SIFunctor of Stretch.t list * structure 
  | SIExcDefs of excdef list 
  | SITypeDefs of typedef list 
  | SIValDefs of bool * valdef list 
  | SIStretch of Stretch.t list 
  | SIModuleDef of string * modexpr 
  | SIInclude of modexpr 
  | SIComment of string 
type xparam =
  | XVar of string 
  | XMagic of xparam 
let xvar x = XVar x
let xmagic xp = XMagic xp
let rec xparam2expr =
  function | XVar x -> EVar x | XMagic xp -> EMagic (xparam2expr xp)
let rec xparam2pat = function | XVar x -> PVar x | XMagic xp -> xparam2pat xp
type xparams = xparam list
let xparams2exprs xps = List.map xparam2expr xps
let xparams2pats xps = List.map xparam2pat xps
[
  structure_item (src/IL.ml[14,992+0]..src/IL.ml[14,992+14])
    Tstr_open Fresh
    module_expr (src/IL.ml[14,992+5]..src/IL.ml[14,992+14])
      Tmod_ident "Dune__exe!.Positions"
  structure_item (src/IL.ml[18,1073+0]..src/IL.ml[271,6533+23])
    Tstr_type Rec
    [
      type_declaration interface/432 (src/IL.ml[18,1073+0]..src/IL.ml[19,1090+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[19,1090+2]..src/IL.ml[19,1090+21])
              Ttyp_constr "list/9!"
              [
                core_type (src/IL.ml[19,1090+2]..src/IL.ml[19,1090+16])
                  Ttyp_constr "interface_item/433"
                  []
              ]
      type_declaration interface_item/433 (src/IL.ml[21,1113+0]..src/IL.ml[35,1625+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[23,1210+2]..src/IL.ml[23,1210+43])
                IIFunctor/451
                [
                  core_type (src/IL.ml[23,1210+17]..src/IL.ml[23,1210+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[23,1210+17]..src/IL.ml[23,1210+26])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
                  core_type (src/IL.ml[23,1210+34]..src/IL.ml[23,1210+43])
                    Ttyp_constr "interface/432"
                    []
                ]
                None
              (src/IL.ml[25,1288+2]..src/IL.ml[25,1288+29])
                IIExcDecls/454
                [
                  core_type (src/IL.ml[25,1288+18]..src/IL.ml[25,1288+29])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[25,1288+18]..src/IL.ml[25,1288+24])
                        Ttyp_constr "excdef/436"
                        []
                    ]
                ]
                None
              (src/IL.ml[27,1383+2]..src/IL.ml[27,1383+31])
                IITypeDecls/455
                [
                  core_type (src/IL.ml[27,1383+19]..src/IL.ml[27,1383+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[27,1383+19]..src/IL.ml[27,1383+26])
                        Ttyp_constr "typedef/437"
                        []
                    ]
                ]
                None
              (src/IL.ml[29,1445+2]..src/IL.ml[29,1445+44])
                IIValDecls/456
                [
                  core_type (src/IL.ml[29,1445+18]..src/IL.ml[29,1445+44])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[29,1445+19]..src/IL.ml[29,1445+38])
                        Ttyp_tuple
                        [
                          core_type (src/IL.ml[29,1445+19]..src/IL.ml[29,1445+25])
                            Ttyp_constr "string/15!"
                            []
                          core_type (src/IL.ml[29,1445+28]..src/IL.ml[29,1445+38])
                            Ttyp_constr "typescheme/442"
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[31,1519+2]..src/IL.ml[31,1519+28])
                IIInclude/457
                [
                  core_type (src/IL.ml[31,1519+17]..src/IL.ml[31,1519+28])
                    Ttyp_constr "module_type/434"
                    []
                ]
                None
              (src/IL.ml[33,1569+2]..src/IL.ml[33,1569+36])
                IIModule/458
                [
                  core_type (src/IL.ml[33,1569+16]..src/IL.ml[33,1569+22])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[33,1569+25]..src/IL.ml[33,1569+36])
                    Ttyp_constr "module_type/434"
                    []
                ]
                None
              (src/IL.ml[35,1625+2]..src/IL.ml[35,1625+23])
                IIComment/459
                [
                  core_type (src/IL.ml[35,1625+17]..src/IL.ml[35,1625+23])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration module_type/434 (src/IL.ml[37,1650+0]..src/IL.ml[40,1771+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[38,1668+2]..src/IL.ml[38,1668+31])
                MTNamedModuleType/460
                [
                  core_type (src/IL.ml[38,1668+25]..src/IL.ml[38,1668+31])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[39,1700+2]..src/IL.ml[39,1700+70])
                MTWithType/461
                [
                  core_type (src/IL.ml[39,1700+18]..src/IL.ml[39,1700+29])
                    Ttyp_constr "module_type/434"
                    []
                  core_type (src/IL.ml[39,1700+32]..src/IL.ml[39,1700+43])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[39,1700+32]..src/IL.ml[39,1700+38])
                        Ttyp_constr "string/15!"
                        []
                    ]
                  core_type (src/IL.ml[39,1700+46]..src/IL.ml[39,1700+52])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[39,1700+55]..src/IL.ml[39,1700+64])
                    Ttyp_constr "with_kind/435"
                    []
                  core_type (src/IL.ml[39,1700+67]..src/IL.ml[39,1700+70])
                    Ttyp_constr "typ/441"
                    []
                ]
                None
              (src/IL.ml[40,1771+2]..src/IL.ml[40,1771+25])
                MTSigEnd/462
                [
                  core_type (src/IL.ml[40,1771+16]..src/IL.ml[40,1771+25])
                    Ttyp_constr "interface/432"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration with_kind/435 (src/IL.ml[42,1798+0]..src/IL.ml[44,1843+17])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[43,1814+2]..src/IL.ml[43,1814+20])
                WKNonDestructive/463
                []
                None
              (src/IL.ml[44,1843+2]..src/IL.ml[44,1843+17])
                WKDestructive/464
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration excdef/436 (src/IL.ml[46,1873+0]..src/IL.ml[54,2000+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[49,1922+4]..src/IL.ml[49,1922+20])
                Immutable
                excname/465                core_type (src/IL.ml[49,1922+13]..src/IL.ml[49,1922+19])
                  Ttyp_poly
                  core_type (src/IL.ml[49,1922+13]..src/IL.ml[49,1922+19])
                    Ttyp_constr "string/15!"
                    []
              (src/IL.ml[52,1973+4]..src/IL.ml[52,1973+25])
                Immutable
                exceq/466                core_type (src/IL.ml[52,1973+11]..src/IL.ml[52,1973+24])
                  Ttyp_poly
                  core_type (src/IL.ml[52,1973+11]..src/IL.ml[52,1973+24])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/IL.ml[52,1973+11]..src/IL.ml[52,1973+17])
                        Ttyp_constr "string/15!"
                        []
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typedef/437 (src/IL.ml[56,2005+0]..src/IL.ml[72,2402+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[59,2065+4]..src/IL.ml[59,2065+21])
                Immutable
                typename/467                core_type (src/IL.ml[59,2065+14]..src/IL.ml[59,2065+20])
                  Ttyp_poly
                  core_type (src/IL.ml[59,2065+14]..src/IL.ml[59,2065+20])
                    Ttyp_constr "string/15!"
                    []
              (src/IL.ml[64,2255+4]..src/IL.ml[64,2255+28])
                Immutable
                typeparams/468                core_type (src/IL.ml[64,2255+16]..src/IL.ml[64,2255+27])
                  Ttyp_poly
                  core_type (src/IL.ml[64,2255+16]..src/IL.ml[64,2255+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[64,2255+16]..src/IL.ml[64,2255+22])
                        Ttyp_constr "string/15!"
                        []
                    ]
              (src/IL.ml[67,2314+4]..src/IL.ml[67,2314+24])
                Immutable
                typerhs/469                core_type (src/IL.ml[67,2314+13]..src/IL.ml[67,2314+23])
                  Ttyp_poly
                  core_type (src/IL.ml[67,2314+13]..src/IL.ml[67,2314+23])
                    Ttyp_constr "typedefrhs/438"
                    []
              (src/IL.ml[70,2362+4]..src/IL.ml[70,2362+38])
                Immutable
                typeconstraint/470                core_type (src/IL.ml[70,2362+20]..src/IL.ml[70,2362+38])
                  Ttyp_poly
                  core_type (src/IL.ml[70,2362+20]..src/IL.ml[70,2362+38])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/IL.ml[70,2362+21]..src/IL.ml[70,2362+30])
                        Ttyp_tuple
                        [
                          core_type (src/IL.ml[70,2362+21]..src/IL.ml[70,2362+24])
                            Ttyp_constr "typ/441"
                            []
                          core_type (src/IL.ml[70,2362+27]..src/IL.ml[70,2362+30])
                            Ttyp_constr "typ/441"
                            []
                        ]
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typedefrhs/438 (src/IL.ml[74,2407+0]..src/IL.ml[77,2484+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[75,2424+2]..src/IL.ml[75,2424+31])
                TDefRecord/471
                [
                  core_type (src/IL.ml[75,2424+18]..src/IL.ml[75,2424+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[75,2424+18]..src/IL.ml[75,2424+26])
                        Ttyp_constr "fielddef/439"
                        []
                    ]
                ]
                None
              (src/IL.ml[76,2456+2]..src/IL.ml[76,2456+27])
                TDefSum/472
                [
                  core_type (src/IL.ml[76,2456+15]..src/IL.ml[76,2456+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[76,2456+15]..src/IL.ml[76,2456+22])
                        Ttyp_constr "datadef/440"
                        []
                    ]
                ]
                None
              (src/IL.ml[77,2484+2]..src/IL.ml[77,2484+18])
                TAbbrev/473
                [
                  core_type (src/IL.ml[77,2484+15]..src/IL.ml[77,2484+18])
                    Ttyp_constr "typ/441"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration fielddef/439 (src/IL.ml[79,2504+0]..src/IL.ml[90,2694+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[82,2562+4]..src/IL.ml[82,2562+21])
                Immutable
                modifiable/474                core_type (src/IL.ml[82,2562+16]..src/IL.ml[82,2562+20])
                  Ttyp_poly
                  core_type (src/IL.ml[82,2562+16]..src/IL.ml[82,2562+20])
                    Ttyp_constr "bool/5!"
                    []
              (src/IL.ml[85,2614+4]..src/IL.ml[85,2614+22])
                Immutable
                fieldname/475                core_type (src/IL.ml[85,2614+15]..src/IL.ml[85,2614+21])
                  Ttyp_poly
                  core_type (src/IL.ml[85,2614+15]..src/IL.ml[85,2614+21])
                    Ttyp_constr "string/15!"
                    []
              (src/IL.ml[88,2667+4]..src/IL.ml[88,2667+25])
                Immutable
                fieldtype/476                core_type (src/IL.ml[88,2667+15]..src/IL.ml[88,2667+25])
                  Ttyp_poly
                  core_type (src/IL.ml[88,2667+15]..src/IL.ml[88,2667+25])
                    Ttyp_constr "typescheme/442"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration datadef/440 (src/IL.ml[92,2699+0]..src/IL.ml[104,2991+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[95,2756+4]..src/IL.ml[95,2756+21])
                Immutable
                dataname/477                core_type (src/IL.ml[95,2756+14]..src/IL.ml[95,2756+20])
                  Ttyp_poly
                  core_type (src/IL.ml[95,2756+14]..src/IL.ml[95,2756+20])
                    Ttyp_constr "string/15!"
                    []
              (src/IL.ml[98,2820+4]..src/IL.ml[98,2820+28])
                Immutable
                datavalparams/478                core_type (src/IL.ml[98,2820+19]..src/IL.ml[98,2820+27])
                  Ttyp_poly
                  core_type (src/IL.ml[98,2820+19]..src/IL.ml[98,2820+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[98,2820+19]..src/IL.ml[98,2820+22])
                        Ttyp_constr "typ/441"
                        []
                    ]
              (src/IL.ml[102,2953+4]..src/IL.ml[102,2953+36])
                Immutable
                datatypeparams/479                core_type (src/IL.ml[102,2953+20]..src/IL.ml[102,2953+35])
                  Ttyp_poly
                  core_type (src/IL.ml[102,2953+20]..src/IL.ml[102,2953+35])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/IL.ml[102,2953+20]..src/IL.ml[102,2953+28])
                        Ttyp_constr "list/9!"
                        [
                          core_type (src/IL.ml[102,2953+20]..src/IL.ml[102,2953+23])
                            Ttyp_constr "typ/441"
                            []
                        ]
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typ/441 (src/IL.ml[106,2996+0]..src/IL.ml[121,3324+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[109,3035+2]..src/IL.ml[109,3035+35])
                TypTextual/480
                [
                  core_type (src/IL.ml[109,3035+18]..src/IL.ml[109,3035+35])
                    Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                    []
                ]
                None
              (src/IL.ml[112,3139+2]..src/IL.ml[112,3139+20])
                TypVar/481
                [
                  core_type (src/IL.ml[112,3139+14]..src/IL.ml[112,3139+20])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[115,3220+2]..src/IL.ml[115,3220+31])
                TypApp/482
                [
                  core_type (src/IL.ml[115,3220+14]..src/IL.ml[115,3220+20])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[115,3220+23]..src/IL.ml[115,3220+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[115,3220+23]..src/IL.ml[115,3220+26])
                        Ttyp_constr "typ/441"
                        []
                    ]
                ]
                None
              (src/IL.ml[118,3278+2]..src/IL.ml[118,3278+24])
                TypTuple/483
                [
                  core_type (src/IL.ml[118,3278+16]..src/IL.ml[118,3278+24])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[118,3278+16]..src/IL.ml[118,3278+19])
                        Ttyp_constr "typ/441"
                        []
                    ]
                ]
                None
              (src/IL.ml[121,3324+2]..src/IL.ml[121,3324+25])
                TypArrow/484
                [
                  core_type (src/IL.ml[121,3324+16]..src/IL.ml[121,3324+19])
                    Ttyp_constr "typ/441"
                    []
                  core_type (src/IL.ml[121,3324+22]..src/IL.ml[121,3324+25])
                    Ttyp_constr "typ/441"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typescheme/442 (src/IL.ml[123,3351+0]..src/IL.ml[131,3483+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[126,3426+2]..src/IL.ml[126,3426+27])
                Immutable
                quantifiers/485                core_type (src/IL.ml[126,3426+15]..src/IL.ml[126,3426+26])
                  Ttyp_poly
                  core_type (src/IL.ml[126,3426+15]..src/IL.ml[126,3426+26])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[126,3426+15]..src/IL.ml[126,3426+21])
                        Ttyp_constr "string/15!"
                        []
                    ]
              (src/IL.ml[129,3469+2]..src/IL.ml[129,3469+12])
                Immutable
                body/486                core_type (src/IL.ml[129,3469+8]..src/IL.ml[129,3469+11])
                  Ttyp_poly
                  core_type (src/IL.ml[129,3469+8]..src/IL.ml[129,3469+11])
                    Ttyp_constr "typ/441"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration valdef/443 (src/IL.ml[133,3488+0]..src/IL.ml[147,3780+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[139,3651+2]..src/IL.ml[139,3651+18])
                Immutable
                valpublic/487                core_type (src/IL.ml[139,3651+13]..src/IL.ml[139,3651+17])
                  Ttyp_poly
                  core_type (src/IL.ml[139,3651+13]..src/IL.ml[139,3651+17])
                    Ttyp_constr "bool/5!"
                    []
              (src/IL.ml[142,3708+2]..src/IL.ml[142,3708+18])
                Immutable
                valpat/488                core_type (src/IL.ml[142,3708+10]..src/IL.ml[142,3708+17])
                  Ttyp_poly
                  core_type (src/IL.ml[142,3708+10]..src/IL.ml[142,3708+17])
                    Ttyp_constr "pattern/446"
                    []
              (src/IL.ml[145,3764+2]..src/IL.ml[145,3764+14])
                Immutable
                valval/489                core_type (src/IL.ml[145,3764+10]..src/IL.ml[145,3764+14])
                  Ttyp_poly
                  core_type (src/IL.ml[145,3764+10]..src/IL.ml[145,3764+14])
                    Ttyp_constr "expr/444"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration expr/444 (src/IL.ml[149,3785+0]..src/IL.ml[205,5032+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[152,3815+2]..src/IL.ml[152,3815+18])
                EVar/490
                [
                  core_type (src/IL.ml[152,3815+12]..src/IL.ml[152,3815+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[155,3853+2]..src/IL.ml[155,3853+31])
                EFun/491
                [
                  core_type (src/IL.ml[155,3853+12]..src/IL.ml[155,3853+24])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[155,3853+12]..src/IL.ml[155,3853+19])
                        Ttyp_constr "pattern/446"
                        []
                    ]
                  core_type (src/IL.ml[155,3853+27]..src/IL.ml[155,3853+31])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[158,3909+2]..src/IL.ml[158,3909+28])
                EApp/492
                [
                  core_type (src/IL.ml[158,3909+12]..src/IL.ml[158,3909+16])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[158,3909+19]..src/IL.ml[158,3909+28])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[158,3909+19]..src/IL.ml[158,3909+23])
                        Ttyp_constr "expr/444"
                        []
                    ]
                ]
                None
              (src/IL.ml[162,4019+2]..src/IL.ml[162,4019+40])
                ELet/493
                [
                  core_type (src/IL.ml[162,4019+12]..src/IL.ml[162,4019+33])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[162,4019+13]..src/IL.ml[162,4019+27])
                        Ttyp_tuple
                        [
                          core_type (src/IL.ml[162,4019+13]..src/IL.ml[162,4019+20])
                            Ttyp_constr "pattern/446"
                            []
                          core_type (src/IL.ml[162,4019+23]..src/IL.ml[162,4019+27])
                            Ttyp_constr "expr/444"
                            []
                        ]
                    ]
                  core_type (src/IL.ml[162,4019+36]..src/IL.ml[162,4019+40])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[165,4084+2]..src/IL.ml[165,4084+32])
                EMatch/494
                [
                  core_type (src/IL.ml[165,4084+14]..src/IL.ml[165,4084+18])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[165,4084+21]..src/IL.ml[165,4084+32])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[165,4084+21]..src/IL.ml[165,4084+27])
                        Ttyp_constr "branch/445"
                        []
                    ]
                ]
                None
              (src/IL.ml[166,4117+2]..src/IL.ml[166,4117+26])
                EIfThen/495
                [
                  core_type (src/IL.ml[166,4117+15]..src/IL.ml[166,4117+19])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[166,4117+22]..src/IL.ml[166,4117+26])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[167,4144+2]..src/IL.ml[167,4144+37])
                EIfThenElse/496
                [
                  core_type (src/IL.ml[167,4144+19]..src/IL.ml[167,4144+23])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[167,4144+26]..src/IL.ml[167,4144+30])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[167,4144+33]..src/IL.ml[167,4144+37])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[170,4211+2]..src/IL.ml[170,4211+18])
                ERaise/497
                [
                  core_type (src/IL.ml[170,4211+14]..src/IL.ml[170,4211+18])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[173,4259+2]..src/IL.ml[173,4259+30])
                ETry/498
                [
                  core_type (src/IL.ml[173,4259+12]..src/IL.ml[173,4259+16])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[173,4259+19]..src/IL.ml[173,4259+30])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[173,4259+19]..src/IL.ml[173,4259+25])
                        Ttyp_constr "branch/445"
                        []
                    ]
                ]
                None
              (src/IL.ml[178,4435+2]..src/IL.ml[178,4435+9])
                EUnit/499
                []
                None
              (src/IL.ml[179,4445+2]..src/IL.ml[179,4445+20])
                EIntConst/500
                [
                  core_type (src/IL.ml[179,4445+17]..src/IL.ml[179,4445+20])
                    Ttyp_constr "int/1!"
                    []
                ]
                None
              (src/IL.ml[180,4466+2]..src/IL.ml[180,4466+26])
                EStringConst/501
                [
                  core_type (src/IL.ml[180,4466+20]..src/IL.ml[180,4466+26])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[181,4493+2]..src/IL.ml[181,4493+31])
                EData/502
                [
                  core_type (src/IL.ml[181,4493+13]..src/IL.ml[181,4493+19])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[181,4493+22]..src/IL.ml[181,4493+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[181,4493+22]..src/IL.ml[181,4493+26])
                        Ttyp_constr "expr/444"
                        []
                    ]
                ]
                None
              (src/IL.ml[182,4525+2]..src/IL.ml[182,4525+23])
                ETuple/503
                [
                  core_type (src/IL.ml[182,4525+14]..src/IL.ml[182,4525+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[182,4525+14]..src/IL.ml[182,4525+18])
                        Ttyp_constr "expr/444"
                        []
                    ]
                ]
                None
              (src/IL.ml[185,4575+2]..src/IL.ml[185,4575+31])
                EAnnot/504
                [
                  core_type (src/IL.ml[185,4575+14]..src/IL.ml[185,4575+18])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[185,4575+21]..src/IL.ml[185,4575+31])
                    Ttyp_constr "typescheme/442"
                    []
                ]
                None
              (src/IL.ml[188,4645+2]..src/IL.ml[188,4645+18])
                EMagic/505
                [
                  core_type (src/IL.ml[188,4645+14]..src/IL.ml[188,4645+18])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[189,4680+2]..src/IL.ml[189,4680+17])
                ERepr/506
                [
                  core_type (src/IL.ml[189,4680+13]..src/IL.ml[189,4680+17])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[192,4732+2]..src/IL.ml[192,4732+35])
                ERecord/507
                [
                  core_type (src/IL.ml[192,4732+15]..src/IL.ml[192,4732+35])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[192,4732+16]..src/IL.ml[192,4732+29])
                        Ttyp_tuple
                        [
                          core_type (src/IL.ml[192,4732+16]..src/IL.ml[192,4732+22])
                            Ttyp_constr "string/15!"
                            []
                          core_type (src/IL.ml[192,4732+25]..src/IL.ml[192,4732+29])
                            Ttyp_constr "expr/444"
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[193,4768+2]..src/IL.ml[193,4768+34])
                ERecordAccess/508
                [
                  core_type (src/IL.ml[193,4768+21]..src/IL.ml[193,4768+25])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[193,4768+28]..src/IL.ml[193,4768+34])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[194,4803+2]..src/IL.ml[194,4803+40])
                ERecordWrite/509
                [
                  core_type (src/IL.ml[194,4803+20]..src/IL.ml[194,4803+24])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[194,4803+27]..src/IL.ml[194,4803+33])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[194,4803+36]..src/IL.ml[194,4803+40])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[197,4873+2]..src/IL.ml[197,4873+25])
                ETextual/510
                [
                  core_type (src/IL.ml[197,4873+16]..src/IL.ml[197,4873+25])
                    Ttyp_constr "Dune__exe!.Stretch.t"
                    []
                ]
                None
              (src/IL.ml[200,4918+2]..src/IL.ml[200,4918+29])
                EComment/511
                [
                  core_type (src/IL.ml[200,4918+16]..src/IL.ml[200,4918+22])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[200,4918+25]..src/IL.ml[200,4918+29])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[201,4948+2]..src/IL.ml[201,4948+42])
                EPatComment/512
                [
                  core_type (src/IL.ml[201,4948+19]..src/IL.ml[201,4948+25])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[201,4948+28]..src/IL.ml[201,4948+35])
                    Ttyp_constr "pattern/446"
                    []
                  core_type (src/IL.ml[201,4948+38]..src/IL.ml[201,4948+42])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
              (src/IL.ml[204,5008+2]..src/IL.ml[204,5008+23])
                EArray/513
                [
                  core_type (src/IL.ml[204,5008+14]..src/IL.ml[204,5008+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[204,5008+14]..src/IL.ml[204,5008+18])
                        Ttyp_constr "expr/444"
                        []
                    ]
                ]
                None
              (src/IL.ml[205,5032+2]..src/IL.ml[205,5032+31])
                EArrayAccess/514
                [
                  core_type (src/IL.ml[205,5032+20]..src/IL.ml[205,5032+24])
                    Ttyp_constr "expr/444"
                    []
                  core_type (src/IL.ml[205,5032+27]..src/IL.ml[205,5032+31])
                    Ttyp_constr "expr/444"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration branch/445 (src/IL.ml[207,5065+0]..src/IL.ml[215,5170+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/IL.ml[210,5105+2]..src/IL.ml[210,5105+21])
                Immutable
                branchpat/515                core_type (src/IL.ml[210,5105+13]..src/IL.ml[210,5105+20])
                  Ttyp_poly
                  core_type (src/IL.ml[210,5105+13]..src/IL.ml[210,5105+20])
                    Ttyp_constr "pattern/446"
                    []
              (src/IL.ml[213,5149+2]..src/IL.ml[213,5149+19])
                Immutable
                branchbody/516                core_type (src/IL.ml[213,5149+14]..src/IL.ml[213,5149+18])
                  Ttyp_poly
                  core_type (src/IL.ml[213,5149+14]..src/IL.ml[213,5149+18])
                    Ttyp_constr "expr/444"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration pattern/446 (src/IL.ml[217,5175+0]..src/IL.ml[238,5686+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[220,5208+2]..src/IL.ml[220,5208+13])
                PWildcard/517
                []
                None
              (src/IL.ml[223,5241+2]..src/IL.ml[223,5241+18])
                PVar/518
                [
                  core_type (src/IL.ml[223,5241+12]..src/IL.ml[223,5241+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[224,5260+2]..src/IL.ml[224,5260+33])
                PVarLocated/519
                [
                  core_type (src/IL.ml[224,5260+19]..src/IL.ml[224,5260+33])
                    Ttyp_constr "Dune__exe!.Positions.located"
                    [
                      core_type (src/IL.ml[224,5260+19]..src/IL.ml[224,5260+25])
                        Ttyp_constr "string/15!"
                        []
                    ]
                ]
                None
              (src/IL.ml[229,5503+2]..src/IL.ml[229,5503+9])
                PUnit/520
                []
                None
              (src/IL.ml[230,5513+2]..src/IL.ml[230,5513+34])
                PData/521
                [
                  core_type (src/IL.ml[230,5513+13]..src/IL.ml[230,5513+19])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[230,5513+22]..src/IL.ml[230,5513+34])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[230,5513+22]..src/IL.ml[230,5513+29])
                        Ttyp_constr "pattern/446"
                        []
                    ]
                ]
                None
              (src/IL.ml[231,5548+2]..src/IL.ml[231,5548+26])
                PTuple/522
                [
                  core_type (src/IL.ml[231,5548+14]..src/IL.ml[231,5548+26])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[231,5548+14]..src/IL.ml[231,5548+21])
                        Ttyp_constr "pattern/446"
                        []
                    ]
                ]
                None
              (src/IL.ml[232,5575+2]..src/IL.ml[232,5575+38])
                PRecord/523
                [
                  core_type (src/IL.ml[232,5575+15]..src/IL.ml[232,5575+38])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[232,5575+16]..src/IL.ml[232,5575+32])
                        Ttyp_tuple
                        [
                          core_type (src/IL.ml[232,5575+16]..src/IL.ml[232,5575+22])
                            Ttyp_constr "string/15!"
                            []
                          core_type (src/IL.ml[232,5575+25]..src/IL.ml[232,5575+32])
                            Ttyp_constr "pattern/446"
                            []
                        ]
                    ]
                ]
                None
              (src/IL.ml[235,5636+2]..src/IL.ml[235,5636+23])
                POr/524
                [
                  core_type (src/IL.ml[235,5636+11]..src/IL.ml[235,5636+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[235,5636+11]..src/IL.ml[235,5636+18])
                        Ttyp_constr "pattern/446"
                        []
                    ]
                ]
                None
              (src/IL.ml[238,5686+2]..src/IL.ml[238,5686+27])
                PAnnot/525
                [
                  core_type (src/IL.ml[238,5686+14]..src/IL.ml[238,5686+21])
                    Ttyp_constr "pattern/446"
                    []
                  core_type (src/IL.ml[238,5686+24]..src/IL.ml[238,5686+27])
                    Ttyp_constr "typ/441"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration modexpr/447 (src/IL.ml[242,5742+0]..src/IL.ml[245,5804+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[243,5756+4]..src/IL.ml[243,5756+20])
                MVar/526
                [
                  core_type (src/IL.ml[243,5756+14]..src/IL.ml[243,5756+20])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[244,5777+4]..src/IL.ml[244,5777+26])
                MStruct/527
                [
                  core_type (src/IL.ml[244,5777+17]..src/IL.ml[244,5777+26])
                    Ttyp_constr "structure/449"
                    []
                ]
                None
              (src/IL.ml[245,5804+4]..src/IL.ml[245,5804+31])
                MApp/528
                [
                  core_type (src/IL.ml[245,5804+14]..src/IL.ml[245,5804+21])
                    Ttyp_constr "modexpr/447"
                    []
                  core_type (src/IL.ml[245,5804+24]..src/IL.ml[245,5804+31])
                    Ttyp_constr "modexpr/447"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration program/448 (src/IL.ml[249,5856+0]..src/IL.ml[250,5870+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[250,5870+4]..src/IL.ml[250,5870+13])
              Ttyp_constr "structure/449"
              []
      type_declaration structure/449 (src/IL.ml[252,5885+0]..src/IL.ml[253,5901+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[253,5901+4]..src/IL.ml[253,5901+23])
              Ttyp_constr "list/9!"
              [
                core_type (src/IL.ml[253,5901+4]..src/IL.ml[253,5901+18])
                  Ttyp_constr "structure_item/450"
                  []
              ]
      type_declaration structure_item/450 (src/IL.ml[255,5926+0]..src/IL.ml[271,6533+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[257,6023+2]..src/IL.ml[257,6023+43])
                SIFunctor/529
                [
                  core_type (src/IL.ml[257,6023+17]..src/IL.ml[257,6023+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[257,6023+17]..src/IL.ml[257,6023+26])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
                  core_type (src/IL.ml[257,6023+34]..src/IL.ml[257,6023+43])
                    Ttyp_constr "structure/449"
                    []
                ]
                None
              (src/IL.ml[259,6100+2]..src/IL.ml[259,6100+28])
                SIExcDefs/530
                [
                  core_type (src/IL.ml[259,6100+17]..src/IL.ml[259,6100+28])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[259,6100+17]..src/IL.ml[259,6100+23])
                        Ttyp_constr "excdef/436"
                        []
                    ]
                ]
                None
              (src/IL.ml[261,6193+2]..src/IL.ml[261,6193+30])
                SITypeDefs/531
                [
                  core_type (src/IL.ml[261,6193+18]..src/IL.ml[261,6193+30])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[261,6193+18]..src/IL.ml[261,6193+25])
                        Ttyp_constr "typedef/437"
                        []
                    ]
                ]
                None
              (src/IL.ml[263,6298+2]..src/IL.ml[263,6298+35])
                SIValDefs/532
                [
                  core_type (src/IL.ml[263,6298+17]..src/IL.ml[263,6298+21])
                    Ttyp_constr "bool/5!"
                    []
                  core_type (src/IL.ml[263,6298+24]..src/IL.ml[263,6298+35])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[263,6298+24]..src/IL.ml[263,6298+30])
                        Ttyp_constr "valdef/443"
                        []
                    ]
                ]
                None
              (src/IL.ml[265,6360+2]..src/IL.ml[265,6360+31])
                SIStretch/533
                [
                  core_type (src/IL.ml[265,6360+17]..src/IL.ml[265,6360+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/IL.ml[265,6360+17]..src/IL.ml[265,6360+26])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
                ]
                None
              (src/IL.ml[267,6425+2]..src/IL.ml[267,6425+35])
                SIModuleDef/534
                [
                  core_type (src/IL.ml[267,6425+19]..src/IL.ml[267,6425+25])
                    Ttyp_constr "string/15!"
                    []
                  core_type (src/IL.ml[267,6425+28]..src/IL.ml[267,6425+35])
                    Ttyp_constr "modexpr/447"
                    []
                ]
                None
              (src/IL.ml[269,6489+2]..src/IL.ml[269,6489+24])
                SIInclude/535
                [
                  core_type (src/IL.ml[269,6489+17]..src/IL.ml[269,6489+24])
                    Ttyp_constr "modexpr/447"
                    []
                ]
                None
              (src/IL.ml[271,6533+2]..src/IL.ml[271,6533+23])
                SIComment/536
                [
                  core_type (src/IL.ml[271,6533+17]..src/IL.ml[271,6533+23])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/IL.ml[276,6687+0]..src/IL.ml[278,6720+20])
    Tstr_type Rec
    [
      type_declaration xparam/574 (src/IL.ml[276,6687+0]..src/IL.ml[278,6720+20])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/IL.ml[277,6701+2]..src/IL.ml[277,6701+18])
                XVar/575
                [
                  core_type (src/IL.ml[277,6701+12]..src/IL.ml[277,6701+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (src/IL.ml[278,6720+2]..src/IL.ml[278,6720+20])
                XMagic/576
                [
                  core_type (src/IL.ml[278,6720+14]..src/IL.ml[278,6720+20])
                    Ttyp_constr "xparam/574"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/IL.ml[280,6742+0]..src/IL.ml[281,6755+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[280,6742+4]..src/IL.ml[280,6742+8])
          Tpat_var "xvar/577"
        expression (src/IL.ml[280,6742+9]..src/IL.ml[281,6755+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[280,6742+9]..src/IL.ml[280,6742+10])
                Tpat_var "x/579"
              expression (src/IL.ml[281,6755+2]..src/IL.ml[281,6755+8])
                Texp_construct "XVar"
                [
                  expression (src/IL.ml[281,6755+7]..src/IL.ml[281,6755+8])
                    Texp_ident "x/579"
                ]
          ]
    ]
  structure_item (src/IL.ml[283,6765+0]..src/IL.ml[284,6781+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[283,6765+4]..src/IL.ml[283,6765+10])
          Tpat_var "xmagic/580"
        expression (src/IL.ml[283,6765+11]..src/IL.ml[284,6781+11]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[283,6765+11]..src/IL.ml[283,6765+13])
                Tpat_var "xp/582"
              expression (src/IL.ml[284,6781+2]..src/IL.ml[284,6781+11])
                Texp_construct "XMagic"
                [
                  expression (src/IL.ml[284,6781+9]..src/IL.ml[284,6781+11])
                    Texp_ident "xp/582"
                ]
          ]
    ]
  structure_item (src/IL.ml[286,6794+0]..src/IL.ml[290,6869+29])
    Tstr_value Rec
    [
      <def>
        pattern (src/IL.ml[286,6794+8]..src/IL.ml[286,6794+19])
          Tpat_var "xparam2expr/583"
        expression (src/IL.ml[286,6794+22]..src/IL.ml[290,6869+29])
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[287,6825+4]..src/IL.ml[287,6825+10])
                Tpat_construct "XVar"
                [
                  pattern (src/IL.ml[287,6825+9]..src/IL.ml[287,6825+10])
                    Tpat_var "x/584"
                ]
                None
              expression (src/IL.ml[288,6839+6]..src/IL.ml[288,6839+12])
                Texp_construct "EVar"
                [
                  expression (src/IL.ml[288,6839+11]..src/IL.ml[288,6839+12])
                    Texp_ident "x/584"
                ]
            <case>
              pattern (src/IL.ml[289,6852+4]..src/IL.ml[289,6852+13])
                Tpat_construct "XMagic"
                [
                  pattern (src/IL.ml[289,6852+11]..src/IL.ml[289,6852+13])
                    Tpat_var "xp/585"
                ]
                None
              expression (src/IL.ml[290,6869+6]..src/IL.ml[290,6869+29])
                Texp_construct "EMagic"
                [
                  expression (src/IL.ml[290,6869+13]..src/IL.ml[290,6869+29])
                    Texp_apply
                    expression (src/IL.ml[290,6869+14]..src/IL.ml[290,6869+25])
                      Texp_ident "xparam2expr/583"
                    [
                      <arg>
                        Nolabel
                        expression (src/IL.ml[290,6869+26]..src/IL.ml[290,6869+28])
                          Texp_ident "xp/585"
                    ]
                ]
          ]
    ]
  structure_item (src/IL.ml[292,6900+0]..src/IL.ml[296,6974+19])
    Tstr_value Rec
    [
      <def>
        pattern (src/IL.ml[292,6900+8]..src/IL.ml[292,6900+18])
          Tpat_var "xparam2pat/587"
        expression (src/IL.ml[292,6900+21]..src/IL.ml[296,6974+19])
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[293,6930+4]..src/IL.ml[293,6930+10])
                Tpat_construct "XVar"
                [
                  pattern (src/IL.ml[293,6930+9]..src/IL.ml[293,6930+10])
                    Tpat_var "x/588"
                ]
                None
              expression (src/IL.ml[294,6944+6]..src/IL.ml[294,6944+12])
                Texp_construct "PVar"
                [
                  expression (src/IL.ml[294,6944+11]..src/IL.ml[294,6944+12])
                    Texp_ident "x/588"
                ]
            <case>
              pattern (src/IL.ml[295,6957+4]..src/IL.ml[295,6957+13])
                Tpat_construct "XMagic"
                [
                  pattern (src/IL.ml[295,6957+11]..src/IL.ml[295,6957+13])
                    Tpat_var "xp/589"
                ]
                None
              expression (src/IL.ml[296,6974+6]..src/IL.ml[296,6974+19])
                Texp_apply
                expression (src/IL.ml[296,6974+6]..src/IL.ml[296,6974+16])
                  Texp_ident "xparam2pat/587"
                [
                  <arg>
                    Nolabel
                    expression (src/IL.ml[296,6974+17]..src/IL.ml[296,6974+19])
                      Texp_ident "xp/589"
                ]
          ]
    ]
  structure_item (src/IL.ml[298,7010+0]..src/IL.ml[299,7025+13])
    Tstr_type Rec
    [
      type_declaration xparams/591 (src/IL.ml[298,7010+0]..src/IL.ml[299,7025+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/IL.ml[299,7025+2]..src/IL.ml[299,7025+13])
              Ttyp_constr "list/9!"
              [
                core_type (src/IL.ml[299,7025+2]..src/IL.ml[299,7025+8])
                  Ttyp_constr "xparam/574"
                  []
              ]
    ]
  structure_item (src/IL.ml[301,7040+0]..src/IL.ml[302,7064+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[301,7040+4]..src/IL.ml[301,7040+17])
          Tpat_var "xparams2exprs/592"
        expression (src/IL.ml[301,7040+18]..src/IL.ml[302,7064+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[301,7040+18]..src/IL.ml[301,7040+21])
                Tpat_var "xps/594"
              expression (src/IL.ml[302,7064+2]..src/IL.ml[302,7064+26])
                Texp_apply
                expression (src/IL.ml[302,7064+2]..src/IL.ml[302,7064+10])
                  Texp_ident "Stdlib!.List.map"
                [
                  <arg>
                    Nolabel
                    expression (src/IL.ml[302,7064+11]..src/IL.ml[302,7064+22])
                      Texp_ident "xparam2expr/583"
                  <arg>
                    Nolabel
                    expression (src/IL.ml[302,7064+23]..src/IL.ml[302,7064+26])
                      Texp_ident "xps/594"
                ]
          ]
    ]
  structure_item (src/IL.ml[304,7092+0]..src/IL.ml[305,7115+25])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/IL.ml[304,7092+4]..src/IL.ml[304,7092+16])
          Tpat_var "xparams2pats/661"
        expression (src/IL.ml[304,7092+17]..src/IL.ml[305,7115+25]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/IL.ml[304,7092+17]..src/IL.ml[304,7092+20])
                Tpat_var "xps/663"
              expression (src/IL.ml[305,7115+2]..src/IL.ml[305,7115+25])
                Texp_apply
                expression (src/IL.ml[305,7115+2]..src/IL.ml[305,7115+10])
                  Texp_ident "Stdlib!.List.map"
                [
                  <arg>
                    Nolabel
                    expression (src/IL.ml[305,7115+11]..src/IL.ml[305,7115+21])
                      Texp_ident "xparam2pat/587"
                  <arg>
                    Nolabel
                    expression (src/IL.ml[305,7115+22]..src/IL.ml[305,7115+25])
                      Texp_ident "xps/663"
                ]
          ]
    ]
]

{<Dune__exe__IL>
 "branch"[type] -> <Dune__exe__IL.13>;
 "datadef"[type] -> <Dune__exe__IL.8>;
 "excdef"[type] -> <Dune__exe__IL.4>;
 "expr"[type] -> <Dune__exe__IL.12>;
 "fielddef"[type] -> <Dune__exe__IL.7>;
 "interface"[type] -> <Dune__exe__IL.0>;
 "interface_item"[type] -> <Dune__exe__IL.1>;
 "modexpr"[type] -> <Dune__exe__IL.15>;
 "module_type"[type] -> <Dune__exe__IL.2>;
 "pattern"[type] -> <Dune__exe__IL.14>;
 "program"[type] -> <Dune__exe__IL.16>;
 "structure"[type] -> <Dune__exe__IL.17>;
 "structure_item"[type] -> <Dune__exe__IL.18>;
 "typ"[type] -> <Dune__exe__IL.9>;
 "typedef"[type] -> <Dune__exe__IL.5>;
 "typedefrhs"[type] -> <Dune__exe__IL.6>;
 "typescheme"[type] -> <Dune__exe__IL.10>;
 "valdef"[type] -> <Dune__exe__IL.11>;
 "with_kind"[type] -> <Dune__exe__IL.3>;
 "xmagic"[value] -> <Dune__exe__IL.108>;
 "xparam"[type] -> <Dune__exe__IL.103>;
 "xparam2expr"[value] -> <Dune__exe__IL.110>;
 "xparam2pat"[value] -> <Dune__exe__IL.113>;
 "xparams"[type] -> <Dune__exe__IL.116>;
 "xparams2exprs"[value] -> <Dune__exe__IL.117>;
 "xparams2pats"[value] -> <Dune__exe__IL.119>;
 "xvar"[value] -> <Dune__exe__IL.106>;
 }

(setglobal Dune__exe__IL!
  (let
    (xvar/577 =
       (function x/579
         (funct-body Dune__exe__IL.xvar src/IL.ml(280)<ghost>:6751-6763
           (before Dune__exe__IL.xvar src/IL.ml(281):6757-6763
             (makeblock 0 x/579))))
     xmagic/580 =
       (function xp/582
         (funct-body Dune__exe__IL.xmagic src/IL.ml(283)<ghost>:6776-6792
           (before Dune__exe__IL.xmagic src/IL.ml(284):6783-6792
             (makeblock 1 xp/582)))))
    (letrec
      (xparam2expr/583
         (function param/586
           (funct-body Dune__exe__IL.xparam2expr src/IL.ml(286):6816-6898
             (switch* param/586
              case tag 0:
               (let (x/584 =a (field_imm 0 param/586))
                 (before Dune__exe__IL.xparam2expr src/IL.ml(288):6845-6851
                   (makeblock 0 x/584)))
              case tag 1:
               (let (xp/585 =a (field_imm 0 param/586))
                 (before Dune__exe__IL.xparam2expr src/IL.ml(290):6875-6898
                   (makeblock 14
                     (after Dune__exe__IL.xparam2expr src/IL.ml(290):6882-6898
                       (apply xparam2expr/583 xp/585)))))))))
      (letrec
        (xparam2pat/587
           (function param/590
             (funct-body Dune__exe__IL.xparam2pat src/IL.ml(292):6921-6993
               (switch* param/590
                case tag 0:
                 (let (x/588 =a (field_imm 0 param/590))
                   (before Dune__exe__IL.xparam2pat src/IL.ml(294):6950-6956
                     (makeblock 0 x/588)))
                case tag 1:
                 (let (xp/589 =a (field_imm 0 param/590))
                   (before Dune__exe__IL.xparam2pat src/IL.ml(296):6980-6993
                     (after Dune__exe__IL.xparam2pat src/IL.ml(296):6980-6993
                       (apply xparam2pat/587 xp/589))))))))
        (let
          (xparams2exprs/592 =
             (function xps/594
               (funct-body Dune__exe__IL.xparams2exprs src/IL.ml(301)<ghost>:7058-7090
                 (before Dune__exe__IL.xparams2exprs src/IL.ml(302):7066-7090
                   (after Dune__exe__IL.xparams2exprs src/IL.ml(302):7066-7090
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2expr/583 xps/594)))))
           xparams2pats/661 =
             (function xps/663
               (funct-body Dune__exe__IL.xparams2pats src/IL.ml(304)<ghost>:7109-7140
                 (before Dune__exe__IL.xparams2pats src/IL.ml(305):7117-7140
                   (after Dune__exe__IL.xparams2pats src/IL.ml(305):7117-7140
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2pat/587 xps/663))))))
          (pseudo <unknown location>
            (makeblock 0 xvar/577 xmagic/580 xparam2expr/583 xparam2pat/587
              xparams2exprs/592 xparams2pats/661)))))))
(setglobal Dune__exe__IL!
  (let
    (xvar/577 =
       (function x/579
         (funct-body Dune__exe__IL.xvar src/IL.ml(280)<ghost>:6751-6763
           (before Dune__exe__IL.xvar src/IL.ml(281):6757-6763
             (makeblock 0 x/579))))
     xmagic/580 =
       (function xp/582
         (funct-body Dune__exe__IL.xmagic src/IL.ml(283)<ghost>:6776-6792
           (before Dune__exe__IL.xmagic src/IL.ml(284):6783-6792
             (makeblock 1 xp/582)))))
    (letrec
      (xparam2expr/583
         (function param/586
           (funct-body Dune__exe__IL.xparam2expr src/IL.ml(286):6816-6898
             (switch* param/586
              case tag 0:
               (let (x/584 =a (field_imm 0 param/586))
                 (before Dune__exe__IL.xparam2expr src/IL.ml(288):6845-6851
                   (makeblock 0 x/584)))
              case tag 1:
               (let (xp/585 =a (field_imm 0 param/586))
                 (before Dune__exe__IL.xparam2expr src/IL.ml(290):6875-6898
                   (makeblock 14
                     (after Dune__exe__IL.xparam2expr src/IL.ml(290):6882-6898
                       (apply xparam2expr/583 xp/585)))))))))
      (letrec
        (xparam2pat/587
           (function param/590
             (funct-body Dune__exe__IL.xparam2pat src/IL.ml(292):6921-6993
               (switch* param/590
                case tag 0:
                 (let (x/588 =a (field_imm 0 param/590))
                   (before Dune__exe__IL.xparam2pat src/IL.ml(294):6950-6956
                     (makeblock 0 x/588)))
                case tag 1:
                 (let (xp/589 =a (field_imm 0 param/590))
                   (before Dune__exe__IL.xparam2pat src/IL.ml(296):6980-6993
                     (after Dune__exe__IL.xparam2pat src/IL.ml(296):6980-6993
                       (apply xparam2pat/587 xp/589))))))))
        (let
          (xparams2exprs/592 =
             (function xps/594
               (funct-body Dune__exe__IL.xparams2exprs src/IL.ml(301)<ghost>:7058-7090
                 (before Dune__exe__IL.xparams2exprs src/IL.ml(302):7066-7090
                   (after Dune__exe__IL.xparams2exprs src/IL.ml(302):7066-7090
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2expr/583 xps/594)))))
           xparams2pats/661 =
             (function xps/663
               (funct-body Dune__exe__IL.xparams2pats src/IL.ml(304)<ghost>:7109-7140
                 (before Dune__exe__IL.xparams2pats src/IL.ml(305):7117-7140
                   (after Dune__exe__IL.xparams2pats src/IL.ml(305):7117-7140
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2pat/587 xps/663))))))
          (pseudo <unknown location>
            (makeblock 0 xvar/577 xmagic/580 xparam2expr/583 xparam2pat/587
              xparams2exprs/592 xparams2pats/661)))))))

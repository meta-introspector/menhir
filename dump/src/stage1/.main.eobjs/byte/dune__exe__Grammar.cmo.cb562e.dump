[
  structure_item (src/grammar.ml[17,1086+0]..[20,1172+6])
    Pstr_include    module_expr (src/grammar.ml[17,1086+8]..[20,1172+6])
      Pmod_apply_unit
      module_expr (src/grammar.ml[17,1086+8]..[20,1172+4])
        Pmod_apply
        module_expr (src/grammar.ml[17,1086+8]..[17,1086+27])
          Pmod_ident "GrammarFunctor.Make" (src/grammar.ml[17,1086+8]..[17,1086+27])
        module_expr (src/grammar.ml[17,1086+28]..[20,1172+3])
          Pmod_structure
          [
            structure_item (src/grammar.ml[18,1121+2]..[18,1121+29])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/grammar.ml[18,1121+6]..[18,1121+13])
                    Ppat_var "grammar" (src/grammar.ml[18,1121+6]..[18,1121+13])
                  expression (src/grammar.ml[18,1121+16]..[18,1121+29])
                    Pexp_ident "Front.grammar" (src/grammar.ml[18,1121+16]..[18,1121+29])
              ]
            structure_item (src/grammar.ml[19,1151+2]..[19,1151+20])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/grammar.ml[19,1151+6]..[19,1151+13])
                    Ppat_var "verbose" (src/grammar.ml[19,1151+6]..[19,1151+13])
                  expression (src/grammar.ml[19,1151+16]..[19,1151+20])
                    Pexp_construct "true" (src/grammar.ml[19,1151+16]..[19,1151+20])
                    None
              ]
          ]
]

include
  ((GrammarFunctor.Make)(struct
                           let grammar = Front.grammar
                           let verbose = true
                         end))()
[
  structure_item (src/grammar.ml[17,1086+0]..src/grammar.ml[20,1172+6])
    Tstr_include    module_expr (src/grammar.ml[17,1086+8]..src/grammar.ml[20,1172+4])
      Tmod_apply_unit
      module_expr (src/grammar.ml[17,1086+8]..src/grammar.ml[20,1172+4])
        Tmod_apply
        module_expr (src/grammar.ml[17,1086+8]..src/grammar.ml[17,1086+27])
          module_expr (src/grammar.ml[17,1086+8]..src/grammar.ml[17,1086+27])
            Tmod_ident "Dune__exe!.GrammarFunctor.Make"
        module_expr (src/grammar.ml[17,1086+28]..src/grammar.ml[20,1172+3])
          Tmod_structure
          [
            structure_item (src/grammar.ml[18,1121+2]..src/grammar.ml[18,1121+29])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/grammar.ml[18,1121+6]..src/grammar.ml[18,1121+13])
                    Tpat_var "grammar/396"
                  expression (src/grammar.ml[18,1121+16]..src/grammar.ml[18,1121+29])
                    Texp_ident "Dune__exe!.Front.grammar"
              ]
            structure_item (src/grammar.ml[19,1151+2]..src/grammar.ml[19,1151+20])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/grammar.ml[19,1151+6]..src/grammar.ml[19,1151+13])
                    Tpat_var "verbose/399"
                  expression (src/grammar.ml[19,1151+16]..src/grammar.ml[19,1151+20])
                    Texp_construct "true"
                    []
              ]
          ]
]

{<Dune__exe__Grammar>
 "Analysis"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Analysis"[module];
 "Nonterminal"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Nonterminal"[module];
 "NonterminalMap"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "NonterminalMap"[module];
 "NonterminalSet"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "NonterminalSet"[module];
 "OnErrorReduce"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "OnErrorReduce"[module];
 "Precedence"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Precedence"[module];
 "Production"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Production"[module];
 "ProductionMap"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "ProductionMap"[module];
 "Sentence"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Sentence"[module];
 "Symbol"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Symbol"[module];
 "SymbolMap"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "SymbolMap"[module];
 "SymbolSet"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "SymbolSet"[module];
 "Terminal"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "Terminal"[module];
 "TerminalMap"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "TerminalMap"[module];
 "TerminalSet"[module] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "TerminalSet"[module];
 "diagnostics"[value] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "diagnostics"[value];
 "grammar_uses_error_token"[value] ->
   CU Dune__exe . "GrammarFunctor"[module] . "Make"[module](
   {
    "grammar"[value] -> <Dune__exe__Grammar.0>;
    "verbose"[value] -> <Dune__exe__Grammar.1>;
    })(
   {
    })
   . "grammar_uses_error_token"[value];
 }

(setglobal Dune__exe__Grammar!
  (let
    (include/3275 =
       (apply
         (apply
           (let
             (let/3276 = (field_imm 0 (global Dune__exe__GrammarFunctor!)))
             (field_imm 0 (global Dune__exe__GrammarFunctor!)))
           (let
             (grammar/396 = (field_imm 0 (global Dune__exe__Front!))
              verbose/399 =[int] 1)
             (pseudo Dune__exe__Grammar src/grammar.ml(17):1114-1175
               (makeblock 0 grammar/396 verbose/399))))
         0)
     Nonterminal/1906 =a (field_mut 0 include/3275)
     NonterminalMap/1907 =a (field_mut 1 include/3275)
     Terminal/1909 =a (field_mut 2 include/3275)
     TerminalSet/1910 =a (field_mut 3 include/3275)
     TerminalMap/1911 =a (field_mut 4 include/3275)
     Symbol/1912 =a (field_mut 5 include/3275)
     SymbolSet/1913 =a (field_mut 6 include/3275)
     SymbolMap/1914 =a (field_mut 7 include/3275)
     Production/1915 =a (field_mut 8 include/3275)
     ProductionMap/1916 =a (field_mut 9 include/3275)
     grammar_uses_error_token/1917 =a (field_mut 10 include/3275)
     Analysis/1918 =a (field_mut 11 include/3275)
     Precedence/1919 =a (field_mut 12 include/3275)
     OnErrorReduce/1920 =a (field_mut 13 include/3275)
     Sentence/1921 =a (field_mut 14 include/3275)
     diagnostics/1922 =a (field_mut 15 include/3275))
    (pseudo <unknown location>
      (makeblock 0 Nonterminal/1906 NonterminalMap/1907 Terminal/1909
        TerminalSet/1910 TerminalMap/1911 Symbol/1912 SymbolSet/1913
        SymbolMap/1914 Production/1915 ProductionMap/1916
        grammar_uses_error_token/1917 Analysis/1918 Precedence/1919
        OnErrorReduce/1920 Sentence/1921 diagnostics/1922))))
(setglobal Dune__exe__Grammar!
  (let
    (include/3275 =
       (apply
         (apply
           (let
             (let/3276 = (field_imm 0 (global Dune__exe__GrammarFunctor!)))
             (field_imm 0 (global Dune__exe__GrammarFunctor!)))
           (let
             (grammar/396 = (field_imm 0 (global Dune__exe__Front!))
              verbose/399 =[int] 1)
             (pseudo Dune__exe__Grammar src/grammar.ml(17):1114-1175
               (makeblock 0 grammar/396 verbose/399))))
         0)
     Nonterminal/1906 =a (field_mut 0 include/3275)
     NonterminalMap/1907 =a (field_mut 1 include/3275)
     Terminal/1909 =a (field_mut 2 include/3275)
     TerminalSet/1910 =a (field_mut 3 include/3275)
     TerminalMap/1911 =a (field_mut 4 include/3275)
     Symbol/1912 =a (field_mut 5 include/3275)
     SymbolSet/1913 =a (field_mut 6 include/3275)
     SymbolMap/1914 =a (field_mut 7 include/3275)
     Production/1915 =a (field_mut 8 include/3275)
     ProductionMap/1916 =a (field_mut 9 include/3275)
     grammar_uses_error_token/1917 =a (field_mut 10 include/3275)
     Analysis/1918 =a (field_mut 11 include/3275)
     Precedence/1919 =a (field_mut 12 include/3275)
     OnErrorReduce/1920 =a (field_mut 13 include/3275)
     Sentence/1921 =a (field_mut 14 include/3275)
     diagnostics/1922 =a (field_mut 15 include/3275))
    (pseudo <unknown location>
      (makeblock 0 Nonterminal/1906 NonterminalMap/1907 Terminal/1909
        TerminalSet/1910 TerminalMap/1911 Symbol/1912 SymbolSet/1913
        SymbolMap/1914 Production/1915 ProductionMap/1916
        grammar_uses_error_token/1917 Analysis/1918 Precedence/1919
        OnErrorReduce/1920 Sentence/1921 diagnostics/1922))))

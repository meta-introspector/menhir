[
  structure_item (src/lexdep.mll[19,45+2]..[19,45+13])
    Pstr_open Fresh
    module_expr (src/lexdep.mll[19,45+7]..[19,45+13])
      Pmod_ident "Lexing" (src/lexdep.mll[19,45+7]..[19,45+13])
  structure_item (src/lexdep.mll[21,60+2]..[21,60+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (src/lexdep.mll[21,60+2]..[21,60+27])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (src/lexdep.mll[21,60+21]..[21,60+27])
                  Ptyp_constr "string" (src/lexdep.mll[21,60+21]..[21,60+27])
                  []
              ]
              None
  structure_item (src/lexdep.mll[23,89+2]..[28,256+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexdep.mll[23,89+6]..[23,89+10])
          Ppat_var "fail" (src/lexdep.mll[23,89+6]..[23,89+10])
        expression (src/lexdep.mll[23,89+11]..[28,256+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexdep.mll[23,89+11]..[23,89+17])
            Ppat_var "lexbuf" (src/lexdep.mll[23,89+11]..[23,89+17])
          expression (src/lexdep.mll[24,109+4]..[28,256+5])
            Pexp_apply
            expression (src/lexdep.mll[24,109+4]..[24,109+9])
              Pexp_ident "raise" (src/lexdep.mll[24,109+4]..[24,109+9])
            [
              <arg>
              Nolabel
                expression (src/lexdep.mll[24,109+10]..[28,256+5])
                  Pexp_construct "Error" (src/lexdep.mll[24,109+11]..[24,109+16])
                  Some
                    expression (src/lexdep.mll[25,126+6]..[27,219+36])
                      Pexp_apply
                      expression (src/lexdep.mll[25,126+7]..[25,126+21])
                        Pexp_ident "Printf.sprintf" (src/lexdep.mll[25,126+7]..[25,126+21])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexdep.mll[26,148+9]..[26,148+70])
                            Pexp_constant PConst_string("failed to make sense of ocamldep's output (character %d).\n",(src/lexdep.mll[26,148+10]..[26,148+69]),None)
                        <arg>
                        Nolabel
                          expression (src/lexdep.mll[27,219+9]..[27,219+35])
                            Pexp_field
                            expression (src/lexdep.mll[27,219+9]..[27,219+26])
                              Pexp_field
                              expression (src/lexdep.mll[27,219+9]..[27,219+15])
                                Pexp_ident "lexbuf" (src/lexdep.mll[27,219+9]..[27,219+15])
                              "lex_curr_p" (src/lexdep.mll[27,219+16]..[27,219+26])
                            "pos_cnum" (src/lexdep.mll[27,219+27]..[27,219+35])
                      ]
            ]
    ]
  structure_item (src/lexdep.ml[17,285+0]..[242,15138+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lexdep.ml[17,285+4]..[17,285+22])
          Ppat_var "__ocaml_lex_tables" (src/lexdep.ml[17,285+4]..[17,285+22])
        expression (src/lexdep.ml[17,285+25]..[242,15138+1])
          Pexp_record
          [
            "Lexing.lex_base" (src/lexdep.ml[18,312+2]..[18,312+17])
              expression (src/lexdep.ml[19,332+3]..[22,542+37])
                Pexp_constant PConst_string("\000\000\253\255\002\000\255\255\007\000\t\000\015\000\017\000;\000\254\255\023\000\012\000*\000F\000\253\255\004\000\254\255\025\000P\000e\000\027\000n\000t\000z\000\131\000\151\000\169\000\160\000",(src/lexdep.ml[19,332+4]..[22,542+36]),None)
            "Lexing.lex_backtrk" (src/lexdep.ml[23,581+2]..[23,581+20])
              expression (src/lexdep.ml[24,604+3]..[27,814+37])
                Pexp_constant PConst_string("\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\000\000",(src/lexdep.ml[24,604+4]..[27,814+36]),None)
            "Lexing.lex_default" (src/lexdep.ml[28,853+2]..[28,853+20])
              expression (src/lexdep.ml[29,876+3]..[32,1086+37])
                Pexp_constant PConst_string("\002\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\000\000\255\255\255\255\255\255\014\000\000\000\255\255\000\000\255\255\019\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000",(src/lexdep.ml[29,876+4]..[32,1086+36]),None)
            "Lexing.lex_trans" (src/lexdep.ml[33,1125+2]..[33,1125+18])
              expression (src/lexdep.ml[34,1146+3]..[87,4856+21])
                Pexp_constant PConst_stringt\000\000\000\255\255\255\255\011\000\255\255\000\000\000\000\000\000\018\000\016\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\021\000\016\000\011\000\001\000\015\000\255\255\000\000\000\000\000\000\000\000\255\255\t\000\255\255\018\000\000\000\n\000\005\000\000\000\255\255\006\000\255\255\255\255\255\255\021\000\000\000\255\255\000\000\000\000\t\000\000\000\021\000\016\000\000\000\b\000\015\000\007\000\021\000\023\000\000\000\b\000\015\000\000\000\021\000\016\000\255\255\n\000\015\000\000\000\b\000\255\255\000\000\255\255\255\255\021\000\000\000\255\255\000\000\000\000\024\000\021\000\000\000\000\000\nsrc/lexdep.ml[34,1146+4]..[87,4856+20]),None)
            "Lexing.lex_check" (src/lexdep.ml[88,4879+2]..[88,4879+18])
              expression (src/lexdep.ml[89,4900+3]..[142,8610+21])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\015\000\002\000\004\000\004\000\005\000\005\000\004\000\011\000\005\000\255\255\006\000\006\000\007\000\007\000\006\000\255\255\007\000\255\255\000\000\n\000\002\000\017\000\n\000\020\000\017\000\004\000\020\000\005\000\255\255\255\255\011\000\255\255\255\255\006\000\002\000\007\000\255\255\012\000\012\000\004\000\255\255\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\011\000\255\255\b\000\006\000\012\000\007\000\255\255\255\255\255\255\r\000\r\000\255\255\255\255\r\000\255\255\255\255\255\255\255\255\255\255\018\000\018\000\b\000\000\000\018\000\002\000\255\255\255\255\255\255\255\255\004\000\012\000\005\000\r\000\255\255\011\000\b\000\255\255\006\000\005\000\007\000\019\000\019\000\018\000\255\255\019\000\255\255\255\255\b\000\255\255\021\000\021\000\255\255\007\000\021\000\006\000\022\000\022\000\255\255\007\000\022\000\255\255\023\000\023\000\019\000\012\000\023\000\255\255\007\000\018\000\255\255\024\000\024\000\021\000\255\255\024\000\255\255\255\255\019\000\022\000\255\255\255\255\b\000\255\255\255\255\023\000\255\255\255\255\255\255\255\255\019\000\025\000\025\000\rbsrc/lexdep.ml[89,4900+4]..[142,8610+20]),None)
            "Lexing.lex_base_code" (src/lexdep.ml[143,8633+2]..[143,8633+22])
              expression (src/lexdep.ml[144,8658+3]..[147,8868+37])
                Pexp_constant PConst_string("\000\000\000\000\002\000\000\000\007\000\t\000\015\000\017\000;\000\012\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\023\000\012\000\000\000\025\000\014\000*\000\022\000\000\000\000\000\000\000\000\000",(src/lexdep.ml[144,8658+4]..[147,8868+36]),None)
            "Lexing.lex_backtrk_code" (src/lexdep.ml[148,8907+2]..[148,8907+25])
              expression (src/lexdep.ml[149,8935+3]..[152,9145+37])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000",(src/lexdep.ml[149,8935+4]..[152,9145+36]),None)
            "Lexing.lex_default_code" (src/lexdep.ml[153,9184+2]..[153,9184+25])
              expression (src/lexdep.ml[154,9212+3]..[157,9422+37])
                Pexp_constant PConst_string("\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/lexdep.ml[154,9212+4]..[157,9422+36]),None)
            "Lexing.lex_trans_code" (src/lexdep.ml[158,9461+2]..[158,9461+23])
              expression (src/lexdep.ml[159,9487+3]..[198,12217+37])
                Pexp_constant PConst_stringsrc/lexdep.ml[159,9487+4]..[198,12217+36]),None)
            "Lexing.lex_check_code" (src/lexdep.ml[199,12256+2]..[199,12256+23])
              expression (src/lexdep.ml[200,12282+3]..[239,15012+37])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\r\000\002\000\004\000\004\000\005\000\005\000\004\000\018\000\005\000\021\000\006\000\006\000\007\000\007\000\006\000\255\255\007\000\023\000\000\000\017\000\002\000\020\000\017\000\r\000\020\000\004\000\255\255\005\000\255\255\255\255\018\000\255\255\021\000\006\000\002\000\007\000\255\255\022\000\022\000\004\000\023\000\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\255\255\255\255\b\000\006\000\022\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\b\000\255\255\006\000\005\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\255\255\255\255\006\000\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000",(src/lexdep.ml[200,12282+4]..[239,15012+36]),None)
            "Lexing.lex_code" (src/lexdep.ml[240,15051+2]..[240,15051+17])
              expression (src/lexdep.ml[241,15071+3]..[241,15071+65])
                Pexp_constant PConst_string("\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255",(src/lexdep.ml[241,15071+4]..[241,15071+64]),None)
          ]
          None
    ]
  structure_item (src/lexdep.ml[244,15141+0]..[307,17071+58])
    Pstr_value Rec
    [
      <def>
        pattern (src/lexdep.ml[244,15141+8]..[244,15141+12])
          Ppat_var "main" (src/lexdep.ml[244,15141+8]..[244,15141+12])
        expression (src/lexdep.ml[244,15141+13]..[245,15163+75]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexdep.ml[244,15141+13]..[244,15141+19])
            Ppat_var "lexbuf" (src/lexdep.ml[244,15141+13]..[244,15141+19])
          expression (src/lexdep.ml[245,15163+2]..[245,15163+75])
            Pexp_sequence
            expression (src/lexdep.ml[245,15163+2]..[245,15163+44])
              Pexp_setfield
              expression (src/lexdep.ml[245,15163+2]..[245,15163+8])
                Pexp_ident "lexbuf" (src/lexdep.ml[245,15163+2]..[245,15163+8])
              "Lexing.lex_mem" (src/lexdep.ml[245,15163+9]..[245,15163+23])
              expression (src/lexdep.ml[245,15163+27]..[245,15163+44])
                Pexp_apply
                expression (src/lexdep.ml[245,15163+27]..[245,15163+37])
                  Pexp_ident "Array.make" (src/lexdep.ml[245,15163+27]..[245,15163+37])
                [
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[245,15163+38]..[245,15163+39])
                      Pexp_constant PConst_int (3,None)
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[245,15163+40]..[245,15163+44])
                      Pexp_constant PConst_int (-1,None)
                ]
            expression (src/lexdep.ml[245,15163+46]..[245,15163+75])
              Pexp_apply
              expression (src/lexdep.ml[245,15163+46]..[245,15163+66])
                Pexp_ident "__ocaml_lex_main_rec" (src/lexdep.ml[245,15163+46]..[245,15163+66])
              [
                <arg>
                Nolabel
                  expression (src/lexdep.ml[245,15163+67]..[245,15163+73])
                    Pexp_ident "lexbuf" (src/lexdep.ml[245,15163+67]..[245,15163+73])
                <arg>
                Nolabel
                  expression (src/lexdep.ml[245,15163+74]..[245,15163+75])
                    Pexp_constant PConst_int (0,None)
              ]
      <def>
        pattern (src/lexdep.ml[246,15239+4]..[246,15239+24])
          Ppat_var "__ocaml_lex_main_rec" (src/lexdep.ml[246,15239+4]..[246,15239+24])
        expression (src/lexdep.ml[246,15239+25]..[275,16088+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexdep.ml[246,15239+25]..[246,15239+31])
            Ppat_var "lexbuf" (src/lexdep.ml[246,15239+25]..[246,15239+31])
          expression (src/lexdep.ml[246,15239+32]..[275,16088+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexdep.ml[246,15239+32]..[246,15239+49])
              Ppat_var "__ocaml_lex_state" (src/lexdep.ml[246,15239+32]..[246,15239+49])
            expression (src/lexdep.ml[247,15291+2]..[275,16088+51])
              Pexp_match
              expression (src/lexdep.ml[247,15291+8]..[247,15291+69])
                Pexp_apply
                expression (src/lexdep.ml[247,15291+8]..[247,15291+25])
                  Pexp_ident "Lexing.new_engine" (src/lexdep.ml[247,15291+8]..[247,15291+25])
                [
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[247,15291+26]..[247,15291+44])
                      Pexp_ident "__ocaml_lex_tables" (src/lexdep.ml[247,15291+26]..[247,15291+44])
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[247,15291+45]..[247,15291+62])
                      Pexp_ident "__ocaml_lex_state" (src/lexdep.ml[247,15291+45]..[247,15291+62])
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[247,15291+63]..[247,15291+69])
                      Pexp_ident "lexbuf" (src/lexdep.ml[247,15291+63]..[247,15291+69])
                ]
              [
                <case>
                  pattern (src/lexdep.ml[248,15366+8]..[248,15366+9])
                    Ppat_constant PConst_int (0,None)
                  expression (src/lexdep.mll[45,15401+4]..[45,15401+10])
                    Pexp_construct "[]" (src/lexdep.mll[45,15401+6]..[45,15401+8])
                    None
                <case>
                  pattern (src/lexdep.ml[253,15435+4]..[253,15435+5])
                    Ppat_constant PConst_int (1,None)
                  expression (src/lexdep.ml[254,15444+0]..src/lexdep.mll[48,15881+50])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/lexdep.mll[38,15470+28]..[38,15470+36])
                          Ppat_var "basename" (src/lexdep.mll[38,15470+28]..[38,15470+36])
                        expression (src/lexdep.ml[258,15529+2]..[258,15529+80])
                          Pexp_apply
                          expression (src/lexdep.ml[258,15529+2]..[258,15529+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexdep.ml[258,15529+2]..[258,15529+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[258,15529+20]..[258,15529+26])
                                Pexp_ident "lexbuf" (src/lexdep.ml[258,15529+20]..[258,15529+26])
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[258,15529+27]..[258,15529+54])
                                Pexp_field
                                expression (src/lexdep.ml[258,15529+27]..[258,15529+33])
                                  Pexp_ident "lexbuf" (src/lexdep.ml[258,15529+27]..[258,15529+33])
                                "Lexing.lex_start_pos" (src/lexdep.ml[258,15529+34]..[258,15529+54])
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[258,15529+55]..[258,15529+80])
                                Pexp_apply
                                expression (src/lexdep.ml[258,15529+55]..[258,15529+80]) ghost
                                  Pexp_ident "Array.get" (src/lexdep.ml[258,15529+55]..[258,15529+80]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexdep.ml[258,15529+55]..[258,15529+76])
                                      Pexp_field
                                      expression (src/lexdep.ml[258,15529+55]..[258,15529+61])
                                        Pexp_ident "lexbuf" (src/lexdep.ml[258,15529+55]..[258,15529+61])
                                      "Lexing.lex_mem" (src/lexdep.ml[258,15529+62]..[258,15529+76])
                                  <arg>
                                  Nolabel
                                    expression (src/lexdep.ml[258,15529+78]..[258,15529+79])
                                      Pexp_constant PConst_int (0,None)
                                ]
                          ]
                      <def>
                        pattern (src/lexdep.mll[38,15636+65]..[38,15636+73])
                          Ppat_var "filename" (src/lexdep.mll[38,15636+65]..[38,15636+73])
                        expression (src/lexdep.ml[263,15732+2]..[263,15732+86])
                          Pexp_apply
                          expression (src/lexdep.ml[263,15732+2]..[263,15732+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/lexdep.ml[263,15732+2]..[263,15732+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[263,15732+20]..[263,15732+26])
                                Pexp_ident "lexbuf" (src/lexdep.ml[263,15732+20]..[263,15732+26])
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[263,15732+27]..[263,15732+54])
                                Pexp_field
                                expression (src/lexdep.ml[263,15732+27]..[263,15732+33])
                                  Pexp_ident "lexbuf" (src/lexdep.ml[263,15732+27]..[263,15732+33])
                                "Lexing.lex_start_pos" (src/lexdep.ml[263,15732+34]..[263,15732+54])
                            <arg>
                            Nolabel
                              expression (src/lexdep.ml[263,15732+55]..[263,15732+86])
                                Pexp_apply
                                expression (src/lexdep.ml[263,15732+82]..[263,15732+83])
                                  Pexp_ident "+" (src/lexdep.ml[263,15732+82]..[263,15732+83])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexdep.ml[263,15732+56]..[263,15732+81])
                                      Pexp_apply
                                      expression (src/lexdep.ml[263,15732+56]..[263,15732+81]) ghost
                                        Pexp_ident "Array.get" (src/lexdep.ml[263,15732+56]..[263,15732+81]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/lexdep.ml[263,15732+56]..[263,15732+77])
                                            Pexp_field
                                            expression (src/lexdep.ml[263,15732+56]..[263,15732+62])
                                              Pexp_ident "lexbuf" (src/lexdep.ml[263,15732+56]..[263,15732+62])
                                            "Lexing.lex_mem" (src/lexdep.ml[263,15732+63]..[263,15732+77])
                                        <arg>
                                        Nolabel
                                          expression (src/lexdep.ml[263,15732+79]..[263,15732+80])
                                            Pexp_constant PConst_int (0,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/lexdep.ml[263,15732+84]..[263,15732+85])
                                      Pexp_constant PConst_int (4,None)
                                ]
                          ]
                    ]
                    expression (src/lexdep.mll[47,15844+4]..[48,15881+50])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexdep.mll[47,15844+10]..[47,15844+13])
                            Ppat_var "bfs" (src/lexdep.mll[47,15844+10]..[47,15844+13])
                          expression (src/lexdep.mll[47,15844+16]..[47,15844+33])
                            Pexp_apply
                            expression (src/lexdep.mll[47,15844+16]..[47,15844+23])
                              Pexp_ident "collect" (src/lexdep.mll[47,15844+16]..[47,15844+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexdep.mll[47,15844+24]..[47,15844+26])
                                  Pexp_construct "[]" (src/lexdep.mll[47,15844+24]..[47,15844+26])
                                  None
                              <arg>
                              Nolabel
                                expression (src/lexdep.mll[47,15844+27]..[47,15844+33])
                                  Pexp_ident "lexbuf" (src/lexdep.mll[47,15844+27]..[47,15844+33])
                            ]
                      ]
                      expression (src/lexdep.mll[48,15881+6]..[48,15881+48])
                        Pexp_construct "::" (src/lexdep.mll[48,15881+34]..[48,15881+36])
                        Some
                          expression (src/lexdep.mll[48,15881+6]..[48,15881+48]) ghost
                            Pexp_tuple
                            [
                              expression (src/lexdep.mll[48,15881+6]..[48,15881+33])
                                Pexp_tuple
                                [
                                  expression (src/lexdep.mll[48,15881+7]..[48,15881+27])
                                    Pexp_tuple
                                    [
                                      expression (src/lexdep.mll[48,15881+8]..[48,15881+16])
                                        Pexp_ident "basename" (src/lexdep.mll[48,15881+8]..[48,15881+16])
                                      expression (src/lexdep.mll[48,15881+18]..[48,15881+26])
                                        Pexp_ident "filename" (src/lexdep.mll[48,15881+18]..[48,15881+26])
                                    ]
                                  expression (src/lexdep.mll[48,15881+29]..[48,15881+32])
                                    Pexp_ident "bfs" (src/lexdep.mll[48,15881+29]..[48,15881+32])
                                ]
                              expression (src/lexdep.mll[48,15881+37]..[48,15881+48])
                                Pexp_apply
                                expression (src/lexdep.mll[48,15881+37]..[48,15881+41])
                                  Pexp_ident "main" (src/lexdep.mll[48,15881+37]..[48,15881+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/lexdep.mll[48,15881+42]..[48,15881+48])
                                      Pexp_ident "lexbuf" (src/lexdep.mll[48,15881+42]..[48,15881+48])
                                ]
                            ]
                <case>
                  pattern (src/lexdep.ml[269,15955+4]..[269,15955+5])
                    Ppat_constant PConst_int (2,None)
                  expression (src/lexdep.mll[50,15986+4]..[50,15986+19])
                    Pexp_apply
                    expression (src/lexdep.mll[50,15986+6]..[50,15986+10])
                      Pexp_ident "fail" (src/lexdep.mll[50,15986+6]..[50,15986+10])
                    [
                      <arg>
                      Nolabel
                        expression (src/lexdep.mll[50,15986+11]..[50,15986+17])
                          Pexp_ident "lexbuf" (src/lexdep.mll[50,15986+11]..[50,15986+17])
                    ]
                <case>
                  pattern (src/lexdep.ml[274,16029+4]..[274,16029+21])
                    Ppat_var "__ocaml_lex_state" (src/lexdep.ml[274,16029+4]..[274,16029+21])
                  expression (src/lexdep.ml[274,16029+25]..[275,16088+51])
                    Pexp_sequence
                    expression (src/lexdep.ml[274,16029+25]..[274,16029+57])
                      Pexp_apply
                      expression (src/lexdep.ml[274,16029+25]..[274,16029+50])
                        Pexp_field
                        expression (src/lexdep.ml[274,16029+25]..[274,16029+31])
                          Pexp_ident "lexbuf" (src/lexdep.ml[274,16029+25]..[274,16029+31])
                        "Lexing.refill_buff" (src/lexdep.ml[274,16029+32]..[274,16029+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexdep.ml[274,16029+51]..[274,16029+57])
                            Pexp_ident "lexbuf" (src/lexdep.ml[274,16029+51]..[274,16029+57])
                      ]
                    expression (src/lexdep.ml[275,16088+6]..[275,16088+51])
                      Pexp_apply
                      expression (src/lexdep.ml[275,16088+6]..[275,16088+26])
                        Pexp_ident "__ocaml_lex_main_rec" (src/lexdep.ml[275,16088+6]..[275,16088+26])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexdep.ml[275,16088+27]..[275,16088+33])
                            Pexp_ident "lexbuf" (src/lexdep.ml[275,16088+27]..[275,16088+33])
                        <arg>
                        Nolabel
                          expression (src/lexdep.ml[275,16088+34]..[275,16088+51])
                            Pexp_ident "__ocaml_lex_state" (src/lexdep.ml[275,16088+34]..[275,16088+51])
                      ]
              ]
      <def>
        pattern (src/lexdep.ml[277,16141+4]..[277,16141+11])
          Ppat_var "collect" (src/lexdep.ml[277,16141+4]..[277,16141+11])
        expression (src/lexdep.ml[277,16141+12]..[278,16166+83]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexdep.ml[277,16141+12]..[277,16141+15])
            Ppat_var "bfs" (src/lexdep.ml[277,16141+12]..[277,16141+15])
          expression (src/lexdep.ml[277,16141+16]..[278,16166+83]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexdep.ml[277,16141+16]..[277,16141+22])
              Ppat_var "lexbuf" (src/lexdep.ml[277,16141+16]..[277,16141+22])
            expression (src/lexdep.ml[278,16166+2]..[278,16166+83])
              Pexp_sequence
              expression (src/lexdep.ml[278,16166+2]..[278,16166+44])
                Pexp_setfield
                expression (src/lexdep.ml[278,16166+2]..[278,16166+8])
                  Pexp_ident "lexbuf" (src/lexdep.ml[278,16166+2]..[278,16166+8])
                "Lexing.lex_mem" (src/lexdep.ml[278,16166+9]..[278,16166+23])
                expression (src/lexdep.ml[278,16166+27]..[278,16166+44])
                  Pexp_apply
                  expression (src/lexdep.ml[278,16166+27]..[278,16166+37])
                    Pexp_ident "Array.make" (src/lexdep.ml[278,16166+27]..[278,16166+37])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexdep.ml[278,16166+38]..[278,16166+39])
                        Pexp_constant PConst_int (2,None)
                    <arg>
                    Nolabel
                      expression (src/lexdep.ml[278,16166+40]..[278,16166+44])
                        Pexp_constant PConst_int (-1,None)
                  ]
              expression (src/lexdep.ml[278,16166+46]..[278,16166+83])
                Pexp_apply
                expression (src/lexdep.ml[278,16166+46]..[278,16166+69])
                  Pexp_ident "__ocaml_lex_collect_rec" (src/lexdep.ml[278,16166+46]..[278,16166+69])
                [
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[278,16166+70]..[278,16166+73])
                      Pexp_ident "bfs" (src/lexdep.ml[278,16166+70]..[278,16166+73])
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[278,16166+74]..[278,16166+80])
                      Pexp_ident "lexbuf" (src/lexdep.ml[278,16166+74]..[278,16166+80])
                  <arg>
                  Nolabel
                    expression (src/lexdep.ml[278,16166+81]..[278,16166+83])
                      Pexp_constant PConst_int (13,None)
                ]
      <def>
        pattern (src/lexdep.ml[279,16250+4]..[279,16250+27])
          Ppat_var "__ocaml_lex_collect_rec" (src/lexdep.ml[279,16250+4]..[279,16250+27])
        expression (src/lexdep.ml[279,16250+28]..[307,17071+58]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lexdep.ml[279,16250+28]..[279,16250+31])
            Ppat_var "bfs" (src/lexdep.ml[279,16250+28]..[279,16250+31])
          expression (src/lexdep.ml[279,16250+32]..[307,17071+58]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lexdep.ml[279,16250+32]..[279,16250+38])
              Ppat_var "lexbuf" (src/lexdep.ml[279,16250+32]..[279,16250+38])
            expression (src/lexdep.ml[279,16250+39]..[307,17071+58]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lexdep.ml[279,16250+39]..[279,16250+56])
                Ppat_var "__ocaml_lex_state" (src/lexdep.ml[279,16250+39]..[279,16250+56])
              expression (src/lexdep.ml[280,16309+2]..[307,17071+58])
                Pexp_match
                expression (src/lexdep.ml[280,16309+8]..[280,16309+69])
                  Pexp_apply
                  expression (src/lexdep.ml[280,16309+8]..[280,16309+25])
                    Pexp_ident "Lexing.new_engine" (src/lexdep.ml[280,16309+8]..[280,16309+25])
                  [
                    <arg>
                    Nolabel
                      expression (src/lexdep.ml[280,16309+26]..[280,16309+44])
                        Pexp_ident "__ocaml_lex_tables" (src/lexdep.ml[280,16309+26]..[280,16309+44])
                    <arg>
                    Nolabel
                      expression (src/lexdep.ml[280,16309+45]..[280,16309+62])
                        Pexp_ident "__ocaml_lex_state" (src/lexdep.ml[280,16309+45]..[280,16309+62])
                    <arg>
                    Nolabel
                      expression (src/lexdep.ml[280,16309+63]..[280,16309+69])
                        Pexp_ident "lexbuf" (src/lexdep.ml[280,16309+63]..[280,16309+69])
                  ]
                [
                  <case>
                    pattern (src/lexdep.ml[281,16384+8]..[281,16384+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lexdep.ml[282,16397+0]..src/lexdep.mll[57,16796+52])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/lexdep.mll[38,16423+28]..[38,16423+36])
                            Ppat_var "basename" (src/lexdep.mll[38,16423+28]..[38,16423+36])
                          expression (src/lexdep.ml[286,16482+2]..[286,16482+86])
                            Pexp_apply
                            expression (src/lexdep.ml[286,16482+2]..[286,16482+19])
                              Pexp_ident "Lexing.sub_lexeme" (src/lexdep.ml[286,16482+2]..[286,16482+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[286,16482+20]..[286,16482+26])
                                  Pexp_ident "lexbuf" (src/lexdep.ml[286,16482+20]..[286,16482+26])
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[286,16482+27]..[286,16482+52])
                                  Pexp_apply
                                  expression (src/lexdep.ml[286,16482+27]..[286,16482+52]) ghost
                                    Pexp_ident "Array.get" (src/lexdep.ml[286,16482+27]..[286,16482+52]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[286,16482+27]..[286,16482+48])
                                        Pexp_field
                                        expression (src/lexdep.ml[286,16482+27]..[286,16482+33])
                                          Pexp_ident "lexbuf" (src/lexdep.ml[286,16482+27]..[286,16482+33])
                                        "Lexing.lex_mem" (src/lexdep.ml[286,16482+34]..[286,16482+48])
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[286,16482+50]..[286,16482+51])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[286,16482+53]..[286,16482+86])
                                  Pexp_apply
                                  expression (src/lexdep.ml[286,16482+81]..[286,16482+82])
                                    Pexp_ident "+" (src/lexdep.ml[286,16482+81]..[286,16482+82])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[286,16482+54]..[286,16482+80])
                                        Pexp_field
                                        expression (src/lexdep.ml[286,16482+54]..[286,16482+60])
                                          Pexp_ident "lexbuf" (src/lexdep.ml[286,16482+54]..[286,16482+60])
                                        "Lexing.lex_curr_pos" (src/lexdep.ml[286,16482+61]..[286,16482+80])
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[286,16482+83]..[286,16482+85])
                                        Pexp_constant PConst_int (-4,None)
                                  ]
                            ]
                        <def>
                          pattern (src/lexdep.mll[38,16595+65]..[38,16595+73])
                            Ppat_var "filename" (src/lexdep.mll[38,16595+65]..[38,16595+73])
                          expression (src/lexdep.ml[291,16691+2]..[291,16691+79])
                            Pexp_apply
                            expression (src/lexdep.ml[291,16691+2]..[291,16691+19])
                              Pexp_ident "Lexing.sub_lexeme" (src/lexdep.ml[291,16691+2]..[291,16691+19])
                            [
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[291,16691+20]..[291,16691+26])
                                  Pexp_ident "lexbuf" (src/lexdep.ml[291,16691+20]..[291,16691+26])
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[291,16691+27]..[291,16691+52])
                                  Pexp_apply
                                  expression (src/lexdep.ml[291,16691+27]..[291,16691+52]) ghost
                                    Pexp_ident "Array.get" (src/lexdep.ml[291,16691+27]..[291,16691+52]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[291,16691+27]..[291,16691+48])
                                        Pexp_field
                                        expression (src/lexdep.ml[291,16691+27]..[291,16691+33])
                                          Pexp_ident "lexbuf" (src/lexdep.ml[291,16691+27]..[291,16691+33])
                                        "Lexing.lex_mem" (src/lexdep.ml[291,16691+34]..[291,16691+48])
                                    <arg>
                                    Nolabel
                                      expression (src/lexdep.ml[291,16691+50]..[291,16691+51])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                              <arg>
                              Nolabel
                                expression (src/lexdep.ml[291,16691+53]..[291,16691+79])
                                  Pexp_field
                                  expression (src/lexdep.ml[291,16691+53]..[291,16691+59])
                                    Pexp_ident "lexbuf" (src/lexdep.ml[291,16691+53]..[291,16691+59])
                                  "Lexing.lex_curr_pos" (src/lexdep.ml[291,16691+60]..[291,16691+79])
                            ]
                      ]
                      expression (src/lexdep.mll[57,16796+4]..[57,16796+52])
                        Pexp_apply
                        expression (src/lexdep.mll[57,16796+6]..[57,16796+13])
                          Pexp_ident "collect" (src/lexdep.mll[57,16796+6]..[57,16796+13])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexdep.mll[57,16796+14]..[57,16796+43])
                              Pexp_construct "::" (src/lexdep.mll[57,16796+36]..[57,16796+38])
                              Some
                                expression (src/lexdep.mll[57,16796+15]..[57,16796+42]) ghost
                                  Pexp_tuple
                                  [
                                    expression (src/lexdep.mll[57,16796+15]..[57,16796+35])
                                      Pexp_tuple
                                      [
                                        expression (src/lexdep.mll[57,16796+16]..[57,16796+24])
                                          Pexp_ident "basename" (src/lexdep.mll[57,16796+16]..[57,16796+24])
                                        expression (src/lexdep.mll[57,16796+26]..[57,16796+34])
                                          Pexp_ident "filename" (src/lexdep.mll[57,16796+26]..[57,16796+34])
                                      ]
                                    expression (src/lexdep.mll[57,16796+39]..[57,16796+42])
                                      Pexp_ident "bfs" (src/lexdep.mll[57,16796+39]..[57,16796+42])
                                  ]
                          <arg>
                          Nolabel
                            expression (src/lexdep.mll[57,16796+44]..[57,16796+50])
                              Pexp_ident "lexbuf" (src/lexdep.mll[57,16796+44]..[57,16796+50])
                        ]
                  <case>
                    pattern (src/lexdep.ml[296,16872+4]..[296,16872+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lexdep.mll[59,16903+4]..[59,16903+11])
                      Pexp_ident "bfs" (src/lexdep.mll[59,16903+6]..[59,16903+9])
                  <case>
                    pattern (src/lexdep.ml[301,16938+4]..[301,16938+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lexdep.mll[62,16969+4]..[62,16969+19])
                      Pexp_apply
                      expression (src/lexdep.mll[62,16969+6]..[62,16969+10])
                        Pexp_ident "fail" (src/lexdep.mll[62,16969+6]..[62,16969+10])
                      [
                        <arg>
                        Nolabel
                          expression (src/lexdep.mll[62,16969+11]..[62,16969+17])
                            Pexp_ident "lexbuf" (src/lexdep.mll[62,16969+11]..[62,16969+17])
                      ]
                  <case>
                    pattern (src/lexdep.ml[306,17012+4]..[306,17012+21])
                      Ppat_var "__ocaml_lex_state" (src/lexdep.ml[306,17012+4]..[306,17012+21])
                    expression (src/lexdep.ml[306,17012+25]..[307,17071+58])
                      Pexp_sequence
                      expression (src/lexdep.ml[306,17012+25]..[306,17012+57])
                        Pexp_apply
                        expression (src/lexdep.ml[306,17012+25]..[306,17012+50])
                          Pexp_field
                          expression (src/lexdep.ml[306,17012+25]..[306,17012+31])
                            Pexp_ident "lexbuf" (src/lexdep.ml[306,17012+25]..[306,17012+31])
                          "Lexing.refill_buff" (src/lexdep.ml[306,17012+32]..[306,17012+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexdep.ml[306,17012+51]..[306,17012+57])
                              Pexp_ident "lexbuf" (src/lexdep.ml[306,17012+51]..[306,17012+57])
                        ]
                      expression (src/lexdep.ml[307,17071+6]..[307,17071+58])
                        Pexp_apply
                        expression (src/lexdep.ml[307,17071+6]..[307,17071+29])
                          Pexp_ident "__ocaml_lex_collect_rec" (src/lexdep.ml[307,17071+6]..[307,17071+29])
                        [
                          <arg>
                          Nolabel
                            expression (src/lexdep.ml[307,17071+30]..[307,17071+33])
                              Pexp_ident "bfs" (src/lexdep.ml[307,17071+30]..[307,17071+33])
                          <arg>
                          Nolabel
                            expression (src/lexdep.ml[307,17071+34]..[307,17071+40])
                              Pexp_ident "lexbuf" (src/lexdep.ml[307,17071+34]..[307,17071+40])
                          <arg>
                          Nolabel
                            expression (src/lexdep.ml[307,17071+41]..[307,17071+58])
                              Pexp_ident "__ocaml_lex_state" (src/lexdep.ml[307,17071+41]..[307,17071+58])
                        ]
                ]
    ]
]

open Lexing
exception Error of string 
let fail lexbuf =
  raise
    (Error
       (Printf.sprintf
          "failed to make sense of ocamldep's output (character %d).\n"
          (lexbuf.lex_curr_p).pos_cnum))
let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\253\255\002\000\255\255\007\000\t\000\015\000\017\000;\000\254\255\023\000\012\000*\000F\000\253\255\004\000\254\255\025\000P\000e\000\027\000n\000t\000z\000\131\000\151\000\169\000\160\000";
    Lexing.lex_backtrk =
      "\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\000\000";
    Lexing.lex_default =
      "\002\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\000\000\255\255\255\255\255\255\014\000\000\000\255\255\000\000\255\255\019\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000";
    Lexing.lex_trans =
t\000\000\000\255\255\255\255\011\000\255\255\000\000\000\000\000\000\018\000\016\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\021\000\016\000\011\000\001\000\015\000\255\255\000\000\000\000\000\000\000\000\255\255\t\000\255\255\018\000\000\000\n\000\005\000\000\000\255\255\006\000\255\255\255\255\255\255\021\000\000\000\255\255\000\000\000\000\t\000\000\000\021\000\016\000\000\000\b\000\015\000\007\000\021\000\023\000\000\000\b\000\015\000\000\000\021\000\016\000\255\255\n\000\015\000\000\000\b\000\255\255\000\000\255\255\255\255\021\000\000\000\255\255\000\000\000\000\024\000\021\000\000\000\000\000\n
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\015\000\002\000\004\000\004\000\005\000\005\000\004\000\011\000\005\000\255\255\006\000\006\000\007\000\007\000\006\000\255\255\007\000\255\255\000\000\n\000\002\000\017\000\n\000\020\000\017\000\004\000\020\000\005\000\255\255\255\255\011\000\255\255\255\255\006\000\002\000\007\000\255\255\012\000\012\000\004\000\255\255\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\011\000\255\255\b\000\006\000\012\000\007\000\255\255\255\255\255\255\r\000\r\000\255\255\255\255\r\000\255\255\255\255\255\255\255\255\255\255\018\000\018\000\b\000\000\000\018\000\002\000\255\255\255\255\255\255\255\255\004\000\012\000\005\000\r\000\255\255\011\000\b\000\255\255\006\000\005\000\007\000\019\000\019\000\018\000\255\255\019\000\255\255\255\255\b\000\255\255\021\000\021\000\255\255\007\000\021\000\006\000\022\000\022\000\255\255\007\000\022\000\255\255\023\000\023\000\019\000\012\000\023\000\255\255\007\000\018\000\255\255\024\000\024\000\021\000\255\255\024\000\255\255\255\255\019\000\022\000\255\255\255\255\b\000\255\255\255\255\023\000\255\255\255\255\255\255\255\255\019\000\025\000\025\000\rb
    Lexing.lex_base_code =
      "\000\000\000\000\002\000\000\000\007\000\t\000\015\000\017\000;\000\012\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\023\000\012\000\000\000\025\000\014\000*\000\022\000\000\000\000\000\000\000\000\000";
    Lexing.lex_backtrk_code =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000";
    Lexing.lex_default_code =
      "\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    Lexing.lex_trans_code =

    Lexing.lex_check_code =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\r\000\002\000\004\000\004\000\005\000\005\000\004\000\018\000\005\000\021\000\006\000\006\000\007\000\007\000\006\000\255\255\007\000\023\000\000\000\017\000\002\000\020\000\017\000\r\000\020\000\004\000\255\255\005\000\255\255\255\255\018\000\255\255\021\000\006\000\002\000\007\000\255\255\022\000\022\000\004\000\023\000\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\255\255\255\255\b\000\006\000\022\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\b\000\255\255\006\000\005\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\bb\000";
    Lexing.lex_code =
      "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"
  }
let rec main lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 3 (-1)); __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> []
  | 1 ->
      let basename =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          ((lexbuf.Lexing.lex_mem).(0))
      and filename =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          (((lexbuf.Lexing.lex_mem).(0)) + 4) in
      let bfs = collect [] lexbuf in ((basename, filename), bfs) ::
        (main lexbuf)
  | 2 -> fail lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_main_rec lexbuf __ocaml_lex_state)
and collect bfs lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 2 (-1));
  __ocaml_lex_collect_rec bfs lexbuf 13
and __ocaml_lex_collect_rec bfs lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let basename =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(0))
          (lexbuf.Lexing.lex_curr_pos + (-4))
      and filename =
        Lexing.sub_lexeme lexbuf ((lexbuf.Lexing.lex_mem).(0))
          lexbuf.Lexing.lex_curr_pos in
      collect ((basename, filename) :: bfs) lexbuf
  | 1 -> bfs
  | 2 -> fail lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_collect_rec bfs lexbuf __ocaml_lex_state)
[
  structure_item (src/lexdep.mll[19,45+2]..src/lexdep.mll[19,45+13])
    Tstr_open Fresh
    module_expr (src/lexdep.mll[19,45+7]..src/lexdep.mll[19,45+13])
      Tmod_ident "Stdlib!.Lexing"
  structure_item (src/lexdep.mll[21,60+2]..src/lexdep.mll[21,60+27])
    Tstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (src/lexdep.mll[21,60+2]..src/lexdep.mll[21,60+27])
          pext_name = "Error/420"
          pext_kind =
            Text_decl
              [
                core_type (src/lexdep.mll[21,60+21]..src/lexdep.mll[21,60+27])
                  Ttyp_constr "string/15!"
                  []
              ]
              None
  structure_item (src/lexdep.mll[23,89+2]..src/lexdep.mll[28,256+5])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexdep.mll[23,89+6]..src/lexdep.mll[23,89+10])
          Tpat_var "fail/421"
        expression (src/lexdep.mll[23,89+11]..src/lexdep.mll[28,256+5]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexdep.mll[23,89+11]..src/lexdep.mll[23,89+17])
                Tpat_var "lexbuf/423"
              expression (src/lexdep.mll[24,109+4]..src/lexdep.mll[28,256+5])
                Texp_apply
                expression (src/lexdep.mll[24,109+4]..src/lexdep.mll[24,109+9])
                  Texp_ident "Stdlib!.raise"
                [
                  <arg>
                    Nolabel
                    expression (src/lexdep.mll[24,109+10]..src/lexdep.mll[28,256+5])
                      Texp_construct "Error"
                      [
                        expression (src/lexdep.mll[25,126+6]..src/lexdep.mll[27,219+36])
                          Texp_apply
                          expression (src/lexdep.mll[25,126+7]..src/lexdep.mll[25,126+21])
                            Texp_ident "Stdlib!.Printf.sprintf"
                          [
                            <arg>
                              Nolabel
                              expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70])
                                Texp_construct "CamlinternalFormatBasics.Format"
                                [
                                  expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                    [
                                      expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                        Texp_constant Const_string("failed to make sense of ocamldep's output (character ",(src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost,None)
                                      expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                        Texp_construct "CamlinternalFormatBasics.Int"
                                        [
                                          expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                            Texp_construct "CamlinternalFormatBasics.Int_d"
                                            []
                                          expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                            []
                                          expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_precision"
                                            []
                                          expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                                Texp_constant Const_string(").\n",(src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost,None)
                                              expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                        ]
                                    ]
                                  expression (src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost
                                    Texp_constant Const_string("failed to make sense of ocamldep's output (character %d).\n",(src/lexdep.mll[26,148+9]..src/lexdep.mll[26,148+70]) ghost,None)
                                ]
                            <arg>
                              Nolabel
                              expression (src/lexdep.mll[27,219+9]..src/lexdep.mll[27,219+35])
                                Texp_field
                                expression (src/lexdep.mll[27,219+9]..src/lexdep.mll[27,219+26])
                                  Texp_field
                                  expression (src/lexdep.mll[27,219+9]..src/lexdep.mll[27,219+15])
                                    Texp_ident "lexbuf/423"
                                  "lex_curr_p"
                                "pos_cnum"
                          ]
                      ]
                ]
          ]
    ]
  structure_item (src/lexdep.ml[17,285+0]..src/lexdep.ml[242,15138+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lexdep.ml[17,285+4]..src/lexdep.ml[17,285+22])
          Tpat_var "__ocaml_lex_tables/484"
        expression (src/lexdep.ml[17,285+25]..src/lexdep.ml[242,15138+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (src/lexdep.ml[19,332+3]..src/lexdep.ml[22,542+37])
                    Texp_constant Const_string("\000\000\253\255\002\000\255\255\007\000\t\000\015\000\017\000;\000\254\255\023\000\012\000*\000F\000\253\255\004\000\254\255\025\000P\000e\000\027\000n\000t\000z\000\131\000\151\000\169\000\160\000",(src/lexdep.ml[19,332+4]..src/lexdep.ml[22,542+36]),None)
                "Lexing.lex_backtrk"
                  expression (src/lexdep.ml[24,604+3]..src/lexdep.ml[27,814+37])
                    Texp_constant Const_string("\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\000\000",(src/lexdep.ml[24,604+4]..src/lexdep.ml[27,814+36]),None)
                "Lexing.lex_default"
                  expression (src/lexdep.ml[29,876+3]..src/lexdep.ml[32,1086+37])
                    Texp_constant Const_string("\002\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\000\000\255\255\255\255\255\255\014\000\000\000\255\255\000\000\255\255\019\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000",(src/lexdep.ml[29,876+4]..src/lexdep.ml[32,1086+36]),None)
                "Lexing.lex_trans"
                  expression (src/lexdep.ml[34,1146+3]..src/lexdep.ml[87,4856+21])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\255\255\255\255\001\000\016\000\255\255\255\255\255\255\255\255\255\255\255\255\011\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\001\000\011\000\255\255\021\000\012\000\021\000\022\000\255\255\022\000\255\255\000\000\000\000\011\000\000\000\000\000\255\255\005\000\255\255\000\000\011\000\011\000\005\000\000\000\005\000\000\000\000\000\001\000\000\000\255\255\005\000\000\000\005\000\000\000\255\255\000\000\255\255\011\000\255\255\t\000\000\000\255\255\255\255\011\000\255\255\000\000\000\000\000\000\018\000\016\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\021\000\016\000\011\000\001\000\015\000\255\255\000\000\000\000\000\000\000\000\255\255\t\000\255\255\018\000\000\000\n\000\005\000\000\000\255\255\006\000\255\255\255\255\255\255\021\000\000\000\255\255\000\000\000\000\t\000\000\000\021\000\016\000\000\000\b\000\015\000\007\000\021\000\023\000\000\000\b\000\015\000\000\000\021\000\016\000\255\255\n\000\015\000\000\000\b\000\255\255\000\000\255\255\255\255\021\000\000\000\255\255\000\000\000\000\024\000\021\000\000\000\000\000\nsrc/lexdep.ml[34,1146+4]..src/lexdep.ml[87,4856+20]),None)
                "Lexing.lex_check"
                  expression (src/lexdep.ml[89,4900+3]..src/lexdep.ml[142,8610+21])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\015\000\002\000\004\000\004\000\005\000\005\000\004\000\011\000\005\000\255\255\006\000\006\000\007\000\007\000\006\000\255\255\007\000\255\255\000\000\n\000\002\000\017\000\n\000\020\000\017\000\004\000\020\000\005\000\255\255\255\255\011\000\255\255\255\255\006\000\002\000\007\000\255\255\012\000\012\000\004\000\255\255\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\011\000\255\255\b\000\006\000\012\000\007\000\255\255\255\255\255\255\r\000\r\000\255\255\255\255\r\000\255\255\255\255\255\255\255\255\255\255\018\000\018\000\b\000\000\000\018\000\002\000\255\255\255\255\255\255\255\255\004\000\012\000\005\000\r\000\255\255\011\000\b\000\255\255\006\000\005\000\007\000\019\000\019\000\018\000\255\255\019\000\255\255\255\255\b\000\255\255\021\000\021\000\255\255\007\000\021\000\006\000\022\000\022\000\255\255\007\000\022\000\255\255\023\000\023\000\019\000\012\000\023\000\255\255\007\000\018\000\255\255\024\000\024\000\021\000\255\255\024\000\255\255\255\255\019\000\022\000\255\255\255\255\b\000\255\255\255\255\023\000\255\255\255\255\255\255\255\255\019\000\025\000\025\000\rbsrc/lexdep.ml[89,4900+4]..src/lexdep.ml[142,8610+20]),None)
                "Lexing.lex_base_code"
                  expression (src/lexdep.ml[144,8658+3]..src/lexdep.ml[147,8868+37])
                    Texp_constant Const_string("\000\000\000\000\002\000\000\000\007\000\t\000\015\000\017\000;\000\012\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\023\000\012\000\000\000\025\000\014\000*\000\022\000\000\000\000\000\000\000\000\000",(src/lexdep.ml[144,8658+4]..src/lexdep.ml[147,8868+36]),None)
                "Lexing.lex_backtrk_code"
                  expression (src/lexdep.ml[149,8935+3]..src/lexdep.ml[152,9145+37])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000",(src/lexdep.ml[149,8935+4]..src/lexdep.ml[152,9145+36]),None)
                "Lexing.lex_default_code"
                  expression (src/lexdep.ml[154,9212+3]..src/lexdep.ml[157,9422+37])
                    Texp_constant Const_string("\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/lexdep.ml[154,9212+4]..src/lexdep.ml[157,9422+36]),None)
                "Lexing.lex_trans_code"
                  expression (src/lexdep.ml[159,9487+3]..src/lexdep.ml[198,12217+37])
                    Texp_constant Const_stringsrc/lexdep.ml[159,9487+4]..src/lexdep.ml[198,12217+36]),None)
                "Lexing.lex_check_code"
                  expression (src/lexdep.ml[200,12282+3]..src/lexdep.ml[239,15012+37])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\r\000\002\000\004\000\004\000\005\000\005\000\004\000\018\000\005\000\021\000\006\000\006\000\007\000\007\000\006\000\255\255\007\000\023\000\000\000\017\000\002\000\020\000\017\000\r\000\020\000\004\000\255\255\005\000\255\255\255\255\018\000\255\255\021\000\006\000\002\000\007\000\255\255\022\000\022\000\004\000\023\000\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\255\255\255\255\b\000\006\000\022\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\b\000\255\255\006\000\005\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\bb\000",(src/lexdep.ml[200,12282+4]..src/lexdep.ml[239,15012+36]),None)
                "Lexing.lex_code"
                  expression (src/lexdep.ml[241,15071+3]..src/lexdep.ml[241,15071+65])
                    Texp_constant Const_string("\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255",(src/lexdep.ml[241,15071+4]..src/lexdep.ml[241,15071+64]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/lexdep.ml[244,15141+0]..src/lexdep.ml[307,17071+58])
    Tstr_value Rec
    [
      <def>
        pattern (src/lexdep.ml[244,15141+8]..src/lexdep.ml[244,15141+12])
          Tpat_var "main/485"
        expression (src/lexdep.ml[244,15141+13]..src/lexdep.ml[245,15163+75]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexdep.ml[244,15141+13]..src/lexdep.ml[244,15141+19])
                Tpat_var "lexbuf/489"
              expression (src/lexdep.ml[245,15163+2]..src/lexdep.ml[245,15163+75])
                Texp_sequence
                expression (src/lexdep.ml[245,15163+2]..src/lexdep.ml[245,15163+44])
                  Texp_setfield
                  expression (src/lexdep.ml[245,15163+2]..src/lexdep.ml[245,15163+8])
                    Texp_ident "lexbuf/489"
                  "Lexing.lex_mem"
                  expression (src/lexdep.ml[245,15163+27]..src/lexdep.ml[245,15163+44])
                    Texp_apply
                    expression (src/lexdep.ml[245,15163+27]..src/lexdep.ml[245,15163+37])
                      Texp_ident "Stdlib!.Array.make"
                    [
                      <arg>
                        Nolabel
                        expression (src/lexdep.ml[245,15163+38]..src/lexdep.ml[245,15163+39])
                          Texp_constant Const_int 3
                      <arg>
                        Nolabel
                        expression (src/lexdep.ml[245,15163+40]..src/lexdep.ml[245,15163+44])
                          Texp_constant Const_int -1
                    ]
                expression (src/lexdep.ml[245,15163+46]..src/lexdep.ml[245,15163+75])
                  Texp_apply
                  expression (src/lexdep.ml[245,15163+46]..src/lexdep.ml[245,15163+66])
                    Texp_ident "__ocaml_lex_main_rec/486"
                  [
                    <arg>
                      Nolabel
                      expression (src/lexdep.ml[245,15163+67]..src/lexdep.ml[245,15163+73])
                        Texp_ident "lexbuf/489"
                    <arg>
                      Nolabel
                      expression (src/lexdep.ml[245,15163+74]..src/lexdep.ml[245,15163+75])
                        Texp_constant Const_int 0
                  ]
          ]
      <def>
        pattern (src/lexdep.ml[246,15239+4]..src/lexdep.ml[246,15239+24])
          Tpat_var "__ocaml_lex_main_rec/486"
        expression (src/lexdep.ml[246,15239+25]..src/lexdep.ml[275,16088+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexdep.ml[246,15239+25]..src/lexdep.ml[246,15239+31])
                Tpat_var "lexbuf/538"
              expression (src/lexdep.ml[246,15239+32]..src/lexdep.ml[275,16088+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexdep.ml[246,15239+32]..src/lexdep.ml[246,15239+49])
                      Tpat_var "__ocaml_lex_state/539"
                    expression (src/lexdep.ml[247,15291+2]..src/lexdep.ml[275,16088+51])
                      Texp_match
                      expression (src/lexdep.ml[247,15291+8]..src/lexdep.ml[247,15291+69])
                        Texp_apply
                        expression (src/lexdep.ml[247,15291+8]..src/lexdep.ml[247,15291+25])
                          Texp_ident "Stdlib!.Lexing.new_engine"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[247,15291+26]..src/lexdep.ml[247,15291+44])
                              Texp_ident "__ocaml_lex_tables/484"
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[247,15291+45]..src/lexdep.ml[247,15291+62])
                              Texp_ident "__ocaml_lex_state/539"
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[247,15291+63]..src/lexdep.ml[247,15291+69])
                              Texp_ident "lexbuf/538"
                        ]
                      [
                        <case>
                          pattern (src/lexdep.ml[248,15366+8]..src/lexdep.ml[248,15366+9])
                            Tpat_value
                            pattern (src/lexdep.ml[248,15366+8]..src/lexdep.ml[248,15366+9])
                              Tpat_constant Const_int 0
                          expression (src/lexdep.mll[45,15401+4]..src/lexdep.mll[45,15401+10])
                            Texp_construct "[]"
                            []
                        <case>
                          pattern (src/lexdep.ml[253,15435+4]..src/lexdep.ml[253,15435+5])
                            Tpat_value
                            pattern (src/lexdep.ml[253,15435+4]..src/lexdep.ml[253,15435+5])
                              Tpat_constant Const_int 1
                          expression (src/lexdep.ml[254,15444+0]..src/lexdep.mll[48,15881+50])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/lexdep.mll[38,15470+28]..src/lexdep.mll[38,15470+36])
                                  Tpat_var "basename/541"
                                expression (src/lexdep.ml[258,15529+2]..src/lexdep.ml[258,15529+80])
                                  Texp_apply
                                  expression (src/lexdep.ml[258,15529+2]..src/lexdep.ml[258,15529+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[258,15529+20]..src/lexdep.ml[258,15529+26])
                                        Texp_ident "lexbuf/538"
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[258,15529+27]..src/lexdep.ml[258,15529+54])
                                        Texp_field
                                        expression (src/lexdep.ml[258,15529+27]..src/lexdep.ml[258,15529+33])
                                          Texp_ident "lexbuf/538"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[258,15529+55]..src/lexdep.ml[258,15529+80])
                                        Texp_apply
                                        expression (src/lexdep.ml[258,15529+55]..src/lexdep.ml[258,15529+80]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[258,15529+55]..src/lexdep.ml[258,15529+76])
                                              Texp_field
                                              expression (src/lexdep.ml[258,15529+55]..src/lexdep.ml[258,15529+61])
                                                Texp_ident "lexbuf/538"
                                              "Lexing.lex_mem"
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[258,15529+78]..src/lexdep.ml[258,15529+79])
                                              Texp_constant Const_int 0
                                        ]
                                  ]
                              <def>
                                pattern (src/lexdep.mll[38,15636+65]..src/lexdep.mll[38,15636+73])
                                  Tpat_var "filename/542"
                                expression (src/lexdep.ml[263,15732+2]..src/lexdep.ml[263,15732+86])
                                  Texp_apply
                                  expression (src/lexdep.ml[263,15732+2]..src/lexdep.ml[263,15732+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[263,15732+20]..src/lexdep.ml[263,15732+26])
                                        Texp_ident "lexbuf/538"
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[263,15732+27]..src/lexdep.ml[263,15732+54])
                                        Texp_field
                                        expression (src/lexdep.ml[263,15732+27]..src/lexdep.ml[263,15732+33])
                                          Texp_ident "lexbuf/538"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.ml[263,15732+55]..src/lexdep.ml[263,15732+86])
                                        Texp_apply
                                        expression (src/lexdep.ml[263,15732+82]..src/lexdep.ml[263,15732+83])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[263,15732+56]..src/lexdep.ml[263,15732+81])
                                              Texp_apply
                                              expression (src/lexdep.ml[263,15732+56]..src/lexdep.ml[263,15732+81]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[263,15732+56]..src/lexdep.ml[263,15732+77])
                                                    Texp_field
                                                    expression (src/lexdep.ml[263,15732+56]..src/lexdep.ml[263,15732+62])
                                                      Texp_ident "lexbuf/538"
                                                    "Lexing.lex_mem"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[263,15732+79]..src/lexdep.ml[263,15732+80])
                                                    Texp_constant Const_int 0
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[263,15732+84]..src/lexdep.ml[263,15732+85])
                                              Texp_constant Const_int 4
                                        ]
                                  ]
                            ]
                            expression (src/lexdep.mll[47,15844+4]..src/lexdep.mll[48,15881+50])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/lexdep.mll[47,15844+10]..src/lexdep.mll[47,15844+13])
                                    Tpat_var "bfs/543"
                                  expression (src/lexdep.mll[47,15844+16]..src/lexdep.mll[47,15844+33])
                                    Texp_apply
                                    expression (src/lexdep.mll[47,15844+16]..src/lexdep.mll[47,15844+23])
                                      Texp_ident "collect/487"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.mll[47,15844+24]..src/lexdep.mll[47,15844+26])
                                          Texp_construct "[]"
                                          []
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.mll[47,15844+27]..src/lexdep.mll[47,15844+33])
                                          Texp_ident "lexbuf/538"
                                    ]
                              ]
                              expression (src/lexdep.mll[48,15881+6]..src/lexdep.mll[48,15881+48])
                                Texp_construct "::"
                                [
                                  expression (src/lexdep.mll[48,15881+6]..src/lexdep.mll[48,15881+33])
                                    Texp_tuple
                                    [
                                      expression (src/lexdep.mll[48,15881+7]..src/lexdep.mll[48,15881+27])
                                        Texp_tuple
                                        [
                                          expression (src/lexdep.mll[48,15881+8]..src/lexdep.mll[48,15881+16])
                                            Texp_ident "basename/541"
                                          expression (src/lexdep.mll[48,15881+18]..src/lexdep.mll[48,15881+26])
                                            Texp_ident "filename/542"
                                        ]
                                      expression (src/lexdep.mll[48,15881+29]..src/lexdep.mll[48,15881+32])
                                        Texp_ident "bfs/543"
                                    ]
                                  expression (src/lexdep.mll[48,15881+37]..src/lexdep.mll[48,15881+48])
                                    Texp_apply
                                    expression (src/lexdep.mll[48,15881+37]..src/lexdep.mll[48,15881+41])
                                      Texp_ident "main/485"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.mll[48,15881+42]..src/lexdep.mll[48,15881+48])
                                          Texp_ident "lexbuf/538"
                                    ]
                                ]
                        <case>
                          pattern (src/lexdep.ml[269,15955+4]..src/lexdep.ml[269,15955+5])
                            Tpat_value
                            pattern (src/lexdep.ml[269,15955+4]..src/lexdep.ml[269,15955+5])
                              Tpat_constant Const_int 2
                          expression (src/lexdep.mll[50,15986+4]..src/lexdep.mll[50,15986+19])
                            Texp_apply
                            expression (src/lexdep.mll[50,15986+6]..src/lexdep.mll[50,15986+10])
                              Texp_ident "fail/421"
                            [
                              <arg>
                                Nolabel
                                expression (src/lexdep.mll[50,15986+11]..src/lexdep.mll[50,15986+17])
                                  Texp_ident "lexbuf/538"
                            ]
                        <case>
                          pattern (src/lexdep.ml[274,16029+4]..src/lexdep.ml[274,16029+21])
                            Tpat_value
                            pattern (src/lexdep.ml[274,16029+4]..src/lexdep.ml[274,16029+21])
                              Tpat_var "__ocaml_lex_state/540"
                          expression (src/lexdep.ml[274,16029+25]..src/lexdep.ml[275,16088+51])
                            Texp_sequence
                            expression (src/lexdep.ml[274,16029+25]..src/lexdep.ml[274,16029+57])
                              Texp_apply
                              expression (src/lexdep.ml[274,16029+25]..src/lexdep.ml[274,16029+50])
                                Texp_field
                                expression (src/lexdep.ml[274,16029+25]..src/lexdep.ml[274,16029+31])
                                  Texp_ident "lexbuf/538"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[274,16029+51]..src/lexdep.ml[274,16029+57])
                                    Texp_ident "lexbuf/538"
                              ]
                            expression (src/lexdep.ml[275,16088+6]..src/lexdep.ml[275,16088+51])
                              Texp_apply
                              expression (src/lexdep.ml[275,16088+6]..src/lexdep.ml[275,16088+26])
                                Texp_ident "__ocaml_lex_main_rec/486"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[275,16088+27]..src/lexdep.ml[275,16088+33])
                                    Texp_ident "lexbuf/538"
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[275,16088+34]..src/lexdep.ml[275,16088+51])
                                    Texp_ident "__ocaml_lex_state/540"
                              ]
                      ]
                ]
          ]
      <def>
        pattern (src/lexdep.ml[277,16141+4]..src/lexdep.ml[277,16141+11])
          Tpat_var "collect/487"
        expression (src/lexdep.ml[277,16141+12]..src/lexdep.ml[278,16166+83]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexdep.ml[277,16141+12]..src/lexdep.ml[277,16141+15])
                Tpat_var "bfs/544"
              expression (src/lexdep.ml[277,16141+16]..src/lexdep.ml[278,16166+83]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexdep.ml[277,16141+16]..src/lexdep.ml[277,16141+22])
                      Tpat_var "lexbuf/545"
                    expression (src/lexdep.ml[278,16166+2]..src/lexdep.ml[278,16166+83])
                      Texp_sequence
                      expression (src/lexdep.ml[278,16166+2]..src/lexdep.ml[278,16166+44])
                        Texp_setfield
                        expression (src/lexdep.ml[278,16166+2]..src/lexdep.ml[278,16166+8])
                          Texp_ident "lexbuf/545"
                        "Lexing.lex_mem"
                        expression (src/lexdep.ml[278,16166+27]..src/lexdep.ml[278,16166+44])
                          Texp_apply
                          expression (src/lexdep.ml[278,16166+27]..src/lexdep.ml[278,16166+37])
                            Texp_ident "Stdlib!.Array.make"
                          [
                            <arg>
                              Nolabel
                              expression (src/lexdep.ml[278,16166+38]..src/lexdep.ml[278,16166+39])
                                Texp_constant Const_int 2
                            <arg>
                              Nolabel
                              expression (src/lexdep.ml[278,16166+40]..src/lexdep.ml[278,16166+44])
                                Texp_constant Const_int -1
                          ]
                      expression (src/lexdep.ml[278,16166+46]..src/lexdep.ml[278,16166+83])
                        Texp_apply
                        expression (src/lexdep.ml[278,16166+46]..src/lexdep.ml[278,16166+69])
                          Texp_ident "__ocaml_lex_collect_rec/488"
                        [
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[278,16166+70]..src/lexdep.ml[278,16166+73])
                              Texp_ident "bfs/544"
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[278,16166+74]..src/lexdep.ml[278,16166+80])
                              Texp_ident "lexbuf/545"
                          <arg>
                            Nolabel
                            expression (src/lexdep.ml[278,16166+81]..src/lexdep.ml[278,16166+83])
                              Texp_constant Const_int 13
                        ]
                ]
          ]
      <def>
        pattern (src/lexdep.ml[279,16250+4]..src/lexdep.ml[279,16250+27])
          Tpat_var "__ocaml_lex_collect_rec/488"
        expression (src/lexdep.ml[279,16250+28]..src/lexdep.ml[307,17071+58]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lexdep.ml[279,16250+28]..src/lexdep.ml[279,16250+31])
                Tpat_var "bfs/546"
              expression (src/lexdep.ml[279,16250+32]..src/lexdep.ml[307,17071+58]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lexdep.ml[279,16250+32]..src/lexdep.ml[279,16250+38])
                      Tpat_var "lexbuf/547"
                    expression (src/lexdep.ml[279,16250+39]..src/lexdep.ml[307,17071+58]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lexdep.ml[279,16250+39]..src/lexdep.ml[279,16250+56])
                            Tpat_var "__ocaml_lex_state/548"
                          expression (src/lexdep.ml[280,16309+2]..src/lexdep.ml[307,17071+58])
                            Texp_match
                            expression (src/lexdep.ml[280,16309+8]..src/lexdep.ml[280,16309+69])
                              Texp_apply
                              expression (src/lexdep.ml[280,16309+8]..src/lexdep.ml[280,16309+25])
                                Texp_ident "Stdlib!.Lexing.new_engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[280,16309+26]..src/lexdep.ml[280,16309+44])
                                    Texp_ident "__ocaml_lex_tables/484"
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[280,16309+45]..src/lexdep.ml[280,16309+62])
                                    Texp_ident "__ocaml_lex_state/548"
                                <arg>
                                  Nolabel
                                  expression (src/lexdep.ml[280,16309+63]..src/lexdep.ml[280,16309+69])
                                    Texp_ident "lexbuf/547"
                              ]
                            [
                              <case>
                                pattern (src/lexdep.ml[281,16384+8]..src/lexdep.ml[281,16384+9])
                                  Tpat_value
                                  pattern (src/lexdep.ml[281,16384+8]..src/lexdep.ml[281,16384+9])
                                    Tpat_constant Const_int 0
                                expression (src/lexdep.ml[282,16397+0]..src/lexdep.mll[57,16796+52])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/lexdep.mll[38,16423+28]..src/lexdep.mll[38,16423+36])
                                        Tpat_var "basename/550"
                                      expression (src/lexdep.ml[286,16482+2]..src/lexdep.ml[286,16482+86])
                                        Texp_apply
                                        expression (src/lexdep.ml[286,16482+2]..src/lexdep.ml[286,16482+19])
                                          Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[286,16482+20]..src/lexdep.ml[286,16482+26])
                                              Texp_ident "lexbuf/547"
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[286,16482+27]..src/lexdep.ml[286,16482+52])
                                              Texp_apply
                                              expression (src/lexdep.ml[286,16482+27]..src/lexdep.ml[286,16482+52]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[286,16482+27]..src/lexdep.ml[286,16482+48])
                                                    Texp_field
                                                    expression (src/lexdep.ml[286,16482+27]..src/lexdep.ml[286,16482+33])
                                                      Texp_ident "lexbuf/547"
                                                    "Lexing.lex_mem"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[286,16482+50]..src/lexdep.ml[286,16482+51])
                                                    Texp_constant Const_int 0
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[286,16482+53]..src/lexdep.ml[286,16482+86])
                                              Texp_apply
                                              expression (src/lexdep.ml[286,16482+81]..src/lexdep.ml[286,16482+82])
                                                Texp_ident "Stdlib!.+"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[286,16482+54]..src/lexdep.ml[286,16482+80])
                                                    Texp_field
                                                    expression (src/lexdep.ml[286,16482+54]..src/lexdep.ml[286,16482+60])
                                                      Texp_ident "lexbuf/547"
                                                    "Lexing.lex_curr_pos"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[286,16482+83]..src/lexdep.ml[286,16482+85])
                                                    Texp_constant Const_int -4
                                              ]
                                        ]
                                    <def>
                                      pattern (src/lexdep.mll[38,16595+65]..src/lexdep.mll[38,16595+73])
                                        Tpat_var "filename/551"
                                      expression (src/lexdep.ml[291,16691+2]..src/lexdep.ml[291,16691+79])
                                        Texp_apply
                                        expression (src/lexdep.ml[291,16691+2]..src/lexdep.ml[291,16691+19])
                                          Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[291,16691+20]..src/lexdep.ml[291,16691+26])
                                              Texp_ident "lexbuf/547"
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[291,16691+27]..src/lexdep.ml[291,16691+52])
                                              Texp_apply
                                              expression (src/lexdep.ml[291,16691+27]..src/lexdep.ml[291,16691+52]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[291,16691+27]..src/lexdep.ml[291,16691+48])
                                                    Texp_field
                                                    expression (src/lexdep.ml[291,16691+27]..src/lexdep.ml[291,16691+33])
                                                      Texp_ident "lexbuf/547"
                                                    "Lexing.lex_mem"
                                                <arg>
                                                  Nolabel
                                                  expression (src/lexdep.ml[291,16691+50]..src/lexdep.ml[291,16691+51])
                                                    Texp_constant Const_int 0
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/lexdep.ml[291,16691+53]..src/lexdep.ml[291,16691+79])
                                              Texp_field
                                              expression (src/lexdep.ml[291,16691+53]..src/lexdep.ml[291,16691+59])
                                                Texp_ident "lexbuf/547"
                                              "Lexing.lex_curr_pos"
                                        ]
                                  ]
                                  expression (src/lexdep.mll[57,16796+4]..src/lexdep.mll[57,16796+52])
                                    Texp_apply
                                    expression (src/lexdep.mll[57,16796+6]..src/lexdep.mll[57,16796+13])
                                      Texp_ident "collect/487"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.mll[57,16796+14]..src/lexdep.mll[57,16796+43])
                                          Texp_construct "::"
                                          [
                                            expression (src/lexdep.mll[57,16796+15]..src/lexdep.mll[57,16796+35])
                                              Texp_tuple
                                              [
                                                expression (src/lexdep.mll[57,16796+16]..src/lexdep.mll[57,16796+24])
                                                  Texp_ident "basename/550"
                                                expression (src/lexdep.mll[57,16796+26]..src/lexdep.mll[57,16796+34])
                                                  Texp_ident "filename/551"
                                              ]
                                            expression (src/lexdep.mll[57,16796+39]..src/lexdep.mll[57,16796+42])
                                              Texp_ident "bfs/546"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.mll[57,16796+44]..src/lexdep.mll[57,16796+50])
                                          Texp_ident "lexbuf/547"
                                    ]
                              <case>
                                pattern (src/lexdep.ml[296,16872+4]..src/lexdep.ml[296,16872+5])
                                  Tpat_value
                                  pattern (src/lexdep.ml[296,16872+4]..src/lexdep.ml[296,16872+5])
                                    Tpat_constant Const_int 1
                                expression (src/lexdep.mll[59,16903+4]..src/lexdep.mll[59,16903+11])
                                  Texp_ident "bfs/546"
                              <case>
                                pattern (src/lexdep.ml[301,16938+4]..src/lexdep.ml[301,16938+5])
                                  Tpat_value
                                  pattern (src/lexdep.ml[301,16938+4]..src/lexdep.ml[301,16938+5])
                                    Tpat_constant Const_int 2
                                expression (src/lexdep.mll[62,16969+4]..src/lexdep.mll[62,16969+19])
                                  Texp_apply
                                  expression (src/lexdep.mll[62,16969+6]..src/lexdep.mll[62,16969+10])
                                    Texp_ident "fail/421"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lexdep.mll[62,16969+11]..src/lexdep.mll[62,16969+17])
                                        Texp_ident "lexbuf/547"
                                  ]
                              <case>
                                pattern (src/lexdep.ml[306,17012+4]..src/lexdep.ml[306,17012+21])
                                  Tpat_value
                                  pattern (src/lexdep.ml[306,17012+4]..src/lexdep.ml[306,17012+21])
                                    Tpat_var "__ocaml_lex_state/549"
                                expression (src/lexdep.ml[306,17012+25]..src/lexdep.ml[307,17071+58])
                                  Texp_sequence
                                  expression (src/lexdep.ml[306,17012+25]..src/lexdep.ml[306,17012+57])
                                    Texp_apply
                                    expression (src/lexdep.ml[306,17012+25]..src/lexdep.ml[306,17012+50])
                                      Texp_field
                                      expression (src/lexdep.ml[306,17012+25]..src/lexdep.ml[306,17012+31])
                                        Texp_ident "lexbuf/547"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.ml[306,17012+51]..src/lexdep.ml[306,17012+57])
                                          Texp_ident "lexbuf/547"
                                    ]
                                  expression (src/lexdep.ml[307,17071+6]..src/lexdep.ml[307,17071+58])
                                    Texp_apply
                                    expression (src/lexdep.ml[307,17071+6]..src/lexdep.ml[307,17071+29])
                                      Texp_ident "__ocaml_lex_collect_rec/488"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.ml[307,17071+30]..src/lexdep.ml[307,17071+33])
                                          Texp_ident "bfs/546"
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.ml[307,17071+34]..src/lexdep.ml[307,17071+40])
                                          Texp_ident "lexbuf/547"
                                      <arg>
                                        Nolabel
                                        expression (src/lexdep.ml[307,17071+41]..src/lexdep.ml[307,17071+58])
                                          Texp_ident "__ocaml_lex_state/549"
                                    ]
                            ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Lexdep>
 "Error"[extension constructor] -> <Dune__exe__Lexdep.0>;
 "__ocaml_lex_collect_rec"[value] -> <Dune__exe__Lexdep.7>;
 "__ocaml_lex_main_rec"[value] -> <Dune__exe__Lexdep.5>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__Lexdep.3>;
 "collect"[value] -> <Dune__exe__Lexdep.6>;
 "fail"[value] -> <Dune__exe__Lexdep.1>;
 "main"[value] -> <Dune__exe__Lexdep.4>;
 }

(setglobal Dune__exe__Lexdep!
  (let
    (Error/420 =
       (makeblock 248 "Dune__exe__Lexdep.Error" (caml_fresh_oo_id 0))
     fail/421 =
       (function lexbuf/423
         (funct-body Dune__exe__Lexdep.fail src/lexdep.mll(23)<ghost>:100-261
           (before Dune__exe__Lexdep.fail src/lexdep.mll(24):113-261
             (raise
               (after Dune__exe__Lexdep.fail src/lexdep.mll(24):113-261
                 (makeblock 0 Error/420
                   (after Dune__exe__Lexdep.fail src/lexdep.mll(25):132-255
                     (apply (field_imm 3 (global Stdlib__Printf!))
                       [0:
                        [11:
                         "failed to make sense of ocamldep's output (character "
                         [4: 0 0 0 [11: ").\n" 0]]]
                        "failed to make sense of ocamldep's output (character %d).\n"]
                       (field_int 3 (field_mut 11 lexbuf/423))))))))))
     __ocaml_lex_tables/484 =
       [0:
        "\000\000\253\255\002\000\255\255\007\000\t\000\015\000\017\000;\000\254\255\023\000\012\000*\000F\000\253\255\004\000\254\255\025\000P\000e\000\027\000n\000t\000z\000\131\000\151\000\169\000\160\000"
        "\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\000\000"
        "\002\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\000\000\255\255\255\255\255\255\014\000\000\000\255\255\000\000\255\255\019\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000"
t\000\000\000\255\255\255\255\011\000\255\255\000\000\000\000\000\000\018\000\016\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\021\000\016\000\011\000\001\000\015\000\255\255\000\000\000\000\000\000\000\000\255\255\t\000\255\255\018\000\000\000\n\000\005\000\000\000\255\255\006\000\255\255\255\255\255\255\021\000\000\000\255\255\000\000\000\000\t\000\000\000\021\000\016\000\000\000\b\000\015\000\007\000\021\000\023\000\000\000\b\000\015\000\000\000\021\000\016\000\255\255\n\000\015\000\000\000\b\000\255\255\000\000\255\255\255\255\021\000\000\000\255\255\000\000\000\000\024\000\021\000\000\000\000\000\n
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\015\000\002\000\004\000\004\000\005\000\005\000\004\000\011\000\005\000\255\255\006\000\006\000\007\000\007\000\006\000\255\255\007\000\255\255\000\000\n\000\002\000\017\000\n\000\020\000\017\000\004\000\020\000\005\000\255\255\255\255\011\000\255\255\255\255\006\000\002\000\007\000\255\255\012\000\012\000\004\000\255\255\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\011\000\255\255\b\000\006\000\012\000\007\000\255\255\255\255\255\255\r\000\r\000\255\255\255\255\r\000\255\255\255\255\255\255\255\255\255\255\018\000\018\000\b\000\000\000\018\000\002\000\255\255\255\255\255\255\255\255\004\000\012\000\005\000\r\000\255\255\011\000\b\000\255\255\006\000\005\000\007\000\019\000\019\000\018\000\255\255\019\000\255\255\255\255\b\000\255\255\021\000\021\000\255\255\007\000\021\000\006\000\022\000\022\000\255\255\007\000\022\000\255\255\023\000\023\000\019\000\012\000\023\000\255\255\007\000\018\000\255\255\024\000\024\000\021\000\255\255\024\000\255\255\255\255\019\000\022\000\255\255\255\255\b\000\255\255\255\255\023\000\255\255\255\255\255\255\255\255\019\000\025\000\025\000\rb
        "\000\000\000\000\002\000\000\000\007\000\t\000\015\000\017\000;\000\012\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\023\000\012\000\000\000\025\000\014\000*\000\022\000\000\000\000\000\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000"
        "\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\r\000\002\000\004\000\004\000\005\000\005\000\004\000\018\000\005\000\021\000\006\000\006\000\007\000\007\000\006\000\255\255\007\000\023\000\000\000\017\000\002\000\020\000\017\000\r\000\020\000\004\000\255\255\005\000\255\255\255\255\018\000\255\255\021\000\006\000\002\000\007\000\255\255\022\000\022\000\004\000\023\000\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\255\255\255\255\b\000\006\000\022\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\b\000\255\255\006\000\005\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\bb\000"
        "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"])
    (letrec
      (main/485
         (function lexbuf/489
           (funct-body Dune__exe__Lexdep.main src/lexdep.ml(244)<ghost>:15154-15238
             (before Dune__exe__Lexdep.main src/lexdep.ml(245):15165-15238
               (seq
                 (setfield_ptr 9 lexbuf/489
                   (after Dune__exe__Lexdep.main src/lexdep.ml(245):15190-15207
                     (caml_make_vect 3 -1)))
                 (before Dune__exe__Lexdep.main src/lexdep.ml(245):15209-15238
                   (after Dune__exe__Lexdep.main src/lexdep.ml(245):15209-15238
                     (apply __ocaml_lex_main_rec/486 lexbuf/489 0)))))))
        __ocaml_lex_main_rec/486
          (function lexbuf/538 __ocaml_lex_state/539[int]
            (funct-body Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(246)<ghost>:15264-16139
              (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(247):15293-16139
                (let
                  (__ocaml_lex_state/540 =
                     (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(247):15299-15360
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/484 __ocaml_lex_state/539
                         lexbuf/538)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/540) (exit 1)
                      (switch* __ocaml_lex_state/540
                       case int 0:
                        (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(45):15405-15411
                          0)
                       case int 1:
                        (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(254):15444-15931
                          (let
                            (basename/541 =
                               (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(258):15531-15609
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/538 (field_int 4 lexbuf/538)
                                   (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(258):15584-15609
                                     (array.get[int] (field_mut 9 lexbuf/538)
                                       0))))
                             filename/542 =
                               (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(263):15734-15818
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/538 (field_int 4 lexbuf/538)
                                   (+
                                     (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(263):15788-15813
                                       (array.get[int]
                                         (field_mut 9 lexbuf/538) 0))
                                     4))))
                            (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(47):15848-15931
                              (let
                                (bfs/543 =
                                   (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(47):15860-15877
                                     (apply collect/487 0 lexbuf/538)))
                                (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(48):15887-15929
                                  (makeblock 0
                                    (makeblock 0
                                      (makeblock 0 basename/541 filename/542)
                                      bfs/543)
                                    (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(48):15918-15929
                                      (apply main/485 lexbuf/538))))))))
                       case int 2:
                        (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(50):15990-16005
                          (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(50):15990-16005
                            (apply fail/421 lexbuf/538)))))
                   with (1)
                    (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(274):16054-16139
                      (seq
                        (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(274):16054-16086
                          (apply (field_imm 0 lexbuf/538) lexbuf/538))
                        (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(275):16094-16139
                          (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(275):16094-16139
                            (apply __ocaml_lex_main_rec/486 lexbuf/538
                              __ocaml_lex_state/540))))))))))
        collect/487
          (function bfs/544 lexbuf/545
            (funct-body Dune__exe__Lexdep.collect src/lexdep.ml(277)<ghost>:16153-16249
              (before Dune__exe__Lexdep.collect src/lexdep.ml(278):16168-16249
                (seq
                  (setfield_ptr 9 lexbuf/545
                    (after Dune__exe__Lexdep.collect src/lexdep.ml(278):16193-16210
                      (caml_make_vect 2 -1)))
                  (before Dune__exe__Lexdep.collect src/lexdep.ml(278):16212-16249
                    (after Dune__exe__Lexdep.collect src/lexdep.ml(278):16212-16249
                      (apply __ocaml_lex_collect_rec/488 bfs/544 lexbuf/545
                        13)))))))
        __ocaml_lex_collect_rec/488
          (function bfs/546 lexbuf/547 __ocaml_lex_state/548[int]
            (funct-body Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(279)<ghost>:16278-17129
              (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(280):16311-17129
                (let
                  (__ocaml_lex_state/549 =
                     (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(280):16317-16378
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/484 __ocaml_lex_state/548
                         lexbuf/547)))
                  (catch
                    (if (isout 2 __ocaml_lex_state/549) (exit 2)
                      (switch* __ocaml_lex_state/549
                       case int 0:
                        (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(282):16397-16848
                          (let
                            (basename/550 =
                               (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(286):16484-16568
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/547
                                   (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(286):16509-16534
                                     (array.get[int] (field_mut 9 lexbuf/547)
                                       0))
                                   (+ (field_int 5 lexbuf/547) -4)))
                             filename/551 =
                               (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(291):16693-16770
                                 (apply
                                   (field_imm 15 (global Stdlib__Lexing!))
                                   lexbuf/547
                                   (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(291):16718-16743
                                     (array.get[int] (field_mut 9 lexbuf/547)
                                       0))
                                   (field_int 5 lexbuf/547))))
                            (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(57):16800-16848
                              (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(57):16800-16848
                                (apply collect/487
                                  (makeblock 0
                                    (makeblock 0 basename/550 filename/551)
                                    bfs/546)
                                  lexbuf/547)))))
                       case int 1:
                        (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(59):16907-16914
                          bfs/546)
                       case int 2:
                        (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(62):16973-16988
                          (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(62):16973-16988
                            (apply fail/421 lexbuf/547)))))
                   with (2)
                    (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(306):17037-17129
                      (seq
                        (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(306):17037-17069
                          (apply (field_imm 0 lexbuf/547) lexbuf/547))
                        (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(307):17077-17129
                          (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(307):17077-17129
                            (apply __ocaml_lex_collect_rec/488 bfs/546
                              lexbuf/547 __ocaml_lex_state/549)))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/420 fail/421 __ocaml_lex_tables/484 main/485
          __ocaml_lex_main_rec/486 collect/487 __ocaml_lex_collect_rec/488)))))
(setglobal Dune__exe__Lexdep!
  (let
    (Error/420 =
       (makeblock 248 "Dune__exe__Lexdep.Error" (caml_fresh_oo_id 0))
     fail/421 =
       (function lexbuf/423
         (funct-body Dune__exe__Lexdep.fail src/lexdep.mll(23)<ghost>:100-261
           (before Dune__exe__Lexdep.fail src/lexdep.mll(24):113-261
             (raise
               (after Dune__exe__Lexdep.fail src/lexdep.mll(24):113-261
                 (makeblock 0 Error/420
                   (after Dune__exe__Lexdep.fail src/lexdep.mll(25):132-255
                     (apply (field_imm 3 (global Stdlib__Printf!))
                       [0:
                        [11:
                         "failed to make sense of ocamldep's output (character "
                         [4: 0 0 0 [11: ").\n" 0]]]
                        "failed to make sense of ocamldep's output (character %d).\n"]
                       (field_int 3 (field_mut 11 lexbuf/423))))))))))
     __ocaml_lex_tables/484 =
       [0:
        "\000\000\253\255\002\000\255\255\007\000\t\000\015\000\017\000;\000\254\255\023\000\012\000*\000F\000\253\255\004\000\254\255\025\000P\000e\000\027\000n\000t\000z\000\131\000\151\000\169\000\160\000"
        "\255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\000\000"
        "\002\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\000\000\255\255\255\255\255\255\014\000\000\000\255\255\000\000\255\255\019\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000"
t\000\000\000\255\255\255\255\011\000\255\255\000\000\000\000\000\000\018\000\016\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\021\000\016\000\011\000\001\000\015\000\255\255\000\000\000\000\000\000\000\000\255\255\t\000\255\255\018\000\000\000\n\000\005\000\000\000\255\255\006\000\255\255\255\255\255\255\021\000\000\000\255\255\000\000\000\000\t\000\000\000\021\000\016\000\000\000\b\000\015\000\007\000\021\000\023\000\000\000\b\000\015\000\000\000\021\000\016\000\255\255\n\000\015\000\000\000\b\000\255\255\000\000\255\255\255\255\021\000\000\000\255\255\000\000\000\000\024\000\021\000\000\000\000\000\n\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\017\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\000\000\020\000\255\255\255\255\000\000\000\000\024\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\000\000\000\000\000\000\024\000\000\000\000\000\000\000\255\255\020\000\000\000\000\000\000\000\024\000\000\000\020\000\255\255\000\000\000\000\000\000\000\000\020\000\024\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\003\000\000\000\255\255\000\000\026\000\255\255\000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\255\255\027\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\015\000\002\000\004\000\004\000\005\000\005\000\004\000\011\000\005\000\255\255\006\000\006\000\007\000\007\000\006\000\255\255\007\000\255\255\000\000\n\000\002\000\017\000\n\000\020\000\017\000\004\000\020\000\005\000\255\255\255\255\011\000\255\255\255\255\006\000\002\000\007\000\255\255\012\000\012\000\004\000\255\255\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\011\000\255\255\b\000\006\000\012\000\007\000\255\255\255\255\255\255\r\000\r\000\255\255\255\255\r\000\255\255\255\255\255\255\255\255\255\255\018\000\018\000\b\000\000\000\018\000\002\000\255\255\255\255\255\255\255\255\004\000\012\000\005\000\r\000\255\255\011\000\b\000\255\255\006\000\005\000\007\000\019\000\019\000\018\000\255\255\019\000\255\255\255\255\b\000\255\255\021\000\021\000\255\255\007\000\021\000\006\000\022\000\022\000\255\255\007\000\022\000\255\255\023\000\023\000\019\000\012\000\023\000\255\255\007\000\018\000\255\255\024\000\024\000\021\000\255\255\024\000\255\255\255\255\019\000\022\000\255\255\255\255\b\000\255\255\255\255\023\000\255\255\255\255\255\255\255\255\019\000\025\000\025\000\rb
        "\000\000\000\000\002\000\000\000\007\000\t\000\015\000\017\000;\000\012\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\023\000\012\000\000\000\025\000\014\000*\000\022\000\000\000\000\000\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000"
        "\001\000\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\002\000\002\000\000\000\r\000\002\000\004\000\004\000\005\000\005\000\004\000\018\000\005\000\021\000\006\000\006\000\007\000\007\000\006\000\255\255\007\000\023\000\000\000\017\000\002\000\020\000\017\000\r\000\020\000\004\000\255\255\005\000\255\255\255\255\018\000\255\255\021\000\006\000\002\000\007\000\255\255\022\000\022\000\004\000\023\000\005\000\255\255\255\255\000\000\255\255\002\000\006\000\255\255\007\000\255\255\004\000\255\255\005\000\b\000\b\000\255\255\255\255\b\000\006\000\022\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\000\000\255\255\002\000\255\255\255\255\255\255\255\255\004\000\255\255\005\000\255\255\255\255\255\255\b\000\255\255\006\000\005\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\b\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\bb\000"
        "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"])
    (letrec
      (main/485
         (function lexbuf/489
           (funct-body Dune__exe__Lexdep.main src/lexdep.ml(244)<ghost>:15154-15238
             (before Dune__exe__Lexdep.main src/lexdep.ml(245):15165-15238
               (seq
                 (setfield_ptr 9 lexbuf/489
                   (after Dune__exe__Lexdep.main src/lexdep.ml(245):15190-15207
                     (caml_make_vect 3 -1)))
                 (before Dune__exe__Lexdep.main src/lexdep.ml(245):15209-15238
                   (after Dune__exe__Lexdep.main src/lexdep.ml(245):15209-15238
                     (apply __ocaml_lex_main_rec/486 lexbuf/489 0)))))))
        __ocaml_lex_main_rec/486
          (function lexbuf/538 __ocaml_lex_state/539[int]
            (funct-body Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(246)<ghost>:15264-16139
              (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(247):15293-16139
                (let
                  (__ocaml_lex_state/540 =
                     (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(247):15299-15360
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/484 __ocaml_lex_state/539
                         lexbuf/538)))
                  (if (isout 2 __ocaml_lex_state/540)
                    (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(274):16054-16139
                      (seq
                        (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(274):16054-16086
                          (apply (field_imm 0 lexbuf/538) lexbuf/538))
                        (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(275):16094-16139
                          (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(275):16094-16139
                            (apply __ocaml_lex_main_rec/486 lexbuf/538
                              __ocaml_lex_state/540)))))
                    (switch* __ocaml_lex_state/540
                     case int 0:
                      (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(45):15405-15411
                        0)
                     case int 1:
                      (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(254):15444-15931
                        (let
                          (basename/541 =
                             (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(258):15531-15609
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/538 (field_int 4 lexbuf/538)
                                 (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(258):15584-15609
                                   (array.get[int] (field_mut 9 lexbuf/538)
                                     0))))
                           filename/542 =
                             (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(263):15734-15818
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/538 (field_int 4 lexbuf/538)
                                 (+
                                   (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.ml(263):15788-15813
                                     (array.get[int] (field_mut 9 lexbuf/538)
                                       0))
                                   4))))
                          (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(47):15848-15931
                            (let
                              (bfs/543 =
                                 (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(47):15860-15877
                                   (apply collect/487 0 lexbuf/538)))
                              (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(48):15887-15929
                                (makeblock 0
                                  (makeblock 0
                                    (makeblock 0 basename/541 filename/542)
                                    bfs/543)
                                  (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(48):15918-15929
                                    (apply main/485 lexbuf/538))))))))
                     case int 2:
                      (before Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(50):15990-16005
                        (after Dune__exe__Lexdep.__ocaml_lex_main_rec src/lexdep.mll(50):15990-16005
                          (apply fail/421 lexbuf/538)))))))))
        collect/487
          (function bfs/544 lexbuf/545
            (funct-body Dune__exe__Lexdep.collect src/lexdep.ml(277)<ghost>:16153-16249
              (before Dune__exe__Lexdep.collect src/lexdep.ml(278):16168-16249
                (seq
                  (setfield_ptr 9 lexbuf/545
                    (after Dune__exe__Lexdep.collect src/lexdep.ml(278):16193-16210
                      (caml_make_vect 2 -1)))
                  (before Dune__exe__Lexdep.collect src/lexdep.ml(278):16212-16249
                    (after Dune__exe__Lexdep.collect src/lexdep.ml(278):16212-16249
                      (apply __ocaml_lex_collect_rec/488 bfs/544 lexbuf/545
                        13)))))))
        __ocaml_lex_collect_rec/488
          (function bfs/546 lexbuf/547 __ocaml_lex_state/548[int]
            (funct-body Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(279)<ghost>:16278-17129
              (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(280):16311-17129
                (let
                  (__ocaml_lex_state/549 =
                     (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(280):16317-16378
                       (apply (field_imm 20 (global Stdlib__Lexing!))
                         __ocaml_lex_tables/484 __ocaml_lex_state/548
                         lexbuf/547)))
                  (if (isout 2 __ocaml_lex_state/549)
                    (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(306):17037-17129
                      (seq
                        (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(306):17037-17069
                          (apply (field_imm 0 lexbuf/547) lexbuf/547))
                        (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(307):17077-17129
                          (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(307):17077-17129
                            (apply __ocaml_lex_collect_rec/488 bfs/546
                              lexbuf/547 __ocaml_lex_state/549)))))
                    (switch* __ocaml_lex_state/549
                     case int 0:
                      (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(282):16397-16848
                        (let
                          (basename/550 =
                             (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(286):16484-16568
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/547
                                 (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(286):16509-16534
                                   (array.get[int] (field_mut 9 lexbuf/547)
                                     0))
                                 (+ (field_int 5 lexbuf/547) -4)))
                           filename/551 =
                             (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(291):16693-16770
                               (apply (field_imm 15 (global Stdlib__Lexing!))
                                 lexbuf/547
                                 (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.ml(291):16718-16743
                                   (array.get[int] (field_mut 9 lexbuf/547)
                                     0))
                                 (field_int 5 lexbuf/547))))
                          (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(57):16800-16848
                            (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(57):16800-16848
                              (apply collect/487
                                (makeblock 0
                                  (makeblock 0 basename/550 filename/551)
                                  bfs/546)
                                lexbuf/547)))))
                     case int 1:
                      (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(59):16907-16914
                        bfs/546)
                     case int 2:
                      (before Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(62):16973-16988
                        (after Dune__exe__Lexdep.__ocaml_lex_collect_rec src/lexdep.mll(62):16973-16988
                          (apply fail/421 lexbuf/547))))))))))
      (pseudo <unknown location>
        (makeblock 0 Error/420 fail/421 __ocaml_lex_tables/484 main/485
          __ocaml_lex_main_rec/486 collect/487 __ocaml_lex_collect_rec/488)))))

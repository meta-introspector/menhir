[
  structure_item (src/invariant.ml[17,1121+0]..[17,1121+12])
    Pstr_open Fresh
    module_expr (src/invariant.ml[17,1121+5]..[17,1121+12])
      Pmod_ident "Grammar" (src/invariant.ml[17,1121+5]..[17,1121+12])
  structure_item (src/invariant.ml[18,1134+0]..[18,1134+19])
    Pstr_module
    "C" (src/invariant.ml[18,1134+7]..[18,1134+8])
      module_expr (src/invariant.ml[18,1134+11]..[18,1134+19])
        Pmod_ident "Conflict" (src/invariant.ml[18,1134+11]..[18,1134+19])
  structure_item (src/invariant.ml[24,1417+0]..[25,1430+20])
    Pstr_module
    "SSy" (src/invariant.ml[24,1417+7]..[24,1417+10])
      module_expr (src/invariant.ml[25,1430+2]..[25,1430+20])
        Pmod_apply_unit
        module_expr (src/invariant.ml[25,1430+2]..[25,1430+18])
          Pmod_ident "StackSymbols.Run" (src/invariant.ml[25,1430+2]..[25,1430+18])
  structure_item (src/invariant.ml[27,1452+0]..[27,1452+8])
    Pstr_open Fresh
    module_expr (src/invariant.ml[27,1452+5]..[27,1452+8])
      Pmod_ident "SSy" (src/invariant.ml[27,1452+5]..[27,1452+8])
  structure_item (src/invariant.ml[32,1620+0]..[33,1633+22])
    Pstr_module
    "SSt" (src/invariant.ml[32,1620+7]..[32,1620+10])
      module_expr (src/invariant.ml[33,1633+2]..[33,1633+22])
        Pmod_apply
        module_expr (src/invariant.ml[33,1633+2]..[33,1633+17])
          Pmod_ident "StackStates.Run" (src/invariant.ml[33,1633+2]..[33,1633+17])
        module_expr (src/invariant.ml[33,1633+18]..[33,1633+21])
          Pmod_ident "SSy" (src/invariant.ml[33,1633+18]..[33,1633+21])
  structure_item (src/invariant.ml[35,1657+0]..[35,1657+8])
    Pstr_open Fresh
    module_expr (src/invariant.ml[35,1657+5]..[35,1657+8])
      Pmod_ident "SSt" (src/invariant.ml[35,1657+5]..[35,1657+8])
  structure_item (src/invariant.ml[40,1819+0]..[41,1828+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[40,1819+4]..[40,1819+6])
          Ppat_construct "()" (src/invariant.ml[40,1819+4]..[40,1819+6])
          None
        expression (src/invariant.ml[41,1828+2]..[41,1828+29])
          Pexp_apply
          expression (src/invariant.ml[41,1828+2]..[41,1828+12])
            Pexp_ident "Error.logC" (src/invariant.ml[41,1828+2]..[41,1828+12])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[41,1828+13]..[41,1828+14])
                Pexp_constant PConst_int (3,None)
            <arg>
            Nolabel
              expression (src/invariant.ml[41,1828+15]..[41,1828+29])
                Pexp_apply
                expression (src/invariant.ml[41,1828+16]..[41,1828+20])
                  Pexp_ident "dump" (src/invariant.ml[41,1828+16]..[41,1828+20])
                [
                  <arg>
                  Nolabel
                    expression (src/invariant.ml[41,1828+21]..[41,1828+28])
                      Pexp_constant PConst_string("short",(src/invariant.ml[41,1828+22]..[41,1828+27]),None)
                ]
          ]
    ]
  structure_item (src/invariant.ml[73,3278+0]..[74,3317+51])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[73,3278+4]..[73,3278+7])
          Ppat_var "rep" (src/invariant.ml[73,3278+4]..[73,3278+7])
        core_type (src/invariant.ml[73,3278+10]..[73,3278+36])
          Ptyp_constr "array" (src/invariant.ml[73,3278+31]..[73,3278+36])
          [
            core_type (src/invariant.ml[73,3278+10]..[73,3278+30])
              Ptyp_constr "UnionFind.point" (src/invariant.ml[73,3278+15]..[73,3278+30])
              [
                core_type (src/invariant.ml[73,3278+10]..[73,3278+14])
                  Ptyp_constr "bool" (src/invariant.ml[73,3278+10]..[73,3278+14])
                  []
              ]
          ]
        expression (src/invariant.ml[74,3317+2]..[74,3317+51])
          Pexp_apply
          expression (src/invariant.ml[74,3317+2]..[74,3317+12])
            Pexp_ident "Array.init" (src/invariant.ml[74,3317+2]..[74,3317+12])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[74,3317+13]..[74,3317+18])
                Pexp_ident "Lr1.n" (src/invariant.ml[74,3317+13]..[74,3317+18])
            <arg>
            Nolabel
              expression (src/invariant.ml[74,3317+19]..[74,3317+51])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[74,3317+24]..[74,3317+25])
                  Ppat_any
                expression (src/invariant.ml[74,3317+29]..[74,3317+50])
                  Pexp_apply
                  expression (src/invariant.ml[74,3317+29]..[74,3317+44])
                    Pexp_ident "UnionFind.fresh" (src/invariant.ml[74,3317+29]..[74,3317+44])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[74,3317+45]..[74,3317+50])
                        Pexp_construct "false" (src/invariant.ml[74,3317+45]..[74,3317+50])
                        None
                  ]
          ]
    ]
  structure_item (src/invariant.ml[78,3385+0]..[79,3409+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[78,3385+4]..[78,3385+15])
          Ppat_var "represented" (src/invariant.ml[78,3385+4]..[78,3385+15])
        expression (src/invariant.ml[78,3385+16]..[79,3409+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[78,3385+16]..[78,3385+21])
            Ppat_var "state" (src/invariant.ml[78,3385+16]..[78,3385+21])
          expression (src/invariant.ml[79,3409+2]..[79,3409+24])
            Pexp_apply
            expression (src/invariant.ml[79,3409+2]..[79,3409+24]) ghost
              Pexp_ident "Array.get" (src/invariant.ml[79,3409+2]..[79,3409+24]) ghost
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[79,3409+2]..[79,3409+5])
                  Pexp_ident "rep" (src/invariant.ml[79,3409+2]..[79,3409+5])
              <arg>
              Nolabel
                expression (src/invariant.ml[79,3409+7]..[79,3409+23])
                  Pexp_apply
                  expression (src/invariant.ml[79,3409+7]..[79,3409+17])
                    Pexp_ident "Lr1.number" (src/invariant.ml[79,3409+7]..[79,3409+17])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[79,3409+18]..[79,3409+23])
                        Pexp_ident "state" (src/invariant.ml[79,3409+18]..[79,3409+23])
                  ]
            ]
    ]
  structure_item (src/invariant.ml[83,3451+0]..[84,3473+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[83,3451+4]..[83,3451+13])
          Ppat_var "represent" (src/invariant.ml[83,3451+4]..[83,3451+13])
        expression (src/invariant.ml[83,3451+14]..[84,3473+40]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[83,3451+14]..[83,3451+19])
            Ppat_var "state" (src/invariant.ml[83,3451+14]..[83,3451+19])
          expression (src/invariant.ml[84,3473+2]..[84,3473+40])
            Pexp_apply
            expression (src/invariant.ml[84,3473+2]..[84,3473+15])
              Pexp_ident "UnionFind.set" (src/invariant.ml[84,3473+2]..[84,3473+15])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[84,3473+16]..[84,3473+35])
                  Pexp_apply
                  expression (src/invariant.ml[84,3473+17]..[84,3473+28])
                    Pexp_ident "represented" (src/invariant.ml[84,3473+17]..[84,3473+28])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[84,3473+29]..[84,3473+34])
                        Pexp_ident "state" (src/invariant.ml[84,3473+29]..[84,3473+34])
                  ]
              <arg>
              Nolabel
                expression (src/invariant.ml[84,3473+36]..[84,3473+40])
                  Pexp_construct "true" (src/invariant.ml[84,3473+36]..[84,3473+40])
                  None
            ]
    ]
  structure_item (src/invariant.ml[86,3515+0]..[87,3539+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[86,3515+4]..[86,3515+14])
          Ppat_var "represents" (src/invariant.ml[86,3515+4]..[86,3515+14])
        expression (src/invariant.ml[86,3515+15]..[87,3539+39]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[86,3515+15]..[86,3515+21])
            Ppat_var "states" (src/invariant.ml[86,3515+15]..[86,3515+21])
          expression (src/invariant.ml[87,3539+2]..[87,3539+39])
            Pexp_apply
            expression (src/invariant.ml[87,3539+2]..[87,3539+11])
              Pexp_ident "represent" (src/invariant.ml[87,3539+2]..[87,3539+11])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[87,3539+12]..[87,3539+39])
                  Pexp_apply
                  expression (src/invariant.ml[87,3539+13]..[87,3539+31])
                    Pexp_ident "Lr1.NodeSet.choose" (src/invariant.ml[87,3539+13]..[87,3539+31])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[87,3539+32]..[87,3539+38])
                        Pexp_ident "states" (src/invariant.ml[87,3539+32]..[87,3539+38])
                  ]
            ]
    ]
  structure_item (src/invariant.ml[91,3616+0]..[97,3808+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[91,3616+4]..[91,3616+9])
          Ppat_var "share" (src/invariant.ml[91,3616+4]..[91,3616+9])
        expression (src/invariant.ml[91,3616+10]..[97,3808+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[91,3616+10]..[91,3616+24])
            Ppat_constraint
            pattern (src/invariant.ml[91,3616+11]..[91,3616+12])
              Ppat_var "v" (src/invariant.ml[91,3616+11]..[91,3616+12])
            core_type (src/invariant.ml[91,3616+15]..[91,3616+23])
              Ptyp_constr "property" (src/invariant.ml[91,3616+15]..[91,3616+23])
              []
          expression (src/invariant.ml[92,3643+2]..[97,3808+5])
            Pexp_apply
            expression (src/invariant.ml[92,3643+2]..[92,3643+12])
              Pexp_ident "Array.iter" (src/invariant.ml[92,3643+2]..[92,3643+12])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[92,3643+13]..[97,3808+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[92,3643+18]..[92,3643+24])
                    Ppat_var "states" (src/invariant.ml[92,3643+18]..[92,3643+24])
                  expression (src/invariant.ml[93,3671+4]..[96,3795+12])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/invariant.ml[93,3671+8]..[93,3671+13])
                          Ppat_var "dummy" (src/invariant.ml[93,3671+8]..[93,3671+13])
                        expression (src/invariant.ml[93,3671+16]..[93,3671+37])
                          Pexp_apply
                          expression (src/invariant.ml[93,3671+16]..[93,3671+31])
                            Pexp_ident "UnionFind.fresh" (src/invariant.ml[93,3671+16]..[93,3671+31])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[93,3671+32]..[93,3671+37])
                                Pexp_construct "false" (src/invariant.ml[93,3671+32]..[93,3671+37])
                                None
                          ]
                    ]
                    expression (src/invariant.ml[94,3712+4]..[96,3795+12])
                      Pexp_apply
                      expression (src/invariant.ml[94,3712+4]..[94,3712+20])
                        Pexp_ident "Lr1.NodeSet.iter" (src/invariant.ml[94,3712+4]..[94,3712+20])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[94,3712+21]..[96,3795+5])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/invariant.ml[94,3712+26]..[94,3712+31])
                              Ppat_var "state" (src/invariant.ml[94,3712+26]..[94,3712+31])
                            expression (src/invariant.ml[95,3747+6]..[95,3747+47])
                              Pexp_apply
                              expression (src/invariant.ml[95,3747+6]..[95,3747+21])
                                Pexp_ident "UnionFind.union" (src/invariant.ml[95,3747+6]..[95,3747+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[95,3747+22]..[95,3747+27])
                                    Pexp_ident "dummy" (src/invariant.ml[95,3747+22]..[95,3747+27])
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[95,3747+28]..[95,3747+47])
                                    Pexp_apply
                                    expression (src/invariant.ml[95,3747+29]..[95,3747+40])
                                      Pexp_ident "represented" (src/invariant.ml[95,3747+29]..[95,3747+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[95,3747+41]..[95,3747+46])
                                          Pexp_ident "state" (src/invariant.ml[95,3747+41]..[95,3747+46])
                                    ]
                              ]
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[96,3795+6]..[96,3795+12])
                            Pexp_ident "states" (src/invariant.ml[96,3795+6]..[96,3795+12])
                      ]
              <arg>
              Nolabel
                expression (src/invariant.ml[97,3808+4]..[97,3808+5])
                  Pexp_ident "v" (src/invariant.ml[97,3808+4]..[97,3808+5])
            ]
    ]
  structure_item (src/invariant.ml[99,3815+0]..[105,3949+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[99,3815+4]..[99,3815+6])
          Ppat_construct "()" (src/invariant.ml[99,3815+4]..[99,3815+6])
          None
        expression (src/invariant.ml[100,3824+2]..[105,3949+3])
          Pexp_sequence
          expression (src/invariant.ml[100,3824+2]..[102,3878+3])
            Pexp_apply
            expression (src/invariant.ml[100,3824+2]..[100,3824+10])
              Pexp_ident "Lr1.iter" (src/invariant.ml[100,3824+2]..[100,3824+10])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[100,3824+11]..[102,3878+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[100,3824+16]..[100,3824+20])
                    Ppat_var "node" (src/invariant.ml[100,3824+16]..[100,3824+20])
                  expression (src/invariant.ml[101,3848+4]..[101,3848+29])
                    Pexp_apply
                    expression (src/invariant.ml[101,3848+4]..[101,3848+9])
                      Pexp_ident "share" (src/invariant.ml[101,3848+4]..[101,3848+9])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[101,3848+10]..[101,3848+29])
                          Pexp_apply
                          expression (src/invariant.ml[101,3848+11]..[101,3848+23])
                            Pexp_ident "stack_states" (src/invariant.ml[101,3848+11]..[101,3848+23])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[101,3848+24]..[101,3848+28])
                                Pexp_ident "node" (src/invariant.ml[101,3848+24]..[101,3848+28])
                          ]
                    ]
            ]
          expression (src/invariant.ml[103,3883+2]..[105,3949+3])
            Pexp_apply
            expression (src/invariant.ml[103,3883+2]..[103,3883+17])
              Pexp_ident "Production.iter" (src/invariant.ml[103,3883+2]..[103,3883+17])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[103,3883+18]..[105,3949+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[103,3883+23]..[103,3883+27])
                    Ppat_var "prod" (src/invariant.ml[103,3883+23]..[103,3883+27])
                  expression (src/invariant.ml[104,3914+4]..[104,3914+34])
                    Pexp_apply
                    expression (src/invariant.ml[104,3914+4]..[104,3914+9])
                      Pexp_ident "share" (src/invariant.ml[104,3914+4]..[104,3914+9])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[104,3914+10]..[104,3914+34])
                          Pexp_apply
                          expression (src/invariant.ml[104,3914+11]..[104,3914+28])
                            Pexp_ident "production_states" (src/invariant.ml[104,3914+11]..[104,3914+28])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[104,3914+29]..[104,3914+33])
                                Pexp_ident "prod" (src/invariant.ml[104,3914+29]..[104,3914+33])
                          ]
                    ]
            ]
    ]
  structure_item (src/invariant.ml[109,3990+0]..[120,4252+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[109,3990+4]..[109,3990+6])
          Ppat_construct "()" (src/invariant.ml[109,3990+4]..[109,3990+6])
          None
        expression (src/invariant.ml[110,3999+2]..[120,4252+3])
          Pexp_apply
          expression (src/invariant.ml[110,3999+2]..[110,3999+18])
            Pexp_ident "Nonterminal.iter" (src/invariant.ml[110,3999+2]..[110,3999+18])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[110,3999+19]..[120,4252+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[110,3999+24]..[110,3999+26])
                  Ppat_var "nt" (src/invariant.ml[110,3999+24]..[110,3999+26])
                expression (src/invariant.ml[111,4029+4]..[119,4227+24])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/invariant.ml[111,4029+8]..[111,4029+13])
                        Ppat_var "count" (src/invariant.ml[111,4029+8]..[111,4029+13])
                      expression (src/invariant.ml[112,4045+6]..[114,4099+23])
                        Pexp_apply
                        expression (src/invariant.ml[112,4045+6]..[112,4045+17])
                          Pexp_ident "Lr1.targets" (src/invariant.ml[112,4045+6]..[112,4045+17])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[112,4045+18]..[114,4099+7])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/invariant.ml[112,4045+23]..[112,4045+28])
                                Ppat_var "count" (src/invariant.ml[112,4045+23]..[112,4045+28])
                              expression (src/invariant.ml[112,4045+29]..[113,4081+17]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[112,4045+29]..[112,4045+30])
                                  Ppat_any
                                expression (src/invariant.ml[112,4045+31]..[113,4081+17]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/invariant.ml[112,4045+31]..[112,4045+32])
                                    Ppat_any
                                  expression (src/invariant.ml[113,4081+8]..[113,4081+17])
                                    Pexp_apply
                                    expression (src/invariant.ml[113,4081+14]..[113,4081+15])
                                      Pexp_ident "+" (src/invariant.ml[113,4081+14]..[113,4081+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[113,4081+8]..[113,4081+13])
                                          Pexp_ident "count" (src/invariant.ml[113,4081+8]..[113,4081+13])
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[113,4081+16]..[113,4081+17])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[114,4099+8]..[114,4099+9])
                              Pexp_constant PConst_int (0,None)
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[114,4099+10]..[114,4099+23])
                              Pexp_construct "Symbol.N" (src/invariant.ml[114,4099+11]..[114,4099+19])
                              Some
                                expression (src/invariant.ml[114,4099+20]..[114,4099+22])
                                  Pexp_ident "nt" (src/invariant.ml[114,4099+20]..[114,4099+22])
                        ]
                  ]
                  expression (src/invariant.ml[116,4130+4]..[119,4227+24])
                    Pexp_ifthenelse
                    expression (src/invariant.ml[116,4130+7]..[116,4130+16])
                      Pexp_apply
                      expression (src/invariant.ml[116,4130+13]..[116,4130+14])
                        Pexp_ident ">" (src/invariant.ml[116,4130+13]..[116,4130+14])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[116,4130+7]..[116,4130+12])
                            Pexp_ident "count" (src/invariant.ml[116,4130+7]..[116,4130+12])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[116,4130+15]..[116,4130+16])
                            Pexp_constant PConst_int (1,None)
                      ]
                    expression (src/invariant.ml[117,4152+6]..[119,4227+24])
                      Pexp_apply
                      expression (src/invariant.ml[117,4152+6]..[117,4152+17])
                        Pexp_ident "Lr1.targets" (src/invariant.ml[117,4152+6]..[117,4152+17])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[117,4152+18]..[119,4227+7])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/invariant.ml[117,4152+23]..[117,4152+25])
                              Ppat_construct "()" (src/invariant.ml[117,4152+23]..[117,4152+25])
                              None
                            expression (src/invariant.ml[117,4152+26]..[118,4191+35]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/invariant.ml[117,4152+26]..[117,4152+33])
                                Ppat_var "sources" (src/invariant.ml[117,4152+26]..[117,4152+33])
                              expression (src/invariant.ml[117,4152+34]..[118,4191+35]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[117,4152+34]..[117,4152+35])
                                  Ppat_any
                                expression (src/invariant.ml[118,4191+8]..[118,4191+35])
                                  Pexp_apply
                                  expression (src/invariant.ml[118,4191+8]..[118,4191+17])
                                    Pexp_ident "List.iter" (src/invariant.ml[118,4191+8]..[118,4191+17])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[118,4191+18]..[118,4191+27])
                                        Pexp_ident "represent" (src/invariant.ml[118,4191+18]..[118,4191+27])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[118,4191+28]..[118,4191+35])
                                        Pexp_ident "sources" (src/invariant.ml[118,4191+28]..[118,4191+35])
                                  ]
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[119,4227+8]..[119,4227+10])
                            Pexp_construct "()" (src/invariant.ml[119,4227+8]..[119,4227+10])
                            None
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[119,4227+11]..[119,4227+24])
                            Pexp_construct "Symbol.N" (src/invariant.ml[119,4227+12]..[119,4227+20])
                            Some
                              expression (src/invariant.ml[119,4227+21]..[119,4227+23])
                                Pexp_ident "nt" (src/invariant.ml[119,4227+21]..[119,4227+23])
                      ]
                    None
          ]
    ]
  structure_item (src/invariant.ml[124,4293+0]..[133,4543+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[124,4293+4]..[124,4293+11])
          Ppat_var "handler" (src/invariant.ml[124,4293+4]..[124,4293+11])
        expression (src/invariant.ml[124,4293+12]..[133,4543+11]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[124,4293+12]..[124,4293+17])
            Ppat_var "state" (src/invariant.ml[124,4293+12]..[124,4293+17])
          expression (src/invariant.ml[125,4313+2]..[133,4543+11])
            Pexp_try
            expression (src/invariant.ml[126,4319+4]..[127,4399+8])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/invariant.ml[126,4319+8]..[126,4319+9])
                    Ppat_any
                  expression (src/invariant.ml[126,4319+12]..[126,4319+76])
                    Pexp_apply
                    expression (src/invariant.ml[126,4319+12]..[126,4319+26])
                      Pexp_ident "SymbolMap.find" (src/invariant.ml[126,4319+12]..[126,4319+26])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[126,4319+27]..[126,4319+52])
                          Pexp_construct "Symbol.T" (src/invariant.ml[126,4319+28]..[126,4319+36])
                          Some
                            expression (src/invariant.ml[126,4319+37]..[126,4319+51])
                              Pexp_ident "Terminal.error" (src/invariant.ml[126,4319+37]..[126,4319+51])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[126,4319+53]..[126,4319+76])
                          Pexp_apply
                          expression (src/invariant.ml[126,4319+54]..[126,4319+69])
                            Pexp_ident "Lr1.transitions" (src/invariant.ml[126,4319+54]..[126,4319+69])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[126,4319+70]..[126,4319+75])
                                Pexp_ident "state" (src/invariant.ml[126,4319+70]..[126,4319+75])
                          ]
                    ]
              ]
              expression (src/invariant.ml[127,4399+4]..[127,4399+8])
                Pexp_construct "true" (src/invariant.ml[127,4399+4]..[127,4399+8])
                None
            [
              <case>
                pattern (src/invariant.ml[128,4408+7]..[128,4408+16])
                  Ppat_construct "Not_found" (src/invariant.ml[128,4408+7]..[128,4408+16])
                  None
                expression (src/invariant.ml[129,4428+4]..[133,4543+11])
                  Pexp_try
                  expression (src/invariant.ml[130,4436+6]..[131,4510+10])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/invariant.ml[130,4436+10]..[130,4436+11])
                          Ppat_any
                        expression (src/invariant.ml[130,4436+14]..[130,4436+70])
                          Pexp_apply
                          expression (src/invariant.ml[130,4436+14]..[130,4436+32])
                            Pexp_ident "TerminalMap.lookup" (src/invariant.ml[130,4436+14]..[130,4436+32])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[130,4436+33]..[130,4436+47])
                                Pexp_ident "Terminal.error" (src/invariant.ml[130,4436+33]..[130,4436+47])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[130,4436+48]..[130,4436+70])
                                Pexp_apply
                                expression (src/invariant.ml[130,4436+49]..[130,4436+63])
                                  Pexp_ident "Lr1.reductions" (src/invariant.ml[130,4436+49]..[130,4436+63])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[130,4436+64]..[130,4436+69])
                                      Pexp_ident "state" (src/invariant.ml[130,4436+64]..[130,4436+69])
                                ]
                          ]
                    ]
                    expression (src/invariant.ml[131,4510+6]..[131,4510+10])
                      Pexp_construct "true" (src/invariant.ml[131,4510+6]..[131,4510+10])
                      None
                  [
                    <case>
                      pattern (src/invariant.ml[132,4521+9]..[132,4521+18])
                        Ppat_construct "Not_found" (src/invariant.ml[132,4521+9]..[132,4521+18])
                        None
                      expression (src/invariant.ml[133,4543+6]..[133,4543+11])
                        Pexp_construct "false" (src/invariant.ml[133,4543+6]..[133,4543+11])
                        None
                  ]
            ]
    ]
  structure_item (src/invariant.ml[135,4556+0]..[136,4578+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[135,4556+4]..[135,4556+12])
          Ppat_var "handlers" (src/invariant.ml[135,4556+4]..[135,4556+12])
        expression (src/invariant.ml[135,4556+13]..[136,4578+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[135,4556+13]..[135,4556+19])
            Ppat_var "states" (src/invariant.ml[135,4556+13]..[135,4556+19])
          expression (src/invariant.ml[136,4578+2]..[136,4578+35])
            Pexp_apply
            expression (src/invariant.ml[136,4578+2]..[136,4578+20])
              Pexp_ident "Lr1.NodeSet.exists" (src/invariant.ml[136,4578+2]..[136,4578+20])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[136,4578+21]..[136,4578+28])
                  Pexp_ident "handler" (src/invariant.ml[136,4578+21]..[136,4578+28])
              <arg>
              Nolabel
                expression (src/invariant.ml[136,4578+29]..[136,4578+35])
                  Pexp_ident "states" (src/invariant.ml[136,4578+29]..[136,4578+35])
            ]
    ]
  structure_item (src/invariant.ml[138,4615+0]..[145,4811+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[138,4615+4]..[138,4615+6])
          Ppat_construct "()" (src/invariant.ml[138,4615+4]..[138,4615+6])
          None
        expression (src/invariant.ml[139,4624+2]..[145,4811+3])
          Pexp_apply
          expression (src/invariant.ml[139,4624+2]..[139,4624+10])
            Pexp_ident "Lr1.iter" (src/invariant.ml[139,4624+2]..[139,4624+10])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[139,4624+11]..[145,4811+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[139,4624+16]..[139,4624+20])
                  Ppat_var "node" (src/invariant.ml[139,4624+16]..[139,4624+20])
                expression (src/invariant.ml[140,4648+4]..[144,4803+7])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/invariant.ml[140,4648+8]..[140,4648+9])
                        Ppat_var "v" (src/invariant.ml[140,4648+8]..[140,4648+9])
                      expression (src/invariant.ml[140,4648+12]..[140,4648+29])
                        Pexp_apply
                        expression (src/invariant.ml[140,4648+12]..[140,4648+24])
                          Pexp_ident "stack_states" (src/invariant.ml[140,4648+12]..[140,4648+24])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[140,4648+25]..[140,4648+29])
                              Pexp_ident "node" (src/invariant.ml[140,4648+25]..[140,4648+29])
                        ]
                  ]
                  expression (src/invariant.ml[141,4681+4]..[144,4803+7])
                    Pexp_apply
                    expression (src/invariant.ml[141,4681+4]..[141,4681+14])
                      Pexp_ident "Array.iter" (src/invariant.ml[141,4681+4]..[141,4681+14])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[141,4681+15]..[144,4803+5])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/invariant.ml[141,4681+20]..[141,4681+26])
                            Ppat_var "states" (src/invariant.ml[141,4681+20]..[141,4681+26])
                          expression (src/invariant.ml[142,4711+6]..[143,4777+25])
                            Pexp_ifthenelse
                            expression (src/invariant.ml[142,4711+9]..[142,4711+60])
                              Pexp_apply
                              expression (src/invariant.ml[142,4711+42]..[142,4711+44])
                                Pexp_ident "&&" (src/invariant.ml[142,4711+42]..[142,4711+44])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[142,4711+9]..[142,4711+41])
                                    Pexp_apply
                                    expression (src/invariant.ml[142,4711+37]..[142,4711+39])
                                      Pexp_ident ">=" (src/invariant.ml[142,4711+37]..[142,4711+39])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[142,4711+9]..[142,4711+36])
                                          Pexp_apply
                                          expression (src/invariant.ml[142,4711+9]..[142,4711+29])
                                            Pexp_ident "Lr1.NodeSet.cardinal" (src/invariant.ml[142,4711+9]..[142,4711+29])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[142,4711+30]..[142,4711+36])
                                                Pexp_ident "states" (src/invariant.ml[142,4711+30]..[142,4711+36])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[142,4711+40]..[142,4711+41])
                                          Pexp_constant PConst_int (2,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[142,4711+45]..[142,4711+60])
                                    Pexp_apply
                                    expression (src/invariant.ml[142,4711+45]..[142,4711+53])
                                      Pexp_ident "handlers" (src/invariant.ml[142,4711+45]..[142,4711+53])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[142,4711+54]..[142,4711+60])
                                          Pexp_ident "states" (src/invariant.ml[142,4711+54]..[142,4711+60])
                                    ]
                              ]
                            expression (src/invariant.ml[143,4777+8]..[143,4777+25])
                              Pexp_apply
                              expression (src/invariant.ml[143,4777+8]..[143,4777+18])
                                Pexp_ident "represents" (src/invariant.ml[143,4777+8]..[143,4777+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[143,4777+19]..[143,4777+25])
                                    Pexp_ident "states" (src/invariant.ml[143,4777+19]..[143,4777+25])
                              ]
                            None
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[144,4803+6]..[144,4803+7])
                          Pexp_ident "v" (src/invariant.ml[144,4803+6]..[144,4803+7])
                    ]
          ]
    ]
  structure_item (src/invariant.ml[149,4852+0]..[159,5201+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[149,4852+4]..[149,4852+6])
          Ppat_construct "()" (src/invariant.ml[149,4852+4]..[149,4852+6])
          None
        expression (src/invariant.ml[150,4861+2]..[159,5201+3])
          Pexp_apply
          expression (src/invariant.ml[150,4861+2]..[150,4861+18])
            Pexp_ident "Production.iterx" (src/invariant.ml[150,4861+2]..[150,4861+18])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[150,4861+19]..[159,5201+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[150,4861+24]..[150,4861+28])
                  Ppat_var "prod" (src/invariant.ml[150,4861+24]..[150,4861+28])
                expression (src/invariant.ml[151,4893+4]..[158,5175+25])
                  Pexp_ifthenelse
                  expression (src/invariant.ml[151,4893+7]..[151,4893+54])
                    Pexp_apply
                    expression (src/invariant.ml[151,4893+7]..[151,4893+29])
                      Pexp_ident "Action.has_syntaxerror" (src/invariant.ml[151,4893+7]..[151,4893+29])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[151,4893+30]..[151,4893+54])
                          Pexp_apply
                          expression (src/invariant.ml[151,4893+31]..[151,4893+48])
                            Pexp_ident "Production.action" (src/invariant.ml[151,4893+31]..[151,4893+48])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[151,4893+49]..[151,4893+53])
                                Pexp_ident "prod" (src/invariant.ml[151,4893+49]..[151,4893+53])
                          ]
                    ]
                  expression (src/invariant.ml[152,4953+6]..[158,5175+25])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/invariant.ml[152,4953+10]..[152,4953+15])
                          Ppat_var "sites" (src/invariant.ml[152,4953+10]..[152,4953+15])
                        expression (src/invariant.ml[152,4953+18]..[152,4953+43])
                          Pexp_apply
                          expression (src/invariant.ml[152,4953+18]..[152,4953+38])
                            Pexp_ident "Lr1.production_where" (src/invariant.ml[152,4953+18]..[152,4953+38])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[152,4953+39]..[152,4953+43])
                                Pexp_ident "prod" (src/invariant.ml[152,4953+39]..[152,4953+43])
                          ]
                    ]
                    expression (src/invariant.ml[153,5000+6]..[158,5175+25])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[153,5000+10]..[153,5000+16])
                            Ppat_var "length" (src/invariant.ml[153,5000+10]..[153,5000+16])
                          expression (src/invariant.ml[153,5000+19]..[153,5000+41])
                            Pexp_apply
                            expression (src/invariant.ml[153,5000+19]..[153,5000+36])
                              Pexp_ident "Production.length" (src/invariant.ml[153,5000+19]..[153,5000+36])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[153,5000+37]..[153,5000+41])
                                  Pexp_ident "prod" (src/invariant.ml[153,5000+37]..[153,5000+41])
                            ]
                      ]
                      expression (src/invariant.ml[154,5045+6]..[158,5175+25])
                        Pexp_ifthenelse
                        expression (src/invariant.ml[154,5045+9]..[154,5045+19])
                          Pexp_apply
                          expression (src/invariant.ml[154,5045+16]..[154,5045+17])
                            Pexp_ident "=" (src/invariant.ml[154,5045+16]..[154,5045+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[154,5045+9]..[154,5045+15])
                                Pexp_ident "length" (src/invariant.ml[154,5045+9]..[154,5045+15])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[154,5045+18]..[154,5045+19])
                                Pexp_constant PConst_int (0,None)
                          ]
                        expression (src/invariant.ml[155,5070+8]..[155,5070+40])
                          Pexp_apply
                          expression (src/invariant.ml[155,5070+8]..[155,5070+24])
                            Pexp_ident "Lr1.NodeSet.iter" (src/invariant.ml[155,5070+8]..[155,5070+24])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[155,5070+25]..[155,5070+34])
                                Pexp_ident "represent" (src/invariant.ml[155,5070+25]..[155,5070+34])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[155,5070+35]..[155,5070+40])
                                Pexp_ident "sites" (src/invariant.ml[155,5070+35]..[155,5070+40])
                          ]
                        Some
                          expression (src/invariant.ml[157,5122+8]..[158,5175+25])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/invariant.ml[157,5122+12]..[157,5122+18])
                                  Ppat_var "states" (src/invariant.ml[157,5122+12]..[157,5122+18])
                                expression (src/invariant.ml[157,5122+21]..[157,5122+49])
                                  Pexp_apply
                                  expression (src/invariant.ml[157,5122+21]..[157,5122+49]) ghost
                                    Pexp_ident "Array.get" (src/invariant.ml[157,5122+21]..[157,5122+49]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[157,5122+21]..[157,5122+45])
                                        Pexp_apply
                                        expression (src/invariant.ml[157,5122+22]..[157,5122+39])
                                          Pexp_ident "production_states" (src/invariant.ml[157,5122+22]..[157,5122+39])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[157,5122+40]..[157,5122+44])
                                              Pexp_ident "prod" (src/invariant.ml[157,5122+40]..[157,5122+44])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[157,5122+47]..[157,5122+48])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                            ]
                            expression (src/invariant.ml[158,5175+8]..[158,5175+25])
                              Pexp_apply
                              expression (src/invariant.ml[158,5175+8]..[158,5175+18])
                                Pexp_ident "represents" (src/invariant.ml[158,5175+8]..[158,5175+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[158,5175+19]..[158,5175+25])
                                    Pexp_ident "states" (src/invariant.ml[158,5175+19]..[158,5175+25])
                              ]
                  None
          ]
    ]
  structure_item (src/invariant.ml[166,5371+0]..[168,5426+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[166,5371+4]..[166,5371+15])
          Ppat_var "represented" (src/invariant.ml[166,5371+4]..[166,5371+15])
        expression (src/invariant.ml[166,5371+16]..[168,5426+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[166,5371+16]..[166,5371+21])
            Ppat_var "state" (src/invariant.ml[166,5371+16]..[166,5371+21])
          expression (src/invariant.ml[167,5395+2]..[168,5426+35])
            Pexp_apply
            expression (src/invariant.ml[167,5395+28]..[167,5395+30])
              Pexp_ident "||" (src/invariant.ml[167,5395+28]..[167,5395+30])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[167,5395+2]..[167,5395+27])
                  Pexp_ident "Settings.represent_states" (src/invariant.ml[167,5395+2]..[167,5395+27])
              <arg>
              Nolabel
                expression (src/invariant.ml[168,5426+2]..[168,5426+35])
                  Pexp_apply
                  expression (src/invariant.ml[168,5426+2]..[168,5426+15])
                    Pexp_ident "UnionFind.get" (src/invariant.ml[168,5426+2]..[168,5426+15])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[168,5426+16]..[168,5426+35])
                        Pexp_apply
                        expression (src/invariant.ml[168,5426+17]..[168,5426+28])
                          Pexp_ident "represented" (src/invariant.ml[168,5426+17]..[168,5426+28])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[168,5426+29]..[168,5426+34])
                              Pexp_ident "state" (src/invariant.ml[168,5426+29]..[168,5426+34])
                        ]
                  ]
            ]
    ]
  structure_item (src/invariant.ml[170,5463+0]..[175,5575+43])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[170,5463+4]..[170,5463+16])
          Ppat_var "representeds" (src/invariant.ml[170,5463+4]..[170,5463+16])
        expression (src/invariant.ml[170,5463+17]..[175,5575+43]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[170,5463+17]..[170,5463+23])
            Ppat_var "states" (src/invariant.ml[170,5463+17]..[170,5463+23])
          expression (src/invariant.ml[171,5489+2]..[175,5575+43])
            Pexp_apply
            expression (src/invariant.ml[171,5489+28]..[171,5489+30])
              Pexp_ident "||" (src/invariant.ml[171,5489+28]..[171,5489+30])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[171,5489+2]..[171,5489+27])
                  Pexp_ident "Settings.represent_states" (src/invariant.ml[171,5489+2]..[171,5489+27])
              <arg>
              Nolabel
                expression (src/invariant.ml[172,5520+2]..[175,5575+43])
                  Pexp_ifthenelse
                  expression (src/invariant.ml[172,5520+5]..[172,5520+32])
                    Pexp_apply
                    expression (src/invariant.ml[172,5520+5]..[172,5520+25])
                      Pexp_ident "Lr1.NodeSet.is_empty" (src/invariant.ml[172,5520+5]..[172,5520+25])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[172,5520+26]..[172,5520+32])
                          Pexp_ident "states" (src/invariant.ml[172,5520+26]..[172,5520+32])
                    ]
                  expression (src/invariant.ml[173,5558+4]..[173,5558+9])
                    Pexp_construct "false" (src/invariant.ml[173,5558+4]..[173,5558+9])
                    None
                  Some
                    expression (src/invariant.ml[175,5575+4]..[175,5575+43])
                      Pexp_apply
                      expression (src/invariant.ml[175,5575+4]..[175,5575+15])
                        Pexp_ident "represented" (src/invariant.ml[175,5575+4]..[175,5575+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[175,5575+16]..[175,5575+43])
                            Pexp_apply
                            expression (src/invariant.ml[175,5575+17]..[175,5575+35])
                              Pexp_ident "Lr1.NodeSet.choose" (src/invariant.ml[175,5575+17]..[175,5575+35])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[175,5575+36]..[175,5575+42])
                                  Pexp_ident "states" (src/invariant.ml[175,5575+36]..[175,5575+42])
                            ]
                      ]
            ]
    ]
  structure_item (src/invariant.ml[179,5639+0]..[187,5868+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[179,5639+4]..[179,5639+6])
          Ppat_construct "()" (src/invariant.ml[179,5639+4]..[179,5639+6])
          None
        expression (src/invariant.ml[180,5648+2]..[187,5868+3])
          Pexp_apply
          expression (src/invariant.ml[180,5648+2]..[180,5648+12])
            Pexp_ident "Error.logC" (src/invariant.ml[180,5648+2]..[180,5648+12])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[180,5648+13]..[180,5648+14])
                Pexp_constant PConst_int (1,None)
            <arg>
            Nolabel
              expression (src/invariant.ml[180,5648+15]..[187,5868+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[180,5648+20]..[180,5648+21])
                  Ppat_var "f" (src/invariant.ml[180,5648+20]..[180,5648+21])
                expression (src/invariant.ml[181,5673+4]..[186,5794+73])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/invariant.ml[181,5673+8]..[181,5673+13])
                        Ppat_var "count" (src/invariant.ml[181,5673+8]..[181,5673+13])
                      expression (src/invariant.ml[182,5689+6]..[184,5777+9])
                        Pexp_apply
                        expression (src/invariant.ml[182,5689+6]..[182,5689+14])
                          Pexp_ident "Lr1.fold" (src/invariant.ml[182,5689+6]..[182,5689+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[182,5689+15]..[184,5777+7])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/invariant.ml[182,5689+20]..[182,5689+25])
                                Ppat_var "count" (src/invariant.ml[182,5689+20]..[182,5689+25])
                              expression (src/invariant.ml[182,5689+26]..[183,5723+53]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[182,5689+26]..[182,5689+30])
                                  Ppat_var "node" (src/invariant.ml[182,5689+26]..[182,5689+30])
                                expression (src/invariant.ml[183,5723+8]..[183,5723+53])
                                  Pexp_ifthenelse
                                  expression (src/invariant.ml[183,5723+11]..[183,5723+27])
                                    Pexp_apply
                                    expression (src/invariant.ml[183,5723+11]..[183,5723+22])
                                      Pexp_ident "represented" (src/invariant.ml[183,5723+11]..[183,5723+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[183,5723+23]..[183,5723+27])
                                          Pexp_ident "node" (src/invariant.ml[183,5723+23]..[183,5723+27])
                                    ]
                                  expression (src/invariant.ml[183,5723+33]..[183,5723+42])
                                    Pexp_apply
                                    expression (src/invariant.ml[183,5723+39]..[183,5723+40])
                                      Pexp_ident "+" (src/invariant.ml[183,5723+39]..[183,5723+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[183,5723+33]..[183,5723+38])
                                          Pexp_ident "count" (src/invariant.ml[183,5723+33]..[183,5723+38])
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[183,5723+41]..[183,5723+42])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                  Some
                                    expression (src/invariant.ml[183,5723+48]..[183,5723+53])
                                      Pexp_ident "count" (src/invariant.ml[183,5723+48]..[183,5723+53])
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[184,5777+8]..[184,5777+9])
                              Pexp_constant PConst_int (0,None)
                        ]
                  ]
                  expression (src/invariant.ml[186,5794+4]..[186,5794+73])
                    Pexp_apply
                    expression (src/invariant.ml[186,5794+4]..[186,5794+18])
                      Pexp_ident "Printf.fprintf" (src/invariant.ml[186,5794+4]..[186,5794+18])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[186,5794+19]..[186,5794+20])
                          Pexp_ident "f" (src/invariant.ml[186,5794+19]..[186,5794+20])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[186,5794+21]..[186,5794+61])
                          Pexp_constant PConst_string("%d out of %d states are represented.\n",(src/invariant.ml[186,5794+22]..[186,5794+60]),None)
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[186,5794+62]..[186,5794+67])
                          Pexp_ident "count" (src/invariant.ml[186,5794+62]..[186,5794+67])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[186,5794+68]..[186,5794+73])
                          Pexp_ident "Lr1.n" (src/invariant.ml[186,5794+68]..[186,5794+73])
                    ]
          ]
    ]
  structure_item (src/invariant.ml[191,5949+0]..[197,6107+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[191,5949+4]..[191,5949+6])
          Ppat_construct "()" (src/invariant.ml[191,5949+4]..[191,5949+6])
          None
        expression (src/invariant.ml[192,5958+2]..[197,6107+3])
          Pexp_apply
          expression (src/invariant.ml[192,5958+2]..[192,5958+12])
            Pexp_ident "Error.logC" (src/invariant.ml[192,5958+2]..[192,5958+12])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[192,5958+13]..[192,5958+14])
                Pexp_constant PConst_int (3,None)
            <arg>
            Nolabel
              expression (src/invariant.ml[192,5958+15]..[197,6107+3])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[192,5958+20]..[192,5958+21])
                  Ppat_var "f" (src/invariant.ml[192,5958+20]..[192,5958+21])
                expression (src/invariant.ml[193,5983+4]..[196,6101+5])
                  Pexp_apply
                  expression (src/invariant.ml[193,5983+4]..[193,5983+12])
                    Pexp_ident "Lr1.iter" (src/invariant.ml[193,5983+4]..[193,5983+12])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[193,5983+13]..[196,6101+5])
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/invariant.ml[193,5983+18]..[193,5983+22])
                          Ppat_var "node" (src/invariant.ml[193,5983+18]..[193,5983+22])
                        expression (src/invariant.ml[194,6009+6]..[195,6057+43])
                          Pexp_apply
                          expression (src/invariant.ml[194,6009+6]..[194,6009+20])
                            Pexp_ident "Printf.fprintf" (src/invariant.ml[194,6009+6]..[194,6009+20])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[194,6009+21]..[194,6009+22])
                                Pexp_ident "f" (src/invariant.ml[194,6009+21]..[194,6009+22])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[194,6009+23]..[194,6009+47])
                                Pexp_constant PConst_string("represented(%s) = %b\n",(src/invariant.ml[194,6009+24]..[194,6009+46]),None)
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[195,6057+8]..[195,6057+24])
                                Pexp_apply
                                expression (src/invariant.ml[195,6057+9]..[195,6057+18])
                                  Pexp_ident "Lr1.print" (src/invariant.ml[195,6057+9]..[195,6057+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[195,6057+19]..[195,6057+23])
                                      Pexp_ident "node" (src/invariant.ml[195,6057+19]..[195,6057+23])
                                ]
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[195,6057+25]..[195,6057+43])
                                Pexp_apply
                                expression (src/invariant.ml[195,6057+26]..[195,6057+37])
                                  Pexp_ident "represented" (src/invariant.ml[195,6057+26]..[195,6057+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[195,6057+38]..[195,6057+42])
                                      Pexp_ident "node" (src/invariant.ml[195,6057+38]..[195,6057+42])
                                ]
                          ]
                  ]
          ]
    ]
  structure_item (src/invariant.ml[204,6298+0]..[204,6298+12])
    Pstr_open Fresh
    module_expr (src/invariant.ml[204,6298+5]..[204,6298+12])
      Pmod_ident "Keyword" (src/invariant.ml[204,6298+5]..[204,6298+12])
  structure_item (src/invariant.ml[206,6312+0]..[207,6328+18])
    Pstr_type Rec
    [
      type_declaration "variable" (src/invariant.ml[206,6312+5]..[206,6312+13]) (src/invariant.ml[206,6312+0]..[207,6328+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/invariant.ml[207,6328+2]..[207,6328+18])
              Ptyp_tuple
              [
                core_type (src/invariant.ml[207,6328+2]..[207,6328+10])
                  Ptyp_constr "Symbol.t" (src/invariant.ml[207,6328+2]..[207,6328+10])
                  []
                core_type (src/invariant.ml[207,6328+13]..[207,6328+18])
                  Ptyp_constr "where" (src/invariant.ml[207,6328+13]..[207,6328+18])
                  []
              ]
    ]
  structure_item (src/invariant.ml[209,6377+0]..[239,7209+3])
    Pstr_module
    "M" (src/invariant.ml[209,6377+7]..[209,6377+8])
      module_expr (src/invariant.ml[209,6377+9]..[239,7209+3])
        Pmod_constraint
        module_expr (src/invariant.ml[209,6377+58]..[239,7209+3])
          Pmod_structure
          [
            structure_item (src/invariant.ml[210,6442+2]..[210,6442+21])
              Pstr_type Rec
              [
                type_declaration "key" (src/invariant.ml[210,6442+7]..[210,6442+10]) (src/invariant.ml[210,6442+2]..[210,6442+21])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/invariant.ml[210,6442+13]..[210,6442+21])
                        Ptyp_constr "variable" (src/invariant.ml[210,6442+13]..[210,6442+21])
                        []
              ]
            structure_item (src/invariant.ml[211,6464+2]..[214,6561+3])
              Pstr_type Rec
              [
                type_declaration "t" (src/invariant.ml[211,6464+13]..[211,6464+14]) (src/invariant.ml[211,6464+2]..[214,6561+3])
                  ptype_params =
                    [
                      core_type (src/invariant.ml[211,6464+7]..[211,6464+12])
                        Ptyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_record
                      [
                        (src/invariant.ml[212,6483+4]..[212,6483+38])
                          Mutable
                          "startp" (src/invariant.ml[212,6483+12]..[212,6483+18])                          core_type (src/invariant.ml[212,6483+20]..[212,6483+37])
                            Ptyp_constr "SymbolMap.t" (src/invariant.ml[212,6483+26]..[212,6483+37])
                            [
                              core_type (src/invariant.ml[212,6483+20]..[212,6483+25])
                                Ptyp_var data
                            ]
                        (src/invariant.ml[213,6522+4]..[213,6522+38])
                          Mutable
                          "endp" (src/invariant.ml[213,6522+12]..[213,6522+16])                          core_type (src/invariant.ml[213,6522+20]..[213,6522+37])
                            Ptyp_constr "SymbolMap.t" (src/invariant.ml[213,6522+26]..[213,6522+37])
                            [
                              core_type (src/invariant.ml[213,6522+20]..[213,6522+25])
                                Ptyp_var data
                            ]
                      ]
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
            structure_item (src/invariant.ml[215,6565+2]..[215,6565+16])
              Pstr_open Fresh
              module_expr (src/invariant.ml[215,6565+7]..[215,6565+16])
                Pmod_ident "SymbolMap" (src/invariant.ml[215,6565+7]..[215,6565+16])
            structure_item (src/invariant.ml[216,6582+2]..[217,6599+36])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[216,6582+6]..[216,6582+12])
                    Ppat_var "create" (src/invariant.ml[216,6582+6]..[216,6582+12])
                  expression (src/invariant.ml[216,6582+12]..[217,6599+36]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[216,6582+12]..[216,6582+14])
                      Ppat_construct "()" (src/invariant.ml[216,6582+12]..[216,6582+14])
                      None
                    expression (src/invariant.ml[217,6599+4]..[217,6599+36])
                      Pexp_record
                      [
                        "startp" (src/invariant.ml[217,6599+6]..[217,6599+12])
                          expression (src/invariant.ml[217,6599+15]..[217,6599+20])
                            Pexp_ident "empty" (src/invariant.ml[217,6599+15]..[217,6599+20])
                        "endp" (src/invariant.ml[217,6599+22]..[217,6599+26])
                          expression (src/invariant.ml[217,6599+29]..[217,6599+34])
                            Pexp_ident "empty" (src/invariant.ml[217,6599+29]..[217,6599+34])
                      ]
                      None
              ]
            structure_item (src/invariant.ml[218,6636+2]..[219,6652+38])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[218,6636+6]..[218,6636+11])
                    Ppat_var "clear" (src/invariant.ml[218,6636+6]..[218,6636+11])
                  expression (src/invariant.ml[218,6636+12]..[219,6652+38]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[218,6636+12]..[218,6636+13])
                      Ppat_var "m" (src/invariant.ml[218,6636+12]..[218,6636+13])
                    expression (src/invariant.ml[219,6652+4]..[219,6652+38])
                      Pexp_sequence
                      expression (src/invariant.ml[219,6652+4]..[219,6652+21])
                        Pexp_setfield
                        expression (src/invariant.ml[219,6652+4]..[219,6652+5])
                          Pexp_ident "m" (src/invariant.ml[219,6652+4]..[219,6652+5])
                        "startp" (src/invariant.ml[219,6652+6]..[219,6652+12])
                        expression (src/invariant.ml[219,6652+16]..[219,6652+21])
                          Pexp_ident "empty" (src/invariant.ml[219,6652+16]..[219,6652+21])
                      expression (src/invariant.ml[219,6652+23]..[219,6652+38])
                        Pexp_setfield
                        expression (src/invariant.ml[219,6652+23]..[219,6652+24])
                          Pexp_ident "m" (src/invariant.ml[219,6652+23]..[219,6652+24])
                        "endp" (src/invariant.ml[219,6652+25]..[219,6652+29])
                        expression (src/invariant.ml[219,6652+33]..[219,6652+38])
                          Pexp_ident "empty" (src/invariant.ml[219,6652+33]..[219,6652+38])
              ]
            structure_item (src/invariant.ml[220,6691+2]..[227,6888+20])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[220,6691+6]..[220,6691+9])
                    Ppat_var "add" (src/invariant.ml[220,6691+6]..[220,6691+9])
                  expression (src/invariant.ml[220,6691+10]..[227,6888+20]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[220,6691+10]..[220,6691+22])
                      Ppat_tuple
                      [
                        pattern (src/invariant.ml[220,6691+11]..[220,6691+14])
                          Ppat_var "sym" (src/invariant.ml[220,6691+11]..[220,6691+14])
                        pattern (src/invariant.ml[220,6691+16]..[220,6691+21])
                          Ppat_var "where" (src/invariant.ml[220,6691+16]..[220,6691+21])
                      ]
                    expression (src/invariant.ml[220,6691+23]..[227,6888+20]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[220,6691+23]..[220,6691+27])
                        Ppat_var "data" (src/invariant.ml[220,6691+23]..[220,6691+27])
                      expression (src/invariant.ml[220,6691+28]..[227,6888+20]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/invariant.ml[220,6691+28]..[220,6691+29])
                          Ppat_var "m" (src/invariant.ml[220,6691+28]..[220,6691+29])
                        expression (src/invariant.ml[221,6723+4]..[227,6888+20])
                          Pexp_match
                          expression (src/invariant.ml[221,6723+10]..[221,6723+15])
                            Pexp_ident "where" (src/invariant.ml[221,6723+10]..[221,6723+15])
                          [
                            <case>
                              pattern (src/invariant.ml[222,6744+6]..[222,6744+16])
                                Ppat_construct "WhereStart" (src/invariant.ml[222,6744+6]..[222,6744+16])
                                None
                              expression (src/invariant.ml[223,6764+8]..[223,6764+41])
                                Pexp_setfield
                                expression (src/invariant.ml[223,6764+8]..[223,6764+9])
                                  Pexp_ident "m" (src/invariant.ml[223,6764+8]..[223,6764+9])
                                "startp" (src/invariant.ml[223,6764+10]..[223,6764+16])
                                expression (src/invariant.ml[223,6764+20]..[223,6764+41])
                                  Pexp_apply
                                  expression (src/invariant.ml[223,6764+20]..[223,6764+23])
                                    Pexp_ident "add" (src/invariant.ml[223,6764+20]..[223,6764+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[223,6764+24]..[223,6764+27])
                                        Pexp_ident "sym" (src/invariant.ml[223,6764+24]..[223,6764+27])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[223,6764+28]..[223,6764+32])
                                        Pexp_ident "data" (src/invariant.ml[223,6764+28]..[223,6764+32])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[223,6764+33]..[223,6764+41])
                                        Pexp_field
                                        expression (src/invariant.ml[223,6764+33]..[223,6764+34])
                                          Pexp_ident "m" (src/invariant.ml[223,6764+33]..[223,6764+34])
                                        "startp" (src/invariant.ml[223,6764+35]..[223,6764+41])
                                  ]
                            <case>
                              pattern (src/invariant.ml[224,6806+6]..[224,6806+14])
                                Ppat_construct "WhereEnd" (src/invariant.ml[224,6806+6]..[224,6806+14])
                                None
                              expression (src/invariant.ml[225,6824+8]..[225,6824+37])
                                Pexp_setfield
                                expression (src/invariant.ml[225,6824+8]..[225,6824+9])
                                  Pexp_ident "m" (src/invariant.ml[225,6824+8]..[225,6824+9])
                                "endp" (src/invariant.ml[225,6824+10]..[225,6824+14])
                                expression (src/invariant.ml[225,6824+18]..[225,6824+37])
                                  Pexp_apply
                                  expression (src/invariant.ml[225,6824+18]..[225,6824+21])
                                    Pexp_ident "add" (src/invariant.ml[225,6824+18]..[225,6824+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[225,6824+22]..[225,6824+25])
                                        Pexp_ident "sym" (src/invariant.ml[225,6824+22]..[225,6824+25])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[225,6824+26]..[225,6824+30])
                                        Pexp_ident "data" (src/invariant.ml[225,6824+26]..[225,6824+30])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[225,6824+31]..[225,6824+37])
                                        Pexp_field
                                        expression (src/invariant.ml[225,6824+31]..[225,6824+32])
                                          Pexp_ident "m" (src/invariant.ml[225,6824+31]..[225,6824+32])
                                        "endp" (src/invariant.ml[225,6824+33]..[225,6824+37])
                                  ]
                            <case>
                              pattern (src/invariant.ml[226,6862+6]..[226,6862+22])
                                Ppat_construct "WhereSymbolStart" (src/invariant.ml[226,6862+6]..[226,6862+22])
                                None
                              expression (src/invariant.ml[227,6888+8]..[227,6888+20])
                                Pexp_assert
                                expression (src/invariant.ml[227,6888+15]..[227,6888+20])
                                  Pexp_construct "false" (src/invariant.ml[227,6888+15]..[227,6888+20])
                                  None
                          ]
              ]
            structure_item (src/invariant.ml[228,6909+2]..[235,7072+20])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[228,6909+6]..[228,6909+10])
                    Ppat_var "find" (src/invariant.ml[228,6909+6]..[228,6909+10])
                  expression (src/invariant.ml[228,6909+11]..[235,7072+20]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[228,6909+11]..[228,6909+23])
                      Ppat_tuple
                      [
                        pattern (src/invariant.ml[228,6909+12]..[228,6909+15])
                          Ppat_var "sym" (src/invariant.ml[228,6909+12]..[228,6909+15])
                        pattern (src/invariant.ml[228,6909+17]..[228,6909+22])
                          Ppat_var "where" (src/invariant.ml[228,6909+17]..[228,6909+22])
                      ]
                    expression (src/invariant.ml[228,6909+24]..[235,7072+20]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[228,6909+24]..[228,6909+25])
                        Ppat_var "m" (src/invariant.ml[228,6909+24]..[228,6909+25])
                      expression (src/invariant.ml[229,6937+4]..[235,7072+20])
                        Pexp_match
                        expression (src/invariant.ml[229,6937+10]..[229,6937+15])
                          Pexp_ident "where" (src/invariant.ml[229,6937+10]..[229,6937+15])
                        [
                          <case>
                            pattern (src/invariant.ml[230,6958+6]..[230,6958+16])
                              Ppat_construct "WhereStart" (src/invariant.ml[230,6958+6]..[230,6958+16])
                              None
                            expression (src/invariant.ml[231,6978+8]..[231,6978+25])
                              Pexp_apply
                              expression (src/invariant.ml[231,6978+8]..[231,6978+12])
                                Pexp_ident "find" (src/invariant.ml[231,6978+8]..[231,6978+12])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[231,6978+13]..[231,6978+16])
                                    Pexp_ident "sym" (src/invariant.ml[231,6978+13]..[231,6978+16])
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[231,6978+17]..[231,6978+25])
                                    Pexp_field
                                    expression (src/invariant.ml[231,6978+17]..[231,6978+18])
                                      Pexp_ident "m" (src/invariant.ml[231,6978+17]..[231,6978+18])
                                    "startp" (src/invariant.ml[231,6978+19]..[231,6978+25])
                              ]
                          <case>
                            pattern (src/invariant.ml[232,7004+6]..[232,7004+14])
                              Ppat_construct "WhereEnd" (src/invariant.ml[232,7004+6]..[232,7004+14])
                              None
                            expression (src/invariant.ml[233,7022+8]..[233,7022+23])
                              Pexp_apply
                              expression (src/invariant.ml[233,7022+8]..[233,7022+12])
                                Pexp_ident "find" (src/invariant.ml[233,7022+8]..[233,7022+12])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[233,7022+13]..[233,7022+16])
                                    Pexp_ident "sym" (src/invariant.ml[233,7022+13]..[233,7022+16])
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[233,7022+17]..[233,7022+23])
                                    Pexp_field
                                    expression (src/invariant.ml[233,7022+17]..[233,7022+18])
                                      Pexp_ident "m" (src/invariant.ml[233,7022+17]..[233,7022+18])
                                    "endp" (src/invariant.ml[233,7022+19]..[233,7022+23])
                              ]
                          <case>
                            pattern (src/invariant.ml[234,7046+6]..[234,7046+22])
                              Ppat_construct "WhereSymbolStart" (src/invariant.ml[234,7046+6]..[234,7046+22])
                              None
                            expression (src/invariant.ml[235,7072+8]..[235,7072+20])
                              Pexp_assert
                              expression (src/invariant.ml[235,7072+15]..[235,7072+20])
                                Pexp_construct "false" (src/invariant.ml[235,7072+15]..[235,7072+20])
                                None
                        ]
              ]
            structure_item (src/invariant.ml[236,7093+2]..[238,7162+46])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[236,7093+6]..[236,7093+10])
                    Ppat_var "iter" (src/invariant.ml[236,7093+6]..[236,7093+10])
                  expression (src/invariant.ml[236,7093+11]..[238,7162+46]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[236,7093+11]..[236,7093+12])
                      Ppat_var "f" (src/invariant.ml[236,7093+11]..[236,7093+12])
                    expression (src/invariant.ml[236,7093+13]..[238,7162+46]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[236,7093+13]..[236,7093+14])
                        Ppat_var "m" (src/invariant.ml[236,7093+13]..[236,7093+14])
                      expression (src/invariant.ml[237,7110+4]..[238,7162+46])
                        Pexp_sequence
                        expression (src/invariant.ml[237,7110+4]..[237,7110+50])
                          Pexp_apply
                          expression (src/invariant.ml[237,7110+4]..[237,7110+8])
                            Pexp_ident "iter" (src/invariant.ml[237,7110+4]..[237,7110+8])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[237,7110+9]..[237,7110+41])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[237,7110+14]..[237,7110+17])
                                  Ppat_var "sym" (src/invariant.ml[237,7110+14]..[237,7110+17])
                                expression (src/invariant.ml[237,7110+21]..[237,7110+40])
                                  Pexp_apply
                                  expression (src/invariant.ml[237,7110+21]..[237,7110+22])
                                    Pexp_ident "f" (src/invariant.ml[237,7110+21]..[237,7110+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[237,7110+23]..[237,7110+40])
                                        Pexp_tuple
                                        [
                                          expression (src/invariant.ml[237,7110+24]..[237,7110+27])
                                            Pexp_ident "sym" (src/invariant.ml[237,7110+24]..[237,7110+27])
                                          expression (src/invariant.ml[237,7110+29]..[237,7110+39])
                                            Pexp_construct "WhereStart" (src/invariant.ml[237,7110+29]..[237,7110+39])
                                            None
                                        ]
                                  ]
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[237,7110+42]..[237,7110+50])
                                Pexp_field
                                expression (src/invariant.ml[237,7110+42]..[237,7110+43])
                                  Pexp_ident "m" (src/invariant.ml[237,7110+42]..[237,7110+43])
                                "startp" (src/invariant.ml[237,7110+44]..[237,7110+50])
                          ]
                        expression (src/invariant.ml[238,7162+4]..[238,7162+46])
                          Pexp_apply
                          expression (src/invariant.ml[238,7162+4]..[238,7162+8])
                            Pexp_ident "iter" (src/invariant.ml[238,7162+4]..[238,7162+8])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[238,7162+9]..[238,7162+39])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[238,7162+14]..[238,7162+17])
                                  Ppat_var "sym" (src/invariant.ml[238,7162+14]..[238,7162+17])
                                expression (src/invariant.ml[238,7162+21]..[238,7162+38])
                                  Pexp_apply
                                  expression (src/invariant.ml[238,7162+21]..[238,7162+22])
                                    Pexp_ident "f" (src/invariant.ml[238,7162+21]..[238,7162+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[238,7162+23]..[238,7162+38])
                                        Pexp_tuple
                                        [
                                          expression (src/invariant.ml[238,7162+24]..[238,7162+27])
                                            Pexp_ident "sym" (src/invariant.ml[238,7162+24]..[238,7162+27])
                                          expression (src/invariant.ml[238,7162+29]..[238,7162+37])
                                            Pexp_construct "WhereEnd" (src/invariant.ml[238,7162+29]..[238,7162+37])
                                            None
                                        ]
                                  ]
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[238,7162+40]..[238,7162+46])
                                Pexp_field
                                expression (src/invariant.ml[238,7162+40]..[238,7162+41])
                                  Pexp_ident "m" (src/invariant.ml[238,7162+40]..[238,7162+41])
                                "endp" (src/invariant.ml[238,7162+42]..[238,7162+46])
                          ]
              ]
          ]
        module_type (src/invariant.ml[209,6377+11]..[209,6377+55])
          Pmty_with
          module_type (src/invariant.ml[209,6377+11]..[209,6377+30])
            Pmty_ident "Fix.IMPERATIVE_MAPS" (src/invariant.ml[209,6377+11]..[209,6377+30])
          [
            Pwith_type "key" (src/invariant.ml[209,6377+41]..[209,6377+44])
              type_declaration "key" (src/invariant.ml[209,6377+41]..[209,6377+44]) (src/invariant.ml[209,6377+36]..[209,6377+55])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (src/invariant.ml[209,6377+47]..[209,6377+55])
                      Ptyp_constr "variable" (src/invariant.ml[209,6377+47]..[209,6377+55])
                      []
          ]
  structure_item (src/invariant.ml[287,9573+0]..[288,9584+37])
    Pstr_module
    "F" (src/invariant.ml[287,9573+7]..[287,9573+8])
      module_expr (src/invariant.ml[288,9584+2]..[288,9584+37])
        Pmod_apply
        module_expr (src/invariant.ml[288,9584+2]..[288,9584+19])
          Pmod_apply
          module_expr (src/invariant.ml[288,9584+2]..[288,9584+16])
            Pmod_ident "FixSolver.Make" (src/invariant.ml[288,9584+2]..[288,9584+16])
          module_expr (src/invariant.ml[288,9584+17]..[288,9584+18])
            Pmod_ident "M" (src/invariant.ml[288,9584+17]..[288,9584+18])
        module_expr (src/invariant.ml[288,9584+20]..[288,9584+36])
          Pmod_ident "Fix.Prop.Boolean" (src/invariant.ml[288,9584+20]..[288,9584+36])
  structure_item (src/invariant.ml[290,9623+0]..[364,12540+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[290,9623+4]..[290,9623+6])
          Ppat_construct "()" (src/invariant.ml[290,9623+4]..[290,9623+6])
          None
        expression (src/invariant.ml[296,9825+2]..[364,12540+3])
          Pexp_sequence
          expression (src/invariant.ml[296,9825+2]..[338,11474+3])
            Pexp_apply
            expression (src/invariant.ml[296,9825+2]..[296,9825+18])
              Pexp_ident "Production.iterx" (src/invariant.ml[296,9825+2]..[296,9825+18])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[296,9825+19]..[338,11474+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[296,9825+24]..[296,9825+28])
                    Ppat_var "prod" (src/invariant.ml[296,9825+24]..[296,9825+28])
                  expression (src/invariant.ml[298,9858+4]..[336,11442+30])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/invariant.ml[298,9858+8]..[298,9858+15])
                          Ppat_tuple
                          [
                            pattern (src/invariant.ml[298,9858+8]..[298,9858+10])
                              Ppat_var "nt" (src/invariant.ml[298,9858+8]..[298,9858+10])
                            pattern (src/invariant.ml[298,9858+12]..[298,9858+15])
                              Ppat_var "rhs" (src/invariant.ml[298,9858+12]..[298,9858+15])
                          ]
                        expression (src/invariant.ml[298,9858+18]..[298,9858+37])
                          Pexp_apply
                          expression (src/invariant.ml[298,9858+18]..[298,9858+32])
                            Pexp_ident "Production.def" (src/invariant.ml[298,9858+18]..[298,9858+32])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[298,9858+33]..[298,9858+37])
                                Pexp_ident "prod" (src/invariant.ml[298,9858+33]..[298,9858+37])
                          ]
                      <def>
                        pattern (src/invariant.ml[299,9896+8]..[299,9896+11])
                          Ppat_var "ids" (src/invariant.ml[299,9896+8]..[299,9896+11])
                        expression (src/invariant.ml[299,9896+14]..[299,9896+41])
                          Pexp_apply
                          expression (src/invariant.ml[299,9896+14]..[299,9896+36])
                            Pexp_ident "Production.identifiers" (src/invariant.ml[299,9896+14]..[299,9896+36])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[299,9896+37]..[299,9896+41])
                                Pexp_ident "prod" (src/invariant.ml[299,9896+37]..[299,9896+41])
                          ]
                      <def>
                        pattern (src/invariant.ml[300,9938+8]..[300,9938+14])
                          Ppat_var "action" (src/invariant.ml[300,9938+8]..[300,9938+14])
                        expression (src/invariant.ml[300,9938+17]..[300,9938+39])
                          Pexp_apply
                          expression (src/invariant.ml[300,9938+17]..[300,9938+34])
                            Pexp_ident "Production.action" (src/invariant.ml[300,9938+17]..[300,9938+34])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[300,9938+35]..[300,9938+39])
                                Pexp_ident "prod" (src/invariant.ml[300,9938+35]..[300,9938+39])
                          ]
                    ]
                    expression (src/invariant.ml[301,9981+4]..[336,11442+30])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[301,9981+8]..[301,9981+14])
                            Ppat_var "length" (src/invariant.ml[301,9981+8]..[301,9981+14])
                          expression (src/invariant.ml[301,9981+17]..[301,9981+33])
                            Pexp_apply
                            expression (src/invariant.ml[301,9981+17]..[301,9981+29])
                              Pexp_ident "Array.length" (src/invariant.ml[301,9981+17]..[301,9981+29])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[301,9981+30]..[301,9981+33])
                                  Pexp_ident "rhs" (src/invariant.ml[301,9981+30]..[301,9981+33])
                            ]
                      ]
                      expression (src/invariant.ml[303,10019+4]..[336,11442+30])
                        Pexp_sequence
                        expression (src/invariant.ml[303,10019+4]..[310,10449+7])
                          Pexp_ifthenelse
                          expression (src/invariant.ml[303,10019+7]..[303,10019+17])
                            Pexp_apply
                            expression (src/invariant.ml[303,10019+14]..[303,10019+15])
                              Pexp_ident ">" (src/invariant.ml[303,10019+14]..[303,10019+15])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[303,10019+7]..[303,10019+13])
                                  Pexp_ident "length" (src/invariant.ml[303,10019+7]..[303,10019+13])
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[303,10019+16]..[303,10019+17])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (src/invariant.ml[303,10019+23]..[310,10449+7])
                            Pexp_sequence
                            expression (src/invariant.ml[306,10177+6]..[306,10177+69])
                              Pexp_apply
                              expression (src/invariant.ml[306,10177+6]..[306,10177+21])
                                Pexp_ident "F.record_VarVar" (src/invariant.ml[306,10177+6]..[306,10177+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[306,10177+22]..[306,10177+47])
                                    Pexp_tuple
                                    [
                                      expression (src/invariant.ml[306,10177+23]..[306,10177+34])
                                        Pexp_construct "Symbol.N" (src/invariant.ml[306,10177+23]..[306,10177+31])
                                        Some
                                          expression (src/invariant.ml[306,10177+32]..[306,10177+34])
                                            Pexp_ident "nt" (src/invariant.ml[306,10177+32]..[306,10177+34])
                                      expression (src/invariant.ml[306,10177+36]..[306,10177+46])
                                        Pexp_construct "WhereStart" (src/invariant.ml[306,10177+36]..[306,10177+46])
                                        None
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[306,10177+48]..[306,10177+69])
                                    Pexp_tuple
                                    [
                                      expression (src/invariant.ml[306,10177+49]..[306,10177+56])
                                        Pexp_apply
                                        expression (src/invariant.ml[306,10177+49]..[306,10177+56]) ghost
                                          Pexp_ident "Array.get" (src/invariant.ml[306,10177+49]..[306,10177+56]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[306,10177+49]..[306,10177+52])
                                              Pexp_ident "rhs" (src/invariant.ml[306,10177+49]..[306,10177+52])
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[306,10177+54]..[306,10177+55])
                                              Pexp_constant PConst_int (0,None)
                                        ]
                                      expression (src/invariant.ml[306,10177+58]..[306,10177+68])
                                        Pexp_construct "WhereStart" (src/invariant.ml[306,10177+58]..[306,10177+68])
                                        None
                                    ]
                              ]
                            expression (src/invariant.ml[309,10374+6]..[309,10374+74])
                              Pexp_apply
                              expression (src/invariant.ml[309,10374+6]..[309,10374+21])
                                Pexp_ident "F.record_VarVar" (src/invariant.ml[309,10374+6]..[309,10374+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[309,10374+22]..[309,10374+45])
                                    Pexp_tuple
                                    [
                                      expression (src/invariant.ml[309,10374+23]..[309,10374+34])
                                        Pexp_construct "Symbol.N" (src/invariant.ml[309,10374+23]..[309,10374+31])
                                        Some
                                          expression (src/invariant.ml[309,10374+32]..[309,10374+34])
                                            Pexp_ident "nt" (src/invariant.ml[309,10374+32]..[309,10374+34])
                                      expression (src/invariant.ml[309,10374+36]..[309,10374+44])
                                        Pexp_construct "WhereEnd" (src/invariant.ml[309,10374+36]..[309,10374+44])
                                        None
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[309,10374+46]..[309,10374+74])
                                    Pexp_tuple
                                    [
                                      expression (src/invariant.ml[309,10374+47]..[309,10374+63])
                                        Pexp_apply
                                        expression (src/invariant.ml[309,10374+47]..[309,10374+63]) ghost
                                          Pexp_ident "Array.get" (src/invariant.ml[309,10374+47]..[309,10374+63]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[309,10374+47]..[309,10374+50])
                                              Pexp_ident "rhs" (src/invariant.ml[309,10374+47]..[309,10374+50])
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[309,10374+52]..[309,10374+62])
                                              Pexp_apply
                                              expression (src/invariant.ml[309,10374+59]..[309,10374+60])
                                                Pexp_ident "-" (src/invariant.ml[309,10374+59]..[309,10374+60])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/invariant.ml[309,10374+52]..[309,10374+58])
                                                    Pexp_ident "length" (src/invariant.ml[309,10374+52]..[309,10374+58])
                                                <arg>
                                                Nolabel
                                                  expression (src/invariant.ml[309,10374+61]..[309,10374+62])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                        ]
                                      expression (src/invariant.ml[309,10374+65]..[309,10374+73])
                                        Pexp_construct "WhereEnd" (src/invariant.ml[309,10374+65]..[309,10374+73])
                                        None
                                    ]
                              ]
                          None
                        expression (src/invariant.ml[312,10459+4]..[336,11442+30])
                          Pexp_apply
                          expression (src/invariant.ml[312,10459+4]..[312,10459+19])
                            Pexp_ident "KeywordSet.iter" (src/invariant.ml[312,10459+4]..[312,10459+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[312,10459+20]..[336,11442+5])
                                Pexp_function
                                [
                                  <case>
                                    pattern (src/invariant.ml[313,10489+8]..[313,10489+19])
                                      Ppat_construct "SyntaxError" (src/invariant.ml[313,10489+8]..[313,10489+19])
                                      None
                                    expression (src/invariant.ml[314,10512+10]..[314,10512+12])
                                      Pexp_construct "()" (src/invariant.ml[314,10512+10]..[314,10512+12])
                                      None
                                  <case>
                                    pattern (src/invariant.ml[315,10525+8]..[315,10525+31])
                                      Ppat_construct "Position" (src/invariant.ml[315,10525+8]..[315,10525+16])
                                      Some
                                        []
                                        pattern (src/invariant.ml[315,10525+17]..[315,10525+31])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[315,10525+18]..[315,10525+24])
                                              Ppat_construct "Before" (src/invariant.ml[315,10525+18]..[315,10525+24])
                                              None
                                            pattern (src/invariant.ml[315,10525+26]..[315,10525+27])
                                              Ppat_any
                                            pattern (src/invariant.ml[315,10525+29]..[315,10525+30])
                                              Ppat_any
                                          ]
                                    expression (src/invariant.ml[318,10664+10]..[318,10664+12])
                                      Pexp_construct "()" (src/invariant.ml[318,10664+10]..[318,10664+12])
                                      None
                                  <case>
                                    pattern (src/invariant.ml[319,10677+8]..[319,10677+29])
                                      Ppat_construct "Position" (src/invariant.ml[319,10677+8]..[319,10677+16])
                                      Some
                                        []
                                        pattern (src/invariant.ml[319,10677+17]..[319,10677+29])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[319,10677+18]..[319,10677+22])
                                              Ppat_construct "Left" (src/invariant.ml[319,10677+18]..[319,10677+22])
                                              None
                                            pattern (src/invariant.ml[319,10677+24]..[319,10677+25])
                                              Ppat_any
                                            pattern (src/invariant.ml[319,10677+27]..[319,10677+28])
                                              Ppat_any
                                          ]
                                    expression (src/invariant.ml[321,10777+10]..[321,10777+22])
                                      Pexp_assert
                                      expression (src/invariant.ml[321,10777+17]..[321,10777+22])
                                        Pexp_construct "false" (src/invariant.ml[321,10777+17]..[321,10777+22])
                                        None
                                  <case>
                                    pattern (src/invariant.ml[322,10800+8]..[322,10800+39])
                                      Ppat_construct "Position" (src/invariant.ml[322,10800+8]..[322,10800+16])
                                      Some
                                        []
                                        pattern (src/invariant.ml[322,10800+17]..[322,10800+39])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[322,10800+18]..[322,10800+19])
                                              Ppat_any
                                            pattern (src/invariant.ml[322,10800+21]..[322,10800+22])
                                              Ppat_any
                                            pattern (src/invariant.ml[322,10800+24]..[322,10800+38])
                                              Ppat_construct "FlavorLocation" (src/invariant.ml[322,10800+24]..[322,10800+38])
                                              None
                                          ]
                                    expression (src/invariant.ml[324,10903+10]..[324,10903+22])
                                      Pexp_assert
                                      expression (src/invariant.ml[324,10903+17]..[324,10903+22])
                                        Pexp_construct "false" (src/invariant.ml[324,10903+17]..[324,10903+22])
                                        None
                                  <case>
                                    pattern (src/invariant.ml[325,10926+8]..[325,10926+52])
                                      Ppat_construct "Position" (src/invariant.ml[325,10926+8]..[325,10926+16])
                                      Some
                                        []
                                        pattern (src/invariant.ml[325,10926+17]..[325,10926+52])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[325,10926+18]..[325,10926+30])
                                              Ppat_construct "RightNamed" (src/invariant.ml[325,10926+18]..[325,10926+28])
                                              Some
                                                []
                                                pattern (src/invariant.ml[325,10926+29]..[325,10926+30])
                                                  Ppat_any
                                            pattern (src/invariant.ml[325,10926+32]..[325,10926+48])
                                              Ppat_construct "WhereSymbolStart" (src/invariant.ml[325,10926+32]..[325,10926+48])
                                              None
                                            pattern (src/invariant.ml[325,10926+50]..[325,10926+51])
                                              Ppat_any
                                          ]
                                    expression (src/invariant.ml[327,11035+10]..[327,11035+22])
                                      Pexp_assert
                                      expression (src/invariant.ml[327,11035+17]..[327,11035+22])
                                        Pexp_construct "false" (src/invariant.ml[327,11035+17]..[327,11035+22])
                                        None
                                  <case>
                                    pattern (src/invariant.ml[328,11058+8]..[328,11058+42])
                                      Ppat_construct "Position" (src/invariant.ml[328,11058+8]..[328,11058+16])
                                      Some
                                        []
                                        pattern (src/invariant.ml[328,11058+17]..[328,11058+42])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[328,11058+18]..[328,11058+31])
                                              Ppat_construct "RightNamed" (src/invariant.ml[328,11058+18]..[328,11058+28])
                                              Some
                                                []
                                                pattern (src/invariant.ml[328,11058+29]..[328,11058+31])
                                                  Ppat_var "id" (src/invariant.ml[328,11058+29]..[328,11058+31])
                                            pattern (src/invariant.ml[328,11058+33]..[328,11058+38])
                                              Ppat_var "where" (src/invariant.ml[328,11058+33]..[328,11058+38])
                                            pattern (src/invariant.ml[328,11058+40]..[328,11058+41])
                                              Ppat_any
                                          ]
                                    expression (src/invariant.ml[332,11309+10]..[335,11426+15])
                                      Pexp_apply
                                      expression (src/invariant.ml[332,11309+10]..[332,11309+21])
                                        Pexp_ident "Array.iteri" (src/invariant.ml[332,11309+10]..[332,11309+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[332,11309+22]..[335,11426+11])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/invariant.ml[332,11309+27]..[332,11309+28])
                                              Ppat_var "i" (src/invariant.ml[332,11309+27]..[332,11309+28])
                                            expression (src/invariant.ml[332,11309+29]..[334,11374+51]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/invariant.ml[332,11309+29]..[332,11309+32])
                                                Ppat_var "id'" (src/invariant.ml[332,11309+29]..[332,11309+32])
                                              expression (src/invariant.ml[333,11345+12]..[334,11374+51])
                                                Pexp_ifthenelse
                                                expression (src/invariant.ml[333,11345+15]..[333,11345+23])
                                                  Pexp_apply
                                                  expression (src/invariant.ml[333,11345+18]..[333,11345+19])
                                                    Pexp_ident "=" (src/invariant.ml[333,11345+18]..[333,11345+19])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[333,11345+15]..[333,11345+17])
                                                        Pexp_ident "id" (src/invariant.ml[333,11345+15]..[333,11345+17])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[333,11345+20]..[333,11345+23])
                                                        Pexp_ident "id'" (src/invariant.ml[333,11345+20]..[333,11345+23])
                                                  ]
                                                expression (src/invariant.ml[334,11374+14]..[334,11374+51])
                                                  Pexp_apply
                                                  expression (src/invariant.ml[334,11374+14]..[334,11374+29])
                                                    Pexp_ident "F.record_ConVar" (src/invariant.ml[334,11374+14]..[334,11374+29])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[334,11374+30]..[334,11374+34])
                                                        Pexp_construct "true" (src/invariant.ml[334,11374+30]..[334,11374+34])
                                                        None
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[334,11374+35]..[334,11374+51])
                                                        Pexp_tuple
                                                        [
                                                          expression (src/invariant.ml[334,11374+36]..[334,11374+43])
                                                            Pexp_apply
                                                            expression (src/invariant.ml[334,11374+36]..[334,11374+43]) ghost
                                                              Pexp_ident "Array.get" (src/invariant.ml[334,11374+36]..[334,11374+43]) ghost
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/invariant.ml[334,11374+36]..[334,11374+39])
                                                                  Pexp_ident "rhs" (src/invariant.ml[334,11374+36]..[334,11374+39])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/invariant.ml[334,11374+41]..[334,11374+42])
                                                                  Pexp_ident "i" (src/invariant.ml[334,11374+41]..[334,11374+42])
                                                            ]
                                                          expression (src/invariant.ml[334,11374+45]..[334,11374+50])
                                                            Pexp_ident "where" (src/invariant.ml[334,11374+45]..[334,11374+50])
                                                        ]
                                                  ]
                                                None
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[335,11426+12]..[335,11426+15])
                                            Pexp_ident "ids" (src/invariant.ml[335,11426+12]..[335,11426+15])
                                      ]
                                ]
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[336,11442+6]..[336,11442+30])
                                Pexp_apply
                                expression (src/invariant.ml[336,11442+7]..[336,11442+22])
                                  Pexp_ident "Action.keywords" (src/invariant.ml[336,11442+7]..[336,11442+22])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[336,11442+23]..[336,11442+29])
                                      Pexp_ident "action" (src/invariant.ml[336,11442+23]..[336,11442+29])
                                ]
                          ]
            ]
          expression (src/invariant.ml[340,11513+2]..[364,12540+3])
            Pexp_apply
            expression (src/invariant.ml[340,11513+2]..[340,11513+11])
              Pexp_ident "Lr1.iterx" (src/invariant.ml[340,11513+2]..[340,11513+11])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[340,11513+12]..[364,12540+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[340,11513+17]..[340,11513+18])
                    Ppat_var "s" (src/invariant.ml[340,11513+17]..[340,11513+18])
                  expression (src/invariant.ml[342,11592+4]..[362,12496+42])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/invariant.ml[342,11592+8]..[342,11592+11])
                          Ppat_var "sym" (src/invariant.ml[342,11592+8]..[342,11592+11])
                        expression (src/invariant.ml[342,11592+14]..[342,11592+50])
                          Pexp_apply
                          expression (src/invariant.ml[342,11592+14]..[342,11592+26])
                            Pexp_ident "Option.force" (src/invariant.ml[342,11592+14]..[342,11592+26])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[342,11592+27]..[342,11592+50])
                                Pexp_apply
                                expression (src/invariant.ml[342,11592+28]..[342,11592+47])
                                  Pexp_ident "Lr1.incoming_symbol" (src/invariant.ml[342,11592+28]..[342,11592+47])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[342,11592+48]..[342,11592+49])
                                      Pexp_ident "s" (src/invariant.ml[342,11592+48]..[342,11592+49])
                                ]
                          ]
                    ]
                    expression (src/invariant.ml[348,11910+4]..[362,12496+42])
                      Pexp_sequence
                      expression (src/invariant.ml[348,11910+4]..[356,12239+24])
                        Pexp_apply
                        expression (src/invariant.ml[348,11910+4]..[348,11910+20])
                          Pexp_ident "TerminalMap.iter" (src/invariant.ml[348,11910+4]..[348,11910+20])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[348,11910+21]..[356,12239+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/invariant.ml[348,11910+26]..[348,11910+27])
                                Ppat_any
                              expression (src/invariant.ml[348,11910+28]..[355,12229+9]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[348,11910+28]..[348,11910+33])
                                  Ppat_var "prods" (src/invariant.ml[348,11910+28]..[348,11910+33])
                                expression (src/invariant.ml[349,11947+6]..[355,12229+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/invariant.ml[349,11947+10]..[349,11947+14])
                                        Ppat_var "prod" (src/invariant.ml[349,11947+10]..[349,11947+14])
                                      expression (src/invariant.ml[349,11947+17]..[349,11947+34])
                                        Pexp_apply
                                        expression (src/invariant.ml[349,11947+17]..[349,11947+28])
                                          Pexp_ident "Misc.single" (src/invariant.ml[349,11947+17]..[349,11947+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[349,11947+29]..[349,11947+34])
                                              Pexp_ident "prods" (src/invariant.ml[349,11947+29]..[349,11947+34])
                                        ]
                                  ]
                                  expression (src/invariant.ml[350,11985+6]..[355,12229+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/invariant.ml[350,11985+10]..[350,11985+17])
                                          Ppat_tuple
                                          [
                                            pattern (src/invariant.ml[350,11985+10]..[350,11985+12])
                                              Ppat_var "nt" (src/invariant.ml[350,11985+10]..[350,11985+12])
                                            pattern (src/invariant.ml[350,11985+14]..[350,11985+17])
                                              Ppat_var "rhs" (src/invariant.ml[350,11985+14]..[350,11985+17])
                                          ]
                                        expression (src/invariant.ml[350,11985+20]..[350,11985+39])
                                          Pexp_apply
                                          expression (src/invariant.ml[350,11985+20]..[350,11985+34])
                                            Pexp_ident "Production.def" (src/invariant.ml[350,11985+20]..[350,11985+34])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[350,11985+35]..[350,11985+39])
                                                Pexp_ident "prod" (src/invariant.ml[350,11985+35]..[350,11985+39])
                                          ]
                                    ]
                                    expression (src/invariant.ml[351,12028+6]..[355,12229+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/invariant.ml[351,12028+10]..[351,12028+16])
                                            Ppat_var "length" (src/invariant.ml[351,12028+10]..[351,12028+16])
                                          expression (src/invariant.ml[351,12028+19]..[351,12028+35])
                                            Pexp_apply
                                            expression (src/invariant.ml[351,12028+19]..[351,12028+31])
                                              Pexp_ident "Array.length" (src/invariant.ml[351,12028+19]..[351,12028+31])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/invariant.ml[351,12028+32]..[351,12028+35])
                                                  Pexp_ident "rhs" (src/invariant.ml[351,12028+32]..[351,12028+35])
                                            ]
                                      ]
                                      expression (src/invariant.ml[352,12067+6]..[355,12229+9])
                                        Pexp_ifthenelse
                                        expression (src/invariant.ml[352,12067+9]..[352,12067+19])
                                          Pexp_apply
                                          expression (src/invariant.ml[352,12067+16]..[352,12067+17])
                                            Pexp_ident "=" (src/invariant.ml[352,12067+16]..[352,12067+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[352,12067+9]..[352,12067+15])
                                                Pexp_ident "length" (src/invariant.ml[352,12067+9]..[352,12067+15])
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[352,12067+18]..[352,12067+19])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                        expression (src/invariant.ml[352,12067+25]..[355,12229+9])
                                          Pexp_sequence
                                          expression (src/invariant.ml[353,12098+8]..[353,12098+65])
                                            Pexp_apply
                                            expression (src/invariant.ml[353,12098+8]..[353,12098+23])
                                              Pexp_ident "F.record_VarVar" (src/invariant.ml[353,12098+8]..[353,12098+23])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/invariant.ml[353,12098+24]..[353,12098+49])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/invariant.ml[353,12098+25]..[353,12098+36])
                                                      Pexp_construct "Symbol.N" (src/invariant.ml[353,12098+25]..[353,12098+33])
                                                      Some
                                                        expression (src/invariant.ml[353,12098+34]..[353,12098+36])
                                                          Pexp_ident "nt" (src/invariant.ml[353,12098+34]..[353,12098+36])
                                                    expression (src/invariant.ml[353,12098+38]..[353,12098+48])
                                                      Pexp_construct "WhereStart" (src/invariant.ml[353,12098+38]..[353,12098+48])
                                                      None
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/invariant.ml[353,12098+50]..[353,12098+65])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/invariant.ml[353,12098+51]..[353,12098+54])
                                                      Pexp_ident "sym" (src/invariant.ml[353,12098+51]..[353,12098+54])
                                                    expression (src/invariant.ml[353,12098+56]..[353,12098+64])
                                                      Pexp_construct "WhereEnd" (src/invariant.ml[353,12098+56]..[353,12098+64])
                                                      None
                                                  ]
                                            ]
                                          expression (src/invariant.ml[354,12165+8]..[354,12165+63])
                                            Pexp_apply
                                            expression (src/invariant.ml[354,12165+8]..[354,12165+23])
                                              Pexp_ident "F.record_VarVar" (src/invariant.ml[354,12165+8]..[354,12165+23])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/invariant.ml[354,12165+24]..[354,12165+47])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/invariant.ml[354,12165+25]..[354,12165+36])
                                                      Pexp_construct "Symbol.N" (src/invariant.ml[354,12165+25]..[354,12165+33])
                                                      Some
                                                        expression (src/invariant.ml[354,12165+34]..[354,12165+36])
                                                          Pexp_ident "nt" (src/invariant.ml[354,12165+34]..[354,12165+36])
                                                    expression (src/invariant.ml[354,12165+38]..[354,12165+46])
                                                      Pexp_construct "WhereEnd" (src/invariant.ml[354,12165+38]..[354,12165+46])
                                                      None
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/invariant.ml[354,12165+48]..[354,12165+63])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/invariant.ml[354,12165+49]..[354,12165+52])
                                                      Pexp_ident "sym" (src/invariant.ml[354,12165+49]..[354,12165+52])
                                                    expression (src/invariant.ml[354,12165+54]..[354,12165+62])
                                                      Pexp_construct "WhereEnd" (src/invariant.ml[354,12165+54]..[354,12165+62])
                                                      None
                                                  ]
                                            ]
                                        None
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[356,12239+6]..[356,12239+24])
                              Pexp_apply
                              expression (src/invariant.ml[356,12239+7]..[356,12239+21])
                                Pexp_ident "Lr1.reductions" (src/invariant.ml[356,12239+7]..[356,12239+21])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[356,12239+22]..[356,12239+23])
                                    Pexp_ident "s" (src/invariant.ml[356,12239+22]..[356,12239+23])
                              ]
                        ]
                      expression (src/invariant.ml[361,12464+4]..[362,12496+42])
                        Pexp_ifthenelse
                        expression (src/invariant.ml[361,12464+7]..[361,12464+26])
                          Pexp_apply
                          expression (src/invariant.ml[361,12464+7]..[361,12464+24])
                            Pexp_ident "Lr1.has_beforeend" (src/invariant.ml[361,12464+7]..[361,12464+24])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[361,12464+25]..[361,12464+26])
                                Pexp_ident "s" (src/invariant.ml[361,12464+25]..[361,12464+26])
                          ]
                        expression (src/invariant.ml[362,12496+6]..[362,12496+42])
                          Pexp_apply
                          expression (src/invariant.ml[362,12496+6]..[362,12496+21])
                            Pexp_ident "F.record_ConVar" (src/invariant.ml[362,12496+6]..[362,12496+21])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[362,12496+22]..[362,12496+26])
                                Pexp_construct "true" (src/invariant.ml[362,12496+22]..[362,12496+26])
                                None
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[362,12496+27]..[362,12496+42])
                                Pexp_tuple
                                [
                                  expression (src/invariant.ml[362,12496+28]..[362,12496+31])
                                    Pexp_ident "sym" (src/invariant.ml[362,12496+28]..[362,12496+31])
                                  expression (src/invariant.ml[362,12496+33]..[362,12496+41])
                                    Pexp_construct "WhereEnd" (src/invariant.ml[362,12496+33]..[362,12496+41])
                                    None
                                ]
                          ]
                        None
            ]
    ]
  structure_item (src/invariant.ml[366,12545+0]..[368,12613+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[366,12545+4]..[366,12545+9])
          Ppat_var "track" (src/invariant.ml[366,12545+4]..[366,12545+9])
        core_type (src/invariant.ml[366,12545+12]..[366,12545+35])
          Ptyp_arrow
          Nolabel
          core_type (src/invariant.ml[366,12545+12]..[366,12545+20])
            Ptyp_constr "variable" (src/invariant.ml[366,12545+12]..[366,12545+20])
            []
          core_type (src/invariant.ml[366,12545+24]..[366,12545+35])
            Ptyp_constr "option" (src/invariant.ml[366,12545+29]..[366,12545+35])
            [
              core_type (src/invariant.ml[366,12545+24]..[366,12545+28])
                Ptyp_constr "bool" (src/invariant.ml[366,12545+24]..[366,12545+28])
                []
            ]
        expression (src/invariant.ml[367,12583+2]..[368,12613+12])
          Pexp_letmodule "S" (src/invariant.ml[367,12583+13]..[367,12583+14])
          module_expr (src/invariant.ml[367,12583+17]..[367,12583+26])
            Pmod_apply_unit
            module_expr (src/invariant.ml[367,12583+17]..[367,12583+24])
              Pmod_ident "F.Solve" (src/invariant.ml[367,12583+17]..[367,12583+24])
          expression (src/invariant.ml[368,12613+2]..[368,12613+12])
            Pexp_ident "S.solution" (src/invariant.ml[368,12613+2]..[368,12613+12])
    ]
  structure_item (src/invariant.ml[370,12627+0]..[371,12658+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[370,12627+4]..[370,12627+9])
          Ppat_var "track" (src/invariant.ml[370,12627+4]..[370,12627+9])
        core_type (src/invariant.ml[370,12627+12]..[370,12627+28])
          Ptyp_arrow
          Nolabel
          core_type (src/invariant.ml[370,12627+12]..[370,12627+20])
            Ptyp_constr "variable" (src/invariant.ml[370,12627+12]..[370,12627+20])
            []
          core_type (src/invariant.ml[370,12627+24]..[370,12627+28])
            Ptyp_constr "bool" (src/invariant.ml[370,12627+24]..[370,12627+28])
            []
        expression (src/invariant.ml[371,12658+2]..[371,12658+48])
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[371,12658+6]..[371,12658+7])
            Ppat_var "x" (src/invariant.ml[371,12658+6]..[371,12658+7])
          expression (src/invariant.ml[371,12658+11]..[371,12658+48])
            Pexp_apply
            expression (src/invariant.ml[371,12658+11]..[371,12658+23])
              Pexp_ident "Option.value" (src/invariant.ml[371,12658+11]..[371,12658+23])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[371,12658+24]..[371,12658+33])
                  Pexp_apply
                  expression (src/invariant.ml[371,12658+25]..[371,12658+30])
                    Pexp_ident "track" (src/invariant.ml[371,12658+25]..[371,12658+30])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[371,12658+31]..[371,12658+32])
                        Pexp_ident "x" (src/invariant.ml[371,12658+31]..[371,12658+32])
                  ]
              <arg>
              Labelled "default"
                expression (src/invariant.ml[371,12658+43]..[371,12658+48])
                  Pexp_construct "false" (src/invariant.ml[371,12658+43]..[371,12658+48])
                  None
            ]
    ]
  structure_item (src/invariant.ml[373,12708+0]..[375,12762+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[373,12708+4]..[373,12708+10])
          Ppat_var "startp" (src/invariant.ml[373,12708+4]..[373,12708+10])
        expression (src/invariant.ml[373,12708+11]..[375,12762+28]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[373,12708+11]..[373,12708+17])
            Ppat_var "symbol" (src/invariant.ml[373,12708+11]..[373,12708+17])
          expression (src/invariant.ml[374,12728+2]..[375,12762+28])
            Pexp_apply
            expression (src/invariant.ml[374,12728+31]..[374,12728+33])
              Pexp_ident "||" (src/invariant.ml[374,12728+31]..[374,12728+33])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[374,12728+2]..[374,12728+30])
                  Pexp_ident "Settings.represent_positions" (src/invariant.ml[374,12728+2]..[374,12728+30])
              <arg>
              Nolabel
                expression (src/invariant.ml[375,12762+2]..[375,12762+28])
                  Pexp_apply
                  expression (src/invariant.ml[375,12762+2]..[375,12762+7])
                    Pexp_ident "track" (src/invariant.ml[375,12762+2]..[375,12762+7])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[375,12762+8]..[375,12762+28])
                        Pexp_tuple
                        [
                          expression (src/invariant.ml[375,12762+9]..[375,12762+15])
                            Pexp_ident "symbol" (src/invariant.ml[375,12762+9]..[375,12762+15])
                          expression (src/invariant.ml[375,12762+17]..[375,12762+27])
                            Pexp_construct "WhereStart" (src/invariant.ml[375,12762+17]..[375,12762+27])
                            None
                        ]
                  ]
            ]
    ]
  structure_item (src/invariant.ml[377,12792+0]..[379,12844+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[377,12792+4]..[377,12792+8])
          Ppat_var "endp" (src/invariant.ml[377,12792+4]..[377,12792+8])
        expression (src/invariant.ml[377,12792+9]..[379,12844+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[377,12792+9]..[377,12792+15])
            Ppat_var "symbol" (src/invariant.ml[377,12792+9]..[377,12792+15])
          expression (src/invariant.ml[378,12810+2]..[379,12844+26])
            Pexp_apply
            expression (src/invariant.ml[378,12810+31]..[378,12810+33])
              Pexp_ident "||" (src/invariant.ml[378,12810+31]..[378,12810+33])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[378,12810+2]..[378,12810+30])
                  Pexp_ident "Settings.represent_positions" (src/invariant.ml[378,12810+2]..[378,12810+30])
              <arg>
              Nolabel
                expression (src/invariant.ml[379,12844+2]..[379,12844+26])
                  Pexp_apply
                  expression (src/invariant.ml[379,12844+2]..[379,12844+7])
                    Pexp_ident "track" (src/invariant.ml[379,12844+2]..[379,12844+7])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[379,12844+8]..[379,12844+26])
                        Pexp_tuple
                        [
                          expression (src/invariant.ml[379,12844+9]..[379,12844+15])
                            Pexp_ident "symbol" (src/invariant.ml[379,12844+9]..[379,12844+15])
                          expression (src/invariant.ml[379,12844+17]..[379,12844+25])
                            Pexp_construct "WhereEnd" (src/invariant.ml[379,12844+17]..[379,12844+25])
                            None
                        ]
                  ]
            ]
    ]
  structure_item (src/invariant.ml[381,12872+0]..[383,12968+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[381,12872+4]..[381,12872+20])
          Ppat_var "for_every_symbol" (src/invariant.ml[381,12872+4]..[381,12872+20])
        expression (src/invariant.ml[381,12872+21]..[383,12968+46]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[381,12872+21]..[381,12872+43])
            Ppat_constraint
            pattern (src/invariant.ml[381,12872+22]..[381,12872+23])
              Ppat_var "f" (src/invariant.ml[381,12872+22]..[381,12872+23])
            core_type (src/invariant.ml[381,12872+26]..[381,12872+42])
              Ptyp_arrow
              Nolabel
              core_type (src/invariant.ml[381,12872+26]..[381,12872+34])
                Ptyp_constr "Symbol.t" (src/invariant.ml[381,12872+26]..[381,12872+34])
                []
              core_type (src/invariant.ml[381,12872+38]..[381,12872+42])
                Ptyp_constr "unit" (src/invariant.ml[381,12872+38]..[381,12872+42])
                []
          expression (src/invariant.ml[381,12872+44]..[383,12968+46])
            Pexp_constraint
            expression (src/invariant.ml[382,12925+2]..[383,12968+46])
              Pexp_sequence
              expression (src/invariant.ml[382,12925+2]..[382,12925+41])
                Pexp_apply
                expression (src/invariant.ml[382,12925+2]..[382,12925+15])
                  Pexp_ident "Terminal.iter" (src/invariant.ml[382,12925+2]..[382,12925+15])
                [
                  <arg>
                  Nolabel
                    expression (src/invariant.ml[382,12925+16]..[382,12925+41])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[382,12925+21]..[382,12925+22])
                        Ppat_var "t" (src/invariant.ml[382,12925+21]..[382,12925+22])
                      expression (src/invariant.ml[382,12925+26]..[382,12925+40])
                        Pexp_apply
                        expression (src/invariant.ml[382,12925+26]..[382,12925+27])
                          Pexp_ident "f" (src/invariant.ml[382,12925+26]..[382,12925+27])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[382,12925+28]..[382,12925+40])
                              Pexp_construct "Symbol.T" (src/invariant.ml[382,12925+29]..[382,12925+37])
                              Some
                                expression (src/invariant.ml[382,12925+38]..[382,12925+39])
                                  Pexp_ident "t" (src/invariant.ml[382,12925+38]..[382,12925+39])
                        ]
                ]
              expression (src/invariant.ml[383,12968+2]..[383,12968+46])
                Pexp_apply
                expression (src/invariant.ml[383,12968+2]..[383,12968+18])
                  Pexp_ident "Nonterminal.iter" (src/invariant.ml[383,12968+2]..[383,12968+18])
                [
                  <arg>
                  Nolabel
                    expression (src/invariant.ml[383,12968+19]..[383,12968+46])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[383,12968+24]..[383,12968+26])
                        Ppat_var "nt" (src/invariant.ml[383,12968+24]..[383,12968+26])
                      expression (src/invariant.ml[383,12968+30]..[383,12968+45])
                        Pexp_apply
                        expression (src/invariant.ml[383,12968+30]..[383,12968+31])
                          Pexp_ident "f" (src/invariant.ml[383,12968+30]..[383,12968+31])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[383,12968+32]..[383,12968+45])
                              Pexp_construct "Symbol.N" (src/invariant.ml[383,12968+33]..[383,12968+41])
                              Some
                                expression (src/invariant.ml[383,12968+42]..[383,12968+44])
                                  Pexp_ident "nt" (src/invariant.ml[383,12968+42]..[383,12968+44])
                        ]
                ]
            core_type (src/invariant.ml[381,12872+46]..[381,12872+50])
              Ptyp_constr "unit" (src/invariant.ml[381,12872+46]..[381,12872+50])
              []
    ]
  structure_item (src/invariant.ml[385,13016+0]..[388,13151+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[385,13016+4]..[385,13016+25])
          Ppat_var "sum_over_every_symbol" (src/invariant.ml[385,13016+4]..[385,13016+25])
        expression (src/invariant.ml[385,13016+26]..[388,13151+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[385,13016+26]..[385,13016+48])
            Ppat_constraint
            pattern (src/invariant.ml[385,13016+27]..[385,13016+28])
              Ppat_var "f" (src/invariant.ml[385,13016+27]..[385,13016+28])
            core_type (src/invariant.ml[385,13016+31]..[385,13016+47])
              Ptyp_arrow
              Nolabel
              core_type (src/invariant.ml[385,13016+31]..[385,13016+39])
                Ptyp_constr "Symbol.t" (src/invariant.ml[385,13016+31]..[385,13016+39])
                []
              core_type (src/invariant.ml[385,13016+43]..[385,13016+47])
                Ptyp_constr "bool" (src/invariant.ml[385,13016+43]..[385,13016+47])
                []
          expression (src/invariant.ml[385,13016+49]..[388,13151+4])
            Pexp_constraint
            expression (src/invariant.ml[386,13073+2]..[388,13151+4])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/invariant.ml[386,13073+6]..[386,13073+7])
                    Ppat_var "c" (src/invariant.ml[386,13073+6]..[386,13073+7])
                  expression (src/invariant.ml[386,13073+10]..[386,13073+15])
                    Pexp_apply
                    expression (src/invariant.ml[386,13073+10]..[386,13073+13])
                      Pexp_ident "ref" (src/invariant.ml[386,13073+10]..[386,13073+13])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[386,13073+14]..[386,13073+15])
                          Pexp_constant PConst_int (0,None)
                    ]
              ]
              expression (src/invariant.ml[387,13092+2]..[388,13151+4])
                Pexp_sequence
                expression (src/invariant.ml[387,13092+2]..[387,13092+57])
                  Pexp_apply
                  expression (src/invariant.ml[387,13092+2]..[387,13092+18])
                    Pexp_ident "for_every_symbol" (src/invariant.ml[387,13092+2]..[387,13092+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[387,13092+19]..[387,13092+57])
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/invariant.ml[387,13092+24]..[387,13092+27])
                          Ppat_var "sym" (src/invariant.ml[387,13092+24]..[387,13092+27])
                        expression (src/invariant.ml[387,13092+31]..[387,13092+56])
                          Pexp_ifthenelse
                          expression (src/invariant.ml[387,13092+34]..[387,13092+39])
                            Pexp_apply
                            expression (src/invariant.ml[387,13092+34]..[387,13092+35])
                              Pexp_ident "f" (src/invariant.ml[387,13092+34]..[387,13092+35])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[387,13092+36]..[387,13092+39])
                                  Pexp_ident "sym" (src/invariant.ml[387,13092+36]..[387,13092+39])
                            ]
                          expression (src/invariant.ml[387,13092+45]..[387,13092+56])
                            Pexp_apply
                            expression (src/invariant.ml[387,13092+47]..[387,13092+49])
                              Pexp_ident ":=" (src/invariant.ml[387,13092+47]..[387,13092+49])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[387,13092+45]..[387,13092+46])
                                  Pexp_ident "c" (src/invariant.ml[387,13092+45]..[387,13092+46])
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[387,13092+50]..[387,13092+56])
                                  Pexp_apply
                                  expression (src/invariant.ml[387,13092+53]..[387,13092+54])
                                    Pexp_ident "+" (src/invariant.ml[387,13092+53]..[387,13092+54])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[387,13092+50]..[387,13092+52])
                                        Pexp_apply
                                        expression (src/invariant.ml[387,13092+50]..[387,13092+51])
                                          Pexp_ident "!" (src/invariant.ml[387,13092+50]..[387,13092+51])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[387,13092+51]..[387,13092+52])
                                              Pexp_ident "c" (src/invariant.ml[387,13092+51]..[387,13092+52])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[387,13092+55]..[387,13092+56])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                            ]
                          None
                  ]
                expression (src/invariant.ml[388,13151+2]..[388,13151+4])
                  Pexp_apply
                  expression (src/invariant.ml[388,13151+2]..[388,13151+3])
                    Pexp_ident "!" (src/invariant.ml[388,13151+2]..[388,13151+3])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[388,13151+3]..[388,13151+4])
                        Pexp_ident "c" (src/invariant.ml[388,13151+3]..[388,13151+4])
                  ]
            core_type (src/invariant.ml[385,13016+51]..[385,13016+54])
              Ptyp_constr "int" (src/invariant.ml[385,13016+51]..[385,13016+54])
              []
    ]
  structure_item (src/invariant.ml[390,13157+0]..[396,13412+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[390,13157+4]..[390,13157+6])
          Ppat_construct "()" (src/invariant.ml[390,13157+4]..[390,13157+6])
          None
        expression (src/invariant.ml[391,13166+2]..[396,13412+66])
          Pexp_apply
          expression (src/invariant.ml[391,13166+2]..[391,13166+12])
            Pexp_ident "Error.logC" (src/invariant.ml[391,13166+2]..[391,13166+12])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[391,13166+13]..[391,13166+14])
                Pexp_constant PConst_int (1,None)
            <arg>
            Nolabel
              expression (src/invariant.ml[391,13166+15]..[396,13412+66])
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[391,13166+20]..[391,13166+21])
                  Ppat_var "f" (src/invariant.ml[391,13166+20]..[391,13166+21])
                expression (src/invariant.ml[392,13191+4]..[396,13412+65])
                  Pexp_apply
                  expression (src/invariant.ml[392,13191+4]..[392,13191+18])
                    Pexp_ident "Printf.fprintf" (src/invariant.ml[392,13191+4]..[392,13191+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[392,13191+19]..[392,13191+20])
                        Pexp_ident "f" (src/invariant.ml[392,13191+19]..[392,13191+20])
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[393,13212+6]..[394,13279+64])
                        Pexp_constant PConst_string("%d out of %d symbols keep track of their start position.\n%d out of %d symbols keep track of their end position.\n",(src/invariant.ml[393,13212+7]..[394,13279+63]),None)
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[395,13344+8]..[395,13344+38])
                        Pexp_apply
                        expression (src/invariant.ml[395,13344+9]..[395,13344+30])
                          Pexp_ident "sum_over_every_symbol" (src/invariant.ml[395,13344+9]..[395,13344+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[395,13344+31]..[395,13344+37])
                              Pexp_ident "startp" (src/invariant.ml[395,13344+31]..[395,13344+37])
                        ]
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[395,13344+39]..[395,13344+67])
                        Pexp_apply
                        expression (src/invariant.ml[395,13344+51]..[395,13344+52])
                          Pexp_ident "+" (src/invariant.ml[395,13344+51]..[395,13344+52])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[395,13344+40]..[395,13344+50])
                              Pexp_ident "Terminal.n" (src/invariant.ml[395,13344+40]..[395,13344+50])
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[395,13344+53]..[395,13344+66])
                              Pexp_ident "Nonterminal.n" (src/invariant.ml[395,13344+53]..[395,13344+66])
                        ]
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[396,13412+8]..[396,13412+36])
                        Pexp_apply
                        expression (src/invariant.ml[396,13412+9]..[396,13412+30])
                          Pexp_ident "sum_over_every_symbol" (src/invariant.ml[396,13412+9]..[396,13412+30])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[396,13412+31]..[396,13412+35])
                              Pexp_ident "endp" (src/invariant.ml[396,13412+31]..[396,13412+35])
                        ]
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[396,13412+37]..[396,13412+65])
                        Pexp_apply
                        expression (src/invariant.ml[396,13412+49]..[396,13412+50])
                          Pexp_ident "+" (src/invariant.ml[396,13412+49]..[396,13412+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[396,13412+38]..[396,13412+48])
                              Pexp_ident "Terminal.n" (src/invariant.ml[396,13412+38]..[396,13412+48])
                          <arg>
                          Nolabel
                            expression (src/invariant.ml[396,13412+51]..[396,13412+64])
                              Pexp_ident "Nonterminal.n" (src/invariant.ml[396,13412+51]..[396,13412+64])
                        ]
                  ]
          ]
    ]
  structure_item (src/invariant.ml[403,13640+0]..[410,13782+1])
    Pstr_type Rec
    [
      type_declaration "cell" (src/invariant.ml[403,13640+5]..[403,13640+9]) (src/invariant.ml[403,13640+0]..[410,13782+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (src/invariant.ml[404,13654+2]..[404,13654+19])
                Immutable
                "symbol" (src/invariant.ml[404,13654+2]..[404,13654+8])                core_type (src/invariant.ml[404,13654+10]..[404,13654+18])
                  Ptyp_constr "Symbol.t" (src/invariant.ml[404,13654+10]..[404,13654+18])
                  []
              (src/invariant.ml[405,13674+2]..[405,13674+24])
                Immutable
                "states" (src/invariant.ml[405,13674+2]..[405,13674+8])                core_type (src/invariant.ml[405,13674+10]..[405,13674+23])
                  Ptyp_constr "Lr1.NodeSet.t" (src/invariant.ml[405,13674+10]..[405,13674+23])
                  []
              (src/invariant.ml[406,13699+2]..[406,13699+19])
                Immutable
                "holds_semv" (src/invariant.ml[406,13699+2]..[406,13699+12])                core_type (src/invariant.ml[406,13699+14]..[406,13699+18])
                  Ptyp_constr "bool" (src/invariant.ml[406,13699+14]..[406,13699+18])
                  []
              (src/invariant.ml[407,13719+2]..[407,13719+20])
                Immutable
                "holds_state" (src/invariant.ml[407,13719+2]..[407,13719+13])                core_type (src/invariant.ml[407,13719+15]..[407,13719+19])
                  Ptyp_constr "bool" (src/invariant.ml[407,13719+15]..[407,13719+19])
                  []
              (src/invariant.ml[408,13740+2]..[408,13740+21])
                Immutable
                "holds_startp" (src/invariant.ml[408,13740+2]..[408,13740+14])                core_type (src/invariant.ml[408,13740+16]..[408,13740+20])
                  Ptyp_constr "bool" (src/invariant.ml[408,13740+16]..[408,13740+20])
                  []
              (src/invariant.ml[409,13762+2]..[409,13762+19])
                Immutable
                "holds_endp" (src/invariant.ml[409,13762+2]..[409,13762+12])                core_type (src/invariant.ml[409,13762+14]..[409,13762+18])
                  Ptyp_constr "bool" (src/invariant.ml[409,13762+14]..[409,13762+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[412,13785+0]..[413,13797+12])
    Pstr_type Rec
    [
      type_declaration "word" (src/invariant.ml[412,13785+5]..[412,13785+9]) (src/invariant.ml[412,13785+0]..[413,13797+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/invariant.ml[413,13797+2]..[413,13797+12])
              Ptyp_constr "array" (src/invariant.ml[413,13797+7]..[413,13797+12])
              [
                core_type (src/invariant.ml[413,13797+2]..[413,13797+6])
                  Ptyp_constr "cell" (src/invariant.ml[413,13797+2]..[413,13797+6])
                  []
              ]
    ]
  structure_item (src/invariant.ml[420,13934+0]..[431,14223+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[420,13934+4]..[420,13934+12])
          Ppat_var "has_semv" (src/invariant.ml[420,13934+4]..[420,13934+12])
        expression (src/invariant.ml[420,13934+13]..[431,14223+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[420,13934+13]..[420,13934+19])
            Ppat_var "symbol" (src/invariant.ml[420,13934+13]..[420,13934+19])
          expression (src/invariant.ml[421,13956+2]..[431,14223+14])
            Pexp_apply
            expression (src/invariant.ml[421,13956+28]..[421,13956+30])
              Pexp_ident "||" (src/invariant.ml[421,13956+28]..[421,13956+30])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[421,13956+2]..[421,13956+27])
                  Pexp_ident "Settings.represent_values" (src/invariant.ml[421,13956+2]..[421,13956+27])
              <arg>
              Nolabel
                expression (src/invariant.ml[422,13987+2]..[431,14223+14])
                  Pexp_match
                  expression (src/invariant.ml[422,13987+8]..[422,13987+14])
                    Pexp_ident "symbol" (src/invariant.ml[422,13987+8]..[422,13987+14])
                  [
                    <case>
                      pattern (src/invariant.ml[423,14007+4]..[423,14007+16])
                        Ppat_construct "Symbol.N" (src/invariant.ml[423,14007+4]..[423,14007+12])
                        Some
                          []
                          pattern (src/invariant.ml[423,14007+13]..[423,14007+16])
                            Ppat_var "_nt" (src/invariant.ml[423,14007+13]..[423,14007+16])
                      expression (src/invariant.ml[424,14027+6]..[424,14027+10])
                        Pexp_construct "true" (src/invariant.ml[424,14027+6]..[424,14027+10])
                        None
                    <case>
                      pattern (src/invariant.ml[425,14038+4]..[425,14038+16])
                        Ppat_construct "Symbol.T" (src/invariant.ml[425,14038+4]..[425,14038+12])
                        Some
                          []
                          pattern (src/invariant.ml[425,14038+13]..[425,14038+16])
                            Ppat_var "tok" (src/invariant.ml[425,14038+13]..[425,14038+16])
                      expression (src/invariant.ml[426,14058+6]..[431,14223+14])
                        Pexp_match
                        expression (src/invariant.ml[426,14058+12]..[426,14058+34])
                          Pexp_apply
                          expression (src/invariant.ml[426,14058+12]..[426,14058+30])
                            Pexp_ident "Terminal.ocamltype" (src/invariant.ml[426,14058+12]..[426,14058+30])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[426,14058+31]..[426,14058+34])
                                Pexp_ident "tok" (src/invariant.ml[426,14058+31]..[426,14058+34])
                          ]
                        [
                          <case>
                            pattern (src/invariant.ml[427,14098+8]..[427,14098+12])
                              Ppat_construct "None" (src/invariant.ml[427,14098+8]..[427,14098+12])
                              None
                            expression (src/invariant.ml[429,14180+10]..[429,14180+15])
                              Pexp_construct "false" (src/invariant.ml[429,14180+10]..[429,14180+15])
                              None
                          <case>
                            pattern (src/invariant.ml[430,14196+8]..[430,14196+23])
                              Ppat_construct "Some" (src/invariant.ml[430,14196+8]..[430,14196+12])
                              Some
                                []
                                pattern (src/invariant.ml[430,14196+13]..[430,14196+23])
                                  Ppat_var "_ocamltype" (src/invariant.ml[430,14196+13]..[430,14196+23])
                            expression (src/invariant.ml[431,14223+10]..[431,14223+14])
                              Pexp_construct "true" (src/invariant.ml[431,14223+10]..[431,14223+14])
                              None
                        ]
                  ]
            ]
    ]
  structure_item (src/invariant.ml[433,14239+0]..[437,14408+71])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[433,14239+4]..[433,14239+8])
          Ppat_var "cell" (src/invariant.ml[433,14239+4]..[433,14239+8])
        expression (src/invariant.ml[433,14239+9]..[437,14408+71]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[433,14239+9]..[433,14239+15])
            Ppat_var "symbol" (src/invariant.ml[433,14239+9]..[433,14239+15])
          expression (src/invariant.ml[433,14239+16]..[437,14408+71]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/invariant.ml[433,14239+16]..[433,14239+22])
              Ppat_var "states" (src/invariant.ml[433,14239+16]..[433,14239+22])
            expression (src/invariant.ml[434,14264+2]..[437,14408+71])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/invariant.ml[434,14264+6]..[434,14264+16])
                    Ppat_var "holds_semv" (src/invariant.ml[434,14264+6]..[434,14264+16])
                  expression (src/invariant.ml[434,14264+19]..[434,14264+34])
                    Pexp_apply
                    expression (src/invariant.ml[434,14264+19]..[434,14264+27])
                      Pexp_ident "has_semv" (src/invariant.ml[434,14264+19]..[434,14264+27])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[434,14264+28]..[434,14264+34])
                          Pexp_ident "symbol" (src/invariant.ml[434,14264+28]..[434,14264+34])
                    ]
              ]
              expression (src/invariant.ml[435,14302+2]..[437,14408+71])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/invariant.ml[435,14302+6]..[435,14302+17])
                      Ppat_var "holds_state" (src/invariant.ml[435,14302+6]..[435,14302+17])
                    expression (src/invariant.ml[435,14302+20]..[435,14302+39])
                      Pexp_apply
                      expression (src/invariant.ml[435,14302+20]..[435,14302+32])
                        Pexp_ident "representeds" (src/invariant.ml[435,14302+20]..[435,14302+32])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[435,14302+33]..[435,14302+39])
                            Pexp_ident "states" (src/invariant.ml[435,14302+33]..[435,14302+39])
                      ]
                ]
                expression (src/invariant.ml[436,14345+2]..[437,14408+71])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/invariant.ml[436,14345+6]..[436,14345+30])
                        Ppat_tuple
                        [
                          pattern (src/invariant.ml[436,14345+6]..[436,14345+18])
                            Ppat_var "holds_startp" (src/invariant.ml[436,14345+6]..[436,14345+18])
                          pattern (src/invariant.ml[436,14345+20]..[436,14345+30])
                            Ppat_var "holds_endp" (src/invariant.ml[436,14345+20]..[436,14345+30])
                        ]
                      expression (src/invariant.ml[436,14345+33]..[436,14345+59])
                        Pexp_tuple
                        [
                          expression (src/invariant.ml[436,14345+33]..[436,14345+46])
                            Pexp_apply
                            expression (src/invariant.ml[436,14345+33]..[436,14345+39])
                              Pexp_ident "startp" (src/invariant.ml[436,14345+33]..[436,14345+39])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[436,14345+40]..[436,14345+46])
                                  Pexp_ident "symbol" (src/invariant.ml[436,14345+40]..[436,14345+46])
                            ]
                          expression (src/invariant.ml[436,14345+48]..[436,14345+59])
                            Pexp_apply
                            expression (src/invariant.ml[436,14345+48]..[436,14345+52])
                              Pexp_ident "endp" (src/invariant.ml[436,14345+48]..[436,14345+52])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[436,14345+53]..[436,14345+59])
                                  Pexp_ident "symbol" (src/invariant.ml[436,14345+53]..[436,14345+59])
                            ]
                        ]
                  ]
                  expression (src/invariant.ml[437,14408+2]..[437,14408+71])
                    Pexp_record
                    [
                      "symbol" (src/invariant.ml[437,14408+4]..[437,14408+10]) ghost
                        expression (src/invariant.ml[437,14408+4]..[437,14408+10])
                          Pexp_ident "symbol" (src/invariant.ml[437,14408+4]..[437,14408+10])
                      "states" (src/invariant.ml[437,14408+12]..[437,14408+18]) ghost
                        expression (src/invariant.ml[437,14408+12]..[437,14408+18])
                          Pexp_ident "states" (src/invariant.ml[437,14408+12]..[437,14408+18])
                      "holds_semv" (src/invariant.ml[437,14408+20]..[437,14408+30]) ghost
                        expression (src/invariant.ml[437,14408+20]..[437,14408+30])
                          Pexp_ident "holds_semv" (src/invariant.ml[437,14408+20]..[437,14408+30])
                      "holds_state" (src/invariant.ml[437,14408+32]..[437,14408+43]) ghost
                        expression (src/invariant.ml[437,14408+32]..[437,14408+43])
                          Pexp_ident "holds_state" (src/invariant.ml[437,14408+32]..[437,14408+43])
                      "holds_startp" (src/invariant.ml[437,14408+45]..[437,14408+57]) ghost
                        expression (src/invariant.ml[437,14408+45]..[437,14408+57])
                          Pexp_ident "holds_startp" (src/invariant.ml[437,14408+45]..[437,14408+57])
                      "holds_endp" (src/invariant.ml[437,14408+59]..[437,14408+69]) ghost
                        expression (src/invariant.ml[437,14408+59]..[437,14408+69])
                          Pexp_ident "holds_endp" (src/invariant.ml[437,14408+59]..[437,14408+69])
                    ]
                    None
    ]
  structure_item (src/invariant.ml[441,14499+0]..[443,14569+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[441,14499+4]..[441,14499+11])
          Ppat_var "similar" (src/invariant.ml[441,14499+4]..[441,14499+11])
        expression (src/invariant.ml[441,14499+12]..[443,14569+39]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[441,14499+12]..[441,14499+17])
            Ppat_var "cell1" (src/invariant.ml[441,14499+12]..[441,14499+17])
          expression (src/invariant.ml[441,14499+18]..[443,14569+39]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/invariant.ml[441,14499+18]..[441,14499+23])
              Ppat_var "cell2" (src/invariant.ml[441,14499+18]..[441,14499+23])
            expression (src/invariant.ml[442,14525+2]..[443,14569+39])
              Pexp_apply
              expression (src/invariant.ml[442,14525+41]..[442,14525+43])
                Pexp_ident "&&" (src/invariant.ml[442,14525+41]..[442,14525+43])
              [
                <arg>
                Nolabel
                  expression (src/invariant.ml[442,14525+2]..[442,14525+40])
                    Pexp_apply
                    expression (src/invariant.ml[442,14525+2]..[442,14525+14])
                      Pexp_ident "Symbol.equal" (src/invariant.ml[442,14525+2]..[442,14525+14])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[442,14525+15]..[442,14525+27])
                          Pexp_field
                          expression (src/invariant.ml[442,14525+15]..[442,14525+20])
                            Pexp_ident "cell1" (src/invariant.ml[442,14525+15]..[442,14525+20])
                          "symbol" (src/invariant.ml[442,14525+21]..[442,14525+27])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[442,14525+28]..[442,14525+40])
                          Pexp_field
                          expression (src/invariant.ml[442,14525+28]..[442,14525+33])
                            Pexp_ident "cell2" (src/invariant.ml[442,14525+28]..[442,14525+33])
                          "symbol" (src/invariant.ml[442,14525+34]..[442,14525+40])
                    ]
                <arg>
                Nolabel
                  expression (src/invariant.ml[443,14569+2]..[443,14569+39])
                    Pexp_apply
                    expression (src/invariant.ml[443,14569+20]..[443,14569+21])
                      Pexp_ident "=" (src/invariant.ml[443,14569+20]..[443,14569+21])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[443,14569+2]..[443,14569+19])
                          Pexp_field
                          expression (src/invariant.ml[443,14569+2]..[443,14569+7])
                            Pexp_ident "cell1" (src/invariant.ml[443,14569+2]..[443,14569+7])
                          "holds_state" (src/invariant.ml[443,14569+8]..[443,14569+19])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[443,14569+22]..[443,14569+39])
                          Pexp_field
                          expression (src/invariant.ml[443,14569+22]..[443,14569+27])
                            Pexp_ident "cell2" (src/invariant.ml[443,14569+22]..[443,14569+27])
                          "holds_state" (src/invariant.ml[443,14569+28]..[443,14569+39])
                    ]
              ]
    ]
  structure_item (src/invariant.ml[450,14930+0]..[451,14940+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[450,14930+4]..[450,14930+7])
          Ppat_var "pop" (src/invariant.ml[450,14930+4]..[450,14930+7])
        expression (src/invariant.ml[451,14940+2]..[451,14940+12])
          Pexp_ident "MArray.pop" (src/invariant.ml[451,14940+2]..[451,14940+12])
    ]
  structure_item (src/invariant.ml[453,14954+0]..[458,15044+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[453,14954+4]..[453,14954+12])
          Ppat_var "fold_top" (src/invariant.ml[453,14954+4]..[453,14954+12])
        expression (src/invariant.ml[453,14954+13]..[458,15044+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[453,14954+13]..[453,14954+14])
            Ppat_var "f" (src/invariant.ml[453,14954+13]..[453,14954+14])
          expression (src/invariant.ml[453,14954+15]..[458,15044+13]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/invariant.ml[453,14954+15]..[453,14954+22])
              Ppat_var "default" (src/invariant.ml[453,14954+15]..[453,14954+22])
            expression (src/invariant.ml[453,14954+23]..[458,15044+13]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/invariant.ml[453,14954+23]..[453,14954+24])
                Ppat_var "w" (src/invariant.ml[453,14954+23]..[453,14954+24])
              expression (src/invariant.ml[454,14981+2]..[458,15044+13])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/invariant.ml[454,14981+6]..[454,14981+7])
                      Ppat_var "n" (src/invariant.ml[454,14981+6]..[454,14981+7])
                    expression (src/invariant.ml[454,14981+10]..[454,14981+24])
                      Pexp_apply
                      expression (src/invariant.ml[454,14981+10]..[454,14981+22])
                        Pexp_ident "Array.length" (src/invariant.ml[454,14981+10]..[454,14981+22])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[454,14981+23]..[454,14981+24])
                            Pexp_ident "w" (src/invariant.ml[454,14981+23]..[454,14981+24])
                      ]
                ]
                expression (src/invariant.ml[455,15009+2]..[458,15044+13])
                  Pexp_ifthenelse
                  expression (src/invariant.ml[455,15009+5]..[455,15009+10])
                    Pexp_apply
                    expression (src/invariant.ml[455,15009+7]..[455,15009+8])
                      Pexp_ident "=" (src/invariant.ml[455,15009+7]..[455,15009+8])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[455,15009+5]..[455,15009+6])
                          Pexp_ident "n" (src/invariant.ml[455,15009+5]..[455,15009+6])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[455,15009+9]..[455,15009+10])
                          Pexp_constant PConst_int (0,None)
                    ]
                  expression (src/invariant.ml[456,15025+4]..[456,15025+11])
                    Pexp_ident "default" (src/invariant.ml[456,15025+4]..[456,15025+11])
                  Some
                    expression (src/invariant.ml[458,15044+4]..[458,15044+13])
                      Pexp_apply
                      expression (src/invariant.ml[458,15044+4]..[458,15044+5])
                        Pexp_ident "f" (src/invariant.ml[458,15044+4]..[458,15044+5])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[458,15044+6]..[458,15044+13])
                            Pexp_apply
                            expression (src/invariant.ml[458,15044+6]..[458,15044+13]) ghost
                              Pexp_ident "Array.get" (src/invariant.ml[458,15044+6]..[458,15044+13]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[458,15044+6]..[458,15044+7])
                                  Pexp_ident "w" (src/invariant.ml[458,15044+6]..[458,15044+7])
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[458,15044+9]..[458,15044+12])
                                  Pexp_apply
                                  expression (src/invariant.ml[458,15044+10]..[458,15044+11])
                                    Pexp_ident "-" (src/invariant.ml[458,15044+10]..[458,15044+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[458,15044+9]..[458,15044+10])
                                        Pexp_ident "n" (src/invariant.ml[458,15044+9]..[458,15044+10])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[458,15044+11]..[458,15044+12])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                            ]
                      ]
    ]
  structure_item (src/invariant.ml[464,15175+0]..[483,16055+3])
    Pstr_modtype "STACK" (src/invariant.ml[464,15175+12]..[464,15175+17])
      module_type (src/invariant.ml[464,15175+20]..[483,16055+3])
        Pmty_signature
        [
          signature_item (src/invariant.ml[467,15265+2]..[467,15265+29])
            Psig_value
            value_description "stack" (src/invariant.ml[467,15265+6]..[467,15265+11]) (src/invariant.ml[467,15265+2]..[467,15265+29])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[466,15200+2]..[466,15200+64])
                    Pstr_eval
                    expression (src/invariant.ml[466,15200+2]..[466,15200+64])
                      Pexp_constant PConst_string("[stack s] is the known suffix of the stack at state [s]. ",(src/invariant.ml[466,15200+2]..[466,15200+64]),None)
                ]
              core_type (src/invariant.ml[467,15265+13]..[467,15265+29])
                Ptyp_arrow
                Nolabel
                core_type (src/invariant.ml[467,15265+13]..[467,15265+21])
                  Ptyp_constr "Lr1.node" (src/invariant.ml[467,15265+13]..[467,15265+21])
                  []
                core_type (src/invariant.ml[467,15265+25]..[467,15265+29])
                  Ptyp_constr "word" (src/invariant.ml[467,15265+25]..[467,15265+29])
                  []
              []
          signature_item (src/invariant.ml[474,15655+2]..[474,15655+41])
            Psig_value
            value_description "prodstack" (src/invariant.ml[474,15655+6]..[474,15655+15]) (src/invariant.ml[474,15655+2]..[474,15655+41])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[469,15296+2]..[473,15589+65])
                    Pstr_eval
                    expression (src/invariant.ml[469,15296+2]..[473,15589+65])
                      Pexp_constant PConst_string("[prodstack prod] is the known suffix of the stack at a state where\n     production [prod] can be reduced. In the short invariant, the length of\n     this suffix is [Production.length prod]. In the long invariant, its\n     length can be greater. If there are no states where [prod] can be\n     reduced, then every cell contains an empty set of states. ",(src/invariant.ml[469,15296+2]..[473,15589+65]),None)
                ]
              core_type (src/invariant.ml[474,15655+17]..[474,15655+41])
                Ptyp_arrow
                Nolabel
                core_type (src/invariant.ml[474,15655+17]..[474,15655+33])
                  Ptyp_constr "Production.index" (src/invariant.ml[474,15655+17]..[474,15655+33])
                  []
                core_type (src/invariant.ml[474,15655+37]..[474,15655+41])
                  Ptyp_constr "word" (src/invariant.ml[474,15655+37]..[474,15655+41])
                  []
              []
          signature_item (src/invariant.ml[481,16015+2]..[481,16015+38])
            Psig_value
            value_description "gotostack" (src/invariant.ml[481,16015+6]..[481,16015+15]) (src/invariant.ml[481,16015+2]..[481,16015+38])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[476,15698+2]..[480,15995+19])
                    Pstr_eval
                    expression (src/invariant.ml[476,15698+2]..[480,15995+19])
                      Pexp_constant PConst_string("[gotostack nt] is the known suffix of the stack at a state where an\n     edge labeled [nt] has just been followed. In the short invariant, the\n     length of this suffix is [1]: indeed, it consists of just one cell,\n     associated with the symbol [nt]. In the long invariant, its length can\n     be greater. ",(src/invariant.ml[476,15698+2]..[480,15995+19]),None)
                ]
              core_type (src/invariant.ml[481,16015+17]..[481,16015+38])
                Ptyp_arrow
                Nolabel
                core_type (src/invariant.ml[481,16015+17]..[481,16015+30])
                  Ptyp_constr "Nonterminal.t" (src/invariant.ml[481,16015+17]..[481,16015+30])
                  []
                core_type (src/invariant.ml[481,16015+34]..[481,16015+38])
                  Ptyp_constr "word" (src/invariant.ml[481,16015+34]..[481,16015+38])
                  []
              []
        ]
  structure_item (src/invariant.ml[491,16414+0]..[502,16955+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[491,16414+4]..[491,16414+11])
          Ppat_var "publish" (src/invariant.ml[491,16414+4]..[491,16414+11])
        expression (src/invariant.ml[491,16414+12]..[502,16955+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[491,16414+12]..[491,16414+20])
            Ppat_var "tabulate" (src/invariant.ml[491,16414+12]..[491,16414+20])
          expression (src/invariant.ml[491,16414+21]..[502,16955+3]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/invariant.ml[491,16414+21]..[491,16414+24])
              Ppat_var "foo" (src/invariant.ml[491,16414+21]..[491,16414+24])
            expression (src/invariant.ml[491,16414+25]..[502,16955+3]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/invariant.ml[491,16414+25]..[491,16414+28])
                Ppat_var "bar" (src/invariant.ml[491,16414+25]..[491,16414+28])
              expression (src/invariant.ml[491,16414+29]..[502,16955+3]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/invariant.ml[491,16414+29]..[491,16414+33])
                  Ppat_var "cell" (src/invariant.ml[491,16414+29]..[491,16414+33])
                expression (src/invariant.ml[492,16450+2]..[502,16955+3])
                  Pexp_apply
                  expression (src/invariant.ml[492,16450+2]..[492,16450+10])
                    Pexp_ident "tabulate" (src/invariant.ml[492,16450+2]..[492,16450+10])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[492,16450+11]..[502,16955+3])
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/invariant.ml[492,16450+16]..[492,16450+21])
                          Ppat_var "thing" (src/invariant.ml[492,16450+16]..[492,16450+21])
                        expression (src/invariant.ml[493,16475+4]..[501,16904+50])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/invariant.ml[493,16475+8]..[493,16475+18])
                                Ppat_tuple
                                [
                                  pattern (src/invariant.ml[493,16475+8]..[493,16475+12])
                                    Ppat_var "foos" (src/invariant.ml[493,16475+8]..[493,16475+12])
                                  pattern (src/invariant.ml[493,16475+14]..[493,16475+18])
                                    Ppat_var "bars" (src/invariant.ml[493,16475+14]..[493,16475+18])
                                ]
                              expression (src/invariant.ml[493,16475+21]..[493,16475+41])
                                Pexp_tuple
                                [
                                  expression (src/invariant.ml[493,16475+21]..[493,16475+30])
                                    Pexp_apply
                                    expression (src/invariant.ml[493,16475+21]..[493,16475+24])
                                      Pexp_ident "foo" (src/invariant.ml[493,16475+21]..[493,16475+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[493,16475+25]..[493,16475+30])
                                          Pexp_ident "thing" (src/invariant.ml[493,16475+25]..[493,16475+30])
                                    ]
                                  expression (src/invariant.ml[493,16475+32]..[493,16475+41])
                                    Pexp_apply
                                    expression (src/invariant.ml[493,16475+32]..[493,16475+35])
                                      Pexp_ident "bar" (src/invariant.ml[493,16475+32]..[493,16475+35])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[493,16475+36]..[493,16475+41])
                                          Pexp_ident "thing" (src/invariant.ml[493,16475+36]..[493,16475+41])
                                    ]
                                ]
                          ]
                          expression (src/invariant.ml[494,16520+4]..[501,16904+50])
                            Pexp_sequence
                            expression (src/invariant.ml[494,16520+4]..[494,16520+51])
                              Pexp_assert
                              expression (src/invariant.ml[494,16520+11]..[494,16520+51])
                                Pexp_apply
                                expression (src/invariant.ml[494,16520+30]..[494,16520+32])
                                  Pexp_ident ">=" (src/invariant.ml[494,16520+30]..[494,16520+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[494,16520+12]..[494,16520+29])
                                      Pexp_apply
                                      expression (src/invariant.ml[494,16520+12]..[494,16520+24])
                                        Pexp_ident "Array.length" (src/invariant.ml[494,16520+12]..[494,16520+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[494,16520+25]..[494,16520+29])
                                            Pexp_ident "foos" (src/invariant.ml[494,16520+25]..[494,16520+29])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[494,16520+33]..[494,16520+50])
                                      Pexp_apply
                                      expression (src/invariant.ml[494,16520+33]..[494,16520+45])
                                        Pexp_ident "Array.length" (src/invariant.ml[494,16520+33]..[494,16520+45])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[494,16520+46]..[494,16520+50])
                                            Pexp_ident "bars" (src/invariant.ml[494,16520+46]..[494,16520+50])
                                      ]
                                ]
                            expression (src/invariant.ml[499,16830+4]..[501,16904+50])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/invariant.ml[499,16830+8]..[499,16830+9])
                                    Ppat_var "k" (src/invariant.ml[499,16830+8]..[499,16830+9])
                                  expression (src/invariant.ml[499,16830+12]..[499,16830+29])
                                    Pexp_apply
                                    expression (src/invariant.ml[499,16830+12]..[499,16830+24])
                                      Pexp_ident "Array.length" (src/invariant.ml[499,16830+12]..[499,16830+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[499,16830+25]..[499,16830+29])
                                          Pexp_ident "bars" (src/invariant.ml[499,16830+25]..[499,16830+29])
                                    ]
                              ]
                              expression (src/invariant.ml[500,16863+4]..[501,16904+50])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/invariant.ml[500,16863+8]..[500,16863+12])
                                      Ppat_var "foos" (src/invariant.ml[500,16863+8]..[500,16863+12])
                                    expression (src/invariant.ml[500,16863+15]..[500,16863+37])
                                      Pexp_apply
                                      expression (src/invariant.ml[500,16863+15]..[500,16863+30])
                                        Pexp_ident "MArray.truncate" (src/invariant.ml[500,16863+15]..[500,16863+30])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[500,16863+31]..[500,16863+32])
                                            Pexp_ident "k" (src/invariant.ml[500,16863+31]..[500,16863+32])
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[500,16863+33]..[500,16863+37])
                                            Pexp_ident "foos" (src/invariant.ml[500,16863+33]..[500,16863+37])
                                      ]
                                ]
                                expression (src/invariant.ml[501,16904+4]..[501,16904+50])
                                  Pexp_apply
                                  expression (src/invariant.ml[501,16904+4]..[501,16904+14])
                                    Pexp_ident "Array.init" (src/invariant.ml[501,16904+4]..[501,16904+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[501,16904+15]..[501,16904+16])
                                        Pexp_ident "k" (src/invariant.ml[501,16904+15]..[501,16904+16])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[501,16904+17]..[501,16904+50])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/invariant.ml[501,16904+22]..[501,16904+23])
                                          Ppat_var "i" (src/invariant.ml[501,16904+22]..[501,16904+23])
                                        expression (src/invariant.ml[501,16904+27]..[501,16904+49])
                                          Pexp_apply
                                          expression (src/invariant.ml[501,16904+27]..[501,16904+31])
                                            Pexp_ident "cell" (src/invariant.ml[501,16904+27]..[501,16904+31])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[501,16904+32]..[501,16904+40])
                                                Pexp_apply
                                                expression (src/invariant.ml[501,16904+32]..[501,16904+40]) ghost
                                                  Pexp_ident "Array.get" (src/invariant.ml[501,16904+32]..[501,16904+40]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[501,16904+32]..[501,16904+36])
                                                      Pexp_ident "foos" (src/invariant.ml[501,16904+32]..[501,16904+36])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[501,16904+38]..[501,16904+39])
                                                      Pexp_ident "i" (src/invariant.ml[501,16904+38]..[501,16904+39])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[501,16904+41]..[501,16904+49])
                                                Pexp_apply
                                                expression (src/invariant.ml[501,16904+41]..[501,16904+49]) ghost
                                                  Pexp_ident "Array.get" (src/invariant.ml[501,16904+41]..[501,16904+49]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[501,16904+41]..[501,16904+45])
                                                      Pexp_ident "bars" (src/invariant.ml[501,16904+41]..[501,16904+45])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[501,16904+47]..[501,16904+48])
                                                      Pexp_ident "i" (src/invariant.ml[501,16904+47]..[501,16904+48])
                                                ]
                                          ]
                                  ]
                  ]
    ]
  structure_item (src/invariant.ml[504,16960+0]..[505,16991+54])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[504,16960+4]..[504,16960+9])
          Ppat_var "stack" (src/invariant.ml[504,16960+4]..[504,16960+9])
        core_type (src/invariant.ml[504,16960+12]..[504,16960+28])
          Ptyp_arrow
          Nolabel
          core_type (src/invariant.ml[504,16960+12]..[504,16960+20])
            Ptyp_constr "Lr1.node" (src/invariant.ml[504,16960+12]..[504,16960+20])
            []
          core_type (src/invariant.ml[504,16960+24]..[504,16960+28])
            Ptyp_constr "word" (src/invariant.ml[504,16960+24]..[504,16960+28])
            []
        expression (src/invariant.ml[505,16991+2]..[505,16991+54])
          Pexp_apply
          expression (src/invariant.ml[505,16991+2]..[505,16991+9])
            Pexp_ident "publish" (src/invariant.ml[505,16991+2]..[505,16991+9])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[505,16991+10]..[505,16991+22])
                Pexp_ident "Lr1.tabulate" (src/invariant.ml[505,16991+10]..[505,16991+22])
            <arg>
            Nolabel
              expression (src/invariant.ml[505,16991+23]..[505,16991+36])
                Pexp_ident "stack_symbols" (src/invariant.ml[505,16991+23]..[505,16991+36])
            <arg>
            Nolabel
              expression (src/invariant.ml[505,16991+37]..[505,16991+49])
                Pexp_ident "stack_states" (src/invariant.ml[505,16991+37]..[505,16991+49])
            <arg>
            Nolabel
              expression (src/invariant.ml[505,16991+50]..[505,16991+54])
                Pexp_ident "cell" (src/invariant.ml[505,16991+50]..[505,16991+54])
          ]
    ]
  structure_item (src/invariant.ml[507,17047+0]..[508,17090+71])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[507,17047+4]..[507,17047+13])
          Ppat_var "prodstack" (src/invariant.ml[507,17047+4]..[507,17047+13])
        core_type (src/invariant.ml[507,17047+16]..[507,17047+40])
          Ptyp_arrow
          Nolabel
          core_type (src/invariant.ml[507,17047+16]..[507,17047+32])
            Ptyp_constr "Production.index" (src/invariant.ml[507,17047+16]..[507,17047+32])
            []
          core_type (src/invariant.ml[507,17047+36]..[507,17047+40])
            Ptyp_constr "word" (src/invariant.ml[507,17047+36]..[507,17047+40])
            []
        expression (src/invariant.ml[508,17090+2]..[508,17090+71])
          Pexp_apply
          expression (src/invariant.ml[508,17090+2]..[508,17090+9])
            Pexp_ident "publish" (src/invariant.ml[508,17090+2]..[508,17090+9])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[508,17090+10]..[508,17090+29])
                Pexp_ident "Production.tabulate" (src/invariant.ml[508,17090+10]..[508,17090+29])
            <arg>
            Nolabel
              expression (src/invariant.ml[508,17090+30]..[508,17090+48])
                Pexp_ident "production_symbols" (src/invariant.ml[508,17090+30]..[508,17090+48])
            <arg>
            Nolabel
              expression (src/invariant.ml[508,17090+49]..[508,17090+66])
                Pexp_ident "production_states" (src/invariant.ml[508,17090+49]..[508,17090+66])
            <arg>
            Nolabel
              expression (src/invariant.ml[508,17090+67]..[508,17090+71])
                Pexp_ident "cell" (src/invariant.ml[508,17090+67]..[508,17090+71])
          ]
    ]
  structure_item (src/invariant.ml[510,17163+0]..[511,17203+60])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[510,17163+4]..[510,17163+13])
          Ppat_var "gotostack" (src/invariant.ml[510,17163+4]..[510,17163+13])
        core_type (src/invariant.ml[510,17163+16]..[510,17163+37])
          Ptyp_arrow
          Nolabel
          core_type (src/invariant.ml[510,17163+16]..[510,17163+29])
            Ptyp_constr "Nonterminal.t" (src/invariant.ml[510,17163+16]..[510,17163+29])
            []
          core_type (src/invariant.ml[510,17163+33]..[510,17163+37])
            Ptyp_constr "word" (src/invariant.ml[510,17163+33]..[510,17163+37])
            []
        expression (src/invariant.ml[511,17203+2]..[511,17203+60])
          Pexp_apply
          expression (src/invariant.ml[511,17203+2]..[511,17203+9])
            Pexp_ident "publish" (src/invariant.ml[511,17203+2]..[511,17203+9])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[511,17203+10]..[511,17203+30])
                Pexp_ident "Nonterminal.tabulate" (src/invariant.ml[511,17203+10]..[511,17203+30])
            <arg>
            Nolabel
              expression (src/invariant.ml[511,17203+31]..[511,17203+43])
                Pexp_ident "goto_symbols" (src/invariant.ml[511,17203+31]..[511,17203+43])
            <arg>
            Nolabel
              expression (src/invariant.ml[511,17203+44]..[511,17203+55])
                Pexp_ident "goto_states" (src/invariant.ml[511,17203+44]..[511,17203+55])
            <arg>
            Nolabel
              expression (src/invariant.ml[511,17203+56]..[511,17203+60])
                Pexp_ident "cell" (src/invariant.ml[511,17203+56]..[511,17203+60])
          ]
    ]
  structure_item (src/invariant.ml[524,17929+0]..[526,17958+29])
    Pstr_type Rec
    [
      type_declaration "state" (src/invariant.ml[524,17929+5]..[524,17929+10]) (src/invariant.ml[524,17929+0]..[526,17958+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/invariant.ml[525,17942+2]..[525,17942+15])
                "Represented" (src/invariant.ml[525,17942+4]..[525,17942+15])
                []
                None
              (src/invariant.ml[526,17958+2]..[526,17958+29])
                "UnRepresented" (src/invariant.ml[526,17958+4]..[526,17958+17])
                [
                  core_type (src/invariant.ml[526,17958+21]..[526,17958+29])
                    Ptyp_constr "Lr1.node" (src/invariant.ml[526,17958+21]..[526,17958+29])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[528,17989+0]..[530,18016+26])
    Pstr_type Rec
    [
      type_declaration "instruction" (src/invariant.ml[528,17989+5]..[528,17989+16]) (src/invariant.ml[528,17989+0]..[530,18016+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (src/invariant.ml[529,18008+2]..[529,18008+7])
                "Die" (src/invariant.ml[529,18008+4]..[529,18008+7])
                []
                None
              (src/invariant.ml[530,18016+2]..[530,18016+26])
                "DownTo" (src/invariant.ml[530,18016+4]..[530,18016+10])
                [
                  core_type (src/invariant.ml[530,18016+14]..[530,18016+18])
                    Ptyp_constr "word" (src/invariant.ml[530,18016+14]..[530,18016+18])
                    []
                  core_type (src/invariant.ml[530,18016+21]..[530,18016+26])
                    Ptyp_constr "state" (src/invariant.ml[530,18016+21]..[530,18016+26])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[532,18044+0]..[580,19364+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[532,18044+4]..[532,18044+10])
          Ppat_var "rewind" (src/invariant.ml[532,18044+4]..[532,18044+10])
        expression (src/invariant.ml[532,18044+11]..[580,19364+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[532,18044+11]..[532,18044+15])
            Ppat_var "node" (src/invariant.ml[532,18044+11]..[532,18044+15])
          expression (src/invariant.ml[532,18044+16]..[580,19364+10])
            Pexp_constraint
            expression (src/invariant.ml[533,18076+2]..[580,19364+10])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/invariant.ml[533,18076+6]..[533,18076+7])
                    Ppat_var "w" (src/invariant.ml[533,18076+6]..[533,18076+7])
                  expression (src/invariant.ml[533,18076+10]..[533,18076+20])
                    Pexp_apply
                    expression (src/invariant.ml[533,18076+10]..[533,18076+15])
                      Pexp_ident "stack" (src/invariant.ml[533,18076+10]..[533,18076+15])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[533,18076+16]..[533,18076+20])
                          Pexp_ident "node" (src/invariant.ml[533,18076+16]..[533,18076+20])
                    ]
              ]
              expression (src/invariant.ml[535,18101+2]..[580,19364+10])
                Pexp_let Rec
                [
                  <def>
                    pattern (src/invariant.ml[535,18101+10]..[535,18101+16])
                      Ppat_var "rewind" (src/invariant.ml[535,18101+10]..[535,18101+16])
                    expression (src/invariant.ml[535,18101+17]..[577,19314+43]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[535,18101+17]..[535,18101+18])
                        Ppat_var "w" (src/invariant.ml[535,18101+17]..[535,18101+18])
                      expression (src/invariant.ml[536,18122+4]..[577,19314+43])
                        Pexp_ifthenelse
                        expression (src/invariant.ml[536,18122+7]..[536,18122+25])
                          Pexp_apply
                          expression (src/invariant.ml[536,18122+22]..[536,18122+23])
                            Pexp_ident "=" (src/invariant.ml[536,18122+22]..[536,18122+23])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[536,18122+7]..[536,18122+21])
                                Pexp_apply
                                expression (src/invariant.ml[536,18122+7]..[536,18122+19])
                                  Pexp_ident "Array.length" (src/invariant.ml[536,18122+7]..[536,18122+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[536,18122+20]..[536,18122+21])
                                      Pexp_ident "w" (src/invariant.ml[536,18122+20]..[536,18122+21])
                                ]
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[536,18122+24]..[536,18122+25])
                                Pexp_constant PConst_int (0,None)
                          ]
                        expression (src/invariant.ml[543,18407+6]..[543,18407+9])
                          Pexp_construct "Die" (src/invariant.ml[543,18407+6]..[543,18407+9])
                          None
                        Some
                          expression (src/invariant.ml[546,18427+6]..[577,19314+43])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/invariant.ml[546,18427+10]..[546,18427+31])
                                  Ppat_alias "cell" (src/invariant.ml[546,18427+27]..[546,18427+31])
                                  pattern (src/invariant.ml[546,18427+10]..[546,18427+23])
                                    Ppat_record Open
                                    [
                                      "states" (src/invariant.ml[546,18427+12]..[546,18427+18]) ghost
                                        pattern (src/invariant.ml[546,18427+12]..[546,18427+18])
                                          Ppat_var "states" (src/invariant.ml[546,18427+12]..[546,18427+18])
                                    ]
                                expression (src/invariant.ml[546,18427+34]..[546,18427+47])
                                  Pexp_apply
                                  expression (src/invariant.ml[546,18427+34]..[546,18427+45])
                                    Pexp_ident "MArray.last" (src/invariant.ml[546,18427+34]..[546,18427+45])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[546,18427+46]..[546,18427+47])
                                        Pexp_ident "w" (src/invariant.ml[546,18427+46]..[546,18427+47])
                                  ]
                            ]
                            expression (src/invariant.ml[547,18478+6]..[577,19314+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/invariant.ml[547,18478+10]..[547,18478+11])
                                    Ppat_var "w" (src/invariant.ml[547,18478+10]..[547,18478+11])
                                  expression (src/invariant.ml[547,18478+14]..[547,18478+26])
                                    Pexp_apply
                                    expression (src/invariant.ml[547,18478+14]..[547,18478+24])
                                      Pexp_ident "MArray.pop" (src/invariant.ml[547,18478+14]..[547,18478+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[547,18478+25]..[547,18478+26])
                                          Pexp_ident "w" (src/invariant.ml[547,18478+25]..[547,18478+26])
                                    ]
                              ]
                              expression (src/invariant.ml[549,18509+6]..[577,19314+43])
                                Pexp_ifthenelse
                                expression (src/invariant.ml[549,18509+9]..[549,18509+28])
                                  Pexp_apply
                                  expression (src/invariant.ml[549,18509+9]..[549,18509+21])
                                    Pexp_ident "representeds" (src/invariant.ml[549,18509+9]..[549,18509+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[549,18509+22]..[549,18509+28])
                                        Pexp_ident "states" (src/invariant.ml[549,18509+22]..[549,18509+28])
                                  ]
                                expression (src/invariant.ml[554,18634+8]..[554,18634+40])
                                  Pexp_construct "DownTo" (src/invariant.ml[554,18634+8]..[554,18634+14])
                                  Some
                                    expression (src/invariant.ml[554,18634+15]..[554,18634+40])
                                      Pexp_tuple
                                      [
                                        expression (src/invariant.ml[554,18634+16]..[554,18634+26])
                                          Pexp_array
                                          [
                                            expression (src/invariant.ml[554,18634+19]..[554,18634+23])
                                              Pexp_ident "cell" (src/invariant.ml[554,18634+19]..[554,18634+23])
                                          ]
                                        expression (src/invariant.ml[554,18634+28]..[554,18634+39])
                                          Pexp_construct "Represented" (src/invariant.ml[554,18634+28]..[554,18634+39])
                                          None
                                      ]
                                Some
                                  expression (src/invariant.ml[556,18676+11]..[577,19314+43])
                                    Pexp_ifthenelse
                                    expression (src/invariant.ml[556,18676+14]..[556,18676+29])
                                      Pexp_apply
                                      expression (src/invariant.ml[556,18676+14]..[556,18676+22])
                                        Pexp_ident "handlers" (src/invariant.ml[556,18676+14]..[556,18676+22])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[556,18676+23]..[556,18676+29])
                                            Pexp_ident "states" (src/invariant.ml[556,18676+23]..[556,18676+29])
                                      ]
                                    expression (src/invariant.ml[556,18676+35]..[567,19085+9])
                                      Pexp_sequence
                                      expression (src/invariant.ml[563,18936+8]..[563,18936+48])
                                        Pexp_assert
                                        expression (src/invariant.ml[563,18936+15]..[563,18936+48])
                                          Pexp_apply
                                          expression (src/invariant.ml[563,18936+44]..[563,18936+45])
                                            Pexp_ident "=" (src/invariant.ml[563,18936+44]..[563,18936+45])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[563,18936+16]..[563,18936+43])
                                                Pexp_apply
                                                expression (src/invariant.ml[563,18936+16]..[563,18936+36])
                                                  Pexp_ident "Lr1.NodeSet.cardinal" (src/invariant.ml[563,18936+16]..[563,18936+36])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[563,18936+37]..[563,18936+43])
                                                      Pexp_ident "states" (src/invariant.ml[563,18936+37]..[563,18936+43])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[563,18936+46]..[563,18936+47])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                      expression (src/invariant.ml[564,18986+8]..[565,19035+48])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/invariant.ml[564,18986+12]..[564,18986+17])
                                              Ppat_var "state" (src/invariant.ml[564,18986+12]..[564,18986+17])
                                            expression (src/invariant.ml[564,18986+20]..[564,18986+45])
                                              Pexp_apply
                                              expression (src/invariant.ml[564,18986+20]..[564,18986+38])
                                                Pexp_ident "Lr1.NodeSet.choose" (src/invariant.ml[564,18986+20]..[564,18986+38])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/invariant.ml[564,18986+39]..[564,18986+45])
                                                    Pexp_ident "states" (src/invariant.ml[564,18986+39]..[564,18986+45])
                                              ]
                                        ]
                                        expression (src/invariant.ml[565,19035+8]..[565,19035+48])
                                          Pexp_construct "DownTo" (src/invariant.ml[565,19035+8]..[565,19035+14])
                                          Some
                                            expression (src/invariant.ml[565,19035+15]..[565,19035+48])
                                              Pexp_tuple
                                              [
                                                expression (src/invariant.ml[565,19035+16]..[565,19035+26])
                                                  Pexp_array
                                                  [
                                                    expression (src/invariant.ml[565,19035+19]..[565,19035+23])
                                                      Pexp_ident "cell" (src/invariant.ml[565,19035+19]..[565,19035+23])
                                                  ]
                                                expression (src/invariant.ml[565,19035+28]..[565,19035+47])
                                                  Pexp_construct "UnRepresented" (src/invariant.ml[565,19035+28]..[565,19035+41])
                                                  Some
                                                    expression (src/invariant.ml[565,19035+42]..[565,19035+47])
                                                      Pexp_ident "state" (src/invariant.ml[565,19035+42]..[565,19035+47])
                                              ]
                                    Some
                                      expression (src/invariant.ml[573,19225+8]..[577,19314+43])
                                        Pexp_match
                                        expression (src/invariant.ml[573,19225+14]..[573,19225+22])
                                          Pexp_apply
                                          expression (src/invariant.ml[573,19225+14]..[573,19225+20])
                                            Pexp_ident "rewind" (src/invariant.ml[573,19225+14]..[573,19225+20])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[573,19225+21]..[573,19225+22])
                                                Pexp_ident "w" (src/invariant.ml[573,19225+21]..[573,19225+22])
                                          ]
                                        [
                                          <case>
                                            pattern (src/invariant.ml[574,19253+10]..[574,19253+13])
                                              Ppat_construct "Die" (src/invariant.ml[574,19253+10]..[574,19253+13])
                                              None
                                            expression (src/invariant.ml[575,19270+12]..[575,19270+15])
                                              Pexp_construct "Die" (src/invariant.ml[575,19270+12]..[575,19270+15])
                                              None
                                          <case>
                                            pattern (src/invariant.ml[576,19286+10]..[576,19286+24])
                                              Ppat_construct "DownTo" (src/invariant.ml[576,19286+10]..[576,19286+16])
                                              Some
                                                []
                                                pattern (src/invariant.ml[576,19286+17]..[576,19286+24])
                                                  Ppat_tuple
                                                  [
                                                    pattern (src/invariant.ml[576,19286+18]..[576,19286+19])
                                                      Ppat_var "w" (src/invariant.ml[576,19286+18]..[576,19286+19])
                                                    pattern (src/invariant.ml[576,19286+21]..[576,19286+23])
                                                      Ppat_var "st" (src/invariant.ml[576,19286+21]..[576,19286+23])
                                                  ]
                                            expression (src/invariant.ml[577,19314+12]..[577,19314+43])
                                              Pexp_construct "DownTo" (src/invariant.ml[577,19314+12]..[577,19314+18])
                                              Some
                                                expression (src/invariant.ml[577,19314+19]..[577,19314+43])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/invariant.ml[577,19314+20]..[577,19314+38])
                                                      Pexp_apply
                                                      expression (src/invariant.ml[577,19314+20]..[577,19314+31])
                                                        Pexp_ident "MArray.push" (src/invariant.ml[577,19314+20]..[577,19314+31])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/invariant.ml[577,19314+32]..[577,19314+33])
                                                            Pexp_ident "w" (src/invariant.ml[577,19314+32]..[577,19314+33])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/invariant.ml[577,19314+34]..[577,19314+38])
                                                            Pexp_ident "cell" (src/invariant.ml[577,19314+34]..[577,19314+38])
                                                      ]
                                                    expression (src/invariant.ml[577,19314+40]..[577,19314+42])
                                                      Pexp_ident "st" (src/invariant.ml[577,19314+40]..[577,19314+42])
                                                  ]
                                        ]
                ]
                expression (src/invariant.ml[580,19364+2]..[580,19364+10])
                  Pexp_apply
                  expression (src/invariant.ml[580,19364+2]..[580,19364+8])
                    Pexp_ident "rewind" (src/invariant.ml[580,19364+2]..[580,19364+8])
                  [
                    <arg>
                    Nolabel
                      expression (src/invariant.ml[580,19364+9]..[580,19364+10])
                        Pexp_ident "w" (src/invariant.ml[580,19364+9]..[580,19364+10])
                  ]
            core_type (src/invariant.ml[532,18044+18]..[532,18044+29])
              Ptyp_constr "instruction" (src/invariant.ml[532,18044+18]..[532,18044+29])
              []
    ]
  structure_item (src/invariant.ml[585,19478+0]..[588,19624+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[585,19478+4]..[585,19478+13])
          Ppat_var "universal" (src/invariant.ml[585,19478+4]..[585,19478+13])
        expression (src/invariant.ml[585,19478+14]..[588,19624+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[585,19478+14]..[585,19478+20])
            Ppat_var "symbol" (src/invariant.ml[585,19478+14]..[585,19478+20])
          expression (src/invariant.ml[586,19501+2]..[588,19624+8])
            Pexp_apply
            expression (src/invariant.ml[586,19501+2]..[586,19501+10])
              Pexp_ident "Lr1.fold" (src/invariant.ml[586,19501+2]..[586,19501+10])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[586,19501+11]..[588,19624+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[586,19501+16]..[586,19501+25])
                    Ppat_var "universal" (src/invariant.ml[586,19501+16]..[586,19501+25])
                  expression (src/invariant.ml[586,19501+26]..[587,19532+91]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[586,19501+26]..[586,19501+27])
                      Ppat_var "s" (src/invariant.ml[586,19501+26]..[586,19501+27])
                    expression (src/invariant.ml[587,19532+4]..[587,19532+91])
                      Pexp_apply
                      expression (src/invariant.ml[587,19532+14]..[587,19532+16])
                        Pexp_ident "&&" (src/invariant.ml[587,19532+14]..[587,19532+16])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[587,19532+4]..[587,19532+13])
                            Pexp_ident "universal" (src/invariant.ml[587,19532+4]..[587,19532+13])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[587,19532+17]..[587,19532+91])
                            Pexp_ifthenelse
                            expression (src/invariant.ml[587,19532+21]..[587,19532+34])
                              Pexp_apply
                              expression (src/invariant.ml[587,19532+21]..[587,19532+32])
                                Pexp_ident "represented" (src/invariant.ml[587,19532+21]..[587,19532+32])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[587,19532+33]..[587,19532+34])
                                    Pexp_ident "s" (src/invariant.ml[587,19532+33]..[587,19532+34])
                              ]
                            expression (src/invariant.ml[587,19532+40]..[587,19532+80])
                              Pexp_apply
                              expression (src/invariant.ml[587,19532+40]..[587,19532+53])
                                Pexp_ident "SymbolMap.mem" (src/invariant.ml[587,19532+40]..[587,19532+53])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[587,19532+54]..[587,19532+60])
                                    Pexp_ident "symbol" (src/invariant.ml[587,19532+54]..[587,19532+60])
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[587,19532+61]..[587,19532+80])
                                    Pexp_apply
                                    expression (src/invariant.ml[587,19532+62]..[587,19532+77])
                                      Pexp_ident "Lr1.transitions" (src/invariant.ml[587,19532+62]..[587,19532+77])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[587,19532+78]..[587,19532+79])
                                          Pexp_ident "s" (src/invariant.ml[587,19532+78]..[587,19532+79])
                                    ]
                              ]
                            Some
                              expression (src/invariant.ml[587,19532+86]..[587,19532+90])
                                Pexp_construct "true" (src/invariant.ml[587,19532+86]..[587,19532+90])
                                None
                      ]
              <arg>
              Nolabel
                expression (src/invariant.ml[588,19624+4]..[588,19624+8])
                  Pexp_construct "true" (src/invariant.ml[588,19624+4]..[588,19624+8])
                  None
            ]
    ]
  structure_item (src/invariant.ml[606,20650+0]..[623,21258+25])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[606,20650+4]..[606,20650+16])
          Ppat_var "errorpeekers" (src/invariant.ml[606,20650+4]..[606,20650+16])
        expression (src/invariant.ml[608,20716+2]..[623,21258+25])
          Pexp_let Nonrec
          [
            <def>
              pattern (src/invariant.ml[608,20716+6]..[608,20716+9])
                Ppat_var "nts" (src/invariant.ml[608,20716+6]..[608,20716+9])
              core_type (src/invariant.ml[608,20716+12]..[608,20716+23])
                Ptyp_constr "SymbolSet.t" (src/invariant.ml[608,20716+12]..[608,20716+23])
                []
              expression (src/invariant.ml[609,20742+4]..[617,21016+21])
                Pexp_apply
                expression (src/invariant.ml[609,20742+4]..[609,20742+12])
                  Pexp_ident "Lr1.fold" (src/invariant.ml[609,20742+4]..[609,20742+12])
                [
                  <arg>
                  Nolabel
                    expression (src/invariant.ml[609,20742+13]..[617,21016+5])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[609,20742+18]..[609,20742+21])
                        Ppat_var "nts" (src/invariant.ml[609,20742+18]..[609,20742+21])
                      expression (src/invariant.ml[609,20742+22]..[616,21004+11]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/invariant.ml[609,20742+22]..[609,20742+26])
                          Ppat_var "node" (src/invariant.ml[609,20742+22]..[609,20742+26])
                        expression (src/invariant.ml[610,20772+6]..[616,21004+11])
                          Pexp_try
                          expression (src/invariant.ml[611,20782+8]..[614,20940+39])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/invariant.ml[611,20782+12]..[611,20782+17])
                                  Ppat_var "prods" (src/invariant.ml[611,20782+12]..[611,20782+17])
                                expression (src/invariant.ml[611,20782+20]..[611,20782+75])
                                  Pexp_apply
                                  expression (src/invariant.ml[611,20782+20]..[611,20782+38])
                                    Pexp_ident "TerminalMap.lookup" (src/invariant.ml[611,20782+20]..[611,20782+38])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[611,20782+39]..[611,20782+53])
                                        Pexp_ident "Terminal.error" (src/invariant.ml[611,20782+39]..[611,20782+53])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[611,20782+54]..[611,20782+75])
                                        Pexp_apply
                                        expression (src/invariant.ml[611,20782+55]..[611,20782+69])
                                          Pexp_ident "Lr1.reductions" (src/invariant.ml[611,20782+55]..[611,20782+69])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/invariant.ml[611,20782+70]..[611,20782+74])
                                              Pexp_ident "node" (src/invariant.ml[611,20782+70]..[611,20782+74])
                                        ]
                                  ]
                            ]
                            expression (src/invariant.ml[612,20861+8]..[614,20940+39])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/invariant.ml[612,20861+12]..[612,20861+16])
                                    Ppat_var "prod" (src/invariant.ml[612,20861+12]..[612,20861+16])
                                  expression (src/invariant.ml[612,20861+19]..[612,20861+36])
                                    Pexp_apply
                                    expression (src/invariant.ml[612,20861+19]..[612,20861+30])
                                      Pexp_ident "Misc.single" (src/invariant.ml[612,20861+19]..[612,20861+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[612,20861+31]..[612,20861+36])
                                          Pexp_ident "prods" (src/invariant.ml[612,20861+31]..[612,20861+36])
                                    ]
                              ]
                              expression (src/invariant.ml[613,20901+8]..[614,20940+39])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/invariant.ml[613,20901+12]..[613,20901+14])
                                      Ppat_var "nt" (src/invariant.ml[613,20901+12]..[613,20901+14])
                                    expression (src/invariant.ml[613,20901+17]..[613,20901+35])
                                      Pexp_apply
                                      expression (src/invariant.ml[613,20901+17]..[613,20901+30])
                                        Pexp_ident "Production.nt" (src/invariant.ml[613,20901+17]..[613,20901+30])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[613,20901+31]..[613,20901+35])
                                            Pexp_ident "prod" (src/invariant.ml[613,20901+31]..[613,20901+35])
                                      ]
                                ]
                                expression (src/invariant.ml[614,20940+8]..[614,20940+39])
                                  Pexp_apply
                                  expression (src/invariant.ml[614,20940+8]..[614,20940+21])
                                    Pexp_ident "SymbolSet.add" (src/invariant.ml[614,20940+8]..[614,20940+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[614,20940+22]..[614,20940+35])
                                        Pexp_construct "Symbol.N" (src/invariant.ml[614,20940+23]..[614,20940+31])
                                        Some
                                          expression (src/invariant.ml[614,20940+32]..[614,20940+34])
                                            Pexp_ident "nt" (src/invariant.ml[614,20940+32]..[614,20940+34])
                                    <arg>
                                    Nolabel
                                      expression (src/invariant.ml[614,20940+36]..[614,20940+39])
                                        Pexp_ident "nts" (src/invariant.ml[614,20940+36]..[614,20940+39])
                                  ]
                          [
                            <case>
                              pattern (src/invariant.ml[615,20980+11]..[615,20980+20])
                                Ppat_construct "Not_found" (src/invariant.ml[615,20980+11]..[615,20980+20])
                                None
                              expression (src/invariant.ml[616,21004+8]..[616,21004+11])
                                Pexp_ident "nts" (src/invariant.ml[616,21004+8]..[616,21004+11])
                          ]
                  <arg>
                  Nolabel
                    expression (src/invariant.ml[617,21016+6]..[617,21016+21])
                      Pexp_ident "SymbolSet.empty" (src/invariant.ml[617,21016+6]..[617,21016+21])
                ]
          ]
          expression (src/invariant.ml[621,21161+2]..[623,21258+25])
            Pexp_apply
            expression (src/invariant.ml[621,21161+2]..[621,21161+16])
              Pexp_ident "SymbolSet.fold" (src/invariant.ml[621,21161+2]..[621,21161+16])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[621,21161+17]..[623,21258+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[621,21161+22]..[621,21161+24])
                    Ppat_var "nt" (src/invariant.ml[621,21161+22]..[621,21161+24])
                  expression (src/invariant.ml[621,21161+25]..[622,21202+55]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[621,21161+25]..[621,21161+37])
                      Ppat_var "errorpeekers" (src/invariant.ml[621,21161+25]..[621,21161+37])
                    expression (src/invariant.ml[622,21202+4]..[622,21202+55])
                      Pexp_apply
                      expression (src/invariant.ml[622,21202+4]..[622,21202+21])
                        Pexp_ident "Lr1.NodeSet.union" (src/invariant.ml[622,21202+4]..[622,21202+21])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[622,21202+22]..[622,21202+34])
                            Pexp_ident "errorpeekers" (src/invariant.ml[622,21202+22]..[622,21202+34])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[622,21202+35]..[622,21202+55])
                            Pexp_apply
                            expression (src/invariant.ml[622,21202+36]..[622,21202+51])
                              Pexp_ident "Lr1.all_targets" (src/invariant.ml[622,21202+36]..[622,21202+51])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[622,21202+52]..[622,21202+54])
                                  Pexp_ident "nt" (src/invariant.ml[622,21202+52]..[622,21202+54])
                            ]
                      ]
              <arg>
              Nolabel
                expression (src/invariant.ml[623,21258+4]..[623,21258+7])
                  Pexp_ident "nts" (src/invariant.ml[623,21258+4]..[623,21258+7])
              <arg>
              Nolabel
                expression (src/invariant.ml[623,21258+8]..[623,21258+25])
                  Pexp_ident "Lr1.NodeSet.empty" (src/invariant.ml[623,21258+8]..[623,21258+25])
            ]
    ]
  structure_item (src/invariant.ml[625,21285+0]..[626,21308+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[625,21285+4]..[625,21285+15])
          Ppat_var "errorpeeker" (src/invariant.ml[625,21285+4]..[625,21285+15])
        expression (src/invariant.ml[625,21285+16]..[626,21308+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/invariant.ml[625,21285+16]..[625,21285+20])
            Ppat_var "node" (src/invariant.ml[625,21285+16]..[625,21285+20])
          expression (src/invariant.ml[626,21308+2]..[626,21308+35])
            Pexp_apply
            expression (src/invariant.ml[626,21308+2]..[626,21308+17])
              Pexp_ident "Lr1.NodeSet.mem" (src/invariant.ml[626,21308+2]..[626,21308+17])
            [
              <arg>
              Nolabel
                expression (src/invariant.ml[626,21308+18]..[626,21308+22])
                  Pexp_ident "node" (src/invariant.ml[626,21308+18]..[626,21308+22])
              <arg>
              Nolabel
                expression (src/invariant.ml[626,21308+23]..[626,21308+35])
                  Pexp_ident "errorpeekers" (src/invariant.ml[626,21308+23]..[626,21308+35])
            ]
    ]
  structure_item (src/invariant.ml[630,21425+0]..[631,21434+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[630,21425+4]..[630,21425+6])
          Ppat_construct "()" (src/invariant.ml[630,21425+4]..[630,21425+6])
          None
        expression (src/invariant.ml[631,21434+2]..[631,21434+40])
          Pexp_apply
          expression (src/invariant.ml[631,21434+2]..[631,21434+11])
            Pexp_ident "Time.tick" (src/invariant.ml[631,21434+2]..[631,21434+11])
          [
            <arg>
            Nolabel
              expression (src/invariant.ml[631,21434+12]..[631,21434+40])
                Pexp_constant PConst_string("Constructing the invariant",(src/invariant.ml[631,21434+13]..[631,21434+39]),None)
          ]
    ]
  structure_item (src/invariant.ml[655,22581+0]..[708,23726+3])
    Pstr_module
    "Long" (src/invariant.ml[655,22581+7]..[655,22581+11])
      module_expr (src/invariant.ml[655,22581+12]..[708,23726+3])
        Pmod_functor ()
        module_expr (src/invariant.ml[655,22581+17]..[708,23726+3])
          Pmod_structure
          [
            structure_item (src/invariant.ml[659,22624+2]..[660,22639+23])
              Pstr_module
              "SSy" (src/invariant.ml[659,22624+9]..[659,22624+12])
                module_expr (src/invariant.ml[660,22639+4]..[660,22639+23])
                  Pmod_apply_unit
                  module_expr (src/invariant.ml[660,22639+4]..[660,22639+21])
                    Pmod_ident "StackSymbols.Long" (src/invariant.ml[660,22639+4]..[660,22639+21])
            structure_item (src/invariant.ml[662,22664+2]..[663,22679+24])
              Pstr_module
              "SSt" (src/invariant.ml[662,22664+9]..[662,22664+12])
                module_expr (src/invariant.ml[663,22679+4]..[663,22679+24])
                  Pmod_apply
                  module_expr (src/invariant.ml[663,22679+4]..[663,22679+19])
                    Pmod_ident "StackStates.Run" (src/invariant.ml[663,22679+4]..[663,22679+19])
                  module_expr (src/invariant.ml[663,22679+20]..[663,22679+23])
                    Pmod_ident "SSy" (src/invariant.ml[663,22679+20]..[663,22679+23])
            structure_item (src/invariant.ml[665,22705+2]..[665,22705+10])
              Pstr_open Fresh
              module_expr (src/invariant.ml[665,22705+7]..[665,22705+10])
                Pmod_ident "SSy" (src/invariant.ml[665,22705+7]..[665,22705+10])
            structure_item (src/invariant.ml[666,22759+2]..[666,22759+10])
              Pstr_open Fresh
              module_expr (src/invariant.ml[666,22759+7]..[666,22759+10])
                Pmod_ident "SSt" (src/invariant.ml[666,22759+7]..[666,22759+10])
            structure_item (src/invariant.ml[670,22833+2]..[671,22860+26])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[670,22833+6]..[670,22833+19])
                    Ppat_var "unrepresented" (src/invariant.ml[670,22833+6]..[670,22833+19])
                  expression (src/invariant.ml[670,22833+20]..[671,22860+26]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[670,22833+20]..[670,22833+24])
                      Ppat_var "node" (src/invariant.ml[670,22833+20]..[670,22833+24])
                    expression (src/invariant.ml[671,22860+4]..[671,22860+26])
                      Pexp_apply
                      expression (src/invariant.ml[671,22860+4]..[671,22860+7])
                        Pexp_ident "not" (src/invariant.ml[671,22860+4]..[671,22860+7])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[671,22860+8]..[671,22860+26])
                            Pexp_apply
                            expression (src/invariant.ml[671,22860+9]..[671,22860+20])
                              Pexp_ident "represented" (src/invariant.ml[671,22860+9]..[671,22860+20])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[671,22860+21]..[671,22860+25])
                                  Pexp_ident "node" (src/invariant.ml[671,22860+21]..[671,22860+25])
                            ]
                      ]
              ]
            structure_item (src/invariant.ml[673,22888+2]..[675,22964+43])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[673,22888+6]..[673,22888+22])
                    Ppat_var "equi_represented" (src/invariant.ml[673,22888+6]..[673,22888+22])
                  expression (src/invariant.ml[673,22888+23]..[675,22964+43]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[673,22888+23]..[673,22888+28])
                      Ppat_var "nodes" (src/invariant.ml[673,22888+23]..[673,22888+28])
                    expression (src/invariant.ml[674,22919+4]..[675,22964+43])
                      Pexp_apply
                      expression (src/invariant.ml[674,22919+42]..[674,22919+44])
                        Pexp_ident "||" (src/invariant.ml[674,22919+42]..[674,22919+44])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[674,22919+4]..[674,22919+41])
                            Pexp_apply
                            expression (src/invariant.ml[674,22919+4]..[674,22919+23])
                              Pexp_ident "Lr1.NodeSet.for_all" (src/invariant.ml[674,22919+4]..[674,22919+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[674,22919+24]..[674,22919+35])
                                  Pexp_ident "represented" (src/invariant.ml[674,22919+24]..[674,22919+35])
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[674,22919+36]..[674,22919+41])
                                  Pexp_ident "nodes" (src/invariant.ml[674,22919+36]..[674,22919+41])
                            ]
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[675,22964+4]..[675,22964+43])
                            Pexp_apply
                            expression (src/invariant.ml[675,22964+4]..[675,22964+23])
                              Pexp_ident "Lr1.NodeSet.for_all" (src/invariant.ml[675,22964+4]..[675,22964+23])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[675,22964+24]..[675,22964+37])
                                  Pexp_ident "unrepresented" (src/invariant.ml[675,22964+24]..[675,22964+37])
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[675,22964+38]..[675,22964+43])
                                  Pexp_ident "nodes" (src/invariant.ml[675,22964+38]..[675,22964+43])
                            ]
                      ]
              ]
            structure_item (src/invariant.ml[677,23009+2]..[678,23033+57])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[677,23009+6]..[677,23009+14])
                    Ppat_var "validate" (src/invariant.ml[677,23009+6]..[677,23009+14])
                  expression (src/invariant.ml[677,23009+15]..[678,23033+57]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[677,23009+15]..[677,23009+21])
                      Ppat_var "states" (src/invariant.ml[677,23009+15]..[677,23009+21])
                    expression (src/invariant.ml[678,23033+4]..[678,23033+57])
                      Pexp_apply
                      expression (src/invariant.ml[678,23033+4]..[678,23033+33])
                        Pexp_ident "MArray.greatest_suffix_forall" (src/invariant.ml[678,23033+4]..[678,23033+33])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[678,23033+34]..[678,23033+50])
                            Pexp_ident "equi_represented" (src/invariant.ml[678,23033+34]..[678,23033+50])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[678,23033+51]..[678,23033+57])
                            Pexp_ident "states" (src/invariant.ml[678,23033+51]..[678,23033+57])
                      ]
              ]
            structure_item (src/invariant.ml[680,23092+2]..[681,23115+30])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[680,23092+6]..[680,23092+18])
                    Ppat_var "stack_states" (src/invariant.ml[680,23092+6]..[680,23092+18])
                  expression (src/invariant.ml[680,23092+19]..[681,23115+30]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[680,23092+19]..[680,23092+20])
                      Ppat_var "s" (src/invariant.ml[680,23092+19]..[680,23092+20])
                    expression (src/invariant.ml[681,23115+4]..[681,23115+30])
                      Pexp_apply
                      expression (src/invariant.ml[681,23115+13]..[681,23115+15])
                        Pexp_ident "@@" (src/invariant.ml[681,23115+13]..[681,23115+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[681,23115+4]..[681,23115+12])
                            Pexp_ident "validate" (src/invariant.ml[681,23115+4]..[681,23115+12])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[681,23115+16]..[681,23115+30])
                            Pexp_apply
                            expression (src/invariant.ml[681,23115+16]..[681,23115+28])
                              Pexp_ident "stack_states" (src/invariant.ml[681,23115+16]..[681,23115+28])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[681,23115+29]..[681,23115+30])
                                  Pexp_ident "s" (src/invariant.ml[681,23115+29]..[681,23115+30])
                            ]
                      ]
              ]
            structure_item (src/invariant.ml[683,23147+2]..[684,23178+38])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[683,23147+6]..[683,23147+23])
                    Ppat_var "production_states" (src/invariant.ml[683,23147+6]..[683,23147+23])
                  expression (src/invariant.ml[683,23147+24]..[684,23178+38]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[683,23147+24]..[683,23147+28])
                      Ppat_var "prod" (src/invariant.ml[683,23147+24]..[683,23147+28])
                    expression (src/invariant.ml[684,23178+4]..[684,23178+38])
                      Pexp_apply
                      expression (src/invariant.ml[684,23178+13]..[684,23178+15])
                        Pexp_ident "@@" (src/invariant.ml[684,23178+13]..[684,23178+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[684,23178+4]..[684,23178+12])
                            Pexp_ident "validate" (src/invariant.ml[684,23178+4]..[684,23178+12])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[684,23178+16]..[684,23178+38])
                            Pexp_apply
                            expression (src/invariant.ml[684,23178+16]..[684,23178+33])
                              Pexp_ident "production_states" (src/invariant.ml[684,23178+16]..[684,23178+33])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[684,23178+34]..[684,23178+38])
                                  Pexp_ident "prod" (src/invariant.ml[684,23178+34]..[684,23178+38])
                            ]
                      ]
              ]
            structure_item (src/invariant.ml[686,23218+2]..[687,23241+30])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[686,23218+6]..[686,23218+17])
                    Ppat_var "goto_states" (src/invariant.ml[686,23218+6]..[686,23218+17])
                  expression (src/invariant.ml[686,23218+18]..[687,23241+30]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[686,23218+18]..[686,23218+20])
                      Ppat_var "nt" (src/invariant.ml[686,23218+18]..[686,23218+20])
                    expression (src/invariant.ml[687,23241+4]..[687,23241+30])
                      Pexp_apply
                      expression (src/invariant.ml[687,23241+13]..[687,23241+15])
                        Pexp_ident "@@" (src/invariant.ml[687,23241+13]..[687,23241+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[687,23241+4]..[687,23241+12])
                            Pexp_ident "validate" (src/invariant.ml[687,23241+4]..[687,23241+12])
                        <arg>
                        Nolabel
                          expression (src/invariant.ml[687,23241+16]..[687,23241+30])
                            Pexp_apply
                            expression (src/invariant.ml[687,23241+16]..[687,23241+27])
                              Pexp_ident "goto_states" (src/invariant.ml[687,23241+16]..[687,23241+27])
                            [
                              <arg>
                              Nolabel
                                expression (src/invariant.ml[687,23241+28]..[687,23241+30])
                                  Pexp_ident "nt" (src/invariant.ml[687,23241+28]..[687,23241+30])
                            ]
                      ]
              ]
            structure_item (src/invariant.ml[691,23288+2]..[692,23299+30])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[691,23288+6]..[691,23288+8])
                    Ppat_construct "()" (src/invariant.ml[691,23288+6]..[691,23288+8])
                    None
                  expression (src/invariant.ml[692,23299+4]..[692,23299+30])
                    Pexp_apply
                    expression (src/invariant.ml[692,23299+4]..[692,23299+14])
                      Pexp_ident "Error.logC" (src/invariant.ml[692,23299+4]..[692,23299+14])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[692,23299+15]..[692,23299+16])
                          Pexp_constant PConst_int (3,None)
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[692,23299+17]..[692,23299+30])
                          Pexp_apply
                          expression (src/invariant.ml[692,23299+18]..[692,23299+22])
                            Pexp_ident "dump" (src/invariant.ml[692,23299+18]..[692,23299+22])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[692,23299+23]..[692,23299+29])
                                Pexp_constant PConst_string("long",(src/invariant.ml[692,23299+24]..[692,23299+28]),None)
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[696,23349+2]..[697,23382+56])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[696,23349+6]..[696,23349+11])
                    Ppat_var "stack" (src/invariant.ml[696,23349+6]..[696,23349+11])
                  core_type (src/invariant.ml[696,23349+14]..[696,23349+30])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/invariant.ml[696,23349+14]..[696,23349+22])
                      Ptyp_constr "Lr1.node" (src/invariant.ml[696,23349+14]..[696,23349+22])
                      []
                    core_type (src/invariant.ml[696,23349+26]..[696,23349+30])
                      Ptyp_constr "word" (src/invariant.ml[696,23349+26]..[696,23349+30])
                      []
                  expression (src/invariant.ml[697,23382+4]..[697,23382+56])
                    Pexp_apply
                    expression (src/invariant.ml[697,23382+4]..[697,23382+11])
                      Pexp_ident "publish" (src/invariant.ml[697,23382+4]..[697,23382+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[697,23382+12]..[697,23382+24])
                          Pexp_ident "Lr1.tabulate" (src/invariant.ml[697,23382+12]..[697,23382+24])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[697,23382+25]..[697,23382+38])
                          Pexp_ident "stack_symbols" (src/invariant.ml[697,23382+25]..[697,23382+38])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[697,23382+39]..[697,23382+51])
                          Pexp_ident "stack_states" (src/invariant.ml[697,23382+39]..[697,23382+51])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[697,23382+52]..[697,23382+56])
                          Pexp_ident "cell" (src/invariant.ml[697,23382+52]..[697,23382+56])
                    ]
              ]
            structure_item (src/invariant.ml[699,23440+2]..[700,23485+73])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[699,23440+6]..[699,23440+15])
                    Ppat_var "prodstack" (src/invariant.ml[699,23440+6]..[699,23440+15])
                  core_type (src/invariant.ml[699,23440+18]..[699,23440+42])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/invariant.ml[699,23440+18]..[699,23440+34])
                      Ptyp_constr "Production.index" (src/invariant.ml[699,23440+18]..[699,23440+34])
                      []
                    core_type (src/invariant.ml[699,23440+38]..[699,23440+42])
                      Ptyp_constr "word" (src/invariant.ml[699,23440+38]..[699,23440+42])
                      []
                  expression (src/invariant.ml[700,23485+4]..[700,23485+73])
                    Pexp_apply
                    expression (src/invariant.ml[700,23485+4]..[700,23485+11])
                      Pexp_ident "publish" (src/invariant.ml[700,23485+4]..[700,23485+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[700,23485+12]..[700,23485+31])
                          Pexp_ident "Production.tabulate" (src/invariant.ml[700,23485+12]..[700,23485+31])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[700,23485+32]..[700,23485+50])
                          Pexp_ident "production_symbols" (src/invariant.ml[700,23485+32]..[700,23485+50])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[700,23485+51]..[700,23485+68])
                          Pexp_ident "production_states" (src/invariant.ml[700,23485+51]..[700,23485+68])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[700,23485+69]..[700,23485+73])
                          Pexp_ident "cell" (src/invariant.ml[700,23485+69]..[700,23485+73])
                    ]
              ]
            structure_item (src/invariant.ml[702,23560+2]..[703,23602+62])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[702,23560+6]..[702,23560+15])
                    Ppat_var "gotostack" (src/invariant.ml[702,23560+6]..[702,23560+15])
                  core_type (src/invariant.ml[702,23560+18]..[702,23560+39])
                    Ptyp_arrow
                    Nolabel
                    core_type (src/invariant.ml[702,23560+18]..[702,23560+31])
                      Ptyp_constr "Nonterminal.t" (src/invariant.ml[702,23560+18]..[702,23560+31])
                      []
                    core_type (src/invariant.ml[702,23560+35]..[702,23560+39])
                      Ptyp_constr "word" (src/invariant.ml[702,23560+35]..[702,23560+39])
                      []
                  expression (src/invariant.ml[703,23602+4]..[703,23602+62])
                    Pexp_apply
                    expression (src/invariant.ml[703,23602+4]..[703,23602+11])
                      Pexp_ident "publish" (src/invariant.ml[703,23602+4]..[703,23602+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[703,23602+12]..[703,23602+32])
                          Pexp_ident "Nonterminal.tabulate" (src/invariant.ml[703,23602+12]..[703,23602+32])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[703,23602+33]..[703,23602+45])
                          Pexp_ident "goto_symbols" (src/invariant.ml[703,23602+33]..[703,23602+45])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[703,23602+46]..[703,23602+57])
                          Pexp_ident "goto_states" (src/invariant.ml[703,23602+46]..[703,23602+57])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[703,23602+58]..[703,23602+62])
                          Pexp_ident "cell" (src/invariant.ml[703,23602+58]..[703,23602+62])
                    ]
              ]
            structure_item (src/invariant.ml[705,23666+2]..[706,23677+47])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[705,23666+6]..[705,23666+8])
                    Ppat_construct "()" (src/invariant.ml[705,23666+6]..[705,23666+8])
                    None
                  expression (src/invariant.ml[706,23677+4]..[706,23677+47])
                    Pexp_apply
                    expression (src/invariant.ml[706,23677+4]..[706,23677+13])
                      Pexp_ident "Time.tick" (src/invariant.ml[706,23677+4]..[706,23677+13])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[706,23677+14]..[706,23677+47])
                          Pexp_constant PConst_string("Constructing the long invariant",(src/invariant.ml[706,23677+15]..[706,23677+46]),None)
                    ]
              ]
          ]
  structure_item (src/invariant.ml[728,24515+0]..[744,24945+3])
    Pstr_module
    "P" (src/invariant.ml[728,24515+7]..[728,24515+8])
      module_expr (src/invariant.ml[728,24515+11]..[744,24945+3])
        Pmod_structure
        [
          structure_item (src/invariant.ml[732,24683+2]..[734,24737+9])
            Pstr_type Rec
            [
              type_declaration "property" (src/invariant.ml[732,24683+7]..[732,24683+15]) (src/invariant.ml[732,24683+2]..[734,24737+9])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/invariant.ml[733,24701+4]..[733,24701+35])
                        "SingleOrigin" (src/invariant.ml[733,24701+6]..[733,24701+18])
                        [
                          core_type (src/invariant.ml[733,24701+22]..[733,24701+35])
                            Ptyp_constr "Nonterminal.t" (src/invariant.ml[733,24701+22]..[733,24701+35])
                            []
                        ]
                        None
                      (src/invariant.ml[734,24737+4]..[734,24737+9])
                        "Top" (src/invariant.ml[734,24737+6]..[734,24737+9])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[736,24748+2]..[742,24884+59])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[736,24748+6]..[736,24748+14])
                  Ppat_var "leq_join" (src/invariant.ml[736,24748+6]..[736,24748+14])
                expression (src/invariant.ml[736,24748+15]..[742,24884+59]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[736,24748+15]..[736,24748+17])
                    Ppat_var "p1" (src/invariant.ml[736,24748+15]..[736,24748+17])
                  expression (src/invariant.ml[736,24748+18]..[742,24884+59]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[736,24748+18]..[736,24748+20])
                      Ppat_var "p2" (src/invariant.ml[736,24748+18]..[736,24748+20])
                    expression (src/invariant.ml[737,24771+4]..[742,24884+59])
                      Pexp_match
                      expression (src/invariant.ml[737,24771+10]..[737,24771+16])
                        Pexp_tuple
                        [
                          expression (src/invariant.ml[737,24771+10]..[737,24771+12])
                            Pexp_ident "p1" (src/invariant.ml[737,24771+10]..[737,24771+12])
                          expression (src/invariant.ml[737,24771+14]..[737,24771+16])
                            Pexp_ident "p2" (src/invariant.ml[737,24771+14]..[737,24771+16])
                        ]
                      [
                        <case>
                          pattern (src/invariant.ml[738,24793+6]..[739,24806+12])
                            Ppat_or
                            pattern (src/invariant.ml[738,24793+6]..[738,24793+12])
                              Ppat_tuple
                              [
                                pattern (src/invariant.ml[738,24793+6]..[738,24793+7])
                                  Ppat_any
                                pattern (src/invariant.ml[738,24793+9]..[738,24793+12])
                                  Ppat_construct "Top" (src/invariant.ml[738,24793+9]..[738,24793+12])
                                  None
                              ]
                            pattern (src/invariant.ml[739,24806+6]..[739,24806+12])
                              Ppat_tuple
                              [
                                pattern (src/invariant.ml[739,24806+6]..[739,24806+9])
                                  Ppat_construct "Top" (src/invariant.ml[739,24806+6]..[739,24806+9])
                                  None
                                pattern (src/invariant.ml[739,24806+11]..[739,24806+12])
                                  Ppat_any
                              ]
                          expression (src/invariant.ml[740,24822+8]..[740,24822+11])
                            Pexp_construct "Top" (src/invariant.ml[740,24822+8]..[740,24822+11])
                            None
                        <case>
                          pattern (src/invariant.ml[741,24834+6]..[741,24834+46])
                            Ppat_tuple
                            [
                              pattern (src/invariant.ml[741,24834+6]..[741,24834+25])
                                Ppat_construct "SingleOrigin" (src/invariant.ml[741,24834+6]..[741,24834+18])
                                Some
                                  []
                                  pattern (src/invariant.ml[741,24834+19]..[741,24834+25])
                                    Ppat_var "start1" (src/invariant.ml[741,24834+19]..[741,24834+25])
                              pattern (src/invariant.ml[741,24834+27]..[741,24834+46])
                                Ppat_construct "SingleOrigin" (src/invariant.ml[741,24834+27]..[741,24834+39])
                                Some
                                  []
                                  pattern (src/invariant.ml[741,24834+40]..[741,24834+46])
                                    Ppat_var "start2" (src/invariant.ml[741,24834+40]..[741,24834+46])
                            ]
                          expression (src/invariant.ml[742,24884+8]..[742,24884+59])
                            Pexp_ifthenelse
                            expression (src/invariant.ml[742,24884+11]..[742,24884+42])
                              Pexp_apply
                              expression (src/invariant.ml[742,24884+11]..[742,24884+28])
                                Pexp_ident "Nonterminal.equal" (src/invariant.ml[742,24884+11]..[742,24884+28])
                              [
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[742,24884+29]..[742,24884+35])
                                    Pexp_ident "start1" (src/invariant.ml[742,24884+29]..[742,24884+35])
                                <arg>
                                Nolabel
                                  expression (src/invariant.ml[742,24884+36]..[742,24884+42])
                                    Pexp_ident "start2" (src/invariant.ml[742,24884+36]..[742,24884+42])
                              ]
                            expression (src/invariant.ml[742,24884+48]..[742,24884+50])
                              Pexp_ident "p2" (src/invariant.ml[742,24884+48]..[742,24884+50])
                            Some
                              expression (src/invariant.ml[742,24884+56]..[742,24884+59])
                                Pexp_construct "Top" (src/invariant.ml[742,24884+56]..[742,24884+59])
                                None
                      ]
            ]
        ]
  structure_item (src/invariant.ml[748,25017+0]..[790,26445+3])
    Pstr_module
    "G" (src/invariant.ml[748,25017+7]..[748,25017+8])
      module_expr (src/invariant.ml[748,25017+11]..[790,26445+3])
        Pmod_structure
        [
          structure_item (src/invariant.ml[750,25036+2]..[750,25036+11])
            Pstr_include            module_expr (src/invariant.ml[750,25036+10]..[750,25036+11])
              Pmod_ident "P" (src/invariant.ml[750,25036+10]..[750,25036+11])
          structure_item (src/invariant.ml[752,25049+2]..[755,25122+27])
            Pstr_type Rec
            [
              type_declaration "variable" (src/invariant.ml[752,25049+7]..[752,25049+15]) (src/invariant.ml[752,25049+2]..[755,25122+27])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/invariant.ml[753,25067+4]..[753,25067+21])
                        "Run" (src/invariant.ml[753,25067+6]..[753,25067+9])
                        [
                          core_type (src/invariant.ml[753,25067+13]..[753,25067+21])
                            Ptyp_constr "Lr1.node" (src/invariant.ml[753,25067+13]..[753,25067+21])
                            []
                        ]
                        None
                      (src/invariant.ml[754,25089+4]..[754,25089+32])
                        "Reduce" (src/invariant.ml[754,25089+6]..[754,25089+12])
                        [
                          core_type (src/invariant.ml[754,25089+16]..[754,25089+32])
                            Ptyp_constr "Production.index" (src/invariant.ml[754,25089+16]..[754,25089+32])
                            []
                        ]
                        None
                      (src/invariant.ml[755,25122+4]..[755,25122+27])
                        "Goto" (src/invariant.ml[755,25122+6]..[755,25122+10])
                        [
                          core_type (src/invariant.ml[755,25122+14]..[755,25122+27])
                            Ptyp_constr "Nonterminal.t" (src/invariant.ml[755,25122+14]..[755,25122+27])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[757,25151+2]..[757,25151+19])
            Pstr_type Rec
            [
              type_declaration "t" (src/invariant.ml[757,25151+7]..[757,25151+8]) (src/invariant.ml[757,25151+2]..[757,25151+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (src/invariant.ml[757,25151+11]..[757,25151+19])
                      Ptyp_constr "variable" (src/invariant.ml[757,25151+11]..[757,25151+19])
                      []
            ]
          structure_item (src/invariant.ml[759,25172+2]..[765,25452+5])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[759,25172+6]..[759,25172+18])
                  Ppat_var "foreach_root" (src/invariant.ml[759,25172+6]..[759,25172+18])
                expression (src/invariant.ml[759,25172+19]..[765,25452+5]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[759,25172+19]..[759,25172+24])
                    Ppat_var "yield" (src/invariant.ml[759,25172+19]..[759,25172+24])
                  expression (src/invariant.ml[762,25299+4]..[765,25452+5])
                    Pexp_apply
                    expression (src/invariant.ml[762,25299+14]..[762,25299+16])
                      Pexp_ident "|>" (src/invariant.ml[762,25299+14]..[762,25299+16])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[762,25299+4]..[762,25299+13])
                          Pexp_ident "Lr1.entry" (src/invariant.ml[762,25299+4]..[762,25299+13])
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[762,25299+17]..[765,25452+5])
                          Pexp_apply
                          expression (src/invariant.ml[762,25299+17]..[762,25299+35])
                            Pexp_ident "ProductionMap.iter" (src/invariant.ml[762,25299+17]..[762,25299+35])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[762,25299+36]..[765,25452+5])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/invariant.ml[762,25299+41]..[762,25299+45])
                                  Ppat_var "prod" (src/invariant.ml[762,25299+41]..[762,25299+45])
                                expression (src/invariant.ml[762,25299+46]..[764,25411+40]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/invariant.ml[762,25299+46]..[762,25299+50])
                                    Ppat_var "node" (src/invariant.ml[762,25299+46]..[762,25299+50])
                                  expression (src/invariant.ml[763,25353+6]..[764,25411+40])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/invariant.ml[763,25353+10]..[763,25353+12])
                                          Ppat_var "nt" (src/invariant.ml[763,25353+10]..[763,25353+12])
                                        expression (src/invariant.ml[763,25353+15]..[763,25353+54])
                                          Pexp_apply
                                          expression (src/invariant.ml[763,25353+15]..[763,25353+27])
                                            Pexp_ident "Option.force" (src/invariant.ml[763,25353+15]..[763,25353+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/invariant.ml[763,25353+28]..[763,25353+54])
                                                Pexp_apply
                                                expression (src/invariant.ml[763,25353+29]..[763,25353+48])
                                                  Pexp_ident "Production.classify" (src/invariant.ml[763,25353+29]..[763,25353+48])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[763,25353+49]..[763,25353+53])
                                                      Pexp_ident "prod" (src/invariant.ml[763,25353+49]..[763,25353+53])
                                                ]
                                          ]
                                    ]
                                    expression (src/invariant.ml[764,25411+6]..[764,25411+40])
                                      Pexp_apply
                                      expression (src/invariant.ml[764,25411+6]..[764,25411+11])
                                        Pexp_ident "yield" (src/invariant.ml[764,25411+6]..[764,25411+11])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[764,25411+12]..[764,25411+22])
                                            Pexp_construct "Run" (src/invariant.ml[764,25411+13]..[764,25411+16])
                                            Some
                                              expression (src/invariant.ml[764,25411+17]..[764,25411+21])
                                                Pexp_ident "node" (src/invariant.ml[764,25411+17]..[764,25411+21])
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[764,25411+23]..[764,25411+40])
                                            Pexp_construct "SingleOrigin" (src/invariant.ml[764,25411+24]..[764,25411+36])
                                            Some
                                              expression (src/invariant.ml[764,25411+37]..[764,25411+39])
                                                Pexp_ident "nt" (src/invariant.ml[764,25411+37]..[764,25411+39])
                                      ]
                          ]
                    ]
            ]
          structure_item (src/invariant.ml[767,25459+2]..[788,26433+10])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[767,25459+6]..[767,25459+23])
                  Ppat_var "foreach_successor" (src/invariant.ml[767,25459+6]..[767,25459+23])
                expression (src/invariant.ml[767,25459+24]..[788,26433+10]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[767,25459+24]..[767,25459+25])
                    Ppat_var "v" (src/invariant.ml[767,25459+24]..[767,25459+25])
                  expression (src/invariant.ml[767,25459+26]..[788,26433+10]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/invariant.ml[767,25459+26]..[767,25459+32])
                      Ppat_var "origin" (src/invariant.ml[767,25459+26]..[767,25459+32])
                    expression (src/invariant.ml[767,25459+33]..[788,26433+10]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/invariant.ml[767,25459+33]..[767,25459+38])
                        Ppat_var "yield" (src/invariant.ml[767,25459+33]..[767,25459+38])
                      expression (src/invariant.ml[768,25500+4]..[788,26433+10])
                        Pexp_match
                        expression (src/invariant.ml[768,25500+10]..[768,25500+11])
                          Pexp_ident "v" (src/invariant.ml[768,25500+10]..[768,25500+11])
                        [
                          <case>
                            pattern (src/invariant.ml[769,25517+6]..[769,25517+14])
                              Ppat_construct "Run" (src/invariant.ml[769,25517+6]..[769,25517+9])
                              Some
                                []
                                pattern (src/invariant.ml[769,25517+10]..[769,25517+14])
                                  Ppat_var "node" (src/invariant.ml[769,25517+10]..[769,25517+14])
                            expression (src/invariant.ml[774,25835+8]..[780,26107+11])
                              Pexp_sequence
                              expression (src/invariant.ml[774,25835+8]..[776,25943+11])
                                Pexp_apply
                                expression (src/invariant.ml[774,25835+29]..[774,25835+31])
                                  Pexp_ident "|>" (src/invariant.ml[774,25835+29]..[774,25835+31])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[774,25835+8]..[774,25835+28])
                                      Pexp_apply
                                      expression (src/invariant.ml[774,25835+8]..[774,25835+23])
                                        Pexp_ident "Lr1.transitions" (src/invariant.ml[774,25835+8]..[774,25835+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[774,25835+24]..[774,25835+28])
                                            Pexp_ident "node" (src/invariant.ml[774,25835+24]..[774,25835+28])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[774,25835+32]..[776,25943+11])
                                      Pexp_apply
                                      expression (src/invariant.ml[774,25835+32]..[774,25835+46])
                                        Pexp_ident "SymbolMap.iter" (src/invariant.ml[774,25835+32]..[774,25835+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[774,25835+47]..[776,25943+11])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/invariant.ml[774,25835+57]..[774,25835+63])
                                              Ppat_var "_label" (src/invariant.ml[774,25835+57]..[774,25835+63])
                                            expression (src/invariant.ml[774,25835+64]..[775,25908+34]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/invariant.ml[774,25835+64]..[774,25835+69])
                                                Ppat_var "node'" (src/invariant.ml[774,25835+64]..[774,25835+69])
                                              expression (src/invariant.ml[775,25908+10]..[775,25908+34])
                                                Pexp_apply
                                                expression (src/invariant.ml[775,25908+10]..[775,25908+15])
                                                  Pexp_ident "yield" (src/invariant.ml[775,25908+10]..[775,25908+15])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[775,25908+16]..[775,25908+27])
                                                      Pexp_construct "Run" (src/invariant.ml[775,25908+17]..[775,25908+20])
                                                      Some
                                                        expression (src/invariant.ml[775,25908+21]..[775,25908+26])
                                                          Pexp_ident "node'" (src/invariant.ml[775,25908+21]..[775,25908+26])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/invariant.ml[775,25908+28]..[775,25908+34])
                                                      Pexp_ident "origin" (src/invariant.ml[775,25908+28]..[775,25908+34])
                                                ]
                                      ]
                                ]
                              expression (src/invariant.ml[777,25956+8]..[780,26107+11])
                                Pexp_apply
                                expression (src/invariant.ml[777,25956+28]..[777,25956+30])
                                  Pexp_ident "|>" (src/invariant.ml[777,25956+28]..[777,25956+30])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[777,25956+8]..[777,25956+27])
                                      Pexp_apply
                                      expression (src/invariant.ml[777,25956+8]..[777,25956+22])
                                        Pexp_ident "Lr1.reductions" (src/invariant.ml[777,25956+8]..[777,25956+22])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[777,25956+23]..[777,25956+27])
                                            Pexp_ident "node" (src/invariant.ml[777,25956+23]..[777,25956+27])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[777,25956+31]..[780,26107+11])
                                      Pexp_apply
                                      expression (src/invariant.ml[777,25956+31]..[777,25956+47])
                                        Pexp_ident "TerminalMap.iter" (src/invariant.ml[777,25956+31]..[777,25956+47])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/invariant.ml[777,25956+48]..[780,26107+11])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/invariant.ml[777,25956+58]..[777,25956+62])
                                              Ppat_var "_tok" (src/invariant.ml[777,25956+58]..[777,25956+62])
                                            expression (src/invariant.ml[777,25956+63]..[779,26070+36]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/invariant.ml[777,25956+63]..[777,25956+68])
                                                Ppat_var "prods" (src/invariant.ml[777,25956+63]..[777,25956+68])
                                              expression (src/invariant.ml[778,26028+10]..[779,26070+36])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/invariant.ml[778,26028+14]..[778,26028+18])
                                                      Ppat_var "prod" (src/invariant.ml[778,26028+14]..[778,26028+18])
                                                    expression (src/invariant.ml[778,26028+21]..[778,26028+38])
                                                      Pexp_apply
                                                      expression (src/invariant.ml[778,26028+21]..[778,26028+32])
                                                        Pexp_ident "Misc.single" (src/invariant.ml[778,26028+21]..[778,26028+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/invariant.ml[778,26028+33]..[778,26028+38])
                                                            Pexp_ident "prods" (src/invariant.ml[778,26028+33]..[778,26028+38])
                                                      ]
                                                ]
                                                expression (src/invariant.ml[779,26070+10]..[779,26070+36])
                                                  Pexp_apply
                                                  expression (src/invariant.ml[779,26070+10]..[779,26070+15])
                                                    Pexp_ident "yield" (src/invariant.ml[779,26070+10]..[779,26070+15])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[779,26070+16]..[779,26070+29])
                                                        Pexp_construct "Reduce" (src/invariant.ml[779,26070+17]..[779,26070+23])
                                                        Some
                                                          expression (src/invariant.ml[779,26070+24]..[779,26070+28])
                                                            Pexp_ident "prod" (src/invariant.ml[779,26070+24]..[779,26070+28])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/invariant.ml[779,26070+30]..[779,26070+36])
                                                        Pexp_ident "origin" (src/invariant.ml[779,26070+30]..[779,26070+36])
                                                  ]
                                      ]
                                ]
                          <case>
                            pattern (src/invariant.ml[781,26119+6]..[781,26119+17])
                              Ppat_construct "Reduce" (src/invariant.ml[781,26119+6]..[781,26119+12])
                              Some
                                []
                                pattern (src/invariant.ml[781,26119+13]..[781,26119+17])
                                  Ppat_var "prod" (src/invariant.ml[781,26119+13]..[781,26119+17])
                            expression (src/invariant.ml[783,26213+8]..[784,26252+30])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/invariant.ml[783,26213+12]..[783,26213+14])
                                    Ppat_var "nt" (src/invariant.ml[783,26213+12]..[783,26213+14])
                                  expression (src/invariant.ml[783,26213+17]..[783,26213+35])
                                    Pexp_apply
                                    expression (src/invariant.ml[783,26213+17]..[783,26213+30])
                                      Pexp_ident "Production.nt" (src/invariant.ml[783,26213+17]..[783,26213+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/invariant.ml[783,26213+31]..[783,26213+35])
                                          Pexp_ident "prod" (src/invariant.ml[783,26213+31]..[783,26213+35])
                                    ]
                              ]
                              expression (src/invariant.ml[784,26252+8]..[784,26252+30])
                                Pexp_apply
                                expression (src/invariant.ml[784,26252+8]..[784,26252+13])
                                  Pexp_ident "yield" (src/invariant.ml[784,26252+8]..[784,26252+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[784,26252+14]..[784,26252+23])
                                      Pexp_construct "Goto" (src/invariant.ml[784,26252+15]..[784,26252+19])
                                      Some
                                        expression (src/invariant.ml[784,26252+20]..[784,26252+22])
                                          Pexp_ident "nt" (src/invariant.ml[784,26252+20]..[784,26252+22])
                                  <arg>
                                  Nolabel
                                    expression (src/invariant.ml[784,26252+24]..[784,26252+30])
                                      Pexp_ident "origin" (src/invariant.ml[784,26252+24]..[784,26252+30])
                                ]
                          <case>
                            pattern (src/invariant.ml[785,26283+6]..[785,26283+14])
                              Ppat_construct "Goto" (src/invariant.ml[785,26283+6]..[785,26283+10])
                              Some
                                []
                                pattern (src/invariant.ml[785,26283+11]..[785,26283+14])
                                  Ppat_var "_nt" (src/invariant.ml[785,26283+11]..[785,26283+14])
                            expression (src/invariant.ml[788,26433+8]..[788,26433+10])
                              Pexp_construct "()" (src/invariant.ml[788,26433+8]..[788,26433+10])
                              None
                        ]
            ]
        ]
  structure_item (src/invariant.ml[794,26485+0]..[798,26619+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[794,26485+4]..[794,26485+12])
          Ppat_var "solution" (src/invariant.ml[794,26485+4]..[794,26485+12])
        core_type (src/invariant.ml[794,26485+15]..[794,26485+55])
          Ptyp_constr "Lazy.t" (src/invariant.ml[794,26485+49]..[794,26485+55])
          [
            core_type (src/invariant.ml[794,26485+16]..[794,26485+47])
              Ptyp_arrow
              Nolabel
              core_type (src/invariant.ml[794,26485+16]..[794,26485+26])
                Ptyp_constr "G.variable" (src/invariant.ml[794,26485+16]..[794,26485+26])
                []
              core_type (src/invariant.ml[794,26485+30]..[794,26485+47])
                Ptyp_constr "option" (src/invariant.ml[794,26485+41]..[794,26485+47])
                [
                  core_type (src/invariant.ml[794,26485+30]..[794,26485+40])
                    Ptyp_constr "P.property" (src/invariant.ml[794,26485+30]..[794,26485+40])
                    []
                ]
          ]
        expression (src/invariant.ml[795,26543+2]..[798,26619+3])
          Pexp_lazy
          expression (src/invariant.ml[795,26543+7]..[798,26619+3])
            Pexp_letmodule "D" (src/invariant.ml[796,26552+15]..[796,26552+16])
            module_expr (src/invariant.ml[796,26552+19]..[796,26552+48])
              Pmod_apply
              module_expr (src/invariant.ml[796,26552+19]..[796,26552+45])
                Pmod_apply
                module_expr (src/invariant.ml[796,26552+19]..[796,26552+42])
                  Pmod_apply
                  module_expr (src/invariant.ml[796,26552+19]..[796,26552+39])
                    Pmod_ident "Fix.DataFlow.ForType" (src/invariant.ml[796,26552+19]..[796,26552+39])
                  module_expr (src/invariant.ml[796,26552+40]..[796,26552+41])
                    Pmod_ident "G" (src/invariant.ml[796,26552+40]..[796,26552+41])
                module_expr (src/invariant.ml[796,26552+43]..[796,26552+44])
                  Pmod_ident "P" (src/invariant.ml[796,26552+43]..[796,26552+44])
              module_expr (src/invariant.ml[796,26552+46]..[796,26552+47])
                Pmod_ident "G" (src/invariant.ml[796,26552+46]..[796,26552+47])
            expression (src/invariant.ml[797,26604+4]..[797,26604+14])
              Pexp_ident "D.solution" (src/invariant.ml[797,26604+4]..[797,26604+14])
    ]
  structure_item (src/invariant.ml[802,26698+0]..[829,27203+3])
    Pstr_module
    "Origin" (src/invariant.ml[802,26698+7]..[802,26698+13])
      module_expr (src/invariant.ml[802,26698+16]..[829,27203+3])
        Pmod_structure
        [
          structure_item (src/invariant.ml[804,26722+2]..[807,26785+21])
            Pstr_type Rec
            [
              type_declaration "origin" (src/invariant.ml[804,26722+7]..[804,26722+13]) (src/invariant.ml[804,26722+2]..[807,26785+21])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (src/invariant.ml[805,26738+4]..[805,26738+10])
                        "Dead" (src/invariant.ml[805,26738+6]..[805,26738+10])
                        []
                        None
                      (src/invariant.ml[806,26749+4]..[806,26749+35])
                        "SingleOrigin" (src/invariant.ml[806,26749+6]..[806,26749+18])
                        [
                          core_type (src/invariant.ml[806,26749+22]..[806,26749+35])
                            Ptyp_constr "Nonterminal.t" (src/invariant.ml[806,26749+22]..[806,26749+35])
                            []
                        ]
                        None
                      (src/invariant.ml[807,26785+4]..[807,26785+21])
                        "MultipleOrigins" (src/invariant.ml[807,26785+6]..[807,26785+21])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[809,26808+2]..[816,26952+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[809,26808+6]..[809,26808+13])
                  Ppat_var "convert" (src/invariant.ml[809,26808+6]..[809,26808+13])
                expression (src/invariant.ml[809,26808+14]..[816,26952+23]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[809,26808+14]..[809,26808+16])
                    Ppat_var "op" (src/invariant.ml[809,26808+14]..[809,26808+16])
                  expression (src/invariant.ml[810,26827+4]..[816,26952+23])
                    Pexp_match
                    expression (src/invariant.ml[810,26827+10]..[810,26827+12])
                      Pexp_ident "op" (src/invariant.ml[810,26827+10]..[810,26827+12])
                    [
                      <case>
                        pattern (src/invariant.ml[811,26845+6]..[811,26845+10])
                          Ppat_construct "None" (src/invariant.ml[811,26845+6]..[811,26845+10])
                          None
                        expression (src/invariant.ml[812,26859+8]..[812,26859+12])
                          Pexp_construct "Dead" (src/invariant.ml[812,26859+8]..[812,26859+12])
                          None
                      <case>
                        pattern (src/invariant.ml[813,26872+6]..[813,26872+30])
                          Ppat_construct "Some" (src/invariant.ml[813,26872+6]..[813,26872+10])
                          Some
                            []
                            pattern (src/invariant.ml[813,26872+11]..[813,26872+30])
                              Ppat_construct "P.SingleOrigin" (src/invariant.ml[813,26872+12]..[813,26872+26])
                              Some
                                []
                                pattern (src/invariant.ml[813,26872+27]..[813,26872+29])
                                  Ppat_var "nt" (src/invariant.ml[813,26872+27]..[813,26872+29])
                        expression (src/invariant.ml[814,26906+8]..[814,26906+23])
                          Pexp_construct "SingleOrigin" (src/invariant.ml[814,26906+8]..[814,26906+20])
                          Some
                            expression (src/invariant.ml[814,26906+21]..[814,26906+23])
                              Pexp_ident "nt" (src/invariant.ml[814,26906+21]..[814,26906+23])
                      <case>
                        pattern (src/invariant.ml[815,26930+6]..[815,26930+18])
                          Ppat_construct "Some" (src/invariant.ml[815,26930+6]..[815,26930+10])
                          Some
                            []
                            pattern (src/invariant.ml[815,26930+11]..[815,26930+18])
                              Ppat_construct "P.Top" (src/invariant.ml[815,26930+12]..[815,26930+17])
                              None
                        expression (src/invariant.ml[816,26952+8]..[816,26952+23])
                          Pexp_construct "MultipleOrigins" (src/invariant.ml[816,26952+8]..[816,26952+23])
                          None
                    ]
            ]
          structure_item (src/invariant.ml[820,27004+2]..[821,27021+46])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[820,27004+6]..[820,27004+9])
                  Ppat_var "run" (src/invariant.ml[820,27004+6]..[820,27004+9])
                expression (src/invariant.ml[820,27004+10]..[821,27021+46]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[820,27004+10]..[820,27004+14])
                    Ppat_var "node" (src/invariant.ml[820,27004+10]..[820,27004+14])
                  expression (src/invariant.ml[821,27021+4]..[821,27021+46])
                    Pexp_apply
                    expression (src/invariant.ml[821,27021+4]..[821,27021+11])
                      Pexp_ident "convert" (src/invariant.ml[821,27021+4]..[821,27021+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[821,27021+12]..[821,27021+46])
                          Pexp_apply
                          expression (src/invariant.ml[821,27021+13]..[821,27021+23])
                            Pexp_ident "Lazy.force" (src/invariant.ml[821,27021+13]..[821,27021+23])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[821,27021+24]..[821,27021+32])
                                Pexp_ident "solution" (src/invariant.ml[821,27021+24]..[821,27021+32])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[821,27021+33]..[821,27021+45])
                                Pexp_construct "G.Run" (src/invariant.ml[821,27021+34]..[821,27021+39])
                                Some
                                  expression (src/invariant.ml[821,27021+40]..[821,27021+44])
                                    Pexp_ident "node" (src/invariant.ml[821,27021+40]..[821,27021+44])
                          ]
                    ]
            ]
          structure_item (src/invariant.ml[823,27069+2]..[824,27089+49])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[823,27069+6]..[823,27069+12])
                  Ppat_var "reduce" (src/invariant.ml[823,27069+6]..[823,27069+12])
                expression (src/invariant.ml[823,27069+13]..[824,27089+49]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[823,27069+13]..[823,27069+17])
                    Ppat_var "prod" (src/invariant.ml[823,27069+13]..[823,27069+17])
                  expression (src/invariant.ml[824,27089+4]..[824,27089+49])
                    Pexp_apply
                    expression (src/invariant.ml[824,27089+4]..[824,27089+11])
                      Pexp_ident "convert" (src/invariant.ml[824,27089+4]..[824,27089+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[824,27089+12]..[824,27089+49])
                          Pexp_apply
                          expression (src/invariant.ml[824,27089+13]..[824,27089+23])
                            Pexp_ident "Lazy.force" (src/invariant.ml[824,27089+13]..[824,27089+23])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[824,27089+24]..[824,27089+32])
                                Pexp_ident "solution" (src/invariant.ml[824,27089+24]..[824,27089+32])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[824,27089+33]..[824,27089+48])
                                Pexp_construct "G.Reduce" (src/invariant.ml[824,27089+34]..[824,27089+42])
                                Some
                                  expression (src/invariant.ml[824,27089+43]..[824,27089+47])
                                    Pexp_ident "prod" (src/invariant.ml[824,27089+43]..[824,27089+47])
                          ]
                    ]
            ]
          structure_item (src/invariant.ml[826,27140+2]..[827,27156+45])
            Pstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[826,27140+6]..[826,27140+10])
                  Ppat_var "goto" (src/invariant.ml[826,27140+6]..[826,27140+10])
                expression (src/invariant.ml[826,27140+11]..[827,27156+45]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (src/invariant.ml[826,27140+11]..[826,27140+13])
                    Ppat_var "nt" (src/invariant.ml[826,27140+11]..[826,27140+13])
                  expression (src/invariant.ml[827,27156+4]..[827,27156+45])
                    Pexp_apply
                    expression (src/invariant.ml[827,27156+4]..[827,27156+11])
                      Pexp_ident "convert" (src/invariant.ml[827,27156+4]..[827,27156+11])
                    [
                      <arg>
                      Nolabel
                        expression (src/invariant.ml[827,27156+12]..[827,27156+45])
                          Pexp_apply
                          expression (src/invariant.ml[827,27156+13]..[827,27156+23])
                            Pexp_ident "Lazy.force" (src/invariant.ml[827,27156+13]..[827,27156+23])
                          [
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[827,27156+24]..[827,27156+32])
                                Pexp_ident "solution" (src/invariant.ml[827,27156+24]..[827,27156+32])
                            <arg>
                            Nolabel
                              expression (src/invariant.ml[827,27156+33]..[827,27156+44])
                                Pexp_construct "G.Goto" (src/invariant.ml[827,27156+34]..[827,27156+40])
                                Some
                                  expression (src/invariant.ml[827,27156+41]..[827,27156+43])
                                    Pexp_ident "nt" (src/invariant.ml[827,27156+41]..[827,27156+43])
                          ]
                    ]
            ]
        ]
]

open Grammar
module C = Conflict
module SSy = (StackSymbols.Run)()
open SSy
module SSt = (StackStates.Run)(SSy)
open SSt
let () = Error.logC 3 (dump "short")
let rep : bool UnionFind.point array =
  Array.init Lr1.n (fun _ -> UnionFind.fresh false)
let represented state = rep.(Lr1.number state)
let represent state = UnionFind.set (represented state) true
let represents states = represent (Lr1.NodeSet.choose states)
let share (v : property) =
  Array.iter
    (fun states ->
       let dummy = UnionFind.fresh false in
       Lr1.NodeSet.iter
         (fun state -> UnionFind.union dummy (represented state)) states) v
let () =
  Lr1.iter (fun node -> share (stack_states node));
  Production.iter (fun prod -> share (production_states prod))
let () =
  Nonterminal.iter
    (fun nt ->
       let count =
         Lr1.targets (fun count -> fun _ -> fun _ -> count + 1) 0
           (Symbol.N nt) in
       if count > 1
       then
         Lr1.targets
           (fun () -> fun sources -> fun _ -> List.iter represent sources) ()
           (Symbol.N nt))
let handler state =
  try
    let _ = SymbolMap.find (Symbol.T Terminal.error) (Lr1.transitions state) in
    true
  with
  | Not_found ->
      (try
         let _ = TerminalMap.lookup Terminal.error (Lr1.reductions state) in
         true
       with | Not_found -> false)
let handlers states = Lr1.NodeSet.exists handler states
let () =
  Lr1.iter
    (fun node ->
       let v = stack_states node in
       Array.iter
         (fun states ->
            if ((Lr1.NodeSet.cardinal states) >= 2) && (handlers states)
            then represents states) v)
let () =
  Production.iterx
    (fun prod ->
       if Action.has_syntaxerror (Production.action prod)
       then
         let sites = Lr1.production_where prod in
         let length = Production.length prod in
         (if length = 0
          then Lr1.NodeSet.iter represent sites
          else
            (let states = (production_states prod).(0) in represents states)))
let represented state =
  Settings.represent_states || (UnionFind.get (represented state))
let representeds states =
  Settings.represent_states ||
    (if Lr1.NodeSet.is_empty states
     then false
     else represented (Lr1.NodeSet.choose states))
let () =
  Error.logC 1
    (fun f ->
       let count =
         Lr1.fold
           (fun count ->
              fun node -> if represented node then count + 1 else count) 0 in
       Printf.fprintf f "%d out of %d states are represented.\n" count Lr1.n)
let () =
  Error.logC 3
    (fun f ->
       Lr1.iter
         (fun node ->
            Printf.fprintf f "represented(%s) = %b\n" (Lr1.print node)
              (represented node)))
open Keyword
type variable = (Symbol.t * where)
module M =
  (struct
     type key = variable
     type 'data t =
       {
       mutable startp: 'data SymbolMap.t ;
       mutable endp: 'data SymbolMap.t }
     open SymbolMap
     let create () = { startp = empty; endp = empty }
     let clear m = m.startp <- empty; m.endp <- empty
     let add (sym, where) data m =
       match where with
       | WhereStart -> m.startp <- (add sym data m.startp)
       | WhereEnd -> m.endp <- (add sym data m.endp)
       | WhereSymbolStart -> assert false
     let find (sym, where) m =
       match where with
       | WhereStart -> find sym m.startp
       | WhereEnd -> find sym m.endp
       | WhereSymbolStart -> assert false
     let iter f m =
       iter (fun sym -> f (sym, WhereStart)) m.startp;
       iter (fun sym -> f (sym, WhereEnd)) m.endp
   end : Fix.IMPERATIVE_MAPS with type  key =  variable)
module F = ((FixSolver.Make)(M))(Fix.Prop.Boolean)
let () =
  Production.iterx
    (fun prod ->
       let (nt, rhs) = Production.def prod
       and ids = Production.identifiers prod
       and action = Production.action prod in
       let length = Array.length rhs in
       if length > 0
       then
         (F.record_VarVar ((Symbol.N nt), WhereStart) ((rhs.(0)), WhereStart);
          F.record_VarVar ((Symbol.N nt), WhereEnd)
            ((rhs.(length - 1)), WhereEnd));
       KeywordSet.iter
         (function
          | SyntaxError -> ()
          | Position (Before, _, _) -> ()
          | Position (Left, _, _) -> assert false
          | Position (_, _, FlavorLocation) -> assert false
          | Position (RightNamed _, WhereSymbolStart, _) -> assert false
          | Position (RightNamed id, where, _) ->
              Array.iteri
                (fun i ->
                   fun id' ->
                     if id = id' then F.record_ConVar true ((rhs.(i)), where))
                ids) (Action.keywords action));
  Lr1.iterx
    (fun s ->
       let sym = Option.force (Lr1.incoming_symbol s) in
       TerminalMap.iter
         (fun _ ->
            fun prods ->
              let prod = Misc.single prods in
              let (nt, rhs) = Production.def prod in
              let length = Array.length rhs in
              if length = 0
              then
                (F.record_VarVar ((Symbol.N nt), WhereStart) (sym, WhereEnd);
                 F.record_VarVar ((Symbol.N nt), WhereEnd) (sym, WhereEnd)))
         (Lr1.reductions s);
       if Lr1.has_beforeend s then F.record_ConVar true (sym, WhereEnd))
let track : variable -> bool option =
  let module S = (F.Solve)() in S.solution
let track : variable -> bool = fun x -> Option.value (track x) ~default:false
let startp symbol =
  Settings.represent_positions || (track (symbol, WhereStart))
let endp symbol = Settings.represent_positions || (track (symbol, WhereEnd))
let for_every_symbol (f : Symbol.t -> unit) =
  (Terminal.iter (fun t -> f (Symbol.T t));
   Nonterminal.iter (fun nt -> f (Symbol.N nt)) : unit)
let sum_over_every_symbol (f : Symbol.t -> bool) =
  (let c = ref 0 in
   for_every_symbol (fun sym -> if f sym then c := ((!c) + 1)); !c : 
  int)
let () =
  Error.logC 1
    (fun f ->
       Printf.fprintf f
         "%d out of %d symbols keep track of their start position.\n%d out of %d symbols keep track of their end position.\n"
         (sum_over_every_symbol startp) (Terminal.n + Nonterminal.n)
         (sum_over_every_symbol endp) (Terminal.n + Nonterminal.n))
type cell =
  {
  symbol: Symbol.t ;
  states: Lr1.NodeSet.t ;
  holds_semv: bool ;
  holds_state: bool ;
  holds_startp: bool ;
  holds_endp: bool }
type word = cell array
let has_semv symbol =
  Settings.represent_values ||
    (match symbol with
     | Symbol.N _nt -> true
     | Symbol.T tok ->
         (match Terminal.ocamltype tok with
          | None -> false
          | Some _ocamltype -> true))
let cell symbol states =
  let holds_semv = has_semv symbol in
  let holds_state = representeds states in
  let (holds_startp, holds_endp) = ((startp symbol), (endp symbol)) in
  { symbol; states; holds_semv; holds_state; holds_startp; holds_endp }
let similar cell1 cell2 =
  (Symbol.equal cell1.symbol cell2.symbol) &&
    (cell1.holds_state = cell2.holds_state)
let pop = MArray.pop
let fold_top f default w =
  let n = Array.length w in if n = 0 then default else f (w.(n - 1))
module type STACK  =
  sig
    val stack : Lr1.node -> word[@@ocaml.doc
                                  "[stack s] is the known suffix of the stack at state [s]. "]
    val prodstack : Production.index -> word[@@ocaml.doc
                                              "[prodstack prod] is the known suffix of the stack at a state where\n     production [prod] can be reduced. In the short invariant, the length of\n     this suffix is [Production.length prod]. In the long invariant, its\n     length can be greater. If there are no states where [prod] can be\n     reduced, then every cell contains an empty set of states. "]
    val gotostack : Nonterminal.t -> word[@@ocaml.doc
                                           "[gotostack nt] is the known suffix of the stack at a state where an\n     edge labeled [nt] has just been followed. In the short invariant, the\n     length of this suffix is [1]: indeed, it consists of just one cell,\n     associated with the symbol [nt]. In the long invariant, its length can\n     be greater. "]
  end
let publish tabulate foo bar cell =
  tabulate
    (fun thing ->
       let (foos, bars) = ((foo thing), (bar thing)) in
       assert ((Array.length foos) >= (Array.length bars));
       (let k = Array.length bars in
        let foos = MArray.truncate k foos in
        Array.init k (fun i -> cell (foos.(i)) (bars.(i)))))
let stack : Lr1.node -> word =
  publish Lr1.tabulate stack_symbols stack_states cell
let prodstack : Production.index -> word =
  publish Production.tabulate production_symbols production_states cell
let gotostack : Nonterminal.t -> word =
  publish Nonterminal.tabulate goto_symbols goto_states cell
type state =
  | Represented 
  | UnRepresented of Lr1.node 
type instruction =
  | Die 
  | DownTo of word * state 
let rewind node =
  (let w = stack node in
   let rec rewind w =
     if (Array.length w) = 0
     then Die
     else
       (let { states;_} as cell = MArray.last w in
        let w = MArray.pop w in
        if representeds states
        then DownTo ([|cell|], Represented)
        else
          if handlers states
          then
            (assert ((Lr1.NodeSet.cardinal states) = 1);
             (let state = Lr1.NodeSet.choose states in
              DownTo ([|cell|], (UnRepresented state))))
          else
            (match rewind w with
             | Die -> Die
             | DownTo (w, st) -> DownTo ((MArray.push w cell), st))) in
   rewind w : instruction)
let universal symbol =
  Lr1.fold
    (fun universal ->
       fun s ->
         universal &&
           (if represented s
            then SymbolMap.mem symbol (Lr1.transitions s)
            else true)) true
let errorpeekers =
  let nts : SymbolSet.t =
    Lr1.fold
      (fun nts ->
         fun node ->
           try
             let prods =
               TerminalMap.lookup Terminal.error (Lr1.reductions node) in
             let prod = Misc.single prods in
             let nt = Production.nt prod in SymbolSet.add (Symbol.N nt) nts
           with | Not_found -> nts) SymbolSet.empty in
  SymbolSet.fold
    (fun nt ->
       fun errorpeekers ->
         Lr1.NodeSet.union errorpeekers (Lr1.all_targets nt)) nts
    Lr1.NodeSet.empty
let errorpeeker node = Lr1.NodeSet.mem node errorpeekers
let () = Time.tick "Constructing the invariant"
module Long() =
  struct
    module SSy = (StackSymbols.Long)()
    module SSt = (StackStates.Run)(SSy)
    open SSy
    open SSt
    let unrepresented node = not (represented node)
    let equi_represented nodes =
      (Lr1.NodeSet.for_all represented nodes) ||
        (Lr1.NodeSet.for_all unrepresented nodes)
    let validate states =
      MArray.greatest_suffix_forall equi_represented states
    let stack_states s = validate @@ (stack_states s)
    let production_states prod = validate @@ (production_states prod)
    let goto_states nt = validate @@ (goto_states nt)
    let () = Error.logC 3 (dump "long")
    let stack : Lr1.node -> word =
      publish Lr1.tabulate stack_symbols stack_states cell
    let prodstack : Production.index -> word =
      publish Production.tabulate production_symbols production_states cell
    let gotostack : Nonterminal.t -> word =
      publish Nonterminal.tabulate goto_symbols goto_states cell
    let () = Time.tick "Constructing the long invariant"
  end
module P =
  struct
    type property =
      | SingleOrigin of Nonterminal.t 
      | Top 
    let leq_join p1 p2 =
      match (p1, p2) with
      | (_, Top) | (Top, _) -> Top
      | (SingleOrigin start1, SingleOrigin start2) ->
          if Nonterminal.equal start1 start2 then p2 else Top
  end
module G =
  struct
    include P
    type variable =
      | Run of Lr1.node 
      | Reduce of Production.index 
      | Goto of Nonterminal.t 
    type t = variable
    let foreach_root yield =
      Lr1.entry |>
        (ProductionMap.iter
           (fun prod ->
              fun node ->
                let nt = Option.force (Production.classify prod) in
                yield (Run node) (SingleOrigin nt)))
    let foreach_successor v origin yield =
      match v with
      | Run node ->
          ((Lr1.transitions node) |>
             (SymbolMap.iter
                (fun _label -> fun node' -> yield (Run node') origin));
           (Lr1.reductions node) |>
             (TerminalMap.iter
                (fun _tok ->
                   fun prods ->
                     let prod = Misc.single prods in
                     yield (Reduce prod) origin)))
      | Reduce prod -> let nt = Production.nt prod in yield (Goto nt) origin
      | Goto _nt -> ()
  end
let solution : (G.variable -> P.property option) Lazy.t =
  lazy (let module D = (((Fix.DataFlow.ForType)(G))(P))(G) in D.solution)
module Origin =
  struct
    type origin =
      | Dead 
      | SingleOrigin of Nonterminal.t 
      | MultipleOrigins 
    let convert op =
      match op with
      | None -> Dead
      | Some (P.SingleOrigin nt) -> SingleOrigin nt
      | Some (P.Top) -> MultipleOrigins
    let run node = convert (Lazy.force solution (G.Run node))
    let reduce prod = convert (Lazy.force solution (G.Reduce prod))
    let goto nt = convert (Lazy.force solution (G.Goto nt))
  end
[
  structure_item (src/invariant.ml[17,1121+0]..src/invariant.ml[17,1121+12])
    Tstr_open Fresh
    module_expr (src/invariant.ml[17,1121+5]..src/invariant.ml[17,1121+12])
      Tmod_ident "Dune__exe!.Grammar"
  structure_item (src/invariant.ml[18,1134+0]..src/invariant.ml[18,1134+19])
    Tstr_module
    C/413
      module_expr (src/invariant.ml[18,1134+11]..src/invariant.ml[18,1134+19])
        Tmod_ident "Dune__exe!.Conflict"
  structure_item (src/invariant.ml[24,1417+0]..src/invariant.ml[25,1430+20])
    Tstr_module
    SSy/422
      module_expr (src/invariant.ml[25,1430+2]..src/invariant.ml[25,1430+18])
        Tmod_apply_unit
        module_expr (src/invariant.ml[25,1430+2]..src/invariant.ml[25,1430+18])
          module_expr (src/invariant.ml[25,1430+2]..src/invariant.ml[25,1430+18])
            Tmod_ident "Dune__exe!.StackSymbols.Run"
  structure_item (src/invariant.ml[27,1452+0]..src/invariant.ml[27,1452+8])
    Tstr_open Fresh
    module_expr (src/invariant.ml[27,1452+5]..src/invariant.ml[27,1452+8])
      Tmod_ident "SSy/422"
  structure_item (src/invariant.ml[32,1620+0]..src/invariant.ml[33,1633+22])
    Tstr_module
    SSt/450
      module_expr (src/invariant.ml[33,1633+2]..src/invariant.ml[33,1633+22])
        Tmod_apply
        module_expr (src/invariant.ml[33,1633+2]..src/invariant.ml[33,1633+17])
          module_expr (src/invariant.ml[33,1633+2]..src/invariant.ml[33,1633+17])
            Tmod_ident "Dune__exe!.StackStates.Run"
        module_expr (src/invariant.ml[33,1633+18]..src/invariant.ml[33,1633+21])
          Tmod_ident "SSy/422"
  structure_item (src/invariant.ml[35,1657+0]..src/invariant.ml[35,1657+8])
    Tstr_open Fresh
    module_expr (src/invariant.ml[35,1657+5]..src/invariant.ml[35,1657+8])
      Tmod_ident "SSt/450"
  structure_item (src/invariant.ml[40,1819+0]..src/invariant.ml[41,1828+29])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[40,1819+4]..src/invariant.ml[40,1819+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[41,1828+2]..src/invariant.ml[41,1828+29])
          Texp_apply
          expression (src/invariant.ml[41,1828+2]..src/invariant.ml[41,1828+12])
            Texp_ident "Dune__exe!.Error.logC"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[41,1828+13]..src/invariant.ml[41,1828+14])
                Texp_constant Const_int 3
            <arg>
              Nolabel
              expression (src/invariant.ml[41,1828+15]..src/invariant.ml[41,1828+29])
                Texp_apply
                expression (src/invariant.ml[41,1828+16]..src/invariant.ml[41,1828+20])
                  Texp_ident "SSt/450.dump"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[41,1828+21]..src/invariant.ml[41,1828+28])
                      Texp_constant Const_string("short",(src/invariant.ml[41,1828+22]..src/invariant.ml[41,1828+27]),None)
                ]
          ]
    ]
  structure_item (src/invariant.ml[73,3278+0]..src/invariant.ml[74,3317+51])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[73,3278+4]..src/invariant.ml[73,3278+7])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+36])
              Ttyp_constr "array/8!"
              [
                core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+30])
                  Ttyp_constr "Dune__exe!.UnionFind.point"
                  [
                    core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+14])
                      Ttyp_constr "bool/5!"
                      []
                  ]
              ]
          Tpat_alias "rep/472"
          pattern (src/invariant.ml[73,3278+4]..src/invariant.ml[73,3278+7])
            Tpat_any
        expression (src/invariant.ml[74,3317+2]..src/invariant.ml[74,3317+51])
          extra
            Texp_constraint
            core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+36])
              Ttyp_constr "array/8!"
              [
                core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+30])
                  Ttyp_constr "Dune__exe!.UnionFind.point"
                  [
                    core_type (src/invariant.ml[73,3278+10]..src/invariant.ml[73,3278+14])
                      Ttyp_constr "bool/5!"
                      []
                  ]
              ]
          Texp_apply
          expression (src/invariant.ml[74,3317+2]..src/invariant.ml[74,3317+12])
            Texp_ident "Stdlib!.Array.init"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[74,3317+13]..src/invariant.ml[74,3317+18])
                Texp_ident "Dune__exe!.Lr1.n"
            <arg>
              Nolabel
              expression (src/invariant.ml[74,3317+19]..src/invariant.ml[74,3317+51])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[74,3317+24]..src/invariant.ml[74,3317+25])
                      Tpat_any
                    expression (src/invariant.ml[74,3317+29]..src/invariant.ml[74,3317+50])
                      Texp_apply
                      expression (src/invariant.ml[74,3317+29]..src/invariant.ml[74,3317+44])
                        Texp_ident "Dune__exe!.UnionFind.fresh"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[74,3317+45]..src/invariant.ml[74,3317+50])
                            Texp_construct "false"
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[78,3385+0]..src/invariant.ml[79,3409+24])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[78,3385+4]..src/invariant.ml[78,3385+15])
          Tpat_var "represented/569"
        expression (src/invariant.ml[78,3385+16]..src/invariant.ml[79,3409+24]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[78,3385+16]..src/invariant.ml[78,3385+21])
                Tpat_var "state/571"
              expression (src/invariant.ml[79,3409+2]..src/invariant.ml[79,3409+24])
                Texp_apply
                expression (src/invariant.ml[79,3409+2]..src/invariant.ml[79,3409+24]) ghost
                  Texp_ident "Stdlib!.Array.get"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[79,3409+2]..src/invariant.ml[79,3409+5])
                      Texp_ident "rep/472"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[79,3409+7]..src/invariant.ml[79,3409+23])
                      Texp_apply
                      expression (src/invariant.ml[79,3409+7]..src/invariant.ml[79,3409+17])
                        Texp_ident "Dune__exe!.Lr1.number"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[79,3409+18]..src/invariant.ml[79,3409+23])
                            Texp_ident "state/571"
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[83,3451+0]..src/invariant.ml[84,3473+40])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[83,3451+4]..src/invariant.ml[83,3451+13])
          Tpat_var "represent/613"
        expression (src/invariant.ml[83,3451+14]..src/invariant.ml[84,3473+40]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[83,3451+14]..src/invariant.ml[83,3451+19])
                Tpat_var "state/615"
              expression (src/invariant.ml[84,3473+2]..src/invariant.ml[84,3473+40])
                Texp_apply
                expression (src/invariant.ml[84,3473+2]..src/invariant.ml[84,3473+15])
                  Texp_ident "Dune__exe!.UnionFind.set"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[84,3473+16]..src/invariant.ml[84,3473+35])
                      Texp_apply
                      expression (src/invariant.ml[84,3473+17]..src/invariant.ml[84,3473+28])
                        Texp_ident "represented/569"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[84,3473+29]..src/invariant.ml[84,3473+34])
                            Texp_ident "state/615"
                      ]
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[84,3473+36]..src/invariant.ml[84,3473+40])
                      Texp_construct "true"
                      []
                ]
          ]
    ]
  structure_item (src/invariant.ml[86,3515+0]..src/invariant.ml[87,3539+39])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[86,3515+4]..src/invariant.ml[86,3515+14])
          Tpat_var "represents/616"
        expression (src/invariant.ml[86,3515+15]..src/invariant.ml[87,3539+39]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[86,3515+15]..src/invariant.ml[86,3515+21])
                Tpat_var "states/618"
              expression (src/invariant.ml[87,3539+2]..src/invariant.ml[87,3539+39])
                Texp_apply
                expression (src/invariant.ml[87,3539+2]..src/invariant.ml[87,3539+11])
                  Texp_ident "represent/613"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[87,3539+12]..src/invariant.ml[87,3539+39])
                      Texp_apply
                      expression (src/invariant.ml[87,3539+13]..src/invariant.ml[87,3539+31])
                        Texp_ident "Dune__exe!.Lr1.NodeSet.choose"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[87,3539+32]..src/invariant.ml[87,3539+38])
                            Texp_ident "states/618"
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[91,3616+0]..src/invariant.ml[97,3808+5])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[91,3616+4]..src/invariant.ml[91,3616+9])
          Tpat_var "share/713"
        expression (src/invariant.ml[91,3616+10]..src/invariant.ml[97,3808+5]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[91,3616+11]..src/invariant.ml[91,3616+12])
                extra
                  Tpat_extra_constraint
                  core_type (src/invariant.ml[91,3616+15]..src/invariant.ml[91,3616+23])
                    Ttyp_constr "SSt/450.property"
                    []
                Tpat_alias "v/715"
                pattern (src/invariant.ml[91,3616+11]..src/invariant.ml[91,3616+12])
                  Tpat_any
              expression (src/invariant.ml[92,3643+2]..src/invariant.ml[97,3808+5])
                Texp_apply
                expression (src/invariant.ml[92,3643+2]..src/invariant.ml[92,3643+12])
                  Texp_ident "Stdlib!.Array.iter"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[92,3643+13]..src/invariant.ml[97,3808+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/invariant.ml[92,3643+18]..src/invariant.ml[92,3643+24])
                            Tpat_var "states/716"
                          expression (src/invariant.ml[93,3671+4]..src/invariant.ml[96,3795+12])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/invariant.ml[93,3671+8]..src/invariant.ml[93,3671+13])
                                  Tpat_var "dummy/717"
                                expression (src/invariant.ml[93,3671+16]..src/invariant.ml[93,3671+37])
                                  Texp_apply
                                  expression (src/invariant.ml[93,3671+16]..src/invariant.ml[93,3671+31])
                                    Texp_ident "Dune__exe!.UnionFind.fresh"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[93,3671+32]..src/invariant.ml[93,3671+37])
                                        Texp_construct "false"
                                        []
                                  ]
                            ]
                            expression (src/invariant.ml[94,3712+4]..src/invariant.ml[96,3795+12])
                              Texp_apply
                              expression (src/invariant.ml[94,3712+4]..src/invariant.ml[94,3712+20])
                                Texp_ident "Dune__exe!.Lr1.NodeSet.iter"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[94,3712+21]..src/invariant.ml[96,3795+5])
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/invariant.ml[94,3712+26]..src/invariant.ml[94,3712+31])
                                          Tpat_var "state/718"
                                        expression (src/invariant.ml[95,3747+6]..src/invariant.ml[95,3747+47])
                                          Texp_apply
                                          expression (src/invariant.ml[95,3747+6]..src/invariant.ml[95,3747+21])
                                            Texp_ident "Dune__exe!.UnionFind.union"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[95,3747+22]..src/invariant.ml[95,3747+27])
                                                Texp_ident "dummy/717"
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[95,3747+28]..src/invariant.ml[95,3747+47])
                                                Texp_apply
                                                expression (src/invariant.ml[95,3747+29]..src/invariant.ml[95,3747+40])
                                                  Texp_ident "represented/569"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[95,3747+41]..src/invariant.ml[95,3747+46])
                                                      Texp_ident "state/718"
                                                ]
                                          ]
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[96,3795+6]..src/invariant.ml[96,3795+12])
                                    Texp_ident "states/716"
                              ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[97,3808+4]..src/invariant.ml[97,3808+5])
                      Texp_ident "v/715"
                ]
          ]
    ]
  structure_item (src/invariant.ml[99,3815+0]..src/invariant.ml[105,3949+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[99,3815+4]..src/invariant.ml[99,3815+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[100,3824+2]..src/invariant.ml[105,3949+3])
          Texp_sequence
          expression (src/invariant.ml[100,3824+2]..src/invariant.ml[102,3878+3])
            Texp_apply
            expression (src/invariant.ml[100,3824+2]..src/invariant.ml[100,3824+10])
              Texp_ident "Dune__exe!.Lr1.iter"
            [
              <arg>
                Nolabel
                expression (src/invariant.ml[100,3824+11]..src/invariant.ml[102,3878+3])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[100,3824+16]..src/invariant.ml[100,3824+20])
                        Tpat_var "node/719"
                      expression (src/invariant.ml[101,3848+4]..src/invariant.ml[101,3848+29])
                        Texp_apply
                        expression (src/invariant.ml[101,3848+4]..src/invariant.ml[101,3848+9])
                          Texp_ident "share/713"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[101,3848+10]..src/invariant.ml[101,3848+29])
                              Texp_apply
                              expression (src/invariant.ml[101,3848+11]..src/invariant.ml[101,3848+23])
                                Texp_ident "SSt/450.stack_states"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[101,3848+24]..src/invariant.ml[101,3848+28])
                                    Texp_ident "node/719"
                              ]
                        ]
                  ]
            ]
          expression (src/invariant.ml[103,3883+2]..src/invariant.ml[105,3949+3])
            Texp_apply
            expression (src/invariant.ml[103,3883+2]..src/invariant.ml[103,3883+17])
              Texp_ident "Dune__exe!.Grammar.Production.iter"
            [
              <arg>
                Nolabel
                expression (src/invariant.ml[103,3883+18]..src/invariant.ml[105,3949+3])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[103,3883+23]..src/invariant.ml[103,3883+27])
                        Tpat_var "prod/771"
                      expression (src/invariant.ml[104,3914+4]..src/invariant.ml[104,3914+34])
                        Texp_apply
                        expression (src/invariant.ml[104,3914+4]..src/invariant.ml[104,3914+9])
                          Texp_ident "share/713"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[104,3914+10]..src/invariant.ml[104,3914+34])
                              Texp_apply
                              expression (src/invariant.ml[104,3914+11]..src/invariant.ml[104,3914+28])
                                Texp_ident "SSt/450.production_states"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[104,3914+29]..src/invariant.ml[104,3914+33])
                                    Texp_ident "prod/771"
                              ]
                        ]
                  ]
            ]
    ]
  structure_item (src/invariant.ml[109,3990+0]..src/invariant.ml[120,4252+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[109,3990+4]..src/invariant.ml[109,3990+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[110,3999+2]..src/invariant.ml[120,4252+3])
          Texp_apply
          expression (src/invariant.ml[110,3999+2]..src/invariant.ml[110,3999+18])
            Texp_ident "Dune__exe!.Grammar.Nonterminal.iter"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[110,3999+19]..src/invariant.ml[120,4252+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[110,3999+24]..src/invariant.ml[110,3999+26])
                      Tpat_var "nt/826"
                    expression (src/invariant.ml[111,4029+4]..src/invariant.ml[119,4227+24])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[111,4029+8]..src/invariant.ml[111,4029+13])
                            Tpat_var "count/827"
                          expression (src/invariant.ml[112,4045+6]..src/invariant.ml[114,4099+23])
                            Texp_apply
                            expression (src/invariant.ml[112,4045+6]..src/invariant.ml[112,4045+17])
                              Texp_ident "Dune__exe!.Lr1.targets"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[112,4045+18]..src/invariant.ml[114,4099+7])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/invariant.ml[112,4045+23]..src/invariant.ml[112,4045+28])
                                        Tpat_var "count/828"
                                      expression (src/invariant.ml[112,4045+29]..src/invariant.ml[113,4081+17]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[112,4045+29]..src/invariant.ml[112,4045+30])
                                              Tpat_any
                                            expression (src/invariant.ml[112,4045+31]..src/invariant.ml[113,4081+17]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/invariant.ml[112,4045+31]..src/invariant.ml[112,4045+32])
                                                    Tpat_any
                                                  expression (src/invariant.ml[113,4081+8]..src/invariant.ml[113,4081+17])
                                                    Texp_apply
                                                    expression (src/invariant.ml[113,4081+14]..src/invariant.ml[113,4081+15])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[113,4081+8]..src/invariant.ml[113,4081+13])
                                                          Texp_ident "count/828"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[113,4081+16]..src/invariant.ml[113,4081+17])
                                                          Texp_constant Const_int 1
                                                    ]
                                              ]
                                        ]
                                  ]
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[114,4099+8]..src/invariant.ml[114,4099+9])
                                  Texp_constant Const_int 0
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[114,4099+10]..src/invariant.ml[114,4099+23])
                                  Texp_construct "Symbol.N"
                                  [
                                    expression (src/invariant.ml[114,4099+20]..src/invariant.ml[114,4099+22])
                                      Texp_ident "nt/826"
                                  ]
                            ]
                      ]
                      expression (src/invariant.ml[116,4130+4]..src/invariant.ml[119,4227+24])
                        Texp_ifthenelse
                        expression (src/invariant.ml[116,4130+7]..src/invariant.ml[116,4130+16])
                          Texp_apply
                          expression (src/invariant.ml[116,4130+13]..src/invariant.ml[116,4130+14])
                            Texp_ident "Stdlib!.>"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[116,4130+7]..src/invariant.ml[116,4130+12])
                                Texp_ident "count/827"
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[116,4130+15]..src/invariant.ml[116,4130+16])
                                Texp_constant Const_int 1
                          ]
                        expression (src/invariant.ml[117,4152+6]..src/invariant.ml[119,4227+24])
                          Texp_apply
                          expression (src/invariant.ml[117,4152+6]..src/invariant.ml[117,4152+17])
                            Texp_ident "Dune__exe!.Lr1.targets"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[117,4152+18]..src/invariant.ml[119,4227+7])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/invariant.ml[117,4152+23]..src/invariant.ml[117,4152+25])
                                      Tpat_construct "()"
                                      []
                                      None
                                    expression (src/invariant.ml[117,4152+26]..src/invariant.ml[118,4191+35]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/invariant.ml[117,4152+26]..src/invariant.ml[117,4152+33])
                                            Tpat_var "sources/873"
                                          expression (src/invariant.ml[117,4152+34]..src/invariant.ml[118,4191+35]) ghost
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/invariant.ml[117,4152+34]..src/invariant.ml[117,4152+35])
                                                  Tpat_any
                                                expression (src/invariant.ml[118,4191+8]..src/invariant.ml[118,4191+35])
                                                  Texp_apply
                                                  expression (src/invariant.ml[118,4191+8]..src/invariant.ml[118,4191+17])
                                                    Texp_ident "Stdlib!.List.iter"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[118,4191+18]..src/invariant.ml[118,4191+27])
                                                        Texp_ident "represent/613"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[118,4191+28]..src/invariant.ml[118,4191+35])
                                                        Texp_ident "sources/873"
                                                  ]
                                            ]
                                      ]
                                ]
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[119,4227+8]..src/invariant.ml[119,4227+10])
                                Texp_construct "()"
                                []
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[119,4227+11]..src/invariant.ml[119,4227+24])
                                Texp_construct "Symbol.N"
                                [
                                  expression (src/invariant.ml[119,4227+21]..src/invariant.ml[119,4227+23])
                                    Texp_ident "nt/826"
                                ]
                          ]
                        None
                ]
          ]
    ]
  structure_item (src/invariant.ml[124,4293+0]..src/invariant.ml[133,4543+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[124,4293+4]..src/invariant.ml[124,4293+11])
          Tpat_var "handler/942"
        expression (src/invariant.ml[124,4293+12]..src/invariant.ml[133,4543+11]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[124,4293+12]..src/invariant.ml[124,4293+17])
                Tpat_var "state/944"
              expression (src/invariant.ml[125,4313+2]..src/invariant.ml[133,4543+11])
                Texp_try
                expression (src/invariant.ml[126,4319+4]..src/invariant.ml[127,4399+8])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/invariant.ml[126,4319+8]..src/invariant.ml[126,4319+9])
                        Tpat_any
                      expression (src/invariant.ml[126,4319+12]..src/invariant.ml[126,4319+76])
                        Texp_apply
                        expression (src/invariant.ml[126,4319+12]..src/invariant.ml[126,4319+26])
                          Texp_ident "Dune__exe!.Grammar.SymbolMap.find"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[126,4319+27]..src/invariant.ml[126,4319+52])
                              Texp_construct "Symbol.T"
                              [
                                expression (src/invariant.ml[126,4319+37]..src/invariant.ml[126,4319+51])
                                  Texp_ident "Dune__exe!.Grammar.Terminal.error"
                              ]
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[126,4319+53]..src/invariant.ml[126,4319+76])
                              Texp_apply
                              expression (src/invariant.ml[126,4319+54]..src/invariant.ml[126,4319+69])
                                Texp_ident "Dune__exe!.Lr1.transitions"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[126,4319+70]..src/invariant.ml[126,4319+75])
                                    Texp_ident "state/944"
                              ]
                        ]
                  ]
                  expression (src/invariant.ml[127,4399+4]..src/invariant.ml[127,4399+8])
                    Texp_construct "true"
                    []
                [
                  <case>
                    pattern (src/invariant.ml[128,4408+7]..src/invariant.ml[128,4408+16])
                      Tpat_construct "Not_found"
                      []
                      None
                    expression (src/invariant.ml[129,4428+4]..src/invariant.ml[133,4543+11])
                      Texp_try
                      expression (src/invariant.ml[130,4436+6]..src/invariant.ml[131,4510+10])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/invariant.ml[130,4436+10]..src/invariant.ml[130,4436+11])
                              Tpat_any
                            expression (src/invariant.ml[130,4436+14]..src/invariant.ml[130,4436+70])
                              Texp_apply
                              expression (src/invariant.ml[130,4436+14]..src/invariant.ml[130,4436+32])
                                Texp_ident "Dune__exe!.Grammar.TerminalMap.lookup"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[130,4436+33]..src/invariant.ml[130,4436+47])
                                    Texp_ident "Dune__exe!.Grammar.Terminal.error"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[130,4436+48]..src/invariant.ml[130,4436+70])
                                    Texp_apply
                                    expression (src/invariant.ml[130,4436+49]..src/invariant.ml[130,4436+63])
                                      Texp_ident "Dune__exe!.Lr1.reductions"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[130,4436+64]..src/invariant.ml[130,4436+69])
                                          Texp_ident "state/944"
                                    ]
                              ]
                        ]
                        expression (src/invariant.ml[131,4510+6]..src/invariant.ml[131,4510+10])
                          Texp_construct "true"
                          []
                      [
                        <case>
                          pattern (src/invariant.ml[132,4521+9]..src/invariant.ml[132,4521+18])
                            Tpat_construct "Not_found"
                            []
                            None
                          expression (src/invariant.ml[133,4543+6]..src/invariant.ml[133,4543+11])
                            Texp_construct "false"
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[135,4556+0]..src/invariant.ml[136,4578+35])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[135,4556+4]..src/invariant.ml[135,4556+12])
          Tpat_var "handlers/1166"
        expression (src/invariant.ml[135,4556+13]..src/invariant.ml[136,4578+35]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[135,4556+13]..src/invariant.ml[135,4556+19])
                Tpat_var "states/1168"
              expression (src/invariant.ml[136,4578+2]..src/invariant.ml[136,4578+35])
                Texp_apply
                expression (src/invariant.ml[136,4578+2]..src/invariant.ml[136,4578+20])
                  Texp_ident "Dune__exe!.Lr1.NodeSet.exists"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[136,4578+21]..src/invariant.ml[136,4578+28])
                      Texp_ident "handler/942"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[136,4578+29]..src/invariant.ml[136,4578+35])
                      Texp_ident "states/1168"
                ]
          ]
    ]
  structure_item (src/invariant.ml[138,4615+0]..src/invariant.ml[145,4811+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[138,4615+4]..src/invariant.ml[138,4615+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[139,4624+2]..src/invariant.ml[145,4811+3])
          Texp_apply
          expression (src/invariant.ml[139,4624+2]..src/invariant.ml[139,4624+10])
            Texp_ident "Dune__exe!.Lr1.iter"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[139,4624+11]..src/invariant.ml[145,4811+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[139,4624+16]..src/invariant.ml[139,4624+20])
                      Tpat_var "node/1169"
                    expression (src/invariant.ml[140,4648+4]..src/invariant.ml[144,4803+7])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[140,4648+8]..src/invariant.ml[140,4648+9])
                            Tpat_var "v/1170"
                          expression (src/invariant.ml[140,4648+12]..src/invariant.ml[140,4648+29])
                            Texp_apply
                            expression (src/invariant.ml[140,4648+12]..src/invariant.ml[140,4648+24])
                              Texp_ident "SSt/450.stack_states"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[140,4648+25]..src/invariant.ml[140,4648+29])
                                  Texp_ident "node/1169"
                            ]
                      ]
                      expression (src/invariant.ml[141,4681+4]..src/invariant.ml[144,4803+7])
                        Texp_apply
                        expression (src/invariant.ml[141,4681+4]..src/invariant.ml[141,4681+14])
                          Texp_ident "Stdlib!.Array.iter"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[141,4681+15]..src/invariant.ml[144,4803+5])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/invariant.ml[141,4681+20]..src/invariant.ml[141,4681+26])
                                    Tpat_var "states/1171"
                                  expression (src/invariant.ml[142,4711+6]..src/invariant.ml[143,4777+25])
                                    Texp_ifthenelse
                                    expression (src/invariant.ml[142,4711+9]..src/invariant.ml[142,4711+60])
                                      Texp_apply
                                      expression (src/invariant.ml[142,4711+42]..src/invariant.ml[142,4711+44])
                                        Texp_ident "Stdlib!.&&"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[142,4711+9]..src/invariant.ml[142,4711+41])
                                            Texp_apply
                                            expression (src/invariant.ml[142,4711+37]..src/invariant.ml[142,4711+39])
                                              Texp_ident "Stdlib!.>="
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[142,4711+9]..src/invariant.ml[142,4711+36])
                                                  Texp_apply
                                                  expression (src/invariant.ml[142,4711+9]..src/invariant.ml[142,4711+29])
                                                    Texp_ident "Dune__exe!.Lr1.NodeSet.cardinal"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[142,4711+30]..src/invariant.ml[142,4711+36])
                                                        Texp_ident "states/1171"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[142,4711+40]..src/invariant.ml[142,4711+41])
                                                  Texp_constant Const_int 2
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[142,4711+45]..src/invariant.ml[142,4711+60])
                                            Texp_apply
                                            expression (src/invariant.ml[142,4711+45]..src/invariant.ml[142,4711+53])
                                              Texp_ident "handlers/1166"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[142,4711+54]..src/invariant.ml[142,4711+60])
                                                  Texp_ident "states/1171"
                                            ]
                                      ]
                                    expression (src/invariant.ml[143,4777+8]..src/invariant.ml[143,4777+25])
                                      Texp_apply
                                      expression (src/invariant.ml[143,4777+8]..src/invariant.ml[143,4777+18])
                                        Texp_ident "represents/616"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[143,4777+19]..src/invariant.ml[143,4777+25])
                                            Texp_ident "states/1171"
                                      ]
                                    None
                              ]
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[144,4803+6]..src/invariant.ml[144,4803+7])
                              Texp_ident "v/1170"
                        ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[149,4852+0]..src/invariant.ml[159,5201+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[149,4852+4]..src/invariant.ml[149,4852+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[150,4861+2]..src/invariant.ml[159,5201+3])
          Texp_apply
          expression (src/invariant.ml[150,4861+2]..src/invariant.ml[150,4861+18])
            Texp_ident "Dune__exe!.Grammar.Production.iterx"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[150,4861+19]..src/invariant.ml[159,5201+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[150,4861+24]..src/invariant.ml[150,4861+28])
                      Tpat_var "prod/1172"
                    expression (src/invariant.ml[151,4893+4]..src/invariant.ml[158,5175+25])
                      Texp_ifthenelse
                      expression (src/invariant.ml[151,4893+7]..src/invariant.ml[151,4893+54])
                        Texp_apply
                        expression (src/invariant.ml[151,4893+7]..src/invariant.ml[151,4893+29])
                          Texp_ident "Dune__exe!.Action.has_syntaxerror"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[151,4893+30]..src/invariant.ml[151,4893+54])
                              Texp_apply
                              expression (src/invariant.ml[151,4893+31]..src/invariant.ml[151,4893+48])
                                Texp_ident "Dune__exe!.Grammar.Production.action"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[151,4893+49]..src/invariant.ml[151,4893+53])
                                    Texp_ident "prod/1172"
                              ]
                        ]
                      expression (src/invariant.ml[152,4953+6]..src/invariant.ml[158,5175+25])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/invariant.ml[152,4953+10]..src/invariant.ml[152,4953+15])
                              Tpat_var "sites/1244"
                            expression (src/invariant.ml[152,4953+18]..src/invariant.ml[152,4953+43])
                              Texp_apply
                              expression (src/invariant.ml[152,4953+18]..src/invariant.ml[152,4953+38])
                                Texp_ident "Dune__exe!.Lr1.production_where"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[152,4953+39]..src/invariant.ml[152,4953+43])
                                    Texp_ident "prod/1172"
                              ]
                        ]
                        expression (src/invariant.ml[153,5000+6]..src/invariant.ml[158,5175+25])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/invariant.ml[153,5000+10]..src/invariant.ml[153,5000+16])
                                Tpat_var "length/1245"
                              expression (src/invariant.ml[153,5000+19]..src/invariant.ml[153,5000+41])
                                Texp_apply
                                expression (src/invariant.ml[153,5000+19]..src/invariant.ml[153,5000+36])
                                  Texp_ident "Dune__exe!.Grammar.Production.length"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[153,5000+37]..src/invariant.ml[153,5000+41])
                                      Texp_ident "prod/1172"
                                ]
                          ]
                          expression (src/invariant.ml[154,5045+6]..src/invariant.ml[158,5175+25])
                            Texp_ifthenelse
                            expression (src/invariant.ml[154,5045+9]..src/invariant.ml[154,5045+19])
                              Texp_apply
                              expression (src/invariant.ml[154,5045+16]..src/invariant.ml[154,5045+17])
                                Texp_ident "Stdlib!.="
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[154,5045+9]..src/invariant.ml[154,5045+15])
                                    Texp_ident "length/1245"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[154,5045+18]..src/invariant.ml[154,5045+19])
                                    Texp_constant Const_int 0
                              ]
                            expression (src/invariant.ml[155,5070+8]..src/invariant.ml[155,5070+40])
                              Texp_apply
                              expression (src/invariant.ml[155,5070+8]..src/invariant.ml[155,5070+24])
                                Texp_ident "Dune__exe!.Lr1.NodeSet.iter"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[155,5070+25]..src/invariant.ml[155,5070+34])
                                    Texp_ident "represent/613"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[155,5070+35]..src/invariant.ml[155,5070+40])
                                    Texp_ident "sites/1244"
                              ]
                            Some
                              expression (src/invariant.ml[157,5122+8]..src/invariant.ml[158,5175+25])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/invariant.ml[157,5122+12]..src/invariant.ml[157,5122+18])
                                      Tpat_var "states/1246"
                                    expression (src/invariant.ml[157,5122+21]..src/invariant.ml[157,5122+49])
                                      Texp_apply
                                      expression (src/invariant.ml[157,5122+21]..src/invariant.ml[157,5122+49]) ghost
                                        Texp_ident "Stdlib!.Array.get"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[157,5122+21]..src/invariant.ml[157,5122+45])
                                            Texp_apply
                                            expression (src/invariant.ml[157,5122+22]..src/invariant.ml[157,5122+39])
                                              Texp_ident "SSt/450.production_states"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[157,5122+40]..src/invariant.ml[157,5122+44])
                                                  Texp_ident "prod/1172"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[157,5122+47]..src/invariant.ml[157,5122+48])
                                            Texp_constant Const_int 0
                                      ]
                                ]
                                expression (src/invariant.ml[158,5175+8]..src/invariant.ml[158,5175+25])
                                  Texp_apply
                                  expression (src/invariant.ml[158,5175+8]..src/invariant.ml[158,5175+18])
                                    Texp_ident "represents/616"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[158,5175+19]..src/invariant.ml[158,5175+25])
                                        Texp_ident "states/1246"
                                  ]
                      None
                ]
          ]
    ]
  structure_item (src/invariant.ml[166,5371+0]..src/invariant.ml[168,5426+35])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[166,5371+4]..src/invariant.ml[166,5371+15])
          Tpat_var "represented/1247"
        expression (src/invariant.ml[166,5371+16]..src/invariant.ml[168,5426+35]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[166,5371+16]..src/invariant.ml[166,5371+21])
                Tpat_var "state/1248"
              expression (src/invariant.ml[167,5395+2]..src/invariant.ml[168,5426+35])
                Texp_apply
                expression (src/invariant.ml[167,5395+28]..src/invariant.ml[167,5395+30])
                  Texp_ident "Stdlib!.||"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[167,5395+2]..src/invariant.ml[167,5395+27])
                      Texp_ident "Dune__exe!.Settings.represent_states"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[168,5426+2]..src/invariant.ml[168,5426+35])
                      Texp_apply
                      expression (src/invariant.ml[168,5426+2]..src/invariant.ml[168,5426+15])
                        Texp_ident "Dune__exe!.UnionFind.get"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[168,5426+16]..src/invariant.ml[168,5426+35])
                            Texp_apply
                            expression (src/invariant.ml[168,5426+17]..src/invariant.ml[168,5426+28])
                              Texp_ident "represented/569"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[168,5426+29]..src/invariant.ml[168,5426+34])
                                  Texp_ident "state/1248"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[170,5463+0]..src/invariant.ml[175,5575+43])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[170,5463+4]..src/invariant.ml[170,5463+16])
          Tpat_var "representeds/1309"
        expression (src/invariant.ml[170,5463+17]..src/invariant.ml[175,5575+43]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[170,5463+17]..src/invariant.ml[170,5463+23])
                Tpat_var "states/1311"
              expression (src/invariant.ml[171,5489+2]..src/invariant.ml[175,5575+43])
                Texp_apply
                expression (src/invariant.ml[171,5489+28]..src/invariant.ml[171,5489+30])
                  Texp_ident "Stdlib!.||"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[171,5489+2]..src/invariant.ml[171,5489+27])
                      Texp_ident "Dune__exe!.Settings.represent_states"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[172,5520+2]..src/invariant.ml[175,5575+43])
                      Texp_ifthenelse
                      expression (src/invariant.ml[172,5520+5]..src/invariant.ml[172,5520+32])
                        Texp_apply
                        expression (src/invariant.ml[172,5520+5]..src/invariant.ml[172,5520+25])
                          Texp_ident "Dune__exe!.Lr1.NodeSet.is_empty"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[172,5520+26]..src/invariant.ml[172,5520+32])
                              Texp_ident "states/1311"
                        ]
                      expression (src/invariant.ml[173,5558+4]..src/invariant.ml[173,5558+9])
                        Texp_construct "false"
                        []
                      Some
                        expression (src/invariant.ml[175,5575+4]..src/invariant.ml[175,5575+43])
                          Texp_apply
                          expression (src/invariant.ml[175,5575+4]..src/invariant.ml[175,5575+15])
                            Texp_ident "represented/1247"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[175,5575+16]..src/invariant.ml[175,5575+43])
                                Texp_apply
                                expression (src/invariant.ml[175,5575+17]..src/invariant.ml[175,5575+35])
                                  Texp_ident "Dune__exe!.Lr1.NodeSet.choose"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[175,5575+36]..src/invariant.ml[175,5575+42])
                                      Texp_ident "states/1311"
                                ]
                          ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[179,5639+0]..src/invariant.ml[187,5868+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[179,5639+4]..src/invariant.ml[179,5639+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[180,5648+2]..src/invariant.ml[187,5868+3])
          Texp_apply
          expression (src/invariant.ml[180,5648+2]..src/invariant.ml[180,5648+12])
            Texp_ident "Dune__exe!.Error.logC"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[180,5648+13]..src/invariant.ml[180,5648+14])
                Texp_constant Const_int 1
            <arg>
              Nolabel
              expression (src/invariant.ml[180,5648+15]..src/invariant.ml[187,5868+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[180,5648+20]..src/invariant.ml[180,5648+21])
                      Tpat_var "f/1312"
                    expression (src/invariant.ml[181,5673+4]..src/invariant.ml[186,5794+73])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[181,5673+8]..src/invariant.ml[181,5673+13])
                            Tpat_var "count/1313"
                          expression (src/invariant.ml[182,5689+6]..src/invariant.ml[184,5777+9])
                            Texp_apply
                            expression (src/invariant.ml[182,5689+6]..src/invariant.ml[182,5689+14])
                              Texp_ident "Dune__exe!.Lr1.fold"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[182,5689+15]..src/invariant.ml[184,5777+7])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/invariant.ml[182,5689+20]..src/invariant.ml[182,5689+25])
                                        Tpat_var "count/1314"
                                      expression (src/invariant.ml[182,5689+26]..src/invariant.ml[183,5723+53]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[182,5689+26]..src/invariant.ml[182,5689+30])
                                              Tpat_var "node/1315"
                                            expression (src/invariant.ml[183,5723+8]..src/invariant.ml[183,5723+53])
                                              Texp_ifthenelse
                                              expression (src/invariant.ml[183,5723+11]..src/invariant.ml[183,5723+27])
                                                Texp_apply
                                                expression (src/invariant.ml[183,5723+11]..src/invariant.ml[183,5723+22])
                                                  Texp_ident "represented/1247"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[183,5723+23]..src/invariant.ml[183,5723+27])
                                                      Texp_ident "node/1315"
                                                ]
                                              expression (src/invariant.ml[183,5723+33]..src/invariant.ml[183,5723+42])
                                                Texp_apply
                                                expression (src/invariant.ml[183,5723+39]..src/invariant.ml[183,5723+40])
                                                  Texp_ident "Stdlib!.+"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[183,5723+33]..src/invariant.ml[183,5723+38])
                                                      Texp_ident "count/1314"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[183,5723+41]..src/invariant.ml[183,5723+42])
                                                      Texp_constant Const_int 1
                                                ]
                                              Some
                                                expression (src/invariant.ml[183,5723+48]..src/invariant.ml[183,5723+53])
                                                  Texp_ident "count/1314"
                                        ]
                                  ]
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[184,5777+8]..src/invariant.ml[184,5777+9])
                                  Texp_constant Const_int 0
                            ]
                      ]
                      expression (src/invariant.ml[186,5794+4]..src/invariant.ml[186,5794+73])
                        Texp_apply
                        expression (src/invariant.ml[186,5794+4]..src/invariant.ml[186,5794+18])
                          Texp_ident "Stdlib!.Printf.fprintf"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[186,5794+19]..src/invariant.ml[186,5794+20])
                              Texp_ident "f/1312"
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61])
                              Texp_construct "CamlinternalFormatBasics.Format"
                              [
                                expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                  Texp_construct "CamlinternalFormatBasics.Int"
                                  [
                                    expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                      Texp_construct "CamlinternalFormatBasics.Int_d"
                                      []
                                    expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                      []
                                    expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                      Texp_construct "CamlinternalFormatBasics.No_precision"
                                      []
                                    expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                      [
                                        expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                          Texp_constant Const_string(" out of ",(src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost,None)
                                        expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                          Texp_construct "CamlinternalFormatBasics.Int"
                                          [
                                            expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                              Texp_construct "CamlinternalFormatBasics.Int_d"
                                              []
                                            expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                              []
                                            expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                              Texp_construct "CamlinternalFormatBasics.No_precision"
                                              []
                                            expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                              [
                                                expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                                  Texp_constant Const_string(" states are represented.\n",(src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost,None)
                                                expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                  []
                                              ]
                                          ]
                                      ]
                                  ]
                                expression (src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost
                                  Texp_constant Const_string("%d out of %d states are represented.\n",(src/invariant.ml[186,5794+21]..src/invariant.ml[186,5794+61]) ghost,None)
                              ]
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[186,5794+62]..src/invariant.ml[186,5794+67])
                              Texp_ident "count/1313"
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[186,5794+68]..src/invariant.ml[186,5794+73])
                              Texp_ident "Dune__exe!.Lr1.n"
                        ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[191,5949+0]..src/invariant.ml[197,6107+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[191,5949+4]..src/invariant.ml[191,5949+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[192,5958+2]..src/invariant.ml[197,6107+3])
          Texp_apply
          expression (src/invariant.ml[192,5958+2]..src/invariant.ml[192,5958+12])
            Texp_ident "Dune__exe!.Error.logC"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[192,5958+13]..src/invariant.ml[192,5958+14])
                Texp_constant Const_int 3
            <arg>
              Nolabel
              expression (src/invariant.ml[192,5958+15]..src/invariant.ml[197,6107+3])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[192,5958+20]..src/invariant.ml[192,5958+21])
                      Tpat_var "f/1352"
                    expression (src/invariant.ml[193,5983+4]..src/invariant.ml[196,6101+5])
                      Texp_apply
                      expression (src/invariant.ml[193,5983+4]..src/invariant.ml[193,5983+12])
                        Texp_ident "Dune__exe!.Lr1.iter"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[193,5983+13]..src/invariant.ml[196,6101+5])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/invariant.ml[193,5983+18]..src/invariant.ml[193,5983+22])
                                  Tpat_var "node/1353"
                                expression (src/invariant.ml[194,6009+6]..src/invariant.ml[195,6057+43])
                                  Texp_apply
                                  expression (src/invariant.ml[194,6009+6]..src/invariant.ml[194,6009+20])
                                    Texp_ident "Stdlib!.Printf.fprintf"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[194,6009+21]..src/invariant.ml[194,6009+22])
                                        Texp_ident "f/1352"
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                Texp_constant Const_string("represented(",(src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost,None)
                                              expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String"
                                                [
                                                  expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                    []
                                                  expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                        Texp_constant Const_string(") = ",(src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost,None)
                                                      expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Bool"
                                                        [
                                                          expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                            [
                                                              expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                                Texp_constant Const_char 0a
                                                              expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                          expression (src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost
                                            Texp_constant Const_string("represented(%s) = %b\n",(src/invariant.ml[194,6009+23]..src/invariant.ml[194,6009+47]) ghost,None)
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[195,6057+8]..src/invariant.ml[195,6057+24])
                                        Texp_apply
                                        expression (src/invariant.ml[195,6057+9]..src/invariant.ml[195,6057+18])
                                          Texp_ident "Dune__exe!.Lr1.print"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[195,6057+19]..src/invariant.ml[195,6057+23])
                                              Texp_ident "node/1353"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[195,6057+25]..src/invariant.ml[195,6057+43])
                                        Texp_apply
                                        expression (src/invariant.ml[195,6057+26]..src/invariant.ml[195,6057+37])
                                          Texp_ident "represented/1247"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[195,6057+38]..src/invariant.ml[195,6057+42])
                                              Texp_ident "node/1353"
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[204,6298+0]..src/invariant.ml[204,6298+12])
    Tstr_open Fresh
    module_expr (src/invariant.ml[204,6298+5]..src/invariant.ml[204,6298+12])
      Tmod_ident "MenhirSdk!.Keyword"
  structure_item (src/invariant.ml[206,6312+0]..src/invariant.ml[207,6328+18])
    Tstr_type Rec
    [
      type_declaration variable/1360 (src/invariant.ml[206,6312+0]..src/invariant.ml[207,6328+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/invariant.ml[207,6328+2]..src/invariant.ml[207,6328+18])
              Ttyp_tuple
              [
                core_type (src/invariant.ml[207,6328+2]..src/invariant.ml[207,6328+10])
                  Ttyp_constr "Dune__exe!.Grammar.Symbol.t"
                  []
                core_type (src/invariant.ml[207,6328+13]..src/invariant.ml[207,6328+18])
                  Ttyp_constr "MenhirSdk!.Keyword.where"
                  []
              ]
    ]
  structure_item (src/invariant.ml[209,6377+0]..src/invariant.ml[239,7209+3])
    Tstr_module
    M/1525
      module_expr (src/invariant.ml[209,6377+9]..src/invariant.ml[239,7209+3])
        Tmod_constraint
        module_expr (src/invariant.ml[209,6377+58]..src/invariant.ml[239,7209+3])
          Tmod_structure
          [
            structure_item (src/invariant.ml[210,6442+2]..src/invariant.ml[210,6442+21])
              Tstr_type Rec
              [
                type_declaration key/1367 (src/invariant.ml[210,6442+2]..src/invariant.ml[210,6442+21])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/invariant.ml[210,6442+13]..src/invariant.ml[210,6442+21])
                        Ttyp_constr "variable/1360"
                        []
              ]
            structure_item (src/invariant.ml[211,6464+2]..src/invariant.ml[214,6561+3])
              Tstr_type Rec
              [
                type_declaration t/1368 (src/invariant.ml[211,6464+2]..src/invariant.ml[214,6561+3])
                  ptype_params =
                    [
                      core_type (src/invariant.ml[211,6464+7]..src/invariant.ml[211,6464+12])
                        Ttyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_record
                      [
                        (src/invariant.ml[212,6483+4]..src/invariant.ml[212,6483+38])
                          Mutable
                          startp/1369                          core_type (src/invariant.ml[212,6483+20]..src/invariant.ml[212,6483+37])
                            Ttyp_poly
                            core_type (src/invariant.ml[212,6483+20]..src/invariant.ml[212,6483+37])
                              Ttyp_constr "Dune__exe!.Grammar.SymbolMap.t"
                              [
                                core_type (src/invariant.ml[212,6483+20]..src/invariant.ml[212,6483+25])
                                  Ttyp_var data
                              ]
                        (src/invariant.ml[213,6522+4]..src/invariant.ml[213,6522+38])
                          Mutable
                          endp/1370                          core_type (src/invariant.ml[213,6522+20]..src/invariant.ml[213,6522+37])
                            Ttyp_poly
                            core_type (src/invariant.ml[213,6522+20]..src/invariant.ml[213,6522+37])
                              Ttyp_constr "Dune__exe!.Grammar.SymbolMap.t"
                              [
                                core_type (src/invariant.ml[213,6522+20]..src/invariant.ml[213,6522+25])
                                  Ttyp_var data
                              ]
                      ]
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
            structure_item (src/invariant.ml[215,6565+2]..src/invariant.ml[215,6565+16])
              Tstr_open Fresh
              module_expr (src/invariant.ml[215,6565+7]..src/invariant.ml[215,6565+16])
                Tmod_ident "Dune__exe!.Grammar.SymbolMap"
            structure_item (src/invariant.ml[216,6582+2]..src/invariant.ml[217,6599+36])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[216,6582+6]..src/invariant.ml[216,6582+12])
                    Tpat_var "create/1371"
                  expression (src/invariant.ml[216,6582+12]..src/invariant.ml[217,6599+36]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[216,6582+12]..src/invariant.ml[216,6582+14])
                          Tpat_construct "()"
                          []
                          None
                        expression (src/invariant.ml[217,6599+4]..src/invariant.ml[217,6599+36])
                          Texp_record
                            fields =
                              [
                                "startp"
                                  expression (src/invariant.ml[217,6599+15]..src/invariant.ml[217,6599+20])
                                    Texp_ident "Dune__exe!.Grammar.SymbolMap.empty"
                                "endp"
                                  expression (src/invariant.ml[217,6599+29]..src/invariant.ml[217,6599+34])
                                    Texp_ident "Dune__exe!.Grammar.SymbolMap.empty"
                              ]
                            representation =
                              Record_regular
                            extended_expression =
                              None
                    ]
              ]
            structure_item (src/invariant.ml[218,6636+2]..src/invariant.ml[219,6652+38])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[218,6636+6]..src/invariant.ml[218,6636+11])
                    Tpat_var "clear/1374"
                  expression (src/invariant.ml[218,6636+12]..src/invariant.ml[219,6652+38]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[218,6636+12]..src/invariant.ml[218,6636+13])
                          Tpat_var "m/1376"
                        expression (src/invariant.ml[219,6652+4]..src/invariant.ml[219,6652+38])
                          Texp_sequence
                          expression (src/invariant.ml[219,6652+4]..src/invariant.ml[219,6652+21])
                            Texp_setfield
                            expression (src/invariant.ml[219,6652+4]..src/invariant.ml[219,6652+5])
                              Texp_ident "m/1376"
                            "startp"
                            expression (src/invariant.ml[219,6652+16]..src/invariant.ml[219,6652+21])
                              Texp_ident "Dune__exe!.Grammar.SymbolMap.empty"
                          expression (src/invariant.ml[219,6652+23]..src/invariant.ml[219,6652+38])
                            Texp_setfield
                            expression (src/invariant.ml[219,6652+23]..src/invariant.ml[219,6652+24])
                              Texp_ident "m/1376"
                            "endp"
                            expression (src/invariant.ml[219,6652+33]..src/invariant.ml[219,6652+38])
                              Texp_ident "Dune__exe!.Grammar.SymbolMap.empty"
                    ]
              ]
            structure_item (src/invariant.ml[220,6691+2]..src/invariant.ml[227,6888+20])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[220,6691+6]..src/invariant.ml[220,6691+9])
                    Tpat_var "add/1377"
                  expression (src/invariant.ml[220,6691+10]..src/invariant.ml[227,6888+20]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[220,6691+10]..src/invariant.ml[220,6691+22])
                          Tpat_tuple
                          [
                            pattern (src/invariant.ml[220,6691+11]..src/invariant.ml[220,6691+14])
                              Tpat_var "sym/1378"
                            pattern (src/invariant.ml[220,6691+16]..src/invariant.ml[220,6691+21])
                              Tpat_var "where/1379"
                          ]
                        expression (src/invariant.ml[220,6691+23]..src/invariant.ml[227,6888+20]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/invariant.ml[220,6691+23]..src/invariant.ml[220,6691+27])
                                Tpat_var "data/1380"
                              expression (src/invariant.ml[220,6691+28]..src/invariant.ml[227,6888+20]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/invariant.ml[220,6691+28]..src/invariant.ml[220,6691+29])
                                      Tpat_var "m/1381"
                                    expression (src/invariant.ml[221,6723+4]..src/invariant.ml[227,6888+20])
                                      Texp_match
                                      expression (src/invariant.ml[221,6723+10]..src/invariant.ml[221,6723+15])
                                        Texp_ident "where/1379"
                                      [
                                        <case>
                                          pattern (src/invariant.ml[222,6744+6]..src/invariant.ml[222,6744+16])
                                            Tpat_value
                                            pattern (src/invariant.ml[222,6744+6]..src/invariant.ml[222,6744+16])
                                              Tpat_construct "WhereStart"
                                              []
                                              None
                                          expression (src/invariant.ml[223,6764+8]..src/invariant.ml[223,6764+41])
                                            Texp_setfield
                                            expression (src/invariant.ml[223,6764+8]..src/invariant.ml[223,6764+9])
                                              Texp_ident "m/1381"
                                            "startp"
                                            expression (src/invariant.ml[223,6764+20]..src/invariant.ml[223,6764+41])
                                              Texp_apply
                                              expression (src/invariant.ml[223,6764+20]..src/invariant.ml[223,6764+23])
                                                Texp_ident "Dune__exe!.Grammar.SymbolMap.add"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[223,6764+24]..src/invariant.ml[223,6764+27])
                                                    Texp_ident "sym/1378"
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[223,6764+28]..src/invariant.ml[223,6764+32])
                                                    Texp_ident "data/1380"
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[223,6764+33]..src/invariant.ml[223,6764+41])
                                                    Texp_field
                                                    expression (src/invariant.ml[223,6764+33]..src/invariant.ml[223,6764+34])
                                                      Texp_ident "m/1381"
                                                    "startp"
                                              ]
                                        <case>
                                          pattern (src/invariant.ml[224,6806+6]..src/invariant.ml[224,6806+14])
                                            Tpat_value
                                            pattern (src/invariant.ml[224,6806+6]..src/invariant.ml[224,6806+14])
                                              Tpat_construct "WhereEnd"
                                              []
                                              None
                                          expression (src/invariant.ml[225,6824+8]..src/invariant.ml[225,6824+37])
                                            Texp_setfield
                                            expression (src/invariant.ml[225,6824+8]..src/invariant.ml[225,6824+9])
                                              Texp_ident "m/1381"
                                            "endp"
                                            expression (src/invariant.ml[225,6824+18]..src/invariant.ml[225,6824+37])
                                              Texp_apply
                                              expression (src/invariant.ml[225,6824+18]..src/invariant.ml[225,6824+21])
                                                Texp_ident "Dune__exe!.Grammar.SymbolMap.add"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[225,6824+22]..src/invariant.ml[225,6824+25])
                                                    Texp_ident "sym/1378"
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[225,6824+26]..src/invariant.ml[225,6824+30])
                                                    Texp_ident "data/1380"
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[225,6824+31]..src/invariant.ml[225,6824+37])
                                                    Texp_field
                                                    expression (src/invariant.ml[225,6824+31]..src/invariant.ml[225,6824+32])
                                                      Texp_ident "m/1381"
                                                    "endp"
                                              ]
                                        <case>
                                          pattern (src/invariant.ml[226,6862+6]..src/invariant.ml[226,6862+22])
                                            Tpat_value
                                            pattern (src/invariant.ml[226,6862+6]..src/invariant.ml[226,6862+22])
                                              Tpat_construct "WhereSymbolStart"
                                              []
                                              None
                                          expression (src/invariant.ml[227,6888+8]..src/invariant.ml[227,6888+20])
                                            Texp_assert                                            expression (src/invariant.ml[227,6888+15]..src/invariant.ml[227,6888+20])
                                              Texp_construct "false"
                                              []
                                      ]
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[228,6909+2]..src/invariant.ml[235,7072+20])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[228,6909+6]..src/invariant.ml[228,6909+10])
                    Tpat_var "find/1383"
                  expression (src/invariant.ml[228,6909+11]..src/invariant.ml[235,7072+20]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[228,6909+11]..src/invariant.ml[228,6909+23])
                          Tpat_tuple
                          [
                            pattern (src/invariant.ml[228,6909+12]..src/invariant.ml[228,6909+15])
                              Tpat_var "sym/1384"
                            pattern (src/invariant.ml[228,6909+17]..src/invariant.ml[228,6909+22])
                              Tpat_var "where/1385"
                          ]
                        expression (src/invariant.ml[228,6909+24]..src/invariant.ml[235,7072+20]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/invariant.ml[228,6909+24]..src/invariant.ml[228,6909+25])
                                Tpat_var "m/1386"
                              expression (src/invariant.ml[229,6937+4]..src/invariant.ml[235,7072+20])
                                Texp_match
                                expression (src/invariant.ml[229,6937+10]..src/invariant.ml[229,6937+15])
                                  Texp_ident "where/1385"
                                [
                                  <case>
                                    pattern (src/invariant.ml[230,6958+6]..src/invariant.ml[230,6958+16])
                                      Tpat_value
                                      pattern (src/invariant.ml[230,6958+6]..src/invariant.ml[230,6958+16])
                                        Tpat_construct "WhereStart"
                                        []
                                        None
                                    expression (src/invariant.ml[231,6978+8]..src/invariant.ml[231,6978+25])
                                      Texp_apply
                                      expression (src/invariant.ml[231,6978+8]..src/invariant.ml[231,6978+12])
                                        Texp_ident "Dune__exe!.Grammar.SymbolMap.find"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[231,6978+13]..src/invariant.ml[231,6978+16])
                                            Texp_ident "sym/1384"
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[231,6978+17]..src/invariant.ml[231,6978+25])
                                            Texp_field
                                            expression (src/invariant.ml[231,6978+17]..src/invariant.ml[231,6978+18])
                                              Texp_ident "m/1386"
                                            "startp"
                                      ]
                                  <case>
                                    pattern (src/invariant.ml[232,7004+6]..src/invariant.ml[232,7004+14])
                                      Tpat_value
                                      pattern (src/invariant.ml[232,7004+6]..src/invariant.ml[232,7004+14])
                                        Tpat_construct "WhereEnd"
                                        []
                                        None
                                    expression (src/invariant.ml[233,7022+8]..src/invariant.ml[233,7022+23])
                                      Texp_apply
                                      expression (src/invariant.ml[233,7022+8]..src/invariant.ml[233,7022+12])
                                        Texp_ident "Dune__exe!.Grammar.SymbolMap.find"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[233,7022+13]..src/invariant.ml[233,7022+16])
                                            Texp_ident "sym/1384"
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[233,7022+17]..src/invariant.ml[233,7022+23])
                                            Texp_field
                                            expression (src/invariant.ml[233,7022+17]..src/invariant.ml[233,7022+18])
                                              Texp_ident "m/1386"
                                            "endp"
                                      ]
                                  <case>
                                    pattern (src/invariant.ml[234,7046+6]..src/invariant.ml[234,7046+22])
                                      Tpat_value
                                      pattern (src/invariant.ml[234,7046+6]..src/invariant.ml[234,7046+22])
                                        Tpat_construct "WhereSymbolStart"
                                        []
                                        None
                                    expression (src/invariant.ml[235,7072+8]..src/invariant.ml[235,7072+20])
                                      Texp_assert                                      expression (src/invariant.ml[235,7072+15]..src/invariant.ml[235,7072+20])
                                        Texp_construct "false"
                                        []
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[236,7093+2]..src/invariant.ml[238,7162+46])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[236,7093+6]..src/invariant.ml[236,7093+10])
                    Tpat_var "iter/1388"
                  expression (src/invariant.ml[236,7093+11]..src/invariant.ml[238,7162+46]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[236,7093+11]..src/invariant.ml[236,7093+12])
                          Tpat_var "f/1389"
                        expression (src/invariant.ml[236,7093+13]..src/invariant.ml[238,7162+46]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/invariant.ml[236,7093+13]..src/invariant.ml[236,7093+14])
                                Tpat_var "m/1390"
                              expression (src/invariant.ml[237,7110+4]..src/invariant.ml[238,7162+46])
                                Texp_sequence
                                expression (src/invariant.ml[237,7110+4]..src/invariant.ml[237,7110+50])
                                  Texp_apply
                                  expression (src/invariant.ml[237,7110+4]..src/invariant.ml[237,7110+8])
                                    Texp_ident "Dune__exe!.Grammar.SymbolMap.iter"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[237,7110+9]..src/invariant.ml[237,7110+41])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[237,7110+14]..src/invariant.ml[237,7110+17])
                                              Tpat_var "sym/1391"
                                            expression (src/invariant.ml[237,7110+21]..src/invariant.ml[237,7110+40])
                                              Texp_apply
                                              expression (src/invariant.ml[237,7110+21]..src/invariant.ml[237,7110+22])
                                                Texp_ident "f/1389"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[237,7110+23]..src/invariant.ml[237,7110+40])
                                                    Texp_tuple
                                                    [
                                                      expression (src/invariant.ml[237,7110+24]..src/invariant.ml[237,7110+27])
                                                        Texp_ident "sym/1391"
                                                      expression (src/invariant.ml[237,7110+29]..src/invariant.ml[237,7110+39])
                                                        Texp_construct "WhereStart"
                                                        []
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[237,7110+42]..src/invariant.ml[237,7110+50])
                                        Texp_field
                                        expression (src/invariant.ml[237,7110+42]..src/invariant.ml[237,7110+43])
                                          Texp_ident "m/1390"
                                        "startp"
                                  ]
                                expression (src/invariant.ml[238,7162+4]..src/invariant.ml[238,7162+46])
                                  Texp_apply
                                  expression (src/invariant.ml[238,7162+4]..src/invariant.ml[238,7162+8])
                                    Texp_ident "Dune__exe!.Grammar.SymbolMap.iter"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[238,7162+9]..src/invariant.ml[238,7162+39])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[238,7162+14]..src/invariant.ml[238,7162+17])
                                              Tpat_var "sym/1392"
                                            expression (src/invariant.ml[238,7162+21]..src/invariant.ml[238,7162+38])
                                              Texp_apply
                                              expression (src/invariant.ml[238,7162+21]..src/invariant.ml[238,7162+22])
                                                Texp_ident "f/1389"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[238,7162+23]..src/invariant.ml[238,7162+38])
                                                    Texp_tuple
                                                    [
                                                      expression (src/invariant.ml[238,7162+24]..src/invariant.ml[238,7162+27])
                                                        Texp_ident "sym/1392"
                                                      expression (src/invariant.ml[238,7162+29]..src/invariant.ml[238,7162+37])
                                                        Texp_construct "WhereEnd"
                                                        []
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[238,7162+40]..src/invariant.ml[238,7162+46])
                                        Texp_field
                                        expression (src/invariant.ml[238,7162+40]..src/invariant.ml[238,7162+41])
                                          Texp_ident "m/1390"
                                        "endp"
                                  ]
                          ]
                    ]
              ]
          ]
        module_type (src/invariant.ml[209,6377+11]..src/invariant.ml[209,6377+55])
          Tmty_with
          module_type (src/invariant.ml[209,6377+11]..src/invariant.ml[209,6377+30])
            Tmty_ident "Dune__exe!.Fix.IMPERATIVE_MAPS"
          [
            "key/1510"
              Twith_type
                type_declaration key/1510 (src/invariant.ml[209,6377+36]..src/invariant.ml[209,6377+55])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/invariant.ml[209,6377+47]..src/invariant.ml[209,6377+55])
                        Ttyp_constr "variable/1360"
                        []
          ]
  structure_item (src/invariant.ml[287,9573+0]..src/invariant.ml[288,9584+37])
    Tstr_module
    F/1585
      module_expr (src/invariant.ml[288,9584+2]..src/invariant.ml[288,9584+37])
        Tmod_apply
        module_expr (src/invariant.ml[288,9584+2]..src/invariant.ml[288,9584+19])
          Tmod_apply
          module_expr (src/invariant.ml[288,9584+2]..src/invariant.ml[288,9584+16])
            module_expr (src/invariant.ml[288,9584+2]..src/invariant.ml[288,9584+16])
              Tmod_ident "Dune__exe!.FixSolver.Make"
          module_expr (src/invariant.ml[288,9584+17]..src/invariant.ml[288,9584+18])
            Tmod_ident "M/1525"
        module_expr (src/invariant.ml[288,9584+20]..src/invariant.ml[288,9584+36])
          module_expr (src/invariant.ml[288,9584+20]..src/invariant.ml[288,9584+36])
            Tmod_ident "Dune__exe!.Fix.Prop.Boolean"
  structure_item (src/invariant.ml[290,9623+0]..src/invariant.ml[364,12540+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[290,9623+4]..src/invariant.ml[290,9623+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[296,9825+2]..src/invariant.ml[364,12540+3])
          Texp_sequence
          expression (src/invariant.ml[296,9825+2]..src/invariant.ml[338,11474+3])
            Texp_apply
            expression (src/invariant.ml[296,9825+2]..src/invariant.ml[296,9825+18])
              Texp_ident "Dune__exe!.Grammar.Production.iterx"
            [
              <arg>
                Nolabel
                expression (src/invariant.ml[296,9825+19]..src/invariant.ml[338,11474+3])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[296,9825+24]..src/invariant.ml[296,9825+28])
                        Tpat_var "prod/1586"
                      expression (src/invariant.ml[298,9858+4]..src/invariant.ml[336,11442+30])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/invariant.ml[298,9858+8]..src/invariant.ml[298,9858+15])
                              Tpat_tuple
                              [
                                pattern (src/invariant.ml[298,9858+8]..src/invariant.ml[298,9858+10])
                                  Tpat_var "nt/1587"
                                pattern (src/invariant.ml[298,9858+12]..src/invariant.ml[298,9858+15])
                                  Tpat_var "rhs/1588"
                              ]
                            expression (src/invariant.ml[298,9858+18]..src/invariant.ml[298,9858+37])
                              Texp_apply
                              expression (src/invariant.ml[298,9858+18]..src/invariant.ml[298,9858+32])
                                Texp_ident "Dune__exe!.Grammar.Production.def"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[298,9858+33]..src/invariant.ml[298,9858+37])
                                    Texp_ident "prod/1586"
                              ]
                          <def>
                            pattern (src/invariant.ml[299,9896+8]..src/invariant.ml[299,9896+11])
                              Tpat_var "ids/1589"
                            expression (src/invariant.ml[299,9896+14]..src/invariant.ml[299,9896+41])
                              Texp_apply
                              expression (src/invariant.ml[299,9896+14]..src/invariant.ml[299,9896+36])
                                Texp_ident "Dune__exe!.Grammar.Production.identifiers"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[299,9896+37]..src/invariant.ml[299,9896+41])
                                    Texp_ident "prod/1586"
                              ]
                          <def>
                            pattern (src/invariant.ml[300,9938+8]..src/invariant.ml[300,9938+14])
                              Tpat_var "action/1590"
                            expression (src/invariant.ml[300,9938+17]..src/invariant.ml[300,9938+39])
                              Texp_apply
                              expression (src/invariant.ml[300,9938+17]..src/invariant.ml[300,9938+34])
                                Texp_ident "Dune__exe!.Grammar.Production.action"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[300,9938+35]..src/invariant.ml[300,9938+39])
                                    Texp_ident "prod/1586"
                              ]
                        ]
                        expression (src/invariant.ml[301,9981+4]..src/invariant.ml[336,11442+30])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/invariant.ml[301,9981+8]..src/invariant.ml[301,9981+14])
                                Tpat_var "length/1591"
                              expression (src/invariant.ml[301,9981+17]..src/invariant.ml[301,9981+33])
                                Texp_apply
                                expression (src/invariant.ml[301,9981+17]..src/invariant.ml[301,9981+29])
                                  Texp_ident "Stdlib!.Array.length"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[301,9981+30]..src/invariant.ml[301,9981+33])
                                      Texp_ident "rhs/1588"
                                ]
                          ]
                          expression (src/invariant.ml[303,10019+4]..src/invariant.ml[336,11442+30])
                            Texp_sequence
                            expression (src/invariant.ml[303,10019+4]..src/invariant.ml[310,10449+7])
                              Texp_ifthenelse
                              expression (src/invariant.ml[303,10019+7]..src/invariant.ml[303,10019+17])
                                Texp_apply
                                expression (src/invariant.ml[303,10019+14]..src/invariant.ml[303,10019+15])
                                  Texp_ident "Stdlib!.>"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[303,10019+7]..src/invariant.ml[303,10019+13])
                                      Texp_ident "length/1591"
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[303,10019+16]..src/invariant.ml[303,10019+17])
                                      Texp_constant Const_int 0
                                ]
                              expression (src/invariant.ml[303,10019+23]..src/invariant.ml[310,10449+7])
                                Texp_sequence
                                expression (src/invariant.ml[306,10177+6]..src/invariant.ml[306,10177+69])
                                  Texp_apply
                                  expression (src/invariant.ml[306,10177+6]..src/invariant.ml[306,10177+21])
                                    Texp_ident "F/1585.record_VarVar"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[306,10177+22]..src/invariant.ml[306,10177+47])
                                        Texp_tuple
                                        [
                                          expression (src/invariant.ml[306,10177+23]..src/invariant.ml[306,10177+34])
                                            Texp_construct "Symbol.N"
                                            [
                                              expression (src/invariant.ml[306,10177+32]..src/invariant.ml[306,10177+34])
                                                Texp_ident "nt/1587"
                                            ]
                                          expression (src/invariant.ml[306,10177+36]..src/invariant.ml[306,10177+46])
                                            Texp_construct "WhereStart"
                                            []
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[306,10177+48]..src/invariant.ml[306,10177+69])
                                        Texp_tuple
                                        [
                                          expression (src/invariant.ml[306,10177+49]..src/invariant.ml[306,10177+56])
                                            Texp_apply
                                            expression (src/invariant.ml[306,10177+49]..src/invariant.ml[306,10177+56]) ghost
                                              Texp_ident "Stdlib!.Array.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[306,10177+49]..src/invariant.ml[306,10177+52])
                                                  Texp_ident "rhs/1588"
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[306,10177+54]..src/invariant.ml[306,10177+55])
                                                  Texp_constant Const_int 0
                                            ]
                                          expression (src/invariant.ml[306,10177+58]..src/invariant.ml[306,10177+68])
                                            Texp_construct "WhereStart"
                                            []
                                        ]
                                  ]
                                expression (src/invariant.ml[309,10374+6]..src/invariant.ml[309,10374+74])
                                  Texp_apply
                                  expression (src/invariant.ml[309,10374+6]..src/invariant.ml[309,10374+21])
                                    Texp_ident "F/1585.record_VarVar"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[309,10374+22]..src/invariant.ml[309,10374+45])
                                        Texp_tuple
                                        [
                                          expression (src/invariant.ml[309,10374+23]..src/invariant.ml[309,10374+34])
                                            Texp_construct "Symbol.N"
                                            [
                                              expression (src/invariant.ml[309,10374+32]..src/invariant.ml[309,10374+34])
                                                Texp_ident "nt/1587"
                                            ]
                                          expression (src/invariant.ml[309,10374+36]..src/invariant.ml[309,10374+44])
                                            Texp_construct "WhereEnd"
                                            []
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[309,10374+46]..src/invariant.ml[309,10374+74])
                                        Texp_tuple
                                        [
                                          expression (src/invariant.ml[309,10374+47]..src/invariant.ml[309,10374+63])
                                            Texp_apply
                                            expression (src/invariant.ml[309,10374+47]..src/invariant.ml[309,10374+63]) ghost
                                              Texp_ident "Stdlib!.Array.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[309,10374+47]..src/invariant.ml[309,10374+50])
                                                  Texp_ident "rhs/1588"
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[309,10374+52]..src/invariant.ml[309,10374+62])
                                                  Texp_apply
                                                  expression (src/invariant.ml[309,10374+59]..src/invariant.ml[309,10374+60])
                                                    Texp_ident "Stdlib!.-"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[309,10374+52]..src/invariant.ml[309,10374+58])
                                                        Texp_ident "length/1591"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[309,10374+61]..src/invariant.ml[309,10374+62])
                                                        Texp_constant Const_int 1
                                                  ]
                                            ]
                                          expression (src/invariant.ml[309,10374+65]..src/invariant.ml[309,10374+73])
                                            Texp_construct "WhereEnd"
                                            []
                                        ]
                                  ]
                              None
                            expression (src/invariant.ml[312,10459+4]..src/invariant.ml[336,11442+30])
                              Texp_apply
                              expression (src/invariant.ml[312,10459+4]..src/invariant.ml[312,10459+19])
                                Texp_ident "MenhirSdk!.Keyword.KeywordSet.iter"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[312,10459+20]..src/invariant.ml[336,11442+5])
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/invariant.ml[313,10489+8]..src/invariant.ml[313,10489+19])
                                          Tpat_construct "SyntaxError"
                                          []
                                          None
                                        expression (src/invariant.ml[314,10512+10]..src/invariant.ml[314,10512+12])
                                          Texp_construct "()"
                                          []
                                      <case>
                                        pattern (src/invariant.ml[315,10525+8]..src/invariant.ml[315,10525+31])
                                          Tpat_construct "Position"
                                          [
                                            pattern (src/invariant.ml[315,10525+18]..src/invariant.ml[315,10525+24])
                                              Tpat_construct "Before"
                                              []
                                              None
                                            pattern (src/invariant.ml[315,10525+26]..src/invariant.ml[315,10525+27])
                                              Tpat_any
                                            pattern (src/invariant.ml[315,10525+29]..src/invariant.ml[315,10525+30])
                                              Tpat_any
                                          ]
                                          None
                                        expression (src/invariant.ml[318,10664+10]..src/invariant.ml[318,10664+12])
                                          Texp_construct "()"
                                          []
                                      <case>
                                        pattern (src/invariant.ml[319,10677+8]..src/invariant.ml[319,10677+29])
                                          Tpat_construct "Position"
                                          [
                                            pattern (src/invariant.ml[319,10677+18]..src/invariant.ml[319,10677+22])
                                              Tpat_construct "Left"
                                              []
                                              None
                                            pattern (src/invariant.ml[319,10677+24]..src/invariant.ml[319,10677+25])
                                              Tpat_any
                                            pattern (src/invariant.ml[319,10677+27]..src/invariant.ml[319,10677+28])
                                              Tpat_any
                                          ]
                                          None
                                        expression (src/invariant.ml[321,10777+10]..src/invariant.ml[321,10777+22])
                                          Texp_assert                                          expression (src/invariant.ml[321,10777+17]..src/invariant.ml[321,10777+22])
                                            Texp_construct "false"
                                            []
                                      <case>
                                        pattern (src/invariant.ml[322,10800+8]..src/invariant.ml[322,10800+39])
                                          Tpat_construct "Position"
                                          [
                                            pattern (src/invariant.ml[322,10800+18]..src/invariant.ml[322,10800+19])
                                              Tpat_any
                                            pattern (src/invariant.ml[322,10800+21]..src/invariant.ml[322,10800+22])
                                              Tpat_any
                                            pattern (src/invariant.ml[322,10800+24]..src/invariant.ml[322,10800+38])
                                              Tpat_construct "FlavorLocation"
                                              []
                                              None
                                          ]
                                          None
                                        expression (src/invariant.ml[324,10903+10]..src/invariant.ml[324,10903+22])
                                          Texp_assert                                          expression (src/invariant.ml[324,10903+17]..src/invariant.ml[324,10903+22])
                                            Texp_construct "false"
                                            []
                                      <case>
                                        pattern (src/invariant.ml[325,10926+8]..src/invariant.ml[325,10926+52])
                                          Tpat_construct "Position"
                                          [
                                            pattern (src/invariant.ml[325,10926+18]..src/invariant.ml[325,10926+30])
                                              Tpat_construct "RightNamed"
                                              [
                                                pattern (src/invariant.ml[325,10926+29]..src/invariant.ml[325,10926+30])
                                                  Tpat_any
                                              ]
                                              None
                                            pattern (src/invariant.ml[325,10926+32]..src/invariant.ml[325,10926+48])
                                              Tpat_construct "WhereSymbolStart"
                                              []
                                              None
                                            pattern (src/invariant.ml[325,10926+50]..src/invariant.ml[325,10926+51])
                                              Tpat_any
                                          ]
                                          None
                                        expression (src/invariant.ml[327,11035+10]..src/invariant.ml[327,11035+22])
                                          Texp_assert                                          expression (src/invariant.ml[327,11035+17]..src/invariant.ml[327,11035+22])
                                            Texp_construct "false"
                                            []
                                      <case>
                                        pattern (src/invariant.ml[328,11058+8]..src/invariant.ml[328,11058+42])
                                          Tpat_construct "Position"
                                          [
                                            pattern (src/invariant.ml[328,11058+18]..src/invariant.ml[328,11058+31])
                                              Tpat_construct "RightNamed"
                                              [
                                                pattern (src/invariant.ml[328,11058+29]..src/invariant.ml[328,11058+31])
                                                  Tpat_var "id/1637"
                                              ]
                                              None
                                            pattern (src/invariant.ml[328,11058+33]..src/invariant.ml[328,11058+38])
                                              Tpat_var "where/1638"
                                            pattern (src/invariant.ml[328,11058+40]..src/invariant.ml[328,11058+41])
                                              Tpat_any
                                          ]
                                          None
                                        expression (src/invariant.ml[332,11309+10]..src/invariant.ml[335,11426+15])
                                          Texp_apply
                                          expression (src/invariant.ml[332,11309+10]..src/invariant.ml[332,11309+21])
                                            Texp_ident "Stdlib!.Array.iteri"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[332,11309+22]..src/invariant.ml[335,11426+11])
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/invariant.ml[332,11309+27]..src/invariant.ml[332,11309+28])
                                                      Tpat_var "i/1639"
                                                    expression (src/invariant.ml[332,11309+29]..src/invariant.ml[334,11374+51]) ghost
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/invariant.ml[332,11309+29]..src/invariant.ml[332,11309+32])
                                                            Tpat_var "id'/1640"
                                                          expression (src/invariant.ml[333,11345+12]..src/invariant.ml[334,11374+51])
                                                            Texp_ifthenelse
                                                            expression (src/invariant.ml[333,11345+15]..src/invariant.ml[333,11345+23])
                                                              Texp_apply
                                                              expression (src/invariant.ml[333,11345+18]..src/invariant.ml[333,11345+19])
                                                                Texp_ident "Stdlib!.="
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/invariant.ml[333,11345+15]..src/invariant.ml[333,11345+17])
                                                                    Texp_ident "id/1637"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/invariant.ml[333,11345+20]..src/invariant.ml[333,11345+23])
                                                                    Texp_ident "id'/1640"
                                                              ]
                                                            expression (src/invariant.ml[334,11374+14]..src/invariant.ml[334,11374+51])
                                                              Texp_apply
                                                              expression (src/invariant.ml[334,11374+14]..src/invariant.ml[334,11374+29])
                                                                Texp_ident "F/1585.record_ConVar"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/invariant.ml[334,11374+30]..src/invariant.ml[334,11374+34])
                                                                    Texp_construct "true"
                                                                    []
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/invariant.ml[334,11374+35]..src/invariant.ml[334,11374+51])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (src/invariant.ml[334,11374+36]..src/invariant.ml[334,11374+43])
                                                                        Texp_apply
                                                                        expression (src/invariant.ml[334,11374+36]..src/invariant.ml[334,11374+43]) ghost
                                                                          Texp_ident "Stdlib!.Array.get"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[334,11374+36]..src/invariant.ml[334,11374+39])
                                                                              Texp_ident "rhs/1588"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[334,11374+41]..src/invariant.ml[334,11374+42])
                                                                              Texp_ident "i/1639"
                                                                        ]
                                                                      expression (src/invariant.ml[334,11374+45]..src/invariant.ml[334,11374+50])
                                                                        Texp_ident "where/1638"
                                                                    ]
                                                              ]
                                                            None
                                                      ]
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[335,11426+12]..src/invariant.ml[335,11426+15])
                                                Texp_ident "ids/1589"
                                          ]
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[336,11442+6]..src/invariant.ml[336,11442+30])
                                    Texp_apply
                                    expression (src/invariant.ml[336,11442+7]..src/invariant.ml[336,11442+22])
                                      Texp_ident "Dune__exe!.Action.keywords"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[336,11442+23]..src/invariant.ml[336,11442+29])
                                          Texp_ident "action/1590"
                                    ]
                              ]
                  ]
            ]
          expression (src/invariant.ml[340,11513+2]..src/invariant.ml[364,12540+3])
            Texp_apply
            expression (src/invariant.ml[340,11513+2]..src/invariant.ml[340,11513+11])
              Texp_ident "Dune__exe!.Lr1.iterx"
            [
              <arg>
                Nolabel
                expression (src/invariant.ml[340,11513+12]..src/invariant.ml[364,12540+3])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[340,11513+17]..src/invariant.ml[340,11513+18])
                        Tpat_var "s/1687"
                      expression (src/invariant.ml[342,11592+4]..src/invariant.ml[362,12496+42])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/invariant.ml[342,11592+8]..src/invariant.ml[342,11592+11])
                              Tpat_var "sym/1688"
                            expression (src/invariant.ml[342,11592+14]..src/invariant.ml[342,11592+50])
                              Texp_apply
                              expression (src/invariant.ml[342,11592+14]..src/invariant.ml[342,11592+26])
                                Texp_ident "Dune__exe!.Option.force"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[342,11592+27]..src/invariant.ml[342,11592+50])
                                    Texp_apply
                                    expression (src/invariant.ml[342,11592+28]..src/invariant.ml[342,11592+47])
                                      Texp_ident "Dune__exe!.Lr1.incoming_symbol"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[342,11592+48]..src/invariant.ml[342,11592+49])
                                          Texp_ident "s/1687"
                                    ]
                              ]
                        ]
                        expression (src/invariant.ml[348,11910+4]..src/invariant.ml[362,12496+42])
                          Texp_sequence
                          expression (src/invariant.ml[348,11910+4]..src/invariant.ml[356,12239+24])
                            Texp_apply
                            expression (src/invariant.ml[348,11910+4]..src/invariant.ml[348,11910+20])
                              Texp_ident "Dune__exe!.Grammar.TerminalMap.iter"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[348,11910+21]..src/invariant.ml[356,12239+5])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/invariant.ml[348,11910+26]..src/invariant.ml[348,11910+27])
                                        Tpat_any
                                      expression (src/invariant.ml[348,11910+28]..src/invariant.ml[355,12229+9]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[348,11910+28]..src/invariant.ml[348,11910+33])
                                              Tpat_var "prods/1700"
                                            expression (src/invariant.ml[349,11947+6]..src/invariant.ml[355,12229+9])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/invariant.ml[349,11947+10]..src/invariant.ml[349,11947+14])
                                                    Tpat_var "prod/1701"
                                                  expression (src/invariant.ml[349,11947+17]..src/invariant.ml[349,11947+34])
                                                    Texp_apply
                                                    expression (src/invariant.ml[349,11947+17]..src/invariant.ml[349,11947+28])
                                                      Texp_ident "Dune__exe!.Misc.single"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[349,11947+29]..src/invariant.ml[349,11947+34])
                                                          Texp_ident "prods/1700"
                                                    ]
                                              ]
                                              expression (src/invariant.ml[350,11985+6]..src/invariant.ml[355,12229+9])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/invariant.ml[350,11985+10]..src/invariant.ml[350,11985+17])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/invariant.ml[350,11985+10]..src/invariant.ml[350,11985+12])
                                                          Tpat_var "nt/1738"
                                                        pattern (src/invariant.ml[350,11985+14]..src/invariant.ml[350,11985+17])
                                                          Tpat_var "rhs/1739"
                                                      ]
                                                    expression (src/invariant.ml[350,11985+20]..src/invariant.ml[350,11985+39])
                                                      Texp_apply
                                                      expression (src/invariant.ml[350,11985+20]..src/invariant.ml[350,11985+34])
                                                        Texp_ident "Dune__exe!.Grammar.Production.def"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[350,11985+35]..src/invariant.ml[350,11985+39])
                                                            Texp_ident "prod/1701"
                                                      ]
                                                ]
                                                expression (src/invariant.ml[351,12028+6]..src/invariant.ml[355,12229+9])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/invariant.ml[351,12028+10]..src/invariant.ml[351,12028+16])
                                                        Tpat_var "length/1740"
                                                      expression (src/invariant.ml[351,12028+19]..src/invariant.ml[351,12028+35])
                                                        Texp_apply
                                                        expression (src/invariant.ml[351,12028+19]..src/invariant.ml[351,12028+31])
                                                          Texp_ident "Stdlib!.Array.length"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[351,12028+32]..src/invariant.ml[351,12028+35])
                                                              Texp_ident "rhs/1739"
                                                        ]
                                                  ]
                                                  expression (src/invariant.ml[352,12067+6]..src/invariant.ml[355,12229+9])
                                                    Texp_ifthenelse
                                                    expression (src/invariant.ml[352,12067+9]..src/invariant.ml[352,12067+19])
                                                      Texp_apply
                                                      expression (src/invariant.ml[352,12067+16]..src/invariant.ml[352,12067+17])
                                                        Texp_ident "Stdlib!.="
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[352,12067+9]..src/invariant.ml[352,12067+15])
                                                            Texp_ident "length/1740"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[352,12067+18]..src/invariant.ml[352,12067+19])
                                                            Texp_constant Const_int 0
                                                      ]
                                                    expression (src/invariant.ml[352,12067+25]..src/invariant.ml[355,12229+9])
                                                      Texp_sequence
                                                      expression (src/invariant.ml[353,12098+8]..src/invariant.ml[353,12098+65])
                                                        Texp_apply
                                                        expression (src/invariant.ml[353,12098+8]..src/invariant.ml[353,12098+23])
                                                          Texp_ident "F/1585.record_VarVar"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[353,12098+24]..src/invariant.ml[353,12098+49])
                                                              Texp_tuple
                                                              [
                                                                expression (src/invariant.ml[353,12098+25]..src/invariant.ml[353,12098+36])
                                                                  Texp_construct "Symbol.N"
                                                                  [
                                                                    expression (src/invariant.ml[353,12098+34]..src/invariant.ml[353,12098+36])
                                                                      Texp_ident "nt/1738"
                                                                  ]
                                                                expression (src/invariant.ml[353,12098+38]..src/invariant.ml[353,12098+48])
                                                                  Texp_construct "WhereStart"
                                                                  []
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[353,12098+50]..src/invariant.ml[353,12098+65])
                                                              Texp_tuple
                                                              [
                                                                expression (src/invariant.ml[353,12098+51]..src/invariant.ml[353,12098+54])
                                                                  Texp_ident "sym/1688"
                                                                expression (src/invariant.ml[353,12098+56]..src/invariant.ml[353,12098+64])
                                                                  Texp_construct "WhereEnd"
                                                                  []
                                                              ]
                                                        ]
                                                      expression (src/invariant.ml[354,12165+8]..src/invariant.ml[354,12165+63])
                                                        Texp_apply
                                                        expression (src/invariant.ml[354,12165+8]..src/invariant.ml[354,12165+23])
                                                          Texp_ident "F/1585.record_VarVar"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[354,12165+24]..src/invariant.ml[354,12165+47])
                                                              Texp_tuple
                                                              [
                                                                expression (src/invariant.ml[354,12165+25]..src/invariant.ml[354,12165+36])
                                                                  Texp_construct "Symbol.N"
                                                                  [
                                                                    expression (src/invariant.ml[354,12165+34]..src/invariant.ml[354,12165+36])
                                                                      Texp_ident "nt/1738"
                                                                  ]
                                                                expression (src/invariant.ml[354,12165+38]..src/invariant.ml[354,12165+46])
                                                                  Texp_construct "WhereEnd"
                                                                  []
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[354,12165+48]..src/invariant.ml[354,12165+63])
                                                              Texp_tuple
                                                              [
                                                                expression (src/invariant.ml[354,12165+49]..src/invariant.ml[354,12165+52])
                                                                  Texp_ident "sym/1688"
                                                                expression (src/invariant.ml[354,12165+54]..src/invariant.ml[354,12165+62])
                                                                  Texp_construct "WhereEnd"
                                                                  []
                                                              ]
                                                        ]
                                                    None
                                        ]
                                  ]
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[356,12239+6]..src/invariant.ml[356,12239+24])
                                  Texp_apply
                                  expression (src/invariant.ml[356,12239+7]..src/invariant.ml[356,12239+21])
                                    Texp_ident "Dune__exe!.Lr1.reductions"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[356,12239+22]..src/invariant.ml[356,12239+23])
                                        Texp_ident "s/1687"
                                  ]
                            ]
                          expression (src/invariant.ml[361,12464+4]..src/invariant.ml[362,12496+42])
                            Texp_ifthenelse
                            expression (src/invariant.ml[361,12464+7]..src/invariant.ml[361,12464+26])
                              Texp_apply
                              expression (src/invariant.ml[361,12464+7]..src/invariant.ml[361,12464+24])
                                Texp_ident "Dune__exe!.Lr1.has_beforeend"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[361,12464+25]..src/invariant.ml[361,12464+26])
                                    Texp_ident "s/1687"
                              ]
                            expression (src/invariant.ml[362,12496+6]..src/invariant.ml[362,12496+42])
                              Texp_apply
                              expression (src/invariant.ml[362,12496+6]..src/invariant.ml[362,12496+21])
                                Texp_ident "F/1585.record_ConVar"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[362,12496+22]..src/invariant.ml[362,12496+26])
                                    Texp_construct "true"
                                    []
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[362,12496+27]..src/invariant.ml[362,12496+42])
                                    Texp_tuple
                                    [
                                      expression (src/invariant.ml[362,12496+28]..src/invariant.ml[362,12496+31])
                                        Texp_ident "sym/1688"
                                      expression (src/invariant.ml[362,12496+33]..src/invariant.ml[362,12496+41])
                                        Texp_construct "WhereEnd"
                                        []
                                    ]
                              ]
                            None
                  ]
            ]
    ]
  structure_item (src/invariant.ml[366,12545+0]..src/invariant.ml[368,12613+12])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[366,12545+4]..src/invariant.ml[366,12545+9])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[366,12545+12]..src/invariant.ml[366,12545+35])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[366,12545+12]..src/invariant.ml[366,12545+20])
                Ttyp_constr "variable/1360"
                []
              core_type (src/invariant.ml[366,12545+24]..src/invariant.ml[366,12545+35])
                Ttyp_constr "option/10!"
                [
                  core_type (src/invariant.ml[366,12545+24]..src/invariant.ml[366,12545+28])
                    Ttyp_constr "bool/5!"
                    []
                ]
          Tpat_alias "track/1742"
          pattern (src/invariant.ml[366,12545+4]..src/invariant.ml[366,12545+9])
            Tpat_any
        expression (src/invariant.ml[367,12583+2]..src/invariant.ml[368,12613+12])
          extra
            Texp_constraint
            core_type (src/invariant.ml[366,12545+12]..src/invariant.ml[366,12545+35])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[366,12545+12]..src/invariant.ml[366,12545+20])
                Ttyp_constr "variable/1360"
                []
              core_type (src/invariant.ml[366,12545+24]..src/invariant.ml[366,12545+35])
                Ttyp_constr "option/10!"
                [
                  core_type (src/invariant.ml[366,12545+24]..src/invariant.ml[366,12545+28])
                    Ttyp_constr "bool/5!"
                    []
                ]
          Texp_letmodule "S/1746"
          module_expr (src/invariant.ml[367,12583+17]..src/invariant.ml[367,12583+24])
            Tmod_apply_unit
            module_expr (src/invariant.ml[367,12583+17]..src/invariant.ml[367,12583+24])
              Tmod_ident "F/1585.Solve"
          expression (src/invariant.ml[368,12613+2]..src/invariant.ml[368,12613+12])
            Texp_ident "S/1746.solution"
    ]
  structure_item (src/invariant.ml[370,12627+0]..src/invariant.ml[371,12658+48])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[370,12627+4]..src/invariant.ml[370,12627+9])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[370,12627+12]..src/invariant.ml[370,12627+28])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[370,12627+12]..src/invariant.ml[370,12627+20])
                Ttyp_constr "variable/1360"
                []
              core_type (src/invariant.ml[370,12627+24]..src/invariant.ml[370,12627+28])
                Ttyp_constr "bool/5!"
                []
          Tpat_alias "track/1747"
          pattern (src/invariant.ml[370,12627+4]..src/invariant.ml[370,12627+9])
            Tpat_any
        expression (src/invariant.ml[371,12658+2]..src/invariant.ml[371,12658+48])
          extra
            Texp_constraint
            core_type (src/invariant.ml[370,12627+12]..src/invariant.ml[370,12627+28])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[370,12627+12]..src/invariant.ml[370,12627+20])
                Ttyp_constr "variable/1360"
                []
              core_type (src/invariant.ml[370,12627+24]..src/invariant.ml[370,12627+28])
                Ttyp_constr "bool/5!"
                []
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[371,12658+6]..src/invariant.ml[371,12658+7])
                Tpat_var "x/1748"
              expression (src/invariant.ml[371,12658+11]..src/invariant.ml[371,12658+48])
                Texp_apply
                expression (src/invariant.ml[371,12658+11]..src/invariant.ml[371,12658+23])
                  Texp_ident "Dune__exe!.Option.value"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[371,12658+24]..src/invariant.ml[371,12658+33])
                      Texp_apply
                      expression (src/invariant.ml[371,12658+25]..src/invariant.ml[371,12658+30])
                        Texp_ident "track/1742"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[371,12658+31]..src/invariant.ml[371,12658+32])
                            Texp_ident "x/1748"
                      ]
                  <arg>
                    Labelled "default"
                    expression (src/invariant.ml[371,12658+43]..src/invariant.ml[371,12658+48])
                      Texp_construct "false"
                      []
                ]
          ]
    ]
  structure_item (src/invariant.ml[373,12708+0]..src/invariant.ml[375,12762+28])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[373,12708+4]..src/invariant.ml[373,12708+10])
          Tpat_var "startp/1749"
        expression (src/invariant.ml[373,12708+11]..src/invariant.ml[375,12762+28]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[373,12708+11]..src/invariant.ml[373,12708+17])
                Tpat_var "symbol/1751"
              expression (src/invariant.ml[374,12728+2]..src/invariant.ml[375,12762+28])
                Texp_apply
                expression (src/invariant.ml[374,12728+31]..src/invariant.ml[374,12728+33])
                  Texp_ident "Stdlib!.||"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[374,12728+2]..src/invariant.ml[374,12728+30])
                      Texp_ident "Dune__exe!.Settings.represent_positions"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[375,12762+2]..src/invariant.ml[375,12762+28])
                      Texp_apply
                      expression (src/invariant.ml[375,12762+2]..src/invariant.ml[375,12762+7])
                        Texp_ident "track/1747"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[375,12762+8]..src/invariant.ml[375,12762+28])
                            Texp_tuple
                            [
                              expression (src/invariant.ml[375,12762+9]..src/invariant.ml[375,12762+15])
                                Texp_ident "symbol/1751"
                              expression (src/invariant.ml[375,12762+17]..src/invariant.ml[375,12762+27])
                                Texp_construct "WhereStart"
                                []
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[377,12792+0]..src/invariant.ml[379,12844+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[377,12792+4]..src/invariant.ml[377,12792+8])
          Tpat_var "endp/1752"
        expression (src/invariant.ml[377,12792+9]..src/invariant.ml[379,12844+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[377,12792+9]..src/invariant.ml[377,12792+15])
                Tpat_var "symbol/1754"
              expression (src/invariant.ml[378,12810+2]..src/invariant.ml[379,12844+26])
                Texp_apply
                expression (src/invariant.ml[378,12810+31]..src/invariant.ml[378,12810+33])
                  Texp_ident "Stdlib!.||"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[378,12810+2]..src/invariant.ml[378,12810+30])
                      Texp_ident "Dune__exe!.Settings.represent_positions"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[379,12844+2]..src/invariant.ml[379,12844+26])
                      Texp_apply
                      expression (src/invariant.ml[379,12844+2]..src/invariant.ml[379,12844+7])
                        Texp_ident "track/1747"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[379,12844+8]..src/invariant.ml[379,12844+26])
                            Texp_tuple
                            [
                              expression (src/invariant.ml[379,12844+9]..src/invariant.ml[379,12844+15])
                                Texp_ident "symbol/1754"
                              expression (src/invariant.ml[379,12844+17]..src/invariant.ml[379,12844+25])
                                Texp_construct "WhereEnd"
                                []
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[381,12872+0]..src/invariant.ml[383,12968+46])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[381,12872+4]..src/invariant.ml[381,12872+20])
          Tpat_var "for_every_symbol/1755"
        expression (src/invariant.ml[381,12872+21]..src/invariant.ml[383,12968+46]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[381,12872+22]..src/invariant.ml[381,12872+23])
                extra
                  Tpat_extra_constraint
                  core_type (src/invariant.ml[381,12872+26]..src/invariant.ml[381,12872+42])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/invariant.ml[381,12872+26]..src/invariant.ml[381,12872+34])
                      Ttyp_constr "Dune__exe!.Grammar.Symbol.t"
                      []
                    core_type (src/invariant.ml[381,12872+38]..src/invariant.ml[381,12872+42])
                      Ttyp_constr "unit/6!"
                      []
                Tpat_alias "f/1757"
                pattern (src/invariant.ml[381,12872+22]..src/invariant.ml[381,12872+23])
                  Tpat_any
              expression (src/invariant.ml[382,12925+2]..src/invariant.ml[383,12968+46])
                extra
                  Texp_constraint
                  core_type (src/invariant.ml[381,12872+46]..src/invariant.ml[381,12872+50])
                    Ttyp_constr "unit/6!"
                    []
                Texp_sequence
                expression (src/invariant.ml[382,12925+2]..src/invariant.ml[382,12925+41])
                  Texp_apply
                  expression (src/invariant.ml[382,12925+2]..src/invariant.ml[382,12925+15])
                    Texp_ident "Dune__exe!.Grammar.Terminal.iter"
                  [
                    <arg>
                      Nolabel
                      expression (src/invariant.ml[382,12925+16]..src/invariant.ml[382,12925+41])
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[382,12925+21]..src/invariant.ml[382,12925+22])
                              Tpat_var "t/1758"
                            expression (src/invariant.ml[382,12925+26]..src/invariant.ml[382,12925+40])
                              Texp_apply
                              expression (src/invariant.ml[382,12925+26]..src/invariant.ml[382,12925+27])
                                Texp_ident "f/1757"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[382,12925+28]..src/invariant.ml[382,12925+40])
                                    Texp_construct "Symbol.T"
                                    [
                                      expression (src/invariant.ml[382,12925+38]..src/invariant.ml[382,12925+39])
                                        Texp_ident "t/1758"
                                    ]
                              ]
                        ]
                  ]
                expression (src/invariant.ml[383,12968+2]..src/invariant.ml[383,12968+46])
                  Texp_apply
                  expression (src/invariant.ml[383,12968+2]..src/invariant.ml[383,12968+18])
                    Texp_ident "Dune__exe!.Grammar.Nonterminal.iter"
                  [
                    <arg>
                      Nolabel
                      expression (src/invariant.ml[383,12968+19]..src/invariant.ml[383,12968+46])
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[383,12968+24]..src/invariant.ml[383,12968+26])
                              Tpat_var "nt/1759"
                            expression (src/invariant.ml[383,12968+30]..src/invariant.ml[383,12968+45])
                              Texp_apply
                              expression (src/invariant.ml[383,12968+30]..src/invariant.ml[383,12968+31])
                                Texp_ident "f/1757"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[383,12968+32]..src/invariant.ml[383,12968+45])
                                    Texp_construct "Symbol.N"
                                    [
                                      expression (src/invariant.ml[383,12968+42]..src/invariant.ml[383,12968+44])
                                        Texp_ident "nt/1759"
                                    ]
                              ]
                        ]
                  ]
          ]
    ]
  structure_item (src/invariant.ml[385,13016+0]..src/invariant.ml[388,13151+4])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[385,13016+4]..src/invariant.ml[385,13016+25])
          Tpat_var "sum_over_every_symbol/1760"
        expression (src/invariant.ml[385,13016+26]..src/invariant.ml[388,13151+4]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[385,13016+27]..src/invariant.ml[385,13016+28])
                extra
                  Tpat_extra_constraint
                  core_type (src/invariant.ml[385,13016+31]..src/invariant.ml[385,13016+47])
                    Ttyp_arrow
                    Nolabel
                    core_type (src/invariant.ml[385,13016+31]..src/invariant.ml[385,13016+39])
                      Ttyp_constr "Dune__exe!.Grammar.Symbol.t"
                      []
                    core_type (src/invariant.ml[385,13016+43]..src/invariant.ml[385,13016+47])
                      Ttyp_constr "bool/5!"
                      []
                Tpat_alias "f/1762"
                pattern (src/invariant.ml[385,13016+27]..src/invariant.ml[385,13016+28])
                  Tpat_any
              expression (src/invariant.ml[386,13073+2]..src/invariant.ml[388,13151+4])
                extra
                  Texp_constraint
                  core_type (src/invariant.ml[385,13016+51]..src/invariant.ml[385,13016+54])
                    Ttyp_constr "int/1!"
                    []
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/invariant.ml[386,13073+6]..src/invariant.ml[386,13073+7])
                      Tpat_var "c/1763"
                    expression (src/invariant.ml[386,13073+10]..src/invariant.ml[386,13073+15])
                      Texp_apply
                      expression (src/invariant.ml[386,13073+10]..src/invariant.ml[386,13073+13])
                        Texp_ident "Stdlib!.ref"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[386,13073+14]..src/invariant.ml[386,13073+15])
                            Texp_constant Const_int 0
                      ]
                ]
                expression (src/invariant.ml[387,13092+2]..src/invariant.ml[388,13151+4])
                  Texp_sequence
                  expression (src/invariant.ml[387,13092+2]..src/invariant.ml[387,13092+57])
                    Texp_apply
                    expression (src/invariant.ml[387,13092+2]..src/invariant.ml[387,13092+18])
                      Texp_ident "for_every_symbol/1755"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[387,13092+19]..src/invariant.ml[387,13092+57])
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/invariant.ml[387,13092+24]..src/invariant.ml[387,13092+27])
                                Tpat_var "sym/1764"
                              expression (src/invariant.ml[387,13092+31]..src/invariant.ml[387,13092+56])
                                Texp_ifthenelse
                                expression (src/invariant.ml[387,13092+34]..src/invariant.ml[387,13092+39])
                                  Texp_apply
                                  expression (src/invariant.ml[387,13092+34]..src/invariant.ml[387,13092+35])
                                    Texp_ident "f/1762"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[387,13092+36]..src/invariant.ml[387,13092+39])
                                        Texp_ident "sym/1764"
                                  ]
                                expression (src/invariant.ml[387,13092+45]..src/invariant.ml[387,13092+56])
                                  Texp_apply
                                  expression (src/invariant.ml[387,13092+47]..src/invariant.ml[387,13092+49])
                                    Texp_ident "Stdlib!.:="
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[387,13092+45]..src/invariant.ml[387,13092+46])
                                        Texp_ident "c/1763"
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[387,13092+50]..src/invariant.ml[387,13092+56])
                                        Texp_apply
                                        expression (src/invariant.ml[387,13092+53]..src/invariant.ml[387,13092+54])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[387,13092+50]..src/invariant.ml[387,13092+52])
                                              Texp_apply
                                              expression (src/invariant.ml[387,13092+50]..src/invariant.ml[387,13092+51])
                                                Texp_ident "Stdlib!.!"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[387,13092+51]..src/invariant.ml[387,13092+52])
                                                    Texp_ident "c/1763"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[387,13092+55]..src/invariant.ml[387,13092+56])
                                              Texp_constant Const_int 1
                                        ]
                                  ]
                                None
                          ]
                    ]
                  expression (src/invariant.ml[388,13151+2]..src/invariant.ml[388,13151+4])
                    Texp_apply
                    expression (src/invariant.ml[388,13151+2]..src/invariant.ml[388,13151+3])
                      Texp_ident "Stdlib!.!"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[388,13151+3]..src/invariant.ml[388,13151+4])
                          Texp_ident "c/1763"
                    ]
          ]
    ]
  structure_item (src/invariant.ml[390,13157+0]..src/invariant.ml[396,13412+66])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[390,13157+4]..src/invariant.ml[390,13157+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[391,13166+2]..src/invariant.ml[396,13412+66])
          Texp_apply
          expression (src/invariant.ml[391,13166+2]..src/invariant.ml[391,13166+12])
            Texp_ident "Dune__exe!.Error.logC"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[391,13166+13]..src/invariant.ml[391,13166+14])
                Texp_constant Const_int 1
            <arg>
              Nolabel
              expression (src/invariant.ml[391,13166+15]..src/invariant.ml[396,13412+66])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[391,13166+20]..src/invariant.ml[391,13166+21])
                      Tpat_var "f/1765"
                    expression (src/invariant.ml[392,13191+4]..src/invariant.ml[396,13412+65])
                      Texp_apply
                      expression (src/invariant.ml[392,13191+4]..src/invariant.ml[392,13191+18])
                        Texp_ident "Stdlib!.Printf.fprintf"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[392,13191+19]..src/invariant.ml[392,13191+20])
                            Texp_ident "f/1765"
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64])
                            Texp_construct "CamlinternalFormatBasics.Format"
                            [
                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                Texp_construct "CamlinternalFormatBasics.Int"
                                [
                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                    Texp_construct "CamlinternalFormatBasics.Int_d"
                                    []
                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                    []
                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                    Texp_construct "CamlinternalFormatBasics.No_precision"
                                    []
                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                    [
                                      expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                        Texp_constant Const_string(" out of ",(src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost,None)
                                      expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                        Texp_construct "CamlinternalFormatBasics.Int"
                                        [
                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                            Texp_construct "CamlinternalFormatBasics.Int_d"
                                            []
                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                            []
                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_precision"
                                            []
                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                Texp_constant Const_string(" symbols keep track of their start position.\n",(src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost,None)
                                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                Texp_construct "CamlinternalFormatBasics.Int"
                                                [
                                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Int_d"
                                                    []
                                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                    []
                                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_precision"
                                                    []
                                                  expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                        Texp_constant Const_string(" out of ",(src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost,None)
                                                      expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.Int"
                                                        [
                                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.Int_d"
                                                            []
                                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_precision"
                                                            []
                                                          expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                                Texp_constant Const_string(" symbols keep track of their end position.\n",(src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost,None)
                                                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                              expression (src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost
                                Texp_constant Const_string("%d out of %d symbols keep track of their start position.\n%d out of %d symbols keep track of their end position.\n",(src/invariant.ml[393,13212+6]..src/invariant.ml[394,13279+64]) ghost,None)
                            ]
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[395,13344+8]..src/invariant.ml[395,13344+38])
                            Texp_apply
                            expression (src/invariant.ml[395,13344+9]..src/invariant.ml[395,13344+30])
                              Texp_ident "sum_over_every_symbol/1760"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[395,13344+31]..src/invariant.ml[395,13344+37])
                                  Texp_ident "startp/1749"
                            ]
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[395,13344+39]..src/invariant.ml[395,13344+67])
                            Texp_apply
                            expression (src/invariant.ml[395,13344+51]..src/invariant.ml[395,13344+52])
                              Texp_ident "Stdlib!.+"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[395,13344+40]..src/invariant.ml[395,13344+50])
                                  Texp_ident "Dune__exe!.Grammar.Terminal.n"
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[395,13344+53]..src/invariant.ml[395,13344+66])
                                  Texp_ident "Dune__exe!.Grammar.Nonterminal.n"
                            ]
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[396,13412+8]..src/invariant.ml[396,13412+36])
                            Texp_apply
                            expression (src/invariant.ml[396,13412+9]..src/invariant.ml[396,13412+30])
                              Texp_ident "sum_over_every_symbol/1760"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[396,13412+31]..src/invariant.ml[396,13412+35])
                                  Texp_ident "endp/1752"
                            ]
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[396,13412+37]..src/invariant.ml[396,13412+65])
                            Texp_apply
                            expression (src/invariant.ml[396,13412+49]..src/invariant.ml[396,13412+50])
                              Texp_ident "Stdlib!.+"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[396,13412+38]..src/invariant.ml[396,13412+48])
                                  Texp_ident "Dune__exe!.Grammar.Terminal.n"
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[396,13412+51]..src/invariant.ml[396,13412+64])
                                  Texp_ident "Dune__exe!.Grammar.Nonterminal.n"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[403,13640+0]..src/invariant.ml[410,13782+1])
    Tstr_type Rec
    [
      type_declaration cell/1766 (src/invariant.ml[403,13640+0]..src/invariant.ml[410,13782+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (src/invariant.ml[404,13654+2]..src/invariant.ml[404,13654+19])
                Immutable
                symbol/1767                core_type (src/invariant.ml[404,13654+10]..src/invariant.ml[404,13654+18])
                  Ttyp_poly
                  core_type (src/invariant.ml[404,13654+10]..src/invariant.ml[404,13654+18])
                    Ttyp_constr "Dune__exe!.Grammar.Symbol.t"
                    []
              (src/invariant.ml[405,13674+2]..src/invariant.ml[405,13674+24])
                Immutable
                states/1768                core_type (src/invariant.ml[405,13674+10]..src/invariant.ml[405,13674+23])
                  Ttyp_poly
                  core_type (src/invariant.ml[405,13674+10]..src/invariant.ml[405,13674+23])
                    Ttyp_constr "Dune__exe!.Lr1.NodeSet.t"
                    []
              (src/invariant.ml[406,13699+2]..src/invariant.ml[406,13699+19])
                Immutable
                holds_semv/1769                core_type (src/invariant.ml[406,13699+14]..src/invariant.ml[406,13699+18])
                  Ttyp_poly
                  core_type (src/invariant.ml[406,13699+14]..src/invariant.ml[406,13699+18])
                    Ttyp_constr "bool/5!"
                    []
              (src/invariant.ml[407,13719+2]..src/invariant.ml[407,13719+20])
                Immutable
                holds_state/1770                core_type (src/invariant.ml[407,13719+15]..src/invariant.ml[407,13719+19])
                  Ttyp_poly
                  core_type (src/invariant.ml[407,13719+15]..src/invariant.ml[407,13719+19])
                    Ttyp_constr "bool/5!"
                    []
              (src/invariant.ml[408,13740+2]..src/invariant.ml[408,13740+21])
                Immutable
                holds_startp/1771                core_type (src/invariant.ml[408,13740+16]..src/invariant.ml[408,13740+20])
                  Ttyp_poly
                  core_type (src/invariant.ml[408,13740+16]..src/invariant.ml[408,13740+20])
                    Ttyp_constr "bool/5!"
                    []
              (src/invariant.ml[409,13762+2]..src/invariant.ml[409,13762+19])
                Immutable
                holds_endp/1772                core_type (src/invariant.ml[409,13762+14]..src/invariant.ml[409,13762+18])
                  Ttyp_poly
                  core_type (src/invariant.ml[409,13762+14]..src/invariant.ml[409,13762+18])
                    Ttyp_constr "bool/5!"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[412,13785+0]..src/invariant.ml[413,13797+12])
    Tstr_type Rec
    [
      type_declaration word/1773 (src/invariant.ml[412,13785+0]..src/invariant.ml[413,13797+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/invariant.ml[413,13797+2]..src/invariant.ml[413,13797+12])
              Ttyp_constr "array/8!"
              [
                core_type (src/invariant.ml[413,13797+2]..src/invariant.ml[413,13797+6])
                  Ttyp_constr "cell/1766"
                  []
              ]
    ]
  structure_item (src/invariant.ml[420,13934+0]..src/invariant.ml[431,14223+14])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[420,13934+4]..src/invariant.ml[420,13934+12])
          Tpat_var "has_semv/1774"
        expression (src/invariant.ml[420,13934+13]..src/invariant.ml[431,14223+14]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[420,13934+13]..src/invariant.ml[420,13934+19])
                Tpat_var "symbol/1776"
              expression (src/invariant.ml[421,13956+2]..src/invariant.ml[431,14223+14])
                Texp_apply
                expression (src/invariant.ml[421,13956+28]..src/invariant.ml[421,13956+30])
                  Texp_ident "Stdlib!.||"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[421,13956+2]..src/invariant.ml[421,13956+27])
                      Texp_ident "Dune__exe!.Settings.represent_values"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[422,13987+2]..src/invariant.ml[431,14223+14])
                      Texp_match
                      expression (src/invariant.ml[422,13987+8]..src/invariant.ml[422,13987+14])
                        Texp_ident "symbol/1776"
                      [
                        <case>
                          pattern (src/invariant.ml[423,14007+4]..src/invariant.ml[423,14007+16])
                            Tpat_value
                            pattern (src/invariant.ml[423,14007+4]..src/invariant.ml[423,14007+16])
                              Tpat_construct "Symbol.N"
                              [
                                pattern (src/invariant.ml[423,14007+13]..src/invariant.ml[423,14007+16])
                                  Tpat_var "_nt/1777"
                              ]
                              None
                          expression (src/invariant.ml[424,14027+6]..src/invariant.ml[424,14027+10])
                            Texp_construct "true"
                            []
                        <case>
                          pattern (src/invariant.ml[425,14038+4]..src/invariant.ml[425,14038+16])
                            Tpat_value
                            pattern (src/invariant.ml[425,14038+4]..src/invariant.ml[425,14038+16])
                              Tpat_construct "Symbol.T"
                              [
                                pattern (src/invariant.ml[425,14038+13]..src/invariant.ml[425,14038+16])
                                  Tpat_var "tok/1778"
                              ]
                              None
                          expression (src/invariant.ml[426,14058+6]..src/invariant.ml[431,14223+14])
                            Texp_match
                            expression (src/invariant.ml[426,14058+12]..src/invariant.ml[426,14058+34])
                              Texp_apply
                              expression (src/invariant.ml[426,14058+12]..src/invariant.ml[426,14058+30])
                                Texp_ident "Dune__exe!.Grammar.Terminal.ocamltype"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[426,14058+31]..src/invariant.ml[426,14058+34])
                                    Texp_ident "tok/1778"
                              ]
                            [
                              <case>
                                pattern (src/invariant.ml[427,14098+8]..src/invariant.ml[427,14098+12])
                                  Tpat_value
                                  pattern (src/invariant.ml[427,14098+8]..src/invariant.ml[427,14098+12])
                                    Tpat_construct "None"
                                    []
                                    None
                                expression (src/invariant.ml[429,14180+10]..src/invariant.ml[429,14180+15])
                                  Texp_construct "false"
                                  []
                              <case>
                                pattern (src/invariant.ml[430,14196+8]..src/invariant.ml[430,14196+23])
                                  Tpat_value
                                  pattern (src/invariant.ml[430,14196+8]..src/invariant.ml[430,14196+23])
                                    Tpat_construct "Some"
                                    [
                                      pattern (src/invariant.ml[430,14196+13]..src/invariant.ml[430,14196+23])
                                        Tpat_var "_ocamltype/1779"
                                    ]
                                    None
                                expression (src/invariant.ml[431,14223+10]..src/invariant.ml[431,14223+14])
                                  Texp_construct "true"
                                  []
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[433,14239+0]..src/invariant.ml[437,14408+71])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[433,14239+4]..src/invariant.ml[433,14239+8])
          Tpat_var "cell/1782"
        expression (src/invariant.ml[433,14239+9]..src/invariant.ml[437,14408+71]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[433,14239+9]..src/invariant.ml[433,14239+15])
                Tpat_var "symbol/1784"
              expression (src/invariant.ml[433,14239+16]..src/invariant.ml[437,14408+71]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[433,14239+16]..src/invariant.ml[433,14239+22])
                      Tpat_var "states/1785"
                    expression (src/invariant.ml[434,14264+2]..src/invariant.ml[437,14408+71])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/invariant.ml[434,14264+6]..src/invariant.ml[434,14264+16])
                            Tpat_var "holds_semv/1786"
                          expression (src/invariant.ml[434,14264+19]..src/invariant.ml[434,14264+34])
                            Texp_apply
                            expression (src/invariant.ml[434,14264+19]..src/invariant.ml[434,14264+27])
                              Texp_ident "has_semv/1774"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[434,14264+28]..src/invariant.ml[434,14264+34])
                                  Texp_ident "symbol/1784"
                            ]
                      ]
                      expression (src/invariant.ml[435,14302+2]..src/invariant.ml[437,14408+71])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/invariant.ml[435,14302+6]..src/invariant.ml[435,14302+17])
                              Tpat_var "holds_state/1787"
                            expression (src/invariant.ml[435,14302+20]..src/invariant.ml[435,14302+39])
                              Texp_apply
                              expression (src/invariant.ml[435,14302+20]..src/invariant.ml[435,14302+32])
                                Texp_ident "representeds/1309"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[435,14302+33]..src/invariant.ml[435,14302+39])
                                    Texp_ident "states/1785"
                              ]
                        ]
                        expression (src/invariant.ml[436,14345+2]..src/invariant.ml[437,14408+71])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/invariant.ml[436,14345+6]..src/invariant.ml[436,14345+30])
                                Tpat_tuple
                                [
                                  pattern (src/invariant.ml[436,14345+6]..src/invariant.ml[436,14345+18])
                                    Tpat_var "holds_startp/1788"
                                  pattern (src/invariant.ml[436,14345+20]..src/invariant.ml[436,14345+30])
                                    Tpat_var "holds_endp/1789"
                                ]
                              expression (src/invariant.ml[436,14345+33]..src/invariant.ml[436,14345+59])
                                Texp_tuple
                                [
                                  expression (src/invariant.ml[436,14345+33]..src/invariant.ml[436,14345+46])
                                    Texp_apply
                                    expression (src/invariant.ml[436,14345+33]..src/invariant.ml[436,14345+39])
                                      Texp_ident "startp/1749"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[436,14345+40]..src/invariant.ml[436,14345+46])
                                          Texp_ident "symbol/1784"
                                    ]
                                  expression (src/invariant.ml[436,14345+48]..src/invariant.ml[436,14345+59])
                                    Texp_apply
                                    expression (src/invariant.ml[436,14345+48]..src/invariant.ml[436,14345+52])
                                      Texp_ident "endp/1752"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[436,14345+53]..src/invariant.ml[436,14345+59])
                                          Texp_ident "symbol/1784"
                                    ]
                                ]
                          ]
                          expression (src/invariant.ml[437,14408+2]..src/invariant.ml[437,14408+71])
                            Texp_record
                              fields =
                                [
                                  "symbol"
                                    expression (src/invariant.ml[437,14408+4]..src/invariant.ml[437,14408+10])
                                      Texp_ident "symbol/1784"
                                  "states"
                                    expression (src/invariant.ml[437,14408+12]..src/invariant.ml[437,14408+18])
                                      Texp_ident "states/1785"
                                  "holds_semv"
                                    expression (src/invariant.ml[437,14408+20]..src/invariant.ml[437,14408+30])
                                      Texp_ident "holds_semv/1786"
                                  "holds_state"
                                    expression (src/invariant.ml[437,14408+32]..src/invariant.ml[437,14408+43])
                                      Texp_ident "holds_state/1787"
                                  "holds_startp"
                                    expression (src/invariant.ml[437,14408+45]..src/invariant.ml[437,14408+57])
                                      Texp_ident "holds_startp/1788"
                                  "holds_endp"
                                    expression (src/invariant.ml[437,14408+59]..src/invariant.ml[437,14408+69])
                                      Texp_ident "holds_endp/1789"
                                ]
                              representation =
                                Record_regular
                              extended_expression =
                                None
                ]
          ]
    ]
  structure_item (src/invariant.ml[441,14499+0]..src/invariant.ml[443,14569+39])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[441,14499+4]..src/invariant.ml[441,14499+11])
          Tpat_var "similar/1790"
        expression (src/invariant.ml[441,14499+12]..src/invariant.ml[443,14569+39]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[441,14499+12]..src/invariant.ml[441,14499+17])
                Tpat_var "cell1/1792"
              expression (src/invariant.ml[441,14499+18]..src/invariant.ml[443,14569+39]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[441,14499+18]..src/invariant.ml[441,14499+23])
                      Tpat_var "cell2/1793"
                    expression (src/invariant.ml[442,14525+2]..src/invariant.ml[443,14569+39])
                      Texp_apply
                      expression (src/invariant.ml[442,14525+41]..src/invariant.ml[442,14525+43])
                        Texp_ident "Stdlib!.&&"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[442,14525+2]..src/invariant.ml[442,14525+40])
                            Texp_apply
                            expression (src/invariant.ml[442,14525+2]..src/invariant.ml[442,14525+14])
                              Texp_ident "Dune__exe!.Grammar.Symbol.equal"
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[442,14525+15]..src/invariant.ml[442,14525+27])
                                  Texp_field
                                  expression (src/invariant.ml[442,14525+15]..src/invariant.ml[442,14525+20])
                                    Texp_ident "cell1/1792"
                                  "symbol"
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[442,14525+28]..src/invariant.ml[442,14525+40])
                                  Texp_field
                                  expression (src/invariant.ml[442,14525+28]..src/invariant.ml[442,14525+33])
                                    Texp_ident "cell2/1793"
                                  "symbol"
                            ]
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[443,14569+2]..src/invariant.ml[443,14569+39])
                            Texp_apply
                            expression (src/invariant.ml[443,14569+20]..src/invariant.ml[443,14569+21])
                              Texp_ident "Stdlib!.="
                            [
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[443,14569+2]..src/invariant.ml[443,14569+19])
                                  Texp_field
                                  expression (src/invariant.ml[443,14569+2]..src/invariant.ml[443,14569+7])
                                    Texp_ident "cell1/1792"
                                  "holds_state"
                              <arg>
                                Nolabel
                                expression (src/invariant.ml[443,14569+22]..src/invariant.ml[443,14569+39])
                                  Texp_field
                                  expression (src/invariant.ml[443,14569+22]..src/invariant.ml[443,14569+27])
                                    Texp_ident "cell2/1793"
                                  "holds_state"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[450,14930+0]..src/invariant.ml[451,14940+12])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[450,14930+4]..src/invariant.ml[450,14930+7])
          Tpat_var "pop/1794"
        expression (src/invariant.ml[451,14940+2]..src/invariant.ml[451,14940+12])
          Texp_ident "Dune__exe!.MArray.pop"
    ]
  structure_item (src/invariant.ml[453,14954+0]..src/invariant.ml[458,15044+13])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[453,14954+4]..src/invariant.ml[453,14954+12])
          Tpat_var "fold_top/1859"
        expression (src/invariant.ml[453,14954+13]..src/invariant.ml[458,15044+13]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[453,14954+13]..src/invariant.ml[453,14954+14])
                Tpat_var "f/1861"
              expression (src/invariant.ml[453,14954+15]..src/invariant.ml[458,15044+13]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[453,14954+15]..src/invariant.ml[453,14954+22])
                      Tpat_var "default/1862"
                    expression (src/invariant.ml[453,14954+23]..src/invariant.ml[458,15044+13]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/invariant.ml[453,14954+23]..src/invariant.ml[453,14954+24])
                            Tpat_var "w/1863"
                          expression (src/invariant.ml[454,14981+2]..src/invariant.ml[458,15044+13])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/invariant.ml[454,14981+6]..src/invariant.ml[454,14981+7])
                                  Tpat_var "n/1864"
                                expression (src/invariant.ml[454,14981+10]..src/invariant.ml[454,14981+24])
                                  Texp_apply
                                  expression (src/invariant.ml[454,14981+10]..src/invariant.ml[454,14981+22])
                                    Texp_ident "Stdlib!.Array.length"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[454,14981+23]..src/invariant.ml[454,14981+24])
                                        Texp_ident "w/1863"
                                  ]
                            ]
                            expression (src/invariant.ml[455,15009+2]..src/invariant.ml[458,15044+13])
                              Texp_ifthenelse
                              expression (src/invariant.ml[455,15009+5]..src/invariant.ml[455,15009+10])
                                Texp_apply
                                expression (src/invariant.ml[455,15009+7]..src/invariant.ml[455,15009+8])
                                  Texp_ident "Stdlib!.="
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[455,15009+5]..src/invariant.ml[455,15009+6])
                                      Texp_ident "n/1864"
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[455,15009+9]..src/invariant.ml[455,15009+10])
                                      Texp_constant Const_int 0
                                ]
                              expression (src/invariant.ml[456,15025+4]..src/invariant.ml[456,15025+11])
                                Texp_ident "default/1862"
                              Some
                                expression (src/invariant.ml[458,15044+4]..src/invariant.ml[458,15044+13])
                                  Texp_apply
                                  expression (src/invariant.ml[458,15044+4]..src/invariant.ml[458,15044+5])
                                    Texp_ident "f/1861"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[458,15044+6]..src/invariant.ml[458,15044+13])
                                        Texp_apply
                                        expression (src/invariant.ml[458,15044+6]..src/invariant.ml[458,15044+13]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[458,15044+6]..src/invariant.ml[458,15044+7])
                                              Texp_ident "w/1863"
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[458,15044+9]..src/invariant.ml[458,15044+12])
                                              Texp_apply
                                              expression (src/invariant.ml[458,15044+10]..src/invariant.ml[458,15044+11])
                                                Texp_ident "Stdlib!.-"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[458,15044+9]..src/invariant.ml[458,15044+10])
                                                    Texp_ident "n/1864"
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[458,15044+11]..src/invariant.ml[458,15044+12])
                                                    Texp_constant Const_int 1
                                              ]
                                        ]
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[464,15175+0]..src/invariant.ml[483,16055+3])
    Tstr_modtype "STACK/1868"
      module_type (src/invariant.ml[464,15175+20]..src/invariant.ml[483,16055+3])
        Tmty_signature
        [
          signature_item (src/invariant.ml[467,15265+2]..src/invariant.ml[467,15265+29])
            Tsig_value
            value_description stack/1865 (src/invariant.ml[467,15265+2]..src/invariant.ml[467,15265+29])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[466,15200+2]..[466,15200+64])
                    Pstr_eval
                    expression (src/invariant.ml[466,15200+2]..[466,15200+64])
                      Pexp_constant PConst_string("[stack s] is the known suffix of the stack at state [s]. ",(src/invariant.ml[466,15200+2]..[466,15200+64]),None)
                ]
              core_type (src/invariant.ml[467,15265+13]..src/invariant.ml[467,15265+29])
                Ttyp_arrow
                Nolabel
                core_type (src/invariant.ml[467,15265+13]..src/invariant.ml[467,15265+21])
                  Ttyp_constr "Dune__exe!.Lr1.node"
                  []
                core_type (src/invariant.ml[467,15265+25]..src/invariant.ml[467,15265+29])
                  Ttyp_constr "word/1773"
                  []
              []
          signature_item (src/invariant.ml[474,15655+2]..src/invariant.ml[474,15655+41])
            Tsig_value
            value_description prodstack/1866 (src/invariant.ml[474,15655+2]..src/invariant.ml[474,15655+41])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[469,15296+2]..[473,15589+65])
                    Pstr_eval
                    expression (src/invariant.ml[469,15296+2]..[473,15589+65])
                      Pexp_constant PConst_string("[prodstack prod] is the known suffix of the stack at a state where\n     production [prod] can be reduced. In the short invariant, the length of\n     this suffix is [Production.length prod]. In the long invariant, its\n     length can be greater. If there are no states where [prod] can be\n     reduced, then every cell contains an empty set of states. ",(src/invariant.ml[469,15296+2]..[473,15589+65]),None)
                ]
              core_type (src/invariant.ml[474,15655+17]..src/invariant.ml[474,15655+41])
                Ttyp_arrow
                Nolabel
                core_type (src/invariant.ml[474,15655+17]..src/invariant.ml[474,15655+33])
                  Ttyp_constr "Dune__exe!.Grammar.Production.index"
                  []
                core_type (src/invariant.ml[474,15655+37]..src/invariant.ml[474,15655+41])
                  Ttyp_constr "word/1773"
                  []
              []
          signature_item (src/invariant.ml[481,16015+2]..src/invariant.ml[481,16015+38])
            Tsig_value
            value_description gotostack/1867 (src/invariant.ml[481,16015+2]..src/invariant.ml[481,16015+38])
              attribute "ocaml.doc"
                [
                  structure_item (src/invariant.ml[476,15698+2]..[480,15995+19])
                    Pstr_eval
                    expression (src/invariant.ml[476,15698+2]..[480,15995+19])
                      Pexp_constant PConst_string("[gotostack nt] is the known suffix of the stack at a state where an\n     edge labeled [nt] has just been followed. In the short invariant, the\n     length of this suffix is [1]: indeed, it consists of just one cell,\n     associated with the symbol [nt]. In the long invariant, its length can\n     be greater. ",(src/invariant.ml[476,15698+2]..[480,15995+19]),None)
                ]
              core_type (src/invariant.ml[481,16015+17]..src/invariant.ml[481,16015+38])
                Ttyp_arrow
                Nolabel
                core_type (src/invariant.ml[481,16015+17]..src/invariant.ml[481,16015+30])
                  Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                  []
                core_type (src/invariant.ml[481,16015+34]..src/invariant.ml[481,16015+38])
                  Ttyp_constr "word/1773"
                  []
              []
        ]
  structure_item (src/invariant.ml[491,16414+0]..src/invariant.ml[502,16955+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[491,16414+4]..src/invariant.ml[491,16414+11])
          Tpat_var "publish/1869"
        expression (src/invariant.ml[491,16414+12]..src/invariant.ml[502,16955+3]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[491,16414+12]..src/invariant.ml[491,16414+20])
                Tpat_var "tabulate/1871"
              expression (src/invariant.ml[491,16414+21]..src/invariant.ml[502,16955+3]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/invariant.ml[491,16414+21]..src/invariant.ml[491,16414+24])
                      Tpat_var "foo/1872"
                    expression (src/invariant.ml[491,16414+25]..src/invariant.ml[502,16955+3]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/invariant.ml[491,16414+25]..src/invariant.ml[491,16414+28])
                            Tpat_var "bar/1873"
                          expression (src/invariant.ml[491,16414+29]..src/invariant.ml[502,16955+3]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/invariant.ml[491,16414+29]..src/invariant.ml[491,16414+33])
                                  Tpat_var "cell/1874"
                                expression (src/invariant.ml[492,16450+2]..src/invariant.ml[502,16955+3])
                                  Texp_apply
                                  expression (src/invariant.ml[492,16450+2]..src/invariant.ml[492,16450+10])
                                    Texp_ident "tabulate/1871"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[492,16450+11]..src/invariant.ml[502,16955+3])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/invariant.ml[492,16450+16]..src/invariant.ml[492,16450+21])
                                              Tpat_var "thing/1875"
                                            expression (src/invariant.ml[493,16475+4]..src/invariant.ml[501,16904+50])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/invariant.ml[493,16475+8]..src/invariant.ml[493,16475+18])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/invariant.ml[493,16475+8]..src/invariant.ml[493,16475+12])
                                                        Tpat_var "foos/1876"
                                                      pattern (src/invariant.ml[493,16475+14]..src/invariant.ml[493,16475+18])
                                                        Tpat_var "bars/1877"
                                                    ]
                                                  expression (src/invariant.ml[493,16475+21]..src/invariant.ml[493,16475+41])
                                                    Texp_tuple
                                                    [
                                                      expression (src/invariant.ml[493,16475+21]..src/invariant.ml[493,16475+30])
                                                        Texp_apply
                                                        expression (src/invariant.ml[493,16475+21]..src/invariant.ml[493,16475+24])
                                                          Texp_ident "foo/1872"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[493,16475+25]..src/invariant.ml[493,16475+30])
                                                              Texp_ident "thing/1875"
                                                        ]
                                                      expression (src/invariant.ml[493,16475+32]..src/invariant.ml[493,16475+41])
                                                        Texp_apply
                                                        expression (src/invariant.ml[493,16475+32]..src/invariant.ml[493,16475+35])
                                                          Texp_ident "bar/1873"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[493,16475+36]..src/invariant.ml[493,16475+41])
                                                              Texp_ident "thing/1875"
                                                        ]
                                                    ]
                                              ]
                                              expression (src/invariant.ml[494,16520+4]..src/invariant.ml[501,16904+50])
                                                Texp_sequence
                                                expression (src/invariant.ml[494,16520+4]..src/invariant.ml[494,16520+51])
                                                  Texp_assert                                                  expression (src/invariant.ml[494,16520+11]..src/invariant.ml[494,16520+51])
                                                    Texp_apply
                                                    expression (src/invariant.ml[494,16520+30]..src/invariant.ml[494,16520+32])
                                                      Texp_ident "Stdlib!.>="
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[494,16520+12]..src/invariant.ml[494,16520+29])
                                                          Texp_apply
                                                          expression (src/invariant.ml[494,16520+12]..src/invariant.ml[494,16520+24])
                                                            Texp_ident "Stdlib!.Array.length"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/invariant.ml[494,16520+25]..src/invariant.ml[494,16520+29])
                                                                Texp_ident "foos/1876"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[494,16520+33]..src/invariant.ml[494,16520+50])
                                                          Texp_apply
                                                          expression (src/invariant.ml[494,16520+33]..src/invariant.ml[494,16520+45])
                                                            Texp_ident "Stdlib!.Array.length"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/invariant.ml[494,16520+46]..src/invariant.ml[494,16520+50])
                                                                Texp_ident "bars/1877"
                                                          ]
                                                    ]
                                                expression (src/invariant.ml[499,16830+4]..src/invariant.ml[501,16904+50])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/invariant.ml[499,16830+8]..src/invariant.ml[499,16830+9])
                                                        Tpat_var "k/1878"
                                                      expression (src/invariant.ml[499,16830+12]..src/invariant.ml[499,16830+29])
                                                        Texp_apply
                                                        expression (src/invariant.ml[499,16830+12]..src/invariant.ml[499,16830+24])
                                                          Texp_ident "Stdlib!.Array.length"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[499,16830+25]..src/invariant.ml[499,16830+29])
                                                              Texp_ident "bars/1877"
                                                        ]
                                                  ]
                                                  expression (src/invariant.ml[500,16863+4]..src/invariant.ml[501,16904+50])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/invariant.ml[500,16863+8]..src/invariant.ml[500,16863+12])
                                                          Tpat_var "foos/1879"
                                                        expression (src/invariant.ml[500,16863+15]..src/invariant.ml[500,16863+37])
                                                          Texp_apply
                                                          expression (src/invariant.ml[500,16863+15]..src/invariant.ml[500,16863+30])
                                                            Texp_ident "Dune__exe!.MArray.truncate"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/invariant.ml[500,16863+31]..src/invariant.ml[500,16863+32])
                                                                Texp_ident "k/1878"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/invariant.ml[500,16863+33]..src/invariant.ml[500,16863+37])
                                                                Texp_ident "foos/1876"
                                                          ]
                                                    ]
                                                    expression (src/invariant.ml[501,16904+4]..src/invariant.ml[501,16904+50])
                                                      Texp_apply
                                                      expression (src/invariant.ml[501,16904+4]..src/invariant.ml[501,16904+14])
                                                        Texp_ident "Stdlib!.Array.init"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[501,16904+15]..src/invariant.ml[501,16904+16])
                                                            Texp_ident "k/1878"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[501,16904+17]..src/invariant.ml[501,16904+50])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/invariant.ml[501,16904+22]..src/invariant.ml[501,16904+23])
                                                                  Tpat_var "i/1880"
                                                                expression (src/invariant.ml[501,16904+27]..src/invariant.ml[501,16904+49])
                                                                  Texp_apply
                                                                  expression (src/invariant.ml[501,16904+27]..src/invariant.ml[501,16904+31])
                                                                    Texp_ident "cell/1874"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/invariant.ml[501,16904+32]..src/invariant.ml[501,16904+40])
                                                                        Texp_apply
                                                                        expression (src/invariant.ml[501,16904+32]..src/invariant.ml[501,16904+40]) ghost
                                                                          Texp_ident "Stdlib!.Array.get"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[501,16904+32]..src/invariant.ml[501,16904+36])
                                                                              Texp_ident "foos/1879"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[501,16904+38]..src/invariant.ml[501,16904+39])
                                                                              Texp_ident "i/1880"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/invariant.ml[501,16904+41]..src/invariant.ml[501,16904+49])
                                                                        Texp_apply
                                                                        expression (src/invariant.ml[501,16904+41]..src/invariant.ml[501,16904+49]) ghost
                                                                          Texp_ident "Stdlib!.Array.get"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[501,16904+41]..src/invariant.ml[501,16904+45])
                                                                              Texp_ident "bars/1877"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/invariant.ml[501,16904+47]..src/invariant.ml[501,16904+48])
                                                                              Texp_ident "i/1880"
                                                                        ]
                                                                  ]
                                                            ]
                                                      ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/invariant.ml[504,16960+0]..src/invariant.ml[505,16991+54])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[504,16960+4]..src/invariant.ml[504,16960+9])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[504,16960+12]..src/invariant.ml[504,16960+28])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[504,16960+12]..src/invariant.ml[504,16960+20])
                Ttyp_constr "Dune__exe!.Lr1.node"
                []
              core_type (src/invariant.ml[504,16960+24]..src/invariant.ml[504,16960+28])
                Ttyp_constr "word/1773"
                []
          Tpat_alias "stack/1881"
          pattern (src/invariant.ml[504,16960+4]..src/invariant.ml[504,16960+9])
            Tpat_any
        expression (src/invariant.ml[505,16991+2]..src/invariant.ml[505,16991+54])
          extra
            Texp_constraint
            core_type (src/invariant.ml[504,16960+12]..src/invariant.ml[504,16960+28])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[504,16960+12]..src/invariant.ml[504,16960+20])
                Ttyp_constr "Dune__exe!.Lr1.node"
                []
              core_type (src/invariant.ml[504,16960+24]..src/invariant.ml[504,16960+28])
                Ttyp_constr "word/1773"
                []
          Texp_apply
          expression (src/invariant.ml[505,16991+2]..src/invariant.ml[505,16991+9])
            Texp_ident "publish/1869"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[505,16991+10]..src/invariant.ml[505,16991+22])
                Texp_ident "Dune__exe!.Lr1.tabulate"
            <arg>
              Nolabel
              expression (src/invariant.ml[505,16991+23]..src/invariant.ml[505,16991+36])
                Texp_ident "SSy/422.stack_symbols"
            <arg>
              Nolabel
              expression (src/invariant.ml[505,16991+37]..src/invariant.ml[505,16991+49])
                Texp_ident "SSt/450.stack_states"
            <arg>
              Nolabel
              expression (src/invariant.ml[505,16991+50]..src/invariant.ml[505,16991+54])
                Texp_ident "cell/1782"
          ]
    ]
  structure_item (src/invariant.ml[507,17047+0]..src/invariant.ml[508,17090+71])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[507,17047+4]..src/invariant.ml[507,17047+13])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[507,17047+16]..src/invariant.ml[507,17047+40])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[507,17047+16]..src/invariant.ml[507,17047+32])
                Ttyp_constr "Dune__exe!.Grammar.Production.index"
                []
              core_type (src/invariant.ml[507,17047+36]..src/invariant.ml[507,17047+40])
                Ttyp_constr "word/1773"
                []
          Tpat_alias "prodstack/1882"
          pattern (src/invariant.ml[507,17047+4]..src/invariant.ml[507,17047+13])
            Tpat_any
        expression (src/invariant.ml[508,17090+2]..src/invariant.ml[508,17090+71])
          extra
            Texp_constraint
            core_type (src/invariant.ml[507,17047+16]..src/invariant.ml[507,17047+40])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[507,17047+16]..src/invariant.ml[507,17047+32])
                Ttyp_constr "Dune__exe!.Grammar.Production.index"
                []
              core_type (src/invariant.ml[507,17047+36]..src/invariant.ml[507,17047+40])
                Ttyp_constr "word/1773"
                []
          Texp_apply
          expression (src/invariant.ml[508,17090+2]..src/invariant.ml[508,17090+9])
            Texp_ident "publish/1869"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[508,17090+10]..src/invariant.ml[508,17090+29])
                Texp_ident "Dune__exe!.Grammar.Production.tabulate"
            <arg>
              Nolabel
              expression (src/invariant.ml[508,17090+30]..src/invariant.ml[508,17090+48])
                Texp_ident "SSy/422.production_symbols"
            <arg>
              Nolabel
              expression (src/invariant.ml[508,17090+49]..src/invariant.ml[508,17090+66])
                Texp_ident "SSt/450.production_states"
            <arg>
              Nolabel
              expression (src/invariant.ml[508,17090+67]..src/invariant.ml[508,17090+71])
                Texp_ident "cell/1782"
          ]
    ]
  structure_item (src/invariant.ml[510,17163+0]..src/invariant.ml[511,17203+60])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[510,17163+4]..src/invariant.ml[510,17163+13])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[510,17163+16]..src/invariant.ml[510,17163+37])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[510,17163+16]..src/invariant.ml[510,17163+29])
                Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                []
              core_type (src/invariant.ml[510,17163+33]..src/invariant.ml[510,17163+37])
                Ttyp_constr "word/1773"
                []
          Tpat_alias "gotostack/1883"
          pattern (src/invariant.ml[510,17163+4]..src/invariant.ml[510,17163+13])
            Tpat_any
        expression (src/invariant.ml[511,17203+2]..src/invariant.ml[511,17203+60])
          extra
            Texp_constraint
            core_type (src/invariant.ml[510,17163+16]..src/invariant.ml[510,17163+37])
              Ttyp_arrow
              Nolabel
              core_type (src/invariant.ml[510,17163+16]..src/invariant.ml[510,17163+29])
                Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                []
              core_type (src/invariant.ml[510,17163+33]..src/invariant.ml[510,17163+37])
                Ttyp_constr "word/1773"
                []
          Texp_apply
          expression (src/invariant.ml[511,17203+2]..src/invariant.ml[511,17203+9])
            Texp_ident "publish/1869"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[511,17203+10]..src/invariant.ml[511,17203+30])
                Texp_ident "Dune__exe!.Grammar.Nonterminal.tabulate"
            <arg>
              Nolabel
              expression (src/invariant.ml[511,17203+31]..src/invariant.ml[511,17203+43])
                Texp_ident "SSy/422.goto_symbols"
            <arg>
              Nolabel
              expression (src/invariant.ml[511,17203+44]..src/invariant.ml[511,17203+55])
                Texp_ident "SSt/450.goto_states"
            <arg>
              Nolabel
              expression (src/invariant.ml[511,17203+56]..src/invariant.ml[511,17203+60])
                Texp_ident "cell/1782"
          ]
    ]
  structure_item (src/invariant.ml[524,17929+0]..src/invariant.ml[526,17958+29])
    Tstr_type Rec
    [
      type_declaration state/1884 (src/invariant.ml[524,17929+0]..src/invariant.ml[526,17958+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/invariant.ml[525,17942+2]..src/invariant.ml[525,17942+15])
                Represented/1885
                []
                None
              (src/invariant.ml[526,17958+2]..src/invariant.ml[526,17958+29])
                UnRepresented/1886
                [
                  core_type (src/invariant.ml[526,17958+21]..src/invariant.ml[526,17958+29])
                    Ttyp_constr "Dune__exe!.Lr1.node"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[528,17989+0]..src/invariant.ml[530,18016+26])
    Tstr_type Rec
    [
      type_declaration instruction/1887 (src/invariant.ml[528,17989+0]..src/invariant.ml[530,18016+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (src/invariant.ml[529,18008+2]..src/invariant.ml[529,18008+7])
                Die/1888
                []
                None
              (src/invariant.ml[530,18016+2]..src/invariant.ml[530,18016+26])
                DownTo/1889
                [
                  core_type (src/invariant.ml[530,18016+14]..src/invariant.ml[530,18016+18])
                    Ttyp_constr "word/1773"
                    []
                  core_type (src/invariant.ml[530,18016+21]..src/invariant.ml[530,18016+26])
                    Ttyp_constr "state/1884"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (src/invariant.ml[532,18044+0]..src/invariant.ml[580,19364+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[532,18044+4]..src/invariant.ml[532,18044+10])
          Tpat_var "rewind/1890"
        expression (src/invariant.ml[532,18044+11]..src/invariant.ml[580,19364+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[532,18044+11]..src/invariant.ml[532,18044+15])
                Tpat_var "node/1892"
              expression (src/invariant.ml[533,18076+2]..src/invariant.ml[580,19364+10])
                extra
                  Texp_constraint
                  core_type (src/invariant.ml[532,18044+18]..src/invariant.ml[532,18044+29])
                    Ttyp_constr "instruction/1887"
                    []
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/invariant.ml[533,18076+6]..src/invariant.ml[533,18076+7])
                      Tpat_var "w/1893"
                    expression (src/invariant.ml[533,18076+10]..src/invariant.ml[533,18076+20])
                      Texp_apply
                      expression (src/invariant.ml[533,18076+10]..src/invariant.ml[533,18076+15])
                        Texp_ident "stack/1881"
                      [
                        <arg>
                          Nolabel
                          expression (src/invariant.ml[533,18076+16]..src/invariant.ml[533,18076+20])
                            Texp_ident "node/1892"
                      ]
                ]
                expression (src/invariant.ml[535,18101+2]..src/invariant.ml[580,19364+10])
                  Texp_let Rec
                  [
                    <def>
                      pattern (src/invariant.ml[535,18101+10]..src/invariant.ml[535,18101+16])
                        Tpat_var "rewind/1894"
                      expression (src/invariant.ml[535,18101+17]..src/invariant.ml[577,19314+43]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[535,18101+17]..src/invariant.ml[535,18101+18])
                              Tpat_var "w/1895"
                            expression (src/invariant.ml[536,18122+4]..src/invariant.ml[577,19314+43])
                              Texp_ifthenelse
                              expression (src/invariant.ml[536,18122+7]..src/invariant.ml[536,18122+25])
                                Texp_apply
                                expression (src/invariant.ml[536,18122+22]..src/invariant.ml[536,18122+23])
                                  Texp_ident "Stdlib!.="
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[536,18122+7]..src/invariant.ml[536,18122+21])
                                      Texp_apply
                                      expression (src/invariant.ml[536,18122+7]..src/invariant.ml[536,18122+19])
                                        Texp_ident "Stdlib!.Array.length"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[536,18122+20]..src/invariant.ml[536,18122+21])
                                            Texp_ident "w/1895"
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[536,18122+24]..src/invariant.ml[536,18122+25])
                                      Texp_constant Const_int 0
                                ]
                              expression (src/invariant.ml[543,18407+6]..src/invariant.ml[543,18407+9])
                                Texp_construct "Die"
                                []
                              Some
                                expression (src/invariant.ml[546,18427+6]..src/invariant.ml[577,19314+43])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/invariant.ml[546,18427+10]..src/invariant.ml[546,18427+31])
                                        Tpat_alias "cell/1897"
                                        pattern (src/invariant.ml[546,18427+10]..src/invariant.ml[546,18427+23])
                                          Tpat_record
                                          [
                                            "states"
                                              pattern (src/invariant.ml[546,18427+12]..src/invariant.ml[546,18427+18])
                                                Tpat_var "states/1896"
                                          ]
                                      expression (src/invariant.ml[546,18427+34]..src/invariant.ml[546,18427+47])
                                        Texp_apply
                                        expression (src/invariant.ml[546,18427+34]..src/invariant.ml[546,18427+45])
                                          Texp_ident "Dune__exe!.MArray.last"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[546,18427+46]..src/invariant.ml[546,18427+47])
                                              Texp_ident "w/1895"
                                        ]
                                  ]
                                  expression (src/invariant.ml[547,18478+6]..src/invariant.ml[577,19314+43])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/invariant.ml[547,18478+10]..src/invariant.ml[547,18478+11])
                                          Tpat_var "w/1898"
                                        expression (src/invariant.ml[547,18478+14]..src/invariant.ml[547,18478+26])
                                          Texp_apply
                                          expression (src/invariant.ml[547,18478+14]..src/invariant.ml[547,18478+24])
                                            Texp_ident "Dune__exe!.MArray.pop"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[547,18478+25]..src/invariant.ml[547,18478+26])
                                                Texp_ident "w/1895"
                                          ]
                                    ]
                                    expression (src/invariant.ml[549,18509+6]..src/invariant.ml[577,19314+43])
                                      Texp_ifthenelse
                                      expression (src/invariant.ml[549,18509+9]..src/invariant.ml[549,18509+28])
                                        Texp_apply
                                        expression (src/invariant.ml[549,18509+9]..src/invariant.ml[549,18509+21])
                                          Texp_ident "representeds/1309"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/invariant.ml[549,18509+22]..src/invariant.ml[549,18509+28])
                                              Texp_ident "states/1896"
                                        ]
                                      expression (src/invariant.ml[554,18634+8]..src/invariant.ml[554,18634+40])
                                        Texp_construct "DownTo"
                                        [
                                          expression (src/invariant.ml[554,18634+16]..src/invariant.ml[554,18634+26])
                                            Texp_array
                                            [
                                              expression (src/invariant.ml[554,18634+19]..src/invariant.ml[554,18634+23])
                                                Texp_ident "cell/1897"
                                            ]
                                          expression (src/invariant.ml[554,18634+28]..src/invariant.ml[554,18634+39])
                                            Texp_construct "Represented"
                                            []
                                        ]
                                      Some
                                        expression (src/invariant.ml[556,18676+11]..src/invariant.ml[577,19314+43])
                                          Texp_ifthenelse
                                          expression (src/invariant.ml[556,18676+14]..src/invariant.ml[556,18676+29])
                                            Texp_apply
                                            expression (src/invariant.ml[556,18676+14]..src/invariant.ml[556,18676+22])
                                              Texp_ident "handlers/1166"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[556,18676+23]..src/invariant.ml[556,18676+29])
                                                  Texp_ident "states/1896"
                                            ]
                                          expression (src/invariant.ml[556,18676+35]..src/invariant.ml[567,19085+9])
                                            Texp_sequence
                                            expression (src/invariant.ml[563,18936+8]..src/invariant.ml[563,18936+48])
                                              Texp_assert                                              expression (src/invariant.ml[563,18936+15]..src/invariant.ml[563,18936+48])
                                                Texp_apply
                                                expression (src/invariant.ml[563,18936+44]..src/invariant.ml[563,18936+45])
                                                  Texp_ident "Stdlib!.="
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[563,18936+16]..src/invariant.ml[563,18936+43])
                                                      Texp_apply
                                                      expression (src/invariant.ml[563,18936+16]..src/invariant.ml[563,18936+36])
                                                        Texp_ident "Dune__exe!.Lr1.NodeSet.cardinal"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/invariant.ml[563,18936+37]..src/invariant.ml[563,18936+43])
                                                            Texp_ident "states/1896"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[563,18936+46]..src/invariant.ml[563,18936+47])
                                                      Texp_constant Const_int 1
                                                ]
                                            expression (src/invariant.ml[564,18986+8]..src/invariant.ml[565,19035+48])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/invariant.ml[564,18986+12]..src/invariant.ml[564,18986+17])
                                                    Tpat_var "state/1899"
                                                  expression (src/invariant.ml[564,18986+20]..src/invariant.ml[564,18986+45])
                                                    Texp_apply
                                                    expression (src/invariant.ml[564,18986+20]..src/invariant.ml[564,18986+38])
                                                      Texp_ident "Dune__exe!.Lr1.NodeSet.choose"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/invariant.ml[564,18986+39]..src/invariant.ml[564,18986+45])
                                                          Texp_ident "states/1896"
                                                    ]
                                              ]
                                              expression (src/invariant.ml[565,19035+8]..src/invariant.ml[565,19035+48])
                                                Texp_construct "DownTo"
                                                [
                                                  expression (src/invariant.ml[565,19035+16]..src/invariant.ml[565,19035+26])
                                                    Texp_array
                                                    [
                                                      expression (src/invariant.ml[565,19035+19]..src/invariant.ml[565,19035+23])
                                                        Texp_ident "cell/1897"
                                                    ]
                                                  expression (src/invariant.ml[565,19035+28]..src/invariant.ml[565,19035+47])
                                                    Texp_construct "UnRepresented"
                                                    [
                                                      expression (src/invariant.ml[565,19035+42]..src/invariant.ml[565,19035+47])
                                                        Texp_ident "state/1899"
                                                    ]
                                                ]
                                          Some
                                            expression (src/invariant.ml[573,19225+8]..src/invariant.ml[577,19314+43])
                                              Texp_match
                                              expression (src/invariant.ml[573,19225+14]..src/invariant.ml[573,19225+22])
                                                Texp_apply
                                                expression (src/invariant.ml[573,19225+14]..src/invariant.ml[573,19225+20])
                                                  Texp_ident "rewind/1894"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[573,19225+21]..src/invariant.ml[573,19225+22])
                                                      Texp_ident "w/1898"
                                                ]
                                              [
                                                <case>
                                                  pattern (src/invariant.ml[574,19253+10]..src/invariant.ml[574,19253+13])
                                                    Tpat_value
                                                    pattern (src/invariant.ml[574,19253+10]..src/invariant.ml[574,19253+13])
                                                      Tpat_construct "Die"
                                                      []
                                                      None
                                                  expression (src/invariant.ml[575,19270+12]..src/invariant.ml[575,19270+15])
                                                    Texp_construct "Die"
                                                    []
                                                <case>
                                                  pattern (src/invariant.ml[576,19286+10]..src/invariant.ml[576,19286+24])
                                                    Tpat_value
                                                    pattern (src/invariant.ml[576,19286+10]..src/invariant.ml[576,19286+24])
                                                      Tpat_construct "DownTo"
                                                      [
                                                        pattern (src/invariant.ml[576,19286+18]..src/invariant.ml[576,19286+19])
                                                          Tpat_var "w/1900"
                                                        pattern (src/invariant.ml[576,19286+21]..src/invariant.ml[576,19286+23])
                                                          Tpat_var "st/1901"
                                                      ]
                                                      None
                                                  expression (src/invariant.ml[577,19314+12]..src/invariant.ml[577,19314+43])
                                                    Texp_construct "DownTo"
                                                    [
                                                      expression (src/invariant.ml[577,19314+20]..src/invariant.ml[577,19314+38])
                                                        Texp_apply
                                                        expression (src/invariant.ml[577,19314+20]..src/invariant.ml[577,19314+31])
                                                          Texp_ident "Dune__exe!.MArray.push"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[577,19314+32]..src/invariant.ml[577,19314+33])
                                                              Texp_ident "w/1900"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[577,19314+34]..src/invariant.ml[577,19314+38])
                                                              Texp_ident "cell/1897"
                                                        ]
                                                      expression (src/invariant.ml[577,19314+40]..src/invariant.ml[577,19314+42])
                                                        Texp_ident "st/1901"
                                                    ]
                                              ]
                        ]
                  ]
                  expression (src/invariant.ml[580,19364+2]..src/invariant.ml[580,19364+10])
                    Texp_apply
                    expression (src/invariant.ml[580,19364+2]..src/invariant.ml[580,19364+8])
                      Texp_ident "rewind/1894"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[580,19364+9]..src/invariant.ml[580,19364+10])
                          Texp_ident "w/1893"
                    ]
          ]
    ]
  structure_item (src/invariant.ml[585,19478+0]..src/invariant.ml[588,19624+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[585,19478+4]..src/invariant.ml[585,19478+13])
          Tpat_var "universal/1902"
        expression (src/invariant.ml[585,19478+14]..src/invariant.ml[588,19624+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[585,19478+14]..src/invariant.ml[585,19478+20])
                Tpat_var "symbol/1904"
              expression (src/invariant.ml[586,19501+2]..src/invariant.ml[588,19624+8])
                Texp_apply
                expression (src/invariant.ml[586,19501+2]..src/invariant.ml[586,19501+10])
                  Texp_ident "Dune__exe!.Lr1.fold"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[586,19501+11]..src/invariant.ml[588,19624+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/invariant.ml[586,19501+16]..src/invariant.ml[586,19501+25])
                            Tpat_var "universal/1905"
                          expression (src/invariant.ml[586,19501+26]..src/invariant.ml[587,19532+91]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/invariant.ml[586,19501+26]..src/invariant.ml[586,19501+27])
                                  Tpat_var "s/1906"
                                expression (src/invariant.ml[587,19532+4]..src/invariant.ml[587,19532+91])
                                  Texp_apply
                                  expression (src/invariant.ml[587,19532+14]..src/invariant.ml[587,19532+16])
                                    Texp_ident "Stdlib!.&&"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[587,19532+4]..src/invariant.ml[587,19532+13])
                                        Texp_ident "universal/1905"
                                    <arg>
                                      Nolabel
                                      expression (src/invariant.ml[587,19532+17]..src/invariant.ml[587,19532+91])
                                        Texp_ifthenelse
                                        expression (src/invariant.ml[587,19532+21]..src/invariant.ml[587,19532+34])
                                          Texp_apply
                                          expression (src/invariant.ml[587,19532+21]..src/invariant.ml[587,19532+32])
                                            Texp_ident "represented/1247"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[587,19532+33]..src/invariant.ml[587,19532+34])
                                                Texp_ident "s/1906"
                                          ]
                                        expression (src/invariant.ml[587,19532+40]..src/invariant.ml[587,19532+80])
                                          Texp_apply
                                          expression (src/invariant.ml[587,19532+40]..src/invariant.ml[587,19532+53])
                                            Texp_ident "Dune__exe!.Grammar.SymbolMap.mem"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[587,19532+54]..src/invariant.ml[587,19532+60])
                                                Texp_ident "symbol/1904"
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[587,19532+61]..src/invariant.ml[587,19532+80])
                                                Texp_apply
                                                expression (src/invariant.ml[587,19532+62]..src/invariant.ml[587,19532+77])
                                                  Texp_ident "Dune__exe!.Lr1.transitions"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[587,19532+78]..src/invariant.ml[587,19532+79])
                                                      Texp_ident "s/1906"
                                                ]
                                          ]
                                        Some
                                          expression (src/invariant.ml[587,19532+86]..src/invariant.ml[587,19532+90])
                                            Texp_construct "true"
                                            []
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[588,19624+4]..src/invariant.ml[588,19624+8])
                      Texp_construct "true"
                      []
                ]
          ]
    ]
  structure_item (src/invariant.ml[606,20650+0]..src/invariant.ml[623,21258+25])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[606,20650+4]..src/invariant.ml[606,20650+16])
          Tpat_var "errorpeekers/1907"
        expression (src/invariant.ml[608,20716+2]..src/invariant.ml[623,21258+25])
          Texp_let Nonrec
          [
            <def>
              pattern (src/invariant.ml[608,20716+6]..src/invariant.ml[608,20716+9])
                extra
                  Tpat_extra_constraint
                  core_type (src/invariant.ml[608,20716+12]..src/invariant.ml[608,20716+23])
                    Ttyp_constr "Dune__exe!.Grammar.SymbolSet.t"
                    []
                Tpat_alias "nts/1953"
                pattern (src/invariant.ml[608,20716+6]..src/invariant.ml[608,20716+9])
                  Tpat_any
              expression (src/invariant.ml[609,20742+4]..src/invariant.ml[617,21016+21])
                extra
                  Texp_constraint
                  core_type (src/invariant.ml[608,20716+12]..src/invariant.ml[608,20716+23])
                    Ttyp_constr "Dune__exe!.Grammar.SymbolSet.t"
                    []
                Texp_apply
                expression (src/invariant.ml[609,20742+4]..src/invariant.ml[609,20742+12])
                  Texp_ident "Dune__exe!.Lr1.fold"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[609,20742+13]..src/invariant.ml[617,21016+5])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/invariant.ml[609,20742+18]..src/invariant.ml[609,20742+21])
                            Tpat_var "nts/1999"
                          expression (src/invariant.ml[609,20742+22]..src/invariant.ml[616,21004+11]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/invariant.ml[609,20742+22]..src/invariant.ml[609,20742+26])
                                  Tpat_var "node/2000"
                                expression (src/invariant.ml[610,20772+6]..src/invariant.ml[616,21004+11])
                                  Texp_try
                                  expression (src/invariant.ml[611,20782+8]..src/invariant.ml[614,20940+39])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/invariant.ml[611,20782+12]..src/invariant.ml[611,20782+17])
                                          Tpat_var "prods/2001"
                                        expression (src/invariant.ml[611,20782+20]..src/invariant.ml[611,20782+75])
                                          Texp_apply
                                          expression (src/invariant.ml[611,20782+20]..src/invariant.ml[611,20782+38])
                                            Texp_ident "Dune__exe!.Grammar.TerminalMap.lookup"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[611,20782+39]..src/invariant.ml[611,20782+53])
                                                Texp_ident "Dune__exe!.Grammar.Terminal.error"
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[611,20782+54]..src/invariant.ml[611,20782+75])
                                                Texp_apply
                                                expression (src/invariant.ml[611,20782+55]..src/invariant.ml[611,20782+69])
                                                  Texp_ident "Dune__exe!.Lr1.reductions"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[611,20782+70]..src/invariant.ml[611,20782+74])
                                                      Texp_ident "node/2000"
                                                ]
                                          ]
                                    ]
                                    expression (src/invariant.ml[612,20861+8]..src/invariant.ml[614,20940+39])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/invariant.ml[612,20861+12]..src/invariant.ml[612,20861+16])
                                            Tpat_var "prod/2002"
                                          expression (src/invariant.ml[612,20861+19]..src/invariant.ml[612,20861+36])
                                            Texp_apply
                                            expression (src/invariant.ml[612,20861+19]..src/invariant.ml[612,20861+30])
                                              Texp_ident "Dune__exe!.Misc.single"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[612,20861+31]..src/invariant.ml[612,20861+36])
                                                  Texp_ident "prods/2001"
                                            ]
                                      ]
                                      expression (src/invariant.ml[613,20901+8]..src/invariant.ml[614,20940+39])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/invariant.ml[613,20901+12]..src/invariant.ml[613,20901+14])
                                              Tpat_var "nt/2003"
                                            expression (src/invariant.ml[613,20901+17]..src/invariant.ml[613,20901+35])
                                              Texp_apply
                                              expression (src/invariant.ml[613,20901+17]..src/invariant.ml[613,20901+30])
                                                Texp_ident "Dune__exe!.Grammar.Production.nt"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[613,20901+31]..src/invariant.ml[613,20901+35])
                                                    Texp_ident "prod/2002"
                                              ]
                                        ]
                                        expression (src/invariant.ml[614,20940+8]..src/invariant.ml[614,20940+39])
                                          Texp_apply
                                          expression (src/invariant.ml[614,20940+8]..src/invariant.ml[614,20940+21])
                                            Texp_ident "Dune__exe!.Grammar.SymbolSet.add"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[614,20940+22]..src/invariant.ml[614,20940+35])
                                                Texp_construct "Symbol.N"
                                                [
                                                  expression (src/invariant.ml[614,20940+32]..src/invariant.ml[614,20940+34])
                                                    Texp_ident "nt/2003"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/invariant.ml[614,20940+36]..src/invariant.ml[614,20940+39])
                                                Texp_ident "nts/1999"
                                          ]
                                  [
                                    <case>
                                      pattern (src/invariant.ml[615,20980+11]..src/invariant.ml[615,20980+20])
                                        Tpat_construct "Not_found"
                                        []
                                        None
                                      expression (src/invariant.ml[616,21004+8]..src/invariant.ml[616,21004+11])
                                        Texp_ident "nts/1999"
                                  ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[617,21016+6]..src/invariant.ml[617,21016+21])
                      Texp_ident "Dune__exe!.Grammar.SymbolSet.empty"
                ]
          ]
          expression (src/invariant.ml[621,21161+2]..src/invariant.ml[623,21258+25])
            Texp_apply
            expression (src/invariant.ml[621,21161+2]..src/invariant.ml[621,21161+16])
              Texp_ident "Dune__exe!.Grammar.SymbolSet.fold"
            [
              <arg>
                Nolabel
                expression (src/invariant.ml[621,21161+17]..src/invariant.ml[623,21258+3])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[621,21161+22]..src/invariant.ml[621,21161+24])
                        Tpat_var "nt/2004"
                      expression (src/invariant.ml[621,21161+25]..src/invariant.ml[622,21202+55]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[621,21161+25]..src/invariant.ml[621,21161+37])
                              Tpat_var "errorpeekers/2005"
                            expression (src/invariant.ml[622,21202+4]..src/invariant.ml[622,21202+55])
                              Texp_apply
                              expression (src/invariant.ml[622,21202+4]..src/invariant.ml[622,21202+21])
                                Texp_ident "Dune__exe!.Lr1.NodeSet.union"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[622,21202+22]..src/invariant.ml[622,21202+34])
                                    Texp_ident "errorpeekers/2005"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[622,21202+35]..src/invariant.ml[622,21202+55])
                                    Texp_apply
                                    expression (src/invariant.ml[622,21202+36]..src/invariant.ml[622,21202+51])
                                      Texp_ident "Dune__exe!.Lr1.all_targets"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/invariant.ml[622,21202+52]..src/invariant.ml[622,21202+54])
                                          Texp_ident "nt/2004"
                                    ]
                              ]
                        ]
                  ]
              <arg>
                Nolabel
                expression (src/invariant.ml[623,21258+4]..src/invariant.ml[623,21258+7])
                  Texp_ident "nts/1953"
              <arg>
                Nolabel
                expression (src/invariant.ml[623,21258+8]..src/invariant.ml[623,21258+25])
                  Texp_ident "Dune__exe!.Lr1.NodeSet.empty"
            ]
    ]
  structure_item (src/invariant.ml[625,21285+0]..src/invariant.ml[626,21308+35])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[625,21285+4]..src/invariant.ml[625,21285+15])
          Tpat_var "errorpeeker/2006"
        expression (src/invariant.ml[625,21285+16]..src/invariant.ml[626,21308+35]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/invariant.ml[625,21285+16]..src/invariant.ml[625,21285+20])
                Tpat_var "node/2008"
              expression (src/invariant.ml[626,21308+2]..src/invariant.ml[626,21308+35])
                Texp_apply
                expression (src/invariant.ml[626,21308+2]..src/invariant.ml[626,21308+17])
                  Texp_ident "Dune__exe!.Lr1.NodeSet.mem"
                [
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[626,21308+18]..src/invariant.ml[626,21308+22])
                      Texp_ident "node/2008"
                  <arg>
                    Nolabel
                    expression (src/invariant.ml[626,21308+23]..src/invariant.ml[626,21308+35])
                      Texp_ident "errorpeekers/1907"
                ]
          ]
    ]
  structure_item (src/invariant.ml[630,21425+0]..src/invariant.ml[631,21434+40])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[630,21425+4]..src/invariant.ml[630,21425+6])
          Tpat_construct "()"
          []
          None
        expression (src/invariant.ml[631,21434+2]..src/invariant.ml[631,21434+40])
          Texp_apply
          expression (src/invariant.ml[631,21434+2]..src/invariant.ml[631,21434+11])
            Texp_ident "Dune__exe!.Time.tick"
          [
            <arg>
              Nolabel
              expression (src/invariant.ml[631,21434+12]..src/invariant.ml[631,21434+40])
                Texp_constant Const_string("Constructing the invariant",(src/invariant.ml[631,21434+13]..src/invariant.ml[631,21434+39]),None)
          ]
    ]
  structure_item (src/invariant.ml[655,22581+0]..src/invariant.ml[708,23726+3])
    Tstr_module
    Long/2040
      module_expr (src/invariant.ml[655,22581+12]..src/invariant.ml[708,23726+3])
        Tmod_functor ()
        module_expr (src/invariant.ml[655,22581+17]..src/invariant.ml[708,23726+3])
          Tmod_structure
          [
            structure_item (src/invariant.ml[659,22624+2]..src/invariant.ml[660,22639+23])
              Tstr_module
              SSy/2014
                module_expr (src/invariant.ml[660,22639+4]..src/invariant.ml[660,22639+21])
                  Tmod_apply_unit
                  module_expr (src/invariant.ml[660,22639+4]..src/invariant.ml[660,22639+21])
                    module_expr (src/invariant.ml[660,22639+4]..src/invariant.ml[660,22639+21])
                      Tmod_ident "Dune__exe!.StackSymbols.Long"
            structure_item (src/invariant.ml[662,22664+2]..src/invariant.ml[663,22679+24])
              Tstr_module
              SSt/2021
                module_expr (src/invariant.ml[663,22679+4]..src/invariant.ml[663,22679+24])
                  Tmod_apply
                  module_expr (src/invariant.ml[663,22679+4]..src/invariant.ml[663,22679+19])
                    module_expr (src/invariant.ml[663,22679+4]..src/invariant.ml[663,22679+19])
                      Tmod_ident "Dune__exe!.StackStates.Run"
                  module_expr (src/invariant.ml[663,22679+20]..src/invariant.ml[663,22679+23])
                    Tmod_ident "SSy/2014"
            structure_item (src/invariant.ml[665,22705+2]..src/invariant.ml[665,22705+10])
              Tstr_open Fresh
              module_expr (src/invariant.ml[665,22705+7]..src/invariant.ml[665,22705+10])
                Tmod_ident "SSy/2014"
            structure_item (src/invariant.ml[666,22759+2]..src/invariant.ml[666,22759+10])
              Tstr_open Fresh
              module_expr (src/invariant.ml[666,22759+7]..src/invariant.ml[666,22759+10])
                Tmod_ident "SSt/2021"
            structure_item (src/invariant.ml[670,22833+2]..src/invariant.ml[671,22860+26])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[670,22833+6]..src/invariant.ml[670,22833+19])
                    Tpat_var "unrepresented/2022"
                  expression (src/invariant.ml[670,22833+20]..src/invariant.ml[671,22860+26]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[670,22833+20]..src/invariant.ml[670,22833+24])
                          Tpat_var "node/2024"
                        expression (src/invariant.ml[671,22860+4]..src/invariant.ml[671,22860+26])
                          Texp_apply
                          expression (src/invariant.ml[671,22860+4]..src/invariant.ml[671,22860+7])
                            Texp_ident "Stdlib!.not"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[671,22860+8]..src/invariant.ml[671,22860+26])
                                Texp_apply
                                expression (src/invariant.ml[671,22860+9]..src/invariant.ml[671,22860+20])
                                  Texp_ident "represented/1247"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[671,22860+21]..src/invariant.ml[671,22860+25])
                                      Texp_ident "node/2024"
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[673,22888+2]..src/invariant.ml[675,22964+43])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[673,22888+6]..src/invariant.ml[673,22888+22])
                    Tpat_var "equi_represented/2025"
                  expression (src/invariant.ml[673,22888+23]..src/invariant.ml[675,22964+43]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[673,22888+23]..src/invariant.ml[673,22888+28])
                          Tpat_var "nodes/2027"
                        expression (src/invariant.ml[674,22919+4]..src/invariant.ml[675,22964+43])
                          Texp_apply
                          expression (src/invariant.ml[674,22919+42]..src/invariant.ml[674,22919+44])
                            Texp_ident "Stdlib!.||"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[674,22919+4]..src/invariant.ml[674,22919+41])
                                Texp_apply
                                expression (src/invariant.ml[674,22919+4]..src/invariant.ml[674,22919+23])
                                  Texp_ident "Dune__exe!.Lr1.NodeSet.for_all"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[674,22919+24]..src/invariant.ml[674,22919+35])
                                      Texp_ident "represented/1247"
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[674,22919+36]..src/invariant.ml[674,22919+41])
                                      Texp_ident "nodes/2027"
                                ]
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[675,22964+4]..src/invariant.ml[675,22964+43])
                                Texp_apply
                                expression (src/invariant.ml[675,22964+4]..src/invariant.ml[675,22964+23])
                                  Texp_ident "Dune__exe!.Lr1.NodeSet.for_all"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[675,22964+24]..src/invariant.ml[675,22964+37])
                                      Texp_ident "unrepresented/2022"
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[675,22964+38]..src/invariant.ml[675,22964+43])
                                      Texp_ident "nodes/2027"
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[677,23009+2]..src/invariant.ml[678,23033+57])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[677,23009+6]..src/invariant.ml[677,23009+14])
                    Tpat_var "validate/2028"
                  expression (src/invariant.ml[677,23009+15]..src/invariant.ml[678,23033+57]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[677,23009+15]..src/invariant.ml[677,23009+21])
                          Tpat_var "states/2030"
                        expression (src/invariant.ml[678,23033+4]..src/invariant.ml[678,23033+57])
                          Texp_apply
                          expression (src/invariant.ml[678,23033+4]..src/invariant.ml[678,23033+33])
                            Texp_ident "Dune__exe!.MArray.greatest_suffix_forall"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[678,23033+34]..src/invariant.ml[678,23033+50])
                                Texp_ident "equi_represented/2025"
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[678,23033+51]..src/invariant.ml[678,23033+57])
                                Texp_ident "states/2030"
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[680,23092+2]..src/invariant.ml[681,23115+30])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[680,23092+6]..src/invariant.ml[680,23092+18])
                    Tpat_var "stack_states/2031"
                  expression (src/invariant.ml[680,23092+19]..src/invariant.ml[681,23115+30]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[680,23092+19]..src/invariant.ml[680,23092+20])
                          Tpat_var "s/2032"
                        expression (src/invariant.ml[681,23115+4]..src/invariant.ml[681,23115+30])
                          Texp_apply
                          expression (src/invariant.ml[681,23115+4]..src/invariant.ml[681,23115+12])
                            Texp_ident "validate/2028"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[681,23115+16]..src/invariant.ml[681,23115+30])
                                Texp_apply
                                expression (src/invariant.ml[681,23115+16]..src/invariant.ml[681,23115+28])
                                  Texp_ident "SSt/2021.stack_states"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[681,23115+29]..src/invariant.ml[681,23115+30])
                                      Texp_ident "s/2032"
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[683,23147+2]..src/invariant.ml[684,23178+38])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[683,23147+6]..src/invariant.ml[683,23147+23])
                    Tpat_var "production_states/2033"
                  expression (src/invariant.ml[683,23147+24]..src/invariant.ml[684,23178+38]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[683,23147+24]..src/invariant.ml[683,23147+28])
                          Tpat_var "prod/2034"
                        expression (src/invariant.ml[684,23178+4]..src/invariant.ml[684,23178+38])
                          Texp_apply
                          expression (src/invariant.ml[684,23178+4]..src/invariant.ml[684,23178+12])
                            Texp_ident "validate/2028"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[684,23178+16]..src/invariant.ml[684,23178+38])
                                Texp_apply
                                expression (src/invariant.ml[684,23178+16]..src/invariant.ml[684,23178+33])
                                  Texp_ident "SSt/2021.production_states"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[684,23178+34]..src/invariant.ml[684,23178+38])
                                      Texp_ident "prod/2034"
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[686,23218+2]..src/invariant.ml[687,23241+30])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[686,23218+6]..src/invariant.ml[686,23218+17])
                    Tpat_var "goto_states/2035"
                  expression (src/invariant.ml[686,23218+18]..src/invariant.ml[687,23241+30]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/invariant.ml[686,23218+18]..src/invariant.ml[686,23218+20])
                          Tpat_var "nt/2036"
                        expression (src/invariant.ml[687,23241+4]..src/invariant.ml[687,23241+30])
                          Texp_apply
                          expression (src/invariant.ml[687,23241+4]..src/invariant.ml[687,23241+12])
                            Texp_ident "validate/2028"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[687,23241+16]..src/invariant.ml[687,23241+30])
                                Texp_apply
                                expression (src/invariant.ml[687,23241+16]..src/invariant.ml[687,23241+27])
                                  Texp_ident "SSt/2021.goto_states"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/invariant.ml[687,23241+28]..src/invariant.ml[687,23241+30])
                                      Texp_ident "nt/2036"
                                ]
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[691,23288+2]..src/invariant.ml[692,23299+30])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[691,23288+6]..src/invariant.ml[691,23288+8])
                    Tpat_construct "()"
                    []
                    None
                  expression (src/invariant.ml[692,23299+4]..src/invariant.ml[692,23299+30])
                    Texp_apply
                    expression (src/invariant.ml[692,23299+4]..src/invariant.ml[692,23299+14])
                      Texp_ident "Dune__exe!.Error.logC"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[692,23299+15]..src/invariant.ml[692,23299+16])
                          Texp_constant Const_int 3
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[692,23299+17]..src/invariant.ml[692,23299+30])
                          Texp_apply
                          expression (src/invariant.ml[692,23299+18]..src/invariant.ml[692,23299+22])
                            Texp_ident "SSt/2021.dump"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[692,23299+23]..src/invariant.ml[692,23299+29])
                                Texp_constant Const_string("long",(src/invariant.ml[692,23299+24]..src/invariant.ml[692,23299+28]),None)
                          ]
                    ]
              ]
            structure_item (src/invariant.ml[696,23349+2]..src/invariant.ml[697,23382+56])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[696,23349+6]..src/invariant.ml[696,23349+11])
                    extra
                      Tpat_extra_constraint
                      core_type (src/invariant.ml[696,23349+14]..src/invariant.ml[696,23349+30])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[696,23349+14]..src/invariant.ml[696,23349+22])
                          Ttyp_constr "Dune__exe!.Lr1.node"
                          []
                        core_type (src/invariant.ml[696,23349+26]..src/invariant.ml[696,23349+30])
                          Ttyp_constr "word/1773"
                          []
                    Tpat_alias "stack/2037"
                    pattern (src/invariant.ml[696,23349+6]..src/invariant.ml[696,23349+11])
                      Tpat_any
                  expression (src/invariant.ml[697,23382+4]..src/invariant.ml[697,23382+56])
                    extra
                      Texp_constraint
                      core_type (src/invariant.ml[696,23349+14]..src/invariant.ml[696,23349+30])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[696,23349+14]..src/invariant.ml[696,23349+22])
                          Ttyp_constr "Dune__exe!.Lr1.node"
                          []
                        core_type (src/invariant.ml[696,23349+26]..src/invariant.ml[696,23349+30])
                          Ttyp_constr "word/1773"
                          []
                    Texp_apply
                    expression (src/invariant.ml[697,23382+4]..src/invariant.ml[697,23382+11])
                      Texp_ident "publish/1869"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[697,23382+12]..src/invariant.ml[697,23382+24])
                          Texp_ident "Dune__exe!.Lr1.tabulate"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[697,23382+25]..src/invariant.ml[697,23382+38])
                          Texp_ident "SSy/2014.stack_symbols"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[697,23382+39]..src/invariant.ml[697,23382+51])
                          Texp_ident "stack_states/2031"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[697,23382+52]..src/invariant.ml[697,23382+56])
                          Texp_ident "cell/1782"
                    ]
              ]
            structure_item (src/invariant.ml[699,23440+2]..src/invariant.ml[700,23485+73])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[699,23440+6]..src/invariant.ml[699,23440+15])
                    extra
                      Tpat_extra_constraint
                      core_type (src/invariant.ml[699,23440+18]..src/invariant.ml[699,23440+42])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[699,23440+18]..src/invariant.ml[699,23440+34])
                          Ttyp_constr "Dune__exe!.Grammar.Production.index"
                          []
                        core_type (src/invariant.ml[699,23440+38]..src/invariant.ml[699,23440+42])
                          Ttyp_constr "word/1773"
                          []
                    Tpat_alias "prodstack/2038"
                    pattern (src/invariant.ml[699,23440+6]..src/invariant.ml[699,23440+15])
                      Tpat_any
                  expression (src/invariant.ml[700,23485+4]..src/invariant.ml[700,23485+73])
                    extra
                      Texp_constraint
                      core_type (src/invariant.ml[699,23440+18]..src/invariant.ml[699,23440+42])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[699,23440+18]..src/invariant.ml[699,23440+34])
                          Ttyp_constr "Dune__exe!.Grammar.Production.index"
                          []
                        core_type (src/invariant.ml[699,23440+38]..src/invariant.ml[699,23440+42])
                          Ttyp_constr "word/1773"
                          []
                    Texp_apply
                    expression (src/invariant.ml[700,23485+4]..src/invariant.ml[700,23485+11])
                      Texp_ident "publish/1869"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[700,23485+12]..src/invariant.ml[700,23485+31])
                          Texp_ident "Dune__exe!.Grammar.Production.tabulate"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[700,23485+32]..src/invariant.ml[700,23485+50])
                          Texp_ident "SSy/2014.production_symbols"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[700,23485+51]..src/invariant.ml[700,23485+68])
                          Texp_ident "production_states/2033"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[700,23485+69]..src/invariant.ml[700,23485+73])
                          Texp_ident "cell/1782"
                    ]
              ]
            structure_item (src/invariant.ml[702,23560+2]..src/invariant.ml[703,23602+62])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[702,23560+6]..src/invariant.ml[702,23560+15])
                    extra
                      Tpat_extra_constraint
                      core_type (src/invariant.ml[702,23560+18]..src/invariant.ml[702,23560+39])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[702,23560+18]..src/invariant.ml[702,23560+31])
                          Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                          []
                        core_type (src/invariant.ml[702,23560+35]..src/invariant.ml[702,23560+39])
                          Ttyp_constr "word/1773"
                          []
                    Tpat_alias "gotostack/2039"
                    pattern (src/invariant.ml[702,23560+6]..src/invariant.ml[702,23560+15])
                      Tpat_any
                  expression (src/invariant.ml[703,23602+4]..src/invariant.ml[703,23602+62])
                    extra
                      Texp_constraint
                      core_type (src/invariant.ml[702,23560+18]..src/invariant.ml[702,23560+39])
                        Ttyp_arrow
                        Nolabel
                        core_type (src/invariant.ml[702,23560+18]..src/invariant.ml[702,23560+31])
                          Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                          []
                        core_type (src/invariant.ml[702,23560+35]..src/invariant.ml[702,23560+39])
                          Ttyp_constr "word/1773"
                          []
                    Texp_apply
                    expression (src/invariant.ml[703,23602+4]..src/invariant.ml[703,23602+11])
                      Texp_ident "publish/1869"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[703,23602+12]..src/invariant.ml[703,23602+32])
                          Texp_ident "Dune__exe!.Grammar.Nonterminal.tabulate"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[703,23602+33]..src/invariant.ml[703,23602+45])
                          Texp_ident "SSy/2014.goto_symbols"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[703,23602+46]..src/invariant.ml[703,23602+57])
                          Texp_ident "goto_states/2035"
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[703,23602+58]..src/invariant.ml[703,23602+62])
                          Texp_ident "cell/1782"
                    ]
              ]
            structure_item (src/invariant.ml[705,23666+2]..src/invariant.ml[706,23677+47])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/invariant.ml[705,23666+6]..src/invariant.ml[705,23666+8])
                    Tpat_construct "()"
                    []
                    None
                  expression (src/invariant.ml[706,23677+4]..src/invariant.ml[706,23677+47])
                    Texp_apply
                    expression (src/invariant.ml[706,23677+4]..src/invariant.ml[706,23677+13])
                      Texp_ident "Dune__exe!.Time.tick"
                    [
                      <arg>
                        Nolabel
                        expression (src/invariant.ml[706,23677+14]..src/invariant.ml[706,23677+47])
                          Texp_constant Const_string("Constructing the long invariant",(src/invariant.ml[706,23677+15]..src/invariant.ml[706,23677+46]),None)
                    ]
              ]
          ]
  structure_item (src/invariant.ml[728,24515+0]..src/invariant.ml[744,24945+3])
    Tstr_module
    P/2050
      module_expr (src/invariant.ml[728,24515+11]..src/invariant.ml[744,24945+3])
        Tmod_structure
        [
          structure_item (src/invariant.ml[732,24683+2]..src/invariant.ml[734,24737+9])
            Tstr_type Rec
            [
              type_declaration property/2041 (src/invariant.ml[732,24683+2]..src/invariant.ml[734,24737+9])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/invariant.ml[733,24701+4]..src/invariant.ml[733,24701+35])
                        SingleOrigin/2042
                        [
                          core_type (src/invariant.ml[733,24701+22]..src/invariant.ml[733,24701+35])
                            Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                            []
                        ]
                        None
                      (src/invariant.ml[734,24737+4]..src/invariant.ml[734,24737+9])
                        Top/2043
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[736,24748+2]..src/invariant.ml[742,24884+59])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[736,24748+6]..src/invariant.ml[736,24748+14])
                  Tpat_var "leq_join/2044"
                expression (src/invariant.ml[736,24748+15]..src/invariant.ml[742,24884+59]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[736,24748+15]..src/invariant.ml[736,24748+17])
                        Tpat_var "p1/2046"
                      expression (src/invariant.ml[736,24748+18]..src/invariant.ml[742,24884+59]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[736,24748+18]..src/invariant.ml[736,24748+20])
                              Tpat_var "p2/2047"
                            expression (src/invariant.ml[737,24771+4]..src/invariant.ml[742,24884+59])
                              Texp_match
                              expression (src/invariant.ml[737,24771+10]..src/invariant.ml[737,24771+16])
                                Texp_tuple
                                [
                                  expression (src/invariant.ml[737,24771+10]..src/invariant.ml[737,24771+12])
                                    Texp_ident "p1/2046"
                                  expression (src/invariant.ml[737,24771+14]..src/invariant.ml[737,24771+16])
                                    Texp_ident "p2/2047"
                                ]
                              [
                                <case>
                                  pattern (src/invariant.ml[738,24793+6]..src/invariant.ml[739,24806+12])
                                    Tpat_or
                                    pattern (src/invariant.ml[738,24793+6]..src/invariant.ml[738,24793+12])
                                      Tpat_value
                                      pattern (src/invariant.ml[738,24793+6]..src/invariant.ml[738,24793+12])
                                        Tpat_tuple
                                        [
                                          pattern (src/invariant.ml[738,24793+6]..src/invariant.ml[738,24793+7])
                                            Tpat_any
                                          pattern (src/invariant.ml[738,24793+9]..src/invariant.ml[738,24793+12])
                                            Tpat_construct "Top"
                                            []
                                            None
                                        ]
                                    pattern (src/invariant.ml[739,24806+6]..src/invariant.ml[739,24806+12])
                                      Tpat_value
                                      pattern (src/invariant.ml[739,24806+6]..src/invariant.ml[739,24806+12])
                                        Tpat_tuple
                                        [
                                          pattern (src/invariant.ml[739,24806+6]..src/invariant.ml[739,24806+9])
                                            Tpat_construct "Top"
                                            []
                                            None
                                          pattern (src/invariant.ml[739,24806+11]..src/invariant.ml[739,24806+12])
                                            Tpat_any
                                        ]
                                  expression (src/invariant.ml[740,24822+8]..src/invariant.ml[740,24822+11])
                                    Texp_construct "Top"
                                    []
                                <case>
                                  pattern (src/invariant.ml[741,24834+6]..src/invariant.ml[741,24834+46])
                                    Tpat_value
                                    pattern (src/invariant.ml[741,24834+6]..src/invariant.ml[741,24834+46])
                                      Tpat_tuple
                                      [
                                        pattern (src/invariant.ml[741,24834+6]..src/invariant.ml[741,24834+25])
                                          Tpat_construct "SingleOrigin"
                                          [
                                            pattern (src/invariant.ml[741,24834+19]..src/invariant.ml[741,24834+25])
                                              Tpat_var "start1/2048"
                                          ]
                                          None
                                        pattern (src/invariant.ml[741,24834+27]..src/invariant.ml[741,24834+46])
                                          Tpat_construct "SingleOrigin"
                                          [
                                            pattern (src/invariant.ml[741,24834+40]..src/invariant.ml[741,24834+46])
                                              Tpat_var "start2/2049"
                                          ]
                                          None
                                      ]
                                  expression (src/invariant.ml[742,24884+8]..src/invariant.ml[742,24884+59])
                                    Texp_ifthenelse
                                    expression (src/invariant.ml[742,24884+11]..src/invariant.ml[742,24884+42])
                                      Texp_apply
                                      expression (src/invariant.ml[742,24884+11]..src/invariant.ml[742,24884+28])
                                        Texp_ident "Dune__exe!.Grammar.Nonterminal.equal"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[742,24884+29]..src/invariant.ml[742,24884+35])
                                            Texp_ident "start1/2048"
                                        <arg>
                                          Nolabel
                                          expression (src/invariant.ml[742,24884+36]..src/invariant.ml[742,24884+42])
                                            Texp_ident "start2/2049"
                                      ]
                                    expression (src/invariant.ml[742,24884+48]..src/invariant.ml[742,24884+50])
                                      Texp_ident "p2/2047"
                                    Some
                                      expression (src/invariant.ml[742,24884+56]..src/invariant.ml[742,24884+59])
                                        Texp_construct "Top"
                                        []
                              ]
                        ]
                  ]
            ]
        ]
  structure_item (src/invariant.ml[748,25017+0]..src/invariant.ml[790,26445+3])
    Tstr_module
    G/2146
      module_expr (src/invariant.ml[748,25017+11]..src/invariant.ml[790,26445+3])
        Tmod_structure
        [
          structure_item (src/invariant.ml[750,25036+2]..src/invariant.ml[750,25036+11])
            Tstr_include            module_expr (src/invariant.ml[750,25036+10]..src/invariant.ml[750,25036+11])
              Tmod_ident "P/2050"
          structure_item (src/invariant.ml[752,25049+2]..src/invariant.ml[755,25122+27])
            Tstr_type Rec
            [
              type_declaration variable/2053 (src/invariant.ml[752,25049+2]..src/invariant.ml[755,25122+27])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/invariant.ml[753,25067+4]..src/invariant.ml[753,25067+21])
                        Run/2054
                        [
                          core_type (src/invariant.ml[753,25067+13]..src/invariant.ml[753,25067+21])
                            Ttyp_constr "Dune__exe!.Lr1.node"
                            []
                        ]
                        None
                      (src/invariant.ml[754,25089+4]..src/invariant.ml[754,25089+32])
                        Reduce/2055
                        [
                          core_type (src/invariant.ml[754,25089+16]..src/invariant.ml[754,25089+32])
                            Ttyp_constr "Dune__exe!.Grammar.Production.index"
                            []
                        ]
                        None
                      (src/invariant.ml[755,25122+4]..src/invariant.ml[755,25122+27])
                        Goto/2056
                        [
                          core_type (src/invariant.ml[755,25122+14]..src/invariant.ml[755,25122+27])
                            Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[757,25151+2]..src/invariant.ml[757,25151+19])
            Tstr_type Rec
            [
              type_declaration t/2057 (src/invariant.ml[757,25151+2]..src/invariant.ml[757,25151+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (src/invariant.ml[757,25151+11]..src/invariant.ml[757,25151+19])
                      Ttyp_constr "variable/2053"
                      []
            ]
          structure_item (src/invariant.ml[759,25172+2]..src/invariant.ml[765,25452+5])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[759,25172+6]..src/invariant.ml[759,25172+18])
                  Tpat_var "foreach_root/2058"
                expression (src/invariant.ml[759,25172+19]..src/invariant.ml[765,25452+5]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[759,25172+19]..src/invariant.ml[759,25172+24])
                        Tpat_var "yield/2060"
                      expression (src/invariant.ml[762,25299+4]..src/invariant.ml[765,25452+5])
                        Texp_apply
                        expression (src/invariant.ml[762,25299+17]..src/invariant.ml[765,25452+5])
                          Texp_apply
                          expression (src/invariant.ml[762,25299+17]..src/invariant.ml[762,25299+35])
                            Texp_ident "Dune__exe!.Grammar.ProductionMap.iter"
                          [
                            <arg>
                              Nolabel
                              expression (src/invariant.ml[762,25299+36]..src/invariant.ml[765,25452+5])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/invariant.ml[762,25299+41]..src/invariant.ml[762,25299+45])
                                      Tpat_var "prod/2095"
                                    expression (src/invariant.ml[762,25299+46]..src/invariant.ml[764,25411+40]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/invariant.ml[762,25299+46]..src/invariant.ml[762,25299+50])
                                            Tpat_var "node/2096"
                                          expression (src/invariant.ml[763,25353+6]..src/invariant.ml[764,25411+40])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/invariant.ml[763,25353+10]..src/invariant.ml[763,25353+12])
                                                  Tpat_var "nt/2097"
                                                expression (src/invariant.ml[763,25353+15]..src/invariant.ml[763,25353+54])
                                                  Texp_apply
                                                  expression (src/invariant.ml[763,25353+15]..src/invariant.ml[763,25353+27])
                                                    Texp_ident "Dune__exe!.Option.force"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[763,25353+28]..src/invariant.ml[763,25353+54])
                                                        Texp_apply
                                                        expression (src/invariant.ml[763,25353+29]..src/invariant.ml[763,25353+48])
                                                          Texp_ident "Dune__exe!.Grammar.Production.classify"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/invariant.ml[763,25353+49]..src/invariant.ml[763,25353+53])
                                                              Texp_ident "prod/2095"
                                                        ]
                                                  ]
                                            ]
                                            expression (src/invariant.ml[764,25411+6]..src/invariant.ml[764,25411+40])
                                              Texp_apply
                                              expression (src/invariant.ml[764,25411+6]..src/invariant.ml[764,25411+11])
                                                Texp_ident "yield/2060"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[764,25411+12]..src/invariant.ml[764,25411+22])
                                                    Texp_construct "Run"
                                                    [
                                                      expression (src/invariant.ml[764,25411+17]..src/invariant.ml[764,25411+21])
                                                        Texp_ident "node/2096"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[764,25411+23]..src/invariant.ml[764,25411+40])
                                                    Texp_construct "SingleOrigin"
                                                    [
                                                      expression (src/invariant.ml[764,25411+37]..src/invariant.ml[764,25411+39])
                                                        Texp_ident "nt/2097"
                                                    ]
                                              ]
                                      ]
                                ]
                          ]
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[762,25299+4]..src/invariant.ml[762,25299+13])
                              Texp_ident "Dune__exe!.Lr1.entry"
                        ]
                  ]
            ]
          structure_item (src/invariant.ml[767,25459+2]..src/invariant.ml[788,26433+10])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[767,25459+6]..src/invariant.ml[767,25459+23])
                  Tpat_var "foreach_successor/2132"
                expression (src/invariant.ml[767,25459+24]..src/invariant.ml[788,26433+10]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[767,25459+24]..src/invariant.ml[767,25459+25])
                        Tpat_var "v/2134"
                      expression (src/invariant.ml[767,25459+26]..src/invariant.ml[788,26433+10]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/invariant.ml[767,25459+26]..src/invariant.ml[767,25459+32])
                              Tpat_var "origin/2135"
                            expression (src/invariant.ml[767,25459+33]..src/invariant.ml[788,26433+10]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/invariant.ml[767,25459+33]..src/invariant.ml[767,25459+38])
                                    Tpat_var "yield/2136"
                                  expression (src/invariant.ml[768,25500+4]..src/invariant.ml[788,26433+10])
                                    Texp_match
                                    expression (src/invariant.ml[768,25500+10]..src/invariant.ml[768,25500+11])
                                      Texp_ident "v/2134"
                                    [
                                      <case>
                                        pattern (src/invariant.ml[769,25517+6]..src/invariant.ml[769,25517+14])
                                          Tpat_value
                                          pattern (src/invariant.ml[769,25517+6]..src/invariant.ml[769,25517+14])
                                            Tpat_construct "Run"
                                            [
                                              pattern (src/invariant.ml[769,25517+10]..src/invariant.ml[769,25517+14])
                                                Tpat_var "node/2137"
                                            ]
                                            None
                                        expression (src/invariant.ml[774,25835+8]..src/invariant.ml[780,26107+11])
                                          Texp_sequence
                                          expression (src/invariant.ml[774,25835+8]..src/invariant.ml[776,25943+11])
                                            Texp_apply
                                            expression (src/invariant.ml[774,25835+32]..src/invariant.ml[776,25943+11])
                                              Texp_apply
                                              expression (src/invariant.ml[774,25835+32]..src/invariant.ml[774,25835+46])
                                                Texp_ident "Dune__exe!.Grammar.SymbolMap.iter"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[774,25835+47]..src/invariant.ml[776,25943+11])
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/invariant.ml[774,25835+57]..src/invariant.ml[774,25835+63])
                                                          Tpat_var "_label/2140"
                                                        expression (src/invariant.ml[774,25835+64]..src/invariant.ml[775,25908+34]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/invariant.ml[774,25835+64]..src/invariant.ml[774,25835+69])
                                                                Tpat_var "node'/2141"
                                                              expression (src/invariant.ml[775,25908+10]..src/invariant.ml[775,25908+34])
                                                                Texp_apply
                                                                expression (src/invariant.ml[775,25908+10]..src/invariant.ml[775,25908+15])
                                                                  Texp_ident "yield/2136"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/invariant.ml[775,25908+16]..src/invariant.ml[775,25908+27])
                                                                      Texp_construct "Run"
                                                                      [
                                                                        expression (src/invariant.ml[775,25908+21]..src/invariant.ml[775,25908+26])
                                                                          Texp_ident "node'/2141"
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/invariant.ml[775,25908+28]..src/invariant.ml[775,25908+34])
                                                                      Texp_ident "origin/2135"
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[774,25835+8]..src/invariant.ml[774,25835+28])
                                                  Texp_apply
                                                  expression (src/invariant.ml[774,25835+8]..src/invariant.ml[774,25835+23])
                                                    Texp_ident "Dune__exe!.Lr1.transitions"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[774,25835+24]..src/invariant.ml[774,25835+28])
                                                        Texp_ident "node/2137"
                                                  ]
                                            ]
                                          expression (src/invariant.ml[777,25956+8]..src/invariant.ml[780,26107+11])
                                            Texp_apply
                                            expression (src/invariant.ml[777,25956+31]..src/invariant.ml[780,26107+11])
                                              Texp_apply
                                              expression (src/invariant.ml[777,25956+31]..src/invariant.ml[777,25956+47])
                                                Texp_ident "Dune__exe!.Grammar.TerminalMap.iter"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/invariant.ml[777,25956+48]..src/invariant.ml[780,26107+11])
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/invariant.ml[777,25956+58]..src/invariant.ml[777,25956+62])
                                                          Tpat_var "_tok/2142"
                                                        expression (src/invariant.ml[777,25956+63]..src/invariant.ml[779,26070+36]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/invariant.ml[777,25956+63]..src/invariant.ml[777,25956+68])
                                                                Tpat_var "prods/2143"
                                                              expression (src/invariant.ml[778,26028+10]..src/invariant.ml[779,26070+36])
                                                                Texp_let Nonrec
                                                                [
                                                                  <def>
                                                                    pattern (src/invariant.ml[778,26028+14]..src/invariant.ml[778,26028+18])
                                                                      Tpat_var "prod/2144"
                                                                    expression (src/invariant.ml[778,26028+21]..src/invariant.ml[778,26028+38])
                                                                      Texp_apply
                                                                      expression (src/invariant.ml[778,26028+21]..src/invariant.ml[778,26028+32])
                                                                        Texp_ident "Dune__exe!.Misc.single"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/invariant.ml[778,26028+33]..src/invariant.ml[778,26028+38])
                                                                            Texp_ident "prods/2143"
                                                                      ]
                                                                ]
                                                                expression (src/invariant.ml[779,26070+10]..src/invariant.ml[779,26070+36])
                                                                  Texp_apply
                                                                  expression (src/invariant.ml[779,26070+10]..src/invariant.ml[779,26070+15])
                                                                    Texp_ident "yield/2136"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/invariant.ml[779,26070+16]..src/invariant.ml[779,26070+29])
                                                                        Texp_construct "Reduce"
                                                                        [
                                                                          expression (src/invariant.ml[779,26070+24]..src/invariant.ml[779,26070+28])
                                                                            Texp_ident "prod/2144"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/invariant.ml[779,26070+30]..src/invariant.ml[779,26070+36])
                                                                        Texp_ident "origin/2135"
                                                                  ]
                                                          ]
                                                    ]
                                              ]
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[777,25956+8]..src/invariant.ml[777,25956+27])
                                                  Texp_apply
                                                  expression (src/invariant.ml[777,25956+8]..src/invariant.ml[777,25956+22])
                                                    Texp_ident "Dune__exe!.Lr1.reductions"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/invariant.ml[777,25956+23]..src/invariant.ml[777,25956+27])
                                                        Texp_ident "node/2137"
                                                  ]
                                            ]
                                      <case>
                                        pattern (src/invariant.ml[781,26119+6]..src/invariant.ml[781,26119+17])
                                          Tpat_value
                                          pattern (src/invariant.ml[781,26119+6]..src/invariant.ml[781,26119+17])
                                            Tpat_construct "Reduce"
                                            [
                                              pattern (src/invariant.ml[781,26119+13]..src/invariant.ml[781,26119+17])
                                                Tpat_var "prod/2138"
                                            ]
                                            None
                                        expression (src/invariant.ml[783,26213+8]..src/invariant.ml[784,26252+30])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/invariant.ml[783,26213+12]..src/invariant.ml[783,26213+14])
                                                Tpat_var "nt/2145"
                                              expression (src/invariant.ml[783,26213+17]..src/invariant.ml[783,26213+35])
                                                Texp_apply
                                                expression (src/invariant.ml[783,26213+17]..src/invariant.ml[783,26213+30])
                                                  Texp_ident "Dune__exe!.Grammar.Production.nt"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/invariant.ml[783,26213+31]..src/invariant.ml[783,26213+35])
                                                      Texp_ident "prod/2138"
                                                ]
                                          ]
                                          expression (src/invariant.ml[784,26252+8]..src/invariant.ml[784,26252+30])
                                            Texp_apply
                                            expression (src/invariant.ml[784,26252+8]..src/invariant.ml[784,26252+13])
                                              Texp_ident "yield/2136"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[784,26252+14]..src/invariant.ml[784,26252+23])
                                                  Texp_construct "Goto"
                                                  [
                                                    expression (src/invariant.ml[784,26252+20]..src/invariant.ml[784,26252+22])
                                                      Texp_ident "nt/2145"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/invariant.ml[784,26252+24]..src/invariant.ml[784,26252+30])
                                                  Texp_ident "origin/2135"
                                            ]
                                      <case>
                                        pattern (src/invariant.ml[785,26283+6]..src/invariant.ml[785,26283+14])
                                          Tpat_value
                                          pattern (src/invariant.ml[785,26283+6]..src/invariant.ml[785,26283+14])
                                            Tpat_construct "Goto"
                                            [
                                              pattern (src/invariant.ml[785,26283+11]..src/invariant.ml[785,26283+14])
                                                Tpat_var "_nt/2139"
                                            ]
                                            None
                                        expression (src/invariant.ml[788,26433+8]..src/invariant.ml[788,26433+10])
                                          Texp_construct "()"
                                          []
                                    ]
                              ]
                        ]
                  ]
            ]
        ]
  structure_item (src/invariant.ml[794,26485+0]..src/invariant.ml[798,26619+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/invariant.ml[794,26485+4]..src/invariant.ml[794,26485+12])
          extra
            Tpat_extra_constraint
            core_type (src/invariant.ml[794,26485+15]..src/invariant.ml[794,26485+55])
              Ttyp_constr "Stdlib!.Lazy.t"
              [
                core_type (src/invariant.ml[794,26485+16]..src/invariant.ml[794,26485+47])
                  Ttyp_arrow
                  Nolabel
                  core_type (src/invariant.ml[794,26485+16]..src/invariant.ml[794,26485+26])
                    Ttyp_constr "G/2146.variable"
                    []
                  core_type (src/invariant.ml[794,26485+30]..src/invariant.ml[794,26485+47])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/invariant.ml[794,26485+30]..src/invariant.ml[794,26485+40])
                        Ttyp_constr "P/2050.property"
                        []
                    ]
              ]
          Tpat_alias "solution/2156"
          pattern (src/invariant.ml[794,26485+4]..src/invariant.ml[794,26485+12])
            Tpat_any
        expression (src/invariant.ml[795,26543+2]..src/invariant.ml[798,26619+3])
          extra
            Texp_constraint
            core_type (src/invariant.ml[794,26485+15]..src/invariant.ml[794,26485+55])
              Ttyp_constr "Stdlib!.Lazy.t"
              [
                core_type (src/invariant.ml[794,26485+16]..src/invariant.ml[794,26485+47])
                  Ttyp_arrow
                  Nolabel
                  core_type (src/invariant.ml[794,26485+16]..src/invariant.ml[794,26485+26])
                    Ttyp_constr "G/2146.variable"
                    []
                  core_type (src/invariant.ml[794,26485+30]..src/invariant.ml[794,26485+47])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/invariant.ml[794,26485+30]..src/invariant.ml[794,26485+40])
                        Ttyp_constr "P/2050.property"
                        []
                    ]
              ]
          Texp_lazy          expression (src/invariant.ml[795,26543+7]..src/invariant.ml[798,26619+3])
            Texp_letmodule "D/2244"
            module_expr (src/invariant.ml[796,26552+19]..src/invariant.ml[796,26552+48])
              Tmod_apply
              module_expr (src/invariant.ml[796,26552+19]..src/invariant.ml[796,26552+45])
                Tmod_apply
                module_expr (src/invariant.ml[796,26552+19]..src/invariant.ml[796,26552+42])
                  Tmod_apply
                  module_expr (src/invariant.ml[796,26552+19]..src/invariant.ml[796,26552+39])
                    module_expr (src/invariant.ml[796,26552+19]..src/invariant.ml[796,26552+39])
                      Tmod_ident "Dune__exe!.Fix.DataFlow.ForType"
                  module_expr (src/invariant.ml[796,26552+40]..src/invariant.ml[796,26552+41])
                    Tmod_ident "G/2146"
                module_expr (src/invariant.ml[796,26552+43]..src/invariant.ml[796,26552+44])
                  Tmod_ident "P/2050"
              module_expr (src/invariant.ml[796,26552+46]..src/invariant.ml[796,26552+47])
                Tmod_ident "G/2146"
            expression (src/invariant.ml[797,26604+4]..src/invariant.ml[797,26604+14])
              Texp_ident "D/2244.solution"
    ]
  structure_item (src/invariant.ml[802,26698+0]..src/invariant.ml[829,27203+3])
    Tstr_module
    Origin/2262
      module_expr (src/invariant.ml[802,26698+16]..src/invariant.ml[829,27203+3])
        Tmod_structure
        [
          structure_item (src/invariant.ml[804,26722+2]..src/invariant.ml[807,26785+21])
            Tstr_type Rec
            [
              type_declaration origin/2245 (src/invariant.ml[804,26722+2]..src/invariant.ml[807,26785+21])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (src/invariant.ml[805,26738+4]..src/invariant.ml[805,26738+10])
                        Dead/2246
                        []
                        None
                      (src/invariant.ml[806,26749+4]..src/invariant.ml[806,26749+35])
                        SingleOrigin/2247
                        [
                          core_type (src/invariant.ml[806,26749+22]..src/invariant.ml[806,26749+35])
                            Ttyp_constr "Dune__exe!.Grammar.Nonterminal.t"
                            []
                        ]
                        None
                      (src/invariant.ml[807,26785+4]..src/invariant.ml[807,26785+21])
                        MultipleOrigins/2248
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (src/invariant.ml[809,26808+2]..src/invariant.ml[816,26952+23])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[809,26808+6]..src/invariant.ml[809,26808+13])
                  Tpat_var "convert/2249"
                expression (src/invariant.ml[809,26808+14]..src/invariant.ml[816,26952+23]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[809,26808+14]..src/invariant.ml[809,26808+16])
                        Tpat_var "op/2251"
                      expression (src/invariant.ml[810,26827+4]..src/invariant.ml[816,26952+23])
                        Texp_match
                        expression (src/invariant.ml[810,26827+10]..src/invariant.ml[810,26827+12])
                          Texp_ident "op/2251"
                        [
                          <case>
                            pattern (src/invariant.ml[811,26845+6]..src/invariant.ml[811,26845+10])
                              Tpat_value
                              pattern (src/invariant.ml[811,26845+6]..src/invariant.ml[811,26845+10])
                                Tpat_construct "None"
                                []
                                None
                            expression (src/invariant.ml[812,26859+8]..src/invariant.ml[812,26859+12])
                              Texp_construct "Dead"
                              []
                          <case>
                            pattern (src/invariant.ml[813,26872+6]..src/invariant.ml[813,26872+30])
                              Tpat_value
                              pattern (src/invariant.ml[813,26872+6]..src/invariant.ml[813,26872+30])
                                Tpat_construct "Some"
                                [
                                  pattern (src/invariant.ml[813,26872+11]..src/invariant.ml[813,26872+30])
                                    Tpat_construct "P.SingleOrigin"
                                    [
                                      pattern (src/invariant.ml[813,26872+27]..src/invariant.ml[813,26872+29])
                                        Tpat_var "nt/2252"
                                    ]
                                    None
                                ]
                                None
                            expression (src/invariant.ml[814,26906+8]..src/invariant.ml[814,26906+23])
                              Texp_construct "SingleOrigin"
                              [
                                expression (src/invariant.ml[814,26906+21]..src/invariant.ml[814,26906+23])
                                  Texp_ident "nt/2252"
                              ]
                          <case>
                            pattern (src/invariant.ml[815,26930+6]..src/invariant.ml[815,26930+18])
                              Tpat_value
                              pattern (src/invariant.ml[815,26930+6]..src/invariant.ml[815,26930+18])
                                Tpat_construct "Some"
                                [
                                  pattern (src/invariant.ml[815,26930+11]..src/invariant.ml[815,26930+18])
                                    Tpat_construct "P.Top"
                                    []
                                    None
                                ]
                                None
                            expression (src/invariant.ml[816,26952+8]..src/invariant.ml[816,26952+23])
                              Texp_construct "MultipleOrigins"
                              []
                        ]
                  ]
            ]
          structure_item (src/invariant.ml[820,27004+2]..src/invariant.ml[821,27021+46])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[820,27004+6]..src/invariant.ml[820,27004+9])
                  Tpat_var "run/2253"
                expression (src/invariant.ml[820,27004+10]..src/invariant.ml[821,27021+46]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[820,27004+10]..src/invariant.ml[820,27004+14])
                        Tpat_var "node/2255"
                      expression (src/invariant.ml[821,27021+4]..src/invariant.ml[821,27021+46])
                        Texp_apply
                        expression (src/invariant.ml[821,27021+4]..src/invariant.ml[821,27021+11])
                          Texp_ident "convert/2249"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[821,27021+12]..src/invariant.ml[821,27021+46])
                              Texp_apply
                              expression (src/invariant.ml[821,27021+13]..src/invariant.ml[821,27021+23])
                                Texp_ident "Stdlib!.Lazy.force"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[821,27021+24]..src/invariant.ml[821,27021+32])
                                    Texp_ident "solution/2156"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[821,27021+33]..src/invariant.ml[821,27021+45])
                                    Texp_construct "G.Run"
                                    [
                                      expression (src/invariant.ml[821,27021+40]..src/invariant.ml[821,27021+44])
                                        Texp_ident "node/2255"
                                    ]
                              ]
                        ]
                  ]
            ]
          structure_item (src/invariant.ml[823,27069+2]..src/invariant.ml[824,27089+49])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[823,27069+6]..src/invariant.ml[823,27069+12])
                  Tpat_var "reduce/2256"
                expression (src/invariant.ml[823,27069+13]..src/invariant.ml[824,27089+49]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[823,27069+13]..src/invariant.ml[823,27069+17])
                        Tpat_var "prod/2258"
                      expression (src/invariant.ml[824,27089+4]..src/invariant.ml[824,27089+49])
                        Texp_apply
                        expression (src/invariant.ml[824,27089+4]..src/invariant.ml[824,27089+11])
                          Texp_ident "convert/2249"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[824,27089+12]..src/invariant.ml[824,27089+49])
                              Texp_apply
                              expression (src/invariant.ml[824,27089+13]..src/invariant.ml[824,27089+23])
                                Texp_ident "Stdlib!.Lazy.force"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[824,27089+24]..src/invariant.ml[824,27089+32])
                                    Texp_ident "solution/2156"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[824,27089+33]..src/invariant.ml[824,27089+48])
                                    Texp_construct "G.Reduce"
                                    [
                                      expression (src/invariant.ml[824,27089+43]..src/invariant.ml[824,27089+47])
                                        Texp_ident "prod/2258"
                                    ]
                              ]
                        ]
                  ]
            ]
          structure_item (src/invariant.ml[826,27140+2]..src/invariant.ml[827,27156+45])
            Tstr_value Nonrec
            [
              <def>
                pattern (src/invariant.ml[826,27140+6]..src/invariant.ml[826,27140+10])
                  Tpat_var "goto/2259"
                expression (src/invariant.ml[826,27140+11]..src/invariant.ml[827,27156+45]) ghost
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (src/invariant.ml[826,27140+11]..src/invariant.ml[826,27140+13])
                        Tpat_var "nt/2261"
                      expression (src/invariant.ml[827,27156+4]..src/invariant.ml[827,27156+45])
                        Texp_apply
                        expression (src/invariant.ml[827,27156+4]..src/invariant.ml[827,27156+11])
                          Texp_ident "convert/2249"
                        [
                          <arg>
                            Nolabel
                            expression (src/invariant.ml[827,27156+12]..src/invariant.ml[827,27156+45])
                              Texp_apply
                              expression (src/invariant.ml[827,27156+13]..src/invariant.ml[827,27156+23])
                                Texp_ident "Stdlib!.Lazy.force"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[827,27156+24]..src/invariant.ml[827,27156+32])
                                    Texp_ident "solution/2156"
                                <arg>
                                  Nolabel
                                  expression (src/invariant.ml[827,27156+33]..src/invariant.ml[827,27156+44])
                                    Texp_construct "G.Goto"
                                    [
                                      expression (src/invariant.ml[827,27156+41]..src/invariant.ml[827,27156+43])
                                        Texp_ident "nt/2261"
                                    ]
                              ]
                        ]
                  ]
            ]
        ]
]

{<Dune__exe__Invariant>
 "Long"[module] ->
   Abs<Dune__exe__Invariant.197>
      (()/1,
       {
        "gotostack"[value] -> <Dune__exe__Invariant.196>;
        "prodstack"[value] -> <Dune__exe__Invariant.195>;
        "stack"[value] -> <Dune__exe__Invariant.194>;
        });
 "Origin"[module] ->
   {<Dune__exe__Invariant.246>
    "goto"[value] -> <Dune__exe__Invariant.244>;
    "origin"[type] -> <Dune__exe__Invariant.233>;
    "reduce"[value] -> <Dune__exe__Invariant.242>;
    "run"[value] -> <Dune__exe__Invariant.240>;
    };
 "STACK"[module type] -> <Dune__exe__Invariant.133>;
 "cell"[type] -> <Dune__exe__Invariant.101>;
 "endp"[value] -> <Dune__exe__Invariant.90>;
 "errorpeeker"[value] -> <Dune__exe__Invariant.178>;
 "fold_top"[value] -> <Dune__exe__Invariant.125>;
 "gotostack"[value] -> <Dune__exe__Invariant.147>;
 "instruction"[type] -> <Dune__exe__Invariant.151>;
 "pop"[value] -> <Dune__exe__Invariant.124>;
 "prodstack"[value] -> <Dune__exe__Invariant.146>;
 "represented"[value] -> <Dune__exe__Invariant.32>;
 "rewind"[value] -> <Dune__exe__Invariant.154>;
 "similar"[value] -> <Dune__exe__Invariant.121>;
 "stack"[value] -> <Dune__exe__Invariant.145>;
 "startp"[value] -> <Dune__exe__Invariant.88>;
 "state"[type] -> <Dune__exe__Invariant.148>;
 "universal"[value] -> <Dune__exe__Invariant.165>;
 "word"[type] -> <Dune__exe__Invariant.108>;
 }

(let
  (SSy/422 =
     (apply
       (let (let/6605 = (field_imm 0 (global Dune__exe__StackSymbols!)))
         (field_imm 0 (global Dune__exe__StackSymbols!)))
       0))
  (seq (setfield_ptr(root-init) 14 (global Dune__exe__Invariant!) SSy/422)
    (let
      (SSt/450 =
         (apply
           (let (let/6606 = (field_imm 0 (global Dune__exe__StackStates!)))
             (field_imm 0 (global Dune__exe__StackStates!)))
           (makeblock 0
             (field_mut 1 (field_imm 14 (global Dune__exe__Invariant!)))
             (field_mut 3 (field_imm 14 (global Dune__exe__Invariant!)))
             (field_mut 5 (field_imm 14 (global Dune__exe__Invariant!))))))
      (seq
        (setfield_ptr(root-init) 15 (global Dune__exe__Invariant!) SSt/450)
        (let
          (*match*/6608 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 3
               (apply
                 (field_imm 4 (field_imm 15 (global Dune__exe__Invariant!)))
                 "short")))
          0)
        (let
          (rep/472 =
             (apply (field_imm 0 (global Stdlib__Array!))
               (field_imm 8 (global Dune__exe__Lr1!))
               (function param/568[int]
                 (apply (field_imm 0 (global Dune__exe__UnionFind!)) 0))))
          (setfield_ptr(root-init) 16 (global Dune__exe__Invariant!) rep/472))
        (let
          (represented/569 =
             (function state/571
               (array.get[gen] (field_imm 16 (global Dune__exe__Invariant!))
                 (apply (field_imm 9 (global Dune__exe__Lr1!)) state/571))))
          (setfield_ptr(root-init) 17 (global Dune__exe__Invariant!)
            represented/569))
        (let
          (represent/613 =
             (function state/615 : int
               (apply (field_imm 4 (global Dune__exe__UnionFind!))
                 (apply (field_imm 17 (global Dune__exe__Invariant!))
                   state/615)
                 1)))
          (setfield_ptr(root-init) 18 (global Dune__exe__Invariant!)
            represent/613))
        (let
          (represents/616 =
             (function states/618 : int
               (apply (field_imm 18 (global Dune__exe__Invariant!))
                 (apply (field_imm 14 (field_imm 1 (global Dune__exe__Lr1!)))
                   states/618))))
          (setfield_ptr(root-init) 19 (global Dune__exe__Invariant!)
            represents/616))
        (let
          (share/713 =
             (function v/715 : int
               (apply (field_imm 10 (global Stdlib__Array!))
                 (function states/716 : int
                   (let
                     (dummy/717 =
                        (apply (field_imm 0 (global Dune__exe__UnionFind!))
                          0))
                     (apply
                       (field_imm 22 (field_imm 1 (global Dune__exe__Lr1!)))
                       (function state/718 : int
                         (apply (field_imm 2 (global Dune__exe__UnionFind!))
                           dummy/717
                           (apply
                             (field_imm 17 (global Dune__exe__Invariant!))
                             state/718)))
                       states/716)))
                 v/715)))
          (setfield_ptr(root-init) 20 (global Dune__exe__Invariant!)
            share/713))
        (let
          (*match*/6611 =
             (seq
               (apply (field_imm 25 (global Dune__exe__Lr1!))
                 (function node/719 : int
                   (apply (field_imm 20 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 1
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       node/719))))
               (apply
                 (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                 (function prod/771 : int
                   (apply (field_imm 20 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 2
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       prod/771))))))
          0)
        (let
          (*match*/6613 =
             (apply (field_imm 9 (field_imm 0 (global Dune__exe__Grammar!)))
               (function nt/826 : int
                 (let
                   (count/827 =[int]
                      (apply (field_imm 31 (global Dune__exe__Lr1!))
                        (function count/828[int] param/830 param/829 : int
                          (+ count/828 1))
                        0 (makeblock 0 nt/826)))
                   (if (> count/827 1)
                     (apply (field_imm 31 (global Dune__exe__Lr1!))
                       (function param/941[int] sources/873 param/940 : int
                         (apply (field_imm 17 (global Stdlib__List!))
                           (field_imm 18 (global Dune__exe__Invariant!))
                           sources/873))
                       0 (makeblock 0 nt/826))
                     0)))))
          0)
        (let
          (handler/942 =
             (function state/944 : int
               (try
                 (seq
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     (makeblock 1
                       (field_imm 10
                         (field_imm 2 (global Dune__exe__Grammar!))))
                     (apply (field_imm 19 (global Dune__exe__Lr1!))
                       state/944))
                   1)
                with exn/6614
                 (catch
                   (if (== exn/6614 (field_imm 7 (global Stdlib!)))
                     (try
                       (seq
                         (apply
                           (field_imm 1
                             (field_imm 4 (global Dune__exe__Grammar!)))
                           (field_imm 10
                             (field_imm 2 (global Dune__exe__Grammar!)))
                           (apply (field_imm 20 (global Dune__exe__Lr1!))
                             state/944))
                         1)
                      with exn/6615
                       (catch
                         (if (== exn/6615 (field_imm 7 (global Stdlib!))) 0
                           (exit 13))
                        with (13) (reraise exn/6615)))
                     (exit 14))
                  with (14) (reraise exn/6614)))))
          (setfield_ptr(root-init) 21 (global Dune__exe__Invariant!)
            handler/942))
        (let
          (handlers/1166 =
             (function states/1168 : int
               (apply (field_imm 35 (field_imm 1 (global Dune__exe__Lr1!)))
                 (field_imm 21 (global Dune__exe__Invariant!)) states/1168)))
          (setfield_ptr(root-init) 22 (global Dune__exe__Invariant!)
            handlers/1166))
        (let
          (*match*/6617 =
             (apply (field_imm 25 (global Dune__exe__Lr1!))
               (function node/1169 : int
                 (let
                   (v/1170 =
                      (apply
                        (field_imm 1
                          (field_imm 15 (global Dune__exe__Invariant!)))
                        node/1169))
                   (apply (field_imm 10 (global Stdlib__Array!))
                     (function states/1171 : int
                       (if
                         (&&
                           (>=
                             (apply
                               (field_imm 8
                                 (field_imm 1 (global Dune__exe__Lr1!)))
                               states/1171)
                             2)
                           (apply
                             (field_imm 22 (global Dune__exe__Invariant!))
                             states/1171))
                         (apply (field_imm 19 (global Dune__exe__Invariant!))
                           states/1171)
                         0))
                     v/1170)))))
          0)
        (let
          (*match*/6619 =
             (apply (field_imm 18 (field_imm 8 (global Dune__exe__Grammar!)))
               (function prod/1172 : int
                 (if
                   (apply (field_imm 8 (global Dune__exe__Action!))
                     (apply
                       (field_imm 9
                         (field_imm 8 (global Dune__exe__Grammar!)))
                       prod/1172))
                   (let
                     (sites/1244 =
                        (apply (field_imm 39 (global Dune__exe__Lr1!))
                          prod/1172)
                      length/1245 =[int]
                        (apply
                          (field_imm 7
                            (field_imm 8 (global Dune__exe__Grammar!)))
                          prod/1172))
                     (if (== length/1245 0)
                       (apply
                         (field_imm 22
                           (field_imm 1 (global Dune__exe__Lr1!)))
                         (field_imm 18 (global Dune__exe__Invariant!))
                         sites/1244)
                       (let
                         (states/1246 =
                            (array.get[gen]
                              (apply
                                (field_imm 2
                                  (field_imm 15
                                    (global Dune__exe__Invariant!)))
                                prod/1172)
                              0))
                         (apply (field_imm 19 (global Dune__exe__Invariant!))
                           states/1246))))
                   0))))
          0)
        (let
          (represented/1247 =
             (function state/1248 : int
               (|| (field_imm 16 (global Dune__exe__Settings!))
                 (apply (field_imm 1 (global Dune__exe__UnionFind!))
                   (apply (field_imm 17 (global Dune__exe__Invariant!))
                     state/1248)))))
          (setfield_ptr(root-init) 8 (global Dune__exe__Invariant!)
            represented/1247))
        (let
          (representeds/1309 =
             (function states/1311 : int
               (|| (field_imm 16 (global Dune__exe__Settings!))
                 (if
                   (apply
                     (field_imm 29 (field_imm 1 (global Dune__exe__Lr1!)))
                     states/1311)
                   0
                   (apply (field_imm 8 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 14 (field_imm 1 (global Dune__exe__Lr1!)))
                       states/1311))))))
          (setfield_ptr(root-init) 23 (global Dune__exe__Invariant!)
            representeds/1309))
        (let
          (*match*/6621 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 1
               (function f/1312 : int
                 (let
                   (count/1313 =[int]
                      (apply (field_imm 24 (global Dune__exe__Lr1!))
                        (function count/1314[int] node/1315 : int
                          (if
                            (apply
                              (field_imm 8 (global Dune__exe__Invariant!))
                              node/1315)
                            (+ count/1314 1) count/1314))
                        0))
                   (apply (field_imm 0 (global Stdlib__Printf!)) f/1312
                     [0:
                      [4:
                       0 0 0
                       [11:
                        " out of "
                        [4: 0 0 0 [11: " states are represented.\n" 0]]]]
                      "%d out of %d states are represented.\n"]
                     count/1313 (field_imm 8 (global Dune__exe__Lr1!)))))))
          0)
        (let
          (*match*/6623 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 3
               (function f/1352 : int
                 (apply (field_imm 25 (global Dune__exe__Lr1!))
                   (function node/1353 : int
                     (apply (field_imm 0 (global Stdlib__Printf!)) f/1352
                       [0:
                        [11:
                         "represented("
                         [2: 0 [11: ") = " [9: 0 [12: '\n' 0]]]]]
                        "represented(%s) = %b\n"]
                       (apply (field_imm 10 (global Dune__exe__Lr1!))
                         node/1353)
                       (apply (field_imm 8 (global Dune__exe__Invariant!))
                         node/1353)))))))
          0)
        (let
          (create/1371 =
             (function param/1373[int]
               (makemutable 0
                 (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!)))
                 (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!))))))
          (setfield_ptr(root-init) 37 (global Dune__exe__Invariant!)
            create/1371))
        (let
          (clear/1374 =
             (function m/1376 : int
               (seq
                 (setfield_ptr 0 m/1376
                   (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!))))
                 (setfield_ptr 1 m/1376
                   (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!)))))))
          (setfield_ptr(root-init) 38 (global Dune__exe__Invariant!)
            clear/1374))
        (let
          (add/1377 =
             (function param/1382 data/1380 m/1381 : int
               (let
                 (where/1379 =a (field_imm 1 param/1382)
                  sym/1378 =a (field_imm 0 param/1382))
                 (switch* where/1379
                  case int 0:
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/invariant.ml" 227 8]))
                  case int 1:
                   (setfield_ptr 0 m/1381
                     (apply
                       (field_imm 1
                         (field_imm 7 (global Dune__exe__Grammar!)))
                       sym/1378 data/1380 (field_mut 0 m/1381)))
                  case int 2:
                   (setfield_ptr 1 m/1381
                     (apply
                       (field_imm 1
                         (field_imm 7 (global Dune__exe__Grammar!)))
                       sym/1378 data/1380 (field_mut 1 m/1381)))))))
          (setfield_ptr(root-init) 39 (global Dune__exe__Invariant!)
            add/1377))
        (let
          (find/1383 =
             (function param/1387 m/1386
               (let
                 (where/1385 =a (field_imm 1 param/1387)
                  sym/1384 =a (field_imm 0 param/1387))
                 (switch* where/1385
                  case int 0:
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/invariant.ml" 235 8]))
                  case int 1:
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     sym/1384 (field_mut 0 m/1386))
                  case int 2:
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     sym/1384 (field_mut 1 m/1386))))))
          (setfield_ptr(root-init) 40 (global Dune__exe__Invariant!)
            find/1383))
        (let
          (iter/1388 =
             (function f/1389 m/1390 : int
               (seq
                 (apply
                   (field_imm 22 (field_imm 7 (global Dune__exe__Grammar!)))
                   (function sym/1391
                     (apply f/1389 (makeblock 0 (*,int) sym/1391 1)))
                   (field_mut 0 m/1390))
                 (apply
                   (field_imm 22 (field_imm 7 (global Dune__exe__Grammar!)))
                   (function sym/1392
                     (apply f/1389 (makeblock 0 (*,int) sym/1392 2)))
                   (field_mut 1 m/1390)))))
          (setfield_ptr(root-init) 41 (global Dune__exe__Invariant!)
            iter/1388))
        0
        (let
          (M/1525 =
             (makeblock 0 (field_imm 37 (global Dune__exe__Invariant!))
               (field_imm 39 (global Dune__exe__Invariant!))
               (field_imm 40 (global Dune__exe__Invariant!))
               (field_imm 38 (global Dune__exe__Invariant!))
               (field_imm 41 (global Dune__exe__Invariant!))))
          (seq
            (setfield_ptr(root-init) 24 (global Dune__exe__Invariant!)
              M/1525)
            (let
              (F/1585 =
                 (apply
                   (apply
                     (let
                       (let/6627 =
                          (field_imm 0 (global Dune__exe__FixSolver!)))
                       (field_imm 0 (global Dune__exe__FixSolver!)))
                     (field_imm 24 (global Dune__exe__Invariant!)))
                   (let
                     (let/6625 = (global Vendored_fix__Boolean!)
                      let/6626 =a (global Vendored_fix__Boolean!))
                     (makeblock 0 (field_mut 5 let/6626)))))
              (seq
                (setfield_ptr(root-init) 25 (global Dune__exe__Invariant!)
                  F/1585)
                (let
                  (*match*/6647 =
                     (seq
                       (apply
                         (field_imm 18
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         (function prod/1586 : int
                           (let
                             (*match*/6645 =
                                (apply
                                  (field_imm 4
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              rhs/1588 =a (field_imm 1 *match*/6645)
                              nt/1587 =a (field_imm 0 *match*/6645)
                              ids/1589 =
                                (apply
                                  (field_imm 8
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              action/1590 =
                                (apply
                                  (field_imm 9
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              length/1591 =[int]
                                (array.length[addr] rhs/1588))
                             (seq
                               (if (> length/1591 0)
                                 (seq
                                   (apply
                                     (field_imm 1
                                       (field_imm 25
                                         (global Dune__exe__Invariant!)))
                                     (makeblock 0 (*,int)
                                       (makeblock 0 nt/1587) 1)
                                     (makeblock 0 (*,int)
                                       (array.get[addr] rhs/1588 0) 1))
                                   (apply
                                     (field_imm 1
                                       (field_imm 25
                                         (global Dune__exe__Invariant!)))
                                     (makeblock 0 (*,int)
                                       (makeblock 0 nt/1587) 2)
                                     (makeblock 0 (*,int)
                                       (array.get[addr] rhs/1588
                                         (- length/1591 1))
                                       2)))
                                 0)
                               (apply
                                 (field_imm 22
                                   (field_imm 1 (global MenhirSdk__Keyword!)))
                                 (function param/1641 : int
                                   (if (isint param/1641) 0
                                     (let
                                       (*match*/6632 =a
                                          (field_imm 0 param/1641))
                                       (catch
                                         (catch
                                           (if (isint *match*/6632)
                                             (if *match*/6632
                                               (let
                                                 (*match*/6636 =a
                                                    (field_imm 2 param/1641)
                                                  *match*/6635 =a
                                                    (field_imm 1 param/1641))
                                                 (raise
                                                   (makeblock 0
                                                     (global Assert_failure/28!)
                                                     [0:
                                                      "src/invariant.ml" 321
                                                      10])))
                                               (let
                                                 (*match*/6634 =a
                                                    (field_imm 2 param/1641)
                                                  *match*/6633 =a
                                                    (field_imm 1 param/1641))
                                                 0))
                                             (exit 31))
                                          with (31)
                                           (let
                                             (*match*/6638 =a
                                                (field_imm 2 param/1641))
                                             (if (>= *match*/6638 2)
                                               (raise
                                                 (makeblock 0
                                                   (global Assert_failure/28!)
                                                   [0:
                                                    "src/invariant.ml" 324 10]))
                                               (exit 30))))
                                        with (30)
                                         (let
                                           (id/1637 =a
                                              (field_imm 0 *match*/6632))
                                           (catch
                                             (let
                                               (*match*/6639 =a
                                                  (field_imm 1 param/1641))
                                               (if (!= *match*/6639 0)
                                                 (exit 32)
                                                 (let
                                                   (*match*/6640 =a
                                                      (field_imm 2
                                                        param/1641))
                                                   (raise
                                                     (makeblock 0
                                                       (global Assert_failure/28!)
                                                       [0:
                                                        "src/invariant.ml"
                                                        327 10])))))
                                            with (32)
                                             (let
                                               (*match*/6641 =a
                                                  (field_imm 2 param/1641)
                                                where/1638 =a
                                                  (field_imm 1 param/1641))
                                               (apply
                                                 (field_imm 11
                                                   (global Stdlib__Array!))
                                                 (function i/1639[int]
                                                   id'/1640 : int
                                                   (if
                                                     (caml_string_equal
                                                       id/1637 id'/1640)
                                                     (apply
                                                       (field_imm 0
                                                         (field_imm 25
                                                           (global Dune__exe__Invariant!)))
                                                       1
                                                       (makeblock 0 (*,int)
                                                         (array.get[addr]
                                                           rhs/1588 i/1639)
                                                         where/1638))
                                                     0))
                                                 ids/1589))))))))
                                 (apply
                                   (field_imm 7 (global Dune__exe__Action!))
                                   action/1590))))))
                       (apply (field_imm 30 (global Dune__exe__Lr1!))
                         (function s/1687 : int
                           (let
                             (sym/1688 =
                                (apply
                                  (field_imm 4 (global Dune__exe__Option!))
                                  (apply
                                    (field_imm 13 (global Dune__exe__Lr1!))
                                    s/1687)))
                             (seq
                               (apply
                                 (field_imm 18
                                   (field_imm 4 (global Dune__exe__Grammar!)))
                                 (function param/1741 prods/1700 : int
                                   (let
                                     (prod/1701 =
                                        (apply
                                          (field_imm 0
                                            (global Dune__exe__Misc!))
                                          prods/1700)
                                      *match*/6631 =
                                        (apply
                                          (field_imm 4
                                            (field_imm 8
                                              (global Dune__exe__Grammar!)))
                                          prod/1701)
                                      rhs/1739 =a (field_imm 1 *match*/6631)
                                      nt/1738 =a (field_imm 0 *match*/6631)
                                      length/1740 =[int]
                                        (array.length[addr] rhs/1739))
                                     (if (== length/1740 0)
                                       (seq
                                         (apply
                                           (field_imm 1
                                             (field_imm 25
                                               (global Dune__exe__Invariant!)))
                                           (makeblock 0 (*,int)
                                             (makeblock 0 nt/1738) 1)
                                           (makeblock 0 (*,int) sym/1688 2))
                                         (apply
                                           (field_imm 1
                                             (field_imm 25
                                               (global Dune__exe__Invariant!)))
                                           (makeblock 0 (*,int)
                                             (makeblock 0 nt/1738) 2)
                                           (makeblock 0 (*,int) sym/1688 2)))
                                       0)))
                                 (apply
                                   (field_imm 20 (global Dune__exe__Lr1!))
                                   s/1687))
                               (if
                                 (apply
                                   (field_imm 22 (global Dune__exe__Lr1!))
                                   s/1687)
                                 (apply
                                   (field_imm 0
                                     (field_imm 25
                                       (global Dune__exe__Invariant!)))
                                   1 (makeblock 0 (*,int) sym/1688 2))
                                 0)))))))
                  0)
                (let
                  (track/1742 =
                     (let
                       (S/1746 =
                          (apply
                            (field_imm 2
                              (field_imm 25 (global Dune__exe__Invariant!)))
                            0))
                       (field_imm 0 S/1746)))
                  (setfield_ptr(root-init) 26 (global Dune__exe__Invariant!)
                    track/1742))
                (let
                  (track/1747 =
                     (function x/1748 : int
                       (apply (field_imm 8 (global Dune__exe__Option!))
                         (apply (field_imm 26 (global Dune__exe__Invariant!))
                           x/1748)
                         0)))
                  (setfield_ptr(root-init) 27 (global Dune__exe__Invariant!)
                    track/1747))
                (let
                  (startp/1749 =
                     (function symbol/1751 : int
                       (|| (field_imm 15 (global Dune__exe__Settings!))
                         (apply (field_imm 27 (global Dune__exe__Invariant!))
                           (makeblock 0 (*,int) symbol/1751 1)))))
                  (setfield_ptr(root-init) 9 (global Dune__exe__Invariant!)
                    startp/1749))
                (let
                  (endp/1752 =
                     (function symbol/1754 : int
                       (|| (field_imm 15 (global Dune__exe__Settings!))
                         (apply (field_imm 27 (global Dune__exe__Invariant!))
                           (makeblock 0 (*,int) symbol/1754 2)))))
                  (setfield_ptr(root-init) 10 (global Dune__exe__Invariant!)
                    endp/1752))
                (let
                  (for_every_symbol/1755 =
                     (function f/1757 : int
                       (seq
                         (apply
                           (field_imm 16
                             (field_imm 2 (global Dune__exe__Grammar!)))
                           (function t/1758 : int
                             (apply f/1757 (makeblock 1 t/1758))))
                         (apply
                           (field_imm 9
                             (field_imm 0 (global Dune__exe__Grammar!)))
                           (function nt/1759 : int
                             (apply f/1757 (makeblock 0 nt/1759)))))))
                  (setfield_ptr(root-init) 28 (global Dune__exe__Invariant!)
                    for_every_symbol/1755))
                (let
                  (sum_over_every_symbol/1760 =
                     (function f/1762 : int
                       (let (c/1763 = (makemutable 0 (int) 0))
                         (seq
                           (apply
                             (field_imm 28 (global Dune__exe__Invariant!))
                             (function sym/1764 : int
                               (if (apply f/1762 sym/1764)
                                 (setfield_imm 0 c/1763
                                   (+ (field_int 0 c/1763) 1))
                                 0)))
                           (field_int 0 c/1763)))))
                  (setfield_ptr(root-init) 29 (global Dune__exe__Invariant!)
                    sum_over_every_symbol/1760))
                (let
                  (*match*/6651 =
                     (apply (field_imm 4 (global Dune__exe__Error!)) 1
                       (function f/1765 : int
                         (apply (field_imm 0 (global Stdlib__Printf!)) f/1765
                           [0:
                            [4:
                             0 0 0
                             [11:
                              " out of "
                              [4:
                               0 0 0
                               [11:
                                " symbols keep track of their start position.\n"
                                [4:
                                 0 0 0
                                 [11:
                                  " out of "
                                  [4:
                                   0 0 0
                                   [11:
                                    " symbols keep track of their end position.\n"
                                    0]]]]]]]]
                            "%d out of %d symbols keep track of their start position.\n%d out of %d symbols keep track of their end position.\n"]
                           (apply
                             (field_imm 29 (global Dune__exe__Invariant!))
                             (field_imm 9 (global Dune__exe__Invariant!)))
                           (+
                             (field_imm 0
                               (field_imm 2 (global Dune__exe__Grammar!)))
                             (field_imm 2
                               (field_imm 0 (global Dune__exe__Grammar!))))
                           (apply
                             (field_imm 29 (global Dune__exe__Invariant!))
                             (field_imm 10 (global Dune__exe__Invariant!)))
                           (+
                             (field_imm 0
                               (field_imm 2 (global Dune__exe__Grammar!)))
                             (field_imm 2
                               (field_imm 0 (global Dune__exe__Grammar!))))))))
                  0)
                (let
                  (has_semv/1774 =
                     (function symbol/1776 : int
                       (|| (field_imm 17 (global Dune__exe__Settings!))
                         (switch* symbol/1776
                          case tag 0:
                           (let (_nt/1777 =a (field_imm 0 symbol/1776)) 1)
                          case tag 1:
                           (let
                             (tok/1778 =a (field_imm 0 symbol/1776)
                              *match*/6652 =
                                (apply
                                  (field_imm 8
                                    (field_imm 2
                                      (global Dune__exe__Grammar!)))
                                  tok/1778))
                             (if (isint *match*/6652) 0
                               (let
                                 (_ocamltype/1779 =a
                                    (field_imm 0 *match*/6652))
                                 1)))))))
                  (setfield_ptr(root-init) 30 (global Dune__exe__Invariant!)
                    has_semv/1774))
                (let
                  (cell/1782 =
                     (function symbol/1784 states/1785
                       (let
                         (holds_semv/1786 =[int]
                            (apply
                              (field_imm 30 (global Dune__exe__Invariant!))
                              symbol/1784)
                          holds_state/1787 =[int]
                            (apply
                              (field_imm 23 (global Dune__exe__Invariant!))
                              states/1785))
                         (catch
                           (let
                             (holds_endp/6655 =
                                (apply
                                  (field_imm 10
                                    (global Dune__exe__Invariant!))
                                  symbol/1784)
                              holds_startp/6654 =
                                (apply
                                  (field_imm 9
                                    (global Dune__exe__Invariant!))
                                  symbol/1784))
                             (exit 48 holds_startp/6654 holds_endp/6655))
                          with (48 holds_startp/1788[int] holds_endp/1789[int])
                           (makeblock 0 (*,*,int,int,int,int) symbol/1784
                             states/1785 holds_semv/1786 holds_state/1787
                             holds_startp/1788 holds_endp/1789)))))
                  (setfield_ptr(root-init) 31 (global Dune__exe__Invariant!)
                    cell/1782))
                (let
                  (similar/1790 =
                     (function cell1/1792 cell2/1793 : int
                       (&&
                         (apply
                           (field_imm 2
                             (field_imm 5 (global Dune__exe__Grammar!)))
                           (field_imm 0 cell1/1792) (field_imm 0 cell2/1793))
                         (== (field_int 3 cell1/1792)
                           (field_int 3 cell2/1793)))))
                  (setfield_ptr(root-init) 0 (global Dune__exe__Invariant!)
                    similar/1790))
                (let (pop/1794 = (field_imm 40 (global Dune__exe__MArray!)))
                  (setfield_ptr(root-init) 1 (global Dune__exe__Invariant!)
                    pop/1794))
                (let
                  (fold_top/1859 =
                     (function f/1861 default/1862 w/1863
                       (let (n/1864 =[int] (array.length[gen] w/1863))
                         (if (== n/1864 0) default/1862
                           (apply f/1861
                             (array.get[gen] w/1863 (- n/1864 1)))))))
                  (setfield_ptr(root-init) 2 (global Dune__exe__Invariant!)
                    fold_top/1859))
                (let
                  (publish/1869 =
                     (function tabulate/1871 foo/1872 bar/1873 cell/1874
                       (apply tabulate/1871
                         (function thing/1875
                           (catch
                             (let
                               (bars/6657 = (apply bar/1873 thing/1875)
                                foos/6656 = (apply foo/1872 thing/1875))
                               (exit 51 foos/6656 bars/6657))
                            with (51 foos/1876 bars/1877)
                             (seq
                               (if
                                 (>= (array.length[gen] foos/1876)
                                   (array.length[gen] bars/1877))
                                 0
                                 (raise
                                   (makeblock 0 (global Assert_failure/28!)
                                     [0: "src/invariant.ml" 494 4])))
                               (let
                                 (k/1878 =[int] (array.length[gen] bars/1877)
                                  foos/1879 =
                                    (apply
                                      (field_imm 42
                                        (global Dune__exe__MArray!))
                                      k/1878 foos/1876))
                                 (apply (field_imm 0 (global Stdlib__Array!))
                                   k/1878
                                   (function i/1880[int]
                                     (apply cell/1874
                                       (array.get[gen] foos/1879 i/1880)
                                       (array.get[gen] bars/1877 i/1880)))))))))))
                  (setfield_ptr(root-init) 32 (global Dune__exe__Invariant!)
                    publish/1869))
                (let
                  (stack/1881 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 27 (global Dune__exe__Lr1!))
                       (field_imm 0
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 1
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 3 (global Dune__exe__Invariant!)
                    stack/1881))
                (let
                  (prodstack/1882 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 31
                         (field_imm 8 (global Dune__exe__Grammar!)))
                       (field_imm 2
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 2
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 4 (global Dune__exe__Invariant!)
                    prodstack/1882))
                (let
                  (gotostack/1883 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 14
                         (field_imm 0 (global Dune__exe__Grammar!)))
                       (field_imm 4
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 3
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 5 (global Dune__exe__Invariant!)
                    gotostack/1883))
                (let
                  (rewind/1890 =
                     (function node/1892
                       (let
                         (w/1893 =
                            (apply
                              (field_imm 3 (global Dune__exe__Invariant!))
                              node/1892))
                         (letrec
                           (rewind/1894
                              (function w/1895
                                (if (== (array.length[addr] w/1895) 0) 0
                                  (let
                                    (cell/1897 =
                                       (apply
                                         (field_imm 39
                                           (global Dune__exe__MArray!))
                                         w/1895)
                                     *match*/6673 =a (field_int 5 cell/1897)
                                     *match*/6672 =a (field_int 4 cell/1897)
                                     *match*/6671 =a (field_int 3 cell/1897)
                                     *match*/6670 =a (field_int 2 cell/1897)
                                     states/1896 =a (field_imm 1 cell/1897)
                                     *match*/6669 =a (field_imm 0 cell/1897)
                                     w/1898 =
                                       (apply
                                         (field_imm 40
                                           (global Dune__exe__MArray!))
                                         w/1895))
                                    (if
                                      (apply
                                        (field_imm 23
                                          (global Dune__exe__Invariant!))
                                        states/1896)
                                      (makeblock 0
                                        (makearray[addr] cell/1897) 0)
                                      (if
                                        (apply
                                          (field_imm 22
                                            (global Dune__exe__Invariant!))
                                          states/1896)
                                        (seq
                                          (if
                                            (==
                                              (apply
                                                (field_imm 8
                                                  (field_imm 1
                                                    (global Dune__exe__Lr1!)))
                                                states/1896)
                                              1)
                                            0
                                            (raise
                                              (makeblock 0
                                                (global Assert_failure/28!)
                                                [0: "src/invariant.ml" 563 8])))
                                          (let
                                            (state/1899 =
                                               (apply
                                                 (field_imm 14
                                                   (field_imm 1
                                                     (global Dune__exe__Lr1!)))
                                                 states/1896))
                                            (makeblock 0
                                              (makearray[addr] cell/1897)
                                              (makeblock 0 state/1899))))
                                        (let
                                          (*match*/6661 =
                                             (apply rewind/1894 w/1898))
                                          (if (isint *match*/6661) 0
                                            (let
                                              (st/1901 =a
                                                 (field_imm 1 *match*/6661)
                                               w/1900 =a
                                                 (field_imm 0 *match*/6661))
                                              (makeblock 0
                                                (apply
                                                  (field_imm 41
                                                    (global Dune__exe__MArray!))
                                                  w/1900 cell/1897)
                                                st/1901))))))))))
                           (apply rewind/1894 w/1893)))))
                  (setfield_ptr(root-init) 6 (global Dune__exe__Invariant!)
                    rewind/1890))
                (let
                  (universal/1902 =
                     (function symbol/1904 : int
                       (apply (field_imm 24 (global Dune__exe__Lr1!))
                         (function universal/1905[int] s/1906 : int
                           (&& universal/1905
                             (if
                               (apply
                                 (field_imm 8 (global Dune__exe__Invariant!))
                                 s/1906)
                               (apply
                                 (field_imm 31
                                   (field_imm 7 (global Dune__exe__Grammar!)))
                                 symbol/1904
                                 (apply
                                   (field_imm 19 (global Dune__exe__Lr1!))
                                   s/1906))
                               1)))
                         1)))
                  (setfield_ptr(root-init) 11 (global Dune__exe__Invariant!)
                    universal/1902))
                (let
                  (errorpeekers/1907 =
                     (let
                       (nts/1953 =
                          (apply (field_imm 24 (global Dune__exe__Lr1!))
                            (function nts/1999 node/2000
                              (try
                                (let
                                  (prods/2001 =
                                     (apply
                                       (field_imm 1
                                         (field_imm 4
                                           (global Dune__exe__Grammar!)))
                                       (field_imm 10
                                         (field_imm 2
                                           (global Dune__exe__Grammar!)))
                                       (apply
                                         (field_imm 20
                                           (global Dune__exe__Lr1!))
                                         node/2000))
                                   prod/2002 =
                                     (apply
                                       (field_imm 0
                                         (global Dune__exe__Misc!))
                                       prods/2001)
                                   nt/2003 =
                                     (apply
                                       (field_imm 5
                                         (field_imm 8
                                           (global Dune__exe__Grammar!)))
                                       prod/2002))
                                  (apply
                                    (field_imm 1
                                      (field_imm 6
                                        (global Dune__exe__Grammar!)))
                                    (makeblock 0 nt/2003) nts/1999))
                               with exn/6674
                                (catch
                                  (if
                                    (== exn/6674
                                      (field_imm 7 (global Stdlib!)))
                                    nts/1999 (exit 66))
                                 with (66) (reraise exn/6674))))
                            (field_imm 0
                              (field_imm 6 (global Dune__exe__Grammar!)))))
                       (apply
                         (field_imm 23
                           (field_imm 6 (global Dune__exe__Grammar!)))
                         (function nt/2004 errorpeekers/2005
                           (apply
                             (field_imm 4
                               (field_imm 1 (global Dune__exe__Lr1!)))
                             errorpeekers/2005
                             (apply (field_imm 33 (global Dune__exe__Lr1!))
                               nt/2004)))
                         nts/1953
                         (field_imm 0 (field_imm 1 (global Dune__exe__Lr1!))))))
                  (setfield_ptr(root-init) 33 (global Dune__exe__Invariant!)
                    errorpeekers/1907))
                (let
                  (errorpeeker/2006 =
                     (function node/2008 : int
                       (apply
                         (field_imm 30
                           (field_imm 1 (global Dune__exe__Lr1!)))
                         node/2008
                         (field_imm 33 (global Dune__exe__Invariant!)))))
                  (setfield_ptr(root-init) 7 (global Dune__exe__Invariant!)
                    errorpeeker/2006))
                (let
                  (*match*/6677 =
                     (apply (field_imm 0 (global Dune__exe__Time!))
                       "Constructing the invariant"))
                  0)
                (let
                  (Long/2040 =
                     (function */6688 is_a_functor
                       (let
                         (*/6678 =a */6688
                          SSy/2014 =
                            (apply
                              (let
                                (let/6679 =
                                   (field_imm 1
                                     (global Dune__exe__StackSymbols!)))
                                (field_imm 1
                                  (global Dune__exe__StackSymbols!)))
                              0)
                          SSt/2021 =
                            (apply
                              (let
                                (let/6680 =
                                   (field_imm 0
                                     (global Dune__exe__StackStates!)))
                                (field_imm 0
                                  (global Dune__exe__StackStates!)))
                              (makeblock 0 (field_mut 1 SSy/2014)
                                (field_mut 3 SSy/2014)
                                (field_mut 5 SSy/2014)))
                          unrepresented/2022 =
                            (function node/2024 : int
                              (not
                                (apply
                                  (field_imm 8
                                    (global Dune__exe__Invariant!))
                                  node/2024)))
                          equi_represented/2025 =
                            (function nodes/2027 : int
                              (||
                                (apply
                                  (field_imm 34
                                    (field_imm 1 (global Dune__exe__Lr1!)))
                                  (field_imm 8
                                    (global Dune__exe__Invariant!))
                                  nodes/2027)
                                (apply
                                  (field_imm 34
                                    (field_imm 1 (global Dune__exe__Lr1!)))
                                  unrepresented/2022 nodes/2027)))
                          validate/2028 =
                            (function states/2030
                              (apply
                                (field_imm 44 (global Dune__exe__MArray!))
                                equi_represented/2025 states/2030))
                          stack_states/2031 =
                            (function s/2032
                              (apply validate/2028
                                (apply (field_imm 1 SSt/2021) s/2032)))
                          production_states/2033 =
                            (function prod/2034
                              (apply validate/2028
                                (apply (field_imm 2 SSt/2021) prod/2034)))
                          goto_states/2035 =
                            (function nt/2036
                              (apply validate/2028
                                (apply (field_imm 3 SSt/2021) nt/2036)))
                          *match*/6687 =
                            (apply (field_imm 4 (global Dune__exe__Error!)) 3
                              (apply (field_imm 4 SSt/2021) "long"))
                          stack/2037 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 27 (global Dune__exe__Lr1!))
                              (field_imm 0 SSy/2014) stack_states/2031
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          prodstack/2038 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 31
                                (field_imm 8 (global Dune__exe__Grammar!)))
                              (field_imm 2 SSy/2014) production_states/2033
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          gotostack/2039 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 14
                                (field_imm 0 (global Dune__exe__Grammar!)))
                              (field_imm 4 SSy/2014) goto_states/2035
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          *match*/6682 =
                            (apply (field_imm 0 (global Dune__exe__Time!))
                              "Constructing the long invariant"))
                         (makeblock 0 SSy/2014 SSt/2021 unrepresented/2022
                           equi_represented/2025 validate/2028
                           stack_states/2031 production_states/2033
                           goto_states/2035 stack/2037 prodstack/2038
                           gotostack/2039))))
                  (seq
                    (setfield_ptr(root-init) 12
                      (global Dune__exe__Invariant!)
                      (function funarg/6697 is_a_functor stub
                        (let (let/6698 = (apply Long/2040 funarg/6697))
                          (makeblock 0 (field_mut 8 let/6698)
                            (field_mut 9 let/6698) (field_mut 10 let/6698)))))
                    (let
                      (leq_join/2044 =
                         (function p1/2046 p2/2047
                           (catch
                             (catch
                               (if (isint p1/2046) (exit 88)
                                 (if (isint p2/2047) (exit 89)
                                   (let
                                     (start2/2049 =a (field_imm 0 p2/2047)
                                      start1/2048 =a (field_imm 0 p1/2046))
                                     (if
                                       (apply
                                         (field_imm 0
                                           (field_imm 0
                                             (global Dune__exe__Grammar!)))
                                         start1/2048 start2/2049)
                                       p2/2047 0))))
                              with (89) (exit 88))
                            with (88) 0)))
                      (setfield_ptr(root-init) 42
                        (global Dune__exe__Invariant!) leq_join/2044))
                    0
                    (let
                      (P/2050 =
                         (makeblock 0
                           (field_imm 42 (global Dune__exe__Invariant!))))
                      (seq
                        (setfield_ptr(root-init) 34
                          (global Dune__exe__Invariant!) P/2050)
                        (let
                          (include/6689 =
                             (field_imm 34 (global Dune__exe__Invariant!))
                           leq_join/2052 =a (field_mut 0 include/6689))
                          (seq
                            (setfield_ptr(root-init) 43
                              (global Dune__exe__Invariant!) leq_join/2052)
                            (let
                              (foreach_root/2058 =
                                 (function yield/2060 : int
                                   (apply
                                     (field_imm 18
                                       (field_imm 9
                                         (global Dune__exe__Grammar!)))
                                     (function prod/2095 node/2096 : int
                                       (let
                                         (nt/2097 =
                                            (apply
                                              (field_imm 4
                                                (global Dune__exe__Option!))
                                              (apply
                                                (field_imm 25
                                                  (field_imm 8
                                                    (global Dune__exe__Grammar!)))
                                                prod/2095)))
                                         (apply yield/2060
                                           (makeblock 0 node/2096)
                                           (makeblock 0 nt/2097))))
                                     (field_imm 4 (global Dune__exe__Lr1!)))))
                              (setfield_ptr(root-init) 44
                                (global Dune__exe__Invariant!)
                                foreach_root/2058))
                            (let
                              (foreach_successor/2132 =
                                 (function v/2134 origin/2135 yield/2136
                                   : int
                                   (switch* v/2134
                                    case tag 0:
                                     (let (node/2137 =a (field_imm 0 v/2134))
                                       (seq
                                         (apply
                                           (field_imm 22
                                             (field_imm 7
                                               (global Dune__exe__Grammar!)))
                                           (function _label/2140 node'/2141
                                             : int
                                             (apply yield/2136
                                               (makeblock 0 node'/2141)
                                               origin/2135))
                                           (apply
                                             (field_imm 19
                                               (global Dune__exe__Lr1!))
                                             node/2137))
                                         (apply
                                           (field_imm 18
                                             (field_imm 4
                                               (global Dune__exe__Grammar!)))
                                           (function _tok/2142 prods/2143
                                             : int
                                             (let
                                               (prod/2144 =
                                                  (apply
                                                    (field_imm 0
                                                      (global Dune__exe__Misc!))
                                                    prods/2143))
                                               (apply yield/2136
                                                 (makeblock 1 prod/2144)
                                                 origin/2135)))
                                           (apply
                                             (field_imm 20
                                               (global Dune__exe__Lr1!))
                                             node/2137))))
                                    case tag 1:
                                     (let
                                       (prod/2138 =a (field_imm 0 v/2134)
                                        nt/2145 =
                                          (apply
                                            (field_imm 5
                                              (field_imm 8
                                                (global Dune__exe__Grammar!)))
                                            prod/2138))
                                       (apply yield/2136
                                         (makeblock 2 nt/2145) origin/2135))
                                    case tag 2:
                                     (let (_nt/2139 =a (field_imm 0 v/2134))
                                       0))))
                              (setfield_ptr(root-init) 45
                                (global Dune__exe__Invariant!)
                                foreach_successor/2132))
                            0))
                        (let
                          (G/2146 =
                             (makeblock 0
                               (field_imm 43 (global Dune__exe__Invariant!))
                               (field_imm 44 (global Dune__exe__Invariant!))
                               (field_imm 45 (global Dune__exe__Invariant!))))
                          (seq
                            (setfield_ptr(root-init) 35
                              (global Dune__exe__Invariant!) G/2146)
                            (let
                              (solution/2156 =
                                 (makemutable 246
                                   (function param/6691
                                     (let
                                       (D/2244 =
                                          (apply
                                            (apply
                                              (apply
                                                (let
                                                  (let/6690 =
                                                     (field_imm 3
                                                       (global Vendored_fix__DataFlow!)))
                                                  (field_imm 3
                                                    (global Vendored_fix__DataFlow!)))
                                                (makeblock 0))
                                              (field_imm 34
                                                (global Dune__exe__Invariant!)))
                                            (makeblock 0
                                              (field_mut 1
                                                (field_imm 35
                                                  (global Dune__exe__Invariant!)))
                                              (field_mut 2
                                                (field_imm 35
                                                  (global Dune__exe__Invariant!))))))
                                       (field_imm 0 D/2244)))))
                              (setfield_ptr(root-init) 36
                                (global Dune__exe__Invariant!) solution/2156))
                            (let
                              (convert/2249 =
                                 (function op/2251
                                   (if (isint op/2251) 0
                                     (let
                                       (*match*/6693 =a (field_imm 0 op/2251))
                                       (if (isint *match*/6693) 1
                                         (let
                                           (nt/2252 =a
                                              (field_imm 0 *match*/6693))
                                           (makeblock 0 nt/2252)))))))
                              (setfield_ptr(root-init) 46
                                (global Dune__exe__Invariant!) convert/2249))
                            (let
                              (run/2253 =
                                 (function node/2255
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6694 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6694) lzarg/6694
                                           (switch (caml_obj_tag lzarg/6694)
                                            case int 250:
                                             (field_mut 0 lzarg/6694)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6694))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6694))
                                            default: lzarg/6694)))
                                       (makeblock 0 node/2255)))))
                              (setfield_ptr(root-init) 47
                                (global Dune__exe__Invariant!) run/2253))
                            (let
                              (reduce/2256 =
                                 (function prod/2258
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6695 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6695) lzarg/6695
                                           (switch (caml_obj_tag lzarg/6695)
                                            case int 250:
                                             (field_mut 0 lzarg/6695)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6695))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6695))
                                            default: lzarg/6695)))
                                       (makeblock 1 prod/2258)))))
                              (setfield_ptr(root-init) 48
                                (global Dune__exe__Invariant!) reduce/2256))
                            (let
                              (goto/2259 =
                                 (function nt/2261
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6696 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6696) lzarg/6696
                                           (switch (caml_obj_tag lzarg/6696)
                                            case int 250:
                                             (field_mut 0 lzarg/6696)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6696))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6696))
                                            default: lzarg/6696)))
                                       (makeblock 2 nt/2261)))))
                              (setfield_ptr(root-init) 49
                                (global Dune__exe__Invariant!) goto/2259))
                            0
                            (let
                              (Origin/2262 =
                                 (makeblock 0
                                   (field_imm 46
                                     (global Dune__exe__Invariant!))
                                   (field_imm 47
                                     (global Dune__exe__Invariant!))
                                   (field_imm 48
                                     (global Dune__exe__Invariant!))
                                   (field_imm 49
                                     (global Dune__exe__Invariant!))))
                              (seq
                                (setfield_ptr(root-init) 13
                                  (global Dune__exe__Invariant!)
                                  (makeblock 0 (field_mut 1 Origin/2262)
                                    (field_mut 2 Origin/2262)
                                    (field_mut 3 Origin/2262)))
                                0))))))))))))))))
(let
  (SSy/422 =
     (apply
       (let (let/6605 = (field_imm 0 (global Dune__exe__StackSymbols!)))
         (field_imm 0 (global Dune__exe__StackSymbols!)))
       0))
  (seq (setfield_ptr(root-init) 14 (global Dune__exe__Invariant!) SSy/422)
    (let
      (SSt/450 =
         (apply
           (let (let/6606 = (field_imm 0 (global Dune__exe__StackStates!)))
             (field_imm 0 (global Dune__exe__StackStates!)))
           (makeblock 0
             (field_mut 1 (field_imm 14 (global Dune__exe__Invariant!)))
             (field_mut 3 (field_imm 14 (global Dune__exe__Invariant!)))
             (field_mut 5 (field_imm 14 (global Dune__exe__Invariant!))))))
      (seq
        (setfield_ptr(root-init) 15 (global Dune__exe__Invariant!) SSt/450)
        (let
          (*match*/6608 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 3
               (apply
                 (field_imm 4 (field_imm 15 (global Dune__exe__Invariant!)))
                 "short")))
          0)
        (let
          (rep/472 =
             (apply (field_imm 0 (global Stdlib__Array!))
               (field_imm 8 (global Dune__exe__Lr1!))
               (function param/568[int]
                 (apply (field_imm 0 (global Dune__exe__UnionFind!)) 0))))
          (setfield_ptr(root-init) 16 (global Dune__exe__Invariant!) rep/472))
        (let
          (represented/569 =
             (function state/571
               (array.get[gen] (field_imm 16 (global Dune__exe__Invariant!))
                 (apply (field_imm 9 (global Dune__exe__Lr1!)) state/571))))
          (setfield_ptr(root-init) 17 (global Dune__exe__Invariant!)
            represented/569))
        (let
          (represent/613 =
             (function state/615 : int
               (apply (field_imm 4 (global Dune__exe__UnionFind!))
                 (apply (field_imm 17 (global Dune__exe__Invariant!))
                   state/615)
                 1)))
          (setfield_ptr(root-init) 18 (global Dune__exe__Invariant!)
            represent/613))
        (let
          (represents/616 =
             (function states/618 : int
               (apply (field_imm 18 (global Dune__exe__Invariant!))
                 (apply (field_imm 14 (field_imm 1 (global Dune__exe__Lr1!)))
                   states/618))))
          (setfield_ptr(root-init) 19 (global Dune__exe__Invariant!)
            represents/616))
        (let
          (share/713 =
             (function v/715 : int
               (apply (field_imm 10 (global Stdlib__Array!))
                 (function states/716 : int
                   (let
                     (dummy/717 =
                        (apply (field_imm 0 (global Dune__exe__UnionFind!))
                          0))
                     (apply
                       (field_imm 22 (field_imm 1 (global Dune__exe__Lr1!)))
                       (function state/718 : int
                         (apply (field_imm 2 (global Dune__exe__UnionFind!))
                           dummy/717
                           (apply
                             (field_imm 17 (global Dune__exe__Invariant!))
                             state/718)))
                       states/716)))
                 v/715)))
          (setfield_ptr(root-init) 20 (global Dune__exe__Invariant!)
            share/713))
        (let
          (*match*/6611 =
             (seq
               (apply (field_imm 25 (global Dune__exe__Lr1!))
                 (function node/719 : int
                   (apply (field_imm 20 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 1
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       node/719))))
               (apply
                 (field_imm 14 (field_imm 8 (global Dune__exe__Grammar!)))
                 (function prod/771 : int
                   (apply (field_imm 20 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 2
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       prod/771))))))
          0)
        (let
          (*match*/6613 =
             (apply (field_imm 9 (field_imm 0 (global Dune__exe__Grammar!)))
               (function nt/826 : int
                 (let
                   (count/827 =[int]
                      (apply (field_imm 31 (global Dune__exe__Lr1!))
                        (function count/828[int] param/830 param/829 : int
                          (+ count/828 1))
                        0 (makeblock 0 nt/826)))
                   (if (> count/827 1)
                     (apply (field_imm 31 (global Dune__exe__Lr1!))
                       (function param/941[int] sources/873 param/940 : int
                         (apply (field_imm 17 (global Stdlib__List!))
                           (field_imm 18 (global Dune__exe__Invariant!))
                           sources/873))
                       0 (makeblock 0 nt/826))
                     0)))))
          0)
        (let
          (handler/942 =
             (function state/944 : int
               (try
                 (seq
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     (makeblock 1
                       (field_imm 10
                         (field_imm 2 (global Dune__exe__Grammar!))))
                     (apply (field_imm 19 (global Dune__exe__Lr1!))
                       state/944))
                   1)
                with exn/6614
                 (if (== exn/6614 (field_imm 7 (global Stdlib!)))
                   (try
                     (seq
                       (apply
                         (field_imm 1
                           (field_imm 4 (global Dune__exe__Grammar!)))
                         (field_imm 10
                           (field_imm 2 (global Dune__exe__Grammar!)))
                         (apply (field_imm 20 (global Dune__exe__Lr1!))
                           state/944))
                       1)
                    with exn/6615
                     (if (== exn/6615 (field_imm 7 (global Stdlib!))) 0
                       (reraise exn/6615)))
                   (reraise exn/6614)))))
          (setfield_ptr(root-init) 21 (global Dune__exe__Invariant!)
            handler/942))
        (let
          (handlers/1166 =
             (function states/1168 : int
               (apply (field_imm 35 (field_imm 1 (global Dune__exe__Lr1!)))
                 (field_imm 21 (global Dune__exe__Invariant!)) states/1168)))
          (setfield_ptr(root-init) 22 (global Dune__exe__Invariant!)
            handlers/1166))
        (let
          (*match*/6617 =
             (apply (field_imm 25 (global Dune__exe__Lr1!))
               (function node/1169 : int
                 (let
                   (v/1170 =
                      (apply
                        (field_imm 1
                          (field_imm 15 (global Dune__exe__Invariant!)))
                        node/1169))
                   (apply (field_imm 10 (global Stdlib__Array!))
                     (function states/1171 : int
                       (if
                         (&&
                           (>=
                             (apply
                               (field_imm 8
                                 (field_imm 1 (global Dune__exe__Lr1!)))
                               states/1171)
                             2)
                           (apply
                             (field_imm 22 (global Dune__exe__Invariant!))
                             states/1171))
                         (apply (field_imm 19 (global Dune__exe__Invariant!))
                           states/1171)
                         0))
                     v/1170)))))
          0)
        (let
          (*match*/6619 =
             (apply (field_imm 18 (field_imm 8 (global Dune__exe__Grammar!)))
               (function prod/1172 : int
                 (if
                   (apply (field_imm 8 (global Dune__exe__Action!))
                     (apply
                       (field_imm 9
                         (field_imm 8 (global Dune__exe__Grammar!)))
                       prod/1172))
                   (let
                     (sites/1244 =
                        (apply (field_imm 39 (global Dune__exe__Lr1!))
                          prod/1172)
                      length/1245 =[int]
                        (apply
                          (field_imm 7
                            (field_imm 8 (global Dune__exe__Grammar!)))
                          prod/1172))
                     (if (== length/1245 0)
                       (apply
                         (field_imm 22
                           (field_imm 1 (global Dune__exe__Lr1!)))
                         (field_imm 18 (global Dune__exe__Invariant!))
                         sites/1244)
                       (let
                         (states/1246 =
                            (array.get[gen]
                              (apply
                                (field_imm 2
                                  (field_imm 15
                                    (global Dune__exe__Invariant!)))
                                prod/1172)
                              0))
                         (apply (field_imm 19 (global Dune__exe__Invariant!))
                           states/1246))))
                   0))))
          0)
        (let
          (represented/1247 =
             (function state/1248 : int
               (|| (field_imm 16 (global Dune__exe__Settings!))
                 (apply (field_imm 1 (global Dune__exe__UnionFind!))
                   (apply (field_imm 17 (global Dune__exe__Invariant!))
                     state/1248)))))
          (setfield_ptr(root-init) 8 (global Dune__exe__Invariant!)
            represented/1247))
        (let
          (representeds/1309 =
             (function states/1311 : int
               (|| (field_imm 16 (global Dune__exe__Settings!))
                 (if
                   (apply
                     (field_imm 29 (field_imm 1 (global Dune__exe__Lr1!)))
                     states/1311)
                   0
                   (apply (field_imm 8 (global Dune__exe__Invariant!))
                     (apply
                       (field_imm 14 (field_imm 1 (global Dune__exe__Lr1!)))
                       states/1311))))))
          (setfield_ptr(root-init) 23 (global Dune__exe__Invariant!)
            representeds/1309))
        (let
          (*match*/6621 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 1
               (function f/1312 : int
                 (let
                   (count/1313 =[int]
                      (apply (field_imm 24 (global Dune__exe__Lr1!))
                        (function count/1314[int] node/1315 : int
                          (if
                            (apply
                              (field_imm 8 (global Dune__exe__Invariant!))
                              node/1315)
                            (+ count/1314 1) count/1314))
                        0))
                   (apply (field_imm 0 (global Stdlib__Printf!)) f/1312
                     [0:
                      [4:
                       0 0 0
                       [11:
                        " out of "
                        [4: 0 0 0 [11: " states are represented.\n" 0]]]]
                      "%d out of %d states are represented.\n"]
                     count/1313 (field_imm 8 (global Dune__exe__Lr1!)))))))
          0)
        (let
          (*match*/6623 =
             (apply (field_imm 4 (global Dune__exe__Error!)) 3
               (function f/1352 : int
                 (apply (field_imm 25 (global Dune__exe__Lr1!))
                   (function node/1353 : int
                     (apply (field_imm 0 (global Stdlib__Printf!)) f/1352
                       [0:
                        [11:
                         "represented("
                         [2: 0 [11: ") = " [9: 0 [12: '\n' 0]]]]]
                        "represented(%s) = %b\n"]
                       (apply (field_imm 10 (global Dune__exe__Lr1!))
                         node/1353)
                       (apply (field_imm 8 (global Dune__exe__Invariant!))
                         node/1353)))))))
          0)
        (let
          (create/1371 =
             (function param/1373[int]
               (makemutable 0
                 (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!)))
                 (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!))))))
          (setfield_ptr(root-init) 37 (global Dune__exe__Invariant!)
            create/1371))
        (let
          (clear/1374 =
             (function m/1376 : int
               (seq
                 (setfield_ptr 0 m/1376
                   (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!))))
                 (setfield_ptr 1 m/1376
                   (field_imm 0 (field_imm 7 (global Dune__exe__Grammar!)))))))
          (setfield_ptr(root-init) 38 (global Dune__exe__Invariant!)
            clear/1374))
        (let
          (add/1377 =
             (function param/1382 data/1380 m/1381 : int
               (let (sym/1378 =a (field_imm 0 param/1382))
                 (switch* (field_imm 1 param/1382)
                  case int 0:
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/invariant.ml" 227 8]))
                  case int 1:
                   (setfield_ptr 0 m/1381
                     (apply
                       (field_imm 1
                         (field_imm 7 (global Dune__exe__Grammar!)))
                       sym/1378 data/1380 (field_mut 0 m/1381)))
                  case int 2:
                   (setfield_ptr 1 m/1381
                     (apply
                       (field_imm 1
                         (field_imm 7 (global Dune__exe__Grammar!)))
                       sym/1378 data/1380 (field_mut 1 m/1381)))))))
          (setfield_ptr(root-init) 39 (global Dune__exe__Invariant!)
            add/1377))
        (let
          (find/1383 =
             (function param/1387 m/1386
               (let (sym/1384 =a (field_imm 0 param/1387))
                 (switch* (field_imm 1 param/1387)
                  case int 0:
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/invariant.ml" 235 8]))
                  case int 1:
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     sym/1384 (field_mut 0 m/1386))
                  case int 2:
                   (apply
                     (field_imm 16
                       (field_imm 7 (global Dune__exe__Grammar!)))
                     sym/1384 (field_mut 1 m/1386))))))
          (setfield_ptr(root-init) 40 (global Dune__exe__Invariant!)
            find/1383))
        (let
          (iter/1388 =
             (function f/1389 m/1390 : int
               (seq
                 (apply
                   (field_imm 22 (field_imm 7 (global Dune__exe__Grammar!)))
                   (function sym/1391
                     (apply f/1389 (makeblock 0 (*,int) sym/1391 1)))
                   (field_mut 0 m/1390))
                 (apply
                   (field_imm 22 (field_imm 7 (global Dune__exe__Grammar!)))
                   (function sym/1392
                     (apply f/1389 (makeblock 0 (*,int) sym/1392 2)))
                   (field_mut 1 m/1390)))))
          (setfield_ptr(root-init) 41 (global Dune__exe__Invariant!)
            iter/1388))
        0
        (let
          (M/1525 =
             (makeblock 0 (field_imm 37 (global Dune__exe__Invariant!))
               (field_imm 39 (global Dune__exe__Invariant!))
               (field_imm 40 (global Dune__exe__Invariant!))
               (field_imm 38 (global Dune__exe__Invariant!))
               (field_imm 41 (global Dune__exe__Invariant!))))
          (seq
            (setfield_ptr(root-init) 24 (global Dune__exe__Invariant!)
              M/1525)
            (let
              (F/1585 =
                 (apply
                   (apply
                     (let
                       (let/6627 =
                          (field_imm 0 (global Dune__exe__FixSolver!)))
                       (field_imm 0 (global Dune__exe__FixSolver!)))
                     (field_imm 24 (global Dune__exe__Invariant!)))
                   (let (let/6625 = (global Vendored_fix__Boolean!))
                     (makeblock 0
                       (field_mut 5 (global Vendored_fix__Boolean!))))))
              (seq
                (setfield_ptr(root-init) 25 (global Dune__exe__Invariant!)
                  F/1585)
                (let
                  (*match*/6647 =
                     (seq
                       (apply
                         (field_imm 18
                           (field_imm 8 (global Dune__exe__Grammar!)))
                         (function prod/1586 : int
                           (let
                             (*match*/6645 =
                                (apply
                                  (field_imm 4
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              rhs/1588 =a (field_imm 1 *match*/6645)
                              nt/1587 =a (field_imm 0 *match*/6645)
                              ids/1589 =
                                (apply
                                  (field_imm 8
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              action/1590 =
                                (apply
                                  (field_imm 9
                                    (field_imm 8
                                      (global Dune__exe__Grammar!)))
                                  prod/1586)
                              length/1591 =[int]
                                (array.length[addr] rhs/1588))
                             (seq
                               (if (> length/1591 0)
                                 (seq
                                   (apply
                                     (field_imm 1
                                       (field_imm 25
                                         (global Dune__exe__Invariant!)))
                                     (makeblock 0 (*,int)
                                       (makeblock 0 nt/1587) 1)
                                     (makeblock 0 (*,int)
                                       (array.get[addr] rhs/1588 0) 1))
                                   (apply
                                     (field_imm 1
                                       (field_imm 25
                                         (global Dune__exe__Invariant!)))
                                     (makeblock 0 (*,int)
                                       (makeblock 0 nt/1587) 2)
                                     (makeblock 0 (*,int)
                                       (array.get[addr] rhs/1588
                                         (- length/1591 1))
                                       2)))
                                 0)
                               (apply
                                 (field_imm 22
                                   (field_imm 1 (global MenhirSdk__Keyword!)))
                                 (function param/1641 : int
                                   (if (isint param/1641) 0
                                     (let
                                       (*match*/6632 =a
                                          (field_imm 0 param/1641))
                                       (if (isint *match*/6632)
                                         (if *match*/6632
                                           (raise
                                             (makeblock 0
                                               (global Assert_failure/28!)
                                               [0: "src/invariant.ml" 321 10]))
                                           0)
                                         (if (>= (field_imm 2 param/1641) 2)
                                           (raise
                                             (makeblock 0
                                               (global Assert_failure/28!)
                                               [0: "src/invariant.ml" 324 10]))
                                           (let
                                             (id/1637 =a
                                                (field_imm 0 *match*/6632))
                                             (if
                                               (!= (field_imm 1 param/1641)
                                                 0)
                                               (let
                                                 (where/1638 =a
                                                    (field_imm 1 param/1641))
                                                 (apply
                                                   (field_imm 11
                                                     (global Stdlib__Array!))
                                                   (function i/1639[int]
                                                     id'/1640 : int
                                                     (if
                                                       (caml_string_equal
                                                         id/1637 id'/1640)
                                                       (apply
                                                         (field_imm 0
                                                           (field_imm 25
                                                             (global Dune__exe__Invariant!)))
                                                         1
                                                         (makeblock 0 (*,int)
                                                           (array.get[addr]
                                                             rhs/1588 i/1639)
                                                           where/1638))
                                                       0))
                                                   ids/1589))
                                               (raise
                                                 (makeblock 0
                                                   (global Assert_failure/28!)
                                                   [0:
                                                    "src/invariant.ml" 327 10])))))))))
                                 (apply
                                   (field_imm 7 (global Dune__exe__Action!))
                                   action/1590))))))
                       (apply (field_imm 30 (global Dune__exe__Lr1!))
                         (function s/1687 : int
                           (let
                             (sym/1688 =
                                (apply
                                  (field_imm 4 (global Dune__exe__Option!))
                                  (apply
                                    (field_imm 13 (global Dune__exe__Lr1!))
                                    s/1687)))
                             (seq
                               (apply
                                 (field_imm 18
                                   (field_imm 4 (global Dune__exe__Grammar!)))
                                 (function param/1741 prods/1700 : int
                                   (let
                                     (prod/1701 =
                                        (apply
                                          (field_imm 0
                                            (global Dune__exe__Misc!))
                                          prods/1700)
                                      *match*/6631 =
                                        (apply
                                          (field_imm 4
                                            (field_imm 8
                                              (global Dune__exe__Grammar!)))
                                          prod/1701)
                                      nt/1738 =a (field_imm 0 *match*/6631)
                                      length/1740 =[int]
                                        (array.length[addr]
                                          (field_imm 1 *match*/6631)))
                                     (if (== length/1740 0)
                                       (seq
                                         (apply
                                           (field_imm 1
                                             (field_imm 25
                                               (global Dune__exe__Invariant!)))
                                           (makeblock 0 (*,int)
                                             (makeblock 0 nt/1738) 1)
                                           (makeblock 0 (*,int) sym/1688 2))
                                         (apply
                                           (field_imm 1
                                             (field_imm 25
                                               (global Dune__exe__Invariant!)))
                                           (makeblock 0 (*,int)
                                             (makeblock 0 nt/1738) 2)
                                           (makeblock 0 (*,int) sym/1688 2)))
                                       0)))
                                 (apply
                                   (field_imm 20 (global Dune__exe__Lr1!))
                                   s/1687))
                               (if
                                 (apply
                                   (field_imm 22 (global Dune__exe__Lr1!))
                                   s/1687)
                                 (apply
                                   (field_imm 0
                                     (field_imm 25
                                       (global Dune__exe__Invariant!)))
                                   1 (makeblock 0 (*,int) sym/1688 2))
                                 0)))))))
                  0)
                (let
                  (track/1742 =
                     (let
                       (S/1746 =
                          (apply
                            (field_imm 2
                              (field_imm 25 (global Dune__exe__Invariant!)))
                            0))
                       (field_imm 0 S/1746)))
                  (setfield_ptr(root-init) 26 (global Dune__exe__Invariant!)
                    track/1742))
                (let
                  (track/1747 =
                     (function x/1748 : int
                       (apply (field_imm 8 (global Dune__exe__Option!))
                         (apply (field_imm 26 (global Dune__exe__Invariant!))
                           x/1748)
                         0)))
                  (setfield_ptr(root-init) 27 (global Dune__exe__Invariant!)
                    track/1747))
                (let
                  (startp/1749 =
                     (function symbol/1751 : int
                       (|| (field_imm 15 (global Dune__exe__Settings!))
                         (apply (field_imm 27 (global Dune__exe__Invariant!))
                           (makeblock 0 (*,int) symbol/1751 1)))))
                  (setfield_ptr(root-init) 9 (global Dune__exe__Invariant!)
                    startp/1749))
                (let
                  (endp/1752 =
                     (function symbol/1754 : int
                       (|| (field_imm 15 (global Dune__exe__Settings!))
                         (apply (field_imm 27 (global Dune__exe__Invariant!))
                           (makeblock 0 (*,int) symbol/1754 2)))))
                  (setfield_ptr(root-init) 10 (global Dune__exe__Invariant!)
                    endp/1752))
                (let
                  (for_every_symbol/1755 =
                     (function f/1757 : int
                       (seq
                         (apply
                           (field_imm 16
                             (field_imm 2 (global Dune__exe__Grammar!)))
                           (function t/1758 : int
                             (apply f/1757 (makeblock 1 t/1758))))
                         (apply
                           (field_imm 9
                             (field_imm 0 (global Dune__exe__Grammar!)))
                           (function nt/1759 : int
                             (apply f/1757 (makeblock 0 nt/1759)))))))
                  (setfield_ptr(root-init) 28 (global Dune__exe__Invariant!)
                    for_every_symbol/1755))
                (let
                  (sum_over_every_symbol/1760 =
                     (function f/1762 : int
                       (let (c/1763 = (makemutable 0 (int) 0))
                         (seq
                           (apply
                             (field_imm 28 (global Dune__exe__Invariant!))
                             (function sym/1764 : int
                               (if (apply f/1762 sym/1764)
                                 (setfield_imm 0 c/1763
                                   (+ (field_int 0 c/1763) 1))
                                 0)))
                           (field_int 0 c/1763)))))
                  (setfield_ptr(root-init) 29 (global Dune__exe__Invariant!)
                    sum_over_every_symbol/1760))
                (let
                  (*match*/6651 =
                     (apply (field_imm 4 (global Dune__exe__Error!)) 1
                       (function f/1765 : int
                         (apply (field_imm 0 (global Stdlib__Printf!)) f/1765
                           [0:
                            [4:
                             0 0 0
                             [11:
                              " out of "
                              [4:
                               0 0 0
                               [11:
                                " symbols keep track of their start position.\n"
                                [4:
                                 0 0 0
                                 [11:
                                  " out of "
                                  [4:
                                   0 0 0
                                   [11:
                                    " symbols keep track of their end position.\n"
                                    0]]]]]]]]
                            "%d out of %d symbols keep track of their start position.\n%d out of %d symbols keep track of their end position.\n"]
                           (apply
                             (field_imm 29 (global Dune__exe__Invariant!))
                             (field_imm 9 (global Dune__exe__Invariant!)))
                           (+
                             (field_imm 0
                               (field_imm 2 (global Dune__exe__Grammar!)))
                             (field_imm 2
                               (field_imm 0 (global Dune__exe__Grammar!))))
                           (apply
                             (field_imm 29 (global Dune__exe__Invariant!))
                             (field_imm 10 (global Dune__exe__Invariant!)))
                           (+
                             (field_imm 0
                               (field_imm 2 (global Dune__exe__Grammar!)))
                             (field_imm 2
                               (field_imm 0 (global Dune__exe__Grammar!))))))))
                  0)
                (let
                  (has_semv/1774 =
                     (function symbol/1776 : int
                       (|| (field_imm 17 (global Dune__exe__Settings!))
                         (switch* symbol/1776
                          case tag 0: 1
                          case tag 1:
                           (let
                             (*match*/6652 =
                                (apply
                                  (field_imm 8
                                    (field_imm 2
                                      (global Dune__exe__Grammar!)))
                                  (field_imm 0 symbol/1776)))
                             (if (isint *match*/6652) 0 1))))))
                  (setfield_ptr(root-init) 30 (global Dune__exe__Invariant!)
                    has_semv/1774))
                (let
                  (cell/1782 =
                     (function symbol/1784 states/1785
                       (let
                         (holds_semv/1786 =[int]
                            (apply
                              (field_imm 30 (global Dune__exe__Invariant!))
                              symbol/1784)
                          holds_state/1787 =[int]
                            (apply
                              (field_imm 23 (global Dune__exe__Invariant!))
                              states/1785)
                          holds_endp/6655 =
                            (apply
                              (field_imm 10 (global Dune__exe__Invariant!))
                              symbol/1784)
                          holds_startp/6654 =
                            (apply
                              (field_imm 9 (global Dune__exe__Invariant!))
                              symbol/1784))
                         (makeblock 0 (*,*,int,int,int,int) symbol/1784
                           states/1785 holds_semv/1786 holds_state/1787
                           holds_startp/6654 holds_endp/6655))))
                  (setfield_ptr(root-init) 31 (global Dune__exe__Invariant!)
                    cell/1782))
                (let
                  (similar/1790 =
                     (function cell1/1792 cell2/1793 : int
                       (&&
                         (apply
                           (field_imm 2
                             (field_imm 5 (global Dune__exe__Grammar!)))
                           (field_imm 0 cell1/1792) (field_imm 0 cell2/1793))
                         (== (field_int 3 cell1/1792)
                           (field_int 3 cell2/1793)))))
                  (setfield_ptr(root-init) 0 (global Dune__exe__Invariant!)
                    similar/1790))
                (let (pop/1794 = (field_imm 40 (global Dune__exe__MArray!)))
                  (setfield_ptr(root-init) 1 (global Dune__exe__Invariant!)
                    pop/1794))
                (let
                  (fold_top/1859 =
                     (function f/1861 default/1862 w/1863
                       (let (n/1864 =[int] (array.length[gen] w/1863))
                         (if (== n/1864 0) default/1862
                           (apply f/1861
                             (array.get[gen] w/1863 (- n/1864 1)))))))
                  (setfield_ptr(root-init) 2 (global Dune__exe__Invariant!)
                    fold_top/1859))
                (let
                  (publish/1869 =
                     (function tabulate/1871 foo/1872 bar/1873 cell/1874
                       (apply tabulate/1871
                         (function thing/1875
                           (let
                             (bars/6657 = (apply bar/1873 thing/1875)
                              foos/6656 = (apply foo/1872 thing/1875))
                             (seq
                               (if
                                 (>= (array.length[gen] foos/6656)
                                   (array.length[gen] bars/6657))
                                 0
                                 (raise
                                   (makeblock 0 (global Assert_failure/28!)
                                     [0: "src/invariant.ml" 494 4])))
                               (let
                                 (k/1878 =[int] (array.length[gen] bars/6657)
                                  foos/1879 =
                                    (apply
                                      (field_imm 42
                                        (global Dune__exe__MArray!))
                                      k/1878 foos/6656))
                                 (apply (field_imm 0 (global Stdlib__Array!))
                                   k/1878
                                   (function i/1880[int]
                                     (apply cell/1874
                                       (array.get[gen] foos/1879 i/1880)
                                       (array.get[gen] bars/6657 i/1880)))))))))))
                  (setfield_ptr(root-init) 32 (global Dune__exe__Invariant!)
                    publish/1869))
                (let
                  (stack/1881 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 27 (global Dune__exe__Lr1!))
                       (field_imm 0
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 1
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 3 (global Dune__exe__Invariant!)
                    stack/1881))
                (let
                  (prodstack/1882 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 31
                         (field_imm 8 (global Dune__exe__Grammar!)))
                       (field_imm 2
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 2
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 4 (global Dune__exe__Invariant!)
                    prodstack/1882))
                (let
                  (gotostack/1883 =
                     (apply (field_imm 32 (global Dune__exe__Invariant!))
                       (field_imm 14
                         (field_imm 0 (global Dune__exe__Grammar!)))
                       (field_imm 4
                         (field_imm 14 (global Dune__exe__Invariant!)))
                       (field_imm 3
                         (field_imm 15 (global Dune__exe__Invariant!)))
                       (field_imm 31 (global Dune__exe__Invariant!))))
                  (setfield_ptr(root-init) 5 (global Dune__exe__Invariant!)
                    gotostack/1883))
                (let
                  (rewind/1890 =
                     (function node/1892
                       (let
                         (w/1893 =
                            (apply
                              (field_imm 3 (global Dune__exe__Invariant!))
                              node/1892))
                         (letrec
                           (rewind/1894
                              (function w/1895
                                (if (== (array.length[addr] w/1895) 0) 0
                                  (let
                                    (cell/1897 =
                                       (apply
                                         (field_imm 39
                                           (global Dune__exe__MArray!))
                                         w/1895)
                                     states/1896 =a (field_imm 1 cell/1897)
                                     w/1898 =
                                       (apply
                                         (field_imm 40
                                           (global Dune__exe__MArray!))
                                         w/1895))
                                    (if
                                      (apply
                                        (field_imm 23
                                          (global Dune__exe__Invariant!))
                                        states/1896)
                                      (makeblock 0
                                        (makearray[addr] cell/1897) 0)
                                      (if
                                        (apply
                                          (field_imm 22
                                            (global Dune__exe__Invariant!))
                                          states/1896)
                                        (seq
                                          (if
                                            (==
                                              (apply
                                                (field_imm 8
                                                  (field_imm 1
                                                    (global Dune__exe__Lr1!)))
                                                states/1896)
                                              1)
                                            0
                                            (raise
                                              (makeblock 0
                                                (global Assert_failure/28!)
                                                [0: "src/invariant.ml" 563 8])))
                                          (let
                                            (state/1899 =
                                               (apply
                                                 (field_imm 14
                                                   (field_imm 1
                                                     (global Dune__exe__Lr1!)))
                                                 states/1896))
                                            (makeblock 0
                                              (makearray[addr] cell/1897)
                                              (makeblock 0 state/1899))))
                                        (let
                                          (*match*/6661 =
                                             (apply rewind/1894 w/1898))
                                          (if (isint *match*/6661) 0
                                            (makeblock 0
                                              (apply
                                                (field_imm 41
                                                  (global Dune__exe__MArray!))
                                                (field_imm 0 *match*/6661)
                                                cell/1897)
                                              (field_imm 1 *match*/6661))))))))))
                           (apply rewind/1894 w/1893)))))
                  (setfield_ptr(root-init) 6 (global Dune__exe__Invariant!)
                    rewind/1890))
                (let
                  (universal/1902 =
                     (function symbol/1904 : int
                       (apply (field_imm 24 (global Dune__exe__Lr1!))
                         (function universal/1905[int] s/1906 : int
                           (&& universal/1905
                             (if
                               (apply
                                 (field_imm 8 (global Dune__exe__Invariant!))
                                 s/1906)
                               (apply
                                 (field_imm 31
                                   (field_imm 7 (global Dune__exe__Grammar!)))
                                 symbol/1904
                                 (apply
                                   (field_imm 19 (global Dune__exe__Lr1!))
                                   s/1906))
                               1)))
                         1)))
                  (setfield_ptr(root-init) 11 (global Dune__exe__Invariant!)
                    universal/1902))
                (let
                  (errorpeekers/1907 =
                     (let
                       (nts/1953 =
                          (apply (field_imm 24 (global Dune__exe__Lr1!))
                            (function nts/1999 node/2000
                              (try
                                (let
                                  (prods/2001 =
                                     (apply
                                       (field_imm 1
                                         (field_imm 4
                                           (global Dune__exe__Grammar!)))
                                       (field_imm 10
                                         (field_imm 2
                                           (global Dune__exe__Grammar!)))
                                       (apply
                                         (field_imm 20
                                           (global Dune__exe__Lr1!))
                                         node/2000))
                                   prod/2002 =
                                     (apply
                                       (field_imm 0
                                         (global Dune__exe__Misc!))
                                       prods/2001)
                                   nt/2003 =
                                     (apply
                                       (field_imm 5
                                         (field_imm 8
                                           (global Dune__exe__Grammar!)))
                                       prod/2002))
                                  (apply
                                    (field_imm 1
                                      (field_imm 6
                                        (global Dune__exe__Grammar!)))
                                    (makeblock 0 nt/2003) nts/1999))
                               with exn/6674
                                (if
                                  (== exn/6674
                                    (field_imm 7 (global Stdlib!)))
                                  nts/1999 (reraise exn/6674))))
                            (field_imm 0
                              (field_imm 6 (global Dune__exe__Grammar!)))))
                       (apply
                         (field_imm 23
                           (field_imm 6 (global Dune__exe__Grammar!)))
                         (function nt/2004 errorpeekers/2005
                           (apply
                             (field_imm 4
                               (field_imm 1 (global Dune__exe__Lr1!)))
                             errorpeekers/2005
                             (apply (field_imm 33 (global Dune__exe__Lr1!))
                               nt/2004)))
                         nts/1953
                         (field_imm 0 (field_imm 1 (global Dune__exe__Lr1!))))))
                  (setfield_ptr(root-init) 33 (global Dune__exe__Invariant!)
                    errorpeekers/1907))
                (let
                  (errorpeeker/2006 =
                     (function node/2008 : int
                       (apply
                         (field_imm 30
                           (field_imm 1 (global Dune__exe__Lr1!)))
                         node/2008
                         (field_imm 33 (global Dune__exe__Invariant!)))))
                  (setfield_ptr(root-init) 7 (global Dune__exe__Invariant!)
                    errorpeeker/2006))
                (let
                  (*match*/6677 =
                     (apply (field_imm 0 (global Dune__exe__Time!))
                       "Constructing the invariant"))
                  0)
                (let
                  (Long/2040 =
                     (function */6688 is_a_functor
                       (let
                         (SSy/2014 =
                            (apply
                              (let
                                (let/6679 =
                                   (field_imm 1
                                     (global Dune__exe__StackSymbols!)))
                                (field_imm 1
                                  (global Dune__exe__StackSymbols!)))
                              0)
                          SSt/2021 =
                            (apply
                              (let
                                (let/6680 =
                                   (field_imm 0
                                     (global Dune__exe__StackStates!)))
                                (field_imm 0
                                  (global Dune__exe__StackStates!)))
                              (makeblock 0 (field_mut 1 SSy/2014)
                                (field_mut 3 SSy/2014)
                                (field_mut 5 SSy/2014)))
                          unrepresented/2022 =
                            (function node/2024 : int
                              (not
                                (apply
                                  (field_imm 8
                                    (global Dune__exe__Invariant!))
                                  node/2024)))
                          equi_represented/2025 =
                            (function nodes/2027 : int
                              (||
                                (apply
                                  (field_imm 34
                                    (field_imm 1 (global Dune__exe__Lr1!)))
                                  (field_imm 8
                                    (global Dune__exe__Invariant!))
                                  nodes/2027)
                                (apply
                                  (field_imm 34
                                    (field_imm 1 (global Dune__exe__Lr1!)))
                                  unrepresented/2022 nodes/2027)))
                          validate/2028 =
                            (function states/2030
                              (apply
                                (field_imm 44 (global Dune__exe__MArray!))
                                equi_represented/2025 states/2030))
                          stack_states/2031 =
                            (function s/2032
                              (apply validate/2028
                                (apply (field_imm 1 SSt/2021) s/2032)))
                          production_states/2033 =
                            (function prod/2034
                              (apply validate/2028
                                (apply (field_imm 2 SSt/2021) prod/2034)))
                          goto_states/2035 =
                            (function nt/2036
                              (apply validate/2028
                                (apply (field_imm 3 SSt/2021) nt/2036)))
                          *match*/6687 =
                            (apply (field_imm 4 (global Dune__exe__Error!)) 3
                              (apply (field_imm 4 SSt/2021) "long"))
                          stack/2037 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 27 (global Dune__exe__Lr1!))
                              (field_imm 0 SSy/2014) stack_states/2031
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          prodstack/2038 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 31
                                (field_imm 8 (global Dune__exe__Grammar!)))
                              (field_imm 2 SSy/2014) production_states/2033
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          gotostack/2039 =
                            (apply
                              (field_imm 32 (global Dune__exe__Invariant!))
                              (field_imm 14
                                (field_imm 0 (global Dune__exe__Grammar!)))
                              (field_imm 4 SSy/2014) goto_states/2035
                              (field_imm 31 (global Dune__exe__Invariant!)))
                          *match*/6682 =
                            (apply (field_imm 0 (global Dune__exe__Time!))
                              "Constructing the long invariant"))
                         (makeblock 0 SSy/2014 SSt/2021 unrepresented/2022
                           equi_represented/2025 validate/2028
                           stack_states/2031 production_states/2033
                           goto_states/2035 stack/2037 prodstack/2038
                           gotostack/2039))))
                  (seq
                    (setfield_ptr(root-init) 12
                      (global Dune__exe__Invariant!)
                      (function funarg/6697 is_a_functor stub
                        (let (let/6698 = (apply Long/2040 funarg/6697))
                          (makeblock 0 (field_mut 8 let/6698)
                            (field_mut 9 let/6698) (field_mut 10 let/6698)))))
                    (let
                      (leq_join/2044 =
                         (function p1/2046 p2/2047
                           (catch
                             (if (isint p1/2046) (exit 88)
                               (if (isint p2/2047) (exit 88)
                                 (if
                                   (apply
                                     (field_imm 0
                                       (field_imm 0
                                         (global Dune__exe__Grammar!)))
                                     (field_imm 0 p1/2046)
                                     (field_imm 0 p2/2047))
                                   p2/2047 0)))
                            with (88) 0)))
                      (setfield_ptr(root-init) 42
                        (global Dune__exe__Invariant!) leq_join/2044))
                    0
                    (let
                      (P/2050 =
                         (makeblock 0
                           (field_imm 42 (global Dune__exe__Invariant!))))
                      (seq
                        (setfield_ptr(root-init) 34
                          (global Dune__exe__Invariant!) P/2050)
                        (let
                          (include/6689 =
                             (field_imm 34 (global Dune__exe__Invariant!)))
                          (seq
                            (setfield_ptr(root-init) 43
                              (global Dune__exe__Invariant!)
                              (field_mut 0 include/6689))
                            (let
                              (foreach_root/2058 =
                                 (function yield/2060 : int
                                   (apply
                                     (field_imm 18
                                       (field_imm 9
                                         (global Dune__exe__Grammar!)))
                                     (function prod/2095 node/2096 : int
                                       (let
                                         (nt/2097 =
                                            (apply
                                              (field_imm 4
                                                (global Dune__exe__Option!))
                                              (apply
                                                (field_imm 25
                                                  (field_imm 8
                                                    (global Dune__exe__Grammar!)))
                                                prod/2095)))
                                         (apply yield/2060
                                           (makeblock 0 node/2096)
                                           (makeblock 0 nt/2097))))
                                     (field_imm 4 (global Dune__exe__Lr1!)))))
                              (setfield_ptr(root-init) 44
                                (global Dune__exe__Invariant!)
                                foreach_root/2058))
                            (let
                              (foreach_successor/2132 =
                                 (function v/2134 origin/2135 yield/2136
                                   : int
                                   (switch* v/2134
                                    case tag 0:
                                     (let (node/2137 =a (field_imm 0 v/2134))
                                       (seq
                                         (apply
                                           (field_imm 22
                                             (field_imm 7
                                               (global Dune__exe__Grammar!)))
                                           (function _label/2140 node'/2141
                                             : int
                                             (apply yield/2136
                                               (makeblock 0 node'/2141)
                                               origin/2135))
                                           (apply
                                             (field_imm 19
                                               (global Dune__exe__Lr1!))
                                             node/2137))
                                         (apply
                                           (field_imm 18
                                             (field_imm 4
                                               (global Dune__exe__Grammar!)))
                                           (function _tok/2142 prods/2143
                                             : int
                                             (let
                                               (prod/2144 =
                                                  (apply
                                                    (field_imm 0
                                                      (global Dune__exe__Misc!))
                                                    prods/2143))
                                               (apply yield/2136
                                                 (makeblock 1 prod/2144)
                                                 origin/2135)))
                                           (apply
                                             (field_imm 20
                                               (global Dune__exe__Lr1!))
                                             node/2137))))
                                    case tag 1:
                                     (let
                                       (nt/2145 =
                                          (apply
                                            (field_imm 5
                                              (field_imm 8
                                                (global Dune__exe__Grammar!)))
                                            (field_imm 0 v/2134)))
                                       (apply yield/2136
                                         (makeblock 2 nt/2145) origin/2135))
                                    case tag 2: 0)))
                              (setfield_ptr(root-init) 45
                                (global Dune__exe__Invariant!)
                                foreach_successor/2132))
                            0))
                        (let
                          (G/2146 =
                             (makeblock 0
                               (field_imm 43 (global Dune__exe__Invariant!))
                               (field_imm 44 (global Dune__exe__Invariant!))
                               (field_imm 45 (global Dune__exe__Invariant!))))
                          (seq
                            (setfield_ptr(root-init) 35
                              (global Dune__exe__Invariant!) G/2146)
                            (let
                              (solution/2156 =
                                 (makemutable 246
                                   (function param/6691
                                     (let
                                       (D/2244 =
                                          (apply
                                            (apply
                                              (apply
                                                (let
                                                  (let/6690 =
                                                     (field_imm 3
                                                       (global Vendored_fix__DataFlow!)))
                                                  (field_imm 3
                                                    (global Vendored_fix__DataFlow!)))
                                                (makeblock 0))
                                              (field_imm 34
                                                (global Dune__exe__Invariant!)))
                                            (makeblock 0
                                              (field_mut 1
                                                (field_imm 35
                                                  (global Dune__exe__Invariant!)))
                                              (field_mut 2
                                                (field_imm 35
                                                  (global Dune__exe__Invariant!))))))
                                       (field_imm 0 D/2244)))))
                              (setfield_ptr(root-init) 36
                                (global Dune__exe__Invariant!) solution/2156))
                            (let
                              (convert/2249 =
                                 (function op/2251
                                   (if (isint op/2251) 0
                                     (let
                                       (*match*/6693 =a (field_imm 0 op/2251))
                                       (if (isint *match*/6693) 1
                                         (makeblock 0
                                           (field_imm 0 *match*/6693)))))))
                              (setfield_ptr(root-init) 46
                                (global Dune__exe__Invariant!) convert/2249))
                            (let
                              (run/2253 =
                                 (function node/2255
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6694 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6694) lzarg/6694
                                           (switch (caml_obj_tag lzarg/6694)
                                            case int 250:
                                             (field_mut 0 lzarg/6694)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6694))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6694))
                                            default: lzarg/6694)))
                                       (makeblock 0 node/2255)))))
                              (setfield_ptr(root-init) 47
                                (global Dune__exe__Invariant!) run/2253))
                            (let
                              (reduce/2256 =
                                 (function prod/2258
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6695 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6695) lzarg/6695
                                           (switch (caml_obj_tag lzarg/6695)
                                            case int 250:
                                             (field_mut 0 lzarg/6695)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6695))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6695))
                                            default: lzarg/6695)))
                                       (makeblock 1 prod/2258)))))
                              (setfield_ptr(root-init) 48
                                (global Dune__exe__Invariant!) reduce/2256))
                            (let
                              (goto/2259 =
                                 (function nt/2261
                                   (apply
                                     (field_imm 46
                                       (global Dune__exe__Invariant!))
                                     (apply
                                       (let
                                         (lzarg/6696 =
                                            (field_imm 36
                                              (global Dune__exe__Invariant!)))
                                         (if (isint lzarg/6696) lzarg/6696
                                           (switch (caml_obj_tag lzarg/6696)
                                            case int 250:
                                             (field_mut 0 lzarg/6696)
                                            case int 246:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6696))
                                            case int 244:
                                             (apply
                                               (field_imm 1
                                                 (global CamlinternalLazy!))
                                               (opaque lzarg/6696))
                                            default: lzarg/6696)))
                                       (makeblock 2 nt/2261)))))
                              (setfield_ptr(root-init) 49
                                (global Dune__exe__Invariant!) goto/2259))
                            0
                            (let
                              (Origin/2262 =
                                 (makeblock 0
                                   (field_imm 46
                                     (global Dune__exe__Invariant!))
                                   (field_imm 47
                                     (global Dune__exe__Invariant!))
                                   (field_imm 48
                                     (global Dune__exe__Invariant!))
                                   (field_imm 49
                                     (global Dune__exe__Invariant!))))
                              (seq
                                (setfield_ptr(root-init) 13
                                  (global Dune__exe__Invariant!)
                                  (makeblock 0 (field_mut 1 Origin/2262)
                                    (field_mut 2 Origin/2262)
                                    (field_mut 3 Origin/2262)))
                                0))))))))))))))))

[
  structure_item (src/chopInlined.ml[1,25+0]..[166,10726+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/chopInlined.ml[1,25+4]..[1,25+22])
          Ppat_var "__ocaml_lex_tables" (src/chopInlined.ml[1,25+4]..[1,25+22])
        expression (src/chopInlined.ml[1,25+25]..[166,10726+1])
          Pexp_record
          [
            "Lexing.lex_base" (src/chopInlined.ml[2,52+2]..[2,52+17])
              expression (src/chopInlined.ml[3,72+3]..[4,142+45])
                Pexp_constant PConst_string("\000\000\253\255\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\254\255\018\000\255\255",(src/chopInlined.ml[3,72+4]..[4,142+44]),None)
            "Lexing.lex_backtrk" (src/chopInlined.ml[5,189+2]..[5,189+20])
              expression (src/chopInlined.ml[6,212+3]..[7,282+45])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255",(src/chopInlined.ml[6,212+4]..[7,282+44]),None)
            "Lexing.lex_default" (src/chopInlined.ml[8,329+2]..[8,329+20])
              expression (src/chopInlined.ml[9,352+3]..[10,422+45])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/chopInlined.ml[9,352+4]..[10,422+44]),None)
            "Lexing.lex_trans" (src/chopInlined.ml[11,469+2]..[11,469+18])
              expression (src/chopInlined.ml[12,490+3]..[46,2870+29])
                Pexp_constant PConst_stringb\000\tn\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000",(src/chopInlined.ml[12,490+4]..[46,2870+28]),None)
            "Lexing.lex_check" (src/chopInlined.ml[47,2901+2]..[47,2901+18])
              expression (src/chopInlined.ml[48,2922+3]..[82,5302+29])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000",(src/chopInlined.ml[48,2922+4]..[82,5302+28]),None)
            "Lexing.lex_base_code" (src/chopInlined.ml[83,5333+2]..[83,5333+22])
              expression (src/chopInlined.ml[84,5358+3]..[85,5428+45])
                Pexp_constant PConst_string("\000\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\000\000\018\000\012\000",(src/chopInlined.ml[84,5358+4]..[85,5428+44]),None)
            "Lexing.lex_backtrk_code" (src/chopInlined.ml[86,5475+2]..[86,5475+25])
              expression (src/chopInlined.ml[87,5503+3]..[88,5573+45])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/chopInlined.ml[87,5503+4]..[88,5573+44]),None)
            "Lexing.lex_default_code" (src/chopInlined.ml[89,5620+2]..[89,5620+25])
              expression (src/chopInlined.ml[90,5648+3]..[91,5718+45])
                Pexp_constant PConst_string("\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000",(src/chopInlined.ml[90,5648+4]..[91,5718+44]),None)
            "Lexing.lex_trans_code" (src/chopInlined.ml[92,5765+2]..[92,5765+23])
              expression (src/chopInlined.ml[93,5791+3]..[127,8171+29])
                Pexp_constant PConst_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\000\000\000\000\004\000\004\000\004\000\004\000\000\000\004\000\004\000\007\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/chopInlined.ml[93,5791+4]..[127,8171+28]),None)
            "Lexing.lex_check_code" (src/chopInlined.ml[128,8202+2]..[128,8202+23])
              expression (src/chopInlined.ml[129,8228+3]..[163,10608+29])
                Pexp_constant PConst_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000",(src/chopInlined.ml[129,8228+4]..[163,10608+28]),None)
            "Lexing.lex_code" (src/chopInlined.ml[164,10639+2]..[164,10639+17])
              expression (src/chopInlined.ml[165,10659+3]..[165,10659+65])
                Pexp_constant PConst_string("\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255",(src/chopInlined.ml[165,10659+4]..[165,10659+64]),None)
          ]
          None
    ]
  structure_item (src/chopInlined.ml[168,10729+0]..[210,11996+51])
    Pstr_value Rec
    [
      <def>
        pattern (src/chopInlined.ml[168,10729+8]..[168,10729+12])
          Ppat_var "chop" (src/chopInlined.ml[168,10729+8]..[168,10729+12])
        expression (src/chopInlined.ml[168,10729+13]..[171,10878+30]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/chopInlined.ml[168,10729+13]..[168,10729+19])
            Ppat_var "lexbuf" (src/chopInlined.ml[168,10729+13]..[168,10729+19])
          expression (src/chopInlined.ml[169,10751+2]..[171,10878+30])
            Pexp_sequence
            expression (src/chopInlined.ml[169,10751+2]..[169,10751+44])
              Pexp_setfield
              expression (src/chopInlined.ml[169,10751+2]..[169,10751+8])
                Pexp_ident "lexbuf" (src/chopInlined.ml[169,10751+2]..[169,10751+8])
              "Lexing.lex_mem" (src/chopInlined.ml[169,10751+9]..[169,10751+23])
              expression (src/chopInlined.ml[169,10751+27]..[169,10751+44])
                Pexp_apply
                expression (src/chopInlined.ml[169,10751+27]..[169,10751+37])
                  Pexp_ident "Array.make" (src/chopInlined.ml[169,10751+27]..[169,10751+37])
                [
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[169,10751+38]..[169,10751+39])
                      Pexp_constant PConst_int (3,None)
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[169,10751+40]..[169,10751+44])
                      Pexp_constant PConst_int (-1,None)
                ]
            expression (src/chopInlined.ml[170,10818+2]..[171,10878+30])
              Pexp_sequence
              expression (src/chopInlined.ml[170,10818+2]..[170,10818+57])
                Pexp_apply
                expression (src/chopInlined.ml[170,10818+2]..[170,10818+57]) ghost
                  Pexp_ident "Array.set" (src/chopInlined.ml[170,10818+2]..[170,10818+57]) ghost
                [
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[170,10818+2]..[170,10818+23])
                      Pexp_field
                      expression (src/chopInlined.ml[170,10818+2]..[170,10818+8])
                        Pexp_ident "lexbuf" (src/chopInlined.ml[170,10818+2]..[170,10818+8])
                      "Lexing.lex_mem" (src/chopInlined.ml[170,10818+9]..[170,10818+23])
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[170,10818+25]..[170,10818+26])
                      Pexp_constant PConst_int (1,None)
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[170,10818+31]..[170,10818+57])
                      Pexp_field
                      expression (src/chopInlined.ml[170,10818+31]..[170,10818+37])
                        Pexp_ident "lexbuf" (src/chopInlined.ml[170,10818+31]..[170,10818+37])
                      "Lexing.lex_curr_pos" (src/chopInlined.ml[170,10818+38]..[170,10818+57])
                ]
              expression (src/chopInlined.ml[171,10878+1]..[171,10878+30])
                Pexp_apply
                expression (src/chopInlined.ml[171,10878+1]..[171,10878+21])
                  Pexp_ident "__ocaml_lex_chop_rec" (src/chopInlined.ml[171,10878+1]..[171,10878+21])
                [
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[171,10878+22]..[171,10878+28])
                      Pexp_ident "lexbuf" (src/chopInlined.ml[171,10878+22]..[171,10878+28])
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[171,10878+29]..[171,10878+30])
                      Pexp_constant PConst_int (0,None)
                ]
      <def>
        pattern (src/chopInlined.ml[172,10909+4]..[172,10909+24])
          Ppat_var "__ocaml_lex_chop_rec" (src/chopInlined.ml[172,10909+4]..[172,10909+24])
        expression (src/chopInlined.ml[172,10909+25]..[210,11996+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/chopInlined.ml[172,10909+25]..[172,10909+31])
            Ppat_var "lexbuf" (src/chopInlined.ml[172,10909+25]..[172,10909+31])
          expression (src/chopInlined.ml[172,10909+32]..[210,11996+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/chopInlined.ml[172,10909+32]..[172,10909+49])
              Ppat_var "__ocaml_lex_state" (src/chopInlined.ml[172,10909+32]..[172,10909+49])
            expression (src/chopInlined.ml[173,10961+2]..[210,11996+51])
              Pexp_match
              expression (src/chopInlined.ml[173,10961+8]..[173,10961+69])
                Pexp_apply
                expression (src/chopInlined.ml[173,10961+8]..[173,10961+25])
                  Pexp_ident "Lexing.new_engine" (src/chopInlined.ml[173,10961+8]..[173,10961+25])
                [
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[173,10961+26]..[173,10961+44])
                      Pexp_ident "__ocaml_lex_tables" (src/chopInlined.ml[173,10961+26]..[173,10961+44])
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[173,10961+45]..[173,10961+62])
                      Pexp_ident "__ocaml_lex_state" (src/chopInlined.ml[173,10961+45]..[173,10961+62])
                  <arg>
                  Nolabel
                    expression (src/chopInlined.ml[173,10961+63]..[173,10961+69])
                      Pexp_ident "lexbuf" (src/chopInlined.ml[173,10961+63]..[173,10961+69])
                ]
              [
                <case>
                  pattern (src/chopInlined.ml[174,11036+8]..[174,11036+9])
                    Ppat_constant PConst_int (0,None)
                  expression (src/chopInlined.ml[175,11049+0]..src/chopInlined.mll[19,11413+26])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/chopInlined.mll[18,11080+9]..[18,11080+10])
                          Ppat_var "x" (src/chopInlined.mll[18,11080+9]..[18,11080+10])
                        expression (src/chopInlined.ml[179,11118+2]..[179,11118+80])
                          Pexp_apply
                          expression (src/chopInlined.ml[179,11118+2]..[179,11118+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/chopInlined.ml[179,11118+2]..[179,11118+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[179,11118+20]..[179,11118+26])
                                Pexp_ident "lexbuf" (src/chopInlined.ml[179,11118+20]..[179,11118+26])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[179,11118+27]..[179,11118+54])
                                Pexp_field
                                expression (src/chopInlined.ml[179,11118+27]..[179,11118+33])
                                  Pexp_ident "lexbuf" (src/chopInlined.ml[179,11118+27]..[179,11118+33])
                                "Lexing.lex_start_pos" (src/chopInlined.ml[179,11118+34]..[179,11118+54])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[179,11118+55]..[179,11118+80])
                                Pexp_apply
                                expression (src/chopInlined.ml[179,11118+55]..[179,11118+80]) ghost
                                  Pexp_ident "Array.get" (src/chopInlined.ml[179,11118+55]..[179,11118+80]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[179,11118+55]..[179,11118+76])
                                      Pexp_field
                                      expression (src/chopInlined.ml[179,11118+55]..[179,11118+61])
                                        Pexp_ident "lexbuf" (src/chopInlined.ml[179,11118+55]..[179,11118+61])
                                      "Lexing.lex_mem" (src/chopInlined.ml[179,11118+62]..[179,11118+76])
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[179,11118+78]..[179,11118+79])
                                      Pexp_constant PConst_int (0,None)
                                ]
                          ]
                      <def>
                        pattern (src/chopInlined.mll[18,11230+38]..[18,11230+39])
                          Ppat_var "n" (src/chopInlined.mll[18,11230+38]..[18,11230+39])
                        expression (src/chopInlined.ml[184,11297+2]..[184,11297+85])
                          Pexp_apply
                          expression (src/chopInlined.ml[184,11297+2]..[184,11297+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/chopInlined.ml[184,11297+2]..[184,11297+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[184,11297+20]..[184,11297+26])
                                Pexp_ident "lexbuf" (src/chopInlined.ml[184,11297+20]..[184,11297+26])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[184,11297+27]..[184,11297+58])
                                Pexp_apply
                                expression (src/chopInlined.ml[184,11297+54]..[184,11297+55])
                                  Pexp_ident "+" (src/chopInlined.ml[184,11297+54]..[184,11297+55])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[184,11297+28]..[184,11297+53])
                                      Pexp_apply
                                      expression (src/chopInlined.ml[184,11297+28]..[184,11297+53]) ghost
                                        Pexp_ident "Array.get" (src/chopInlined.ml[184,11297+28]..[184,11297+53]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/chopInlined.ml[184,11297+28]..[184,11297+49])
                                            Pexp_field
                                            expression (src/chopInlined.ml[184,11297+28]..[184,11297+34])
                                              Pexp_ident "lexbuf" (src/chopInlined.ml[184,11297+28]..[184,11297+34])
                                            "Lexing.lex_mem" (src/chopInlined.ml[184,11297+35]..[184,11297+49])
                                        <arg>
                                        Nolabel
                                          expression (src/chopInlined.ml[184,11297+51]..[184,11297+52])
                                            Pexp_constant PConst_int (0,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[184,11297+56]..[184,11297+57])
                                      Pexp_constant PConst_int (8,None)
                                ]
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[184,11297+59]..[184,11297+85])
                                Pexp_field
                                expression (src/chopInlined.ml[184,11297+59]..[184,11297+65])
                                  Pexp_ident "lexbuf" (src/chopInlined.ml[184,11297+59]..[184,11297+65])
                                "Lexing.lex_curr_pos" (src/chopInlined.ml[184,11297+66]..[184,11297+85])
                          ]
                    ]
                    expression (src/chopInlined.mll[19,11413+4]..[19,11413+26])
                      Pexp_tuple
                      [
                        expression (src/chopInlined.mll[19,11413+6]..[19,11413+7])
                          Pexp_ident "x" (src/chopInlined.mll[19,11413+6]..[19,11413+7])
                        expression (src/chopInlined.mll[19,11413+9]..[19,11413+24])
                          Pexp_apply
                          expression (src/chopInlined.mll[19,11413+9]..[19,11413+22])
                            Pexp_ident "int_of_string" (src/chopInlined.mll[19,11413+9]..[19,11413+22])
                          [
                            <arg>
                            Nolabel
                              expression (src/chopInlined.mll[19,11413+23]..[19,11413+24])
                                Pexp_ident "n" (src/chopInlined.mll[19,11413+23]..[19,11413+24])
                          ]
                      ]
                <case>
                  pattern (src/chopInlined.ml[189,11468+4]..[189,11468+5])
                    Ppat_constant PConst_int (1,None)
                  expression (src/chopInlined.ml[190,11477+0]..src/chopInlined.mll[21,11665+12])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/chopInlined.mll[20,11508+9]..[20,11508+10])
                          Ppat_var "x" (src/chopInlined.mll[20,11508+9]..[20,11508+10])
                        expression (src/chopInlined.ml[194,11546+2]..[194,11546+88])
                          Pexp_apply
                          expression (src/chopInlined.ml[194,11546+2]..[194,11546+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/chopInlined.ml[194,11546+2]..[194,11546+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[194,11546+20]..[194,11546+26])
                                Pexp_ident "lexbuf" (src/chopInlined.ml[194,11546+20]..[194,11546+26])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[194,11546+27]..[194,11546+54])
                                Pexp_field
                                expression (src/chopInlined.ml[194,11546+27]..[194,11546+33])
                                  Pexp_ident "lexbuf" (src/chopInlined.ml[194,11546+27]..[194,11546+33])
                                "Lexing.lex_start_pos" (src/chopInlined.ml[194,11546+34]..[194,11546+54])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[194,11546+55]..[194,11546+88])
                                Pexp_apply
                                expression (src/chopInlined.ml[194,11546+83]..[194,11546+84])
                                  Pexp_ident "+" (src/chopInlined.ml[194,11546+83]..[194,11546+84])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[194,11546+56]..[194,11546+82])
                                      Pexp_field
                                      expression (src/chopInlined.ml[194,11546+56]..[194,11546+62])
                                        Pexp_ident "lexbuf" (src/chopInlined.ml[194,11546+56]..[194,11546+62])
                                      "Lexing.lex_curr_pos" (src/chopInlined.ml[194,11546+63]..[194,11546+82])
                                  <arg>
                                  Nolabel
                                    expression (src/chopInlined.ml[194,11546+85]..[194,11546+87])
                                      Pexp_constant PConst_int (-8,None)
                                ]
                          ]
                    ]
                    expression (src/chopInlined.mll[21,11665+4]..[21,11665+12])
                      Pexp_tuple
                      [
                        expression (src/chopInlined.mll[21,11665+6]..[21,11665+7])
                          Pexp_ident "x" (src/chopInlined.mll[21,11665+6]..[21,11665+7])
                        expression (src/chopInlined.mll[21,11665+9]..[21,11665+10])
                          Pexp_constant PConst_int (0,None)
                      ]
                <case>
                  pattern (src/chopInlined.ml[199,11706+4]..[199,11706+5])
                    Ppat_constant PConst_int (2,None)
                  expression (src/chopInlined.ml[200,11715+0]..src/chopInlined.mll[23,11896+12])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/chopInlined.mll[22,11746+9]..[22,11746+10])
                          Ppat_var "x" (src/chopInlined.mll[22,11746+9]..[22,11746+10])
                        expression (src/chopInlined.ml[204,11784+2]..[204,11784+81])
                          Pexp_apply
                          expression (src/chopInlined.ml[204,11784+2]..[204,11784+19])
                            Pexp_ident "Lexing.sub_lexeme" (src/chopInlined.ml[204,11784+2]..[204,11784+19])
                          [
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[204,11784+20]..[204,11784+26])
                                Pexp_ident "lexbuf" (src/chopInlined.ml[204,11784+20]..[204,11784+26])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[204,11784+27]..[204,11784+54])
                                Pexp_field
                                expression (src/chopInlined.ml[204,11784+27]..[204,11784+33])
                                  Pexp_ident "lexbuf" (src/chopInlined.ml[204,11784+27]..[204,11784+33])
                                "Lexing.lex_start_pos" (src/chopInlined.ml[204,11784+34]..[204,11784+54])
                            <arg>
                            Nolabel
                              expression (src/chopInlined.ml[204,11784+55]..[204,11784+81])
                                Pexp_field
                                expression (src/chopInlined.ml[204,11784+55]..[204,11784+61])
                                  Pexp_ident "lexbuf" (src/chopInlined.ml[204,11784+55]..[204,11784+61])
                                "Lexing.lex_curr_pos" (src/chopInlined.ml[204,11784+62]..[204,11784+81])
                          ]
                    ]
                    expression (src/chopInlined.mll[23,11896+4]..[23,11896+12])
                      Pexp_tuple
                      [
                        expression (src/chopInlined.mll[23,11896+6]..[23,11896+7])
                          Pexp_ident "x" (src/chopInlined.mll[23,11896+6]..[23,11896+7])
                        expression (src/chopInlined.mll[23,11896+9]..[23,11896+10])
                          Pexp_constant PConst_int (0,None)
                      ]
                <case>
                  pattern (src/chopInlined.ml[209,11937+4]..[209,11937+21])
                    Ppat_var "__ocaml_lex_state" (src/chopInlined.ml[209,11937+4]..[209,11937+21])
                  expression (src/chopInlined.ml[209,11937+25]..[210,11996+51])
                    Pexp_sequence
                    expression (src/chopInlined.ml[209,11937+25]..[209,11937+57])
                      Pexp_apply
                      expression (src/chopInlined.ml[209,11937+25]..[209,11937+50])
                        Pexp_field
                        expression (src/chopInlined.ml[209,11937+25]..[209,11937+31])
                          Pexp_ident "lexbuf" (src/chopInlined.ml[209,11937+25]..[209,11937+31])
                        "Lexing.refill_buff" (src/chopInlined.ml[209,11937+32]..[209,11937+50])
                      [
                        <arg>
                        Nolabel
                          expression (src/chopInlined.ml[209,11937+51]..[209,11937+57])
                            Pexp_ident "lexbuf" (src/chopInlined.ml[209,11937+51]..[209,11937+57])
                      ]
                    expression (src/chopInlined.ml[210,11996+6]..[210,11996+51])
                      Pexp_apply
                      expression (src/chopInlined.ml[210,11996+6]..[210,11996+26])
                        Pexp_ident "__ocaml_lex_chop_rec" (src/chopInlined.ml[210,11996+6]..[210,11996+26])
                      [
                        <arg>
                        Nolabel
                          expression (src/chopInlined.ml[210,11996+27]..[210,11996+33])
                            Pexp_ident "lexbuf" (src/chopInlined.ml[210,11996+27]..[210,11996+33])
                        <arg>
                        Nolabel
                          expression (src/chopInlined.ml[210,11996+34]..[210,11996+51])
                            Pexp_ident "__ocaml_lex_state" (src/chopInlined.ml[210,11996+34]..[210,11996+51])
                      ]
              ]
    ]
]

let __ocaml_lex_tables =
  {
    Lexing.lex_base =
      "\000\000\253\255\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\254\255\018\000\255\255";
    Lexing.lex_backtrk =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255";
    Lexing.lex_default =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    Lexing.lex_trans =
b\000\tn\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000";
    Lexing.lex_check =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000";
    Lexing.lex_base_code =
      "\000\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\000\000\018\000\012\000";
    Lexing.lex_backtrk_code =
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    Lexing.lex_default_code =
      "\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000";
    Lexing.lex_trans_code =

    Lexing.lex_check_code =
      "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000";
    Lexing.lex_code =
      "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"
  }
let rec chop lexbuf =
  lexbuf.Lexing.lex_mem <- (Array.make 3 (-1));
  (lexbuf.Lexing.lex_mem).(1) <- (lexbuf.Lexing.lex_curr_pos);
  __ocaml_lex_chop_rec lexbuf 0
and __ocaml_lex_chop_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let x =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          ((lexbuf.Lexing.lex_mem).(0))
      and n =
        Lexing.sub_lexeme lexbuf (((lexbuf.Lexing.lex_mem).(0)) + 8)
          lexbuf.Lexing.lex_curr_pos in
      (x, (int_of_string n))
  | 1 ->
      let x =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          (lexbuf.Lexing.lex_curr_pos + (-8)) in
      (x, 0)
  | 2 ->
      let x =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos in
      (x, 0)
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_chop_rec lexbuf __ocaml_lex_state)
[
  structure_item (src/chopInlined.ml[1,25+0]..src/chopInlined.ml[166,10726+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/chopInlined.ml[1,25+4]..src/chopInlined.ml[1,25+22])
          Tpat_var "__ocaml_lex_tables/396"
        expression (src/chopInlined.ml[1,25+25]..src/chopInlined.ml[166,10726+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (src/chopInlined.ml[3,72+3]..src/chopInlined.ml[4,142+45])
                    Texp_constant Const_string("\000\000\253\255\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\254\255\018\000\255\255",(src/chopInlined.ml[3,72+4]..src/chopInlined.ml[4,142+44]),None)
                "Lexing.lex_backtrk"
                  expression (src/chopInlined.ml[6,212+3]..src/chopInlined.ml[7,282+45])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255",(src/chopInlined.ml[6,212+4]..src/chopInlined.ml[7,282+44]),None)
                "Lexing.lex_default"
                  expression (src/chopInlined.ml[9,352+3]..src/chopInlined.ml[10,422+45])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/chopInlined.ml[9,352+4]..src/chopInlined.ml[10,422+44]),None)
                "Lexing.lex_trans"
                  expression (src/chopInlined.ml[12,490+3]..src/chopInlined.ml[46,2870+29])
                    Texp_constant Const_stringb\000\tn\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000",(src/chopInlined.ml[12,490+4]..src/chopInlined.ml[46,2870+28]),None)
                "Lexing.lex_check"
                  expression (src/chopInlined.ml[48,2922+3]..src/chopInlined.ml[82,5302+29])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\b\000\005\000\255\255\004\000\003\000\011\000\255\255\006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000",(src/chopInlined.ml[48,2922+4]..src/chopInlined.ml[82,5302+28]),None)
                "Lexing.lex_base_code"
                  expression (src/chopInlined.ml[84,5358+3]..src/chopInlined.ml[85,5428+45])
                    Texp_constant Const_string("\000\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\000\000\018\000\012\000",(src/chopInlined.ml[84,5358+4]..src/chopInlined.ml[85,5428+44]),None)
                "Lexing.lex_backtrk_code"
                  expression (src/chopInlined.ml[87,5503+3]..src/chopInlined.ml[88,5573+45])
                    Texp_constant Const_string("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",(src/chopInlined.ml[87,5503+4]..src/chopInlined.ml[88,5573+44]),None)
                "Lexing.lex_default_code"
                  expression (src/chopInlined.ml[90,5648+3]..src/chopInlined.ml[91,5718+45])
                    Texp_constant Const_string("\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000",(src/chopInlined.ml[90,5648+4]..src/chopInlined.ml[91,5718+44]),None)
                "Lexing.lex_trans_code"
                  expression (src/chopInlined.ml[93,5791+3]..src/chopInlined.ml[127,8171+29])
                    Texp_constant Const_stringsrc/chopInlined.ml[93,5791+4]..src/chopInlined.ml[127,8171+28]),None)
                "Lexing.lex_check_code"
                  expression (src/chopInlined.ml[129,8228+3]..src/chopInlined.ml[163,10608+29])
                    Texp_constant Const_string("\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000",(src/chopInlined.ml[129,8228+4]..src/chopInlined.ml[163,10608+28]),None)
                "Lexing.lex_code"
                  expression (src/chopInlined.ml[165,10659+3]..src/chopInlined.ml[165,10659+65])
                    Texp_constant Const_string("\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255",(src/chopInlined.ml[165,10659+4]..src/chopInlined.ml[165,10659+64]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/chopInlined.ml[168,10729+0]..src/chopInlined.ml[210,11996+51])
    Tstr_value Rec
    [
      <def>
        pattern (src/chopInlined.ml[168,10729+8]..src/chopInlined.ml[168,10729+12])
          Tpat_var "chop/421"
        expression (src/chopInlined.ml[168,10729+13]..src/chopInlined.ml[171,10878+30]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/chopInlined.ml[168,10729+13]..src/chopInlined.ml[168,10729+19])
                Tpat_var "lexbuf/423"
              expression (src/chopInlined.ml[169,10751+2]..src/chopInlined.ml[171,10878+30])
                Texp_sequence
                expression (src/chopInlined.ml[169,10751+2]..src/chopInlined.ml[169,10751+44])
                  Texp_setfield
                  expression (src/chopInlined.ml[169,10751+2]..src/chopInlined.ml[169,10751+8])
                    Texp_ident "lexbuf/423"
                  "Lexing.lex_mem"
                  expression (src/chopInlined.ml[169,10751+27]..src/chopInlined.ml[169,10751+44])
                    Texp_apply
                    expression (src/chopInlined.ml[169,10751+27]..src/chopInlined.ml[169,10751+37])
                      Texp_ident "Stdlib!.Array.make"
                    [
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[169,10751+38]..src/chopInlined.ml[169,10751+39])
                          Texp_constant Const_int 3
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[169,10751+40]..src/chopInlined.ml[169,10751+44])
                          Texp_constant Const_int -1
                    ]
                expression (src/chopInlined.ml[170,10818+2]..src/chopInlined.ml[171,10878+30])
                  Texp_sequence
                  expression (src/chopInlined.ml[170,10818+2]..src/chopInlined.ml[170,10818+57])
                    Texp_apply
                    expression (src/chopInlined.ml[170,10818+2]..src/chopInlined.ml[170,10818+57]) ghost
                      Texp_ident "Stdlib!.Array.set"
                    [
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[170,10818+2]..src/chopInlined.ml[170,10818+23])
                          Texp_field
                          expression (src/chopInlined.ml[170,10818+2]..src/chopInlined.ml[170,10818+8])
                            Texp_ident "lexbuf/423"
                          "Lexing.lex_mem"
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[170,10818+25]..src/chopInlined.ml[170,10818+26])
                          Texp_constant Const_int 1
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[170,10818+31]..src/chopInlined.ml[170,10818+57])
                          Texp_field
                          expression (src/chopInlined.ml[170,10818+31]..src/chopInlined.ml[170,10818+37])
                            Texp_ident "lexbuf/423"
                          "Lexing.lex_curr_pos"
                    ]
                  expression (src/chopInlined.ml[171,10878+1]..src/chopInlined.ml[171,10878+30])
                    Texp_apply
                    expression (src/chopInlined.ml[171,10878+1]..src/chopInlined.ml[171,10878+21])
                      Texp_ident "__ocaml_lex_chop_rec/422"
                    [
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[171,10878+22]..src/chopInlined.ml[171,10878+28])
                          Texp_ident "lexbuf/423"
                      <arg>
                        Nolabel
                        expression (src/chopInlined.ml[171,10878+29]..src/chopInlined.ml[171,10878+30])
                          Texp_constant Const_int 0
                    ]
          ]
      <def>
        pattern (src/chopInlined.ml[172,10909+4]..src/chopInlined.ml[172,10909+24])
          Tpat_var "__ocaml_lex_chop_rec/422"
        expression (src/chopInlined.ml[172,10909+25]..src/chopInlined.ml[210,11996+51]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/chopInlined.ml[172,10909+25]..src/chopInlined.ml[172,10909+31])
                Tpat_var "lexbuf/496"
              expression (src/chopInlined.ml[172,10909+32]..src/chopInlined.ml[210,11996+51]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/chopInlined.ml[172,10909+32]..src/chopInlined.ml[172,10909+49])
                      Tpat_var "__ocaml_lex_state/497"
                    expression (src/chopInlined.ml[173,10961+2]..src/chopInlined.ml[210,11996+51])
                      Texp_match
                      expression (src/chopInlined.ml[173,10961+8]..src/chopInlined.ml[173,10961+69])
                        Texp_apply
                        expression (src/chopInlined.ml[173,10961+8]..src/chopInlined.ml[173,10961+25])
                          Texp_ident "Stdlib!.Lexing.new_engine"
                        [
                          <arg>
                            Nolabel
                            expression (src/chopInlined.ml[173,10961+26]..src/chopInlined.ml[173,10961+44])
                              Texp_ident "__ocaml_lex_tables/396"
                          <arg>
                            Nolabel
                            expression (src/chopInlined.ml[173,10961+45]..src/chopInlined.ml[173,10961+62])
                              Texp_ident "__ocaml_lex_state/497"
                          <arg>
                            Nolabel
                            expression (src/chopInlined.ml[173,10961+63]..src/chopInlined.ml[173,10961+69])
                              Texp_ident "lexbuf/496"
                        ]
                      [
                        <case>
                          pattern (src/chopInlined.ml[174,11036+8]..src/chopInlined.ml[174,11036+9])
                            Tpat_value
                            pattern (src/chopInlined.ml[174,11036+8]..src/chopInlined.ml[174,11036+9])
                              Tpat_constant Const_int 0
                          expression (src/chopInlined.ml[175,11049+0]..src/chopInlined.mll[19,11413+26])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/chopInlined.mll[18,11080+9]..src/chopInlined.mll[18,11080+10])
                                  Tpat_var "x/499"
                                expression (src/chopInlined.ml[179,11118+2]..src/chopInlined.ml[179,11118+80])
                                  Texp_apply
                                  expression (src/chopInlined.ml[179,11118+2]..src/chopInlined.ml[179,11118+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[179,11118+20]..src/chopInlined.ml[179,11118+26])
                                        Texp_ident "lexbuf/496"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[179,11118+27]..src/chopInlined.ml[179,11118+54])
                                        Texp_field
                                        expression (src/chopInlined.ml[179,11118+27]..src/chopInlined.ml[179,11118+33])
                                          Texp_ident "lexbuf/496"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[179,11118+55]..src/chopInlined.ml[179,11118+80])
                                        Texp_apply
                                        expression (src/chopInlined.ml[179,11118+55]..src/chopInlined.ml[179,11118+80]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[179,11118+55]..src/chopInlined.ml[179,11118+76])
                                              Texp_field
                                              expression (src/chopInlined.ml[179,11118+55]..src/chopInlined.ml[179,11118+61])
                                                Texp_ident "lexbuf/496"
                                              "Lexing.lex_mem"
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[179,11118+78]..src/chopInlined.ml[179,11118+79])
                                              Texp_constant Const_int 0
                                        ]
                                  ]
                              <def>
                                pattern (src/chopInlined.mll[18,11230+38]..src/chopInlined.mll[18,11230+39])
                                  Tpat_var "n/500"
                                expression (src/chopInlined.ml[184,11297+2]..src/chopInlined.ml[184,11297+85])
                                  Texp_apply
                                  expression (src/chopInlined.ml[184,11297+2]..src/chopInlined.ml[184,11297+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[184,11297+20]..src/chopInlined.ml[184,11297+26])
                                        Texp_ident "lexbuf/496"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[184,11297+27]..src/chopInlined.ml[184,11297+58])
                                        Texp_apply
                                        expression (src/chopInlined.ml[184,11297+54]..src/chopInlined.ml[184,11297+55])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[184,11297+28]..src/chopInlined.ml[184,11297+53])
                                              Texp_apply
                                              expression (src/chopInlined.ml[184,11297+28]..src/chopInlined.ml[184,11297+53]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/chopInlined.ml[184,11297+28]..src/chopInlined.ml[184,11297+49])
                                                    Texp_field
                                                    expression (src/chopInlined.ml[184,11297+28]..src/chopInlined.ml[184,11297+34])
                                                      Texp_ident "lexbuf/496"
                                                    "Lexing.lex_mem"
                                                <arg>
                                                  Nolabel
                                                  expression (src/chopInlined.ml[184,11297+51]..src/chopInlined.ml[184,11297+52])
                                                    Texp_constant Const_int 0
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[184,11297+56]..src/chopInlined.ml[184,11297+57])
                                              Texp_constant Const_int 8
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[184,11297+59]..src/chopInlined.ml[184,11297+85])
                                        Texp_field
                                        expression (src/chopInlined.ml[184,11297+59]..src/chopInlined.ml[184,11297+65])
                                          Texp_ident "lexbuf/496"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (src/chopInlined.mll[19,11413+4]..src/chopInlined.mll[19,11413+26])
                              Texp_tuple
                              [
                                expression (src/chopInlined.mll[19,11413+6]..src/chopInlined.mll[19,11413+7])
                                  Texp_ident "x/499"
                                expression (src/chopInlined.mll[19,11413+9]..src/chopInlined.mll[19,11413+24])
                                  Texp_apply
                                  expression (src/chopInlined.mll[19,11413+9]..src/chopInlined.mll[19,11413+22])
                                    Texp_ident "Stdlib!.int_of_string"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.mll[19,11413+23]..src/chopInlined.mll[19,11413+24])
                                        Texp_ident "n/500"
                                  ]
                              ]
                        <case>
                          pattern (src/chopInlined.ml[189,11468+4]..src/chopInlined.ml[189,11468+5])
                            Tpat_value
                            pattern (src/chopInlined.ml[189,11468+4]..src/chopInlined.ml[189,11468+5])
                              Tpat_constant Const_int 1
                          expression (src/chopInlined.ml[190,11477+0]..src/chopInlined.mll[21,11665+12])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/chopInlined.mll[20,11508+9]..src/chopInlined.mll[20,11508+10])
                                  Tpat_var "x/501"
                                expression (src/chopInlined.ml[194,11546+2]..src/chopInlined.ml[194,11546+88])
                                  Texp_apply
                                  expression (src/chopInlined.ml[194,11546+2]..src/chopInlined.ml[194,11546+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[194,11546+20]..src/chopInlined.ml[194,11546+26])
                                        Texp_ident "lexbuf/496"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[194,11546+27]..src/chopInlined.ml[194,11546+54])
                                        Texp_field
                                        expression (src/chopInlined.ml[194,11546+27]..src/chopInlined.ml[194,11546+33])
                                          Texp_ident "lexbuf/496"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[194,11546+55]..src/chopInlined.ml[194,11546+88])
                                        Texp_apply
                                        expression (src/chopInlined.ml[194,11546+83]..src/chopInlined.ml[194,11546+84])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[194,11546+56]..src/chopInlined.ml[194,11546+82])
                                              Texp_field
                                              expression (src/chopInlined.ml[194,11546+56]..src/chopInlined.ml[194,11546+62])
                                                Texp_ident "lexbuf/496"
                                              "Lexing.lex_curr_pos"
                                          <arg>
                                            Nolabel
                                            expression (src/chopInlined.ml[194,11546+85]..src/chopInlined.ml[194,11546+87])
                                              Texp_constant Const_int -8
                                        ]
                                  ]
                            ]
                            expression (src/chopInlined.mll[21,11665+4]..src/chopInlined.mll[21,11665+12])
                              Texp_tuple
                              [
                                expression (src/chopInlined.mll[21,11665+6]..src/chopInlined.mll[21,11665+7])
                                  Texp_ident "x/501"
                                expression (src/chopInlined.mll[21,11665+9]..src/chopInlined.mll[21,11665+10])
                                  Texp_constant Const_int 0
                              ]
                        <case>
                          pattern (src/chopInlined.ml[199,11706+4]..src/chopInlined.ml[199,11706+5])
                            Tpat_value
                            pattern (src/chopInlined.ml[199,11706+4]..src/chopInlined.ml[199,11706+5])
                              Tpat_constant Const_int 2
                          expression (src/chopInlined.ml[200,11715+0]..src/chopInlined.mll[23,11896+12])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/chopInlined.mll[22,11746+9]..src/chopInlined.mll[22,11746+10])
                                  Tpat_var "x/502"
                                expression (src/chopInlined.ml[204,11784+2]..src/chopInlined.ml[204,11784+81])
                                  Texp_apply
                                  expression (src/chopInlined.ml[204,11784+2]..src/chopInlined.ml[204,11784+19])
                                    Texp_ident "Stdlib!.Lexing.sub_lexeme"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[204,11784+20]..src/chopInlined.ml[204,11784+26])
                                        Texp_ident "lexbuf/496"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[204,11784+27]..src/chopInlined.ml[204,11784+54])
                                        Texp_field
                                        expression (src/chopInlined.ml[204,11784+27]..src/chopInlined.ml[204,11784+33])
                                          Texp_ident "lexbuf/496"
                                        "Lexing.lex_start_pos"
                                    <arg>
                                      Nolabel
                                      expression (src/chopInlined.ml[204,11784+55]..src/chopInlined.ml[204,11784+81])
                                        Texp_field
                                        expression (src/chopInlined.ml[204,11784+55]..src/chopInlined.ml[204,11784+61])
                                          Texp_ident "lexbuf/496"
                                        "Lexing.lex_curr_pos"
                                  ]
                            ]
                            expression (src/chopInlined.mll[23,11896+4]..src/chopInlined.mll[23,11896+12])
                              Texp_tuple
                              [
                                expression (src/chopInlined.mll[23,11896+6]..src/chopInlined.mll[23,11896+7])
                                  Texp_ident "x/502"
                                expression (src/chopInlined.mll[23,11896+9]..src/chopInlined.mll[23,11896+10])
                                  Texp_constant Const_int 0
                              ]
                        <case>
                          pattern (src/chopInlined.ml[209,11937+4]..src/chopInlined.ml[209,11937+21])
                            Tpat_value
                            pattern (src/chopInlined.ml[209,11937+4]..src/chopInlined.ml[209,11937+21])
                              Tpat_var "__ocaml_lex_state/498"
                          expression (src/chopInlined.ml[209,11937+25]..src/chopInlined.ml[210,11996+51])
                            Texp_sequence
                            expression (src/chopInlined.ml[209,11937+25]..src/chopInlined.ml[209,11937+57])
                              Texp_apply
                              expression (src/chopInlined.ml[209,11937+25]..src/chopInlined.ml[209,11937+50])
                                Texp_field
                                expression (src/chopInlined.ml[209,11937+25]..src/chopInlined.ml[209,11937+31])
                                  Texp_ident "lexbuf/496"
                                "Lexing.refill_buff"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/chopInlined.ml[209,11937+51]..src/chopInlined.ml[209,11937+57])
                                    Texp_ident "lexbuf/496"
                              ]
                            expression (src/chopInlined.ml[210,11996+6]..src/chopInlined.ml[210,11996+51])
                              Texp_apply
                              expression (src/chopInlined.ml[210,11996+6]..src/chopInlined.ml[210,11996+26])
                                Texp_ident "__ocaml_lex_chop_rec/422"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/chopInlined.ml[210,11996+27]..src/chopInlined.ml[210,11996+33])
                                    Texp_ident "lexbuf/496"
                                <arg>
                                  Nolabel
                                  expression (src/chopInlined.ml[210,11996+34]..src/chopInlined.ml[210,11996+51])
                                    Texp_ident "__ocaml_lex_state/498"
                              ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__ChopInlined>
 "__ocaml_lex_chop_rec"[value] -> <Dune__exe__ChopInlined.2>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__ChopInlined.0>;
 "chop"[value] -> <Dune__exe__ChopInlined.1>;
 }

(seq
  (let
    (__ocaml_lex_tables/396 =
       [0:
        "\000\000\253\255\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\254\255\018\000\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
b\000\t\000\006\000\000\000\005\000\004\000\002\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\n\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000"
        "\000\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\000\000\018\000\012\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
        "\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000"
        "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"])
    (setfield_ptr(root-init) 0 (global Dune__exe__ChopInlined!)
      __ocaml_lex_tables/396))
  (letrec
    (chop/421
       (function lexbuf/423
         (seq (setfield_ptr 9 lexbuf/423 (caml_make_vect 3 -1))
           (array.set[int] (field_mut 9 lexbuf/423) 1
             (field_int 5 lexbuf/423))
           (apply __ocaml_lex_chop_rec/422 lexbuf/423 0)))
      __ocaml_lex_chop_rec/422
        (function lexbuf/496 __ocaml_lex_state/497[int]
          (let
            (__ocaml_lex_state/498 =
               (apply (field_imm 20 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__ChopInlined!))
                 __ocaml_lex_state/497 lexbuf/496))
            (catch
              (if (isout 2 __ocaml_lex_state/498) (exit 1)
                (switch* __ocaml_lex_state/498
                 case int 0:
                  (let
                    (x/499 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/496 (field_int 4 lexbuf/496)
                         (array.get[int] (field_mut 9 lexbuf/496) 0))
                     n/500 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/496
                         (+ (array.get[int] (field_mut 9 lexbuf/496) 0) 8)
                         (field_int 5 lexbuf/496)))
                    (makeblock 0 (*,int) x/499 (caml_int_of_string n/500)))
                 case int 1:
                  (let
                    (x/501 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/496 (field_int 4 lexbuf/496)
                         (+ (field_int 5 lexbuf/496) -8)))
                    (makeblock 0 (*,int) x/501 0))
                 case int 2:
                  (let
                    (x/502 =
                       (apply (field_imm 15 (global Stdlib__Lexing!))
                         lexbuf/496 (field_int 4 lexbuf/496)
                         (field_int 5 lexbuf/496)))
                    (makeblock 0 (*,int) x/502 0))))
             with (1)
              (seq (apply (field_imm 0 lexbuf/496) lexbuf/496)
                (apply __ocaml_lex_chop_rec/422 lexbuf/496
                  __ocaml_lex_state/498))))))
    (seq
      (setfield_ptr(root-init) 1 (global Dune__exe__ChopInlined!) chop/421)
      (setfield_ptr(root-init) 2 (global Dune__exe__ChopInlined!)
        __ocaml_lex_chop_rec/422)))
  0)
(seq
  (let
    (__ocaml_lex_tables/396 =
       [0:
        "\000\000\253\255\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\254\255\018\000\255\255"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
b\000\tn\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000"
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000"
        "\000\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\007\000\000\000\018\000\012\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
        "\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\000\000"

        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\000\003\000\004\000\005\000\006\000\007\000\t\000\b\000\255\255\255\255\002\000\007\000\bt\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000"
        "\255\001\255\255\002\255\255\001\002\002\255\255\000\001\255"])
    (setfield_ptr(root-init) 0 (global Dune__exe__ChopInlined!)
      __ocaml_lex_tables/396))
  (letrec
    (chop/421
       (function lexbuf/423
         (seq (setfield_ptr 9 lexbuf/423 (caml_make_vect 3 -1))
           (array.set[int] (field_mut 9 lexbuf/423) 1
             (field_int 5 lexbuf/423))
           (apply __ocaml_lex_chop_rec/422 lexbuf/423 0)))
      __ocaml_lex_chop_rec/422
        (function lexbuf/496 __ocaml_lex_state/497[int]
          (let
            (__ocaml_lex_state/498 =
               (apply (field_imm 20 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__ChopInlined!))
                 __ocaml_lex_state/497 lexbuf/496))
            (if (isout 2 __ocaml_lex_state/498)
              (seq (apply (field_imm 0 lexbuf/496) lexbuf/496)
                (apply __ocaml_lex_chop_rec/422 lexbuf/496
                  __ocaml_lex_state/498))
              (switch* __ocaml_lex_state/498
               case int 0:
                (let
                  (x/499 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/496 (field_int 4 lexbuf/496)
                       (array.get[int] (field_mut 9 lexbuf/496) 0))
                   n/500 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/496
                       (+ (array.get[int] (field_mut 9 lexbuf/496) 0) 8)
                       (field_int 5 lexbuf/496)))
                  (makeblock 0 (*,int) x/499 (caml_int_of_string n/500)))
               case int 1:
                (let
                  (x/501 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/496 (field_int 4 lexbuf/496)
                       (+ (field_int 5 lexbuf/496) -8)))
                  (makeblock 0 (*,int) x/501 0))
               case int 2:
                (let
                  (x/502 =
                     (apply (field_imm 15 (global Stdlib__Lexing!))
                       lexbuf/496 (field_int 4 lexbuf/496)
                       (field_int 5 lexbuf/496)))
                  (makeblock 0 (*,int) x/502 0)))))))
    (seq
      (setfield_ptr(root-init) 1 (global Dune__exe__ChopInlined!) chop/421)
      (setfield_ptr(root-init) 2 (global Dune__exe__ChopInlined!)
        __ocaml_lex_chop_rec/422)))
  0)

[
  structure_item (src/parserAux.ml[14,999+0]..[14,999+14])
    Pstr_open Fresh
    module_expr (src/parserAux.ml[14,999+5]..[14,999+14])
      Pmod_ident "Positions" (src/parserAux.ml[14,999+5]..[14,999+14])
  structure_item (src/parserAux.ml[15,1014+0]..[15,1014+12])
    Pstr_open Fresh
    module_expr (src/parserAux.ml[15,1014+5]..[15,1014+12])
      Pmod_ident "Stretch" (src/parserAux.ml[15,1014+5]..[15,1014+12])
  structure_item (src/parserAux.ml[16,1027+0]..[16,1027+11])
    Pstr_open Fresh
    module_expr (src/parserAux.ml[16,1027+5]..[16,1027+11])
      Pmod_ident "Syntax" (src/parserAux.ml[16,1027+5]..[16,1027+11])
  structure_item (src/parserAux.ml[18,1040+0]..[22,1122+12])
    Pstr_type Rec
    [
      type_declaration "early_producer" (src/parserAux.ml[18,1040+5]..[18,1040+19]) (src/parserAux.ml[18,1040+0]..[22,1122+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[19,1062+2]..[22,1122+12])
              Ptyp_tuple
              [
                core_type (src/parserAux.ml[19,1062+2]..[19,1062+13])
                  Ptyp_constr "Positions.t" (src/parserAux.ml[19,1062+2]..[19,1062+13])
                  []
                core_type (src/parserAux.ml[20,1078+2]..[20,1078+27])
                  Ptyp_constr "option" (src/parserAux.ml[20,1078+21]..[20,1078+27])
                  [
                    core_type (src/parserAux.ml[20,1078+2]..[20,1078+20])
                      Ptyp_constr "located" (src/parserAux.ml[20,1078+13]..[20,1078+20])
                      [
                        core_type (src/parserAux.ml[20,1078+2]..[20,1078+12])
                          Ptyp_constr "identifier" (src/parserAux.ml[20,1078+2]..[20,1078+12])
                          []
                      ]
                  ]
                core_type (src/parserAux.ml[21,1108+2]..[21,1108+11])
                  Ptyp_constr "parameter" (src/parserAux.ml[21,1108+2]..[21,1108+11])
                  []
                core_type (src/parserAux.ml[22,1122+2]..[22,1122+12])
                  Ptyp_constr "attributes" (src/parserAux.ml[22,1122+2]..[22,1122+12])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[24,1136+0]..[25,1159+21])
    Pstr_type Rec
    [
      type_declaration "early_producers" (src/parserAux.ml[24,1136+5]..[24,1136+20]) (src/parserAux.ml[24,1136+0]..[25,1159+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[25,1159+2]..[25,1159+21])
              Ptyp_constr "list" (src/parserAux.ml[25,1159+17]..[25,1159+21])
              [
                core_type (src/parserAux.ml[25,1159+2]..[25,1159+16])
                  Ptyp_constr "early_producer" (src/parserAux.ml[25,1159+2]..[25,1159+16])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[27,1182+0]..[31,1306+13])
    Pstr_type Rec
    [
      type_declaration "early_production" (src/parserAux.ml[27,1182+5]..[27,1182+21]) (src/parserAux.ml[27,1182+0]..[31,1306+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[28,1206+2]..[31,1306+13])
              Ptyp_tuple
              [
                core_type (src/parserAux.ml[28,1206+2]..[28,1206+17])
                  Ptyp_constr "early_producers" (src/parserAux.ml[28,1206+2]..[28,1206+17])
                  []
                core_type (src/parserAux.ml[29,1226+2]..[29,1226+23])
                  Ptyp_constr "option" (src/parserAux.ml[29,1226+17]..[29,1226+23])
                  [
                    core_type (src/parserAux.ml[29,1226+2]..[29,1226+16])
                      Ptyp_constr "located" (src/parserAux.ml[29,1226+9]..[29,1226+16])
                      [
                        core_type (src/parserAux.ml[29,1226+2]..[29,1226+8])
                          Ptyp_constr "string" (src/parserAux.ml[29,1226+2]..[29,1226+8])
                          []
                      ]
                  ]
                core_type (src/parserAux.ml[30,1278+2]..[30,1278+25])
                  Ptyp_constr "branch_production_level" (src/parserAux.ml[30,1278+2]..[30,1278+25])
                  []
                core_type (src/parserAux.ml[31,1306+2]..[31,1306+13])
                  Ptyp_constr "Positions.t" (src/parserAux.ml[31,1306+2]..[31,1306+13])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[33,1321+0]..[34,1346+23])
    Pstr_type Rec
    [
      type_declaration "early_productions" (src/parserAux.ml[33,1321+5]..[33,1321+22]) (src/parserAux.ml[33,1321+0]..[34,1346+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[34,1346+2]..[34,1346+23])
              Ptyp_constr "list" (src/parserAux.ml[34,1346+19]..[34,1346+23])
              [
                core_type (src/parserAux.ml[34,1346+2]..[34,1346+18])
                  Ptyp_constr "early_production" (src/parserAux.ml[34,1346+2]..[34,1346+18])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[36,1371+0]..[40,1451+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[36,1371+4]..[36,1371+24])
          Ppat_var "new_precedence_level" (src/parserAux.ml[36,1371+4]..[36,1371+24])
        expression (src/parserAux.ml[37,1398+2]..[40,1451+65])
          Pexp_let Nonrec
          [
            <def>
              pattern (src/parserAux.ml[37,1398+6]..[37,1398+7])
                Ppat_var "c" (src/parserAux.ml[37,1398+6]..[37,1398+7])
              expression (src/parserAux.ml[37,1398+10]..[37,1398+15])
                Pexp_apply
                expression (src/parserAux.ml[37,1398+10]..[37,1398+13])
                  Pexp_ident "ref" (src/parserAux.ml[37,1398+10]..[37,1398+13])
                [
                  <arg>
                  Nolabel
                    expression (src/parserAux.ml[37,1398+14]..[37,1398+15])
                      Pexp_constant PConst_int (0,None)
                ]
          ]
          expression (src/parserAux.ml[38,1417+2]..[40,1451+65])
            Pexp_fun
            Nolabel
            None
            pattern (src/parserAux.ml[38,1417+6]..[38,1417+18])
              Ppat_tuple
              [
                pattern (src/parserAux.ml[38,1417+7]..[38,1417+11])
                  Ppat_var "pos1" (src/parserAux.ml[38,1417+7]..[38,1417+11])
                pattern (src/parserAux.ml[38,1417+13]..[38,1417+17])
                  Ppat_var "pos2" (src/parserAux.ml[38,1417+13]..[38,1417+17])
              ]
            expression (src/parserAux.ml[39,1439+4]..[40,1451+65])
              Pexp_sequence
              expression (src/parserAux.ml[39,1439+4]..[39,1439+10])
                Pexp_apply
                expression (src/parserAux.ml[39,1439+4]..[39,1439+8])
                  Pexp_ident "incr" (src/parserAux.ml[39,1439+4]..[39,1439+8])
                [
                  <arg>
                  Nolabel
                    expression (src/parserAux.ml[39,1439+9]..[39,1439+10])
                      Pexp_ident "c" (src/parserAux.ml[39,1439+9]..[39,1439+10])
                ]
              expression (src/parserAux.ml[40,1451+4]..[40,1451+65])
                Pexp_construct "PrecedenceLevel" (src/parserAux.ml[40,1451+4]..[40,1451+19])
                Some
                  expression (src/parserAux.ml[40,1451+20]..[40,1451+65])
                    Pexp_tuple
                    [
                      expression (src/parserAux.ml[40,1451+21]..[40,1451+48])
                        Pexp_apply
                        expression (src/parserAux.ml[40,1451+21]..[40,1451+45])
                          Pexp_ident "InputFile.get_input_file" (src/parserAux.ml[40,1451+21]..[40,1451+45])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[40,1451+46]..[40,1451+48])
                              Pexp_construct "()" (src/parserAux.ml[40,1451+46]..[40,1451+48])
                              None
                        ]
                      expression (src/parserAux.ml[40,1451+50]..[40,1451+52])
                        Pexp_apply
                        expression (src/parserAux.ml[40,1451+50]..[40,1451+51])
                          Pexp_ident "!" (src/parserAux.ml[40,1451+50]..[40,1451+51])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[40,1451+51]..[40,1451+52])
                              Pexp_ident "c" (src/parserAux.ml[40,1451+51]..[40,1451+52])
                        ]
                      expression (src/parserAux.ml[40,1451+54]..[40,1451+58])
                        Pexp_ident "pos1" (src/parserAux.ml[40,1451+54]..[40,1451+58])
                      expression (src/parserAux.ml[40,1451+60]..[40,1451+64])
                        Pexp_ident "pos2" (src/parserAux.ml[40,1451+60]..[40,1451+64])
                    ]
    ]
  structure_item (src/parserAux.ml[42,1518+0]..[46,1588+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[42,1518+4]..[42,1518+24])
          Ppat_var "new_production_level" (src/parserAux.ml[42,1518+4]..[42,1518+24])
        expression (src/parserAux.ml[43,1545+2]..[46,1588+53])
          Pexp_let Nonrec
          [
            <def>
              pattern (src/parserAux.ml[43,1545+6]..[43,1545+7])
                Ppat_var "c" (src/parserAux.ml[43,1545+6]..[43,1545+7])
              expression (src/parserAux.ml[43,1545+10]..[43,1545+15])
                Pexp_apply
                expression (src/parserAux.ml[43,1545+10]..[43,1545+13])
                  Pexp_ident "ref" (src/parserAux.ml[43,1545+10]..[43,1545+13])
                [
                  <arg>
                  Nolabel
                    expression (src/parserAux.ml[43,1545+14]..[43,1545+15])
                      Pexp_constant PConst_int (0,None)
                ]
          ]
          expression (src/parserAux.ml[44,1564+2]..[46,1588+53])
            Pexp_fun
            Nolabel
            None
            pattern (src/parserAux.ml[44,1564+6]..[44,1564+8])
              Ppat_construct "()" (src/parserAux.ml[44,1564+6]..[44,1564+8])
              None
            expression (src/parserAux.ml[45,1576+4]..[46,1588+53])
              Pexp_sequence
              expression (src/parserAux.ml[45,1576+4]..[45,1576+10])
                Pexp_apply
                expression (src/parserAux.ml[45,1576+4]..[45,1576+8])
                  Pexp_ident "incr" (src/parserAux.ml[45,1576+4]..[45,1576+8])
                [
                  <arg>
                  Nolabel
                    expression (src/parserAux.ml[45,1576+9]..[45,1576+10])
                      Pexp_ident "c" (src/parserAux.ml[45,1576+9]..[45,1576+10])
                ]
              expression (src/parserAux.ml[46,1588+4]..[46,1588+53])
                Pexp_construct "ProductionLevel" (src/parserAux.ml[46,1588+4]..[46,1588+19])
                Some
                  expression (src/parserAux.ml[46,1588+20]..[46,1588+53])
                    Pexp_tuple
                    [
                      expression (src/parserAux.ml[46,1588+21]..[46,1588+48])
                        Pexp_apply
                        expression (src/parserAux.ml[46,1588+21]..[46,1588+45])
                          Pexp_ident "InputFile.get_input_file" (src/parserAux.ml[46,1588+21]..[46,1588+45])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[46,1588+46]..[46,1588+48])
                              Pexp_construct "()" (src/parserAux.ml[46,1588+46]..[46,1588+48])
                              None
                        ]
                      expression (src/parserAux.ml[46,1588+50]..[46,1588+52])
                        Pexp_apply
                        expression (src/parserAux.ml[46,1588+50]..[46,1588+51])
                          Pexp_ident "!" (src/parserAux.ml[46,1588+50]..[46,1588+51])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[46,1588+51]..[46,1588+52])
                              Pexp_ident "c" (src/parserAux.ml[46,1588+51]..[46,1588+52])
                        ]
                    ]
    ]
  structure_item (src/parserAux.ml[48,1643+0]..[49,1675+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[48,1643+4]..[48,1643+29])
          Ppat_var "new_on_error_reduce_level" (src/parserAux.ml[48,1643+4]..[48,1643+29])
        expression (src/parserAux.ml[49,1675+2]..[49,1675+22])
          Pexp_ident "new_production_level" (src/parserAux.ml[49,1675+2]..[49,1675+22])
    ]
  structure_item (src/parserAux.ml[53,1790+0]..[57,1912+4])
    Pstr_module
    "IdSet" (src/parserAux.ml[53,1790+7]..[53,1790+12])
      module_expr (src/parserAux.ml[53,1790+15]..[57,1912+4])
        Pmod_apply
        module_expr (src/parserAux.ml[53,1790+15]..[53,1790+23])
          Pmod_ident "Set.Make" (src/parserAux.ml[53,1790+15]..[53,1790+23])
        module_expr (src/parserAux.ml[53,1790+25]..[57,1912+3])
          Pmod_structure
          [
            structure_item (src/parserAux.ml[54,1822+2]..[54,1822+29])
              Pstr_type Rec
              [
                type_declaration "t" (src/parserAux.ml[54,1822+7]..[54,1822+8]) (src/parserAux.ml[54,1822+2]..[54,1822+29])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/parserAux.ml[54,1822+11]..[54,1822+29])
                        Ptyp_constr "located" (src/parserAux.ml[54,1822+22]..[54,1822+29])
                        [
                          core_type (src/parserAux.ml[54,1822+11]..[54,1822+21])
                            Ptyp_constr "identifier" (src/parserAux.ml[54,1822+11]..[54,1822+21])
                            []
                        ]
              ]
            structure_item (src/parserAux.ml[55,1852+2]..[56,1876+35])
              Pstr_value Nonrec
              [
                <def>
                  pattern (src/parserAux.ml[55,1852+6]..[55,1852+13])
                    Ppat_var "compare" (src/parserAux.ml[55,1852+6]..[55,1852+13])
                  expression (src/parserAux.ml[55,1852+14]..[56,1876+35]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/parserAux.ml[55,1852+14]..[55,1852+17])
                      Ppat_var "id1" (src/parserAux.ml[55,1852+14]..[55,1852+17])
                    expression (src/parserAux.ml[55,1852+18]..[56,1876+35]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/parserAux.ml[55,1852+18]..[55,1852+21])
                        Ppat_var "id2" (src/parserAux.ml[55,1852+18]..[55,1852+21])
                      expression (src/parserAux.ml[56,1876+4]..[56,1876+35])
                        Pexp_apply
                        expression (src/parserAux.ml[56,1876+4]..[56,1876+11])
                          Pexp_ident "compare" (src/parserAux.ml[56,1876+4]..[56,1876+11])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[56,1876+12]..[56,1876+23])
                              Pexp_apply
                              expression (src/parserAux.ml[56,1876+13]..[56,1876+18])
                                Pexp_ident "value" (src/parserAux.ml[56,1876+13]..[56,1876+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/parserAux.ml[56,1876+19]..[56,1876+22])
                                    Pexp_ident "id1" (src/parserAux.ml[56,1876+19]..[56,1876+22])
                              ]
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[56,1876+24]..[56,1876+35])
                              Pexp_apply
                              expression (src/parserAux.ml[56,1876+25]..[56,1876+30])
                                Pexp_ident "value" (src/parserAux.ml[56,1876+25]..[56,1876+30])
                              [
                                <arg>
                                Nolabel
                                  expression (src/parserAux.ml[56,1876+31]..[56,1876+34])
                                    Pexp_ident "id2" (src/parserAux.ml[56,1876+31]..[56,1876+34])
                              ]
                        ]
              ]
          ]
  structure_item (src/parserAux.ml[59,1918+0]..[60,1964+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[59,1918+4]..[59,1918+23])
          Ppat_var "defined_identifiers" (src/parserAux.ml[59,1918+4]..[59,1918+23])
        expression (src/parserAux.ml[59,1918+24]..[60,1964+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[59,1918+24]..[59,1918+38])
            Ppat_tuple
            [
              pattern (src/parserAux.ml[59,1918+25]..[59,1918+26])
                Ppat_any
              pattern (src/parserAux.ml[59,1918+28]..[59,1918+31])
                Ppat_var "ido" (src/parserAux.ml[59,1918+28]..[59,1918+31])
              pattern (src/parserAux.ml[59,1918+33]..[59,1918+34])
                Ppat_any
              pattern (src/parserAux.ml[59,1918+36]..[59,1918+37])
                Ppat_any
            ]
          expression (src/parserAux.ml[59,1918+39]..[60,1964+32]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/parserAux.ml[59,1918+39]..[59,1918+43])
              Ppat_var "accu" (src/parserAux.ml[59,1918+39]..[59,1918+43])
            expression (src/parserAux.ml[60,1964+2]..[60,1964+32])
              Pexp_apply
              expression (src/parserAux.ml[60,1964+2]..[60,1964+13])
                Pexp_ident "Option.fold" (src/parserAux.ml[60,1964+2]..[60,1964+13])
              [
                <arg>
                Nolabel
                  expression (src/parserAux.ml[60,1964+14]..[60,1964+23])
                    Pexp_ident "IdSet.add" (src/parserAux.ml[60,1964+14]..[60,1964+23])
                <arg>
                Nolabel
                  expression (src/parserAux.ml[60,1964+24]..[60,1964+27])
                    Pexp_ident "ido" (src/parserAux.ml[60,1964+24]..[60,1964+27])
                <arg>
                Nolabel
                  expression (src/parserAux.ml[60,1964+28]..[60,1964+32])
                    Pexp_ident "accu" (src/parserAux.ml[60,1964+28]..[60,1964+32])
              ]
    ]
  structure_item (src/parserAux.ml[62,1998+0]..[63,2054+59])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[62,1998+4]..[62,1998+23])
          Ppat_var "defined_identifiers" (src/parserAux.ml[62,1998+4]..[62,1998+23])
        expression (src/parserAux.ml[62,1998+24]..[63,2054+59]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[62,1998+24]..[62,1998+53])
            Ppat_constraint
            pattern (src/parserAux.ml[62,1998+25]..[62,1998+34])
              Ppat_var "producers" (src/parserAux.ml[62,1998+25]..[62,1998+34])
            core_type (src/parserAux.ml[62,1998+37]..[62,1998+52])
              Ptyp_constr "early_producers" (src/parserAux.ml[62,1998+37]..[62,1998+52])
              []
          expression (src/parserAux.ml[63,2054+2]..[63,2054+59])
            Pexp_apply
            expression (src/parserAux.ml[63,2054+2]..[63,2054+17])
              Pexp_ident "List.fold_right" (src/parserAux.ml[63,2054+2]..[63,2054+17])
            [
              <arg>
              Nolabel
                expression (src/parserAux.ml[63,2054+18]..[63,2054+37])
                  Pexp_ident "defined_identifiers" (src/parserAux.ml[63,2054+18]..[63,2054+37])
              <arg>
              Nolabel
                expression (src/parserAux.ml[63,2054+38]..[63,2054+47])
                  Pexp_ident "producers" (src/parserAux.ml[63,2054+38]..[63,2054+47])
              <arg>
              Nolabel
                expression (src/parserAux.ml[63,2054+48]..[63,2054+59])
                  Pexp_ident "IdSet.empty" (src/parserAux.ml[63,2054+48]..[63,2054+59])
            ]
    ]
  structure_item (src/parserAux.ml[65,2115+0]..[87,2993+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[65,2115+4]..[65,2115+26])
          Ppat_var "check_production_group" (src/parserAux.ml[65,2115+4]..[65,2115+26])
        expression (src/parserAux.ml[65,2115+27]..[87,2993+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[65,2115+27]..[65,2115+65])
            Ppat_constraint
            pattern (src/parserAux.ml[65,2115+28]..[65,2115+44])
              Ppat_var "right_hand_sides" (src/parserAux.ml[65,2115+28]..[65,2115+44])
            core_type (src/parserAux.ml[65,2115+47]..[65,2115+64])
              Ptyp_constr "early_productions" (src/parserAux.ml[65,2115+47]..[65,2115+64])
              []
          expression (src/parserAux.ml[66,2183+2]..[87,2993+24])
            Pexp_match
            expression (src/parserAux.ml[66,2183+8]..[66,2183+24])
              Pexp_ident "right_hand_sides" (src/parserAux.ml[66,2183+8]..[66,2183+24])
            [
              <case>
                pattern (src/parserAux.ml[67,2213+4]..[67,2213+6])
                  Ppat_construct "[]" (src/parserAux.ml[67,2213+4]..[67,2213+6])
                  None
                expression (src/parserAux.ml[69,2271+6]..[69,2271+18])
                  Pexp_assert
                  expression (src/parserAux.ml[69,2271+13]..[69,2271+18])
                    Pexp_construct "false" (src/parserAux.ml[69,2271+13]..[69,2271+18])
                    None
              <case>
                pattern (src/parserAux.ml[70,2290+4]..[70,2290+44])
                  Ppat_construct "::" (src/parserAux.ml[70,2290+25]..[70,2290+27])
                  Some
                    []
                    pattern (src/parserAux.ml[70,2290+4]..[70,2290+44]) ghost
                      Ppat_tuple
                      [
                        pattern (src/parserAux.ml[70,2290+4]..[70,2290+24])
                          Ppat_tuple
                          [
                            pattern (src/parserAux.ml[70,2290+5]..[70,2290+14])
                              Ppat_var "producers" (src/parserAux.ml[70,2290+5]..[70,2290+14])
                            pattern (src/parserAux.ml[70,2290+16]..[70,2290+17])
                              Ppat_any
                            pattern (src/parserAux.ml[70,2290+19]..[70,2290+20])
                              Ppat_any
                            pattern (src/parserAux.ml[70,2290+22]..[70,2290+23])
                              Ppat_any
                          ]
                        pattern (src/parserAux.ml[70,2290+28]..[70,2290+44])
                          Ppat_var "right_hand_sides" (src/parserAux.ml[70,2290+28]..[70,2290+44])
                      ]
                expression (src/parserAux.ml[71,2338+6]..[87,2993+24])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/parserAux.ml[71,2338+10]..[71,2338+13])
                        Ppat_var "ids" (src/parserAux.ml[71,2338+10]..[71,2338+13])
                      expression (src/parserAux.ml[71,2338+16]..[71,2338+45])
                        Pexp_apply
                        expression (src/parserAux.ml[71,2338+16]..[71,2338+35])
                          Pexp_ident "defined_identifiers" (src/parserAux.ml[71,2338+16]..[71,2338+35])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[71,2338+36]..[71,2338+45])
                              Pexp_ident "producers" (src/parserAux.ml[71,2338+36]..[71,2338+45])
                        ]
                  ]
                  expression (src/parserAux.ml[72,2387+6]..[87,2993+24])
                    Pexp_apply
                    expression (src/parserAux.ml[72,2387+6]..[72,2387+15])
                      Pexp_ident "List.iter" (src/parserAux.ml[72,2387+6]..[72,2387+15])
                    [
                      <arg>
                      Nolabel
                        expression (src/parserAux.ml[72,2387+16]..[87,2993+7])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/parserAux.ml[72,2387+21]..[72,2387+41])
                            Ppat_tuple
                            [
                              pattern (src/parserAux.ml[72,2387+22]..[72,2387+31])
                                Ppat_var "producers" (src/parserAux.ml[72,2387+22]..[72,2387+31])
                              pattern (src/parserAux.ml[72,2387+33]..[72,2387+34])
                                Ppat_any
                              pattern (src/parserAux.ml[72,2387+36]..[72,2387+37])
                                Ppat_any
                              pattern (src/parserAux.ml[72,2387+39]..[72,2387+40])
                                Ppat_any
                            ]
                          expression (src/parserAux.ml[73,2432+8]..[86,2980+12])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/parserAux.ml[73,2432+12]..[73,2432+16])
                                  Ppat_var "ids'" (src/parserAux.ml[73,2432+12]..[73,2432+16])
                                expression (src/parserAux.ml[73,2432+19]..[73,2432+48])
                                  Pexp_apply
                                  expression (src/parserAux.ml[73,2432+19]..[73,2432+38])
                                    Pexp_ident "defined_identifiers" (src/parserAux.ml[73,2432+19]..[73,2432+38])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/parserAux.ml[73,2432+39]..[73,2432+48])
                                        Pexp_ident "producers" (src/parserAux.ml[73,2432+39]..[73,2432+48])
                                  ]
                            ]
                            expression (src/parserAux.ml[74,2484+8]..[86,2980+12])
                              Pexp_try
                              expression (src/parserAux.ml[75,2496+10]..[84,2921+32])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/parserAux.ml[75,2496+14]..[75,2496+16])
                                      Ppat_var "id" (src/parserAux.ml[75,2496+14]..[75,2496+16])
                                    expression (src/parserAux.ml[76,2515+12]..[78,2607+54])
                                      Pexp_apply
                                      expression (src/parserAux.ml[76,2515+12]..[76,2515+24])
                                        Pexp_ident "IdSet.choose" (src/parserAux.ml[76,2515+12]..[76,2515+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/parserAux.ml[76,2515+25]..[78,2607+54])
                                            Pexp_apply
                                            expression (src/parserAux.ml[76,2515+26]..[76,2515+37])
                                              Pexp_ident "IdSet.union" (src/parserAux.ml[76,2515+26]..[76,2515+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/parserAux.ml[77,2553+32]..[77,2553+53])
                                                  Pexp_apply
                                                  expression (src/parserAux.ml[77,2553+33]..[77,2553+43])
                                                    Pexp_ident "IdSet.diff" (src/parserAux.ml[77,2553+33]..[77,2553+43])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/parserAux.ml[77,2553+44]..[77,2553+47])
                                                        Pexp_ident "ids" (src/parserAux.ml[77,2553+44]..[77,2553+47])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/parserAux.ml[77,2553+48]..[77,2553+52])
                                                        Pexp_ident "ids'" (src/parserAux.ml[77,2553+48]..[77,2553+52])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/parserAux.ml[78,2607+32]..[78,2607+53])
                                                  Pexp_apply
                                                  expression (src/parserAux.ml[78,2607+33]..[78,2607+43])
                                                    Pexp_ident "IdSet.diff" (src/parserAux.ml[78,2607+33]..[78,2607+43])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/parserAux.ml[78,2607+44]..[78,2607+48])
                                                        Pexp_ident "ids'" (src/parserAux.ml[78,2607+44]..[78,2607+48])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/parserAux.ml[78,2607+49]..[78,2607+52])
                                                        Pexp_ident "ids" (src/parserAux.ml[78,2607+49]..[78,2607+52])
                                                  ]
                                            ]
                                      ]
                                ]
                                expression (src/parserAux.ml[80,2675+10]..[84,2921+32])
                                  Pexp_apply
                                  expression (src/parserAux.ml[80,2675+10]..[80,2675+21])
                                    Pexp_ident "Error.error" (src/parserAux.ml[80,2675+10]..[80,2675+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/parserAux.ml[80,2675+22]..[80,2675+45])
                                        Pexp_construct "::" (src/parserAux.ml[80,2675+23]..[80,2675+45]) ghost
                                        Some
                                          expression (src/parserAux.ml[80,2675+23]..[80,2675+45]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/parserAux.ml[80,2675+23]..[80,2675+44])
                                                Pexp_apply
                                                expression (src/parserAux.ml[80,2675+23]..[80,2675+41])
                                                  Pexp_ident "Positions.position" (src/parserAux.ml[80,2675+23]..[80,2675+41])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/parserAux.ml[80,2675+42]..[80,2675+44])
                                                      Pexp_ident "id" (src/parserAux.ml[80,2675+42]..[80,2675+44])
                                                ]
                                              expression (src/parserAux.ml[80,2675+44]..[80,2675+45]) ghost
                                                Pexp_construct "[]" (src/parserAux.ml[80,2675+44]..[80,2675+45]) ghost
                                                None
                                            ]
                                    <arg>
                                    Nolabel
                                      expression (src/parserAux.ml[81,2721+12]..[83,2864+56])
                                        Pexp_constant PConst_string("two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"%s\" is defined\nin one production, but not in all of them.",(src/parserAux.ml[81,2721+13]..[83,2864+55]),None)
                                    <arg>
                                    Nolabel
                                      expression (src/parserAux.ml[84,2921+12]..[84,2921+32])
                                        Pexp_apply
                                        expression (src/parserAux.ml[84,2921+13]..[84,2921+28])
                                          Pexp_ident "Positions.value" (src/parserAux.ml[84,2921+13]..[84,2921+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/parserAux.ml[84,2921+29]..[84,2921+31])
                                              Pexp_ident "id" (src/parserAux.ml[84,2921+29]..[84,2921+31])
                                        ]
                                  ]
                              [
                                <case>
                                  pattern (src/parserAux.ml[85,2954+13]..[85,2954+22])
                                    Ppat_construct "Not_found" (src/parserAux.ml[85,2954+13]..[85,2954+22])
                                    None
                                  expression (src/parserAux.ml[86,2980+10]..[86,2980+12])
                                    Pexp_construct "()" (src/parserAux.ml[86,2980+10]..[86,2980+12])
                                    None
                              ]
                      <arg>
                      Nolabel
                        expression (src/parserAux.ml[87,2993+8]..[87,2993+24])
                          Pexp_ident "right_hand_sides" (src/parserAux.ml[87,2993+8]..[87,2993+24])
                    ]
            ]
    ]
  structure_item (src/parserAux.ml[91,3114+0]..[97,3318+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[91,3114+4]..[91,3114+22])
          Ppat_var "normalize_producer" (src/parserAux.ml[91,3114+4]..[91,3114+22])
        expression (src/parserAux.ml[91,3114+23]..[97,3318+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[91,3114+23]..[91,3114+24])
            Ppat_var "i" (src/parserAux.ml[91,3114+23]..[91,3114+24])
          expression (src/parserAux.ml[91,3114+25]..[97,3318+24]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/parserAux.ml[91,3114+25]..[91,3114+64])
              Ppat_tuple
              [
                pattern (src/parserAux.ml[91,3114+26]..[91,3114+29])
                  Ppat_var "pos" (src/parserAux.ml[91,3114+26]..[91,3114+29])
                pattern (src/parserAux.ml[91,3114+31]..[91,3114+45])
                  Ppat_var "opt_identifier" (src/parserAux.ml[91,3114+31]..[91,3114+45])
                pattern (src/parserAux.ml[91,3114+47]..[91,3114+56])
                  Ppat_var "parameter" (src/parserAux.ml[91,3114+47]..[91,3114+56])
                pattern (src/parserAux.ml[91,3114+58]..[91,3114+63])
                  Ppat_var "attrs" (src/parserAux.ml[91,3114+58]..[91,3114+63])
              ]
            expression (src/parserAux.ml[92,3181+2]..[97,3318+24])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/parserAux.ml[92,3181+6]..[92,3181+8])
                    Ppat_var "id" (src/parserAux.ml[92,3181+6]..[92,3181+8])
                  expression (src/parserAux.ml[93,3192+4]..[95,3244+68])
                    Pexp_match
                    expression (src/parserAux.ml[93,3192+10]..[93,3192+24])
                      Pexp_ident "opt_identifier" (src/parserAux.ml[93,3192+10]..[93,3192+24])
                    [
                      <case>
                        pattern (src/parserAux.ml[94,3222+8]..[94,3222+15])
                          Ppat_construct "Some" (src/parserAux.ml[94,3222+8]..[94,3222+12])
                          Some
                            []
                            pattern (src/parserAux.ml[94,3222+13]..[94,3222+15])
                              Ppat_var "id" (src/parserAux.ml[94,3222+13]..[94,3222+15])
                        expression (src/parserAux.ml[94,3222+19]..[94,3222+21])
                          Pexp_ident "id" (src/parserAux.ml[94,3222+19]..[94,3222+21])
                      <case>
                        pattern (src/parserAux.ml[95,3244+8]..[95,3244+12])
                          Ppat_construct "None" (src/parserAux.ml[95,3244+8]..[95,3244+12])
                          None
                        expression (src/parserAux.ml[95,3244+16]..[95,3244+68])
                          Pexp_apply
                          expression (src/parserAux.ml[95,3244+16]..[95,3244+34])
                            Pexp_ident "Positions.with_pos" (src/parserAux.ml[95,3244+16]..[95,3244+34])
                          [
                            <arg>
                            Nolabel
                              expression (src/parserAux.ml[95,3244+35]..[95,3244+38])
                                Pexp_ident "pos" (src/parserAux.ml[95,3244+35]..[95,3244+38])
                            <arg>
                            Nolabel
                              expression (src/parserAux.ml[95,3244+39]..[95,3244+68])
                                Pexp_apply
                                expression (src/parserAux.ml[95,3244+44]..[95,3244+45])
                                  Pexp_ident "^" (src/parserAux.ml[95,3244+44]..[95,3244+45])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/parserAux.ml[95,3244+40]..[95,3244+43])
                                      Pexp_constant PConst_string("_",(src/parserAux.ml[95,3244+41]..[95,3244+42]),None)
                                  <arg>
                                  Nolabel
                                    expression (src/parserAux.ml[95,3244+46]..[95,3244+67])
                                      Pexp_apply
                                      expression (src/parserAux.ml[95,3244+46]..[95,3244+59])
                                        Pexp_ident "string_of_int" (src/parserAux.ml[95,3244+46]..[95,3244+59])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/parserAux.ml[95,3244+60]..[95,3244+67])
                                            Pexp_apply
                                            expression (src/parserAux.ml[95,3244+63]..[95,3244+64])
                                              Pexp_ident "+" (src/parserAux.ml[95,3244+63]..[95,3244+64])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/parserAux.ml[95,3244+61]..[95,3244+62])
                                                  Pexp_ident "i" (src/parserAux.ml[95,3244+61]..[95,3244+62])
                                              <arg>
                                              Nolabel
                                                expression (src/parserAux.ml[95,3244+65]..[95,3244+66])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                      ]
                                ]
                          ]
                    ]
              ]
              expression (src/parserAux.ml[97,3318+2]..[97,3318+24])
                Pexp_tuple
                [
                  expression (src/parserAux.ml[97,3318+3]..[97,3318+5])
                    Pexp_ident "id" (src/parserAux.ml[97,3318+3]..[97,3318+5])
                  expression (src/parserAux.ml[97,3318+7]..[97,3318+16])
                    Pexp_ident "parameter" (src/parserAux.ml[97,3318+7]..[97,3318+16])
                  expression (src/parserAux.ml[97,3318+18]..[97,3318+23])
                    Pexp_ident "attrs" (src/parserAux.ml[97,3318+18]..[97,3318+23])
                ]
    ]
  structure_item (src/parserAux.ml[99,3344+0]..[100,3416+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[99,3344+4]..[99,3344+23])
          Ppat_var "normalize_producers" (src/parserAux.ml[99,3344+4]..[99,3344+23])
        expression (src/parserAux.ml[99,3344+24]..[100,3416+40]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[99,3344+24]..[99,3344+53])
            Ppat_constraint
            pattern (src/parserAux.ml[99,3344+25]..[99,3344+34])
              Ppat_var "producers" (src/parserAux.ml[99,3344+25]..[99,3344+34])
            core_type (src/parserAux.ml[99,3344+37]..[99,3344+52])
              Ptyp_constr "early_producers" (src/parserAux.ml[99,3344+37]..[99,3344+52])
              []
          expression (src/parserAux.ml[99,3344+54]..[100,3416+40])
            Pexp_constraint
            expression (src/parserAux.ml[100,3416+2]..[100,3416+40])
              Pexp_apply
              expression (src/parserAux.ml[100,3416+2]..[100,3416+11])
                Pexp_ident "List.mapi" (src/parserAux.ml[100,3416+2]..[100,3416+11])
              [
                <arg>
                Nolabel
                  expression (src/parserAux.ml[100,3416+12]..[100,3416+30])
                    Pexp_ident "normalize_producer" (src/parserAux.ml[100,3416+12]..[100,3416+30])
                <arg>
                Nolabel
                  expression (src/parserAux.ml[100,3416+31]..[100,3416+40])
                    Pexp_ident "producers" (src/parserAux.ml[100,3416+31]..[100,3416+40])
              ]
            core_type (src/parserAux.ml[99,3344+56]..[99,3344+69])
              Ptyp_constr "list" (src/parserAux.ml[99,3344+65]..[99,3344+69])
              [
                core_type (src/parserAux.ml[99,3344+56]..[99,3344+64])
                  Ptyp_constr "producer" (src/parserAux.ml[99,3344+56]..[99,3344+64])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[102,3458+0]..[109,3646+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[102,3458+4]..[102,3458+12])
          Ppat_var "override" (src/parserAux.ml[102,3458+4]..[102,3458+12])
        expression (src/parserAux.ml[102,3458+13]..[109,3646+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[102,3458+13]..[102,3458+16])
            Ppat_var "pos" (src/parserAux.ml[102,3458+13]..[102,3458+16])
          expression (src/parserAux.ml[102,3458+17]..[109,3646+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/parserAux.ml[102,3458+17]..[102,3458+19])
              Ppat_var "o1" (src/parserAux.ml[102,3458+17]..[102,3458+19])
            expression (src/parserAux.ml[102,3458+20]..[109,3646+8]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/parserAux.ml[102,3458+20]..[102,3458+22])
                Ppat_var "o2" (src/parserAux.ml[102,3458+20]..[102,3458+22])
              expression (src/parserAux.ml[103,3483+2]..[109,3646+8])
                Pexp_match
                expression (src/parserAux.ml[103,3483+8]..[103,3483+14])
                  Pexp_tuple
                  [
                    expression (src/parserAux.ml[103,3483+8]..[103,3483+10])
                      Pexp_ident "o1" (src/parserAux.ml[103,3483+8]..[103,3483+10])
                    expression (src/parserAux.ml[103,3483+12]..[103,3483+14])
                      Pexp_ident "o2" (src/parserAux.ml[103,3483+12]..[103,3483+14])
                  ]
                [
                  <case>
                    pattern (src/parserAux.ml[104,3503+4]..[104,3503+18])
                      Ppat_tuple
                      [
                        pattern (src/parserAux.ml[104,3503+4]..[104,3503+10])
                          Ppat_construct "Some" (src/parserAux.ml[104,3503+4]..[104,3503+8])
                          Some
                            []
                            pattern (src/parserAux.ml[104,3503+9]..[104,3503+10])
                              Ppat_any
                        pattern (src/parserAux.ml[104,3503+12]..[104,3503+18])
                          Ppat_construct "Some" (src/parserAux.ml[104,3503+12]..[104,3503+16])
                          Some
                            []
                            pattern (src/parserAux.ml[104,3503+17]..[104,3503+18])
                              Ppat_any
                      ]
                    expression (src/parserAux.ml[105,3525+6]..[105,3525+76])
                      Pexp_apply
                      expression (src/parserAux.ml[105,3525+6]..[105,3525+17])
                        Pexp_ident "Error.error" (src/parserAux.ml[105,3525+6]..[105,3525+17])
                      [
                        <arg>
                        Nolabel
                          expression (src/parserAux.ml[105,3525+18]..[105,3525+25])
                            Pexp_construct "::" (src/parserAux.ml[105,3525+20]..[105,3525+25]) ghost
                            Some
                              expression (src/parserAux.ml[105,3525+20]..[105,3525+25]) ghost
                                Pexp_tuple
                                [
                                  expression (src/parserAux.ml[105,3525+20]..[105,3525+23])
                                    Pexp_ident "pos" (src/parserAux.ml[105,3525+20]..[105,3525+23])
                                  expression (src/parserAux.ml[105,3525+24]..[105,3525+25]) ghost
                                    Pexp_construct "[]" (src/parserAux.ml[105,3525+24]..[105,3525+25]) ghost
                                    None
                                ]
                        <arg>
                        Nolabel
                          expression (src/parserAux.ml[105,3525+26]..[105,3525+76])
                            Pexp_constant PConst_string("this production carries two %%prec declarations.",(src/parserAux.ml[105,3525+27]..[105,3525+75]),None)
                      ]
                  <case>
                    pattern (src/parserAux.ml[106,3602+4]..[106,3602+16])
                      Ppat_tuple
                      [
                        pattern (src/parserAux.ml[106,3602+4]..[106,3602+8])
                          Ppat_construct "None" (src/parserAux.ml[106,3602+4]..[106,3602+8])
                          None
                        pattern (src/parserAux.ml[106,3602+10]..[106,3602+16])
                          Ppat_construct "Some" (src/parserAux.ml[106,3602+10]..[106,3602+14])
                          Some
                            []
                            pattern (src/parserAux.ml[106,3602+15]..[106,3602+16])
                              Ppat_any
                      ]
                    expression (src/parserAux.ml[107,3622+6]..[107,3622+8])
                      Pexp_ident "o2" (src/parserAux.ml[107,3622+6]..[107,3622+8])
                  <case>
                    pattern (src/parserAux.ml[108,3631+4]..[108,3631+11])
                      Ppat_tuple
                      [
                        pattern (src/parserAux.ml[108,3631+4]..[108,3631+5])
                          Ppat_any
                        pattern (src/parserAux.ml[108,3631+7]..[108,3631+11])
                          Ppat_construct "None" (src/parserAux.ml[108,3631+7]..[108,3631+11])
                          None
                      ]
                    expression (src/parserAux.ml[109,3646+6]..[109,3646+8])
                      Pexp_ident "o1" (src/parserAux.ml[109,3646+6]..[109,3646+8])
                ]
    ]
  structure_item (src/parserAux.ml[116,3941+0]..[119,4073+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[116,3941+4]..[116,3941+18])
          Ppat_var "producer_names" (src/parserAux.ml[116,3941+4]..[116,3941+18])
        expression (src/parserAux.ml[116,3941+19]..[119,4073+18]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[116,3941+19]..[116,3941+48])
            Ppat_constraint
            pattern (src/parserAux.ml[116,3941+20]..[116,3941+29])
              Ppat_var "producers" (src/parserAux.ml[116,3941+20]..[116,3941+29])
            core_type (src/parserAux.ml[116,3941+32]..[116,3941+47])
              Ptyp_constr "early_producers" (src/parserAux.ml[116,3941+32]..[116,3941+47])
              []
          expression (src/parserAux.ml[117,3992+2]..[119,4073+18])
            Pexp_apply
            expression (src/parserAux.ml[119,4073+2]..[119,4073+4])
              Pexp_ident "|>" (src/parserAux.ml[119,4073+2]..[119,4073+4])
            [
              <arg>
              Nolabel
                expression (src/parserAux.ml[117,3992+2]..[118,4004+68])
                  Pexp_apply
                  expression (src/parserAux.ml[118,4004+2]..[118,4004+4])
                    Pexp_ident "|>" (src/parserAux.ml[118,4004+2]..[118,4004+4])
                  [
                    <arg>
                    Nolabel
                      expression (src/parserAux.ml[117,3992+2]..[117,3992+11])
                        Pexp_ident "producers" (src/parserAux.ml[117,3992+2]..[117,3992+11])
                    <arg>
                    Nolabel
                      expression (src/parserAux.ml[118,4004+5]..[118,4004+68])
                        Pexp_apply
                        expression (src/parserAux.ml[118,4004+5]..[118,4004+13])
                          Pexp_ident "List.map" (src/parserAux.ml[118,4004+5]..[118,4004+13])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[118,4004+14]..[118,4004+68])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/parserAux.ml[118,4004+19]..[118,4004+33])
                                Ppat_tuple
                                [
                                  pattern (src/parserAux.ml[118,4004+20]..[118,4004+21])
                                    Ppat_any
                                  pattern (src/parserAux.ml[118,4004+23]..[118,4004+26])
                                    Ppat_var "oid" (src/parserAux.ml[118,4004+23]..[118,4004+26])
                                  pattern (src/parserAux.ml[118,4004+28]..[118,4004+29])
                                    Ppat_any
                                  pattern (src/parserAux.ml[118,4004+31]..[118,4004+32])
                                    Ppat_any
                                ]
                              expression (src/parserAux.ml[118,4004+37]..[118,4004+67])
                                Pexp_apply
                                expression (src/parserAux.ml[118,4004+37]..[118,4004+47])
                                  Pexp_ident "Option.map" (src/parserAux.ml[118,4004+37]..[118,4004+47])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/parserAux.ml[118,4004+48]..[118,4004+63])
                                      Pexp_ident "Positions.value" (src/parserAux.ml[118,4004+48]..[118,4004+63])
                                  <arg>
                                  Nolabel
                                    expression (src/parserAux.ml[118,4004+64]..[118,4004+67])
                                      Pexp_ident "oid" (src/parserAux.ml[118,4004+64]..[118,4004+67])
                                ]
                        ]
                  ]
              <arg>
              Nolabel
                expression (src/parserAux.ml[119,4073+5]..[119,4073+18])
                  Pexp_ident "Array.of_list" (src/parserAux.ml[119,4073+5]..[119,4073+18])
            ]
    ]
  structure_item (src/parserAux.ml[124,4246+0]..[133,4544+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[124,4246+4]..[124,4246+29])
          Ppat_var "validate_pointfree_action" (src/parserAux.ml[124,4246+4]..[124,4246+29])
        expression (src/parserAux.ml[124,4246+30]..[133,4544+12]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[124,4246+30]..[124,4246+46])
            Ppat_constraint
            pattern (src/parserAux.ml[124,4246+31]..[124,4246+33])
              Ppat_var "ty" (src/parserAux.ml[124,4246+31]..[124,4246+33])
            core_type (src/parserAux.ml[124,4246+36]..[124,4246+45])
              Ptyp_constr "ocamltype" (src/parserAux.ml[124,4246+36]..[124,4246+45])
              []
          expression (src/parserAux.ml[124,4246+47]..[133,4544+12])
            Pexp_constraint
            expression (src/parserAux.ml[125,4314+2]..[133,4544+12])
              Pexp_match
              expression (src/parserAux.ml[125,4314+8]..[125,4314+10])
                Pexp_ident "ty" (src/parserAux.ml[125,4314+8]..[125,4314+10])
              [
                <case>
                  pattern (src/parserAux.ml[126,4330+4]..[126,4330+14])
                    Ppat_construct "Inferred" (src/parserAux.ml[126,4330+4]..[126,4330+12])
                    Some
                      []
                      pattern (src/parserAux.ml[126,4330+13]..[126,4330+14])
                        Ppat_any
                  expression (src/parserAux.ml[127,4348+6]..[127,4348+18])
                    Pexp_assert
                    expression (src/parserAux.ml[127,4348+13]..[127,4348+18])
                      Pexp_construct "false" (src/parserAux.ml[127,4348+13]..[127,4348+18])
                      None
                <case>
                  pattern (src/parserAux.ml[128,4367+4]..[128,4367+20])
                    Ppat_construct "Declared" (src/parserAux.ml[128,4367+4]..[128,4367+12])
                    Some
                      []
                      pattern (src/parserAux.ml[128,4367+13]..[128,4367+20])
                        Ppat_var "stretch" (src/parserAux.ml[128,4367+13]..[128,4367+20])
                  expression (src/parserAux.ml[129,4391+6]..[133,4544+12])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/parserAux.ml[129,4391+10]..[129,4391+11])
                          Ppat_var "s" (src/parserAux.ml[129,4391+10]..[129,4391+11])
                        expression (src/parserAux.ml[129,4391+14]..[129,4391+41])
                          Pexp_field
                          expression (src/parserAux.ml[129,4391+14]..[129,4391+21])
                            Pexp_ident "stretch" (src/parserAux.ml[129,4391+14]..[129,4391+21])
                          "stretch_raw_content" (src/parserAux.ml[129,4391+22]..[129,4391+41])
                    ]
                    expression (src/parserAux.ml[130,4436+6]..[133,4544+12])
                      Pexp_ifthenelse
                      expression (src/parserAux.ml[130,4436+9]..[130,4436+70])
                        Pexp_apply
                        expression (src/parserAux.ml[130,4436+9]..[130,4436+47])
                          Pexp_ident "Lexpointfree.validate_pointfree_action" (src/parserAux.ml[130,4436+9]..[130,4436+47])
                        [
                          <arg>
                          Nolabel
                            expression (src/parserAux.ml[130,4436+48]..[130,4436+70])
                              Pexp_apply
                              expression (src/parserAux.ml[130,4436+49]..[130,4436+67])
                                Pexp_ident "Lexing.from_string" (src/parserAux.ml[130,4436+49]..[130,4436+67])
                              [
                                <arg>
                                Nolabel
                                  expression (src/parserAux.ml[130,4436+68]..[130,4436+69])
                                    Pexp_ident "s" (src/parserAux.ml[130,4436+68]..[130,4436+69])
                              ]
                        ]
                      expression (src/parserAux.ml[131,4512+8]..[131,4512+20])
                        Pexp_construct "Some" (src/parserAux.ml[131,4512+8]..[131,4512+12])
                        Some
                          expression (src/parserAux.ml[131,4512+13]..[131,4512+20])
                            Pexp_ident "stretch" (src/parserAux.ml[131,4512+13]..[131,4512+20])
                      Some
                        expression (src/parserAux.ml[133,4544+8]..[133,4544+12])
                          Pexp_construct "None" (src/parserAux.ml[133,4544+8]..[133,4544+12])
                          None
              ]
            core_type (src/parserAux.ml[124,4246+49]..[124,4246+65])
              Ptyp_constr "option" (src/parserAux.ml[124,4246+59]..[124,4246+65])
              [
                core_type (src/parserAux.ml[124,4246+49]..[124,4246+58])
                  Ptyp_constr "Stretch.t" (src/parserAux.ml[124,4246+49]..[124,4246+58])
                  []
              ]
    ]
  structure_item (src/parserAux.ml[141,4803+0]..[142,4864+78])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[141,4803+4]..[141,4803+26])
          Ppat_var "valid_ocaml_identifier" (src/parserAux.ml[141,4803+4]..[141,4803+26])
        expression (src/parserAux.ml[141,4803+27]..[142,4864+78]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/parserAux.ml[141,4803+27]..[141,4803+51])
            Ppat_constraint
            pattern (src/parserAux.ml[141,4803+28]..[141,4803+29])
              Ppat_var "x" (src/parserAux.ml[141,4803+28]..[141,4803+29])
            core_type (src/parserAux.ml[141,4803+32]..[141,4803+50])
              Ptyp_constr "located" (src/parserAux.ml[141,4803+43]..[141,4803+50])
              [
                core_type (src/parserAux.ml[141,4803+32]..[141,4803+42])
                  Ptyp_constr "identifier" (src/parserAux.ml[141,4803+32]..[141,4803+42])
                  []
              ]
          expression (src/parserAux.ml[141,4803+52]..[142,4864+78])
            Pexp_constraint
            expression (src/parserAux.ml[142,4864+2]..[142,4864+78])
              Pexp_apply
              expression (src/parserAux.ml[142,4864+2]..[142,4864+37])
                Pexp_ident "Lexpointfree.valid_ocaml_identifier" (src/parserAux.ml[142,4864+2]..[142,4864+37])
              [
                <arg>
                Nolabel
                  expression (src/parserAux.ml[142,4864+38]..[142,4864+78])
                    Pexp_apply
                    expression (src/parserAux.ml[142,4864+39]..[142,4864+57])
                      Pexp_ident "Lexing.from_string" (src/parserAux.ml[142,4864+39]..[142,4864+57])
                    [
                      <arg>
                      Nolabel
                        expression (src/parserAux.ml[142,4864+58]..[142,4864+77])
                          Pexp_apply
                          expression (src/parserAux.ml[142,4864+59]..[142,4864+74])
                            Pexp_ident "Positions.value" (src/parserAux.ml[142,4864+59]..[142,4864+74])
                          [
                            <arg>
                            Nolabel
                              expression (src/parserAux.ml[142,4864+75]..[142,4864+76])
                                Pexp_ident "x" (src/parserAux.ml[142,4864+75]..[142,4864+76])
                          ]
                    ]
              ]
            core_type (src/parserAux.ml[141,4803+54]..[141,4803+58])
              Ptyp_constr "bool" (src/parserAux.ml[141,4803+54]..[141,4803+58])
              []
    ]
]

open Positions
open Stretch
open Syntax
type early_producer =
  (Positions.t * identifier located option * parameter * attributes)
type early_producers = early_producer list
type early_production =
  (early_producers * string located option * branch_production_level *
    Positions.t)
type early_productions = early_production list
let new_precedence_level =
  let c = ref 0 in
  fun (pos1, pos2) ->
    incr c; PrecedenceLevel ((InputFile.get_input_file ()), (!c), pos1, pos2)
let new_production_level =
  let c = ref 0 in
  fun () -> incr c; ProductionLevel ((InputFile.get_input_file ()), (!c))
let new_on_error_reduce_level = new_production_level
module IdSet =
  (Set.Make)(struct
               type t = identifier located
               let compare id1 id2 = compare (value id1) (value id2)
             end)
let defined_identifiers (_, ido, _, _) accu = Option.fold IdSet.add ido accu
let defined_identifiers (producers : early_producers) =
  List.fold_right defined_identifiers producers IdSet.empty
let check_production_group (right_hand_sides : early_productions) =
  match right_hand_sides with
  | [] -> assert false
  | (producers, _, _, _)::right_hand_sides ->
      let ids = defined_identifiers producers in
      List.iter
        (fun (producers, _, _, _) ->
           let ids' = defined_identifiers producers in
           try
             let id =
               IdSet.choose
                 (IdSet.union (IdSet.diff ids ids') (IdSet.diff ids' ids)) in
             Error.error [Positions.position id]
               "two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"%s\" is defined\nin one production, but not in all of them."
               (Positions.value id)
           with | Not_found -> ()) right_hand_sides
let normalize_producer i (pos, opt_identifier, parameter, attrs) =
  let id =
    match opt_identifier with
    | Some id -> id
    | None -> Positions.with_pos pos ("_" ^ (string_of_int (i + 1))) in
  (id, parameter, attrs)
let normalize_producers (producers : early_producers) =
  (List.mapi normalize_producer producers : producer list)
let override pos o1 o2 =
  match (o1, o2) with
  | (Some _, Some _) ->
      Error.error [pos] "this production carries two %%prec declarations."
  | (None, Some _) -> o2
  | (_, None) -> o1
let producer_names (producers : early_producers) =
  (producers |>
     (List.map (fun (_, oid, _, _) -> Option.map Positions.value oid)))
    |> Array.of_list
let validate_pointfree_action (ty : ocamltype) =
  (match ty with
   | Inferred _ -> assert false
   | Declared stretch ->
       let s = stretch.stretch_raw_content in
       if Lexpointfree.validate_pointfree_action (Lexing.from_string s)
       then Some stretch
       else None : Stretch.t option)
let valid_ocaml_identifier (x : identifier located) =
  (Lexpointfree.valid_ocaml_identifier
     (Lexing.from_string (Positions.value x)) : bool)
[
  structure_item (src/parserAux.ml[14,999+0]..src/parserAux.ml[14,999+14])
    Tstr_open Fresh
    module_expr (src/parserAux.ml[14,999+5]..src/parserAux.ml[14,999+14])
      Tmod_ident "Dune__exe!.Positions"
  structure_item (src/parserAux.ml[15,1014+0]..src/parserAux.ml[15,1014+12])
    Tstr_open Fresh
    module_expr (src/parserAux.ml[15,1014+5]..src/parserAux.ml[15,1014+12])
      Tmod_ident "Dune__exe!.Stretch"
  structure_item (src/parserAux.ml[16,1027+0]..src/parserAux.ml[16,1027+11])
    Tstr_open Fresh
    module_expr (src/parserAux.ml[16,1027+5]..src/parserAux.ml[16,1027+11])
      Tmod_ident "Dune__exe!.Syntax"
  structure_item (src/parserAux.ml[18,1040+0]..src/parserAux.ml[22,1122+12])
    Tstr_type Rec
    [
      type_declaration early_producer/468 (src/parserAux.ml[18,1040+0]..src/parserAux.ml[22,1122+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[19,1062+2]..src/parserAux.ml[22,1122+12])
              Ttyp_tuple
              [
                core_type (src/parserAux.ml[19,1062+2]..src/parserAux.ml[19,1062+13])
                  Ttyp_constr "Dune__exe!.Positions.t"
                  []
                core_type (src/parserAux.ml[20,1078+2]..src/parserAux.ml[20,1078+27])
                  Ttyp_constr "option/10!"
                  [
                    core_type (src/parserAux.ml[20,1078+2]..src/parserAux.ml[20,1078+20])
                      Ttyp_constr "Dune__exe!.Syntax.located"
                      [
                        core_type (src/parserAux.ml[20,1078+2]..src/parserAux.ml[20,1078+12])
                          Ttyp_constr "Dune__exe!.Syntax.identifier"
                          []
                      ]
                  ]
                core_type (src/parserAux.ml[21,1108+2]..src/parserAux.ml[21,1108+11])
                  Ttyp_constr "Dune__exe!.Syntax.parameter"
                  []
                core_type (src/parserAux.ml[22,1122+2]..src/parserAux.ml[22,1122+12])
                  Ttyp_constr "Dune__exe!.Syntax.attributes"
                  []
              ]
    ]
  structure_item (src/parserAux.ml[24,1136+0]..src/parserAux.ml[25,1159+21])
    Tstr_type Rec
    [
      type_declaration early_producers/541 (src/parserAux.ml[24,1136+0]..src/parserAux.ml[25,1159+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[25,1159+2]..src/parserAux.ml[25,1159+21])
              Ttyp_constr "list/9!"
              [
                core_type (src/parserAux.ml[25,1159+2]..src/parserAux.ml[25,1159+16])
                  Ttyp_constr "early_producer/468"
                  []
              ]
    ]
  structure_item (src/parserAux.ml[27,1182+0]..src/parserAux.ml[31,1306+13])
    Tstr_type Rec
    [
      type_declaration early_production/542 (src/parserAux.ml[27,1182+0]..src/parserAux.ml[31,1306+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[28,1206+2]..src/parserAux.ml[31,1306+13])
              Ttyp_tuple
              [
                core_type (src/parserAux.ml[28,1206+2]..src/parserAux.ml[28,1206+17])
                  Ttyp_constr "early_producers/541"
                  []
                core_type (src/parserAux.ml[29,1226+2]..src/parserAux.ml[29,1226+23])
                  Ttyp_constr "option/10!"
                  [
                    core_type (src/parserAux.ml[29,1226+2]..src/parserAux.ml[29,1226+16])
                      Ttyp_constr "Dune__exe!.Syntax.located"
                      [
                        core_type (src/parserAux.ml[29,1226+2]..src/parserAux.ml[29,1226+8])
                          Ttyp_constr "string/15!"
                          []
                      ]
                  ]
                core_type (src/parserAux.ml[30,1278+2]..src/parserAux.ml[30,1278+25])
                  Ttyp_constr "Dune__exe!.Syntax.branch_production_level"
                  []
                core_type (src/parserAux.ml[31,1306+2]..src/parserAux.ml[31,1306+13])
                  Ttyp_constr "Dune__exe!.Positions.t"
                  []
              ]
    ]
  structure_item (src/parserAux.ml[33,1321+0]..src/parserAux.ml[34,1346+23])
    Tstr_type Rec
    [
      type_declaration early_productions/543 (src/parserAux.ml[33,1321+0]..src/parserAux.ml[34,1346+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/parserAux.ml[34,1346+2]..src/parserAux.ml[34,1346+23])
              Ttyp_constr "list/9!"
              [
                core_type (src/parserAux.ml[34,1346+2]..src/parserAux.ml[34,1346+18])
                  Ttyp_constr "early_production/542"
                  []
              ]
    ]
  structure_item (src/parserAux.ml[36,1371+0]..src/parserAux.ml[40,1451+65])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[36,1371+4]..src/parserAux.ml[36,1371+24])
          Tpat_var "new_precedence_level/544"
        expression (src/parserAux.ml[37,1398+2]..src/parserAux.ml[40,1451+65])
          Texp_let Nonrec
          [
            <def>
              pattern (src/parserAux.ml[37,1398+6]..src/parserAux.ml[37,1398+7])
                Tpat_var "c/545"
              expression (src/parserAux.ml[37,1398+10]..src/parserAux.ml[37,1398+15])
                Texp_apply
                expression (src/parserAux.ml[37,1398+10]..src/parserAux.ml[37,1398+13])
                  Texp_ident "Stdlib!.ref"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[37,1398+14]..src/parserAux.ml[37,1398+15])
                      Texp_constant Const_int 0
                ]
          ]
          expression (src/parserAux.ml[38,1417+2]..src/parserAux.ml[40,1451+65])
            Texp_function
            Nolabel
            [
              <case>
                pattern (src/parserAux.ml[38,1417+6]..src/parserAux.ml[38,1417+18])
                  Tpat_tuple
                  [
                    pattern (src/parserAux.ml[38,1417+7]..src/parserAux.ml[38,1417+11])
                      Tpat_var "pos1/546"
                    pattern (src/parserAux.ml[38,1417+13]..src/parserAux.ml[38,1417+17])
                      Tpat_var "pos2/547"
                  ]
                expression (src/parserAux.ml[39,1439+4]..src/parserAux.ml[40,1451+65])
                  Texp_sequence
                  expression (src/parserAux.ml[39,1439+4]..src/parserAux.ml[39,1439+10])
                    Texp_apply
                    expression (src/parserAux.ml[39,1439+4]..src/parserAux.ml[39,1439+8])
                      Texp_ident "Stdlib!.incr"
                    [
                      <arg>
                        Nolabel
                        expression (src/parserAux.ml[39,1439+9]..src/parserAux.ml[39,1439+10])
                          Texp_ident "c/545"
                    ]
                  expression (src/parserAux.ml[40,1451+4]..src/parserAux.ml[40,1451+65])
                    Texp_construct "PrecedenceLevel"
                    [
                      expression (src/parserAux.ml[40,1451+21]..src/parserAux.ml[40,1451+48])
                        Texp_apply
                        expression (src/parserAux.ml[40,1451+21]..src/parserAux.ml[40,1451+45])
                          Texp_ident "Dune__exe!.InputFile.get_input_file"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[40,1451+46]..src/parserAux.ml[40,1451+48])
                              Texp_construct "()"
                              []
                        ]
                      expression (src/parserAux.ml[40,1451+50]..src/parserAux.ml[40,1451+52])
                        Texp_apply
                        expression (src/parserAux.ml[40,1451+50]..src/parserAux.ml[40,1451+51])
                          Texp_ident "Stdlib!.!"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[40,1451+51]..src/parserAux.ml[40,1451+52])
                              Texp_ident "c/545"
                        ]
                      expression (src/parserAux.ml[40,1451+54]..src/parserAux.ml[40,1451+58])
                        Texp_ident "pos1/546"
                      expression (src/parserAux.ml[40,1451+60]..src/parserAux.ml[40,1451+64])
                        Texp_ident "pos2/547"
                    ]
            ]
    ]
  structure_item (src/parserAux.ml[42,1518+0]..src/parserAux.ml[46,1588+53])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[42,1518+4]..src/parserAux.ml[42,1518+24])
          Tpat_var "new_production_level/615"
        expression (src/parserAux.ml[43,1545+2]..src/parserAux.ml[46,1588+53])
          Texp_let Nonrec
          [
            <def>
              pattern (src/parserAux.ml[43,1545+6]..src/parserAux.ml[43,1545+7])
                Tpat_var "c/616"
              expression (src/parserAux.ml[43,1545+10]..src/parserAux.ml[43,1545+15])
                Texp_apply
                expression (src/parserAux.ml[43,1545+10]..src/parserAux.ml[43,1545+13])
                  Texp_ident "Stdlib!.ref"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[43,1545+14]..src/parserAux.ml[43,1545+15])
                      Texp_constant Const_int 0
                ]
          ]
          expression (src/parserAux.ml[44,1564+2]..src/parserAux.ml[46,1588+53])
            Texp_function
            Nolabel
            [
              <case>
                pattern (src/parserAux.ml[44,1564+6]..src/parserAux.ml[44,1564+8])
                  Tpat_construct "()"
                  []
                  None
                expression (src/parserAux.ml[45,1576+4]..src/parserAux.ml[46,1588+53])
                  Texp_sequence
                  expression (src/parserAux.ml[45,1576+4]..src/parserAux.ml[45,1576+10])
                    Texp_apply
                    expression (src/parserAux.ml[45,1576+4]..src/parserAux.ml[45,1576+8])
                      Texp_ident "Stdlib!.incr"
                    [
                      <arg>
                        Nolabel
                        expression (src/parserAux.ml[45,1576+9]..src/parserAux.ml[45,1576+10])
                          Texp_ident "c/616"
                    ]
                  expression (src/parserAux.ml[46,1588+4]..src/parserAux.ml[46,1588+53])
                    Texp_construct "ProductionLevel"
                    [
                      expression (src/parserAux.ml[46,1588+21]..src/parserAux.ml[46,1588+48])
                        Texp_apply
                        expression (src/parserAux.ml[46,1588+21]..src/parserAux.ml[46,1588+45])
                          Texp_ident "Dune__exe!.InputFile.get_input_file"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[46,1588+46]..src/parserAux.ml[46,1588+48])
                              Texp_construct "()"
                              []
                        ]
                      expression (src/parserAux.ml[46,1588+50]..src/parserAux.ml[46,1588+52])
                        Texp_apply
                        expression (src/parserAux.ml[46,1588+50]..src/parserAux.ml[46,1588+51])
                          Texp_ident "Stdlib!.!"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[46,1588+51]..src/parserAux.ml[46,1588+52])
                              Texp_ident "c/616"
                        ]
                    ]
            ]
    ]
  structure_item (src/parserAux.ml[48,1643+0]..src/parserAux.ml[49,1675+22])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[48,1643+4]..src/parserAux.ml[48,1643+29])
          Tpat_var "new_on_error_reduce_level/618"
        expression (src/parserAux.ml[49,1675+2]..src/parserAux.ml[49,1675+22])
          Texp_ident "new_production_level/615"
    ]
  structure_item (src/parserAux.ml[53,1790+0]..src/parserAux.ml[57,1912+4])
    Tstr_module
    IdSet/846
      module_expr (src/parserAux.ml[53,1790+15]..src/parserAux.ml[57,1912+4])
        Tmod_apply
        module_expr (src/parserAux.ml[53,1790+15]..src/parserAux.ml[53,1790+23])
          module_expr (src/parserAux.ml[53,1790+15]..src/parserAux.ml[53,1790+23])
            Tmod_ident "Stdlib!.Set.Make"
        module_expr (src/parserAux.ml[53,1790+25]..src/parserAux.ml[57,1912+3])
          Tmod_structure
          [
            structure_item (src/parserAux.ml[54,1822+2]..src/parserAux.ml[54,1822+29])
              Tstr_type Rec
              [
                type_declaration t/619 (src/parserAux.ml[54,1822+2]..src/parserAux.ml[54,1822+29])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (src/parserAux.ml[54,1822+11]..src/parserAux.ml[54,1822+29])
                        Ttyp_constr "Dune__exe!.Syntax.located"
                        [
                          core_type (src/parserAux.ml[54,1822+11]..src/parserAux.ml[54,1822+21])
                            Ttyp_constr "Dune__exe!.Syntax.identifier"
                            []
                        ]
              ]
            structure_item (src/parserAux.ml[55,1852+2]..src/parserAux.ml[56,1876+35])
              Tstr_value Nonrec
              [
                <def>
                  pattern (src/parserAux.ml[55,1852+6]..src/parserAux.ml[55,1852+13])
                    Tpat_var "compare/620"
                  expression (src/parserAux.ml[55,1852+14]..src/parserAux.ml[56,1876+35]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (src/parserAux.ml[55,1852+14]..src/parserAux.ml[55,1852+17])
                          Tpat_var "id1/621"
                        expression (src/parserAux.ml[55,1852+18]..src/parserAux.ml[56,1876+35]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (src/parserAux.ml[55,1852+18]..src/parserAux.ml[55,1852+21])
                                Tpat_var "id2/622"
                              expression (src/parserAux.ml[56,1876+4]..src/parserAux.ml[56,1876+35])
                                Texp_apply
                                expression (src/parserAux.ml[56,1876+4]..src/parserAux.ml[56,1876+11])
                                  Texp_ident "Stdlib!.compare"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/parserAux.ml[56,1876+12]..src/parserAux.ml[56,1876+23])
                                      Texp_apply
                                      expression (src/parserAux.ml[56,1876+13]..src/parserAux.ml[56,1876+18])
                                        Texp_ident "Dune__exe!.Positions.value"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/parserAux.ml[56,1876+19]..src/parserAux.ml[56,1876+22])
                                            Texp_ident "id1/621"
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/parserAux.ml[56,1876+24]..src/parserAux.ml[56,1876+35])
                                      Texp_apply
                                      expression (src/parserAux.ml[56,1876+25]..src/parserAux.ml[56,1876+30])
                                        Texp_ident "Dune__exe!.Positions.value"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/parserAux.ml[56,1876+31]..src/parserAux.ml[56,1876+34])
                                            Texp_ident "id2/622"
                                      ]
                                ]
                          ]
                    ]
              ]
          ]
  structure_item (src/parserAux.ml[59,1918+0]..src/parserAux.ml[60,1964+32])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[59,1918+4]..src/parserAux.ml[59,1918+23])
          Tpat_var "defined_identifiers/847"
        expression (src/parserAux.ml[59,1918+24]..src/parserAux.ml[60,1964+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[59,1918+24]..src/parserAux.ml[59,1918+38])
                Tpat_tuple
                [
                  pattern (src/parserAux.ml[59,1918+25]..src/parserAux.ml[59,1918+26])
                    Tpat_any
                  pattern (src/parserAux.ml[59,1918+28]..src/parserAux.ml[59,1918+31])
                    Tpat_var "ido/849"
                  pattern (src/parserAux.ml[59,1918+33]..src/parserAux.ml[59,1918+34])
                    Tpat_any
                  pattern (src/parserAux.ml[59,1918+36]..src/parserAux.ml[59,1918+37])
                    Tpat_any
                ]
              expression (src/parserAux.ml[59,1918+39]..src/parserAux.ml[60,1964+32]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/parserAux.ml[59,1918+39]..src/parserAux.ml[59,1918+43])
                      Tpat_var "accu/850"
                    expression (src/parserAux.ml[60,1964+2]..src/parserAux.ml[60,1964+32])
                      Texp_apply
                      expression (src/parserAux.ml[60,1964+2]..src/parserAux.ml[60,1964+13])
                        Texp_ident "Dune__exe!.Option.fold"
                      [
                        <arg>
                          Nolabel
                          expression (src/parserAux.ml[60,1964+14]..src/parserAux.ml[60,1964+23])
                            Texp_ident "IdSet/846.add"
                        <arg>
                          Nolabel
                          expression (src/parserAux.ml[60,1964+24]..src/parserAux.ml[60,1964+27])
                            Texp_ident "ido/849"
                        <arg>
                          Nolabel
                          expression (src/parserAux.ml[60,1964+28]..src/parserAux.ml[60,1964+32])
                            Texp_ident "accu/850"
                      ]
                ]
          ]
    ]
  structure_item (src/parserAux.ml[62,1998+0]..src/parserAux.ml[63,2054+59])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[62,1998+4]..src/parserAux.ml[62,1998+23])
          Tpat_var "defined_identifiers/863"
        expression (src/parserAux.ml[62,1998+24]..src/parserAux.ml[63,2054+59]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[62,1998+25]..src/parserAux.ml[62,1998+34])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[62,1998+37]..src/parserAux.ml[62,1998+52])
                    Ttyp_constr "early_producers/541"
                    []
                Tpat_alias "producers/864"
                pattern (src/parserAux.ml[62,1998+25]..src/parserAux.ml[62,1998+34])
                  Tpat_any
              expression (src/parserAux.ml[63,2054+2]..src/parserAux.ml[63,2054+59])
                Texp_apply
                expression (src/parserAux.ml[63,2054+2]..src/parserAux.ml[63,2054+17])
                  Texp_ident "Stdlib!.List.fold_right"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[63,2054+18]..src/parserAux.ml[63,2054+37])
                      Texp_ident "defined_identifiers/847"
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[63,2054+38]..src/parserAux.ml[63,2054+47])
                      Texp_ident "producers/864"
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[63,2054+48]..src/parserAux.ml[63,2054+59])
                      Texp_ident "IdSet/846.empty"
                ]
          ]
    ]
  structure_item (src/parserAux.ml[65,2115+0]..src/parserAux.ml[87,2993+24])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[65,2115+4]..src/parserAux.ml[65,2115+26])
          Tpat_var "check_production_group/931"
        expression (src/parserAux.ml[65,2115+27]..src/parserAux.ml[87,2993+24]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[65,2115+28]..src/parserAux.ml[65,2115+44])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[65,2115+47]..src/parserAux.ml[65,2115+64])
                    Ttyp_constr "early_productions/543"
                    []
                Tpat_alias "right_hand_sides/933"
                pattern (src/parserAux.ml[65,2115+28]..src/parserAux.ml[65,2115+44])
                  Tpat_any
              expression (src/parserAux.ml[66,2183+2]..src/parserAux.ml[87,2993+24])
                Texp_match
                expression (src/parserAux.ml[66,2183+8]..src/parserAux.ml[66,2183+24])
                  Texp_ident "right_hand_sides/933"
                [
                  <case>
                    pattern (src/parserAux.ml[67,2213+4]..src/parserAux.ml[67,2213+6])
                      Tpat_value
                      pattern (src/parserAux.ml[67,2213+4]..src/parserAux.ml[67,2213+6])
                        Tpat_construct "[]"
                        []
                        None
                    expression (src/parserAux.ml[69,2271+6]..src/parserAux.ml[69,2271+18])
                      Texp_assert                      expression (src/parserAux.ml[69,2271+13]..src/parserAux.ml[69,2271+18])
                        Texp_construct "false"
                        []
                  <case>
                    pattern (src/parserAux.ml[70,2290+4]..src/parserAux.ml[70,2290+44])
                      Tpat_value
                      pattern (src/parserAux.ml[70,2290+4]..src/parserAux.ml[70,2290+44])
                        Tpat_construct "::"
                        [
                          pattern (src/parserAux.ml[70,2290+4]..src/parserAux.ml[70,2290+24])
                            Tpat_tuple
                            [
                              pattern (src/parserAux.ml[70,2290+5]..src/parserAux.ml[70,2290+14])
                                Tpat_var "producers/934"
                              pattern (src/parserAux.ml[70,2290+16]..src/parserAux.ml[70,2290+17])
                                Tpat_any
                              pattern (src/parserAux.ml[70,2290+19]..src/parserAux.ml[70,2290+20])
                                Tpat_any
                              pattern (src/parserAux.ml[70,2290+22]..src/parserAux.ml[70,2290+23])
                                Tpat_any
                            ]
                          pattern (src/parserAux.ml[70,2290+28]..src/parserAux.ml[70,2290+44])
                            Tpat_var "right_hand_sides/935"
                        ]
                        None
                    expression (src/parserAux.ml[71,2338+6]..src/parserAux.ml[87,2993+24])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/parserAux.ml[71,2338+10]..src/parserAux.ml[71,2338+13])
                            Tpat_var "ids/936"
                          expression (src/parserAux.ml[71,2338+16]..src/parserAux.ml[71,2338+45])
                            Texp_apply
                            expression (src/parserAux.ml[71,2338+16]..src/parserAux.ml[71,2338+35])
                              Texp_ident "defined_identifiers/863"
                            [
                              <arg>
                                Nolabel
                                expression (src/parserAux.ml[71,2338+36]..src/parserAux.ml[71,2338+45])
                                  Texp_ident "producers/934"
                            ]
                      ]
                      expression (src/parserAux.ml[72,2387+6]..src/parserAux.ml[87,2993+24])
                        Texp_apply
                        expression (src/parserAux.ml[72,2387+6]..src/parserAux.ml[72,2387+15])
                          Texp_ident "Stdlib!.List.iter"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[72,2387+16]..src/parserAux.ml[87,2993+7])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/parserAux.ml[72,2387+21]..src/parserAux.ml[72,2387+41])
                                    Tpat_tuple
                                    [
                                      pattern (src/parserAux.ml[72,2387+22]..src/parserAux.ml[72,2387+31])
                                        Tpat_var "producers/937"
                                      pattern (src/parserAux.ml[72,2387+33]..src/parserAux.ml[72,2387+34])
                                        Tpat_any
                                      pattern (src/parserAux.ml[72,2387+36]..src/parserAux.ml[72,2387+37])
                                        Tpat_any
                                      pattern (src/parserAux.ml[72,2387+39]..src/parserAux.ml[72,2387+40])
                                        Tpat_any
                                    ]
                                  expression (src/parserAux.ml[73,2432+8]..src/parserAux.ml[86,2980+12])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/parserAux.ml[73,2432+12]..src/parserAux.ml[73,2432+16])
                                          Tpat_var "ids'/938"
                                        expression (src/parserAux.ml[73,2432+19]..src/parserAux.ml[73,2432+48])
                                          Texp_apply
                                          expression (src/parserAux.ml[73,2432+19]..src/parserAux.ml[73,2432+38])
                                            Texp_ident "defined_identifiers/863"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/parserAux.ml[73,2432+39]..src/parserAux.ml[73,2432+48])
                                                Texp_ident "producers/937"
                                          ]
                                    ]
                                    expression (src/parserAux.ml[74,2484+8]..src/parserAux.ml[86,2980+12])
                                      Texp_try
                                      expression (src/parserAux.ml[75,2496+10]..src/parserAux.ml[84,2921+32])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/parserAux.ml[75,2496+14]..src/parserAux.ml[75,2496+16])
                                              Tpat_var "id/939"
                                            expression (src/parserAux.ml[76,2515+12]..src/parserAux.ml[78,2607+54])
                                              Texp_apply
                                              expression (src/parserAux.ml[76,2515+12]..src/parserAux.ml[76,2515+24])
                                                Texp_ident "IdSet/846.choose"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/parserAux.ml[76,2515+25]..src/parserAux.ml[78,2607+54])
                                                    Texp_apply
                                                    expression (src/parserAux.ml[76,2515+26]..src/parserAux.ml[76,2515+37])
                                                      Texp_ident "IdSet/846.union"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/parserAux.ml[77,2553+32]..src/parserAux.ml[77,2553+53])
                                                          Texp_apply
                                                          expression (src/parserAux.ml[77,2553+33]..src/parserAux.ml[77,2553+43])
                                                            Texp_ident "IdSet/846.diff"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/parserAux.ml[77,2553+44]..src/parserAux.ml[77,2553+47])
                                                                Texp_ident "ids/936"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/parserAux.ml[77,2553+48]..src/parserAux.ml[77,2553+52])
                                                                Texp_ident "ids'/938"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/parserAux.ml[78,2607+32]..src/parserAux.ml[78,2607+53])
                                                          Texp_apply
                                                          expression (src/parserAux.ml[78,2607+33]..src/parserAux.ml[78,2607+43])
                                                            Texp_ident "IdSet/846.diff"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/parserAux.ml[78,2607+44]..src/parserAux.ml[78,2607+48])
                                                                Texp_ident "ids'/938"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/parserAux.ml[78,2607+49]..src/parserAux.ml[78,2607+52])
                                                                Texp_ident "ids/936"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                        expression (src/parserAux.ml[80,2675+10]..src/parserAux.ml[84,2921+32])
                                          Texp_apply
                                          expression (src/parserAux.ml[80,2675+10]..src/parserAux.ml[80,2675+21])
                                            Texp_ident "Dune__exe!.Error.error"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/parserAux.ml[80,2675+22]..src/parserAux.ml[80,2675+45])
                                                Texp_construct "::"
                                                [
                                                  expression (src/parserAux.ml[80,2675+23]..src/parserAux.ml[80,2675+44])
                                                    Texp_apply
                                                    expression (src/parserAux.ml[80,2675+23]..src/parserAux.ml[80,2675+41])
                                                      Texp_ident "Dune__exe!.Positions.position"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/parserAux.ml[80,2675+42]..src/parserAux.ml[80,2675+44])
                                                          Texp_ident "id/939"
                                                    ]
                                                  expression (src/parserAux.ml[80,2675+44]..src/parserAux.ml[80,2675+45]) ghost
                                                    Texp_construct "[]"
                                                    []
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56])
                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                [
                                                  expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                        Texp_constant Const_string("two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"",(src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost,None)
                                                      expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                                Texp_constant Const_string("\" is defined\nin one production, but not in all of them.",(src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost,None)
                                                              expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                    ]
                                                  expression (src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost
                                                    Texp_constant Const_string("two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"%s\" is defined\nin one production, but not in all of them.",(src/parserAux.ml[81,2721+12]..src/parserAux.ml[83,2864+56]) ghost,None)
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/parserAux.ml[84,2921+12]..src/parserAux.ml[84,2921+32])
                                                Texp_apply
                                                expression (src/parserAux.ml[84,2921+13]..src/parserAux.ml[84,2921+28])
                                                  Texp_ident "Dune__exe!.Positions.value"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/parserAux.ml[84,2921+29]..src/parserAux.ml[84,2921+31])
                                                      Texp_ident "id/939"
                                                ]
                                          ]
                                      [
                                        <case>
                                          pattern (src/parserAux.ml[85,2954+13]..src/parserAux.ml[85,2954+22])
                                            Tpat_construct "Not_found"
                                            []
                                            None
                                          expression (src/parserAux.ml[86,2980+10]..src/parserAux.ml[86,2980+12])
                                            Texp_construct "()"
                                            []
                                      ]
                              ]
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[87,2993+8]..src/parserAux.ml[87,2993+24])
                              Texp_ident "right_hand_sides/935"
                        ]
                ]
          ]
    ]
  structure_item (src/parserAux.ml[91,3114+0]..src/parserAux.ml[97,3318+24])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[91,3114+4]..src/parserAux.ml[91,3114+22])
          Tpat_var "normalize_producer/979"
        expression (src/parserAux.ml[91,3114+23]..src/parserAux.ml[97,3318+24]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[91,3114+23]..src/parserAux.ml[91,3114+24])
                Tpat_var "i/981"
              expression (src/parserAux.ml[91,3114+25]..src/parserAux.ml[97,3318+24]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/parserAux.ml[91,3114+25]..src/parserAux.ml[91,3114+64])
                      Tpat_tuple
                      [
                        pattern (src/parserAux.ml[91,3114+26]..src/parserAux.ml[91,3114+29])
                          Tpat_var "pos/982"
                        pattern (src/parserAux.ml[91,3114+31]..src/parserAux.ml[91,3114+45])
                          Tpat_var "opt_identifier/983"
                        pattern (src/parserAux.ml[91,3114+47]..src/parserAux.ml[91,3114+56])
                          Tpat_var "parameter/984"
                        pattern (src/parserAux.ml[91,3114+58]..src/parserAux.ml[91,3114+63])
                          Tpat_var "attrs/985"
                      ]
                    expression (src/parserAux.ml[92,3181+2]..src/parserAux.ml[97,3318+24])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/parserAux.ml[92,3181+6]..src/parserAux.ml[92,3181+8])
                            Tpat_var "id/986"
                          expression (src/parserAux.ml[93,3192+4]..src/parserAux.ml[95,3244+68])
                            Texp_match
                            expression (src/parserAux.ml[93,3192+10]..src/parserAux.ml[93,3192+24])
                              Texp_ident "opt_identifier/983"
                            [
                              <case>
                                pattern (src/parserAux.ml[94,3222+8]..src/parserAux.ml[94,3222+15])
                                  Tpat_value
                                  pattern (src/parserAux.ml[94,3222+8]..src/parserAux.ml[94,3222+15])
                                    Tpat_construct "Some"
                                    [
                                      pattern (src/parserAux.ml[94,3222+13]..src/parserAux.ml[94,3222+15])
                                        Tpat_var "id/987"
                                    ]
                                    None
                                expression (src/parserAux.ml[94,3222+19]..src/parserAux.ml[94,3222+21])
                                  Texp_ident "id/987"
                              <case>
                                pattern (src/parserAux.ml[95,3244+8]..src/parserAux.ml[95,3244+12])
                                  Tpat_value
                                  pattern (src/parserAux.ml[95,3244+8]..src/parserAux.ml[95,3244+12])
                                    Tpat_construct "None"
                                    []
                                    None
                                expression (src/parserAux.ml[95,3244+16]..src/parserAux.ml[95,3244+68])
                                  Texp_apply
                                  expression (src/parserAux.ml[95,3244+16]..src/parserAux.ml[95,3244+34])
                                    Texp_ident "Dune__exe!.Positions.with_pos"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/parserAux.ml[95,3244+35]..src/parserAux.ml[95,3244+38])
                                        Texp_ident "pos/982"
                                    <arg>
                                      Nolabel
                                      expression (src/parserAux.ml[95,3244+39]..src/parserAux.ml[95,3244+68])
                                        Texp_apply
                                        expression (src/parserAux.ml[95,3244+44]..src/parserAux.ml[95,3244+45])
                                          Texp_ident "Stdlib!.^"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/parserAux.ml[95,3244+40]..src/parserAux.ml[95,3244+43])
                                              Texp_constant Const_string("_",(src/parserAux.ml[95,3244+41]..src/parserAux.ml[95,3244+42]),None)
                                          <arg>
                                            Nolabel
                                            expression (src/parserAux.ml[95,3244+46]..src/parserAux.ml[95,3244+67])
                                              Texp_apply
                                              expression (src/parserAux.ml[95,3244+46]..src/parserAux.ml[95,3244+59])
                                                Texp_ident "Stdlib!.string_of_int"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/parserAux.ml[95,3244+60]..src/parserAux.ml[95,3244+67])
                                                    Texp_apply
                                                    expression (src/parserAux.ml[95,3244+63]..src/parserAux.ml[95,3244+64])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/parserAux.ml[95,3244+61]..src/parserAux.ml[95,3244+62])
                                                          Texp_ident "i/981"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/parserAux.ml[95,3244+65]..src/parserAux.ml[95,3244+66])
                                                          Texp_constant Const_int 1
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                      ]
                      expression (src/parserAux.ml[97,3318+2]..src/parserAux.ml[97,3318+24])
                        Texp_tuple
                        [
                          expression (src/parserAux.ml[97,3318+3]..src/parserAux.ml[97,3318+5])
                            Texp_ident "id/986"
                          expression (src/parserAux.ml[97,3318+7]..src/parserAux.ml[97,3318+16])
                            Texp_ident "parameter/984"
                          expression (src/parserAux.ml[97,3318+18]..src/parserAux.ml[97,3318+23])
                            Texp_ident "attrs/985"
                        ]
                ]
          ]
    ]
  structure_item (src/parserAux.ml[99,3344+0]..src/parserAux.ml[100,3416+40])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[99,3344+4]..src/parserAux.ml[99,3344+23])
          Tpat_var "normalize_producers/989"
        expression (src/parserAux.ml[99,3344+24]..src/parserAux.ml[100,3416+40]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[99,3344+25]..src/parserAux.ml[99,3344+34])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[99,3344+37]..src/parserAux.ml[99,3344+52])
                    Ttyp_constr "early_producers/541"
                    []
                Tpat_alias "producers/991"
                pattern (src/parserAux.ml[99,3344+25]..src/parserAux.ml[99,3344+34])
                  Tpat_any
              expression (src/parserAux.ml[100,3416+2]..src/parserAux.ml[100,3416+40])
                extra
                  Texp_constraint
                  core_type (src/parserAux.ml[99,3344+56]..src/parserAux.ml[99,3344+69])
                    Ttyp_constr "list/9!"
                    [
                      core_type (src/parserAux.ml[99,3344+56]..src/parserAux.ml[99,3344+64])
                        Ttyp_constr "Dune__exe!.Syntax.producer"
                        []
                    ]
                Texp_apply
                expression (src/parserAux.ml[100,3416+2]..src/parserAux.ml[100,3416+11])
                  Texp_ident "Stdlib!.List.mapi"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[100,3416+12]..src/parserAux.ml[100,3416+30])
                      Texp_ident "normalize_producer/979"
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[100,3416+31]..src/parserAux.ml[100,3416+40])
                      Texp_ident "producers/991"
                ]
          ]
    ]
  structure_item (src/parserAux.ml[102,3458+0]..src/parserAux.ml[109,3646+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[102,3458+4]..src/parserAux.ml[102,3458+12])
          Tpat_var "override/992"
        expression (src/parserAux.ml[102,3458+13]..src/parserAux.ml[109,3646+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[102,3458+13]..src/parserAux.ml[102,3458+16])
                Tpat_var "pos/994"
              expression (src/parserAux.ml[102,3458+17]..src/parserAux.ml[109,3646+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/parserAux.ml[102,3458+17]..src/parserAux.ml[102,3458+19])
                      Tpat_var "o1/995"
                    expression (src/parserAux.ml[102,3458+20]..src/parserAux.ml[109,3646+8]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/parserAux.ml[102,3458+20]..src/parserAux.ml[102,3458+22])
                            Tpat_var "o2/996"
                          expression (src/parserAux.ml[103,3483+2]..src/parserAux.ml[109,3646+8])
                            Texp_match
                            expression (src/parserAux.ml[103,3483+8]..src/parserAux.ml[103,3483+14])
                              Texp_tuple
                              [
                                expression (src/parserAux.ml[103,3483+8]..src/parserAux.ml[103,3483+10])
                                  Texp_ident "o1/995"
                                expression (src/parserAux.ml[103,3483+12]..src/parserAux.ml[103,3483+14])
                                  Texp_ident "o2/996"
                              ]
                            [
                              <case>
                                pattern (src/parserAux.ml[104,3503+4]..src/parserAux.ml[104,3503+18])
                                  Tpat_value
                                  pattern (src/parserAux.ml[104,3503+4]..src/parserAux.ml[104,3503+18])
                                    Tpat_tuple
                                    [
                                      pattern (src/parserAux.ml[104,3503+4]..src/parserAux.ml[104,3503+10])
                                        Tpat_construct "Some"
                                        [
                                          pattern (src/parserAux.ml[104,3503+9]..src/parserAux.ml[104,3503+10])
                                            Tpat_any
                                        ]
                                        None
                                      pattern (src/parserAux.ml[104,3503+12]..src/parserAux.ml[104,3503+18])
                                        Tpat_construct "Some"
                                        [
                                          pattern (src/parserAux.ml[104,3503+17]..src/parserAux.ml[104,3503+18])
                                            Tpat_any
                                        ]
                                        None
                                    ]
                                expression (src/parserAux.ml[105,3525+6]..src/parserAux.ml[105,3525+76])
                                  Texp_apply
                                  expression (src/parserAux.ml[105,3525+6]..src/parserAux.ml[105,3525+17])
                                    Texp_ident "Dune__exe!.Error.error"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/parserAux.ml[105,3525+18]..src/parserAux.ml[105,3525+25])
                                        Texp_construct "::"
                                        [
                                          expression (src/parserAux.ml[105,3525+20]..src/parserAux.ml[105,3525+23])
                                            Texp_ident "pos/994"
                                          expression (src/parserAux.ml[105,3525+24]..src/parserAux.ml[105,3525+25]) ghost
                                            Texp_construct "[]"
                                            []
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                Texp_constant Const_string("this production carries two ",(src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost,None)
                                              expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                [
                                                  expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                    Texp_constant Const_char 25
                                                  expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                        Texp_constant Const_string("prec declarations.",(src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost,None)
                                                      expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                        []
                                                    ]
                                                ]
                                            ]
                                          expression (src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost
                                            Texp_constant Const_string("this production carries two %%prec declarations.",(src/parserAux.ml[105,3525+26]..src/parserAux.ml[105,3525+76]) ghost,None)
                                        ]
                                  ]
                              <case>
                                pattern (src/parserAux.ml[106,3602+4]..src/parserAux.ml[106,3602+16])
                                  Tpat_value
                                  pattern (src/parserAux.ml[106,3602+4]..src/parserAux.ml[106,3602+16])
                                    Tpat_tuple
                                    [
                                      pattern (src/parserAux.ml[106,3602+4]..src/parserAux.ml[106,3602+8])
                                        Tpat_construct "None"
                                        []
                                        None
                                      pattern (src/parserAux.ml[106,3602+10]..src/parserAux.ml[106,3602+16])
                                        Tpat_construct "Some"
                                        [
                                          pattern (src/parserAux.ml[106,3602+15]..src/parserAux.ml[106,3602+16])
                                            Tpat_any
                                        ]
                                        None
                                    ]
                                expression (src/parserAux.ml[107,3622+6]..src/parserAux.ml[107,3622+8])
                                  Texp_ident "o2/996"
                              <case>
                                pattern (src/parserAux.ml[108,3631+4]..src/parserAux.ml[108,3631+11])
                                  Tpat_value
                                  pattern (src/parserAux.ml[108,3631+4]..src/parserAux.ml[108,3631+11])
                                    Tpat_tuple
                                    [
                                      pattern (src/parserAux.ml[108,3631+4]..src/parserAux.ml[108,3631+5])
                                        Tpat_any
                                      pattern (src/parserAux.ml[108,3631+7]..src/parserAux.ml[108,3631+11])
                                        Tpat_construct "None"
                                        []
                                        None
                                    ]
                                expression (src/parserAux.ml[109,3646+6]..src/parserAux.ml[109,3646+8])
                                  Texp_ident "o1/995"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/parserAux.ml[116,3941+0]..src/parserAux.ml[119,4073+18])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[116,3941+4]..src/parserAux.ml[116,3941+18])
          Tpat_var "producer_names/997"
        expression (src/parserAux.ml[116,3941+19]..src/parserAux.ml[119,4073+18]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[116,3941+20]..src/parserAux.ml[116,3941+29])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[116,3941+32]..src/parserAux.ml[116,3941+47])
                    Ttyp_constr "early_producers/541"
                    []
                Tpat_alias "producers/999"
                pattern (src/parserAux.ml[116,3941+20]..src/parserAux.ml[116,3941+29])
                  Tpat_any
              expression (src/parserAux.ml[117,3992+2]..src/parserAux.ml[119,4073+18])
                Texp_apply
                expression (src/parserAux.ml[119,4073+5]..src/parserAux.ml[119,4073+18])
                  Texp_ident "Stdlib!.Array.of_list"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[117,3992+2]..src/parserAux.ml[118,4004+68])
                      Texp_apply
                      expression (src/parserAux.ml[118,4004+5]..src/parserAux.ml[118,4004+68])
                        Texp_apply
                        expression (src/parserAux.ml[118,4004+5]..src/parserAux.ml[118,4004+13])
                          Texp_ident "Stdlib!.List.map"
                        [
                          <arg>
                            Nolabel
                            expression (src/parserAux.ml[118,4004+14]..src/parserAux.ml[118,4004+68])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/parserAux.ml[118,4004+19]..src/parserAux.ml[118,4004+33])
                                    Tpat_tuple
                                    [
                                      pattern (src/parserAux.ml[118,4004+20]..src/parserAux.ml[118,4004+21])
                                        Tpat_any
                                      pattern (src/parserAux.ml[118,4004+23]..src/parserAux.ml[118,4004+26])
                                        Tpat_var "oid/1048"
                                      pattern (src/parserAux.ml[118,4004+28]..src/parserAux.ml[118,4004+29])
                                        Tpat_any
                                      pattern (src/parserAux.ml[118,4004+31]..src/parserAux.ml[118,4004+32])
                                        Tpat_any
                                    ]
                                  expression (src/parserAux.ml[118,4004+37]..src/parserAux.ml[118,4004+67])
                                    Texp_apply
                                    expression (src/parserAux.ml[118,4004+37]..src/parserAux.ml[118,4004+47])
                                      Texp_ident "Dune__exe!.Option.map"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/parserAux.ml[118,4004+48]..src/parserAux.ml[118,4004+63])
                                          Texp_ident "Dune__exe!.Positions.value"
                                      <arg>
                                        Nolabel
                                        expression (src/parserAux.ml[118,4004+64]..src/parserAux.ml[118,4004+67])
                                          Texp_ident "oid/1048"
                                    ]
                              ]
                        ]
                      [
                        <arg>
                          Nolabel
                          expression (src/parserAux.ml[117,3992+2]..src/parserAux.ml[117,3992+11])
                            Texp_ident "producers/999"
                      ]
                ]
          ]
    ]
  structure_item (src/parserAux.ml[124,4246+0]..src/parserAux.ml[133,4544+12])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[124,4246+4]..src/parserAux.ml[124,4246+29])
          Tpat_var "validate_pointfree_action/1050"
        expression (src/parserAux.ml[124,4246+30]..src/parserAux.ml[133,4544+12]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[124,4246+31]..src/parserAux.ml[124,4246+33])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[124,4246+36]..src/parserAux.ml[124,4246+45])
                    Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                    []
                Tpat_alias "ty/1052"
                pattern (src/parserAux.ml[124,4246+31]..src/parserAux.ml[124,4246+33])
                  Tpat_any
              expression (src/parserAux.ml[125,4314+2]..src/parserAux.ml[133,4544+12])
                extra
                  Texp_constraint
                  core_type (src/parserAux.ml[124,4246+49]..src/parserAux.ml[124,4246+65])
                    Ttyp_constr "option/10!"
                    [
                      core_type (src/parserAux.ml[124,4246+49]..src/parserAux.ml[124,4246+58])
                        Ttyp_constr "Dune__exe!.Stretch.t"
                        []
                    ]
                Texp_match
                expression (src/parserAux.ml[125,4314+8]..src/parserAux.ml[125,4314+10])
                  Texp_ident "ty/1052"
                [
                  <case>
                    pattern (src/parserAux.ml[126,4330+4]..src/parserAux.ml[126,4330+14])
                      Tpat_value
                      pattern (src/parserAux.ml[126,4330+4]..src/parserAux.ml[126,4330+14])
                        Tpat_construct "Inferred"
                        [
                          pattern (src/parserAux.ml[126,4330+13]..src/parserAux.ml[126,4330+14])
                            Tpat_any
                        ]
                        None
                    expression (src/parserAux.ml[127,4348+6]..src/parserAux.ml[127,4348+18])
                      Texp_assert                      expression (src/parserAux.ml[127,4348+13]..src/parserAux.ml[127,4348+18])
                        Texp_construct "false"
                        []
                  <case>
                    pattern (src/parserAux.ml[128,4367+4]..src/parserAux.ml[128,4367+20])
                      Tpat_value
                      pattern (src/parserAux.ml[128,4367+4]..src/parserAux.ml[128,4367+20])
                        Tpat_construct "Declared"
                        [
                          pattern (src/parserAux.ml[128,4367+13]..src/parserAux.ml[128,4367+20])
                            Tpat_var "stretch/1053"
                        ]
                        None
                    expression (src/parserAux.ml[129,4391+6]..src/parserAux.ml[133,4544+12])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/parserAux.ml[129,4391+10]..src/parserAux.ml[129,4391+11])
                            Tpat_var "s/1054"
                          expression (src/parserAux.ml[129,4391+14]..src/parserAux.ml[129,4391+41])
                            Texp_field
                            expression (src/parserAux.ml[129,4391+14]..src/parserAux.ml[129,4391+21])
                              Texp_ident "stretch/1053"
                            "stretch_raw_content"
                      ]
                      expression (src/parserAux.ml[130,4436+6]..src/parserAux.ml[133,4544+12])
                        Texp_ifthenelse
                        expression (src/parserAux.ml[130,4436+9]..src/parserAux.ml[130,4436+70])
                          Texp_apply
                          expression (src/parserAux.ml[130,4436+9]..src/parserAux.ml[130,4436+47])
                            Texp_ident "Dune__exe!.Lexpointfree.validate_pointfree_action"
                          [
                            <arg>
                              Nolabel
                              expression (src/parserAux.ml[130,4436+48]..src/parserAux.ml[130,4436+70])
                                Texp_apply
                                expression (src/parserAux.ml[130,4436+49]..src/parserAux.ml[130,4436+67])
                                  Texp_ident "Stdlib!.Lexing.from_string"
                                [
                                  <arg>
                                    Optional "with_positions"
                                    expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                      Texp_construct "None"
                                      []
                                  <arg>
                                    Nolabel
                                    expression (src/parserAux.ml[130,4436+68]..src/parserAux.ml[130,4436+69])
                                      Texp_ident "s/1054"
                                ]
                          ]
                        expression (src/parserAux.ml[131,4512+8]..src/parserAux.ml[131,4512+20])
                          Texp_construct "Some"
                          [
                            expression (src/parserAux.ml[131,4512+13]..src/parserAux.ml[131,4512+20])
                              Texp_ident "stretch/1053"
                          ]
                        Some
                          expression (src/parserAux.ml[133,4544+8]..src/parserAux.ml[133,4544+12])
                            Texp_construct "None"
                            []
                ]
          ]
    ]
  structure_item (src/parserAux.ml[141,4803+0]..src/parserAux.ml[142,4864+78])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/parserAux.ml[141,4803+4]..src/parserAux.ml[141,4803+26])
          Tpat_var "valid_ocaml_identifier/1061"
        expression (src/parserAux.ml[141,4803+27]..src/parserAux.ml[142,4864+78]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/parserAux.ml[141,4803+28]..src/parserAux.ml[141,4803+29])
                extra
                  Tpat_extra_constraint
                  core_type (src/parserAux.ml[141,4803+32]..src/parserAux.ml[141,4803+50])
                    Ttyp_constr "Dune__exe!.Syntax.located"
                    [
                      core_type (src/parserAux.ml[141,4803+32]..src/parserAux.ml[141,4803+42])
                        Ttyp_constr "Dune__exe!.Syntax.identifier"
                        []
                    ]
                Tpat_alias "x/1063"
                pattern (src/parserAux.ml[141,4803+28]..src/parserAux.ml[141,4803+29])
                  Tpat_any
              expression (src/parserAux.ml[142,4864+2]..src/parserAux.ml[142,4864+78])
                extra
                  Texp_constraint
                  core_type (src/parserAux.ml[141,4803+54]..src/parserAux.ml[141,4803+58])
                    Ttyp_constr "bool/5!"
                    []
                Texp_apply
                expression (src/parserAux.ml[142,4864+2]..src/parserAux.ml[142,4864+37])
                  Texp_ident "Dune__exe!.Lexpointfree.valid_ocaml_identifier"
                [
                  <arg>
                    Nolabel
                    expression (src/parserAux.ml[142,4864+38]..src/parserAux.ml[142,4864+78])
                      Texp_apply
                      expression (src/parserAux.ml[142,4864+39]..src/parserAux.ml[142,4864+57])
                        Texp_ident "Stdlib!.Lexing.from_string"
                      [
                        <arg>
                          Optional "with_positions"
                          expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                            Texp_construct "None"
                            []
                        <arg>
                          Nolabel
                          expression (src/parserAux.ml[142,4864+58]..src/parserAux.ml[142,4864+77])
                            Texp_apply
                            expression (src/parserAux.ml[142,4864+59]..src/parserAux.ml[142,4864+74])
                              Texp_ident "Dune__exe!.Positions.value"
                            [
                              <arg>
                                Nolabel
                                expression (src/parserAux.ml[142,4864+75]..src/parserAux.ml[142,4864+76])
                                  Texp_ident "x/1063"
                            ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__ParserAux>
 "check_production_group"[value] -> <Dune__exe__ParserAux.21>;
 "early_producer"[type] -> <Dune__exe__ParserAux.0>;
 "early_producers"[type] -> <Dune__exe__ParserAux.1>;
 "early_production"[type] -> <Dune__exe__ParserAux.2>;
 "early_productions"[type] -> <Dune__exe__ParserAux.3>;
 "new_on_error_reduce_level"[value] -> <Dune__exe__ParserAux.10>;
 "new_precedence_level"[value] -> <Dune__exe__ParserAux.4>;
 "new_production_level"[value] -> <Dune__exe__ParserAux.8>;
 "normalize_producers"[value] -> <Dune__exe__ParserAux.37>;
 "override"[value] -> <Dune__exe__ParserAux.39>;
 "producer_names"[value] -> <Dune__exe__ParserAux.43>;
 "valid_ocaml_identifier"[value] -> <Dune__exe__ParserAux.50>;
 "validate_pointfree_action"[value] -> <Dune__exe__ParserAux.46>;
 }

(seq
  (let
    (new_precedence_level/544 =
       (let (c/545 = (makemutable 0 (int) 0))
         (function (param/2082, param/2083)
           (let (pos2/547 =a param/2083 pos1/546 =a param/2082)
             (seq (+:=1 c/545)
               (makeblock 0 (*,int,*,*)
                 (apply (field_imm 1 (global Dune__exe__InputFile!)) 0)
                 (field_int 0 c/545) pos1/546 pos2/547))))))
    (setfield_ptr(root-init) 0 (global Dune__exe__ParserAux!)
      new_precedence_level/544))
  (let
    (new_production_level/615 =
       (let (c/616 = (makemutable 0 (int) 0))
         (function param/617[int]
           (seq (+:=1 c/616)
             (makeblock 0 (*,int)
               (apply (field_imm 1 (global Dune__exe__InputFile!)) 0)
               (field_int 0 c/616))))))
    (setfield_ptr(root-init) 1 (global Dune__exe__ParserAux!)
      new_production_level/615))
  (let
    (new_on_error_reduce_level/618 =
       (field_imm 1 (global Dune__exe__ParserAux!)))
    (setfield_ptr(root-init) 2 (global Dune__exe__ParserAux!)
      new_on_error_reduce_level/618))
  (let
    (IdSet/846 =
       (apply
         (let (let/2084 = (field_imm 0 (global Stdlib__Set!)))
           (field_imm 0 (global Stdlib__Set!)))
         (let
           (compare/620 =
              (function id1/621 id2/622 : int
                (caml_compare
                  (apply (field_imm 0 (global Dune__exe__Positions!))
                    id1/621)
                  (apply (field_imm 0 (global Dune__exe__Positions!))
                    id2/622))))
           (makeblock 0 compare/620))))
    (seq (setfield_ptr(root-init) 9 (global Dune__exe__ParserAux!) IdSet/846)
      (let
        (defined_identifiers/847 =
           (function param/862 accu/850
             (let
               (*match*/2087 =a (field_imm 3 param/862)
                *match*/2086 =a (field_imm 2 param/862)
                ido/849 =a (field_imm 1 param/862)
                *match*/2085 =a (field_imm 0 param/862))
               (apply (field_imm 3 (global Dune__exe__Option!))
                 (field_imm 1 (field_imm 9 (global Dune__exe__ParserAux!)))
                 ido/849 accu/850))))
        (setfield_ptr(root-init) 10 (global Dune__exe__ParserAux!)
          defined_identifiers/847))
      (let
        (defined_identifiers/863 =
           (function producers/864
             (apply (field_imm 26 (global Stdlib__List!))
               (field_imm 10 (global Dune__exe__ParserAux!)) producers/864
               (field_imm 0 (field_imm 9 (global Dune__exe__ParserAux!))))))
        (setfield_ptr(root-init) 11 (global Dune__exe__ParserAux!)
          defined_identifiers/863))
      (let
        (check_production_group/931 =
           (function right_hand_sides/933 : int
             (if (isint right_hand_sides/933)
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/parserAux.ml" 69 6]))
               (let
                 (right_hand_sides/935 =a (field_imm 1 right_hand_sides/933)
                  *match*/2093 =a (field_imm 0 right_hand_sides/933)
                  *match*/2096 =a (field_imm 3 *match*/2093)
                  *match*/2095 =a (field_imm 2 *match*/2093)
                  *match*/2094 =a (field_imm 1 *match*/2093)
                  producers/934 =a (field_imm 0 *match*/2093)
                  ids/936 =
                    (apply (field_imm 11 (global Dune__exe__ParserAux!))
                      producers/934))
                 (apply (field_imm 17 (global Stdlib__List!))
                   (function (param/2088, param/2089, param/2090, param/2091)
                     : int
                     (let
                       (producers/937 =a param/2088
                        ids'/938 =
                          (apply
                            (field_imm 11 (global Dune__exe__ParserAux!))
                            producers/937))
                       (try
                         (let
                           (id/939 =
                              (apply
                                (field_imm 14
                                  (field_imm 9
                                    (global Dune__exe__ParserAux!)))
                                (apply
                                  (field_imm 4
                                    (field_imm 9
                                      (global Dune__exe__ParserAux!)))
                                  (apply
                                    (field_imm 7
                                      (field_imm 9
                                        (global Dune__exe__ParserAux!)))
                                    ids/936 ids'/938)
                                  (apply
                                    (field_imm 7
                                      (field_imm 9
                                        (global Dune__exe__ParserAux!)))
                                    ids'/938 ids/936))))
                           (apply (field_imm 5 (global Dune__exe__Error!))
                             (makeblock 0
                               (apply
                                 (field_imm 1 (global Dune__exe__Positions!))
                                 id/939)
                               0)
                             [0:
                              [11:
                               "two productions that share a semantic action must define exactly\nthe same identifiers. Here, \""
                               [2:
                                0
                                [11:
                                 "\" is defined\nin one production, but not in all of them."
                                 0]]]
                              "two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"%s\" is defined\nin one production, but not in all of them."]
                             (apply
                               (field_imm 0 (global Dune__exe__Positions!))
                               id/939)))
                        with exn/2092
                         (catch
                           (if (== exn/2092 (field_imm 7 (global Stdlib!))) 0
                             (exit 1))
                          with (1) (reraise exn/2092)))))
                   right_hand_sides/935)))))
        (setfield_ptr(root-init) 3 (global Dune__exe__ParserAux!)
          check_production_group/931))
      (let
        (normalize_producer/979 =
           (function i/981[int] param/988
             (let
               (attrs/985 =a (field_imm 3 param/988)
                parameter/984 =a (field_imm 2 param/988)
                opt_identifier/983 =a (field_imm 1 param/988)
                pos/982 =a (field_imm 0 param/988)
                id/986 =
                  (if (isint opt_identifier/983)
                    (apply (field_imm 3 (global Dune__exe__Positions!))
                      pos/982
                      (apply (field_imm 27 (global Stdlib!)) "_"
                        (apply (field_imm 32 (global Stdlib!)) (+ i/981 1))))
                    (let (id/987 =a (field_imm 0 opt_identifier/983)) id/987)))
               (makeblock 0 id/986 parameter/984 attrs/985))))
        (setfield_ptr(root-init) 12 (global Dune__exe__ParserAux!)
          normalize_producer/979))
      (let
        (normalize_producers/989 =
           (function producers/991
             (apply (field_imm 20 (global Stdlib__List!))
               (field_imm 12 (global Dune__exe__ParserAux!)) producers/991)))
        (setfield_ptr(root-init) 4 (global Dune__exe__ParserAux!)
          normalize_producers/989))
      (let
        (override/992 =
           (function pos/994 o1/995 o2/996
             (catch
               (if (isint o1/995)
                 (if (isint o2/996) (exit 2)
                   (let (*match*/2099 =a (field_imm 0 o2/996)) o2/996))
                 (if (isint o2/996) (exit 2)
                   (let
                     (*match*/2098 =a (field_imm 0 o2/996)
                      *match*/2097 =a (field_imm 0 o1/995))
                     (apply (field_imm 5 (global Dune__exe__Error!))
                       (makeblock 0 pos/994 0)
                       [0:
                        [11:
                         "this production carries two "
                         [12: '%' [11: "prec declarations." 0]]]
                        "this production carries two %%prec declarations."]))))
              with (2) o1/995)))
        (setfield_ptr(root-init) 5 (global Dune__exe__ParserAux!)
          override/992))
      (let
        (producer_names/997 =
           (function producers/999
             (apply (field_imm 9 (global Stdlib__Array!))
               (apply (field_imm 19 (global Stdlib__List!))
                 (function (param/2100, param/2101, param/2102, param/2103)
                   (let (oid/1048 =a param/2101)
                     (apply (field_imm 1 (global Dune__exe__Option!))
                       (field_imm 0 (global Dune__exe__Positions!)) oid/1048)))
                 producers/999))))
        (setfield_ptr(root-init) 6 (global Dune__exe__ParserAux!)
          producer_names/997))
      (let
        (validate_pointfree_action/1050 =
           (function ty/1052
             (switch* ty/1052
              case tag 0:
               (let
                 (stretch/1053 =a (field_imm 0 ty/1052)
                  s/1054 = (field_imm 3 stretch/1053))
                 (if
                   (apply (field_imm 2 (global Dune__exe__Lexpointfree!))
                     (apply (field_imm 2 (global Stdlib__Lexing!)) 0 s/1054))
                   (makeblock 0 stretch/1053) 0))
              case tag 1:
               (let (*match*/2104 =a (field_imm 0 ty/1052))
                 (raise
                   (makeblock 0 (global Assert_failure/28!)
                     [0: "src/parserAux.ml" 127 6]))))))
        (setfield_ptr(root-init) 7 (global Dune__exe__ParserAux!)
          validate_pointfree_action/1050))
      (let
        (valid_ocaml_identifier/1061 =
           (function x/1063 : int
             (apply (field_imm 4 (global Dune__exe__Lexpointfree!))
               (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                 (apply (field_imm 0 (global Dune__exe__Positions!)) x/1063)))))
        (setfield_ptr(root-init) 8 (global Dune__exe__ParserAux!)
          valid_ocaml_identifier/1061))
      0)))
(seq
  (let
    (new_precedence_level/544 =
       (let (c/545 = (makemutable 0 (int) 0))
         (function (param/2082, param/2083)
           (seq (+:=1 c/545)
             (makeblock 0 (*,int,*,*)
               (apply (field_imm 1 (global Dune__exe__InputFile!)) 0)
               (field_int 0 c/545) param/2082 param/2083)))))
    (setfield_ptr(root-init) 0 (global Dune__exe__ParserAux!)
      new_precedence_level/544))
  (let
    (new_production_level/615 =
       (let (c/616 = (makemutable 0 (int) 0))
         (function param/617[int]
           (seq (+:=1 c/616)
             (makeblock 0 (*,int)
               (apply (field_imm 1 (global Dune__exe__InputFile!)) 0)
               (field_int 0 c/616))))))
    (setfield_ptr(root-init) 1 (global Dune__exe__ParserAux!)
      new_production_level/615))
  (let
    (new_on_error_reduce_level/618 =
       (field_imm 1 (global Dune__exe__ParserAux!)))
    (setfield_ptr(root-init) 2 (global Dune__exe__ParserAux!)
      new_on_error_reduce_level/618))
  (let
    (IdSet/846 =
       (apply
         (let (let/2084 = (field_imm 0 (global Stdlib__Set!)))
           (field_imm 0 (global Stdlib__Set!)))
         (let
           (compare/620 =
              (function id1/621 id2/622 : int
                (caml_compare
                  (apply (field_imm 0 (global Dune__exe__Positions!))
                    id1/621)
                  (apply (field_imm 0 (global Dune__exe__Positions!))
                    id2/622))))
           (makeblock 0 compare/620))))
    (seq (setfield_ptr(root-init) 9 (global Dune__exe__ParserAux!) IdSet/846)
      (let
        (defined_identifiers/847 =
           (function param/862 accu/850
             (apply (field_imm 3 (global Dune__exe__Option!))
               (field_imm 1 (field_imm 9 (global Dune__exe__ParserAux!)))
               (field_imm 1 param/862) accu/850)))
        (setfield_ptr(root-init) 10 (global Dune__exe__ParserAux!)
          defined_identifiers/847))
      (let
        (defined_identifiers/863 =
           (function producers/864
             (apply (field_imm 26 (global Stdlib__List!))
               (field_imm 10 (global Dune__exe__ParserAux!)) producers/864
               (field_imm 0 (field_imm 9 (global Dune__exe__ParserAux!))))))
        (setfield_ptr(root-init) 11 (global Dune__exe__ParserAux!)
          defined_identifiers/863))
      (let
        (check_production_group/931 =
           (function right_hand_sides/933 : int
             (if (isint right_hand_sides/933)
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/parserAux.ml" 69 6]))
               (let
                 (ids/936 =
                    (apply (field_imm 11 (global Dune__exe__ParserAux!))
                      (field_imm 0 (field_imm 0 right_hand_sides/933))))
                 (apply (field_imm 17 (global Stdlib__List!))
                   (function (param/2088, param/2089, param/2090, param/2091)
                     : int
                     (let
                       (ids'/938 =
                          (apply
                            (field_imm 11 (global Dune__exe__ParserAux!))
                            param/2088))
                       (try
                         (let
                           (id/939 =
                              (apply
                                (field_imm 14
                                  (field_imm 9
                                    (global Dune__exe__ParserAux!)))
                                (apply
                                  (field_imm 4
                                    (field_imm 9
                                      (global Dune__exe__ParserAux!)))
                                  (apply
                                    (field_imm 7
                                      (field_imm 9
                                        (global Dune__exe__ParserAux!)))
                                    ids/936 ids'/938)
                                  (apply
                                    (field_imm 7
                                      (field_imm 9
                                        (global Dune__exe__ParserAux!)))
                                    ids'/938 ids/936))))
                           (apply (field_imm 5 (global Dune__exe__Error!))
                             (makeblock 0
                               (apply
                                 (field_imm 1 (global Dune__exe__Positions!))
                                 id/939)
                               0)
                             [0:
                              [11:
                               "two productions that share a semantic action must define exactly\nthe same identifiers. Here, \""
                               [2:
                                0
                                [11:
                                 "\" is defined\nin one production, but not in all of them."
                                 0]]]
                              "two productions that share a semantic action must define exactly\nthe same identifiers. Here, \"%s\" is defined\nin one production, but not in all of them."]
                             (apply
                               (field_imm 0 (global Dune__exe__Positions!))
                               id/939)))
                        with exn/2092
                         (if (== exn/2092 (field_imm 7 (global Stdlib!))) 0
                           (reraise exn/2092)))))
                   (field_imm 1 right_hand_sides/933))))))
        (setfield_ptr(root-init) 3 (global Dune__exe__ParserAux!)
          check_production_group/931))
      (let
        (normalize_producer/979 =
           (function i/981[int] param/988
             (let
               (opt_identifier/983 =a (field_imm 1 param/988)
                id/986 =
                  (if (isint opt_identifier/983)
                    (apply (field_imm 3 (global Dune__exe__Positions!))
                      (field_imm 0 param/988)
                      (apply (field_imm 27 (global Stdlib!)) "_"
                        (apply (field_imm 32 (global Stdlib!)) (+ i/981 1))))
                    (field_imm 0 opt_identifier/983)))
               (makeblock 0 id/986 (field_imm 2 param/988)
                 (field_imm 3 param/988)))))
        (setfield_ptr(root-init) 12 (global Dune__exe__ParserAux!)
          normalize_producer/979))
      (let
        (normalize_producers/989 =
           (function producers/991
             (apply (field_imm 20 (global Stdlib__List!))
               (field_imm 12 (global Dune__exe__ParserAux!)) producers/991)))
        (setfield_ptr(root-init) 4 (global Dune__exe__ParserAux!)
          normalize_producers/989))
      (let
        (override/992 =
           (function pos/994 o1/995 o2/996
             (catch
               (if (isint o1/995) (if (isint o2/996) (exit 2) o2/996)
                 (if (isint o2/996) (exit 2)
                   (apply (field_imm 5 (global Dune__exe__Error!))
                     (makeblock 0 pos/994 0)
                     [0:
                      [11:
                       "this production carries two "
                       [12: '%' [11: "prec declarations." 0]]]
                      "this production carries two %%prec declarations."])))
              with (2) o1/995)))
        (setfield_ptr(root-init) 5 (global Dune__exe__ParserAux!)
          override/992))
      (let
        (producer_names/997 =
           (function producers/999
             (apply (field_imm 9 (global Stdlib__Array!))
               (apply (field_imm 19 (global Stdlib__List!))
                 (function (param/2100, param/2101, param/2102, param/2103)
                   (apply (field_imm 1 (global Dune__exe__Option!))
                     (field_imm 0 (global Dune__exe__Positions!)) param/2101))
                 producers/999))))
        (setfield_ptr(root-init) 6 (global Dune__exe__ParserAux!)
          producer_names/997))
      (let
        (validate_pointfree_action/1050 =
           (function ty/1052
             (switch* ty/1052
              case tag 0:
               (let
                 (stretch/1053 =a (field_imm 0 ty/1052)
                  s/1054 = (field_imm 3 stretch/1053))
                 (if
                   (apply (field_imm 2 (global Dune__exe__Lexpointfree!))
                     (apply (field_imm 2 (global Stdlib__Lexing!)) 0 s/1054))
                   (makeblock 0 stretch/1053) 0))
              case tag 1:
               (raise
                 (makeblock 0 (global Assert_failure/28!)
                   [0: "src/parserAux.ml" 127 6])))))
        (setfield_ptr(root-init) 7 (global Dune__exe__ParserAux!)
          validate_pointfree_action/1050))
      (let
        (valid_ocaml_identifier/1061 =
           (function x/1063 : int
             (apply (field_imm 4 (global Dune__exe__Lexpointfree!))
               (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                 (apply (field_imm 0 (global Dune__exe__Positions!)) x/1063)))))
        (setfield_ptr(root-init) 8 (global Dune__exe__ParserAux!)
          valid_ocaml_identifier/1061))
      0)))

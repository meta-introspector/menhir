[
  structure_item (src/grammarFunctor.ml[14,1004+0]..[14,1004+16])
    Pstr_open Fresh
    module_expr (src/grammarFunctor.ml[14,1004+5]..[14,1004+16])
      Pmod_ident "BasicSyntax" (src/grammarFunctor.ml[14,1004+5]..[14,1004+16])
  structure_item (src/grammarFunctor.ml[15,1021+0]..[15,1021+11])
    Pstr_open Fresh
    module_expr (src/grammarFunctor.ml[15,1021+5]..[15,1021+11])
      Pmod_ident "Syntax" (src/grammarFunctor.ml[15,1021+5]..[15,1021+11])
  structure_item (src/grammarFunctor.ml[16,1033+0]..[16,1033+14])
    Pstr_open Fresh
    module_expr (src/grammarFunctor.ml[16,1033+5]..[16,1033+14])
      Pmod_ident "Positions" (src/grammarFunctor.ml[16,1033+5]..[16,1033+14])
  structure_item (src/grammarFunctor.ml[18,1049+0]..[1951,57601+3])
    Pstr_module
    "Make" (src/grammarFunctor.ml[18,1049+7]..[18,1049+11])
      module_expr (src/grammarFunctor.ml[18,1049+12]..[1951,57601+3])
        Pmod_functor "G" (src/grammarFunctor.ml[18,1049+13]..[18,1049+14])
        module_type (src/grammarFunctor.ml[18,1049+17]..[28,1377+3])
          Pmty_signature
          [
            signature_item (src/grammarFunctor.ml[21,1120+2]..[21,1120+34])
              Psig_value
              value_description "grammar" (src/grammarFunctor.ml[21,1120+6]..[21,1120+13]) (src/grammarFunctor.ml[21,1120+2]..[21,1120+34])
                core_type (src/grammarFunctor.ml[21,1120+15]..[21,1120+34])
                  Ptyp_constr "BasicSyntax.grammar" (src/grammarFunctor.ml[21,1120+15]..[21,1120+34])
                  []
                []
            signature_item (src/grammarFunctor.ml[26,1356+2]..[26,1356+19])
              Psig_value
              value_description "verbose" (src/grammarFunctor.ml[26,1356+6]..[26,1356+13]) (src/grammarFunctor.ml[26,1356+2]..[26,1356+19])
                core_type (src/grammarFunctor.ml[26,1356+15]..[26,1356+19])
                  Ptyp_constr "bool" (src/grammarFunctor.ml[26,1356+15]..[26,1356+19])
                  []
                []
          ]
        module_expr (src/grammarFunctor.ml[28,1377+5]..[1951,57601+3])
          Pmod_functor ()
          module_expr (src/grammarFunctor.ml[28,1377+10]..[1951,57601+3])
            Pmod_structure
            [
              structure_item (src/grammarFunctor.ml[30,1395+2]..[30,1395+8])
                Pstr_open Fresh
                module_expr (src/grammarFunctor.ml[30,1395+7]..[30,1395+8])
                  Pmod_ident "G" (src/grammarFunctor.ml[30,1395+7]..[30,1395+8])
              structure_item (src/grammarFunctor.ml[38,1652+0]..[43,1878+14])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[38,1652+4]..[38,1652+9])
                      Ppat_var "index" (src/grammarFunctor.ml[38,1652+4]..[38,1652+9])
                    expression (src/grammarFunctor.ml[38,1652+10]..[43,1878+14]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[38,1652+10]..[38,1652+33])
                        Ppat_constraint
                        pattern (src/grammarFunctor.ml[38,1652+11]..[38,1652+18])
                          Ppat_var "strings" (src/grammarFunctor.ml[38,1652+11]..[38,1652+18])
                        core_type (src/grammarFunctor.ml[38,1652+21]..[38,1652+32])
                          Ptyp_constr "list" (src/grammarFunctor.ml[38,1652+28]..[38,1652+32])
                          [
                            core_type (src/grammarFunctor.ml[38,1652+21]..[38,1652+27])
                              Ptyp_constr "string" (src/grammarFunctor.ml[38,1652+21]..[38,1652+27])
                              []
                          ]
                      expression (src/grammarFunctor.ml[38,1652+34]..[43,1878+14])
                        Pexp_constraint
                        expression (src/grammarFunctor.ml[39,1727+2]..[43,1878+14])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[39,1727+6]..[39,1727+10])
                                Ppat_var "name" (src/grammarFunctor.ml[39,1727+6]..[39,1727+10])
                              expression (src/grammarFunctor.ml[39,1727+13]..[39,1727+34])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[39,1727+13]..[39,1727+26])
                                  Pexp_ident "Array.of_list" (src/grammarFunctor.ml[39,1727+13]..[39,1727+26])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[39,1727+27]..[39,1727+34])
                                      Pexp_ident "strings" (src/grammarFunctor.ml[39,1727+27]..[39,1727+34])
                                ]
                            <def>
                              pattern (src/grammarFunctor.ml[40,1762+6]..[40,1762+12])
                                Ppat_tuple
                                [
                                  pattern (src/grammarFunctor.ml[40,1762+6]..[40,1762+7])
                                    Ppat_var "n" (src/grammarFunctor.ml[40,1762+6]..[40,1762+7])
                                  pattern (src/grammarFunctor.ml[40,1762+9]..[40,1762+12])
                                    Ppat_var "map" (src/grammarFunctor.ml[40,1762+9]..[40,1762+12])
                                ]
                              expression (src/grammarFunctor.ml[40,1762+15]..[42,1842+32])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[40,1762+15]..[40,1762+29])
                                  Pexp_ident "List.fold_left" (src/grammarFunctor.ml[40,1762+15]..[40,1762+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[40,1762+30]..[42,1842+3])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[40,1762+35]..[40,1762+43])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[40,1762+36]..[40,1762+37])
                                            Ppat_var "n" (src/grammarFunctor.ml[40,1762+36]..[40,1762+37])
                                          pattern (src/grammarFunctor.ml[40,1762+39]..[40,1762+42])
                                            Ppat_var "map" (src/grammarFunctor.ml[40,1762+39]..[40,1762+42])
                                        ]
                                      expression (src/grammarFunctor.ml[40,1762+44]..[41,1811+30]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[40,1762+44]..[40,1762+45])
                                          Ppat_var "s" (src/grammarFunctor.ml[40,1762+44]..[40,1762+45])
                                        expression (src/grammarFunctor.ml[41,1811+4]..[41,1811+30])
                                          Pexp_tuple
                                          [
                                            expression (src/grammarFunctor.ml[41,1811+4]..[41,1811+7])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[41,1811+5]..[41,1811+6])
                                                Pexp_ident "+" (src/grammarFunctor.ml[41,1811+5]..[41,1811+6])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[41,1811+4]..[41,1811+5])
                                                    Pexp_ident "n" (src/grammarFunctor.ml[41,1811+4]..[41,1811+5])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[41,1811+6]..[41,1811+7])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                            expression (src/grammarFunctor.ml[41,1811+9]..[41,1811+30])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[41,1811+9]..[41,1811+22])
                                                Pexp_ident "StringMap.add" (src/grammarFunctor.ml[41,1811+9]..[41,1811+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[41,1811+23]..[41,1811+24])
                                                    Pexp_ident "s" (src/grammarFunctor.ml[41,1811+23]..[41,1811+24])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[41,1811+25]..[41,1811+26])
                                                    Pexp_ident "n" (src/grammarFunctor.ml[41,1811+25]..[41,1811+26])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[41,1811+27]..[41,1811+30])
                                                    Pexp_ident "map" (src/grammarFunctor.ml[41,1811+27]..[41,1811+30])
                                              ]
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[42,1842+4]..[42,1842+24])
                                      Pexp_tuple
                                      [
                                        expression (src/grammarFunctor.ml[42,1842+5]..[42,1842+6])
                                          Pexp_constant PConst_int (0,None)
                                        expression (src/grammarFunctor.ml[42,1842+8]..[42,1842+23])
                                          Pexp_ident "StringMap.empty" (src/grammarFunctor.ml[42,1842+8]..[42,1842+23])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[42,1842+25]..[42,1842+32])
                                      Pexp_ident "strings" (src/grammarFunctor.ml[42,1842+25]..[42,1842+32])
                                ]
                          ]
                          expression (src/grammarFunctor.ml[43,1878+2]..[43,1878+14])
                            Pexp_tuple
                            [
                              expression (src/grammarFunctor.ml[43,1878+2]..[43,1878+3])
                                Pexp_ident "n" (src/grammarFunctor.ml[43,1878+2]..[43,1878+3])
                              expression (src/grammarFunctor.ml[43,1878+5]..[43,1878+9])
                                Pexp_ident "name" (src/grammarFunctor.ml[43,1878+5]..[43,1878+9])
                              expression (src/grammarFunctor.ml[43,1878+11]..[43,1878+14])
                                Pexp_ident "map" (src/grammarFunctor.ml[43,1878+11]..[43,1878+14])
                            ]
                        core_type (src/grammarFunctor.ml[38,1652+36]..[38,1652+72])
                          Ptyp_tuple
                          [
                            core_type (src/grammarFunctor.ml[38,1652+36]..[38,1652+39])
                              Ptyp_constr "int" (src/grammarFunctor.ml[38,1652+36]..[38,1652+39])
                              []
                            core_type (src/grammarFunctor.ml[38,1652+42]..[38,1652+54])
                              Ptyp_constr "array" (src/grammarFunctor.ml[38,1652+49]..[38,1652+54])
                              [
                                core_type (src/grammarFunctor.ml[38,1652+42]..[38,1652+48])
                                  Ptyp_constr "string" (src/grammarFunctor.ml[38,1652+42]..[38,1652+48])
                                  []
                              ]
                            core_type (src/grammarFunctor.ml[38,1652+57]..[38,1652+72])
                              Ptyp_constr "StringMap.t" (src/grammarFunctor.ml[38,1652+61]..[38,1652+72])
                              [
                                core_type (src/grammarFunctor.ml[38,1652+57]..[38,1652+60])
                                  Ptyp_constr "int" (src/grammarFunctor.ml[38,1652+57]..[38,1652+60])
                                  []
                              ]
                          ]
                ]
              structure_item (src/grammarFunctor.ml[48,2033+0]..[95,3734+3])
                Pstr_module
                "TokPrecedence" (src/grammarFunctor.ml[48,2033+7]..[48,2033+20])
                  module_expr (src/grammarFunctor.ml[48,2033+23]..[95,3734+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[54,2250+2]..[55,2288+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[54,2250+6]..[54,2250+17])
                              Ppat_var "ever_useful" (src/grammarFunctor.ml[54,2250+6]..[54,2250+17])
                            core_type (src/grammarFunctor.ml[54,2250+20]..[54,2250+35])
                              Ptyp_constr "ref" (src/grammarFunctor.ml[54,2250+32]..[54,2250+35])
                              [
                                core_type (src/grammarFunctor.ml[54,2250+20]..[54,2250+31])
                                  Ptyp_constr "StringSet.t" (src/grammarFunctor.ml[54,2250+20]..[54,2250+31])
                                  []
                              ]
                            expression (src/grammarFunctor.ml[55,2288+4]..[55,2288+23])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[55,2288+4]..[55,2288+7])
                                Pexp_ident "ref" (src/grammarFunctor.ml[55,2288+4]..[55,2288+7])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[55,2288+8]..[55,2288+23])
                                    Pexp_ident "StringSet.empty" (src/grammarFunctor.ml[55,2288+8]..[55,2288+23])
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[57,2313+2]..[58,2328+48])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[57,2313+6]..[57,2313+9])
                              Ppat_var "use" (src/grammarFunctor.ml[57,2313+6]..[57,2313+9])
                            expression (src/grammarFunctor.ml[57,2313+10]..[58,2328+48]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[57,2313+10]..[57,2313+12])
                                Ppat_var "id" (src/grammarFunctor.ml[57,2313+10]..[57,2313+12])
                              expression (src/grammarFunctor.ml[58,2328+4]..[58,2328+48])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[58,2328+16]..[58,2328+18])
                                  Pexp_ident ":=" (src/grammarFunctor.ml[58,2328+16]..[58,2328+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[58,2328+4]..[58,2328+15])
                                      Pexp_ident "ever_useful" (src/grammarFunctor.ml[58,2328+4]..[58,2328+15])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[58,2328+19]..[58,2328+48])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[58,2328+19]..[58,2328+32])
                                        Pexp_ident "StringSet.add" (src/grammarFunctor.ml[58,2328+19]..[58,2328+32])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[58,2328+33]..[58,2328+35])
                                            Pexp_ident "id" (src/grammarFunctor.ml[58,2328+33]..[58,2328+35])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[58,2328+36]..[58,2328+48])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[58,2328+36]..[58,2328+37])
                                              Pexp_ident "!" (src/grammarFunctor.ml[58,2328+36]..[58,2328+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[58,2328+37]..[58,2328+48])
                                                  Pexp_ident "ever_useful" (src/grammarFunctor.ml[58,2328+37]..[58,2328+48])
                                            ]
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[68,2817+2]..[69,2847+43])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[68,2817+6]..[68,2817+13])
                              Ppat_var "levelip" (src/grammarFunctor.ml[68,2817+6]..[68,2817+13])
                            expression (src/grammarFunctor.ml[68,2817+14]..[69,2847+43]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[68,2817+14]..[68,2817+16])
                                Ppat_var "id" (src/grammarFunctor.ml[68,2817+14]..[68,2817+16])
                              expression (src/grammarFunctor.ml[68,2817+17]..[69,2847+43]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[68,2817+17]..[68,2817+27])
                                  Ppat_var "properties" (src/grammarFunctor.ml[68,2817+17]..[68,2817+27])
                                expression (src/grammarFunctor.ml[69,2847+4]..[69,2847+43])
                                  Pexp_tuple
                                  [
                                    expression (src/grammarFunctor.ml[69,2847+4]..[69,2847+17])
                                      Pexp_lazy
                                      expression (src/grammarFunctor.ml[69,2847+9]..[69,2847+17])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[69,2847+10]..[69,2847+13])
                                          Pexp_ident "use" (src/grammarFunctor.ml[69,2847+10]..[69,2847+13])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[69,2847+14]..[69,2847+16])
                                              Pexp_ident "id" (src/grammarFunctor.ml[69,2847+14]..[69,2847+16])
                                        ]
                                    expression (src/grammarFunctor.ml[69,2847+19]..[69,2847+43])
                                      Pexp_field
                                      expression (src/grammarFunctor.ml[69,2847+19]..[69,2847+29])
                                        Pexp_ident "properties" (src/grammarFunctor.ml[69,2847+19]..[69,2847+29])
                                      "tk_precedence" (src/grammarFunctor.ml[69,2847+30]..[69,2847+43])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[71,2892+2]..[78,3089+25])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[71,2892+6]..[71,2892+12])
                              Ppat_var "leveli" (src/grammarFunctor.ml[71,2892+6]..[71,2892+12])
                            expression (src/grammarFunctor.ml[71,2892+13]..[78,3089+25]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[71,2892+13]..[71,2892+15])
                                Ppat_var "id" (src/grammarFunctor.ml[71,2892+13]..[71,2892+15])
                              expression (src/grammarFunctor.ml[72,2910+4]..[78,3089+25])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[72,2910+8]..[72,2910+18])
                                      Ppat_var "properties" (src/grammarFunctor.ml[72,2910+8]..[72,2910+18])
                                    expression (src/grammarFunctor.ml[73,2931+6]..[76,3006+20])
                                      Pexp_try
                                      expression (src/grammarFunctor.ml[74,2941+8]..[74,2941+40])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[74,2941+8]..[74,2941+22])
                                          Pexp_ident "StringMap.find" (src/grammarFunctor.ml[74,2941+8]..[74,2941+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[74,2941+23]..[74,2941+25])
                                              Pexp_ident "id" (src/grammarFunctor.ml[74,2941+23]..[74,2941+25])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[74,2941+26]..[74,2941+40])
                                              Pexp_field
                                              expression (src/grammarFunctor.ml[74,2941+26]..[74,2941+33])
                                                Pexp_ident "grammar" (src/grammarFunctor.ml[74,2941+26]..[74,2941+33])
                                              "tokens" (src/grammarFunctor.ml[74,2941+34]..[74,2941+40])
                                        ]
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[75,2982+11]..[75,2982+20])
                                            Ppat_construct "Not_found" (src/grammarFunctor.ml[75,2982+11]..[75,2982+20])
                                            None
                                          expression (src/grammarFunctor.ml[76,3006+8]..[76,3006+20])
                                            Pexp_assert
                                            expression (src/grammarFunctor.ml[76,3006+15]..[76,3006+20])
                                              Pexp_construct "false" (src/grammarFunctor.ml[76,3006+15]..[76,3006+20])
                                              None
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[78,3089+4]..[78,3089+25])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[78,3089+4]..[78,3089+11])
                                    Pexp_ident "levelip" (src/grammarFunctor.ml[78,3089+4]..[78,3089+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[78,3089+12]..[78,3089+14])
                                        Pexp_ident "id" (src/grammarFunctor.ml[78,3089+12]..[78,3089+14])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[78,3089+15]..[78,3089+25])
                                        Pexp_ident "properties" (src/grammarFunctor.ml[78,3089+15]..[78,3089+25])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[84,3320+2]..[93,3712+20])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[84,3320+6]..[84,3320+17])
                              Ppat_var "diagnostics" (src/grammarFunctor.ml[84,3320+6]..[84,3320+17])
                            expression (src/grammarFunctor.ml[84,3320+18]..[93,3712+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[84,3320+18]..[84,3320+20])
                                Ppat_construct "()" (src/grammarFunctor.ml[84,3320+18]..[84,3320+20])
                                None
                              expression (src/grammarFunctor.ml[85,3343+4]..[93,3712+20])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[85,3343+4]..[85,3343+18])
                                  Pexp_ident "StringMap.iter" (src/grammarFunctor.ml[85,3343+4]..[85,3343+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[85,3343+19]..[93,3712+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[85,3343+24]..[85,3343+26])
                                        Ppat_var "id" (src/grammarFunctor.ml[85,3343+24]..[85,3343+26])
                                      expression (src/grammarFunctor.ml[85,3343+27]..[92,3640+71]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[85,3343+27]..[85,3343+37])
                                          Ppat_var "properties" (src/grammarFunctor.ml[85,3343+27]..[85,3343+37])
                                        expression (src/grammarFunctor.ml[86,3384+6]..[92,3640+71])
                                          Pexp_ifthenelse
                                          expression (src/grammarFunctor.ml[86,3384+9]..[86,3384+44])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[86,3384+9]..[86,3384+12])
                                              Pexp_ident "not" (src/grammarFunctor.ml[86,3384+9]..[86,3384+12])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[86,3384+13]..[86,3384+44])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[86,3384+14]..[86,3384+27])
                                                    Pexp_ident "StringSet.mem" (src/grammarFunctor.ml[86,3384+14]..[86,3384+27])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[86,3384+28]..[86,3384+30])
                                                        Pexp_ident "id" (src/grammarFunctor.ml[86,3384+28]..[86,3384+30])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[86,3384+31]..[86,3384+43])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[86,3384+31]..[86,3384+32])
                                                          Pexp_ident "!" (src/grammarFunctor.ml[86,3384+31]..[86,3384+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[86,3384+32]..[86,3384+43])
                                                              Pexp_ident "ever_useful" (src/grammarFunctor.ml[86,3384+32]..[86,3384+43])
                                                        ]
                                                  ]
                                            ]
                                          expression (src/grammarFunctor.ml[87,3434+8]..[92,3640+71])
                                            Pexp_match
                                            expression (src/grammarFunctor.ml[87,3434+14]..[87,3434+38])
                                              Pexp_field
                                              expression (src/grammarFunctor.ml[87,3434+14]..[87,3434+24])
                                                Pexp_ident "properties" (src/grammarFunctor.ml[87,3434+14]..[87,3434+24])
                                              "tk_precedence" (src/grammarFunctor.ml[87,3434+25]..[87,3434+38])
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[88,3478+10]..[88,3478+29])
                                                  Ppat_construct "UndefinedPrecedence" (src/grammarFunctor.ml[88,3478+10]..[88,3478+29])
                                                  None
                                                expression (src/grammarFunctor.ml[89,3511+12]..[89,3511+14])
                                                  Pexp_construct "()" (src/grammarFunctor.ml[89,3511+12]..[89,3511+14])
                                                  None
                                              <case>
                                                pattern (src/grammarFunctor.ml[90,3526+10]..[90,3526+44])
                                                  Ppat_construct "PrecedenceLevel" (src/grammarFunctor.ml[90,3526+10]..[90,3526+25])
                                                  Some
                                                    []
                                                    pattern (src/grammarFunctor.ml[90,3526+26]..[90,3526+44])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[90,3526+27]..[90,3526+28])
                                                          Ppat_any
                                                        pattern (src/grammarFunctor.ml[90,3526+30]..[90,3526+31])
                                                          Ppat_any
                                                        pattern (src/grammarFunctor.ml[90,3526+33]..[90,3526+37])
                                                          Ppat_var "pos1" (src/grammarFunctor.ml[90,3526+33]..[90,3526+37])
                                                        pattern (src/grammarFunctor.ml[90,3526+39]..[90,3526+43])
                                                          Ppat_var "pos2" (src/grammarFunctor.ml[90,3526+39]..[90,3526+43])
                                                      ]
                                                expression (src/grammarFunctor.ml[91,3574+12]..[92,3640+71])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[91,3574+12]..[91,3574+33])
                                                    Pexp_ident "Error.grammar_warning" (src/grammarFunctor.ml[91,3574+12]..[91,3574+33])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[91,3574+34]..[91,3574+65])
                                                        Pexp_construct "::" (src/grammarFunctor.ml[91,3574+35]..[91,3574+65]) ghost
                                                        Some
                                                          expression (src/grammarFunctor.ml[91,3574+35]..[91,3574+65]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/grammarFunctor.ml[91,3574+35]..[91,3574+64])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[91,3574+35]..[91,3574+51])
                                                                  Pexp_ident "Positions.import" (src/grammarFunctor.ml[91,3574+35]..[91,3574+51])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[91,3574+52]..[91,3574+64])
                                                                      Pexp_tuple
                                                                      [
expression (src/grammarFunctor.ml[91,3574+53]..[91,3574+57])
  Pexp_ident "pos1" (src/grammarFunctor.ml[91,3574+53]..[91,3574+57])
expression (src/grammarFunctor.ml[91,3574+59]..[91,3574+63])
  Pexp_ident "pos2" (src/grammarFunctor.ml[91,3574+59]..[91,3574+63])
                                                                      ]
                                                                ]
                                                              expression (src/grammarFunctor.ml[91,3574+64]..[91,3574+65]) ghost
                                                                Pexp_construct "[]" (src/grammarFunctor.ml[91,3574+64]..[91,3574+65]) ghost
                                                                None
                                                            ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[92,3640+14]..[92,3640+68])
                                                        Pexp_constant PConst_string("the precedence level assigned to %s is never useful.",(src/grammarFunctor.ml[92,3640+15]..[92,3640+67]),None)
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[92,3640+69]..[92,3640+71])
                                                        Pexp_ident "id" (src/grammarFunctor.ml[92,3640+69]..[92,3640+71])
                                                  ]
                                            ]
                                          None
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[93,3712+6]..[93,3712+20])
                                      Pexp_field
                                      expression (src/grammarFunctor.ml[93,3712+6]..[93,3712+13])
                                        Pexp_ident "grammar" (src/grammarFunctor.ml[93,3712+6]..[93,3712+13])
                                      "tokens" (src/grammarFunctor.ml[93,3712+14]..[93,3712+20])
                                ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[100,3839+0]..[203,5983+3])
                Pstr_module
                "Nonterminal" (src/grammarFunctor.ml[100,3839+7]..[100,3839+18])
                  module_expr (src/grammarFunctor.ml[100,3839+21]..[203,5983+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[102,3868+2]..[102,3868+14])
                        Pstr_type Rec
                        [
                          type_declaration "t" (src/grammarFunctor.ml[102,3868+7]..[102,3868+8]) (src/grammarFunctor.ml[102,3868+2]..[102,3868+14])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[102,3868+11]..[102,3868+14])
                                  Ptyp_constr "int" (src/grammarFunctor.ml[102,3868+11]..[102,3868+14])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[104,3884+2]..[104,3884+15])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[104,3884+6]..[104,3884+9])
                              Ppat_var "n2i" (src/grammarFunctor.ml[104,3884+6]..[104,3884+9])
                            expression (src/grammarFunctor.ml[104,3884+10]..[104,3884+15]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[104,3884+10]..[104,3884+11])
                                Ppat_var "i" (src/grammarFunctor.ml[104,3884+10]..[104,3884+11])
                              expression (src/grammarFunctor.ml[104,3884+14]..[104,3884+15])
                                Pexp_ident "i" (src/grammarFunctor.ml[104,3884+14]..[104,3884+15])
                        ]
                      structure_item (src/grammarFunctor.ml[106,3901+2]..[107,3935+13])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[106,3901+6]..[106,3901+11])
                              Ppat_var "equal" (src/grammarFunctor.ml[106,3901+6]..[106,3901+11])
                            expression (src/grammarFunctor.ml[106,3901+12]..[107,3935+13]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[106,3901+12]..[106,3901+21])
                                Ppat_constraint
                                pattern (src/grammarFunctor.ml[106,3901+13]..[106,3901+16])
                                  Ppat_var "nt1" (src/grammarFunctor.ml[106,3901+13]..[106,3901+16])
                                core_type (src/grammarFunctor.ml[106,3901+19]..[106,3901+20])
                                  Ptyp_constr "t" (src/grammarFunctor.ml[106,3901+19]..[106,3901+20])
                                  []
                              expression (src/grammarFunctor.ml[106,3901+22]..[107,3935+13]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[106,3901+22]..[106,3901+31])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[106,3901+23]..[106,3901+26])
                                    Ppat_var "nt2" (src/grammarFunctor.ml[106,3901+23]..[106,3901+26])
                                  core_type (src/grammarFunctor.ml[106,3901+29]..[106,3901+30])
                                    Ptyp_constr "t" (src/grammarFunctor.ml[106,3901+29]..[106,3901+30])
                                    []
                                expression (src/grammarFunctor.ml[107,3935+4]..[107,3935+13])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[107,3935+8]..[107,3935+9])
                                    Pexp_ident "=" (src/grammarFunctor.ml[107,3935+8]..[107,3935+9])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[107,3935+4]..[107,3935+7])
                                        Pexp_ident "nt1" (src/grammarFunctor.ml[107,3935+4]..[107,3935+7])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[107,3935+10]..[107,3935+13])
                                        Pexp_ident "nt2" (src/grammarFunctor.ml[107,3935+10]..[107,3935+13])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[109,3950+2]..[109,3950+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[109,3950+6]..[109,3950+13])
                              Ppat_var "compare" (src/grammarFunctor.ml[109,3950+6]..[109,3950+13])
                            expression (src/grammarFunctor.ml[109,3950+16]..[109,3950+19])
                              Pexp_ident "-" (src/grammarFunctor.ml[109,3950+16]..[109,3950+19])
                        ]
                      structure_item (src/grammarFunctor.ml[115,4139+2]..[116,4170+83])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[115,4139+6]..[115,4139+28])
                              Ppat_var "new_start_nonterminals" (src/grammarFunctor.ml[115,4139+6]..[115,4139+28])
                            expression (src/grammarFunctor.ml[116,4170+4]..[116,4170+83])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[116,4170+4]..[116,4170+18])
                                Pexp_ident "StringSet.fold" (src/grammarFunctor.ml[116,4170+4]..[116,4170+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[116,4170+19]..[116,4170+58])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[116,4170+24]..[116,4170+30])
                                      Ppat_var "symbol" (src/grammarFunctor.ml[116,4170+24]..[116,4170+30])
                                    expression (src/grammarFunctor.ml[116,4170+31]..[116,4170+57]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[116,4170+31]..[116,4170+33])
                                        Ppat_var "ss" (src/grammarFunctor.ml[116,4170+31]..[116,4170+33])
                                      expression (src/grammarFunctor.ml[116,4170+37]..[116,4170+57])
                                        Pexp_construct "::" (src/grammarFunctor.ml[116,4170+52]..[116,4170+54])
                                        Some
                                          expression (src/grammarFunctor.ml[116,4170+37]..[116,4170+57]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/grammarFunctor.ml[116,4170+37]..[116,4170+51])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[116,4170+45]..[116,4170+46])
                                                  Pexp_ident "^" (src/grammarFunctor.ml[116,4170+45]..[116,4170+46])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[116,4170+38]..[116,4170+44])
                                                      Pexp_ident "symbol" (src/grammarFunctor.ml[116,4170+38]..[116,4170+44])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[116,4170+47]..[116,4170+50])
                                                      Pexp_constant PConst_string("'",(src/grammarFunctor.ml[116,4170+48]..[116,4170+49]),None)
                                                ]
                                              expression (src/grammarFunctor.ml[116,4170+55]..[116,4170+57])
                                                Pexp_ident "ss" (src/grammarFunctor.ml[116,4170+55]..[116,4170+57])
                                            ]
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[116,4170+59]..[116,4170+80])
                                    Pexp_field
                                    expression (src/grammarFunctor.ml[116,4170+59]..[116,4170+66])
                                      Pexp_ident "grammar" (src/grammarFunctor.ml[116,4170+59]..[116,4170+66])
                                    "start_symbols" (src/grammarFunctor.ml[116,4170+67]..[116,4170+80])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[116,4170+81]..[116,4170+83])
                                    Pexp_construct "[]" (src/grammarFunctor.ml[116,4170+81]..[116,4170+83])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[118,4255+2]..[119,4285+24])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[118,4255+6]..[118,4255+27])
                              Ppat_var "original_nonterminals" (src/grammarFunctor.ml[118,4255+6]..[118,4255+27])
                            expression (src/grammarFunctor.ml[119,4285+4]..[119,4285+24])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[119,4285+4]..[119,4285+16])
                                Pexp_ident "nonterminals" (src/grammarFunctor.ml[119,4285+4]..[119,4285+16])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[119,4285+17]..[119,4285+24])
                                    Pexp_ident "grammar" (src/grammarFunctor.ml[119,4285+17]..[119,4285+24])
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[121,4311+2]..[122,4325+38])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[121,4311+6]..[121,4311+11])
                              Ppat_var "start" (src/grammarFunctor.ml[121,4311+6]..[121,4311+11])
                            expression (src/grammarFunctor.ml[122,4325+4]..[122,4325+38])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[122,4325+4]..[122,4325+15])
                                Pexp_ident "List.length" (src/grammarFunctor.ml[122,4325+4]..[122,4325+15])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[122,4325+16]..[122,4325+38])
                                    Pexp_ident "new_start_nonterminals" (src/grammarFunctor.ml[122,4325+16]..[122,4325+38])
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[124,4365+2]..[125,4431+58])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[124,4365+6]..[124,4365+63])
                              Ppat_tuple
                              [
                                pattern (src/grammarFunctor.ml[124,4365+6]..[124,4365+15])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[124,4365+7]..[124,4365+8])
                                    Ppat_var "n" (src/grammarFunctor.ml[124,4365+7]..[124,4365+8])
                                  core_type (src/grammarFunctor.ml[124,4365+11]..[124,4365+14])
                                    Ptyp_constr "int" (src/grammarFunctor.ml[124,4365+11]..[124,4365+14])
                                    []
                                pattern (src/grammarFunctor.ml[124,4365+17]..[124,4365+38])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[124,4365+18]..[124,4365+22])
                                    Ppat_var "name" (src/grammarFunctor.ml[124,4365+18]..[124,4365+22])
                                  core_type (src/grammarFunctor.ml[124,4365+25]..[124,4365+37])
                                    Ptyp_constr "array" (src/grammarFunctor.ml[124,4365+32]..[124,4365+37])
                                    [
                                      core_type (src/grammarFunctor.ml[124,4365+25]..[124,4365+31])
                                        Ptyp_constr "string" (src/grammarFunctor.ml[124,4365+25]..[124,4365+31])
                                        []
                                    ]
                                pattern (src/grammarFunctor.ml[124,4365+40]..[124,4365+63])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[124,4365+41]..[124,4365+44])
                                    Ppat_var "map" (src/grammarFunctor.ml[124,4365+41]..[124,4365+44])
                                  core_type (src/grammarFunctor.ml[124,4365+47]..[124,4365+62])
                                    Ptyp_constr "StringMap.t" (src/grammarFunctor.ml[124,4365+51]..[124,4365+62])
                                    [
                                      core_type (src/grammarFunctor.ml[124,4365+47]..[124,4365+50])
                                        Ptyp_constr "int" (src/grammarFunctor.ml[124,4365+47]..[124,4365+50])
                                        []
                                    ]
                              ]
                            expression (src/grammarFunctor.ml[125,4431+4]..[125,4431+58])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[125,4431+4]..[125,4431+9])
                                Pexp_ident "index" (src/grammarFunctor.ml[125,4431+4]..[125,4431+9])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[125,4431+10]..[125,4431+58])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[125,4431+34]..[125,4431+35])
                                      Pexp_ident "@" (src/grammarFunctor.ml[125,4431+34]..[125,4431+35])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[125,4431+11]..[125,4431+33])
                                          Pexp_ident "new_start_nonterminals" (src/grammarFunctor.ml[125,4431+11]..[125,4431+33])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[125,4431+36]..[125,4431+57])
                                          Pexp_ident "original_nonterminals" (src/grammarFunctor.ml[125,4431+36]..[125,4431+57])
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[127,4491+2]..[133,4684+7])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[127,4491+6]..[127,4491+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[127,4491+6]..[127,4491+8])
                              None
                            expression (src/grammarFunctor.ml[128,4502+4]..[133,4684+7])
                              Pexp_ifthenelse
                              expression (src/grammarFunctor.ml[128,4502+7]..[128,4502+14])
                                Pexp_ident "verbose" (src/grammarFunctor.ml[128,4502+7]..[128,4502+14])
                              expression (src/grammarFunctor.ml[129,4522+6]..[133,4684+7])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[129,4522+6]..[129,4522+16])
                                  Pexp_ident "Error.logG" (src/grammarFunctor.ml[129,4522+6]..[129,4522+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[129,4522+17]..[129,4522+18])
                                      Pexp_constant PConst_int (1,None)
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[129,4522+19]..[133,4684+7])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[129,4522+24]..[129,4522+25])
                                        Ppat_var "f" (src/grammarFunctor.ml[129,4522+24]..[129,4522+25])
                                      expression (src/grammarFunctor.ml[130,4551+8]..[132,4656+27])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[130,4551+8]..[130,4551+22])
                                          Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[130,4551+8]..[130,4551+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[130,4551+23]..[130,4551+24])
                                              Pexp_ident "f" (src/grammarFunctor.ml[130,4551+23]..[130,4551+24])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[131,4576+10]..[131,4576+79])
                                              Pexp_constant PConst_string("Grammar has %d nonterminal symbols, among which %d start symbols.\n",(src/grammarFunctor.ml[131,4576+11]..[131,4576+78]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[132,4656+10]..[132,4656+21])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[132,4656+13]..[132,4656+14])
                                                Pexp_ident "-" (src/grammarFunctor.ml[132,4656+13]..[132,4656+14])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[132,4656+11]..[132,4656+12])
                                                    Pexp_ident "n" (src/grammarFunctor.ml[132,4656+11]..[132,4656+12])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[132,4656+15]..[132,4656+20])
                                                    Pexp_ident "start" (src/grammarFunctor.ml[132,4656+15]..[132,4656+20])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[132,4656+22]..[132,4656+27])
                                              Pexp_ident "start" (src/grammarFunctor.ml[132,4656+22]..[132,4656+27])
                                        ]
                                ]
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[135,4693+2]..[136,4722+14])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[135,4693+6]..[135,4693+23])
                              Ppat_var "is_internal_start" (src/grammarFunctor.ml[135,4693+6]..[135,4693+23])
                            expression (src/grammarFunctor.ml[135,4693+24]..[136,4722+14]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[135,4693+24]..[135,4693+26])
                                Ppat_var "nt" (src/grammarFunctor.ml[135,4693+24]..[135,4693+26])
                              expression (src/grammarFunctor.ml[136,4722+4]..[136,4722+14])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[136,4722+7]..[136,4722+8])
                                  Pexp_ident "<" (src/grammarFunctor.ml[136,4722+7]..[136,4722+8])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[136,4722+4]..[136,4722+6])
                                      Pexp_ident "nt" (src/grammarFunctor.ml[136,4722+4]..[136,4722+6])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[136,4722+9]..[136,4722+14])
                                      Pexp_ident "start" (src/grammarFunctor.ml[136,4722+9]..[136,4722+14])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[138,4738+2]..[139,4763+49])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[138,4738+6]..[138,4738+19])
                              Ppat_var "is_user_start" (src/grammarFunctor.ml[138,4738+6]..[138,4738+19])
                            expression (src/grammarFunctor.ml[138,4738+20]..[139,4763+49]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[138,4738+20]..[138,4738+22])
                                Ppat_var "nt" (src/grammarFunctor.ml[138,4738+20]..[138,4738+22])
                              expression (src/grammarFunctor.ml[139,4763+4]..[139,4763+49])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[139,4763+4]..[139,4763+17])
                                  Pexp_ident "StringSet.mem" (src/grammarFunctor.ml[139,4763+4]..[139,4763+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[139,4763+18]..[139,4763+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[139,4763+18]..[139,4763+27]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[139,4763+18]..[139,4763+27]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[139,4763+18]..[139,4763+22])
                                            Pexp_ident "name" (src/grammarFunctor.ml[139,4763+18]..[139,4763+22])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[139,4763+24]..[139,4763+26])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[139,4763+24]..[139,4763+26])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[139,4763+28]..[139,4763+49])
                                      Pexp_field
                                      expression (src/grammarFunctor.ml[139,4763+28]..[139,4763+35])
                                        Pexp_ident "grammar" (src/grammarFunctor.ml[139,4763+28]..[139,4763+35])
                                      "start_symbols" (src/grammarFunctor.ml[139,4763+36]..[139,4763+49])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[141,4814+2]..[145,4903+15])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[141,4814+6]..[141,4814+11])
                              Ppat_var "print" (src/grammarFunctor.ml[141,4814+6]..[141,4814+11])
                            expression (src/grammarFunctor.ml[141,4814+12]..[145,4903+15]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[141,4814+12]..[141,4814+21])
                                Ppat_var "normalize" (src/grammarFunctor.ml[141,4814+12]..[141,4814+21])
                              expression (src/grammarFunctor.ml[141,4814+22]..[145,4903+15]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[141,4814+22]..[141,4814+24])
                                  Ppat_var "nt" (src/grammarFunctor.ml[141,4814+22]..[141,4814+24])
                                expression (src/grammarFunctor.ml[142,4841+4]..[145,4903+15])
                                  Pexp_ifthenelse
                                  expression (src/grammarFunctor.ml[142,4841+7]..[142,4841+16])
                                    Pexp_ident "normalize" (src/grammarFunctor.ml[142,4841+7]..[142,4841+16])
                                  expression (src/grammarFunctor.ml[143,4863+6]..[143,4863+30])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[143,4863+6]..[143,4863+20])
                                      Pexp_ident "Misc.normalize" (src/grammarFunctor.ml[143,4863+6]..[143,4863+20])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[143,4863+21]..[143,4863+30])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[143,4863+21]..[143,4863+30]) ghost
                                            Pexp_ident "Array.get" (src/grammarFunctor.ml[143,4863+21]..[143,4863+30]) ghost
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[143,4863+21]..[143,4863+25])
                                                Pexp_ident "name" (src/grammarFunctor.ml[143,4863+21]..[143,4863+25])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[143,4863+27]..[143,4863+29])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[143,4863+27]..[143,4863+29])
                                          ]
                                    ]
                                  Some
                                    expression (src/grammarFunctor.ml[145,4903+6]..[145,4903+15])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[145,4903+6]..[145,4903+15]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[145,4903+6]..[145,4903+15]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[145,4903+6]..[145,4903+10])
                                            Pexp_ident "name" (src/grammarFunctor.ml[145,4903+6]..[145,4903+10])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[145,4903+12]..[145,4903+14])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[145,4903+12]..[145,4903+14])
                                      ]
                        ]
                      structure_item (src/grammarFunctor.ml[147,4920+2]..[148,4940+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[147,4920+6]..[147,4920+12])
                              Ppat_var "lookup" (src/grammarFunctor.ml[147,4920+6]..[147,4920+12])
                            expression (src/grammarFunctor.ml[147,4920+13]..[148,4940+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[147,4920+13]..[147,4920+17])
                                Ppat_var "name" (src/grammarFunctor.ml[147,4920+13]..[147,4920+17])
                              expression (src/grammarFunctor.ml[148,4940+4]..[148,4940+27])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[148,4940+4]..[148,4940+18])
                                  Pexp_ident "StringMap.find" (src/grammarFunctor.ml[148,4940+4]..[148,4940+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[148,4940+19]..[148,4940+23])
                                      Pexp_ident "name" (src/grammarFunctor.ml[148,4940+19]..[148,4940+23])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[148,4940+24]..[148,4940+27])
                                      Pexp_ident "map" (src/grammarFunctor.ml[148,4940+24]..[148,4940+27])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[150,4969+2]..[151,4990+61])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[150,4969+6]..[150,4969+15])
                              Ppat_var "positions" (src/grammarFunctor.ml[150,4969+6]..[150,4969+15])
                            expression (src/grammarFunctor.ml[150,4969+16]..[151,4990+61]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[150,4969+16]..[150,4969+18])
                                Ppat_var "nt" (src/grammarFunctor.ml[150,4969+16]..[150,4969+18])
                              expression (src/grammarFunctor.ml[151,4990+4]..[151,4990+61])
                                Pexp_field
                                expression (src/grammarFunctor.ml[151,4990+4]..[151,4990+51])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[151,4990+5]..[151,4990+19])
                                    Pexp_ident "StringMap.find" (src/grammarFunctor.ml[151,4990+5]..[151,4990+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[151,4990+20]..[151,4990+36])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[151,4990+21]..[151,4990+26])
                                          Pexp_ident "print" (src/grammarFunctor.ml[151,4990+21]..[151,4990+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[151,4990+27]..[151,4990+32])
                                              Pexp_construct "false" (src/grammarFunctor.ml[151,4990+27]..[151,4990+32])
                                              None
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[151,4990+33]..[151,4990+35])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[151,4990+33]..[151,4990+35])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[151,4990+37]..[151,4990+50])
                                        Pexp_field
                                        expression (src/grammarFunctor.ml[151,4990+37]..[151,4990+44])
                                          Pexp_ident "grammar" (src/grammarFunctor.ml[151,4990+37]..[151,4990+44])
                                        "rules" (src/grammarFunctor.ml[151,4990+45]..[151,4990+50])
                                  ]
                                "positions" (src/grammarFunctor.ml[151,4990+52]..[151,4990+61])
                        ]
                      structure_item (src/grammarFunctor.ml[153,5053+2]..[154,5068+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[153,5053+6]..[153,5053+10])
                              Ppat_var "init" (src/grammarFunctor.ml[153,5053+6]..[153,5053+10])
                            expression (src/grammarFunctor.ml[153,5053+11]..[154,5068+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[153,5053+11]..[153,5053+12])
                                Ppat_var "f" (src/grammarFunctor.ml[153,5053+11]..[153,5053+12])
                              expression (src/grammarFunctor.ml[154,5068+4]..[154,5068+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[154,5068+4]..[154,5068+14])
                                  Pexp_ident "Array.init" (src/grammarFunctor.ml[154,5068+4]..[154,5068+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[154,5068+15]..[154,5068+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[154,5068+15]..[154,5068+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[154,5068+17]..[154,5068+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[154,5068+17]..[154,5068+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[156,5088+2]..[157,5103+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[156,5088+6]..[156,5088+10])
                              Ppat_var "iter" (src/grammarFunctor.ml[156,5088+6]..[156,5088+10])
                            expression (src/grammarFunctor.ml[156,5088+11]..[157,5103+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[156,5088+11]..[156,5088+12])
                                Ppat_var "f" (src/grammarFunctor.ml[156,5088+11]..[156,5088+12])
                              expression (src/grammarFunctor.ml[157,5103+4]..[157,5103+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[157,5103+4]..[157,5103+14])
                                  Pexp_ident "Misc.iteri" (src/grammarFunctor.ml[157,5103+4]..[157,5103+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[157,5103+15]..[157,5103+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[157,5103+15]..[157,5103+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[157,5103+17]..[157,5103+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[157,5103+17]..[157,5103+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[159,5123+2]..[160,5143+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[159,5123+6]..[159,5123+10])
                              Ppat_var "fold" (src/grammarFunctor.ml[159,5123+6]..[159,5123+10])
                            expression (src/grammarFunctor.ml[159,5123+11]..[160,5143+23]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[159,5123+11]..[159,5123+12])
                                Ppat_var "f" (src/grammarFunctor.ml[159,5123+11]..[159,5123+12])
                              expression (src/grammarFunctor.ml[159,5123+13]..[160,5143+23]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[159,5123+13]..[159,5123+17])
                                  Ppat_var "accu" (src/grammarFunctor.ml[159,5123+13]..[159,5123+17])
                                expression (src/grammarFunctor.ml[160,5143+4]..[160,5143+23])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[160,5143+4]..[160,5143+14])
                                    Pexp_ident "Misc.foldi" (src/grammarFunctor.ml[160,5143+4]..[160,5143+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[160,5143+15]..[160,5143+16])
                                        Pexp_ident "n" (src/grammarFunctor.ml[160,5143+15]..[160,5143+16])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[160,5143+17]..[160,5143+18])
                                        Pexp_ident "f" (src/grammarFunctor.ml[160,5143+17]..[160,5143+18])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[160,5143+19]..[160,5143+23])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[160,5143+19]..[160,5143+23])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[162,5168+2]..[163,5182+17])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[162,5168+6]..[162,5168+9])
                              Ppat_var "map" (src/grammarFunctor.ml[162,5168+6]..[162,5168+9])
                            expression (src/grammarFunctor.ml[162,5168+10]..[163,5182+17]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[162,5168+10]..[162,5168+11])
                                Ppat_var "f" (src/grammarFunctor.ml[162,5168+10]..[162,5168+11])
                              expression (src/grammarFunctor.ml[163,5182+4]..[163,5182+17])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[163,5182+4]..[163,5182+13])
                                  Pexp_ident "Misc.mapi" (src/grammarFunctor.ml[163,5182+4]..[163,5182+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[163,5182+14]..[163,5182+15])
                                      Pexp_ident "n" (src/grammarFunctor.ml[163,5182+14]..[163,5182+15])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[163,5182+16]..[163,5182+17])
                                      Pexp_ident "f" (src/grammarFunctor.ml[163,5182+16]..[163,5182+17])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[165,5201+2]..[168,5259+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[165,5201+6]..[165,5201+11])
                              Ppat_var "iterx" (src/grammarFunctor.ml[165,5201+6]..[165,5201+11])
                            expression (src/grammarFunctor.ml[165,5201+12]..[168,5259+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[165,5201+12]..[165,5201+13])
                                Ppat_var "f" (src/grammarFunctor.ml[165,5201+12]..[165,5201+13])
                              expression (src/grammarFunctor.ml[166,5217+4]..[168,5259+8])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[166,5217+8]..[166,5217+10])
                                  Ppat_var "nt" (src/grammarFunctor.ml[166,5217+8]..[166,5217+10])
                                expression (src/grammarFunctor.ml[166,5217+13]..[166,5217+18])
                                  Pexp_ident "start" (src/grammarFunctor.ml[166,5217+13]..[166,5217+18])
                                expression (src/grammarFunctor.ml[166,5217+22]..[166,5217+27])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[166,5217+24]..[166,5217+25])
                                    Pexp_ident "-" (src/grammarFunctor.ml[166,5217+24]..[166,5217+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[166,5217+22]..[166,5217+23])
                                        Pexp_ident "n" (src/grammarFunctor.ml[166,5217+22]..[166,5217+23])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[166,5217+26]..[166,5217+27])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                                expression (src/grammarFunctor.ml[167,5248+6]..[167,5248+10])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[167,5248+6]..[167,5248+7])
                                    Pexp_ident "f" (src/grammarFunctor.ml[167,5248+6]..[167,5248+7])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[167,5248+8]..[167,5248+10])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[167,5248+8]..[167,5248+10])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[170,5269+2]..[171,5290+30])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[170,5269+6]..[170,5269+11])
                              Ppat_var "foldx" (src/grammarFunctor.ml[170,5269+6]..[170,5269+11])
                            expression (src/grammarFunctor.ml[170,5269+12]..[171,5290+30]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[170,5269+12]..[170,5269+13])
                                Ppat_var "f" (src/grammarFunctor.ml[170,5269+12]..[170,5269+13])
                              expression (src/grammarFunctor.ml[170,5269+14]..[171,5290+30]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[170,5269+14]..[170,5269+18])
                                  Ppat_var "accu" (src/grammarFunctor.ml[170,5269+14]..[170,5269+18])
                                expression (src/grammarFunctor.ml[171,5290+4]..[171,5290+30])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[171,5290+4]..[171,5290+15])
                                    Pexp_ident "Misc.foldij" (src/grammarFunctor.ml[171,5290+4]..[171,5290+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[171,5290+16]..[171,5290+21])
                                        Pexp_ident "start" (src/grammarFunctor.ml[171,5290+16]..[171,5290+21])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[171,5290+22]..[171,5290+23])
                                        Pexp_ident "n" (src/grammarFunctor.ml[171,5290+22]..[171,5290+23])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[171,5290+24]..[171,5290+25])
                                        Pexp_ident "f" (src/grammarFunctor.ml[171,5290+24]..[171,5290+25])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[171,5290+26]..[171,5290+30])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[171,5290+26]..[171,5290+30])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[173,5322+2]..[178,5473+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[173,5322+6]..[173,5322+15])
                              Ppat_var "ocamltype" (src/grammarFunctor.ml[173,5322+6]..[173,5322+15])
                            expression (src/grammarFunctor.ml[173,5322+16]..[178,5473+10]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[173,5322+16]..[173,5322+18])
                                Ppat_var "nt" (src/grammarFunctor.ml[173,5322+16]..[173,5322+18])
                              expression (src/grammarFunctor.ml[174,5343+4]..[178,5473+10])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[174,5343+4]..[174,5343+39])
                                  Pexp_assert
                                  expression (src/grammarFunctor.ml[174,5343+11]..[174,5343+39])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[174,5343+12]..[174,5343+15])
                                      Pexp_ident "not" (src/grammarFunctor.ml[174,5343+12]..[174,5343+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[174,5343+16]..[174,5343+38])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[174,5343+17]..[174,5343+34])
                                            Pexp_ident "is_internal_start" (src/grammarFunctor.ml[174,5343+17]..[174,5343+34])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[174,5343+35]..[174,5343+37])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[174,5343+35]..[174,5343+37])
                                          ]
                                    ]
                                expression (src/grammarFunctor.ml[175,5384+4]..[178,5473+10])
                                  Pexp_try
                                  expression (src/grammarFunctor.ml[176,5392+6]..[176,5392+58])
                                    Pexp_construct "Some" (src/grammarFunctor.ml[176,5392+6]..[176,5392+10])
                                    Some
                                      expression (src/grammarFunctor.ml[176,5392+11]..[176,5392+58])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[176,5392+12]..[176,5392+26])
                                          Pexp_ident "StringMap.find" (src/grammarFunctor.ml[176,5392+12]..[176,5392+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[176,5392+27]..[176,5392+43])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[176,5392+28]..[176,5392+33])
                                                Pexp_ident "print" (src/grammarFunctor.ml[176,5392+28]..[176,5392+33])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[176,5392+34]..[176,5392+39])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[176,5392+34]..[176,5392+39])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[176,5392+40]..[176,5392+42])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[176,5392+40]..[176,5392+42])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[176,5392+44]..[176,5392+57])
                                              Pexp_field
                                              expression (src/grammarFunctor.ml[176,5392+44]..[176,5392+51])
                                                Pexp_ident "grammar" (src/grammarFunctor.ml[176,5392+44]..[176,5392+51])
                                              "types" (src/grammarFunctor.ml[176,5392+52]..[176,5392+57])
                                        ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[177,5451+9]..[177,5451+18])
                                        Ppat_construct "Not_found" (src/grammarFunctor.ml[177,5451+9]..[177,5451+18])
                                        None
                                      expression (src/grammarFunctor.ml[178,5473+6]..[178,5473+10])
                                        Pexp_construct "None" (src/grammarFunctor.ml[178,5473+6]..[178,5473+10])
                                        None
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[180,5485+2]..[186,5639+20])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[180,5485+6]..[180,5485+31])
                              Ppat_var "ocamltype_of_start_symbol" (src/grammarFunctor.ml[180,5485+6]..[180,5485+31])
                            expression (src/grammarFunctor.ml[180,5485+32]..[186,5639+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[180,5485+32]..[180,5485+34])
                                Ppat_var "nt" (src/grammarFunctor.ml[180,5485+32]..[180,5485+34])
                              expression (src/grammarFunctor.ml[181,5522+4]..[186,5639+20])
                                Pexp_match
                                expression (src/grammarFunctor.ml[181,5522+10]..[181,5522+22])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[181,5522+10]..[181,5522+19])
                                    Pexp_ident "ocamltype" (src/grammarFunctor.ml[181,5522+10]..[181,5522+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[181,5522+20]..[181,5522+22])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[181,5522+20]..[181,5522+22])
                                  ]
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[182,5550+6]..[182,5550+14])
                                      Ppat_construct "Some" (src/grammarFunctor.ml[182,5550+6]..[182,5550+10])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[182,5550+11]..[182,5550+14])
                                          Ppat_var "typ" (src/grammarFunctor.ml[182,5550+11]..[182,5550+14])
                                    expression (src/grammarFunctor.ml[183,5568+8]..[183,5568+11])
                                      Pexp_ident "typ" (src/grammarFunctor.ml[183,5568+8]..[183,5568+11])
                                  <case>
                                    pattern (src/grammarFunctor.ml[184,5580+6]..[184,5580+10])
                                      Ppat_construct "None" (src/grammarFunctor.ml[184,5580+6]..[184,5580+10])
                                      None
                                    expression (src/grammarFunctor.ml[186,5639+8]..[186,5639+20])
                                      Pexp_assert
                                      expression (src/grammarFunctor.ml[186,5639+15]..[186,5639+20])
                                        Pexp_construct "false" (src/grammarFunctor.ml[186,5639+15]..[186,5639+20])
                                        None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[188,5661+2]..[189,5680+30])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[188,5661+6]..[188,5661+14])
                              Ppat_var "tabulate" (src/grammarFunctor.ml[188,5661+6]..[188,5661+14])
                            expression (src/grammarFunctor.ml[188,5661+15]..[189,5680+30]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[188,5661+15]..[188,5661+16])
                                Ppat_var "f" (src/grammarFunctor.ml[188,5661+15]..[188,5661+16])
                              expression (src/grammarFunctor.ml[189,5680+4]..[189,5680+30])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[189,5680+4]..[189,5680+13])
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[189,5680+4]..[189,5680+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[189,5680+14]..[189,5680+30])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[189,5680+15]..[189,5680+25])
                                        Pexp_ident "Array.init" (src/grammarFunctor.ml[189,5680+15]..[189,5680+25])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[189,5680+26]..[189,5680+27])
                                            Pexp_ident "n" (src/grammarFunctor.ml[189,5680+26]..[189,5680+27])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[189,5680+28]..[189,5680+29])
                                            Pexp_ident "f" (src/grammarFunctor.ml[189,5680+28]..[189,5680+29])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[191,5712+2]..[192,5757+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[191,5712+6]..[191,5712+16])
                              Ppat_var "attributes" (src/grammarFunctor.ml[191,5712+6]..[191,5712+16])
                            core_type (src/grammarFunctor.ml[191,5712+19]..[191,5712+42])
                              Ptyp_constr "array" (src/grammarFunctor.ml[191,5712+37]..[191,5712+42])
                              [
                                core_type (src/grammarFunctor.ml[191,5712+19]..[191,5712+36])
                                  Ptyp_constr "Syntax.attributes" (src/grammarFunctor.ml[191,5712+19]..[191,5712+36])
                                  []
                              ]
                            expression (src/grammarFunctor.ml[192,5757+4]..[192,5757+19])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[192,5757+4]..[192,5757+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[192,5757+4]..[192,5757+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[192,5757+15]..[192,5757+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[192,5757+15]..[192,5757+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[192,5757+17]..[192,5757+19])
                                    Pexp_construct "[]" (src/grammarFunctor.ml[192,5757+17]..[192,5757+19])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[194,5778+2]..[198,5919+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[194,5778+6]..[194,5778+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[194,5778+6]..[194,5778+8])
                              None
                            expression (src/grammarFunctor.ml[195,5789+4]..[198,5919+19])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[195,5789+4]..[195,5789+18])
                                Pexp_ident "StringMap.iter" (src/grammarFunctor.ml[195,5789+4]..[195,5789+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[195,5789+19]..[198,5919+5])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[195,5789+24]..[195,5789+35])
                                      Ppat_var "nonterminal" (src/grammarFunctor.ml[195,5789+24]..[195,5789+35])
                                    expression (src/grammarFunctor.ml[195,5789+36]..[197,5888+30]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[195,5789+36]..[195,5789+58])
                                        Ppat_record Closed
                                        [
                                          "attributes" (src/grammarFunctor.ml[195,5789+38]..[195,5789+48])
                                            pattern (src/grammarFunctor.ml[195,5789+51]..[195,5789+56])
                                              Ppat_var "attrs" (src/grammarFunctor.ml[195,5789+51]..[195,5789+56])
                                        ]
                                      expression (src/grammarFunctor.ml[196,5851+6]..[197,5888+30])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[196,5851+10]..[196,5851+12])
                                              Ppat_var "nt" (src/grammarFunctor.ml[196,5851+10]..[196,5851+12])
                                            expression (src/grammarFunctor.ml[196,5851+15]..[196,5851+33])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[196,5851+15]..[196,5851+21])
                                                Pexp_ident "lookup" (src/grammarFunctor.ml[196,5851+15]..[196,5851+21])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[196,5851+22]..[196,5851+33])
                                                    Pexp_ident "nonterminal" (src/grammarFunctor.ml[196,5851+22]..[196,5851+33])
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[197,5888+6]..[197,5888+30])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[197,5888+6]..[197,5888+30]) ghost
                                            Pexp_ident "Array.set" (src/grammarFunctor.ml[197,5888+6]..[197,5888+30]) ghost
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[197,5888+6]..[197,5888+16])
                                                Pexp_ident "attributes" (src/grammarFunctor.ml[197,5888+6]..[197,5888+16])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[197,5888+18]..[197,5888+20])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[197,5888+18]..[197,5888+20])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[197,5888+25]..[197,5888+30])
                                                Pexp_ident "attrs" (src/grammarFunctor.ml[197,5888+25]..[197,5888+30])
                                          ]
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[198,5919+6]..[198,5919+19])
                                    Pexp_field
                                    expression (src/grammarFunctor.ml[198,5919+6]..[198,5919+13])
                                      Pexp_ident "grammar" (src/grammarFunctor.ml[198,5919+6]..[198,5919+13])
                                    "rules" (src/grammarFunctor.ml[198,5919+14]..[198,5919+19])
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[200,5940+2]..[201,5962+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[200,5940+6]..[200,5940+16])
                              Ppat_var "attributes" (src/grammarFunctor.ml[200,5940+6]..[200,5940+16])
                            expression (src/grammarFunctor.ml[200,5940+17]..[201,5962+19]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[200,5940+17]..[200,5940+19])
                                Ppat_var "nt" (src/grammarFunctor.ml[200,5940+17]..[200,5940+19])
                              expression (src/grammarFunctor.ml[201,5962+4]..[201,5962+19])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[201,5962+4]..[201,5962+19]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[201,5962+4]..[201,5962+19]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[201,5962+4]..[201,5962+14])
                                      Pexp_ident "attributes" (src/grammarFunctor.ml[201,5962+4]..[201,5962+14])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[201,5962+16]..[201,5962+18])
                                      Pexp_ident "nt" (src/grammarFunctor.ml[201,5962+16]..[201,5962+18])
                                ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[207,6028+0]..[207,6028+36])
                Pstr_module
                "NonterminalMap" (src/grammarFunctor.ml[207,6028+7]..[207,6028+21])
                  module_expr (src/grammarFunctor.ml[207,6028+24]..[207,6028+36])
                    Pmod_ident "Patricia.Big" (src/grammarFunctor.ml[207,6028+24]..[207,6028+36])
              structure_item (src/grammarFunctor.ml[209,6066+0]..[209,6066+43])
                Pstr_module
                "NonterminalSet" (src/grammarFunctor.ml[209,6066+7]..[209,6066+21])
                  module_expr (src/grammarFunctor.ml[209,6066+24]..[209,6066+43])
                    Pmod_ident "Patricia.Big.Domain" (src/grammarFunctor.ml[209,6066+24]..[209,6066+43])
              structure_item (src/grammarFunctor.ml[214,6208+0]..[463,12600+3])
                Pstr_module
                "Terminal" (src/grammarFunctor.ml[214,6208+7]..[214,6208+15])
                  module_expr (src/grammarFunctor.ml[214,6208+18]..[463,12600+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[216,6234+2]..[216,6234+14])
                        Pstr_type Rec
                        [
                          type_declaration "t" (src/grammarFunctor.ml[216,6234+7]..[216,6234+8]) (src/grammarFunctor.ml[216,6234+2]..[216,6234+14])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[216,6234+11]..[216,6234+14])
                                  Ptyp_constr "int" (src/grammarFunctor.ml[216,6234+11]..[216,6234+14])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[218,6250+2]..[218,6250+15])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[218,6250+6]..[218,6250+9])
                              Ppat_var "t2i" (src/grammarFunctor.ml[218,6250+6]..[218,6250+9])
                            expression (src/grammarFunctor.ml[218,6250+10]..[218,6250+15]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[218,6250+10]..[218,6250+11])
                                Ppat_var "i" (src/grammarFunctor.ml[218,6250+10]..[218,6250+11])
                              expression (src/grammarFunctor.ml[218,6250+14]..[218,6250+15])
                                Pexp_ident "i" (src/grammarFunctor.ml[218,6250+14]..[218,6250+15])
                        ]
                      structure_item (src/grammarFunctor.ml[219,6266+2]..[219,6266+15])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[219,6266+6]..[219,6266+9])
                              Ppat_var "i2t" (src/grammarFunctor.ml[219,6266+6]..[219,6266+9])
                            expression (src/grammarFunctor.ml[219,6266+10]..[219,6266+15]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[219,6266+10]..[219,6266+11])
                                Ppat_var "i" (src/grammarFunctor.ml[219,6266+10]..[219,6266+11])
                              expression (src/grammarFunctor.ml[219,6266+14]..[219,6266+15])
                                Pexp_ident "i" (src/grammarFunctor.ml[219,6266+14]..[219,6266+15])
                        ]
                      structure_item (src/grammarFunctor.ml[221,6283+2]..[221,6283+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[221,6283+6]..[221,6283+13])
                              Ppat_var "compare" (src/grammarFunctor.ml[221,6283+6]..[221,6283+13])
                            expression (src/grammarFunctor.ml[221,6283+16]..[221,6283+19])
                              Pexp_ident "-" (src/grammarFunctor.ml[221,6283+16]..[221,6283+19])
                        ]
                      structure_item (src/grammarFunctor.ml[223,6304+2]..[224,6340+15])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[223,6304+6]..[223,6304+11])
                              Ppat_var "equal" (src/grammarFunctor.ml[223,6304+6]..[223,6304+11])
                            expression (src/grammarFunctor.ml[223,6304+12]..[224,6340+15]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[223,6304+12]..[223,6304+22])
                                Ppat_constraint
                                pattern (src/grammarFunctor.ml[223,6304+13]..[223,6304+17])
                                  Ppat_var "tok1" (src/grammarFunctor.ml[223,6304+13]..[223,6304+17])
                                core_type (src/grammarFunctor.ml[223,6304+20]..[223,6304+21])
                                  Ptyp_constr "t" (src/grammarFunctor.ml[223,6304+20]..[223,6304+21])
                                  []
                              expression (src/grammarFunctor.ml[223,6304+23]..[224,6340+15]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[223,6304+23]..[223,6304+33])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[223,6304+24]..[223,6304+28])
                                    Ppat_var "tok2" (src/grammarFunctor.ml[223,6304+24]..[223,6304+28])
                                  core_type (src/grammarFunctor.ml[223,6304+31]..[223,6304+32])
                                    Ptyp_constr "t" (src/grammarFunctor.ml[223,6304+31]..[223,6304+32])
                                    []
                                expression (src/grammarFunctor.ml[224,6340+4]..[224,6340+15])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[224,6340+9]..[224,6340+10])
                                    Pexp_ident "=" (src/grammarFunctor.ml[224,6340+9]..[224,6340+10])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[224,6340+4]..[224,6340+8])
                                        Pexp_ident "tok1" (src/grammarFunctor.ml[224,6340+4]..[224,6340+8])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[224,6340+11]..[224,6340+15])
                                        Pexp_ident "tok2" (src/grammarFunctor.ml[224,6340+11]..[224,6340+15])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[239,6959+2]..[245,7173+43])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[239,6959+6]..[239,6959+63])
                              Ppat_tuple
                              [
                                pattern (src/grammarFunctor.ml[239,6959+6]..[239,6959+15])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[239,6959+7]..[239,6959+8])
                                    Ppat_var "n" (src/grammarFunctor.ml[239,6959+7]..[239,6959+8])
                                  core_type (src/grammarFunctor.ml[239,6959+11]..[239,6959+14])
                                    Ptyp_constr "int" (src/grammarFunctor.ml[239,6959+11]..[239,6959+14])
                                    []
                                pattern (src/grammarFunctor.ml[239,6959+17]..[239,6959+38])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[239,6959+18]..[239,6959+22])
                                    Ppat_var "name" (src/grammarFunctor.ml[239,6959+18]..[239,6959+22])
                                  core_type (src/grammarFunctor.ml[239,6959+25]..[239,6959+37])
                                    Ptyp_constr "array" (src/grammarFunctor.ml[239,6959+32]..[239,6959+37])
                                    [
                                      core_type (src/grammarFunctor.ml[239,6959+25]..[239,6959+31])
                                        Ptyp_constr "string" (src/grammarFunctor.ml[239,6959+25]..[239,6959+31])
                                        []
                                    ]
                                pattern (src/grammarFunctor.ml[239,6959+40]..[239,6959+63])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[239,6959+41]..[239,6959+44])
                                    Ppat_var "map" (src/grammarFunctor.ml[239,6959+41]..[239,6959+44])
                                  core_type (src/grammarFunctor.ml[239,6959+47]..[239,6959+62])
                                    Ptyp_constr "StringMap.t" (src/grammarFunctor.ml[239,6959+51]..[239,6959+62])
                                    [
                                      core_type (src/grammarFunctor.ml[239,6959+47]..[239,6959+50])
                                        Ptyp_constr "int" (src/grammarFunctor.ml[239,6959+47]..[239,6959+50])
                                        []
                                    ]
                              ]
                            expression (src/grammarFunctor.ml[240,7025+4]..[245,7173+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[240,7025+8]..[240,7025+14])
                                    Ppat_var "tokens" (src/grammarFunctor.ml[240,7025+8]..[240,7025+14])
                                  expression (src/grammarFunctor.ml[240,7025+17]..[240,7025+31])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[240,7025+17]..[240,7025+23])
                                      Pexp_ident "tokens" (src/grammarFunctor.ml[240,7025+17]..[240,7025+23])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[240,7025+24]..[240,7025+31])
                                          Pexp_ident "grammar" (src/grammarFunctor.ml[240,7025+24]..[240,7025+31])
                                    ]
                              ]
                              expression (src/grammarFunctor.ml[241,7060+4]..[245,7173+43])
                                Pexp_match
                                expression (src/grammarFunctor.ml[241,7060+10]..[241,7060+16])
                                  Pexp_ident "tokens" (src/grammarFunctor.ml[241,7060+10]..[241,7060+16])
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[242,7082+6]..[242,7082+8])
                                      Ppat_construct "[]" (src/grammarFunctor.ml[242,7082+6]..[242,7082+8])
                                      None
                                    <when>
                                      expression (src/grammarFunctor.ml[242,7082+14]..[242,7082+21])
                                        Pexp_ident "verbose" (src/grammarFunctor.ml[242,7082+14]..[242,7082+21])
                                    expression (src/grammarFunctor.ml[243,7107+8]..[243,7107+54])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[243,7107+8]..[243,7107+19])
                                        Pexp_ident "Error.error" (src/grammarFunctor.ml[243,7107+8]..[243,7107+19])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[243,7107+20]..[243,7107+22])
                                            Pexp_construct "[]" (src/grammarFunctor.ml[243,7107+20]..[243,7107+22])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[243,7107+23]..[243,7107+54])
                                            Pexp_constant PConst_string("no tokens have been declared.",(src/grammarFunctor.ml[243,7107+24]..[243,7107+53]),None)
                                      ]
                                  <case>
                                    pattern (src/grammarFunctor.ml[244,7162+6]..[244,7162+7])
                                      Ppat_any
                                    expression (src/grammarFunctor.ml[245,7173+8]..[245,7173+43])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[245,7173+8]..[245,7173+13])
                                        Pexp_ident "index" (src/grammarFunctor.ml[245,7173+8]..[245,7173+13])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[245,7173+14]..[245,7173+43])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[245,7173+33]..[245,7173+34])
                                              Pexp_ident "@" (src/grammarFunctor.ml[245,7173+33]..[245,7173+34])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[245,7173+15]..[245,7173+32])
                                                  Pexp_construct "::" (src/grammarFunctor.ml[245,7173+23]..[245,7173+25])
                                                  Some
                                                    expression (src/grammarFunctor.ml[245,7173+15]..[245,7173+32]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[245,7173+15]..[245,7173+22])
                                                          Pexp_constant PConst_string("error",(src/grammarFunctor.ml[245,7173+16]..[245,7173+21]),None)
                                                        expression (src/grammarFunctor.ml[245,7173+26]..[245,7173+32])
                                                          Pexp_ident "tokens" (src/grammarFunctor.ml[245,7173+26]..[245,7173+32])
                                                      ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[245,7173+35]..[245,7173+42])
                                                  Pexp_construct "::" (src/grammarFunctor.ml[245,7173+37]..[245,7173+42]) ghost
                                                  Some
                                                    expression (src/grammarFunctor.ml[245,7173+37]..[245,7173+42]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[245,7173+37]..[245,7173+40])
                                                          Pexp_constant PConst_string("#",(src/grammarFunctor.ml[245,7173+38]..[245,7173+39]),None)
                                                        expression (src/grammarFunctor.ml[245,7173+41]..[245,7173+42]) ghost
                                                          Pexp_construct "[]" (src/grammarFunctor.ml[245,7173+41]..[245,7173+42]) ghost
                                                          None
                                                      ]
                                            ]
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[247,7218+2]..[248,7236+14])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[247,7218+6]..[247,7218+11])
                              Ppat_var "print" (src/grammarFunctor.ml[247,7218+6]..[247,7218+11])
                            expression (src/grammarFunctor.ml[247,7218+12]..[248,7236+14]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[247,7218+12]..[247,7218+15])
                                Ppat_var "tok" (src/grammarFunctor.ml[247,7218+12]..[247,7218+15])
                              expression (src/grammarFunctor.ml[248,7236+4]..[248,7236+14])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[248,7236+4]..[248,7236+14]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[248,7236+4]..[248,7236+14]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[248,7236+4]..[248,7236+8])
                                      Pexp_ident "name" (src/grammarFunctor.ml[248,7236+4]..[248,7236+8])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[248,7236+10]..[248,7236+13])
                                      Pexp_ident "tok" (src/grammarFunctor.ml[248,7236+10]..[248,7236+13])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[250,7252+2]..[251,7272+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[250,7252+6]..[250,7252+12])
                              Ppat_var "lookup" (src/grammarFunctor.ml[250,7252+6]..[250,7252+12])
                            expression (src/grammarFunctor.ml[250,7252+13]..[251,7272+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[250,7252+13]..[250,7252+17])
                                Ppat_var "name" (src/grammarFunctor.ml[250,7252+13]..[250,7252+17])
                              expression (src/grammarFunctor.ml[251,7272+4]..[251,7272+27])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[251,7272+4]..[251,7272+18])
                                  Pexp_ident "StringMap.find" (src/grammarFunctor.ml[251,7272+4]..[251,7272+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[251,7272+19]..[251,7272+23])
                                      Pexp_ident "name" (src/grammarFunctor.ml[251,7272+19]..[251,7272+23])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[251,7272+24]..[251,7272+27])
                                      Pexp_ident "map" (src/grammarFunctor.ml[251,7272+24]..[251,7272+27])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[253,7301+2]..[254,7315+14])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[253,7301+6]..[253,7301+11])
                              Ppat_var "sharp" (src/grammarFunctor.ml[253,7301+6]..[253,7301+11])
                            expression (src/grammarFunctor.ml[254,7315+4]..[254,7315+14])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[254,7315+4]..[254,7315+10])
                                Pexp_ident "lookup" (src/grammarFunctor.ml[254,7315+4]..[254,7315+10])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[254,7315+11]..[254,7315+14])
                                    Pexp_constant PConst_string("#",(src/grammarFunctor.ml[254,7315+12]..[254,7315+13]),None)
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[256,7331+2]..[257,7345+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[256,7331+6]..[256,7331+11])
                              Ppat_var "error" (src/grammarFunctor.ml[256,7331+6]..[256,7331+11])
                            expression (src/grammarFunctor.ml[257,7345+4]..[257,7345+18])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[257,7345+4]..[257,7345+10])
                                Pexp_ident "lookup" (src/grammarFunctor.ml[257,7345+4]..[257,7345+10])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[257,7345+11]..[257,7345+18])
                                    Pexp_constant PConst_string("error",(src/grammarFunctor.ml[257,7345+12]..[257,7345+17]),None)
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[259,7365+2]..[260,7384+34])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[259,7365+6]..[259,7365+12])
                              Ppat_var "pseudo" (src/grammarFunctor.ml[259,7365+6]..[259,7365+12])
                            expression (src/grammarFunctor.ml[259,7365+13]..[260,7384+34]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[259,7365+13]..[259,7365+16])
                                Ppat_var "tok" (src/grammarFunctor.ml[259,7365+13]..[259,7365+16])
                              expression (src/grammarFunctor.ml[260,7384+4]..[260,7384+34])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[260,7384+18]..[260,7384+20])
                                  Pexp_ident "||" (src/grammarFunctor.ml[260,7384+18]..[260,7384+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[260,7384+4]..[260,7384+17])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[260,7384+9]..[260,7384+10])
                                        Pexp_ident "=" (src/grammarFunctor.ml[260,7384+9]..[260,7384+10])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[260,7384+5]..[260,7384+8])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[260,7384+5]..[260,7384+8])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[260,7384+11]..[260,7384+16])
                                            Pexp_ident "sharp" (src/grammarFunctor.ml[260,7384+11]..[260,7384+16])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[260,7384+21]..[260,7384+34])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[260,7384+26]..[260,7384+27])
                                        Pexp_ident "=" (src/grammarFunctor.ml[260,7384+26]..[260,7384+27])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[260,7384+22]..[260,7384+25])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[260,7384+22]..[260,7384+25])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[260,7384+28]..[260,7384+33])
                                            Pexp_ident "error" (src/grammarFunctor.ml[260,7384+28]..[260,7384+33])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[262,7420+2]..[263,7435+28])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[262,7420+6]..[262,7420+10])
                              Ppat_var "real" (src/grammarFunctor.ml[262,7420+6]..[262,7420+10])
                            expression (src/grammarFunctor.ml[262,7420+11]..[263,7435+28]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[262,7420+11]..[262,7420+12])
                                Ppat_var "t" (src/grammarFunctor.ml[262,7420+11]..[262,7420+12])
                              expression (src/grammarFunctor.ml[263,7435+4]..[263,7435+28])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[263,7435+15]..[263,7435+17])
                                  Pexp_ident "&&" (src/grammarFunctor.ml[263,7435+15]..[263,7435+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[263,7435+4]..[263,7435+14])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[263,7435+10]..[263,7435+12])
                                        Pexp_ident "<>" (src/grammarFunctor.ml[263,7435+10]..[263,7435+12])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[263,7435+4]..[263,7435+9])
                                            Pexp_ident "error" (src/grammarFunctor.ml[263,7435+4]..[263,7435+9])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[263,7435+13]..[263,7435+14])
                                            Pexp_ident "t" (src/grammarFunctor.ml[263,7435+13]..[263,7435+14])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[263,7435+18]..[263,7435+28])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[263,7435+20]..[263,7435+22])
                                        Pexp_ident "<>" (src/grammarFunctor.ml[263,7435+20]..[263,7435+22])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[263,7435+18]..[263,7435+19])
                                            Pexp_ident "t" (src/grammarFunctor.ml[263,7435+18]..[263,7435+19])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[263,7435+23]..[263,7435+28])
                                            Pexp_ident "sharp" (src/grammarFunctor.ml[263,7435+23]..[263,7435+28])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[265,7465+2]..[266,7487+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[265,7465+6]..[265,7465+15])
                              Ppat_var "non_error" (src/grammarFunctor.ml[265,7465+6]..[265,7465+15])
                            expression (src/grammarFunctor.ml[265,7465+16]..[266,7487+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[265,7465+16]..[265,7465+19])
                                Ppat_var "tok" (src/grammarFunctor.ml[265,7465+16]..[265,7465+19])
                              expression (src/grammarFunctor.ml[266,7487+4]..[266,7487+16])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[266,7487+8]..[266,7487+10])
                                  Pexp_ident "<>" (src/grammarFunctor.ml[266,7487+8]..[266,7487+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[266,7487+4]..[266,7487+7])
                                      Pexp_ident "tok" (src/grammarFunctor.ml[266,7487+4]..[266,7487+7])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[266,7487+11]..[266,7487+16])
                                      Pexp_ident "error" (src/grammarFunctor.ml[266,7487+11]..[266,7487+16])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[268,7505+2]..[287,8126+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[268,7505+6]..[268,7505+22])
                              Ppat_var "token_properties" (src/grammarFunctor.ml[268,7505+6]..[268,7505+22])
                            expression (src/grammarFunctor.ml[269,7530+4]..[287,8126+5])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[269,7530+8]..[269,7530+31])
                                    Ppat_var "not_so_dummy_properties" (src/grammarFunctor.ml[269,7530+8]..[269,7530+31])
                                  expression (src/grammarFunctor.ml[270,7600+6]..[279,7918+7])
                                    Pexp_record
                                    [
                                      "tk_filename" (src/grammarFunctor.ml[271,7608+8]..[271,7608+19])
                                        expression (src/grammarFunctor.ml[271,7608+27]..[271,7608+43])
                                          Pexp_constant PConst_string("__primitives__",(src/grammarFunctor.ml[271,7608+28]..[271,7608+42]),None)
                                      "tk_precedence" (src/grammarFunctor.ml[272,7653+8]..[272,7653+21])
                                        expression (src/grammarFunctor.ml[272,7653+27]..[272,7653+46])
                                          Pexp_construct "UndefinedPrecedence" (src/grammarFunctor.ml[272,7653+27]..[272,7653+46])
                                          None
                                      "tk_associativity" (src/grammarFunctor.ml[273,7701+8]..[273,7701+24])
                                        expression (src/grammarFunctor.ml[273,7701+27]..[273,7701+41])
                                          Pexp_construct "UndefinedAssoc" (src/grammarFunctor.ml[273,7701+27]..[273,7701+41])
                                          None
                                      "tk_ocamltype" (src/grammarFunctor.ml[274,7744+8]..[274,7744+20])
                                        expression (src/grammarFunctor.ml[274,7744+27]..[274,7744+31])
                                          Pexp_construct "None" (src/grammarFunctor.ml[274,7744+27]..[274,7744+31])
                                          None
                                      "tk_is_declared" (src/grammarFunctor.ml[275,7777+8]..[275,7777+22])
                                        expression (src/grammarFunctor.ml[275,7777+27]..[275,7777+31])
                                          Pexp_construct "true" (src/grammarFunctor.ml[275,7777+27]..[275,7777+31])
                                          None
                                      "tk_position" (src/grammarFunctor.ml[276,7810+8]..[276,7810+19])
                                        expression (src/grammarFunctor.ml[276,7810+27]..[276,7810+42])
                                          Pexp_ident "Positions.dummy" (src/grammarFunctor.ml[276,7810+27]..[276,7810+42])
                                      "tk_attributes" (src/grammarFunctor.ml[277,7854+8]..[277,7854+21])
                                        expression (src/grammarFunctor.ml[277,7854+27]..[277,7854+29])
                                          Pexp_construct "[]" (src/grammarFunctor.ml[277,7854+27]..[277,7854+29])
                                          None
                                      "tk_alias" (src/grammarFunctor.ml[278,7885+8]..[278,7885+16])
                                        expression (src/grammarFunctor.ml[278,7885+27]..[278,7885+31])
                                          Pexp_construct "None" (src/grammarFunctor.ml[278,7885+27]..[278,7885+31])
                                          None
                                    ]
                                    None
                              ]
                              expression (src/grammarFunctor.ml[281,7933+4]..[287,8126+5])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[281,7933+4]..[281,7933+14])
                                  Pexp_ident "Array.init" (src/grammarFunctor.ml[281,7933+4]..[281,7933+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[281,7933+15]..[281,7933+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[281,7933+15]..[281,7933+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[281,7933+17]..[287,8126+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[281,7933+22]..[281,7933+25])
                                        Ppat_var "tok" (src/grammarFunctor.ml[281,7933+22]..[281,7933+25])
                                      expression (src/grammarFunctor.ml[282,7962+6]..[286,8093+32])
                                        Pexp_try
                                        expression (src/grammarFunctor.ml[283,7972+9]..[283,7972+49])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[283,7972+9]..[283,7972+23])
                                            Pexp_ident "StringMap.find" (src/grammarFunctor.ml[283,7972+9]..[283,7972+23])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[283,7972+24]..[283,7972+34])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[283,7972+24]..[283,7972+34]) ghost
                                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[283,7972+24]..[283,7972+34]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[283,7972+24]..[283,7972+28])
                                                      Pexp_ident "name" (src/grammarFunctor.ml[283,7972+24]..[283,7972+28])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[283,7972+30]..[283,7972+33])
                                                      Pexp_ident "tok" (src/grammarFunctor.ml[283,7972+30]..[283,7972+33])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[283,7972+35]..[283,7972+49])
                                                Pexp_field
                                                expression (src/grammarFunctor.ml[283,7972+35]..[283,7972+42])
                                                  Pexp_ident "grammar" (src/grammarFunctor.ml[283,7972+35]..[283,7972+42])
                                                "tokens" (src/grammarFunctor.ml[283,7972+43]..[283,7972+49])
                                          ]
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[284,8022+12]..[284,8022+21])
                                              Ppat_construct "Not_found" (src/grammarFunctor.ml[284,8022+12]..[284,8022+21])
                                              None
                                            expression (src/grammarFunctor.ml[285,8047+9]..[286,8093+32])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[285,8047+9]..[285,8047+44])
                                                Pexp_assert
                                                expression (src/grammarFunctor.ml[285,8047+16]..[285,8047+44])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[285,8047+29]..[285,8047+31])
                                                    Pexp_ident "||" (src/grammarFunctor.ml[285,8047+29]..[285,8047+31])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[285,8047+17]..[285,8047+28])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[285,8047+21]..[285,8047+22])
                                                          Pexp_ident "=" (src/grammarFunctor.ml[285,8047+21]..[285,8047+22])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[285,8047+17]..[285,8047+20])
                                                              Pexp_ident "tok" (src/grammarFunctor.ml[285,8047+17]..[285,8047+20])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[285,8047+23]..[285,8047+28])
                                                              Pexp_ident "sharp" (src/grammarFunctor.ml[285,8047+23]..[285,8047+28])
                                                        ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[285,8047+32]..[285,8047+43])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[285,8047+36]..[285,8047+37])
                                                          Pexp_ident "=" (src/grammarFunctor.ml[285,8047+36]..[285,8047+37])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[285,8047+32]..[285,8047+35])
                                                              Pexp_ident "tok" (src/grammarFunctor.ml[285,8047+32]..[285,8047+35])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[285,8047+38]..[285,8047+43])
                                                              Pexp_ident "error" (src/grammarFunctor.ml[285,8047+38]..[285,8047+43])
                                                        ]
                                                  ]
                                              expression (src/grammarFunctor.ml[286,8093+9]..[286,8093+32])
                                                Pexp_ident "not_so_dummy_properties" (src/grammarFunctor.ml[286,8093+9]..[286,8093+32])
                                        ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[289,8133+2]..[293,8263+7])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[289,8133+6]..[289,8133+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[289,8133+6]..[289,8133+8])
                              None
                            expression (src/grammarFunctor.ml[290,8144+4]..[293,8263+7])
                              Pexp_ifthenelse
                              expression (src/grammarFunctor.ml[290,8144+7]..[290,8144+14])
                                Pexp_ident "verbose" (src/grammarFunctor.ml[290,8144+7]..[290,8144+14])
                              expression (src/grammarFunctor.ml[291,8164+6]..[293,8263+7])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[291,8164+6]..[291,8164+16])
                                  Pexp_ident "Error.logG" (src/grammarFunctor.ml[291,8164+6]..[291,8164+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[291,8164+17]..[291,8164+18])
                                      Pexp_constant PConst_int (1,None)
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[291,8164+19]..[293,8263+7])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[291,8164+24]..[291,8164+25])
                                        Ppat_var "f" (src/grammarFunctor.ml[291,8164+24]..[291,8164+25])
                                      expression (src/grammarFunctor.ml[292,8193+8]..[292,8193+69])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[292,8193+8]..[292,8193+22])
                                          Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[292,8193+8]..[292,8193+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[292,8193+23]..[292,8193+24])
                                              Pexp_ident "f" (src/grammarFunctor.ml[292,8193+23]..[292,8193+24])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[292,8193+25]..[292,8193+61])
                                              Pexp_constant PConst_string("Grammar has %d terminal symbols.\n",(src/grammarFunctor.ml[292,8193+26]..[292,8193+60]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[292,8193+62]..[292,8193+69])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[292,8193+65]..[292,8193+66])
                                                Pexp_ident "-" (src/grammarFunctor.ml[292,8193+65]..[292,8193+66])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[292,8193+63]..[292,8193+64])
                                                    Pexp_ident "n" (src/grammarFunctor.ml[292,8193+63]..[292,8193+64])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[292,8193+67]..[292,8193+68])
                                                    Pexp_constant PConst_int (2,None)
                                              ]
                                        ]
                                ]
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[295,8272+2]..[296,8301+60])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[295,8272+6]..[295,8272+22])
                              Ppat_var "precedence_level" (src/grammarFunctor.ml[295,8272+6]..[295,8272+22])
                            expression (src/grammarFunctor.ml[295,8272+23]..[296,8301+60]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[295,8272+23]..[295,8272+26])
                                Ppat_var "tok" (src/grammarFunctor.ml[295,8272+23]..[295,8272+26])
                              expression (src/grammarFunctor.ml[296,8301+4]..[296,8301+60])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[296,8301+4]..[296,8301+25])
                                  Pexp_ident "TokPrecedence.levelip" (src/grammarFunctor.ml[296,8301+4]..[296,8301+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[296,8301+26]..[296,8301+37])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[296,8301+27]..[296,8301+32])
                                        Pexp_ident "print" (src/grammarFunctor.ml[296,8301+27]..[296,8301+32])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[296,8301+33]..[296,8301+36])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[296,8301+33]..[296,8301+36])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[296,8301+38]..[296,8301+60])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[296,8301+38]..[296,8301+60]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[296,8301+38]..[296,8301+60]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[296,8301+38]..[296,8301+54])
                                            Pexp_ident "token_properties" (src/grammarFunctor.ml[296,8301+38]..[296,8301+54])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[296,8301+56]..[296,8301+59])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[296,8301+56]..[296,8301+59])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[298,8363+2]..[299,8389+43])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[298,8363+6]..[298,8363+19])
                              Ppat_var "associativity" (src/grammarFunctor.ml[298,8363+6]..[298,8363+19])
                            expression (src/grammarFunctor.ml[298,8363+20]..[299,8389+43]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[298,8363+20]..[298,8363+23])
                                Ppat_var "tok" (src/grammarFunctor.ml[298,8363+20]..[298,8363+23])
                              expression (src/grammarFunctor.ml[299,8389+4]..[299,8389+43])
                                Pexp_field
                                expression (src/grammarFunctor.ml[299,8389+4]..[299,8389+26])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[299,8389+4]..[299,8389+26]) ghost
                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[299,8389+4]..[299,8389+26]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[299,8389+4]..[299,8389+20])
                                        Pexp_ident "token_properties" (src/grammarFunctor.ml[299,8389+4]..[299,8389+20])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[299,8389+22]..[299,8389+25])
                                        Pexp_ident "tok" (src/grammarFunctor.ml[299,8389+22]..[299,8389+25])
                                  ]
                                "tk_associativity" (src/grammarFunctor.ml[299,8389+27]..[299,8389+43])
                        ]
                      structure_item (src/grammarFunctor.ml[301,8434+2]..[302,8456+39])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[301,8434+6]..[301,8434+15])
                              Ppat_var "ocamltype" (src/grammarFunctor.ml[301,8434+6]..[301,8434+15])
                            expression (src/grammarFunctor.ml[301,8434+16]..[302,8456+39]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[301,8434+16]..[301,8434+19])
                                Ppat_var "tok" (src/grammarFunctor.ml[301,8434+16]..[301,8434+19])
                              expression (src/grammarFunctor.ml[302,8456+4]..[302,8456+39])
                                Pexp_field
                                expression (src/grammarFunctor.ml[302,8456+4]..[302,8456+26])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[302,8456+4]..[302,8456+26]) ghost
                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[302,8456+4]..[302,8456+26]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[302,8456+4]..[302,8456+20])
                                        Pexp_ident "token_properties" (src/grammarFunctor.ml[302,8456+4]..[302,8456+20])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[302,8456+22]..[302,8456+25])
                                        Pexp_ident "tok" (src/grammarFunctor.ml[302,8456+22]..[302,8456+25])
                                  ]
                                "tk_ocamltype" (src/grammarFunctor.ml[302,8456+27]..[302,8456+39])
                        ]
                      structure_item (src/grammarFunctor.ml[304,8497+2]..[305,8512+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[304,8497+6]..[304,8497+10])
                              Ppat_var "init" (src/grammarFunctor.ml[304,8497+6]..[304,8497+10])
                            expression (src/grammarFunctor.ml[304,8497+11]..[305,8512+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[304,8497+11]..[304,8497+12])
                                Ppat_var "f" (src/grammarFunctor.ml[304,8497+11]..[304,8497+12])
                              expression (src/grammarFunctor.ml[305,8512+4]..[305,8512+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[305,8512+4]..[305,8512+14])
                                  Pexp_ident "Array.init" (src/grammarFunctor.ml[305,8512+4]..[305,8512+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[305,8512+15]..[305,8512+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[305,8512+15]..[305,8512+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[305,8512+17]..[305,8512+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[305,8512+17]..[305,8512+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[307,8532+2]..[308,8547+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[307,8532+6]..[307,8532+10])
                              Ppat_var "iter" (src/grammarFunctor.ml[307,8532+6]..[307,8532+10])
                            expression (src/grammarFunctor.ml[307,8532+11]..[308,8547+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[307,8532+11]..[307,8532+12])
                                Ppat_var "f" (src/grammarFunctor.ml[307,8532+11]..[307,8532+12])
                              expression (src/grammarFunctor.ml[308,8547+4]..[308,8547+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[308,8547+4]..[308,8547+14])
                                  Pexp_ident "Misc.iteri" (src/grammarFunctor.ml[308,8547+4]..[308,8547+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[308,8547+15]..[308,8547+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[308,8547+15]..[308,8547+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[308,8547+17]..[308,8547+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[308,8547+17]..[308,8547+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[310,8567+2]..[311,8587+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[310,8567+6]..[310,8567+10])
                              Ppat_var "fold" (src/grammarFunctor.ml[310,8567+6]..[310,8567+10])
                            expression (src/grammarFunctor.ml[310,8567+11]..[311,8587+23]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[310,8567+11]..[310,8567+12])
                                Ppat_var "f" (src/grammarFunctor.ml[310,8567+11]..[310,8567+12])
                              expression (src/grammarFunctor.ml[310,8567+13]..[311,8587+23]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[310,8567+13]..[310,8567+17])
                                  Ppat_var "accu" (src/grammarFunctor.ml[310,8567+13]..[310,8567+17])
                                expression (src/grammarFunctor.ml[311,8587+4]..[311,8587+23])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[311,8587+4]..[311,8587+14])
                                    Pexp_ident "Misc.foldi" (src/grammarFunctor.ml[311,8587+4]..[311,8587+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[311,8587+15]..[311,8587+16])
                                        Pexp_ident "n" (src/grammarFunctor.ml[311,8587+15]..[311,8587+16])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[311,8587+17]..[311,8587+18])
                                        Pexp_ident "f" (src/grammarFunctor.ml[311,8587+17]..[311,8587+18])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[311,8587+19]..[311,8587+23])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[311,8587+19]..[311,8587+23])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[313,8612+2]..[314,8626+17])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[313,8612+6]..[313,8612+9])
                              Ppat_var "map" (src/grammarFunctor.ml[313,8612+6]..[313,8612+9])
                            expression (src/grammarFunctor.ml[313,8612+10]..[314,8626+17]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[313,8612+10]..[313,8612+11])
                                Ppat_var "f" (src/grammarFunctor.ml[313,8612+10]..[313,8612+11])
                              expression (src/grammarFunctor.ml[314,8626+4]..[314,8626+17])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[314,8626+4]..[314,8626+13])
                                  Pexp_ident "Misc.mapi" (src/grammarFunctor.ml[314,8626+4]..[314,8626+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[314,8626+14]..[314,8626+15])
                                      Pexp_ident "n" (src/grammarFunctor.ml[314,8626+14]..[314,8626+15])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[314,8626+16]..[314,8626+17])
                                      Pexp_ident "f" (src/grammarFunctor.ml[314,8626+16]..[314,8626+17])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[316,8645+2]..[317,8656+26])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[316,8645+6]..[316,8645+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[316,8645+6]..[316,8645+8])
                              None
                            expression (src/grammarFunctor.ml[317,8656+4]..[317,8656+26])
                              Pexp_assert
                              expression (src/grammarFunctor.ml[317,8656+11]..[317,8656+26])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[317,8656+18]..[317,8656+19])
                                  Pexp_ident "=" (src/grammarFunctor.ml[317,8656+18]..[317,8656+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[317,8656+12]..[317,8656+17])
                                      Pexp_ident "sharp" (src/grammarFunctor.ml[317,8656+12]..[317,8656+17])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[317,8656+20]..[317,8656+25])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[317,8656+22]..[317,8656+23])
                                        Pexp_ident "-" (src/grammarFunctor.ml[317,8656+22]..[317,8656+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[317,8656+20]..[317,8656+21])
                                            Pexp_ident "n" (src/grammarFunctor.ml[317,8656+20]..[317,8656+21])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[317,8656+24]..[317,8656+25])
                                            Pexp_constant PConst_int (1,None)
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[318,8683+2]..[319,8704+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[318,8683+6]..[318,8683+11])
                              Ppat_var "foldx" (src/grammarFunctor.ml[318,8683+6]..[318,8683+11])
                            expression (src/grammarFunctor.ml[318,8683+12]..[319,8704+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[318,8683+12]..[318,8683+13])
                                Ppat_var "f" (src/grammarFunctor.ml[318,8683+12]..[318,8683+13])
                              expression (src/grammarFunctor.ml[318,8683+14]..[319,8704+27]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[318,8683+14]..[318,8683+18])
                                  Ppat_var "accu" (src/grammarFunctor.ml[318,8683+14]..[318,8683+18])
                                expression (src/grammarFunctor.ml[319,8704+4]..[319,8704+27])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[319,8704+4]..[319,8704+14])
                                    Pexp_ident "Misc.foldi" (src/grammarFunctor.ml[319,8704+4]..[319,8704+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[319,8704+15]..[319,8704+20])
                                        Pexp_ident "sharp" (src/grammarFunctor.ml[319,8704+15]..[319,8704+20])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[319,8704+21]..[319,8704+22])
                                        Pexp_ident "f" (src/grammarFunctor.ml[319,8704+21]..[319,8704+22])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[319,8704+23]..[319,8704+27])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[319,8704+23]..[319,8704+27])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[320,8732+2]..[321,8747+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[320,8732+6]..[320,8732+10])
                              Ppat_var "mapx" (src/grammarFunctor.ml[320,8732+6]..[320,8732+10])
                            expression (src/grammarFunctor.ml[320,8732+11]..[321,8747+21]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[320,8732+11]..[320,8732+12])
                                Ppat_var "f" (src/grammarFunctor.ml[320,8732+11]..[320,8732+12])
                              expression (src/grammarFunctor.ml[321,8747+4]..[321,8747+21])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[321,8747+4]..[321,8747+13])
                                  Pexp_ident "Misc.mapi" (src/grammarFunctor.ml[321,8747+4]..[321,8747+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[321,8747+14]..[321,8747+19])
                                      Pexp_ident "sharp" (src/grammarFunctor.ml[321,8747+14]..[321,8747+19])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[321,8747+20]..[321,8747+21])
                                      Pexp_ident "f" (src/grammarFunctor.ml[321,8747+20]..[321,8747+21])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[323,8770+2]..[324,8781+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[323,8770+6]..[323,8770+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[323,8770+6]..[323,8770+8])
                              None
                            expression (src/grammarFunctor.ml[324,8781+4]..[324,8781+22])
                              Pexp_assert
                              expression (src/grammarFunctor.ml[324,8781+11]..[324,8781+22])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[324,8781+18]..[324,8781+19])
                                  Pexp_ident "=" (src/grammarFunctor.ml[324,8781+18]..[324,8781+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[324,8781+12]..[324,8781+17])
                                      Pexp_ident "error" (src/grammarFunctor.ml[324,8781+12]..[324,8781+17])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[324,8781+20]..[324,8781+21])
                                      Pexp_constant PConst_int (0,None)
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[325,8804+2]..[328,8858+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[325,8804+6]..[325,8804+15])
                              Ppat_var "iter_real" (src/grammarFunctor.ml[325,8804+6]..[325,8804+15])
                            expression (src/grammarFunctor.ml[325,8804+16]..[328,8858+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[325,8804+16]..[325,8804+17])
                                Ppat_var "f" (src/grammarFunctor.ml[325,8804+16]..[325,8804+17])
                              expression (src/grammarFunctor.ml[326,8824+4]..[328,8858+8])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[326,8824+8]..[326,8824+9])
                                  Ppat_var "i" (src/grammarFunctor.ml[326,8824+8]..[326,8824+9])
                                expression (src/grammarFunctor.ml[326,8824+12]..[326,8824+13])
                                  Pexp_constant PConst_int (1,None)
                                expression (src/grammarFunctor.ml[326,8824+17]..[326,8824+20])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[326,8824+18]..[326,8824+19])
                                    Pexp_ident "-" (src/grammarFunctor.ml[326,8824+18]..[326,8824+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[326,8824+17]..[326,8824+18])
                                        Pexp_ident "n" (src/grammarFunctor.ml[326,8824+17]..[326,8824+18])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[326,8824+19]..[326,8824+20])
                                        Pexp_constant PConst_int (2,None)
                                  ]
                                expression (src/grammarFunctor.ml[327,8848+6]..[327,8848+9])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[327,8848+6]..[327,8848+7])
                                    Pexp_ident "f" (src/grammarFunctor.ml[327,8848+6]..[327,8848+7])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[327,8848+8]..[327,8848+9])
                                        Pexp_ident "i" (src/grammarFunctor.ml[327,8848+8]..[327,8848+9])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[330,8868+2]..[337,9084+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[330,8868+6]..[330,8868+29])
                              Ppat_var "tokens_without_an_alias" (src/grammarFunctor.ml[330,8868+6]..[330,8868+29])
                            expression (src/grammarFunctor.ml[331,8900+4]..[337,9084+18])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[331,8900+8]..[331,8900+12])
                                    Ppat_var "accu" (src/grammarFunctor.ml[331,8900+8]..[331,8900+12])
                                  expression (src/grammarFunctor.ml[331,8900+15]..[331,8900+21])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[331,8900+15]..[331,8900+18])
                                      Pexp_ident "ref" (src/grammarFunctor.ml[331,8900+15]..[331,8900+18])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[331,8900+19]..[331,8900+21])
                                          Pexp_construct "[]" (src/grammarFunctor.ml[331,8900+19]..[331,8900+21])
                                          None
                                    ]
                              ]
                              expression (src/grammarFunctor.ml[332,8925+4]..[337,9084+18])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[332,8925+4]..[336,9075+7])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[332,8925+4]..[332,8925+13])
                                    Pexp_ident "iter_real" (src/grammarFunctor.ml[332,8925+4]..[332,8925+13])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[332,8925+14]..[336,9075+7])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[332,8925+24]..[332,8925+27])
                                          Ppat_var "tok" (src/grammarFunctor.ml[332,8925+24]..[332,8925+27])
                                        expression (src/grammarFunctor.ml[333,8956+6]..[335,9046+28])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[333,8956+10]..[333,8956+20])
                                                Ppat_var "properties" (src/grammarFunctor.ml[333,8956+10]..[333,8956+20])
                                              expression (src/grammarFunctor.ml[333,8956+23]..[333,8956+45])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[333,8956+23]..[333,8956+45]) ghost
                                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[333,8956+23]..[333,8956+45]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[333,8956+23]..[333,8956+39])
                                                      Pexp_ident "token_properties" (src/grammarFunctor.ml[333,8956+23]..[333,8956+39])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[333,8956+41]..[333,8956+44])
                                                      Pexp_ident "tok" (src/grammarFunctor.ml[333,8956+41]..[333,8956+44])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[334,9005+6]..[335,9046+28])
                                            Pexp_ifthenelse
                                            expression (src/grammarFunctor.ml[334,9005+9]..[334,9005+35])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[334,9005+29]..[334,9005+30])
                                                Pexp_ident "=" (src/grammarFunctor.ml[334,9005+29]..[334,9005+30])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[334,9005+9]..[334,9005+28])
                                                    Pexp_field
                                                    expression (src/grammarFunctor.ml[334,9005+9]..[334,9005+19])
                                                      Pexp_ident "properties" (src/grammarFunctor.ml[334,9005+9]..[334,9005+19])
                                                    "tk_alias" (src/grammarFunctor.ml[334,9005+20]..[334,9005+28])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[334,9005+31]..[334,9005+35])
                                                    Pexp_construct "None" (src/grammarFunctor.ml[334,9005+31]..[334,9005+35])
                                                    None
                                              ]
                                            expression (src/grammarFunctor.ml[335,9046+8]..[335,9046+28])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[335,9046+13]..[335,9046+15])
                                                Pexp_ident ":=" (src/grammarFunctor.ml[335,9046+13]..[335,9046+15])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[335,9046+8]..[335,9046+12])
                                                    Pexp_ident "accu" (src/grammarFunctor.ml[335,9046+8]..[335,9046+12])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[335,9046+16]..[335,9046+28])
                                                    Pexp_construct "::" (src/grammarFunctor.ml[335,9046+20]..[335,9046+22])
                                                    Some
                                                      expression (src/grammarFunctor.ml[335,9046+16]..[335,9046+28]) ghost
                                                        Pexp_tuple
                                                        [
                                                          expression (src/grammarFunctor.ml[335,9046+16]..[335,9046+19])
                                                            Pexp_ident "tok" (src/grammarFunctor.ml[335,9046+16]..[335,9046+19])
                                                          expression (src/grammarFunctor.ml[335,9046+23]..[335,9046+28])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[335,9046+23]..[335,9046+24])
                                                              Pexp_ident "!" (src/grammarFunctor.ml[335,9046+23]..[335,9046+24])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[335,9046+24]..[335,9046+28])
                                                                  Pexp_ident "accu" (src/grammarFunctor.ml[335,9046+24]..[335,9046+28])
                                                            ]
                                                        ]
                                              ]
                                            None
                                  ]
                                expression (src/grammarFunctor.ml[337,9084+4]..[337,9084+18])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[337,9084+4]..[337,9084+12])
                                    Pexp_ident "List.rev" (src/grammarFunctor.ml[337,9084+4]..[337,9084+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[337,9084+13]..[337,9084+18])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[337,9084+13]..[337,9084+14])
                                          Pexp_ident "!" (src/grammarFunctor.ml[337,9084+13]..[337,9084+14])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[337,9084+14]..[337,9084+18])
                                              Pexp_ident "accu" (src/grammarFunctor.ml[337,9084+14]..[337,9084+18])
                                        ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[339,9104+2]..[347,9432+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[339,9104+6]..[339,9104+8])
                              Ppat_construct "()" (src/grammarFunctor.ml[339,9104+6]..[339,9104+8])
                              None
                            expression (src/grammarFunctor.ml[340,9115+4]..[347,9432+9])
                              Pexp_ifthenelse
                              expression (src/grammarFunctor.ml[340,9115+7]..[340,9115+42])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[340,9115+15]..[340,9115+17])
                                  Pexp_ident "&&" (src/grammarFunctor.ml[340,9115+15]..[340,9115+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[340,9115+7]..[340,9115+14])
                                      Pexp_ident "verbose" (src/grammarFunctor.ml[340,9115+7]..[340,9115+14])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[340,9115+18]..[340,9115+42])
                                      Pexp_ident "Settings.require_aliases" (src/grammarFunctor.ml[340,9115+18]..[340,9115+42])
                                ]
                              expression (src/grammarFunctor.ml[341,9163+6]..[347,9432+9])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[341,9163+30]..[341,9163+32])
                                  Pexp_ident "|>" (src/grammarFunctor.ml[341,9163+30]..[341,9163+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[341,9163+6]..[341,9163+29])
                                      Pexp_ident "tokens_without_an_alias" (src/grammarFunctor.ml[341,9163+6]..[341,9163+29])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[341,9163+33]..[347,9432+9])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[341,9163+33]..[341,9163+42])
                                        Pexp_ident "List.iter" (src/grammarFunctor.ml[341,9163+33]..[341,9163+42])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[341,9163+43]..[347,9432+9])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[341,9163+53]..[341,9163+56])
                                              Ppat_var "tok" (src/grammarFunctor.ml[341,9163+53]..[341,9163+56])
                                            expression (src/grammarFunctor.ml[342,9223+8]..[346,9410+21])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/grammarFunctor.ml[342,9223+12]..[342,9223+22])
                                                    Ppat_var "properties" (src/grammarFunctor.ml[342,9223+12]..[342,9223+22])
                                                  expression (src/grammarFunctor.ml[342,9223+25]..[342,9223+47])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[342,9223+25]..[342,9223+47]) ghost
                                                      Pexp_ident "Array.get" (src/grammarFunctor.ml[342,9223+25]..[342,9223+47]) ghost
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[342,9223+25]..[342,9223+41])
                                                          Pexp_ident "token_properties" (src/grammarFunctor.ml[342,9223+25]..[342,9223+41])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[342,9223+43]..[342,9223+46])
                                                          Pexp_ident "tok" (src/grammarFunctor.ml[342,9223+43]..[342,9223+46])
                                                    ]
                                              ]
                                              expression (src/grammarFunctor.ml[343,9274+8]..[346,9410+21])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/grammarFunctor.ml[343,9274+12]..[343,9274+15])
                                                      Ppat_var "pos" (src/grammarFunctor.ml[343,9274+12]..[343,9274+15])
                                                    expression (src/grammarFunctor.ml[343,9274+18]..[343,9274+40])
                                                      Pexp_field
                                                      expression (src/grammarFunctor.ml[343,9274+18]..[343,9274+28])
                                                        Pexp_ident "properties" (src/grammarFunctor.ml[343,9274+18]..[343,9274+28])
                                                      "tk_position" (src/grammarFunctor.ml[343,9274+29]..[343,9274+40])
                                                ]
                                                expression (src/grammarFunctor.ml[344,9318+8]..[346,9410+21])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[344,9318+8]..[344,9318+29])
                                                    Pexp_ident "Error.grammar_warning" (src/grammarFunctor.ml[344,9318+8]..[344,9318+29])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[344,9318+30]..[344,9318+35])
                                                        Pexp_construct "::" (src/grammarFunctor.ml[344,9318+31]..[344,9318+35]) ghost
                                                        Some
                                                          expression (src/grammarFunctor.ml[344,9318+31]..[344,9318+35]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/grammarFunctor.ml[344,9318+31]..[344,9318+34])
                                                                Pexp_ident "pos" (src/grammarFunctor.ml[344,9318+31]..[344,9318+34])
                                                              expression (src/grammarFunctor.ml[344,9318+34]..[344,9318+35]) ghost
                                                                Pexp_construct "[]" (src/grammarFunctor.ml[344,9318+34]..[344,9318+35]) ghost
                                                                None
                                                            ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[345,9354+10]..[345,9354+55])
                                                        Pexp_constant PConst_string("no alias has been defined for the token %s.",(src/grammarFunctor.ml[345,9354+11]..[345,9354+54]),None)
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[346,9410+10]..[346,9410+21])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[346,9410+11]..[346,9410+16])
                                                          Pexp_ident "print" (src/grammarFunctor.ml[346,9410+11]..[346,9410+16])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[346,9410+17]..[346,9410+20])
                                                              Pexp_ident "tok" (src/grammarFunctor.ml[346,9410+17]..[346,9410+20])
                                                        ]
                                                  ]
                                      ]
                                ]
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[349,9443+2]..[350,9476+32])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[349,9443+6]..[349,9443+30])
                              Ppat_var "every_token_has_an_alias" (src/grammarFunctor.ml[349,9443+6]..[349,9443+30])
                            expression (src/grammarFunctor.ml[350,9476+4]..[350,9476+32])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[350,9476+28]..[350,9476+29])
                                Pexp_ident "=" (src/grammarFunctor.ml[350,9476+28]..[350,9476+29])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[350,9476+4]..[350,9476+27])
                                    Pexp_ident "tokens_without_an_alias" (src/grammarFunctor.ml[350,9476+4]..[350,9476+27])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[350,9476+30]..[350,9476+32])
                                    Pexp_construct "[]" (src/grammarFunctor.ml[350,9476+30]..[350,9476+32])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[352,9510+2]..[353,9528+35])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[352,9510+6]..[352,9510+11])
                              Ppat_var "alias" (src/grammarFunctor.ml[352,9510+6]..[352,9510+11])
                            expression (src/grammarFunctor.ml[352,9510+12]..[353,9528+35]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[352,9510+12]..[352,9510+15])
                                Ppat_var "tok" (src/grammarFunctor.ml[352,9510+12]..[352,9510+15])
                              expression (src/grammarFunctor.ml[353,9528+4]..[353,9528+35])
                                Pexp_field
                                expression (src/grammarFunctor.ml[353,9528+4]..[353,9528+26])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[353,9528+4]..[353,9528+26]) ghost
                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[353,9528+4]..[353,9528+26]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[353,9528+4]..[353,9528+20])
                                        Pexp_ident "token_properties" (src/grammarFunctor.ml[353,9528+4]..[353,9528+20])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[353,9528+22]..[353,9528+25])
                                        Pexp_ident "tok" (src/grammarFunctor.ml[353,9528+22]..[353,9528+25])
                                  ]
                                "tk_alias" (src/grammarFunctor.ml[353,9528+27]..[353,9528+35])
                        ]
                      structure_item (src/grammarFunctor.ml[355,9565+2]..[363,9934+3])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[355,9565+6]..[355,9565+20])
                              Ppat_var "unquoted_alias" (src/grammarFunctor.ml[355,9565+6]..[355,9565+20])
                            expression (src/grammarFunctor.ml[355,9565+21]..[363,9934+3]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[355,9565+21]..[355,9565+24])
                                Ppat_var "tok" (src/grammarFunctor.ml[355,9565+21]..[355,9565+24])
                              expression (src/grammarFunctor.ml[356,9592+4]..[363,9934+3])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[356,9592+14]..[356,9592+16])
                                  Pexp_ident "|>" (src/grammarFunctor.ml[356,9592+14]..[356,9592+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[356,9592+4]..[356,9592+13])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[356,9592+4]..[356,9592+9])
                                        Pexp_ident "alias" (src/grammarFunctor.ml[356,9592+4]..[356,9592+9])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[356,9592+10]..[356,9592+13])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[356,9592+10]..[356,9592+13])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[356,9592+17]..[363,9934+3])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[356,9592+17]..[356,9592+27])
                                        Pexp_ident "Option.map" (src/grammarFunctor.ml[356,9592+17]..[356,9592+27])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[356,9592+28]..[363,9934+3])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[356,9592+33]..[356,9592+36])
                                              Ppat_var "qid" (src/grammarFunctor.ml[356,9592+33]..[356,9592+36])
                                            expression (src/grammarFunctor.ml[357,9632+6]..[362,9869+64])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[357,9632+6]..[357,9632+28])
                                                Pexp_assert
                                                expression (src/grammarFunctor.ml[357,9632+13]..[357,9632+28])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[357,9632+22]..[357,9632+23])
                                                    Pexp_ident "=" (src/grammarFunctor.ml[357,9632+22]..[357,9632+23])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[357,9632+14]..[357,9632+21])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[357,9632+14]..[357,9632+21]) ghost
                                                          Pexp_ident "String.get" (src/grammarFunctor.ml[357,9632+14]..[357,9632+21]) ghost
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[357,9632+14]..[357,9632+17])
                                                              Pexp_ident "qid" (src/grammarFunctor.ml[357,9632+14]..[357,9632+17])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[357,9632+19]..[357,9632+20])
                                                              Pexp_constant PConst_int (0,None)
                                                        ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[357,9632+24]..[357,9632+27])
                                                        Pexp_constant PConst_char 22
                                                  ]
                                              expression (src/grammarFunctor.ml[360,9764+6]..[362,9869+64])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/grammarFunctor.ml[360,9764+10]..[360,9764+13])
                                                      Ppat_var "qid" (src/grammarFunctor.ml[360,9764+10]..[360,9764+13])
                                                    expression (src/grammarFunctor.ml[360,9764+16]..[360,9764+56])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[360,9764+16]..[360,9764+26])
                                                        Pexp_ident "String.sub" (src/grammarFunctor.ml[360,9764+16]..[360,9764+26])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[360,9764+27]..[360,9764+30])
                                                            Pexp_ident "qid" (src/grammarFunctor.ml[360,9764+27]..[360,9764+30])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[360,9764+31]..[360,9764+32])
                                                            Pexp_constant PConst_int (1,None)
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[360,9764+33]..[360,9764+56])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[360,9764+52]..[360,9764+53])
                                                              Pexp_ident "-" (src/grammarFunctor.ml[360,9764+52]..[360,9764+53])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[360,9764+34]..[360,9764+51])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[360,9764+34]..[360,9764+47])
                                                                    Pexp_ident "String.length" (src/grammarFunctor.ml[360,9764+34]..[360,9764+47])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[360,9764+48]..[360,9764+51])
Pexp_ident "qid" (src/grammarFunctor.ml[360,9764+48]..[360,9764+51])
                                                                  ]
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[360,9764+54]..[360,9764+55])
                                                                  Pexp_constant PConst_int (1,None)
                                                            ]
                                                      ]
                                                ]
                                                expression (src/grammarFunctor.ml[361,9824+6]..[362,9869+64])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[361,9824+10]..[361,9824+16])
                                                        Ppat_var "lexbuf" (src/grammarFunctor.ml[361,9824+10]..[361,9824+16])
                                                      expression (src/grammarFunctor.ml[361,9824+19]..[361,9824+41])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[361,9824+19]..[361,9824+37])
                                                          Pexp_ident "Lexing.from_string" (src/grammarFunctor.ml[361,9824+19]..[361,9824+37])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[361,9824+38]..[361,9824+41])
                                                              Pexp_ident "qid" (src/grammarFunctor.ml[361,9824+38]..[361,9824+41])
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[362,9869+6]..[362,9869+64])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[362,9869+6]..[362,9869+22])
                                                      Pexp_ident "Misc.with_buffer" (src/grammarFunctor.ml[362,9869+6]..[362,9869+22])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[362,9869+23]..[362,9869+24])
                                                          Pexp_constant PConst_int (8,None)
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[362,9869+25]..[362,9869+64])
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (src/grammarFunctor.ml[362,9869+30]..[362,9869+31])
                                                            Ppat_var "b" (src/grammarFunctor.ml[362,9869+30]..[362,9869+31])
                                                          expression (src/grammarFunctor.ml[362,9869+35]..[362,9869+63])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[362,9869+35]..[362,9869+54])
                                                              Pexp_ident "Lexer.decode_string" (src/grammarFunctor.ml[362,9869+35]..[362,9869+54])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[362,9869+55]..[362,9869+56])
                                                                  Pexp_ident "b" (src/grammarFunctor.ml[362,9869+55]..[362,9869+56])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[362,9869+57]..[362,9869+63])
                                                                  Pexp_ident "lexbuf" (src/grammarFunctor.ml[362,9869+57]..[362,9869+63])
                                                            ]
                                                    ]
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[365,9939+2]..[372,10148+13])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[365,9939+6]..[365,9939+20])
                              Ppat_var "print_concrete" (src/grammarFunctor.ml[365,9939+6]..[365,9939+20])
                            expression (src/grammarFunctor.ml[365,9939+21]..[372,10148+13]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[365,9939+21]..[365,9939+22])
                                Ppat_var "t" (src/grammarFunctor.ml[365,9939+21]..[365,9939+22])
                              expression (src/grammarFunctor.ml[366,9964+2]..[372,10148+13])
                                Pexp_match
                                expression (src/grammarFunctor.ml[366,9964+8]..[366,9964+24])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[366,9964+8]..[366,9964+22])
                                    Pexp_ident "unquoted_alias" (src/grammarFunctor.ml[366,9964+8]..[366,9964+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[366,9964+23]..[366,9964+24])
                                        Pexp_ident "t" (src/grammarFunctor.ml[366,9964+23]..[366,9964+24])
                                  ]
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[367,9994+4]..[367,9994+14])
                                      Ppat_construct "Some" (src/grammarFunctor.ml[367,9994+4]..[367,9994+8])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[367,9994+9]..[367,9994+14])
                                          Ppat_var "alias" (src/grammarFunctor.ml[367,9994+9]..[367,9994+14])
                                    expression (src/grammarFunctor.ml[368,10012+6]..[368,10012+11])
                                      Pexp_ident "alias" (src/grammarFunctor.ml[368,10012+6]..[368,10012+11])
                                  <case>
                                    pattern (src/grammarFunctor.ml[369,10024+4]..[369,10024+8])
                                      Ppat_construct "None" (src/grammarFunctor.ml[369,10024+4]..[369,10024+8])
                                      None
                                    expression (src/grammarFunctor.ml[372,10148+6]..[372,10148+13])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[372,10148+6]..[372,10148+11])
                                        Pexp_ident "print" (src/grammarFunctor.ml[372,10148+6]..[372,10148+11])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[372,10148+12]..[372,10148+13])
                                            Pexp_ident "t" (src/grammarFunctor.ml[372,10148+12]..[372,10148+13])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[377,10266+2]..[381,10334+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[377,10266+6]..[377,10266+9])
                              Ppat_var "eof" (src/grammarFunctor.ml[377,10266+6]..[377,10266+9])
                            expression (src/grammarFunctor.ml[378,10278+4]..[381,10334+10])
                              Pexp_try
                              expression (src/grammarFunctor.ml[379,10286+6]..[379,10286+25])
                                Pexp_construct "Some" (src/grammarFunctor.ml[379,10286+6]..[379,10286+10])
                                Some
                                  expression (src/grammarFunctor.ml[379,10286+11]..[379,10286+25])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[379,10286+12]..[379,10286+18])
                                      Pexp_ident "lookup" (src/grammarFunctor.ml[379,10286+12]..[379,10286+18])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[379,10286+19]..[379,10286+24])
                                          Pexp_constant PConst_string("EOF",(src/grammarFunctor.ml[379,10286+20]..[379,10286+23]),None)
                                    ]
                              [
                                <case>
                                  pattern (src/grammarFunctor.ml[380,10312+9]..[380,10312+18])
                                    Ppat_construct "Not_found" (src/grammarFunctor.ml[380,10312+9]..[380,10312+18])
                                    None
                                  expression (src/grammarFunctor.ml[381,10334+6]..[381,10334+10])
                                    Pexp_construct "None" (src/grammarFunctor.ml[381,10334+6]..[381,10334+10])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[383,10346+2]..[384,10369+40])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[383,10346+6]..[383,10346+16])
                              Ppat_var "attributes" (src/grammarFunctor.ml[383,10346+6]..[383,10346+16])
                            expression (src/grammarFunctor.ml[383,10346+17]..[384,10369+40]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[383,10346+17]..[383,10346+20])
                                Ppat_var "tok" (src/grammarFunctor.ml[383,10346+17]..[383,10346+20])
                              expression (src/grammarFunctor.ml[384,10369+4]..[384,10369+40])
                                Pexp_field
                                expression (src/grammarFunctor.ml[384,10369+4]..[384,10369+26])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[384,10369+4]..[384,10369+26]) ghost
                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[384,10369+4]..[384,10369+26]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[384,10369+4]..[384,10369+20])
                                        Pexp_ident "token_properties" (src/grammarFunctor.ml[384,10369+4]..[384,10369+20])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[384,10369+22]..[384,10369+25])
                                        Pexp_ident "tok" (src/grammarFunctor.ml[384,10369+22]..[384,10369+25])
                                  ]
                                "tk_attributes" (src/grammarFunctor.ml[384,10369+27]..[384,10369+40])
                        ]
                      structure_item (src/grammarFunctor.ml[392,10705+2]..[461,12593+5])
                        Pstr_module
                        "Word" (src/grammarFunctor.ml[392,10705+9]..[392,10705+13])
                          module_expr (src/grammarFunctor.ml[392,10705+14]..[461,12593+5])
                            Pmod_functor "X" (src/grammarFunctor.ml[392,10705+15]..[392,10705+16])
                            module_type (src/grammarFunctor.ml[392,10705+19]..[392,10705+26])
                              Pmty_signature
                              []
                            module_expr (src/grammarFunctor.ml[392,10705+30]..[461,12593+5])
                              Pmod_structure
                              [
                                structure_item (src/grammarFunctor.ml[405,11417+4]..[406,11430+23])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[405,11417+8]..[405,11417+10])
                                        Ppat_construct "()" (src/grammarFunctor.ml[405,11417+8]..[405,11417+10])
                                        None
                                      expression (src/grammarFunctor.ml[406,11430+6]..[406,11430+23])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[406,11430+13]..[406,11430+23])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[406,11430+16]..[406,11430+18])
                                            Pexp_ident "<=" (src/grammarFunctor.ml[406,11430+16]..[406,11430+18])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[406,11430+14]..[406,11430+15])
                                                Pexp_ident "n" (src/grammarFunctor.ml[406,11430+14]..[406,11430+15])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[406,11430+19]..[406,11430+22])
                                                Pexp_constant PConst_int (256,None)
                                          ]
                                  ]
                                structure_item (src/grammarFunctor.ml[408,11455+4]..[409,11525+33])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[408,11455+8]..[408,11455+67])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[408,11455+8]..[408,11455+32])
                                            Ppat_constraint
                                            pattern (src/grammarFunctor.ml[408,11455+9]..[408,11455+15])
                                              Ppat_var "encode" (src/grammarFunctor.ml[408,11455+9]..[408,11455+15])
                                            core_type (src/grammarFunctor.ml[408,11455+18]..[408,11455+31])
                                              Ptyp_arrow
                                              Nolabel
                                              core_type (src/grammarFunctor.ml[408,11455+18]..[408,11455+24])
                                                Ptyp_constr "string" (src/grammarFunctor.ml[408,11455+18]..[408,11455+24])
                                                []
                                              core_type (src/grammarFunctor.ml[408,11455+28]..[408,11455+31])
                                                Ptyp_constr "int" (src/grammarFunctor.ml[408,11455+28]..[408,11455+31])
                                                []
                                          pattern (src/grammarFunctor.ml[408,11455+34]..[408,11455+58])
                                            Ppat_constraint
                                            pattern (src/grammarFunctor.ml[408,11455+35]..[408,11455+41])
                                              Ppat_var "decode" (src/grammarFunctor.ml[408,11455+35]..[408,11455+41])
                                            core_type (src/grammarFunctor.ml[408,11455+44]..[408,11455+57])
                                              Ptyp_arrow
                                              Nolabel
                                              core_type (src/grammarFunctor.ml[408,11455+44]..[408,11455+47])
                                                Ptyp_constr "int" (src/grammarFunctor.ml[408,11455+44]..[408,11455+47])
                                                []
                                              core_type (src/grammarFunctor.ml[408,11455+51]..[408,11455+57])
                                                Ptyp_constr "string" (src/grammarFunctor.ml[408,11455+51]..[408,11455+57])
                                                []
                                          pattern (src/grammarFunctor.ml[408,11455+60]..[408,11455+67])
                                            Ppat_var "verbose" (src/grammarFunctor.ml[408,11455+60]..[408,11455+67])
                                        ]
                                      expression (src/grammarFunctor.ml[409,11525+6]..[409,11525+33])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[409,11525+6]..[409,11525+28])
                                          Pexp_ident "Misc.new_encode_decode" (src/grammarFunctor.ml[409,11525+6]..[409,11525+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[409,11525+29]..[409,11525+33])
                                              Pexp_constant PConst_int (1024,None)
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[411,11560+4]..[412,11576+9])
                                  Pstr_type Rec
                                  [
                                    type_declaration "word" (src/grammarFunctor.ml[411,11560+9]..[411,11560+13]) (src/grammarFunctor.ml[411,11560+4]..[412,11576+9])
                                      ptype_params =
                                        []
                                      ptype_cstrs =
                                        []
                                      ptype_kind =
                                        Ptype_abstract
                                      ptype_private = Public
                                      ptype_manifest =
                                        Some
                                          core_type (src/grammarFunctor.ml[412,11576+6]..[412,11576+9])
                                            Ptyp_constr "int" (src/grammarFunctor.ml[412,11576+6]..[412,11576+9])
                                            []
                                  ]
                                structure_item (src/grammarFunctor.ml[414,11587+4]..[415,11605+15])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[414,11587+8]..[414,11587+15])
                                        Ppat_var "epsilon" (src/grammarFunctor.ml[414,11587+8]..[414,11587+15])
                                      expression (src/grammarFunctor.ml[415,11605+6]..[415,11605+15])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[415,11605+6]..[415,11605+12])
                                          Pexp_ident "encode" (src/grammarFunctor.ml[415,11605+6]..[415,11605+12])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[415,11605+13]..[415,11605+15])
                                              Pexp_constant PConst_string("",(src/grammarFunctor.ml[415,11605+14]..[415,11605+14]),None)
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[417,11622+4]..[418,11644+41])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[417,11622+8]..[417,11622+17])
                                        Ppat_var "singleton" (src/grammarFunctor.ml[417,11622+8]..[417,11622+17])
                                      expression (src/grammarFunctor.ml[417,11622+18]..[418,11644+41]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[417,11622+18]..[417,11622+19])
                                          Ppat_var "t" (src/grammarFunctor.ml[417,11622+18]..[417,11622+19])
                                        expression (src/grammarFunctor.ml[418,11644+6]..[418,11644+41])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[418,11644+6]..[418,11644+12])
                                            Pexp_ident "encode" (src/grammarFunctor.ml[418,11644+6]..[418,11644+12])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[418,11644+13]..[418,11644+41])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[418,11644+14]..[418,11644+25])
                                                  Pexp_ident "String.make" (src/grammarFunctor.ml[418,11644+14]..[418,11644+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[418,11644+26]..[418,11644+27])
                                                      Pexp_constant PConst_int (1,None)
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[418,11644+28]..[418,11644+40])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[418,11644+29]..[418,11644+37])
                                                        Pexp_ident "Char.chr" (src/grammarFunctor.ml[418,11644+29]..[418,11644+37])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[418,11644+38]..[418,11644+39])
                                                            Pexp_ident "t" (src/grammarFunctor.ml[418,11644+38]..[418,11644+39])
                                                      ]
                                                ]
                                          ]
                                  ]
                                structure_item (src/grammarFunctor.ml[420,11687+4]..[428,11871+24])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[420,11687+8]..[420,11687+14])
                                        Ppat_var "append" (src/grammarFunctor.ml[420,11687+8]..[420,11687+14])
                                      expression (src/grammarFunctor.ml[420,11687+15]..[428,11871+24]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[420,11687+15]..[420,11687+17])
                                          Ppat_var "i1" (src/grammarFunctor.ml[420,11687+15]..[420,11687+17])
                                        expression (src/grammarFunctor.ml[420,11687+18]..[428,11871+24]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[420,11687+18]..[420,11687+20])
                                            Ppat_var "i2" (src/grammarFunctor.ml[420,11687+18]..[420,11687+20])
                                          expression (src/grammarFunctor.ml[421,11710+6]..[428,11871+24])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[421,11710+10]..[421,11710+12])
                                                  Ppat_var "w1" (src/grammarFunctor.ml[421,11710+10]..[421,11710+12])
                                                expression (src/grammarFunctor.ml[421,11710+15]..[421,11710+24])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[421,11710+15]..[421,11710+21])
                                                    Pexp_ident "decode" (src/grammarFunctor.ml[421,11710+15]..[421,11710+21])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[421,11710+22]..[421,11710+24])
                                                        Pexp_ident "i1" (src/grammarFunctor.ml[421,11710+22]..[421,11710+24])
                                                  ]
                                              <def>
                                                pattern (src/grammarFunctor.ml[422,11735+10]..[422,11735+12])
                                                  Ppat_var "w2" (src/grammarFunctor.ml[422,11735+10]..[422,11735+12])
                                                expression (src/grammarFunctor.ml[422,11735+15]..[422,11735+24])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[422,11735+15]..[422,11735+21])
                                                    Pexp_ident "decode" (src/grammarFunctor.ml[422,11735+15]..[422,11735+21])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[422,11735+22]..[422,11735+24])
                                                        Pexp_ident "i2" (src/grammarFunctor.ml[422,11735+22]..[422,11735+24])
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[423,11763+6]..[428,11871+24])
                                              Pexp_ifthenelse
                                              expression (src/grammarFunctor.ml[423,11763+9]..[423,11763+29])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[423,11763+26]..[423,11763+27])
                                                  Pexp_ident "=" (src/grammarFunctor.ml[423,11763+26]..[423,11763+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[423,11763+9]..[423,11763+25])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[423,11763+9]..[423,11763+22])
                                                        Pexp_ident "String.length" (src/grammarFunctor.ml[423,11763+9]..[423,11763+22])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[423,11763+23]..[423,11763+25])
                                                            Pexp_ident "w1" (src/grammarFunctor.ml[423,11763+23]..[423,11763+25])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[423,11763+28]..[423,11763+29])
                                                      Pexp_constant PConst_int (0,None)
                                                ]
                                              expression (src/grammarFunctor.ml[424,11798+8]..[424,11798+10])
                                                Pexp_ident "i2" (src/grammarFunctor.ml[424,11798+8]..[424,11798+10])
                                              Some
                                                expression (src/grammarFunctor.ml[425,11809+11]..[428,11871+24])
                                                  Pexp_ifthenelse
                                                  expression (src/grammarFunctor.ml[425,11809+14]..[425,11809+34])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[425,11809+31]..[425,11809+32])
                                                      Pexp_ident "=" (src/grammarFunctor.ml[425,11809+31]..[425,11809+32])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[425,11809+14]..[425,11809+30])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[425,11809+14]..[425,11809+27])
                                                            Pexp_ident "String.length" (src/grammarFunctor.ml[425,11809+14]..[425,11809+27])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[425,11809+28]..[425,11809+30])
                                                                Pexp_ident "w2" (src/grammarFunctor.ml[425,11809+28]..[425,11809+30])
                                                          ]
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[425,11809+33]..[425,11809+34])
                                                          Pexp_constant PConst_int (0,None)
                                                    ]
                                                  expression (src/grammarFunctor.ml[426,11849+8]..[426,11849+10])
                                                    Pexp_ident "i1" (src/grammarFunctor.ml[426,11849+8]..[426,11849+10])
                                                  Some
                                                    expression (src/grammarFunctor.ml[428,11871+8]..[428,11871+24])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[428,11871+8]..[428,11871+14])
                                                        Pexp_ident "encode" (src/grammarFunctor.ml[428,11871+8]..[428,11871+14])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[428,11871+15]..[428,11871+24])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[428,11871+19]..[428,11871+20])
                                                              Pexp_ident "^" (src/grammarFunctor.ml[428,11871+19]..[428,11871+20])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[428,11871+16]..[428,11871+18])
                                                                  Pexp_ident "w1" (src/grammarFunctor.ml[428,11871+16]..[428,11871+18])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[428,11871+21]..[428,11871+23])
                                                                  Pexp_ident "w2" (src/grammarFunctor.ml[428,11871+21]..[428,11871+23])
                                                            ]
                                                      ]
                                  ]
                                structure_item (src/grammarFunctor.ml[430,11897+4]..[431,11916+30])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[430,11897+8]..[430,11897+14])
                                        Ppat_var "length" (src/grammarFunctor.ml[430,11897+8]..[430,11897+14])
                                      expression (src/grammarFunctor.ml[430,11897+15]..[431,11916+30]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[430,11897+15]..[430,11897+16])
                                          Ppat_var "i" (src/grammarFunctor.ml[430,11897+15]..[430,11897+16])
                                        expression (src/grammarFunctor.ml[431,11916+6]..[431,11916+30])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[431,11916+6]..[431,11916+19])
                                            Pexp_ident "String.length" (src/grammarFunctor.ml[431,11916+6]..[431,11916+19])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[431,11916+20]..[431,11916+30])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[431,11916+21]..[431,11916+27])
                                                  Pexp_ident "decode" (src/grammarFunctor.ml[431,11916+21]..[431,11916+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[431,11916+28]..[431,11916+29])
                                                      Pexp_ident "i" (src/grammarFunctor.ml[431,11916+28]..[431,11916+29])
                                                ]
                                          ]
                                  ]
                                structure_item (src/grammarFunctor.ml[433,11948+4]..[438,12063+9])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[433,11948+8]..[433,11948+13])
                                        Ppat_var "first" (src/grammarFunctor.ml[433,11948+8]..[433,11948+13])
                                      expression (src/grammarFunctor.ml[433,11948+14]..[438,12063+9]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[433,11948+14]..[433,11948+15])
                                          Ppat_var "i" (src/grammarFunctor.ml[433,11948+14]..[433,11948+15])
                                        expression (src/grammarFunctor.ml[433,11948+16]..[438,12063+9]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[433,11948+16]..[433,11948+17])
                                            Ppat_var "z" (src/grammarFunctor.ml[433,11948+16]..[433,11948+17])
                                          expression (src/grammarFunctor.ml[434,11968+6]..[438,12063+9])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[434,11968+10]..[434,11968+11])
                                                  Ppat_var "w" (src/grammarFunctor.ml[434,11968+10]..[434,11968+11])
                                                expression (src/grammarFunctor.ml[434,11968+14]..[434,11968+22])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[434,11968+14]..[434,11968+20])
                                                    Pexp_ident "decode" (src/grammarFunctor.ml[434,11968+14]..[434,11968+20])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[434,11968+21]..[434,11968+22])
                                                        Pexp_ident "i" (src/grammarFunctor.ml[434,11968+21]..[434,11968+22])
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[435,11994+6]..[438,12063+9])
                                              Pexp_ifthenelse
                                              expression (src/grammarFunctor.ml[435,11994+9]..[435,11994+28])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[435,11994+25]..[435,11994+26])
                                                  Pexp_ident ">" (src/grammarFunctor.ml[435,11994+25]..[435,11994+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[435,11994+9]..[435,11994+24])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[435,11994+9]..[435,11994+22])
                                                        Pexp_ident "String.length" (src/grammarFunctor.ml[435,11994+9]..[435,11994+22])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[435,11994+23]..[435,11994+24])
                                                            Pexp_ident "w" (src/grammarFunctor.ml[435,11994+23]..[435,11994+24])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[435,11994+27]..[435,11994+28])
                                                      Pexp_constant PConst_int (0,None)
                                                ]
                                              expression (src/grammarFunctor.ml[436,12028+8]..[436,12028+23])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[436,12028+8]..[436,12028+17])
                                                  Pexp_ident "Char.code" (src/grammarFunctor.ml[436,12028+8]..[436,12028+17])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[436,12028+18]..[436,12028+23])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[436,12028+18]..[436,12028+23]) ghost
                                                        Pexp_ident "String.get" (src/grammarFunctor.ml[436,12028+18]..[436,12028+23]) ghost
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[436,12028+18]..[436,12028+19])
                                                            Pexp_ident "w" (src/grammarFunctor.ml[436,12028+18]..[436,12028+19])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[436,12028+21]..[436,12028+22])
                                                            Pexp_constant PConst_int (0,None)
                                                      ]
                                                ]
                                              Some
                                                expression (src/grammarFunctor.ml[438,12063+8]..[438,12063+9])
                                                  Pexp_ident "z" (src/grammarFunctor.ml[438,12063+8]..[438,12063+9])
                                  ]
                                structure_item (src/grammarFunctor.ml[440,12074+4]..[444,12145+47])
                                  Pstr_value Rec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[440,12074+12]..[440,12074+20])
                                        Ppat_var "elements" (src/grammarFunctor.ml[440,12074+12]..[440,12074+20])
                                      expression (src/grammarFunctor.ml[440,12074+21]..[444,12145+47]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[440,12074+21]..[440,12074+22])
                                          Ppat_var "i" (src/grammarFunctor.ml[440,12074+21]..[440,12074+22])
                                        expression (src/grammarFunctor.ml[440,12074+23]..[444,12145+47]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[440,12074+23]..[440,12074+24])
                                            Ppat_var "n" (src/grammarFunctor.ml[440,12074+23]..[440,12074+24])
                                          expression (src/grammarFunctor.ml[440,12074+25]..[444,12145+47]) ghost
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[440,12074+25]..[440,12074+26])
                                              Ppat_var "w" (src/grammarFunctor.ml[440,12074+25]..[440,12074+26])
                                            expression (src/grammarFunctor.ml[441,12103+6]..[444,12145+47])
                                              Pexp_ifthenelse
                                              expression (src/grammarFunctor.ml[441,12103+9]..[441,12103+14])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[441,12103+11]..[441,12103+12])
                                                  Pexp_ident "=" (src/grammarFunctor.ml[441,12103+11]..[441,12103+12])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[441,12103+9]..[441,12103+10])
                                                      Pexp_ident "i" (src/grammarFunctor.ml[441,12103+9]..[441,12103+10])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[441,12103+13]..[441,12103+14])
                                                      Pexp_ident "n" (src/grammarFunctor.ml[441,12103+13]..[441,12103+14])
                                                ]
                                              expression (src/grammarFunctor.ml[442,12123+8]..[442,12123+10])
                                                Pexp_construct "[]" (src/grammarFunctor.ml[442,12123+8]..[442,12123+10])
                                                None
                                              Some
                                                expression (src/grammarFunctor.ml[444,12145+8]..[444,12145+47])
                                                  Pexp_construct "::" (src/grammarFunctor.ml[444,12145+24]..[444,12145+26])
                                                  Some
                                                    expression (src/grammarFunctor.ml[444,12145+8]..[444,12145+47]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[444,12145+8]..[444,12145+23])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[444,12145+8]..[444,12145+17])
                                                            Pexp_ident "Char.code" (src/grammarFunctor.ml[444,12145+8]..[444,12145+17])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[444,12145+18]..[444,12145+23])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[444,12145+18]..[444,12145+23]) ghost
                                                                  Pexp_ident "String.get" (src/grammarFunctor.ml[444,12145+18]..[444,12145+23]) ghost
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[444,12145+18]..[444,12145+19])
                                                                      Pexp_ident "w" (src/grammarFunctor.ml[444,12145+18]..[444,12145+19])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[444,12145+21]..[444,12145+22])
                                                                      Pexp_ident "i" (src/grammarFunctor.ml[444,12145+21]..[444,12145+22])
                                                                ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[444,12145+27]..[444,12145+47])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[444,12145+27]..[444,12145+35])
                                                            Pexp_ident "elements" (src/grammarFunctor.ml[444,12145+27]..[444,12145+35])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[444,12145+36]..[444,12145+43])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[444,12145+39]..[444,12145+40])
                                                                  Pexp_ident "+" (src/grammarFunctor.ml[444,12145+39]..[444,12145+40])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[444,12145+37]..[444,12145+38])
                                                                      Pexp_ident "i" (src/grammarFunctor.ml[444,12145+37]..[444,12145+38])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[444,12145+41]..[444,12145+42])
                                                                      Pexp_constant PConst_int (1,None)
                                                                ]
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[444,12145+44]..[444,12145+45])
                                                                Pexp_ident "n" (src/grammarFunctor.ml[444,12145+44]..[444,12145+45])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[444,12145+46]..[444,12145+47])
                                                                Pexp_ident "w" (src/grammarFunctor.ml[444,12145+46]..[444,12145+47])
                                                          ]
                                                      ]
                                  ]
                                structure_item (src/grammarFunctor.ml[446,12194+4]..[448,12241+36])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[446,12194+8]..[446,12194+16])
                                        Ppat_var "elements" (src/grammarFunctor.ml[446,12194+8]..[446,12194+16])
                                      expression (src/grammarFunctor.ml[446,12194+17]..[448,12241+36]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[446,12194+17]..[446,12194+18])
                                          Ppat_var "i" (src/grammarFunctor.ml[446,12194+17]..[446,12194+18])
                                        expression (src/grammarFunctor.ml[447,12215+6]..[448,12241+36])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[447,12215+10]..[447,12215+11])
                                                Ppat_var "w" (src/grammarFunctor.ml[447,12215+10]..[447,12215+11])
                                              expression (src/grammarFunctor.ml[447,12215+14]..[447,12215+22])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[447,12215+14]..[447,12215+20])
                                                  Pexp_ident "decode" (src/grammarFunctor.ml[447,12215+14]..[447,12215+20])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[447,12215+21]..[447,12215+22])
                                                      Pexp_ident "i" (src/grammarFunctor.ml[447,12215+21]..[447,12215+22])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[448,12241+6]..[448,12241+36])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[448,12241+6]..[448,12241+14])
                                              Pexp_ident "elements" (src/grammarFunctor.ml[448,12241+6]..[448,12241+14])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[448,12241+15]..[448,12241+16])
                                                  Pexp_constant PConst_int (0,None)
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[448,12241+17]..[448,12241+34])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[448,12241+18]..[448,12241+31])
                                                    Pexp_ident "String.length" (src/grammarFunctor.ml[448,12241+18]..[448,12241+31])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[448,12241+32]..[448,12241+33])
                                                        Pexp_ident "w" (src/grammarFunctor.ml[448,12241+32]..[448,12241+33])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[448,12241+35]..[448,12241+36])
                                                  Pexp_ident "w" (src/grammarFunctor.ml[448,12241+35]..[448,12241+36])
                                            ]
                                  ]
                                structure_item (src/grammarFunctor.ml[450,12279+4]..[455,12410+34])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[450,12279+8]..[450,12279+13])
                                        Ppat_var "print" (src/grammarFunctor.ml[450,12279+8]..[450,12279+13])
                                      expression (src/grammarFunctor.ml[450,12279+14]..[455,12410+34]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[450,12279+14]..[450,12279+15])
                                          Ppat_var "i" (src/grammarFunctor.ml[450,12279+14]..[450,12279+15])
                                        expression (src/grammarFunctor.ml[451,12297+6]..[455,12410+34])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[451,12297+10]..[451,12297+11])
                                                Ppat_var "w" (src/grammarFunctor.ml[451,12297+10]..[451,12297+11])
                                              expression (src/grammarFunctor.ml[451,12297+14]..[451,12297+22])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[451,12297+14]..[451,12297+20])
                                                  Pexp_ident "decode" (src/grammarFunctor.ml[451,12297+14]..[451,12297+20])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[451,12297+21]..[451,12297+22])
                                                      Pexp_ident "i" (src/grammarFunctor.ml[451,12297+21]..[451,12297+22])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[452,12323+6]..[455,12410+34])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[452,12323+6]..[452,12323+35])
                                              Pexp_ident "Misc.separated_iter_to_string" (src/grammarFunctor.ml[452,12323+6]..[452,12323+35])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[453,12359+8]..[453,12359+38])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[453,12359+13]..[453,12359+14])
                                                    Ppat_var "c" (src/grammarFunctor.ml[453,12359+13]..[453,12359+14])
                                                  expression (src/grammarFunctor.ml[453,12359+18]..[453,12359+37])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[453,12359+18]..[453,12359+23])
                                                      Pexp_ident "print" (src/grammarFunctor.ml[453,12359+18]..[453,12359+23])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[453,12359+24]..[453,12359+37])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[453,12359+25]..[453,12359+34])
                                                            Pexp_ident "Char.code" (src/grammarFunctor.ml[453,12359+25]..[453,12359+34])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[453,12359+35]..[453,12359+36])
                                                                Pexp_ident "c" (src/grammarFunctor.ml[453,12359+35]..[453,12359+36])
                                                          ]
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[454,12398+8]..[454,12398+11])
                                                  Pexp_constant PConst_string(" ",(src/grammarFunctor.ml[454,12398+9]..[454,12398+10]),None)
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[455,12410+8]..[455,12410+34])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[455,12410+13]..[455,12410+14])
                                                    Ppat_var "f" (src/grammarFunctor.ml[455,12410+13]..[455,12410+14])
                                                  expression (src/grammarFunctor.ml[455,12410+18]..[455,12410+33])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[455,12410+18]..[455,12410+29])
                                                      Pexp_ident "String.iter" (src/grammarFunctor.ml[455,12410+18]..[455,12410+29])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[455,12410+30]..[455,12410+31])
                                                          Pexp_ident "f" (src/grammarFunctor.ml[455,12410+30]..[455,12410+31])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[455,12410+32]..[455,12410+33])
                                                          Pexp_ident "w" (src/grammarFunctor.ml[455,12410+32]..[455,12410+33])
                                                    ]
                                            ]
                                  ]
                                structure_item (src/grammarFunctor.ml[458,12522+4]..[459,12546+45])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[458,12522+8]..[458,12522+15])
                                        Ppat_var "compare" (src/grammarFunctor.ml[458,12522+8]..[458,12522+15])
                                      expression (src/grammarFunctor.ml[458,12522+16]..[459,12546+45]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[458,12522+16]..[458,12522+18])
                                          Ppat_var "i1" (src/grammarFunctor.ml[458,12522+16]..[458,12522+18])
                                        expression (src/grammarFunctor.ml[458,12522+19]..[459,12546+45]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[458,12522+19]..[458,12522+21])
                                            Ppat_var "i2" (src/grammarFunctor.ml[458,12522+19]..[458,12522+21])
                                          expression (src/grammarFunctor.ml[459,12546+6]..[459,12546+45])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[459,12546+6]..[459,12546+21])
                                              Pexp_ident "Generic.compare" (src/grammarFunctor.ml[459,12546+6]..[459,12546+21])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[459,12546+22]..[459,12546+33])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[459,12546+23]..[459,12546+29])
                                                    Pexp_ident "decode" (src/grammarFunctor.ml[459,12546+23]..[459,12546+29])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[459,12546+30]..[459,12546+32])
                                                        Pexp_ident "i1" (src/grammarFunctor.ml[459,12546+30]..[459,12546+32])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[459,12546+34]..[459,12546+45])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[459,12546+35]..[459,12546+41])
                                                    Pexp_ident "decode" (src/grammarFunctor.ml[459,12546+35]..[459,12546+41])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[459,12546+42]..[459,12546+44])
                                                        Pexp_ident "i2" (src/grammarFunctor.ml[459,12546+42]..[459,12546+44])
                                                  ]
                                            ]
                                  ]
                              ]
                    ]
              structure_item (src/grammarFunctor.ml[468,12739+0]..[499,13340+3])
                Pstr_module
                "TerminalSet" (src/grammarFunctor.ml[468,12739+7]..[468,12739+18])
                  module_expr (src/grammarFunctor.ml[468,12739+21]..[499,13340+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[472,12836+2]..[472,12836+40])
                        Pstr_include                        module_expr (src/grammarFunctor.ml[472,12836+10]..[472,12836+40])
                          Pmod_apply_unit
                          module_expr (src/grammarFunctor.ml[472,12836+10]..[472,12836+38])
                            Pmod_apply
                            module_expr (src/grammarFunctor.ml[472,12836+10]..[472,12836+28])
                              Pmod_ident "BoundedBitSet.Make" (src/grammarFunctor.ml[472,12836+10]..[472,12836+28])
                            module_expr (src/grammarFunctor.ml[472,12836+29]..[472,12836+37])
                              Pmod_ident "Terminal" (src/grammarFunctor.ml[472,12836+29]..[472,12836+37])
                      structure_item (src/grammarFunctor.ml[474,12878+2]..[475,12897+75])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[474,12878+6]..[474,12878+11])
                              Ppat_var "print" (src/grammarFunctor.ml[474,12878+6]..[474,12878+11])
                            expression (src/grammarFunctor.ml[474,12878+12]..[475,12897+75]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[474,12878+12]..[474,12878+16])
                                Ppat_var "toks" (src/grammarFunctor.ml[474,12878+12]..[474,12878+16])
                              expression (src/grammarFunctor.ml[475,12897+4]..[475,12897+75])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[475,12897+4]..[475,12897+33])
                                  Pexp_ident "Misc.separated_iter_to_string" (src/grammarFunctor.ml[475,12897+4]..[475,12897+33])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[475,12897+34]..[475,12897+48])
                                      Pexp_ident "Terminal.print" (src/grammarFunctor.ml[475,12897+34]..[475,12897+48])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[475,12897+49]..[475,12897+52])
                                      Pexp_constant PConst_string(" ",(src/grammarFunctor.ml[475,12897+50]..[475,12897+51]),None)
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[475,12897+53]..[475,12897+75])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[475,12897+58]..[475,12897+59])
                                        Ppat_var "f" (src/grammarFunctor.ml[475,12897+58]..[475,12897+59])
                                      expression (src/grammarFunctor.ml[475,12897+63]..[475,12897+74])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[475,12897+63]..[475,12897+67])
                                          Pexp_ident "iter" (src/grammarFunctor.ml[475,12897+63]..[475,12897+67])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[475,12897+68]..[475,12897+69])
                                              Pexp_ident "f" (src/grammarFunctor.ml[475,12897+68]..[475,12897+69])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[475,12897+70]..[475,12897+74])
                                              Pexp_ident "toks" (src/grammarFunctor.ml[475,12897+70]..[475,12897+74])
                                        ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[477,12974+2]..[482,13089+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[477,12974+6]..[477,12974+14])
                              Ppat_var "universe" (src/grammarFunctor.ml[477,12974+6]..[477,12974+14])
                            expression (src/grammarFunctor.ml[478,12991+4]..[482,13089+5])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[478,12991+4]..[478,12991+10])
                                Pexp_ident "remove" (src/grammarFunctor.ml[478,12991+4]..[478,12991+10])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[478,12991+11]..[478,12991+25])
                                    Pexp_ident "Terminal.sharp" (src/grammarFunctor.ml[478,12991+11]..[478,12991+25])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[478,12991+26]..[482,13089+5])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[479,13019+6]..[479,13019+12])
                                      Pexp_ident "remove" (src/grammarFunctor.ml[479,13019+6]..[479,13019+12])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[479,13019+13]..[479,13019+27])
                                          Pexp_ident "Terminal.error" (src/grammarFunctor.ml[479,13019+13]..[479,13019+27])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[479,13019+28]..[481,13081+7])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[480,13049+8]..[480,13049+21])
                                            Pexp_ident "Terminal.fold" (src/grammarFunctor.ml[480,13049+8]..[480,13049+21])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[480,13049+22]..[480,13049+25])
                                                Pexp_ident "add" (src/grammarFunctor.ml[480,13049+22]..[480,13049+25])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[480,13049+26]..[480,13049+31])
                                                Pexp_ident "empty" (src/grammarFunctor.ml[480,13049+26]..[480,13049+31])
                                          ]
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[487,13229+2]..[488,13247+5])
                        Pstr_type Rec
                        [
                          type_declaration "property" (src/grammarFunctor.ml[487,13229+7]..[487,13229+15]) (src/grammarFunctor.ml[487,13229+2]..[488,13247+5])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[488,13247+4]..[488,13247+5])
                                  Ptyp_constr "t" (src/grammarFunctor.ml[488,13247+4]..[488,13247+5])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[490,13254+2]..[491,13269+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[490,13254+6]..[490,13254+12])
                              Ppat_var "bottom" (src/grammarFunctor.ml[490,13254+6]..[490,13254+12])
                            expression (src/grammarFunctor.ml[491,13269+4]..[491,13269+9])
                              Pexp_ident "empty" (src/grammarFunctor.ml[491,13269+4]..[491,13269+9])
                        ]
                      structure_item (src/grammarFunctor.ml[493,13280+2]..[494,13301+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[493,13280+6]..[493,13280+16])
                              Ppat_var "is_maximal" (src/grammarFunctor.ml[493,13280+6]..[493,13280+16])
                            expression (src/grammarFunctor.ml[493,13280+17]..[494,13301+9]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[493,13280+17]..[493,13280+18])
                                Ppat_any
                              expression (src/grammarFunctor.ml[494,13301+4]..[494,13301+9])
                                Pexp_construct "false" (src/grammarFunctor.ml[494,13301+4]..[494,13301+9])
                                None
                        ]
                      structure_item (src/grammarFunctor.ml[496,13312+2]..[497,13329+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[496,13312+6]..[496,13312+14])
                              Ppat_var "leq_join" (src/grammarFunctor.ml[496,13312+6]..[496,13312+14])
                            expression (src/grammarFunctor.ml[497,13329+4]..[497,13329+9])
                              Pexp_ident "union" (src/grammarFunctor.ml[497,13329+4]..[497,13329+9])
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[503,13373+0]..[503,13373+33])
                Pstr_module
                "TerminalMap" (src/grammarFunctor.ml[503,13373+7]..[503,13373+18])
                  module_expr (src/grammarFunctor.ml[503,13373+21]..[503,13373+33])
                    Pmod_ident "Patricia.Big" (src/grammarFunctor.ml[503,13373+21]..[503,13373+33])
              structure_item (src/grammarFunctor.ml[508,13503+0]..[611,15697+3])
                Pstr_module
                "Symbol" (src/grammarFunctor.ml[508,13503+7]..[508,13503+13])
                  module_expr (src/grammarFunctor.ml[508,13503+16]..[611,15697+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[510,13527+2]..[512,13563+21])
                        Pstr_type Rec
                        [
                          type_declaration "t" (src/grammarFunctor.ml[510,13527+7]..[510,13527+8]) (src/grammarFunctor.ml[510,13527+2]..[512,13563+21])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_variant
                                [
                                  (src/grammarFunctor.ml[511,13538+4]..[511,13538+24])
                                    "N" (src/grammarFunctor.ml[511,13538+6]..[511,13538+7])
                                    [
                                      core_type (src/grammarFunctor.ml[511,13538+11]..[511,13538+24])
                                        Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[511,13538+11]..[511,13538+24])
                                        []
                                    ]
                                    None
                                  (src/grammarFunctor.ml[512,13563+4]..[512,13563+21])
                                    "T" (src/grammarFunctor.ml[512,13563+6]..[512,13563+7])
                                    [
                                      core_type (src/grammarFunctor.ml[512,13563+11]..[512,13563+21])
                                        Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[512,13563+11]..[512,13563+21])
                                        []
                                    ]
                                    None
                                ]
                            ptype_private = Public
                            ptype_manifest =
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[514,13586+2]..[519,13669+12])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[514,13586+6]..[514,13586+17])
                              Ppat_var "is_terminal" (src/grammarFunctor.ml[514,13586+6]..[514,13586+17])
                            expression (src/grammarFunctor.ml[514,13586+18]..[519,13669+12]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[514,13586+18]..[514,13586+21])
                                Ppat_var "sym" (src/grammarFunctor.ml[514,13586+18]..[514,13586+21])
                              expression (src/grammarFunctor.ml[515,13610+4]..[519,13669+12])
                                Pexp_match
                                expression (src/grammarFunctor.ml[515,13610+10]..[515,13610+13])
                                  Pexp_ident "sym" (src/grammarFunctor.ml[515,13610+10]..[515,13610+13])
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[516,13629+6]..[516,13629+9])
                                      Ppat_construct "N" (src/grammarFunctor.ml[516,13629+6]..[516,13629+7])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[516,13629+8]..[516,13629+9])
                                          Ppat_any
                                    expression (src/grammarFunctor.ml[517,13642+8]..[517,13642+13])
                                      Pexp_construct "false" (src/grammarFunctor.ml[517,13642+8]..[517,13642+13])
                                      None
                                  <case>
                                    pattern (src/grammarFunctor.ml[518,13656+6]..[518,13656+9])
                                      Ppat_construct "T" (src/grammarFunctor.ml[518,13656+6]..[518,13656+7])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[518,13656+8]..[518,13656+9])
                                          Ppat_any
                                    expression (src/grammarFunctor.ml[519,13669+8]..[519,13669+12])
                                      Pexp_construct "true" (src/grammarFunctor.ml[519,13669+8]..[519,13669+12])
                                      None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[521,13683+2]..[530,13898+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[521,13683+6]..[521,13683+13])
                              Ppat_var "compare" (src/grammarFunctor.ml[521,13683+6]..[521,13683+13])
                            expression (src/grammarFunctor.ml[521,13683+14]..[530,13898+10]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[521,13683+14]..[521,13683+18])
                                Ppat_var "sym1" (src/grammarFunctor.ml[521,13683+14]..[521,13683+18])
                              expression (src/grammarFunctor.ml[521,13683+19]..[530,13898+10]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[521,13683+19]..[521,13683+23])
                                  Ppat_var "sym2" (src/grammarFunctor.ml[521,13683+19]..[521,13683+23])
                                expression (src/grammarFunctor.ml[522,13709+4]..[530,13898+10])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[522,13709+10]..[522,13709+20])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[522,13709+10]..[522,13709+14])
                                        Pexp_ident "sym1" (src/grammarFunctor.ml[522,13709+10]..[522,13709+14])
                                      expression (src/grammarFunctor.ml[522,13709+16]..[522,13709+20])
                                        Pexp_ident "sym2" (src/grammarFunctor.ml[522,13709+16]..[522,13709+20])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[523,13735+6]..[523,13735+18])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[523,13735+6]..[523,13735+11])
                                            Ppat_construct "N" (src/grammarFunctor.ml[523,13735+6]..[523,13735+7])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[523,13735+8]..[523,13735+11])
                                                Ppat_var "nt1" (src/grammarFunctor.ml[523,13735+8]..[523,13735+11])
                                          pattern (src/grammarFunctor.ml[523,13735+13]..[523,13735+18])
                                            Ppat_construct "N" (src/grammarFunctor.ml[523,13735+13]..[523,13735+14])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[523,13735+15]..[523,13735+18])
                                                Ppat_var "nt2" (src/grammarFunctor.ml[523,13735+15]..[523,13735+18])
                                        ]
                                      expression (src/grammarFunctor.ml[524,13757+8]..[524,13757+35])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[524,13757+8]..[524,13757+27])
                                          Pexp_ident "Nonterminal.compare" (src/grammarFunctor.ml[524,13757+8]..[524,13757+27])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[524,13757+28]..[524,13757+31])
                                              Pexp_ident "nt1" (src/grammarFunctor.ml[524,13757+28]..[524,13757+31])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[524,13757+32]..[524,13757+35])
                                              Pexp_ident "nt2" (src/grammarFunctor.ml[524,13757+32]..[524,13757+35])
                                        ]
                                    <case>
                                      pattern (src/grammarFunctor.ml[525,13793+6]..[525,13793+20])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[525,13793+6]..[525,13793+12])
                                            Ppat_construct "T" (src/grammarFunctor.ml[525,13793+6]..[525,13793+7])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[525,13793+8]..[525,13793+12])
                                                Ppat_var "tok1" (src/grammarFunctor.ml[525,13793+8]..[525,13793+12])
                                          pattern (src/grammarFunctor.ml[525,13793+14]..[525,13793+20])
                                            Ppat_construct "T" (src/grammarFunctor.ml[525,13793+14]..[525,13793+15])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[525,13793+16]..[525,13793+20])
                                                Ppat_var "tok2" (src/grammarFunctor.ml[525,13793+16]..[525,13793+20])
                                        ]
                                      expression (src/grammarFunctor.ml[526,13817+8]..[526,13817+34])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[526,13817+8]..[526,13817+24])
                                          Pexp_ident "Terminal.compare" (src/grammarFunctor.ml[526,13817+8]..[526,13817+24])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[526,13817+25]..[526,13817+29])
                                              Pexp_ident "tok1" (src/grammarFunctor.ml[526,13817+25]..[526,13817+29])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[526,13817+30]..[526,13817+34])
                                              Pexp_ident "tok2" (src/grammarFunctor.ml[526,13817+30]..[526,13817+34])
                                        ]
                                    <case>
                                      pattern (src/grammarFunctor.ml[527,13852+6]..[527,13852+14])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[527,13852+6]..[527,13852+9])
                                            Ppat_construct "N" (src/grammarFunctor.ml[527,13852+6]..[527,13852+7])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[527,13852+8]..[527,13852+9])
                                                Ppat_any
                                          pattern (src/grammarFunctor.ml[527,13852+11]..[527,13852+14])
                                            Ppat_construct "T" (src/grammarFunctor.ml[527,13852+11]..[527,13852+12])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[527,13852+13]..[527,13852+14])
                                                Ppat_any
                                        ]
                                      expression (src/grammarFunctor.ml[528,13870+8]..[528,13870+9])
                                        Pexp_constant PConst_int (1,None)
                                    <case>
                                      pattern (src/grammarFunctor.ml[529,13880+6]..[529,13880+14])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[529,13880+6]..[529,13880+9])
                                            Ppat_construct "T" (src/grammarFunctor.ml[529,13880+6]..[529,13880+7])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[529,13880+8]..[529,13880+9])
                                                Ppat_any
                                          pattern (src/grammarFunctor.ml[529,13880+11]..[529,13880+14])
                                            Ppat_construct "N" (src/grammarFunctor.ml[529,13880+11]..[529,13880+12])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[529,13880+13]..[529,13880+14])
                                                Ppat_any
                                        ]
                                      expression (src/grammarFunctor.ml[530,13898+8]..[530,13898+10])
                                        Pexp_constant PConst_int (-1,None)
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[532,13910+2]..[533,13934+25])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[532,13910+6]..[532,13910+11])
                              Ppat_var "equal" (src/grammarFunctor.ml[532,13910+6]..[532,13910+11])
                            expression (src/grammarFunctor.ml[532,13910+12]..[533,13934+25]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[532,13910+12]..[532,13910+16])
                                Ppat_var "sym1" (src/grammarFunctor.ml[532,13910+12]..[532,13910+16])
                              expression (src/grammarFunctor.ml[532,13910+17]..[533,13934+25]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[532,13910+17]..[532,13910+21])
                                  Ppat_var "sym2" (src/grammarFunctor.ml[532,13910+17]..[532,13910+21])
                                expression (src/grammarFunctor.ml[533,13934+4]..[533,13934+25])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[533,13934+22]..[533,13934+23])
                                    Pexp_ident "=" (src/grammarFunctor.ml[533,13934+22]..[533,13934+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[533,13934+4]..[533,13934+21])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[533,13934+4]..[533,13934+11])
                                          Pexp_ident "compare" (src/grammarFunctor.ml[533,13934+4]..[533,13934+11])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[533,13934+12]..[533,13934+16])
                                              Pexp_ident "sym1" (src/grammarFunctor.ml[533,13934+12]..[533,13934+16])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[533,13934+17]..[533,13934+21])
                                              Pexp_ident "sym2" (src/grammarFunctor.ml[533,13934+17]..[533,13934+21])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[533,13934+24]..[533,13934+25])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[535,13961+2]..[543,14170+13])
                        Pstr_value Rec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[535,13961+10]..[535,13961+16])
                              Ppat_var "lequal" (src/grammarFunctor.ml[535,13961+10]..[535,13961+16])
                            expression (src/grammarFunctor.ml[535,13961+17]..[543,14170+13]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[535,13961+17]..[535,13961+22])
                                Ppat_var "syms1" (src/grammarFunctor.ml[535,13961+17]..[535,13961+22])
                              expression (src/grammarFunctor.ml[535,13961+23]..[543,14170+13]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[535,13961+23]..[535,13961+28])
                                  Ppat_var "syms2" (src/grammarFunctor.ml[535,13961+23]..[535,13961+28])
                                expression (src/grammarFunctor.ml[536,13992+4]..[543,14170+13])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[536,13992+10]..[536,13992+22])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[536,13992+10]..[536,13992+15])
                                        Pexp_ident "syms1" (src/grammarFunctor.ml[536,13992+10]..[536,13992+15])
                                      expression (src/grammarFunctor.ml[536,13992+17]..[536,13992+22])
                                        Pexp_ident "syms2" (src/grammarFunctor.ml[536,13992+17]..[536,13992+22])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[537,14020+6]..[537,14020+12])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[537,14020+6]..[537,14020+8])
                                            Ppat_construct "[]" (src/grammarFunctor.ml[537,14020+6]..[537,14020+8])
                                            None
                                          pattern (src/grammarFunctor.ml[537,14020+10]..[537,14020+12])
                                            Ppat_construct "[]" (src/grammarFunctor.ml[537,14020+10]..[537,14020+12])
                                            None
                                        ]
                                      expression (src/grammarFunctor.ml[538,14036+8]..[538,14036+12])
                                        Pexp_construct "true" (src/grammarFunctor.ml[538,14036+8]..[538,14036+12])
                                        None
                                    <case>
                                      pattern (src/grammarFunctor.ml[539,14049+6]..[539,14049+34])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[539,14049+6]..[539,14049+19])
                                            Ppat_construct "::" (src/grammarFunctor.ml[539,14049+11]..[539,14049+13])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[539,14049+6]..[539,14049+19]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[539,14049+6]..[539,14049+10])
                                                    Ppat_var "sym1" (src/grammarFunctor.ml[539,14049+6]..[539,14049+10])
                                                  pattern (src/grammarFunctor.ml[539,14049+14]..[539,14049+19])
                                                    Ppat_var "syms1" (src/grammarFunctor.ml[539,14049+14]..[539,14049+19])
                                                ]
                                          pattern (src/grammarFunctor.ml[539,14049+21]..[539,14049+34])
                                            Ppat_construct "::" (src/grammarFunctor.ml[539,14049+26]..[539,14049+28])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[539,14049+21]..[539,14049+34]) ghost
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[539,14049+21]..[539,14049+25])
                                                    Ppat_var "sym2" (src/grammarFunctor.ml[539,14049+21]..[539,14049+25])
                                                  pattern (src/grammarFunctor.ml[539,14049+29]..[539,14049+34])
                                                    Ppat_var "syms2" (src/grammarFunctor.ml[539,14049+29]..[539,14049+34])
                                                ]
                                        ]
                                      expression (src/grammarFunctor.ml[540,14087+8]..[540,14087+45])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[540,14087+24]..[540,14087+26])
                                          Pexp_ident "&&" (src/grammarFunctor.ml[540,14087+24]..[540,14087+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[540,14087+8]..[540,14087+23])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[540,14087+8]..[540,14087+13])
                                                Pexp_ident "equal" (src/grammarFunctor.ml[540,14087+8]..[540,14087+13])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[540,14087+14]..[540,14087+18])
                                                    Pexp_ident "sym1" (src/grammarFunctor.ml[540,14087+14]..[540,14087+18])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[540,14087+19]..[540,14087+23])
                                                    Pexp_ident "sym2" (src/grammarFunctor.ml[540,14087+19]..[540,14087+23])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[540,14087+27]..[540,14087+45])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[540,14087+27]..[540,14087+33])
                                                Pexp_ident "lequal" (src/grammarFunctor.ml[540,14087+27]..[540,14087+33])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[540,14087+34]..[540,14087+39])
                                                    Pexp_ident "syms1" (src/grammarFunctor.ml[540,14087+34]..[540,14087+39])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[540,14087+40]..[540,14087+45])
                                                    Pexp_ident "syms2" (src/grammarFunctor.ml[540,14087+40]..[540,14087+45])
                                              ]
                                        ]
                                    <case>
                                      pattern (src/grammarFunctor.ml[541,14133+6]..[542,14150+16])
                                        Ppat_or
                                        pattern (src/grammarFunctor.ml[541,14133+6]..[541,14133+16])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[541,14133+6]..[541,14133+12])
                                              Ppat_construct "::" (src/grammarFunctor.ml[541,14133+8]..[541,14133+10])
                                              Some
                                                []
                                                pattern (src/grammarFunctor.ml[541,14133+6]..[541,14133+12]) ghost
                                                  Ppat_tuple
                                                  [
                                                    pattern (src/grammarFunctor.ml[541,14133+6]..[541,14133+7])
                                                      Ppat_any
                                                    pattern (src/grammarFunctor.ml[541,14133+11]..[541,14133+12])
                                                      Ppat_any
                                                  ]
                                            pattern (src/grammarFunctor.ml[541,14133+14]..[541,14133+16])
                                              Ppat_construct "[]" (src/grammarFunctor.ml[541,14133+14]..[541,14133+16])
                                              None
                                          ]
                                        pattern (src/grammarFunctor.ml[542,14150+6]..[542,14150+16])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[542,14150+6]..[542,14150+8])
                                              Ppat_construct "[]" (src/grammarFunctor.ml[542,14150+6]..[542,14150+8])
                                              None
                                            pattern (src/grammarFunctor.ml[542,14150+10]..[542,14150+16])
                                              Ppat_construct "::" (src/grammarFunctor.ml[542,14150+12]..[542,14150+14])
                                              Some
                                                []
                                                pattern (src/grammarFunctor.ml[542,14150+10]..[542,14150+16]) ghost
                                                  Ppat_tuple
                                                  [
                                                    pattern (src/grammarFunctor.ml[542,14150+10]..[542,14150+11])
                                                      Ppat_any
                                                    pattern (src/grammarFunctor.ml[542,14150+15]..[542,14150+16])
                                                      Ppat_any
                                                  ]
                                          ]
                                      expression (src/grammarFunctor.ml[543,14170+8]..[543,14170+13])
                                        Pexp_construct "false" (src/grammarFunctor.ml[543,14170+8]..[543,14170+13])
                                        None
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[545,14185+2]..[550,14285+12])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[545,14185+6]..[545,14185+15])
                              Ppat_var "non_error" (src/grammarFunctor.ml[545,14185+6]..[545,14185+15])
                            expression (src/grammarFunctor.ml[545,14185+16]..[550,14285+12]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[545,14185+16]..[545,14185+19])
                                Ppat_var "sym" (src/grammarFunctor.ml[545,14185+16]..[545,14185+19])
                              expression (src/grammarFunctor.ml[546,14207+4]..[550,14285+12])
                                Pexp_match
                                expression (src/grammarFunctor.ml[546,14207+10]..[546,14207+13])
                                  Pexp_ident "sym" (src/grammarFunctor.ml[546,14207+10]..[546,14207+13])
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[547,14226+6]..[547,14226+11])
                                      Ppat_construct "T" (src/grammarFunctor.ml[547,14226+6]..[547,14226+7])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[547,14226+8]..[547,14226+11])
                                          Ppat_var "tok" (src/grammarFunctor.ml[547,14226+8]..[547,14226+11])
                                    expression (src/grammarFunctor.ml[548,14241+8]..[548,14241+30])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[548,14241+8]..[548,14241+26])
                                        Pexp_ident "Terminal.non_error" (src/grammarFunctor.ml[548,14241+8]..[548,14241+26])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[548,14241+27]..[548,14241+30])
                                            Pexp_ident "tok" (src/grammarFunctor.ml[548,14241+27]..[548,14241+30])
                                      ]
                                  <case>
                                    pattern (src/grammarFunctor.ml[549,14272+6]..[549,14272+9])
                                      Ppat_construct "N" (src/grammarFunctor.ml[549,14272+6]..[549,14272+7])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[549,14272+8]..[549,14272+9])
                                          Ppat_any
                                    expression (src/grammarFunctor.ml[550,14285+8]..[550,14285+12])
                                      Pexp_construct "true" (src/grammarFunctor.ml[550,14285+8]..[550,14285+12])
                                      None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[552,14299+2]..[556,14386+26])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[552,14299+6]..[552,14299+11])
                              Ppat_var "print" (src/grammarFunctor.ml[552,14299+6]..[552,14299+11])
                            expression (src/grammarFunctor.ml[552,14299+14]..[556,14386+26])
                              Pexp_function
                              [
                                <case>
                                  pattern (src/grammarFunctor.ml[553,14322+6]..[553,14322+10])
                                    Ppat_construct "N" (src/grammarFunctor.ml[553,14322+6]..[553,14322+7])
                                    Some
                                      []
                                      pattern (src/grammarFunctor.ml[553,14322+8]..[553,14322+10])
                                        Ppat_var "nt" (src/grammarFunctor.ml[553,14322+8]..[553,14322+10])
                                  expression (src/grammarFunctor.ml[554,14336+8]..[554,14336+34])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[554,14336+8]..[554,14336+25])
                                      Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[554,14336+8]..[554,14336+25])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[554,14336+26]..[554,14336+31])
                                          Pexp_construct "false" (src/grammarFunctor.ml[554,14336+26]..[554,14336+31])
                                          None
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[554,14336+32]..[554,14336+34])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[554,14336+32]..[554,14336+34])
                                    ]
                                <case>
                                  pattern (src/grammarFunctor.ml[555,14371+6]..[555,14371+11])
                                    Ppat_construct "T" (src/grammarFunctor.ml[555,14371+6]..[555,14371+7])
                                    Some
                                      []
                                      pattern (src/grammarFunctor.ml[555,14371+8]..[555,14371+11])
                                        Ppat_var "tok" (src/grammarFunctor.ml[555,14371+8]..[555,14371+11])
                                  expression (src/grammarFunctor.ml[556,14386+8]..[556,14386+26])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[556,14386+8]..[556,14386+22])
                                      Pexp_ident "Terminal.print" (src/grammarFunctor.ml[556,14386+8]..[556,14386+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[556,14386+23]..[556,14386+26])
                                          Pexp_ident "tok" (src/grammarFunctor.ml[556,14386+23]..[556,14386+26])
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[558,14414+2]..[562,14483+12])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[558,14414+6]..[558,14414+17])
                              Ppat_var "nonterminal" (src/grammarFunctor.ml[558,14414+6]..[558,14414+17])
                            expression (src/grammarFunctor.ml[558,14414+20]..[562,14483+12])
                              Pexp_function
                              [
                                <case>
                                  pattern (src/grammarFunctor.ml[559,14443+6]..[559,14443+9])
                                    Ppat_construct "T" (src/grammarFunctor.ml[559,14443+6]..[559,14443+7])
                                    Some
                                      []
                                      pattern (src/grammarFunctor.ml[559,14443+8]..[559,14443+9])
                                        Ppat_any
                                  expression (src/grammarFunctor.ml[560,14456+8]..[560,14456+13])
                                    Pexp_construct "false" (src/grammarFunctor.ml[560,14456+8]..[560,14456+13])
                                    None
                                <case>
                                  pattern (src/grammarFunctor.ml[561,14470+6]..[561,14470+9])
                                    Ppat_construct "N" (src/grammarFunctor.ml[561,14470+6]..[561,14470+7])
                                    Some
                                      []
                                      pattern (src/grammarFunctor.ml[561,14470+8]..[561,14470+9])
                                        Ppat_any
                                  expression (src/grammarFunctor.ml[562,14483+8]..[562,14483+12])
                                    Pexp_construct "true" (src/grammarFunctor.ml[562,14483+8]..[562,14483+12])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[569,14732+2]..[570,14747+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[569,14732+6]..[569,14732+12])
                              Ppat_var "buffer" (src/grammarFunctor.ml[569,14732+6]..[569,14732+12])
                            expression (src/grammarFunctor.ml[570,14747+4]..[570,14747+22])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[570,14747+4]..[570,14747+17])
                                Pexp_ident "Buffer.create" (src/grammarFunctor.ml[570,14747+4]..[570,14747+17])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[570,14747+18]..[570,14747+22])
                                    Pexp_constant PConst_int (1024,None)
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[572,14771+2]..[591,15292+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[572,14771+6]..[572,14771+14])
                              Ppat_var "printaod" (src/grammarFunctor.ml[572,14771+6]..[572,14771+14])
                            expression (src/grammarFunctor.ml[572,14771+15]..[591,15292+5]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[572,14771+15]..[572,14771+21])
                                Ppat_var "offset" (src/grammarFunctor.ml[572,14771+15]..[572,14771+21])
                              expression (src/grammarFunctor.ml[572,14771+22]..[591,15292+5]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[572,14771+22]..[572,14771+25])
                                  Ppat_var "dot" (src/grammarFunctor.ml[572,14771+22]..[572,14771+25])
                                expression (src/grammarFunctor.ml[572,14771+26]..[591,15292+5]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[572,14771+26]..[572,14771+33])
                                    Ppat_var "symbols" (src/grammarFunctor.ml[572,14771+26]..[572,14771+33])
                                  expression (src/grammarFunctor.ml[573,14807+4]..[591,15292+5])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[573,14807+8]..[573,14807+14])
                                          Ppat_var "length" (src/grammarFunctor.ml[573,14807+8]..[573,14807+14])
                                        expression (src/grammarFunctor.ml[573,14807+17]..[573,14807+37])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[573,14807+17]..[573,14807+29])
                                            Pexp_ident "Array.length" (src/grammarFunctor.ml[573,14807+17]..[573,14807+29])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[573,14807+30]..[573,14807+37])
                                                Pexp_ident "symbols" (src/grammarFunctor.ml[573,14807+30]..[573,14807+37])
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[574,14848+4]..[591,15292+5])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/grammarFunctor.ml[574,14848+8]..[574,14848+13])
                                            Ppat_var "first" (src/grammarFunctor.ml[574,14848+8]..[574,14848+13])
                                          expression (src/grammarFunctor.ml[574,14848+16]..[574,14848+24])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[574,14848+16]..[574,14848+19])
                                              Pexp_ident "ref" (src/grammarFunctor.ml[574,14848+16]..[574,14848+19])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[574,14848+20]..[574,14848+24])
                                                  Pexp_construct "true" (src/grammarFunctor.ml[574,14848+20]..[574,14848+24])
                                                  None
                                            ]
                                      ]
                                      expression (src/grammarFunctor.ml[575,14876+4]..[591,15292+5])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[575,14876+8]..[575,14876+16])
                                              Ppat_var "separate" (src/grammarFunctor.ml[575,14876+8]..[575,14876+16])
                                            expression (src/grammarFunctor.ml[575,14876+17]..[577,14950+20]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/grammarFunctor.ml[575,14876+17]..[575,14876+19])
                                                Ppat_construct "()" (src/grammarFunctor.ml[575,14876+17]..[575,14876+19])
                                                None
                                              expression (src/grammarFunctor.ml[576,14898+6]..[577,14950+20])
                                                Pexp_sequence
                                                expression (src/grammarFunctor.ml[576,14898+6]..[576,14898+50])
                                                  Pexp_ifthenelse
                                                  expression (src/grammarFunctor.ml[576,14898+9]..[576,14898+19])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[576,14898+9]..[576,14898+12])
                                                      Pexp_ident "not" (src/grammarFunctor.ml[576,14898+9]..[576,14898+12])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[576,14898+13]..[576,14898+19])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[576,14898+13]..[576,14898+14])
                                                            Pexp_ident "!" (src/grammarFunctor.ml[576,14898+13]..[576,14898+14])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[576,14898+14]..[576,14898+19])
                                                                Pexp_ident "first" (src/grammarFunctor.ml[576,14898+14]..[576,14898+19])
                                                          ]
                                                    ]
                                                  expression (src/grammarFunctor.ml[576,14898+25]..[576,14898+50])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[576,14898+25]..[576,14898+39])
                                                      Pexp_ident "Printf.bprintf" (src/grammarFunctor.ml[576,14898+25]..[576,14898+39])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[576,14898+40]..[576,14898+46])
                                                          Pexp_ident "buffer" (src/grammarFunctor.ml[576,14898+40]..[576,14898+46])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[576,14898+47]..[576,14898+50])
                                                          Pexp_constant PConst_string(" ",(src/grammarFunctor.ml[576,14898+48]..[576,14898+49]),None)
                                                    ]
                                                  None
                                                expression (src/grammarFunctor.ml[577,14950+6]..[577,14950+20])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[577,14950+12]..[577,14950+14])
                                                    Pexp_ident ":=" (src/grammarFunctor.ml[577,14950+12]..[577,14950+14])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[577,14950+6]..[577,14950+11])
                                                        Pexp_ident "first" (src/grammarFunctor.ml[577,14950+6]..[577,14950+11])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[577,14950+15]..[577,14950+20])
                                                        Pexp_construct "false" (src/grammarFunctor.ml[577,14950+15]..[577,14950+20])
                                                        None
                                                  ]
                                        ]
                                        expression (src/grammarFunctor.ml[579,14978+4]..[591,15292+5])
                                          Pexp_sequence
                                          expression (src/grammarFunctor.ml[579,14978+4]..[588,15219+8])
                                            Pexp_for Up
                                            pattern (src/grammarFunctor.ml[579,14978+8]..[579,14978+9])
                                              Ppat_var "i" (src/grammarFunctor.ml[579,14978+8]..[579,14978+9])
                                            expression (src/grammarFunctor.ml[579,14978+12]..[579,14978+18])
                                              Pexp_ident "offset" (src/grammarFunctor.ml[579,14978+12]..[579,14978+18])
                                            expression (src/grammarFunctor.ml[579,14978+22]..[579,14978+28])
                                              Pexp_ident "length" (src/grammarFunctor.ml[579,14978+22]..[579,14978+28])
                                            expression (src/grammarFunctor.ml[580,15010+6]..[587,15209+9])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[580,15010+6]..[583,15092+9])
                                                Pexp_ifthenelse
                                                expression (src/grammarFunctor.ml[580,15010+9]..[580,15010+16])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[580,15010+11]..[580,15010+12])
                                                    Pexp_ident "=" (src/grammarFunctor.ml[580,15010+11]..[580,15010+12])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[580,15010+9]..[580,15010+10])
                                                        Pexp_ident "i" (src/grammarFunctor.ml[580,15010+9]..[580,15010+10])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[580,15010+13]..[580,15010+16])
                                                        Pexp_ident "dot" (src/grammarFunctor.ml[580,15010+13]..[580,15010+16])
                                                  ]
                                                expression (src/grammarFunctor.ml[580,15010+22]..[583,15092+9])
                                                  Pexp_sequence
                                                  expression (src/grammarFunctor.ml[581,15038+8]..[581,15038+18])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[581,15038+8]..[581,15038+16])
                                                      Pexp_ident "separate" (src/grammarFunctor.ml[581,15038+8]..[581,15038+16])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[581,15038+16]..[581,15038+18])
                                                          Pexp_construct "()" (src/grammarFunctor.ml[581,15038+16]..[581,15038+18])
                                                          None
                                                    ]
                                                  expression (src/grammarFunctor.ml[582,15058+8]..[582,15058+33])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[582,15058+8]..[582,15058+22])
                                                      Pexp_ident "Printf.bprintf" (src/grammarFunctor.ml[582,15058+8]..[582,15058+22])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[582,15058+23]..[582,15058+29])
                                                          Pexp_ident "buffer" (src/grammarFunctor.ml[582,15058+23]..[582,15058+29])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[582,15058+30]..[582,15058+33])
                                                          Pexp_constant PConst_string(".",(src/grammarFunctor.ml[582,15058+31]..[582,15058+32]),None)
                                                    ]
                                                None
                                              expression (src/grammarFunctor.ml[584,15103+6]..[587,15209+9])
                                                Pexp_ifthenelse
                                                expression (src/grammarFunctor.ml[584,15103+9]..[584,15103+19])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[584,15103+11]..[584,15103+12])
                                                    Pexp_ident "<" (src/grammarFunctor.ml[584,15103+11]..[584,15103+12])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[584,15103+9]..[584,15103+10])
                                                        Pexp_ident "i" (src/grammarFunctor.ml[584,15103+9]..[584,15103+10])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[584,15103+13]..[584,15103+19])
                                                        Pexp_ident "length" (src/grammarFunctor.ml[584,15103+13]..[584,15103+19])
                                                  ]
                                                expression (src/grammarFunctor.ml[584,15103+25]..[587,15209+9])
                                                  Pexp_sequence
                                                  expression (src/grammarFunctor.ml[585,15134+8]..[585,15134+18])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[585,15134+8]..[585,15134+16])
                                                      Pexp_ident "separate" (src/grammarFunctor.ml[585,15134+8]..[585,15134+16])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[585,15134+16]..[585,15134+18])
                                                          Pexp_construct "()" (src/grammarFunctor.ml[585,15134+16]..[585,15134+18])
                                                          None
                                                    ]
                                                  expression (src/grammarFunctor.ml[586,15154+8]..[586,15154+54])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[586,15154+8]..[586,15154+22])
                                                      Pexp_ident "Printf.bprintf" (src/grammarFunctor.ml[586,15154+8]..[586,15154+22])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[586,15154+23]..[586,15154+29])
                                                          Pexp_ident "buffer" (src/grammarFunctor.ml[586,15154+23]..[586,15154+29])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[586,15154+30]..[586,15154+34])
                                                          Pexp_constant PConst_string("%s",(src/grammarFunctor.ml[586,15154+31]..[586,15154+33]),None)
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[586,15154+35]..[586,15154+54])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[586,15154+36]..[586,15154+41])
                                                            Pexp_ident "print" (src/grammarFunctor.ml[586,15154+36]..[586,15154+41])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[586,15154+42]..[586,15154+53])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[586,15154+42]..[586,15154+53]) ghost
                                                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[586,15154+42]..[586,15154+53]) ghost
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[586,15154+42]..[586,15154+49])
                                                                      Pexp_ident "symbols" (src/grammarFunctor.ml[586,15154+42]..[586,15154+49])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[586,15154+51]..[586,15154+52])
                                                                      Pexp_ident "i" (src/grammarFunctor.ml[586,15154+51]..[586,15154+52])
                                                                ]
                                                          ]
                                                    ]
                                                None
                                          expression (src/grammarFunctor.ml[589,15229+4]..[591,15292+5])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[589,15229+8]..[589,15229+9])
                                                  Ppat_var "s" (src/grammarFunctor.ml[589,15229+8]..[589,15229+9])
                                                expression (src/grammarFunctor.ml[589,15229+12]..[589,15229+34])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[589,15229+12]..[589,15229+27])
                                                    Pexp_ident "Buffer.contents" (src/grammarFunctor.ml[589,15229+12]..[589,15229+27])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[589,15229+28]..[589,15229+34])
                                                        Pexp_ident "buffer" (src/grammarFunctor.ml[589,15229+28]..[589,15229+34])
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[590,15267+4]..[591,15292+5])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[590,15267+4]..[590,15267+23])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[590,15267+4]..[590,15267+16])
                                                  Pexp_ident "Buffer.clear" (src/grammarFunctor.ml[590,15267+4]..[590,15267+16])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[590,15267+17]..[590,15267+23])
                                                      Pexp_ident "buffer" (src/grammarFunctor.ml[590,15267+17]..[590,15267+23])
                                                ]
                                              expression (src/grammarFunctor.ml[591,15292+4]..[591,15292+5])
                                                Pexp_ident "s" (src/grammarFunctor.ml[591,15292+4]..[591,15292+5])
                        ]
                      structure_item (src/grammarFunctor.ml[593,15299+2]..[594,15330+32])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[593,15299+6]..[593,15299+13])
                              Ppat_var "printao" (src/grammarFunctor.ml[593,15299+6]..[593,15299+13])
                            expression (src/grammarFunctor.ml[593,15299+14]..[594,15330+32]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[593,15299+14]..[593,15299+20])
                                Ppat_var "offset" (src/grammarFunctor.ml[593,15299+14]..[593,15299+20])
                              expression (src/grammarFunctor.ml[593,15299+21]..[594,15330+32]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[593,15299+21]..[593,15299+28])
                                  Ppat_var "symbols" (src/grammarFunctor.ml[593,15299+21]..[593,15299+28])
                                expression (src/grammarFunctor.ml[594,15330+4]..[594,15330+32])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[594,15330+4]..[594,15330+12])
                                    Pexp_ident "printaod" (src/grammarFunctor.ml[594,15330+4]..[594,15330+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[594,15330+13]..[594,15330+19])
                                        Pexp_ident "offset" (src/grammarFunctor.ml[594,15330+13]..[594,15330+19])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[594,15330+20]..[594,15330+24])
                                        Pexp_constant PConst_int (-1,None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[594,15330+25]..[594,15330+32])
                                        Pexp_ident "symbols" (src/grammarFunctor.ml[594,15330+25]..[594,15330+32])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[596,15364+2]..[597,15387+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[596,15364+6]..[596,15364+12])
                              Ppat_var "printa" (src/grammarFunctor.ml[596,15364+6]..[596,15364+12])
                            expression (src/grammarFunctor.ml[596,15364+13]..[597,15387+21]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[596,15364+13]..[596,15364+20])
                                Ppat_var "symbols" (src/grammarFunctor.ml[596,15364+13]..[596,15364+20])
                              expression (src/grammarFunctor.ml[597,15387+4]..[597,15387+21])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[597,15387+4]..[597,15387+11])
                                  Pexp_ident "printao" (src/grammarFunctor.ml[597,15387+4]..[597,15387+11])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[597,15387+12]..[597,15387+13])
                                      Pexp_constant PConst_int (0,None)
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[597,15387+14]..[597,15387+21])
                                      Pexp_ident "symbols" (src/grammarFunctor.ml[597,15387+14]..[597,15387+21])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[599,15410+2]..[600,15433+34])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[599,15410+6]..[599,15410+12])
                              Ppat_var "printl" (src/grammarFunctor.ml[599,15410+6]..[599,15410+12])
                            expression (src/grammarFunctor.ml[599,15410+13]..[600,15433+34]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[599,15410+13]..[599,15410+20])
                                Ppat_var "symbols" (src/grammarFunctor.ml[599,15410+13]..[599,15410+20])
                              expression (src/grammarFunctor.ml[600,15433+4]..[600,15433+34])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[600,15433+4]..[600,15433+10])
                                  Pexp_ident "printa" (src/grammarFunctor.ml[600,15433+4]..[600,15433+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[600,15433+11]..[600,15433+34])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[600,15433+12]..[600,15433+25])
                                        Pexp_ident "Array.of_list" (src/grammarFunctor.ml[600,15433+12]..[600,15433+25])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[600,15433+26]..[600,15433+33])
                                            Pexp_ident "symbols" (src/grammarFunctor.ml[600,15433+26]..[600,15433+33])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[602,15469+2]..[609,15620+20])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[602,15469+6]..[602,15469+12])
                              Ppat_var "lookup" (src/grammarFunctor.ml[602,15469+6]..[602,15469+12])
                            expression (src/grammarFunctor.ml[602,15469+13]..[609,15620+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[602,15469+13]..[602,15469+17])
                                Ppat_var "name" (src/grammarFunctor.ml[602,15469+13]..[602,15469+17])
                              expression (src/grammarFunctor.ml[603,15489+4]..[609,15620+20])
                                Pexp_try
                                expression (src/grammarFunctor.ml[604,15497+6]..[604,15497+30])
                                  Pexp_construct "T" (src/grammarFunctor.ml[604,15497+6]..[604,15497+7])
                                  Some
                                    expression (src/grammarFunctor.ml[604,15497+8]..[604,15497+30])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[604,15497+9]..[604,15497+24])
                                        Pexp_ident "Terminal.lookup" (src/grammarFunctor.ml[604,15497+9]..[604,15497+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[604,15497+25]..[604,15497+29])
                                            Pexp_ident "name" (src/grammarFunctor.ml[604,15497+25]..[604,15497+29])
                                      ]
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[605,15528+9]..[605,15528+18])
                                      Ppat_construct "Not_found" (src/grammarFunctor.ml[605,15528+9]..[605,15528+18])
                                      None
                                    expression (src/grammarFunctor.ml[606,15550+6]..[609,15620+20])
                                      Pexp_try
                                      expression (src/grammarFunctor.ml[607,15560+8]..[607,15560+35])
                                        Pexp_construct "N" (src/grammarFunctor.ml[607,15560+8]..[607,15560+9])
                                        Some
                                          expression (src/grammarFunctor.ml[607,15560+10]..[607,15560+35])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[607,15560+11]..[607,15560+29])
                                              Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[607,15560+11]..[607,15560+29])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[607,15560+30]..[607,15560+34])
                                                  Pexp_ident "name" (src/grammarFunctor.ml[607,15560+30]..[607,15560+34])
                                            ]
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[608,15596+11]..[608,15596+20])
                                            Ppat_construct "Not_found" (src/grammarFunctor.ml[608,15596+11]..[608,15596+20])
                                            None
                                          expression (src/grammarFunctor.ml[609,15620+8]..[609,15620+20])
                                            Pexp_assert
                                            expression (src/grammarFunctor.ml[609,15620+15]..[609,15620+20])
                                              Pexp_construct "false" (src/grammarFunctor.ml[609,15620+15]..[609,15620+20])
                                              None
                                      ]
                                ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[615,15726+0]..[637,16083+3])
                Pstr_module
                "SymbolSet" (src/grammarFunctor.ml[615,15726+7]..[615,15726+16])
                  module_expr (src/grammarFunctor.ml[615,15726+19]..[637,16083+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[617,15753+2]..[617,15753+26])
                        Pstr_include                        module_expr (src/grammarFunctor.ml[617,15753+10]..[617,15753+26])
                          Pmod_apply
                          module_expr (src/grammarFunctor.ml[617,15753+10]..[617,15753+18])
                            Pmod_ident "Set.Make" (src/grammarFunctor.ml[617,15753+10]..[617,15753+18])
                          module_expr (src/grammarFunctor.ml[617,15753+19]..[617,15753+25])
                            Pmod_ident "Symbol" (src/grammarFunctor.ml[617,15753+19]..[617,15753+25])
                      structure_item (src/grammarFunctor.ml[619,15781+2]..[620,15803+36])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[619,15781+6]..[619,15781+11])
                              Ppat_var "print" (src/grammarFunctor.ml[619,15781+6]..[619,15781+11])
                            expression (src/grammarFunctor.ml[619,15781+12]..[620,15803+36]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[619,15781+12]..[619,15781+19])
                                Ppat_var "symbols" (src/grammarFunctor.ml[619,15781+12]..[619,15781+19])
                              expression (src/grammarFunctor.ml[620,15803+4]..[620,15803+36])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[620,15803+4]..[620,15803+17])
                                  Pexp_ident "Symbol.printl" (src/grammarFunctor.ml[620,15803+4]..[620,15803+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[620,15803+18]..[620,15803+36])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[620,15803+19]..[620,15803+27])
                                        Pexp_ident "elements" (src/grammarFunctor.ml[620,15803+19]..[620,15803+27])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[620,15803+28]..[620,15803+35])
                                            Pexp_ident "symbols" (src/grammarFunctor.ml[620,15803+28]..[620,15803+35])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[625,15984+2]..[626,16002+5])
                        Pstr_type Rec
                        [
                          type_declaration "property" (src/grammarFunctor.ml[625,15984+7]..[625,15984+15]) (src/grammarFunctor.ml[625,15984+2]..[626,16002+5])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[626,16002+4]..[626,16002+5])
                                  Ptyp_constr "t" (src/grammarFunctor.ml[626,16002+4]..[626,16002+5])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[628,16009+2]..[629,16024+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[628,16009+6]..[628,16009+12])
                              Ppat_var "bottom" (src/grammarFunctor.ml[628,16009+6]..[628,16009+12])
                            expression (src/grammarFunctor.ml[629,16024+4]..[629,16024+9])
                              Pexp_ident "empty" (src/grammarFunctor.ml[629,16024+4]..[629,16024+9])
                        ]
                      structure_item (src/grammarFunctor.ml[631,16035+2]..[632,16047+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[631,16035+6]..[631,16035+9])
                              Ppat_var "leq" (src/grammarFunctor.ml[631,16035+6]..[631,16035+9])
                            expression (src/grammarFunctor.ml[632,16047+4]..[632,16047+10])
                              Pexp_ident "subset" (src/grammarFunctor.ml[632,16047+4]..[632,16047+10])
                        ]
                      structure_item (src/grammarFunctor.ml[634,16059+2]..[635,16072+9])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[634,16059+6]..[634,16059+10])
                              Ppat_var "join" (src/grammarFunctor.ml[634,16059+6]..[634,16059+10])
                            expression (src/grammarFunctor.ml[635,16072+4]..[635,16072+9])
                              Pexp_ident "union" (src/grammarFunctor.ml[635,16072+4]..[635,16072+9])
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[641,16114+0]..[660,16454+3])
                Pstr_module
                "SymbolMap" (src/grammarFunctor.ml[641,16114+7]..[641,16114+16])
                  module_expr (src/grammarFunctor.ml[641,16114+19]..[660,16454+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[643,16141+2]..[643,16141+26])
                        Pstr_include                        module_expr (src/grammarFunctor.ml[643,16141+10]..[643,16141+26])
                          Pmod_apply
                          module_expr (src/grammarFunctor.ml[643,16141+10]..[643,16141+18])
                            Pmod_ident "Map.Make" (src/grammarFunctor.ml[643,16141+10]..[643,16141+18])
                          module_expr (src/grammarFunctor.ml[643,16141+19]..[643,16141+25])
                            Pmod_ident "Symbol" (src/grammarFunctor.ml[643,16141+19]..[643,16141+25])
                      structure_item (src/grammarFunctor.ml[645,16169+2]..[648,16238+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[645,16169+6]..[645,16169+12])
                              Ppat_var "domain" (src/grammarFunctor.ml[645,16169+6]..[645,16169+12])
                            expression (src/grammarFunctor.ml[645,16169+13]..[648,16238+10]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[645,16169+13]..[645,16169+14])
                                Ppat_var "m" (src/grammarFunctor.ml[645,16169+13]..[645,16169+14])
                              expression (src/grammarFunctor.ml[646,16186+4]..[648,16238+10])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[646,16186+4]..[646,16186+8])
                                  Pexp_ident "fold" (src/grammarFunctor.ml[646,16186+4]..[646,16186+8])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[646,16186+9]..[648,16238+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[646,16186+14]..[646,16186+20])
                                        Ppat_var "symbol" (src/grammarFunctor.ml[646,16186+14]..[646,16186+20])
                                      expression (src/grammarFunctor.ml[646,16186+21]..[647,16217+20]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[646,16186+21]..[646,16186+22])
                                          Ppat_any
                                        expression (src/grammarFunctor.ml[646,16186+23]..[647,16217+20]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[646,16186+23]..[646,16186+27])
                                            Ppat_var "accu" (src/grammarFunctor.ml[646,16186+23]..[646,16186+27])
                                          expression (src/grammarFunctor.ml[647,16217+6]..[647,16217+20])
                                            Pexp_construct "::" (src/grammarFunctor.ml[647,16217+13]..[647,16217+15])
                                            Some
                                              expression (src/grammarFunctor.ml[647,16217+6]..[647,16217+20]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (src/grammarFunctor.ml[647,16217+6]..[647,16217+12])
                                                    Pexp_ident "symbol" (src/grammarFunctor.ml[647,16217+6]..[647,16217+12])
                                                  expression (src/grammarFunctor.ml[647,16217+16]..[647,16217+20])
                                                    Pexp_ident "accu" (src/grammarFunctor.ml[647,16217+16]..[647,16217+20])
                                                ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[648,16238+6]..[648,16238+7])
                                      Pexp_ident "m" (src/grammarFunctor.ml[648,16238+6]..[648,16238+7])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[648,16238+8]..[648,16238+10])
                                      Pexp_construct "[]" (src/grammarFunctor.ml[648,16238+8]..[648,16238+10])
                                      None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[650,16250+2]..[653,16325+14])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[650,16250+6]..[650,16250+10])
                              Ppat_var "init" (src/grammarFunctor.ml[650,16250+6]..[650,16250+10])
                            expression (src/grammarFunctor.ml[650,16250+11]..[653,16325+14]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[650,16250+11]..[650,16250+12])
                                Ppat_var "f" (src/grammarFunctor.ml[650,16250+11]..[650,16250+12])
                              expression (src/grammarFunctor.ml[650,16250+13]..[653,16325+14]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[650,16250+13]..[650,16250+15])
                                  Ppat_var "xs" (src/grammarFunctor.ml[650,16250+13]..[650,16250+15])
                                expression (src/grammarFunctor.ml[651,16268+4]..[653,16325+14])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[651,16268+4]..[651,16268+18])
                                    Pexp_ident "List.fold_left" (src/grammarFunctor.ml[651,16268+4]..[651,16268+18])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[651,16268+19]..[653,16325+5])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[651,16268+24]..[651,16268+28])
                                          Ppat_var "accu" (src/grammarFunctor.ml[651,16268+24]..[651,16268+28])
                                        expression (src/grammarFunctor.ml[651,16268+29]..[652,16302+22]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[651,16268+29]..[651,16268+30])
                                            Ppat_var "x" (src/grammarFunctor.ml[651,16268+29]..[651,16268+30])
                                          expression (src/grammarFunctor.ml[652,16302+6]..[652,16302+22])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[652,16302+6]..[652,16302+9])
                                              Pexp_ident "add" (src/grammarFunctor.ml[652,16302+6]..[652,16302+9])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[652,16302+10]..[652,16302+11])
                                                  Pexp_ident "x" (src/grammarFunctor.ml[652,16302+10]..[652,16302+11])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[652,16302+12]..[652,16302+17])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[652,16302+13]..[652,16302+14])
                                                    Pexp_ident "f" (src/grammarFunctor.ml[652,16302+13]..[652,16302+14])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[652,16302+15]..[652,16302+16])
                                                        Pexp_ident "x" (src/grammarFunctor.ml[652,16302+15]..[652,16302+16])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[652,16302+18]..[652,16302+22])
                                                  Pexp_ident "accu" (src/grammarFunctor.ml[652,16302+18]..[652,16302+22])
                                            ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[653,16325+6]..[653,16325+11])
                                        Pexp_ident "empty" (src/grammarFunctor.ml[653,16325+6]..[653,16325+11])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[653,16325+12]..[653,16325+14])
                                        Pexp_ident "xs" (src/grammarFunctor.ml[653,16325+12]..[653,16325+14])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[655,16341+2]..[658,16440+12])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[655,16341+6]..[655,16341+23])
                              Ppat_var "purelynonterminal" (src/grammarFunctor.ml[655,16341+6]..[655,16341+23])
                            expression (src/grammarFunctor.ml[655,16341+24]..[658,16440+12]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[655,16341+24]..[655,16341+25])
                                Ppat_var "m" (src/grammarFunctor.ml[655,16341+24]..[655,16341+25])
                              expression (src/grammarFunctor.ml[656,16369+4]..[658,16440+12])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[656,16369+4]..[656,16369+8])
                                  Pexp_ident "fold" (src/grammarFunctor.ml[656,16369+4]..[656,16369+8])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[656,16369+9]..[658,16440+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[656,16369+14]..[656,16369+20])
                                        Ppat_var "symbol" (src/grammarFunctor.ml[656,16369+14]..[656,16369+20])
                                      expression (src/grammarFunctor.ml[656,16369+21]..[657,16400+39]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[656,16369+21]..[656,16369+22])
                                          Ppat_any
                                        expression (src/grammarFunctor.ml[656,16369+23]..[657,16400+39]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[656,16369+23]..[656,16369+27])
                                            Ppat_var "accu" (src/grammarFunctor.ml[656,16369+23]..[656,16369+27])
                                          expression (src/grammarFunctor.ml[657,16400+6]..[657,16400+39])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[657,16400+11]..[657,16400+13])
                                              Pexp_ident "&&" (src/grammarFunctor.ml[657,16400+11]..[657,16400+13])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[657,16400+6]..[657,16400+10])
                                                  Pexp_ident "accu" (src/grammarFunctor.ml[657,16400+6]..[657,16400+10])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[657,16400+14]..[657,16400+39])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[657,16400+14]..[657,16400+32])
                                                    Pexp_ident "Symbol.nonterminal" (src/grammarFunctor.ml[657,16400+14]..[657,16400+32])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[657,16400+33]..[657,16400+39])
                                                        Pexp_ident "symbol" (src/grammarFunctor.ml[657,16400+33]..[657,16400+39])
                                                  ]
                                            ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[658,16440+6]..[658,16440+7])
                                      Pexp_ident "m" (src/grammarFunctor.ml[658,16440+6]..[658,16440+7])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[658,16440+8]..[658,16440+12])
                                      Pexp_construct "true" (src/grammarFunctor.ml[658,16440+8]..[658,16440+12])
                                      None
                                ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[665,16558+0]..[1003,26405+3])
                Pstr_module
                "Production" (src/grammarFunctor.ml[665,16558+7]..[665,16558+17])
                  module_expr (src/grammarFunctor.ml[665,16558+20]..[1003,26405+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[667,16586+2]..[668,16601+9])
                        Pstr_type Rec
                        [
                          type_declaration "index" (src/grammarFunctor.ml[667,16586+7]..[667,16586+12]) (src/grammarFunctor.ml[667,16586+2]..[668,16601+9])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[668,16601+6]..[668,16601+9])
                                  Ptyp_constr "int" (src/grammarFunctor.ml[668,16601+6]..[668,16601+9])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[670,16612+2]..[671,16628+7])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[670,16612+6]..[670,16612+13])
                              Ppat_var "compare" (src/grammarFunctor.ml[670,16612+6]..[670,16612+13])
                            expression (src/grammarFunctor.ml[671,16628+4]..[671,16628+7])
                              Pexp_ident "-" (src/grammarFunctor.ml[671,16628+4]..[671,16628+7])
                        ]
                      structure_item (src/grammarFunctor.ml[679,16844+2]..[685,17081+48])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[679,16844+6]..[679,16844+7])
                              Ppat_var "n" (src/grammarFunctor.ml[679,16844+6]..[679,16844+7])
                            core_type (src/grammarFunctor.ml[679,16844+10]..[679,16844+13])
                              Ptyp_constr "int" (src/grammarFunctor.ml[679,16844+10]..[679,16844+13])
                              []
                            expression (src/grammarFunctor.ml[680,16860+4]..[685,17081+48])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[680,16860+8]..[680,16860+9])
                                    Ppat_var "n" (src/grammarFunctor.ml[680,16860+8]..[680,16860+9])
                                  expression (src/grammarFunctor.ml[680,16860+12]..[682,16954+21])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[680,16860+12]..[680,16860+26])
                                      Pexp_ident "StringMap.fold" (src/grammarFunctor.ml[680,16860+12]..[680,16860+26])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[680,16860+27]..[682,16954+5])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[680,16860+32]..[680,16860+33])
                                            Ppat_any
                                          expression (src/grammarFunctor.ml[680,16860+34]..[681,16923+30]) ghost
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[680,16860+34]..[680,16860+57])
                                              Ppat_record Closed
                                              [
                                                "branches" (src/grammarFunctor.ml[680,16860+36]..[680,16860+44])
                                                  pattern (src/grammarFunctor.ml[680,16860+47]..[680,16860+55])
                                                    Ppat_var "branches" (src/grammarFunctor.ml[680,16860+47]..[680,16860+55])
                                              ]
                                            expression (src/grammarFunctor.ml[680,16860+58]..[681,16923+30]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/grammarFunctor.ml[680,16860+58]..[680,16860+59])
                                                Ppat_var "n" (src/grammarFunctor.ml[680,16860+58]..[680,16860+59])
                                              expression (src/grammarFunctor.ml[681,16923+6]..[681,16923+30])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[681,16923+8]..[681,16923+9])
                                                  Pexp_ident "+" (src/grammarFunctor.ml[681,16923+8]..[681,16923+9])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[681,16923+6]..[681,16923+7])
                                                      Pexp_ident "n" (src/grammarFunctor.ml[681,16923+6]..[681,16923+7])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[681,16923+10]..[681,16923+30])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[681,16923+10]..[681,16923+21])
                                                        Pexp_ident "List.length" (src/grammarFunctor.ml[681,16923+10]..[681,16923+21])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[681,16923+22]..[681,16923+30])
                                                            Pexp_ident "branches" (src/grammarFunctor.ml[681,16923+22]..[681,16923+30])
                                                      ]
                                                ]
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[682,16954+6]..[682,16954+19])
                                          Pexp_field
                                          expression (src/grammarFunctor.ml[682,16954+6]..[682,16954+13])
                                            Pexp_ident "grammar" (src/grammarFunctor.ml[682,16954+6]..[682,16954+13])
                                          "rules" (src/grammarFunctor.ml[682,16954+14]..[682,16954+19])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[682,16954+20]..[682,16954+21])
                                          Pexp_constant PConst_int (0,None)
                                    ]
                              ]
                              expression (src/grammarFunctor.ml[683,16979+4]..[685,17081+48])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[683,16979+4]..[684,16999+80])
                                  Pexp_ifthenelse
                                  expression (src/grammarFunctor.ml[683,16979+7]..[683,16979+14])
                                    Pexp_ident "verbose" (src/grammarFunctor.ml[683,16979+7]..[683,16979+14])
                                  expression (src/grammarFunctor.ml[684,16999+6]..[684,16999+80])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[684,16999+6]..[684,16999+16])
                                      Pexp_ident "Error.logG" (src/grammarFunctor.ml[684,16999+6]..[684,16999+16])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[684,16999+17]..[684,16999+18])
                                          Pexp_constant PConst_int (1,None)
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[684,16999+19]..[684,16999+80])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[684,16999+24]..[684,16999+25])
                                            Ppat_var "f" (src/grammarFunctor.ml[684,16999+24]..[684,16999+25])
                                          expression (src/grammarFunctor.ml[684,16999+29]..[684,16999+79])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[684,16999+29]..[684,16999+43])
                                              Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[684,16999+29]..[684,16999+43])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[684,16999+44]..[684,16999+45])
                                                  Pexp_ident "f" (src/grammarFunctor.ml[684,16999+44]..[684,16999+45])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[684,16999+46]..[684,16999+77])
                                                  Pexp_constant PConst_string("Grammar has %d productions.\n",(src/grammarFunctor.ml[684,16999+47]..[684,16999+76]),None)
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[684,16999+78]..[684,16999+79])
                                                  Pexp_ident "n" (src/grammarFunctor.ml[684,16999+78]..[684,16999+79])
                                            ]
                                    ]
                                  None
                                expression (src/grammarFunctor.ml[685,17081+4]..[685,17081+48])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[685,17081+6]..[685,17081+7])
                                    Pexp_ident "+" (src/grammarFunctor.ml[685,17081+6]..[685,17081+7])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[685,17081+4]..[685,17081+5])
                                        Pexp_ident "n" (src/grammarFunctor.ml[685,17081+4]..[685,17081+5])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[685,17081+8]..[685,17081+48])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[685,17081+8]..[685,17081+26])
                                          Pexp_ident "StringSet.cardinal" (src/grammarFunctor.ml[685,17081+8]..[685,17081+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[685,17081+27]..[685,17081+48])
                                              Pexp_field
                                              expression (src/grammarFunctor.ml[685,17081+27]..[685,17081+34])
                                                Pexp_ident "grammar" (src/grammarFunctor.ml[685,17081+27]..[685,17081+34])
                                              "start_symbols" (src/grammarFunctor.ml[685,17081+35]..[685,17081+48])
                                        ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[687,17131+2]..[688,17148+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[687,17131+6]..[687,17131+9])
                              Ppat_var "p2i" (src/grammarFunctor.ml[687,17131+6]..[687,17131+9])
                            expression (src/grammarFunctor.ml[687,17131+10]..[688,17148+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[687,17131+10]..[687,17131+14])
                                Ppat_var "prod" (src/grammarFunctor.ml[687,17131+10]..[687,17131+14])
                              expression (src/grammarFunctor.ml[688,17148+4]..[688,17148+8])
                                Pexp_ident "prod" (src/grammarFunctor.ml[688,17148+4]..[688,17148+8])
                        ]
                      structure_item (src/grammarFunctor.ml[690,17158+2]..[692,17211+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[690,17158+6]..[690,17158+9])
                              Ppat_var "i2p" (src/grammarFunctor.ml[690,17158+6]..[690,17158+9])
                            expression (src/grammarFunctor.ml[690,17158+10]..[692,17211+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[690,17158+10]..[690,17158+14])
                                Ppat_var "prod" (src/grammarFunctor.ml[690,17158+10]..[690,17158+14])
                              expression (src/grammarFunctor.ml[691,17175+4]..[692,17211+8])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[691,17175+4]..[691,17175+34])
                                  Pexp_assert
                                  expression (src/grammarFunctor.ml[691,17175+11]..[691,17175+34])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[691,17175+22]..[691,17175+24])
                                      Pexp_ident "&&" (src/grammarFunctor.ml[691,17175+22]..[691,17175+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[691,17175+12]..[691,17175+21])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[691,17175+17]..[691,17175+19])
                                            Pexp_ident ">=" (src/grammarFunctor.ml[691,17175+17]..[691,17175+19])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[691,17175+12]..[691,17175+16])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[691,17175+12]..[691,17175+16])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[691,17175+20]..[691,17175+21])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[691,17175+25]..[691,17175+33])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[691,17175+30]..[691,17175+31])
                                            Pexp_ident "<" (src/grammarFunctor.ml[691,17175+30]..[691,17175+31])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[691,17175+25]..[691,17175+29])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[691,17175+25]..[691,17175+29])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[691,17175+32]..[691,17175+33])
                                                Pexp_ident "n" (src/grammarFunctor.ml[691,17175+32]..[691,17175+33])
                                          ]
                                    ]
                                expression (src/grammarFunctor.ml[692,17211+4]..[692,17211+8])
                                  Pexp_ident "prod" (src/grammarFunctor.ml[692,17211+4]..[692,17211+8])
                        ]
                      structure_item (src/grammarFunctor.ml[708,18080+2]..[709,18135+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[708,18080+6]..[708,18080+11])
                              Ppat_var "table" (src/grammarFunctor.ml[708,18080+6]..[708,18080+11])
                            core_type (src/grammarFunctor.ml[708,18080+14]..[708,18080+52])
                              Ptyp_constr "array" (src/grammarFunctor.ml[708,18080+47]..[708,18080+52])
                              [
                                core_type (src/grammarFunctor.ml[708,18080+15]..[708,18080+45])
                                  Ptyp_tuple
                                  [
                                    core_type (src/grammarFunctor.ml[708,18080+15]..[708,18080+28])
                                      Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[708,18080+15]..[708,18080+28])
                                      []
                                    core_type (src/grammarFunctor.ml[708,18080+31]..[708,18080+45])
                                      Ptyp_constr "array" (src/grammarFunctor.ml[708,18080+40]..[708,18080+45])
                                      [
                                        core_type (src/grammarFunctor.ml[708,18080+31]..[708,18080+39])
                                          Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[708,18080+31]..[708,18080+39])
                                          []
                                      ]
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[709,18135+4]..[709,18135+27])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[709,18135+4]..[709,18135+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[709,18135+4]..[709,18135+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[709,18135+15]..[709,18135+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[709,18135+15]..[709,18135+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[709,18135+17]..[709,18135+27])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[709,18135+18]..[709,18135+20])
                                        Pexp_constant PConst_int (-1,None)
                                      expression (src/grammarFunctor.ml[709,18135+22]..[709,18135+26])
                                        Pexp_array
                                        []
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[711,18164+2]..[712,18209+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[711,18164+6]..[711,18164+17])
                              Ppat_var "identifiers" (src/grammarFunctor.ml[711,18164+6]..[711,18164+17])
                            core_type (src/grammarFunctor.ml[711,18164+20]..[711,18164+42])
                              Ptyp_constr "array" (src/grammarFunctor.ml[711,18164+37]..[711,18164+42])
                              [
                                core_type (src/grammarFunctor.ml[711,18164+20]..[711,18164+36])
                                  Ptyp_constr "array" (src/grammarFunctor.ml[711,18164+31]..[711,18164+36])
                                  [
                                    core_type (src/grammarFunctor.ml[711,18164+20]..[711,18164+30])
                                      Ptyp_constr "identifier" (src/grammarFunctor.ml[711,18164+20]..[711,18164+30])
                                      []
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[712,18209+4]..[712,18209+21])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[712,18209+4]..[712,18209+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[712,18209+4]..[712,18209+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[712,18209+15]..[712,18209+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[712,18209+15]..[712,18209+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[712,18209+17]..[712,18209+21])
                                    Pexp_array
                                    []
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[714,18232+2]..[715,18270+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[714,18232+6]..[714,18232+13])
                              Ppat_var "actions" (src/grammarFunctor.ml[714,18232+6]..[714,18232+13])
                            core_type (src/grammarFunctor.ml[714,18232+16]..[714,18232+35])
                              Ptyp_constr "array" (src/grammarFunctor.ml[714,18232+30]..[714,18232+35])
                              [
                                core_type (src/grammarFunctor.ml[714,18232+16]..[714,18232+29])
                                  Ptyp_constr "option" (src/grammarFunctor.ml[714,18232+23]..[714,18232+29])
                                  [
                                    core_type (src/grammarFunctor.ml[714,18232+16]..[714,18232+22])
                                      Ptyp_constr "action" (src/grammarFunctor.ml[714,18232+16]..[714,18232+22])
                                      []
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[715,18270+4]..[715,18270+21])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[715,18270+4]..[715,18270+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[715,18270+4]..[715,18270+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[715,18270+15]..[715,18270+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[715,18270+15]..[715,18270+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[715,18270+17]..[715,18270+21])
                                    Pexp_construct "None" (src/grammarFunctor.ml[715,18270+17]..[715,18270+21])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[717,18293+2]..[718,18336+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[717,18293+6]..[717,18293+15])
                              Ppat_var "positions" (src/grammarFunctor.ml[717,18293+6]..[717,18293+15])
                            core_type (src/grammarFunctor.ml[717,18293+18]..[717,18293+40])
                              Ptyp_constr "array" (src/grammarFunctor.ml[717,18293+35]..[717,18293+40])
                              [
                                core_type (src/grammarFunctor.ml[717,18293+18]..[717,18293+34])
                                  Ptyp_constr "list" (src/grammarFunctor.ml[717,18293+30]..[717,18293+34])
                                  [
                                    core_type (src/grammarFunctor.ml[717,18293+18]..[717,18293+29])
                                      Ptyp_constr "Positions.t" (src/grammarFunctor.ml[717,18293+18]..[717,18293+29])
                                      []
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[718,18336+4]..[718,18336+19])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[718,18336+4]..[718,18336+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[718,18336+4]..[718,18336+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[718,18336+15]..[718,18336+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[718,18336+15]..[718,18336+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[718,18336+17]..[718,18336+19])
                                    Pexp_construct "[]" (src/grammarFunctor.ml[718,18336+17]..[718,18336+19])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[720,18357+2]..[721,18412+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[720,18357+6]..[720,18357+20])
                              Ppat_var "rhs_attributes" (src/grammarFunctor.ml[720,18357+6]..[720,18357+20])
                            core_type (src/grammarFunctor.ml[720,18357+23]..[720,18357+52])
                              Ptyp_constr "array" (src/grammarFunctor.ml[720,18357+47]..[720,18357+52])
                              [
                                core_type (src/grammarFunctor.ml[720,18357+23]..[720,18357+46])
                                  Ptyp_constr "array" (src/grammarFunctor.ml[720,18357+41]..[720,18357+46])
                                  [
                                    core_type (src/grammarFunctor.ml[720,18357+23]..[720,18357+40])
                                      Ptyp_constr "Syntax.attributes" (src/grammarFunctor.ml[720,18357+23]..[720,18357+40])
                                      []
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[721,18412+4]..[721,18412+21])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[721,18412+4]..[721,18412+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[721,18412+4]..[721,18412+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[721,18412+15]..[721,18412+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[721,18412+15]..[721,18412+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[721,18412+17]..[721,18412+21])
                                    Pexp_array
                                    []
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[723,18435+2]..[724,18483+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[723,18435+6]..[723,18435+15])
                              Ppat_var "prec_decl" (src/grammarFunctor.ml[723,18435+6]..[723,18435+15])
                            core_type (src/grammarFunctor.ml[723,18435+18]..[723,18435+45])
                              Ptyp_constr "array" (src/grammarFunctor.ml[723,18435+40]..[723,18435+45])
                              [
                                core_type (src/grammarFunctor.ml[723,18435+18]..[723,18435+39])
                                  Ptyp_constr "option" (src/grammarFunctor.ml[723,18435+33]..[723,18435+39])
                                  [
                                    core_type (src/grammarFunctor.ml[723,18435+18]..[723,18435+32])
                                      Ptyp_constr "located" (src/grammarFunctor.ml[723,18435+25]..[723,18435+32])
                                      [
                                        core_type (src/grammarFunctor.ml[723,18435+18]..[723,18435+24])
                                          Ptyp_constr "symbol" (src/grammarFunctor.ml[723,18435+18]..[723,18435+24])
                                          []
                                      ]
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[724,18483+4]..[724,18483+21])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[724,18483+4]..[724,18483+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[724,18483+4]..[724,18483+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[724,18483+15]..[724,18483+16])
                                    Pexp_ident "n" (src/grammarFunctor.ml[724,18483+15]..[724,18483+16])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[724,18483+17]..[724,18483+21])
                                    Pexp_construct "None" (src/grammarFunctor.ml[724,18483+17]..[724,18483+21])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[726,18506+2]..[731,18842+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[726,18506+6]..[726,18506+22])
                              Ppat_var "production_level" (src/grammarFunctor.ml[726,18506+6]..[726,18506+22])
                            core_type (src/grammarFunctor.ml[726,18506+25]..[726,18506+54])
                              Ptyp_constr "array" (src/grammarFunctor.ml[726,18506+49]..[726,18506+54])
                              [
                                core_type (src/grammarFunctor.ml[726,18506+25]..[726,18506+48])
                                  Ptyp_constr "branch_production_level" (src/grammarFunctor.ml[726,18506+25]..[726,18506+48])
                                  []
                              ]
                            expression (src/grammarFunctor.ml[730,18773+4]..[731,18842+22])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[730,18773+8]..[730,18773+13])
                                    Ppat_var "dummy" (src/grammarFunctor.ml[730,18773+8]..[730,18773+13])
                                  expression (src/grammarFunctor.ml[730,18773+16]..[730,18773+65])
                                    Pexp_construct "ProductionLevel" (src/grammarFunctor.ml[730,18773+16]..[730,18773+31])
                                    Some
                                      expression (src/grammarFunctor.ml[730,18773+32]..[730,18773+65])
                                        Pexp_tuple
                                        [
                                          expression (src/grammarFunctor.ml[730,18773+33]..[730,18773+61])
                                            Pexp_ident "InputFile.builtin_input_file" (src/grammarFunctor.ml[730,18773+33]..[730,18773+61])
                                          expression (src/grammarFunctor.ml[730,18773+63]..[730,18773+64])
                                            Pexp_constant PConst_int (0,None)
                                        ]
                              ]
                              expression (src/grammarFunctor.ml[731,18842+4]..[731,18842+22])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[731,18842+4]..[731,18842+14])
                                  Pexp_ident "Array.make" (src/grammarFunctor.ml[731,18842+4]..[731,18842+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[731,18842+15]..[731,18842+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[731,18842+15]..[731,18842+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[731,18842+17]..[731,18842+22])
                                      Pexp_ident "dummy" (src/grammarFunctor.ml[731,18842+17]..[731,18842+22])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[735,18947+2]..[736,18983+37])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[735,18947+6]..[735,18947+13])
                              Ppat_var "ntprods" (src/grammarFunctor.ml[735,18947+6]..[735,18947+13])
                            core_type (src/grammarFunctor.ml[735,18947+16]..[735,18947+33])
                              Ptyp_constr "array" (src/grammarFunctor.ml[735,18947+28]..[735,18947+33])
                              [
                                core_type (src/grammarFunctor.ml[735,18947+17]..[735,18947+26])
                                  Ptyp_tuple
                                  [
                                    core_type (src/grammarFunctor.ml[735,18947+17]..[735,18947+20])
                                      Ptyp_constr "int" (src/grammarFunctor.ml[735,18947+17]..[735,18947+20])
                                      []
                                    core_type (src/grammarFunctor.ml[735,18947+23]..[735,18947+26])
                                      Ptyp_constr "int" (src/grammarFunctor.ml[735,18947+23]..[735,18947+26])
                                      []
                                  ]
                              ]
                            expression (src/grammarFunctor.ml[736,18983+4]..[736,18983+37])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[736,18983+4]..[736,18983+14])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[736,18983+4]..[736,18983+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[736,18983+15]..[736,18983+28])
                                    Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[736,18983+15]..[736,18983+28])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[736,18983+29]..[736,18983+37])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[736,18983+30]..[736,18983+32])
                                        Pexp_constant PConst_int (-1,None)
                                      expression (src/grammarFunctor.ml[736,18983+34]..[736,18983+36])
                                        Pexp_constant PConst_int (-1,None)
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[740,19101+2]..[741,19134+13])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[740,19101+6]..[740,19101+30])
                              Ppat_var "grammar_uses_error_token" (src/grammarFunctor.ml[740,19101+6]..[740,19101+30])
                            expression (src/grammarFunctor.ml[741,19134+4]..[741,19134+13])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[741,19134+4]..[741,19134+7])
                                Pexp_ident "ref" (src/grammarFunctor.ml[741,19134+4]..[741,19134+7])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[741,19134+8]..[741,19134+13])
                                    Pexp_construct "false" (src/grammarFunctor.ml[741,19134+8]..[741,19134+13])
                                    None
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[748,19438+2]..[759,19880+53])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[748,19438+6]..[749,19459+43])
                              Ppat_tuple
                              [
                                pattern (src/grammarFunctor.ml[748,19438+6]..[748,19438+19])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[748,19438+7]..[748,19438+12])
                                    Ppat_var "start" (src/grammarFunctor.ml[748,19438+7]..[748,19438+12])
                                  core_type (src/grammarFunctor.ml[748,19438+15]..[748,19438+18])
                                    Ptyp_constr "int" (src/grammarFunctor.ml[748,19438+15]..[748,19438+18])
                                    []
                                pattern (src/grammarFunctor.ml[749,19459+6]..[749,19459+43])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[749,19459+7]..[749,19459+17])
                                    Ppat_var "startprods" (src/grammarFunctor.ml[749,19459+7]..[749,19459+17])
                                  core_type (src/grammarFunctor.ml[749,19459+20]..[749,19459+42])
                                    Ptyp_constr "NonterminalMap.t" (src/grammarFunctor.ml[749,19459+26]..[749,19459+42])
                                    [
                                      core_type (src/grammarFunctor.ml[749,19459+20]..[749,19459+25])
                                        Ptyp_constr "index" (src/grammarFunctor.ml[749,19459+20]..[749,19459+25])
                                        []
                                    ]
                              ]
                            expression (src/grammarFunctor.ml[750,19505+4]..[759,19880+53])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[750,19505+4]..[750,19505+18])
                                Pexp_ident "StringSet.fold" (src/grammarFunctor.ml[750,19505+4]..[750,19505+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[750,19505+19]..[759,19880+5])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[750,19505+24]..[750,19505+35])
                                      Ppat_var "nonterminal" (src/grammarFunctor.ml[750,19505+24]..[750,19505+35])
                                    expression (src/grammarFunctor.ml[750,19505+36]..[758,19839+40]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[750,19505+36]..[750,19505+51])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[750,19505+37]..[750,19505+38])
                                            Ppat_var "k" (src/grammarFunctor.ml[750,19505+37]..[750,19505+38])
                                          pattern (src/grammarFunctor.ml[750,19505+40]..[750,19505+50])
                                            Ppat_var "startprods" (src/grammarFunctor.ml[750,19505+40]..[750,19505+50])
                                        ]
                                      expression (src/grammarFunctor.ml[751,19560+6]..[758,19839+40])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[751,19560+10]..[751,19560+12])
                                              Ppat_var "nt" (src/grammarFunctor.ml[751,19560+10]..[751,19560+12])
                                            expression (src/grammarFunctor.ml[751,19560+15]..[751,19560+45])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[751,19560+15]..[751,19560+33])
                                                Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[751,19560+15]..[751,19560+33])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[751,19560+34]..[751,19560+45])
                                                    Pexp_ident "nonterminal" (src/grammarFunctor.ml[751,19560+34]..[751,19560+45])
                                              ]
                                          <def>
                                            pattern (src/grammarFunctor.ml[752,19606+10]..[752,19606+13])
                                              Ppat_var "nt'" (src/grammarFunctor.ml[752,19606+10]..[752,19606+13])
                                            expression (src/grammarFunctor.ml[752,19606+16]..[752,19606+54])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[752,19606+16]..[752,19606+34])
                                                Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[752,19606+16]..[752,19606+34])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[752,19606+35]..[752,19606+54])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[752,19606+48]..[752,19606+49])
                                                      Pexp_ident "^" (src/grammarFunctor.ml[752,19606+48]..[752,19606+49])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[752,19606+36]..[752,19606+47])
                                                          Pexp_ident "nonterminal" (src/grammarFunctor.ml[752,19606+36]..[752,19606+47])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[752,19606+50]..[752,19606+53])
                                                          Pexp_constant PConst_string("'",(src/grammarFunctor.ml[752,19606+51]..[752,19606+52]),None)
                                                    ]
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[753,19664+6]..[758,19839+40])
                                          Pexp_sequence
                                          expression (src/grammarFunctor.ml[753,19664+6]..[753,19664+43])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[753,19664+6]..[753,19664+43]) ghost
                                              Pexp_ident "Array.set" (src/grammarFunctor.ml[753,19664+6]..[753,19664+43]) ghost
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[753,19664+6]..[753,19664+11])
                                                  Pexp_ident "table" (src/grammarFunctor.ml[753,19664+6]..[753,19664+11])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[753,19664+13]..[753,19664+14])
                                                  Pexp_ident "k" (src/grammarFunctor.ml[753,19664+13]..[753,19664+14])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[753,19664+19]..[753,19664+43])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/grammarFunctor.ml[753,19664+20]..[753,19664+23])
                                                      Pexp_ident "nt'" (src/grammarFunctor.ml[753,19664+20]..[753,19664+23])
                                                    expression (src/grammarFunctor.ml[753,19664+25]..[753,19664+42])
                                                      Pexp_array
                                                      [
                                                        expression (src/grammarFunctor.ml[753,19664+28]..[753,19664+39])
                                                          Pexp_construct "Symbol.N" (src/grammarFunctor.ml[753,19664+28]..[753,19664+36])
                                                          Some
                                                            expression (src/grammarFunctor.ml[753,19664+37]..[753,19664+39])
                                                              Pexp_ident "nt" (src/grammarFunctor.ml[753,19664+37]..[753,19664+39])
                                                      ]
                                                  ]
                                            ]
                                          expression (src/grammarFunctor.ml[754,19709+6]..[758,19839+40])
                                            Pexp_sequence
                                            expression (src/grammarFunctor.ml[754,19709+6]..[754,19709+35])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[754,19709+6]..[754,19709+35]) ghost
                                                Pexp_ident "Array.set" (src/grammarFunctor.ml[754,19709+6]..[754,19709+35]) ghost
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[754,19709+6]..[754,19709+17])
                                                    Pexp_ident "identifiers" (src/grammarFunctor.ml[754,19709+6]..[754,19709+17])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[754,19709+19]..[754,19709+20])
                                                    Pexp_ident "k" (src/grammarFunctor.ml[754,19709+19]..[754,19709+20])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[754,19709+25]..[754,19709+35])
                                                    Pexp_array
                                                    [
                                                      expression (src/grammarFunctor.ml[754,19709+28]..[754,19709+32])
                                                        Pexp_constant PConst_string("_1",(src/grammarFunctor.ml[754,19709+29]..[754,19709+31]),None)
                                                    ]
                                              ]
                                            expression (src/grammarFunctor.ml[755,19746+6]..[758,19839+40])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[755,19746+6]..[755,19746+31])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[755,19746+6]..[755,19746+31]) ghost
                                                  Pexp_ident "Array.set" (src/grammarFunctor.ml[755,19746+6]..[755,19746+31]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[755,19746+6]..[755,19746+13])
                                                      Pexp_ident "ntprods" (src/grammarFunctor.ml[755,19746+6]..[755,19746+13])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[755,19746+15]..[755,19746+18])
                                                      Pexp_ident "nt'" (src/grammarFunctor.ml[755,19746+15]..[755,19746+18])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[755,19746+23]..[755,19746+31])
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[755,19746+24]..[755,19746+25])
                                                          Pexp_ident "k" (src/grammarFunctor.ml[755,19746+24]..[755,19746+25])
                                                        expression (src/grammarFunctor.ml[755,19746+27]..[755,19746+30])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[755,19746+28]..[755,19746+29])
                                                            Pexp_ident "+" (src/grammarFunctor.ml[755,19746+28]..[755,19746+29])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[755,19746+27]..[755,19746+28])
                                                                Pexp_ident "k" (src/grammarFunctor.ml[755,19746+27]..[755,19746+28])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[755,19746+29]..[755,19746+30])
                                                                Pexp_constant PConst_int (1,None)
                                                          ]
                                                      ]
                                                ]
                                              expression (src/grammarFunctor.ml[756,19779+6]..[758,19839+40])
                                                Pexp_sequence
                                                expression (src/grammarFunctor.ml[756,19779+6]..[756,19779+47])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[756,19779+6]..[756,19779+47]) ghost
                                                    Pexp_ident "Array.set" (src/grammarFunctor.ml[756,19779+6]..[756,19779+47]) ghost
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[756,19779+6]..[756,19779+15])
                                                        Pexp_ident "positions" (src/grammarFunctor.ml[756,19779+6]..[756,19779+15])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[756,19779+17]..[756,19779+18])
                                                        Pexp_ident "k" (src/grammarFunctor.ml[756,19779+17]..[756,19779+18])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[756,19779+23]..[756,19779+47])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[756,19779+23]..[756,19779+44])
                                                          Pexp_ident "Nonterminal.positions" (src/grammarFunctor.ml[756,19779+23]..[756,19779+44])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[756,19779+45]..[756,19779+47])
                                                              Pexp_ident "nt" (src/grammarFunctor.ml[756,19779+45]..[756,19779+47])
                                                        ]
                                                  ]
                                                expression (src/grammarFunctor.ml[757,19828+6]..[758,19839+40])
                                                  Pexp_tuple
                                                  [
                                                    expression (src/grammarFunctor.ml[757,19828+6]..[757,19828+9])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[757,19828+7]..[757,19828+8])
                                                        Pexp_ident "+" (src/grammarFunctor.ml[757,19828+7]..[757,19828+8])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[757,19828+6]..[757,19828+7])
                                                            Pexp_ident "k" (src/grammarFunctor.ml[757,19828+6]..[757,19828+7])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[757,19828+8]..[757,19828+9])
                                                            Pexp_constant PConst_int (1,None)
                                                      ]
                                                    expression (src/grammarFunctor.ml[758,19839+6]..[758,19839+40])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[758,19839+6]..[758,19839+24])
                                                        Pexp_ident "NonterminalMap.add" (src/grammarFunctor.ml[758,19839+6]..[758,19839+24])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[758,19839+25]..[758,19839+27])
                                                            Pexp_ident "nt" (src/grammarFunctor.ml[758,19839+25]..[758,19839+27])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[758,19839+28]..[758,19839+29])
                                                            Pexp_ident "k" (src/grammarFunctor.ml[758,19839+28]..[758,19839+29])
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[758,19839+30]..[758,19839+40])
                                                            Pexp_ident "startprods" (src/grammarFunctor.ml[758,19839+30]..[758,19839+40])
                                                      ]
                                                  ]
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[759,19880+6]..[759,19880+27])
                                    Pexp_field
                                    expression (src/grammarFunctor.ml[759,19880+6]..[759,19880+13])
                                      Pexp_ident "grammar" (src/grammarFunctor.ml[759,19880+6]..[759,19880+13])
                                    "start_symbols" (src/grammarFunctor.ml[759,19880+14]..[759,19880+27])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[759,19880+28]..[759,19880+53])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[759,19880+29]..[759,19880+30])
                                        Pexp_constant PConst_int (0,None)
                                      expression (src/grammarFunctor.ml[759,19880+32]..[759,19880+52])
                                        Pexp_ident "NonterminalMap.empty" (src/grammarFunctor.ml[759,19880+32]..[759,19880+52])
                                    ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[763,20007+2]..[764,20040+44])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[763,20007+6]..[763,20007+21])
                              Ppat_var "producer_symbol" (src/grammarFunctor.ml[763,20007+6]..[763,20007+21])
                            expression (src/grammarFunctor.ml[763,20007+22]..[764,20040+44]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[763,20007+22]..[763,20007+30])
                                Ppat_var "producer" (src/grammarFunctor.ml[763,20007+22]..[763,20007+30])
                              expression (src/grammarFunctor.ml[764,20040+4]..[764,20040+44])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[764,20040+4]..[764,20040+17])
                                  Pexp_ident "Symbol.lookup" (src/grammarFunctor.ml[764,20040+4]..[764,20040+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[764,20040+18]..[764,20040+44])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[764,20040+19]..[764,20040+34])
                                        Pexp_ident "producer_symbol" (src/grammarFunctor.ml[764,20040+19]..[764,20040+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[764,20040+35]..[764,20040+43])
                                            Pexp_ident "producer" (src/grammarFunctor.ml[764,20040+35]..[764,20040+43])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[766,20086+2]..[784,20894+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[766,20086+6]..[766,20086+15])
                              Ppat_constraint
                              pattern (src/grammarFunctor.ml[766,20086+7]..[766,20086+8])
                                Ppat_any
                              core_type (src/grammarFunctor.ml[766,20086+11]..[766,20086+14])
                                Ptyp_constr "int" (src/grammarFunctor.ml[766,20086+11]..[766,20086+14])
                                []
                            expression (src/grammarFunctor.ml[766,20086+18]..[784,20894+23])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[766,20086+18]..[766,20086+32])
                                Pexp_ident "StringMap.fold" (src/grammarFunctor.ml[766,20086+18]..[766,20086+32])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[766,20086+33]..[784,20894+3])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[766,20086+38]..[766,20086+49])
                                      Ppat_var "nonterminal" (src/grammarFunctor.ml[766,20086+38]..[766,20086+49])
                                    expression (src/grammarFunctor.ml[766,20086+50]..[783,20887+6]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[766,20086+50]..[766,20086+62])
                                        Ppat_record Closed
                                        [
                                          "branches" (src/grammarFunctor.ml[766,20086+52]..[766,20086+60]) ghost
                                            pattern (src/grammarFunctor.ml[766,20086+52]..[766,20086+60])
                                              Ppat_var "branches" (src/grammarFunctor.ml[766,20086+52]..[766,20086+60])
                                        ]
                                      expression (src/grammarFunctor.ml[766,20086+63]..[783,20887+6]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[766,20086+63]..[766,20086+64])
                                          Ppat_var "k" (src/grammarFunctor.ml[766,20086+63]..[766,20086+64])
                                        expression (src/grammarFunctor.ml[767,20154+4]..[783,20887+6])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[767,20154+8]..[767,20154+10])
                                                Ppat_var "nt" (src/grammarFunctor.ml[767,20154+8]..[767,20154+10])
                                              expression (src/grammarFunctor.ml[767,20154+13]..[767,20154+43])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[767,20154+13]..[767,20154+31])
                                                  Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[767,20154+13]..[767,20154+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[767,20154+32]..[767,20154+43])
                                                      Pexp_ident "nonterminal" (src/grammarFunctor.ml[767,20154+32]..[767,20154+43])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[768,20201+4]..[783,20887+6])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[768,20201+8]..[768,20201+10])
                                                  Ppat_var "k'" (src/grammarFunctor.ml[768,20201+8]..[768,20201+10])
                                                expression (src/grammarFunctor.ml[768,20201+13]..[781,20838+16])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[768,20201+13]..[768,20201+27])
                                                    Pexp_ident "List.fold_left" (src/grammarFunctor.ml[768,20201+13]..[768,20201+27])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[768,20201+28]..[781,20838+5])
                                                        Pexp_fun
                                                        Nolabel
                                                        None
                                                        pattern (src/grammarFunctor.ml[768,20201+33]..[768,20201+34])
                                                          Ppat_var "k" (src/grammarFunctor.ml[768,20201+33]..[768,20201+34])
                                                        expression (src/grammarFunctor.ml[768,20201+35]..[780,20828+9]) ghost
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (src/grammarFunctor.ml[768,20201+35]..[768,20201+41])
                                                            Ppat_var "branch" (src/grammarFunctor.ml[768,20201+35]..[768,20201+41])
                                                          expression (src/grammarFunctor.ml[769,20246+6]..[780,20828+9])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/grammarFunctor.ml[769,20246+10]..[769,20246+19])
                                                                  Ppat_var "producers" (src/grammarFunctor.ml[769,20246+10]..[769,20246+19])
                                                                expression (src/grammarFunctor.ml[769,20246+22]..[769,20246+52])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[769,20246+22]..[769,20246+35])
                                                                    Pexp_ident "Array.of_list" (src/grammarFunctor.ml[769,20246+22]..[769,20246+35])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[769,20246+36]..[769,20246+52])
Pexp_field
expression (src/grammarFunctor.ml[769,20246+36]..[769,20246+42])
  Pexp_ident "branch" (src/grammarFunctor.ml[769,20246+36]..[769,20246+42])
"producers" (src/grammarFunctor.ml[769,20246+43]..[769,20246+52])
                                                                  ]
                                                            ]
                                                            expression (src/grammarFunctor.ml[770,20302+6]..[780,20828+9])
                                                              Pexp_let Nonrec
                                                              [
                                                                <def>
                                                                  pattern (src/grammarFunctor.ml[770,20302+10]..[770,20302+13])
                                                                    Ppat_var "rhs" (src/grammarFunctor.ml[770,20302+10]..[770,20302+13])
                                                                  expression (src/grammarFunctor.ml[770,20302+16]..[770,20302+51])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[770,20302+16]..[770,20302+25])
                                                                      Pexp_ident "Array.map" (src/grammarFunctor.ml[770,20302+16]..[770,20302+25])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[770,20302+26]..[770,20302+41])
  Pexp_ident "producer_symbol" (src/grammarFunctor.ml[770,20302+26]..[770,20302+41])
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[770,20302+42]..[770,20302+51])
  Pexp_ident "producers" (src/grammarFunctor.ml[770,20302+42]..[770,20302+51])
                                                                    ]
                                                              ]
                                                              expression (src/grammarFunctor.ml[771,20357+6]..[780,20828+9])
                                                                Pexp_sequence
                                                                expression (src/grammarFunctor.ml[771,20357+6]..[771,20357+28])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[771,20357+6]..[771,20357+28]) ghost
                                                                    Pexp_ident "Array.set" (src/grammarFunctor.ml[771,20357+6]..[771,20357+28]) ghost
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[771,20357+6]..[771,20357+11])
Pexp_ident "table" (src/grammarFunctor.ml[771,20357+6]..[771,20357+11])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[771,20357+13]..[771,20357+14])
Pexp_ident "k" (src/grammarFunctor.ml[771,20357+13]..[771,20357+14])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[771,20357+19]..[771,20357+28])
Pexp_tuple
[
  expression (src/grammarFunctor.ml[771,20357+20]..[771,20357+22])
    Pexp_ident "nt" (src/grammarFunctor.ml[771,20357+20]..[771,20357+22])
  expression (src/grammarFunctor.ml[771,20357+24]..[771,20357+27])
    Pexp_ident "rhs" (src/grammarFunctor.ml[771,20357+24]..[771,20357+27])
]
                                                                  ]
                                                                expression (src/grammarFunctor.ml[772,20387+6]..[780,20828+9])
                                                                  Pexp_sequence
                                                                  expression (src/grammarFunctor.ml[772,20387+6]..[772,20387+64])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[772,20387+6]..[772,20387+64]) ghost
                                                                      Pexp_ident "Array.set" (src/grammarFunctor.ml[772,20387+6]..[772,20387+64]) ghost
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[772,20387+6]..[772,20387+17])
  Pexp_ident "identifiers" (src/grammarFunctor.ml[772,20387+6]..[772,20387+17])
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[772,20387+19]..[772,20387+20])
  Pexp_ident "k" (src/grammarFunctor.ml[772,20387+19]..[772,20387+20])
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[772,20387+25]..[772,20387+64])
  Pexp_apply
  expression (src/grammarFunctor.ml[772,20387+25]..[772,20387+34])
    Pexp_ident "Array.map" (src/grammarFunctor.ml[772,20387+25]..[772,20387+34])
  [
    <arg>
    Nolabel
      expression (src/grammarFunctor.ml[772,20387+35]..[772,20387+54])
        Pexp_ident "producer_identifier" (src/grammarFunctor.ml[772,20387+35]..[772,20387+54])
    <arg>
    Nolabel
      expression (src/grammarFunctor.ml[772,20387+55]..[772,20387+64])
        Pexp_ident "producers" (src/grammarFunctor.ml[772,20387+55]..[772,20387+64])
  ]
                                                                    ]
                                                                  expression (src/grammarFunctor.ml[773,20453+6]..[780,20828+9])
                                                                    Pexp_sequence
                                                                    expression (src/grammarFunctor.ml[773,20453+6]..[773,20453+39])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[773,20453+6]..[773,20453+39]) ghost
Pexp_ident "Array.set" (src/grammarFunctor.ml[773,20453+6]..[773,20453+39]) ghost
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[773,20453+6]..[773,20453+13])
    Pexp_ident "actions" (src/grammarFunctor.ml[773,20453+6]..[773,20453+13])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[773,20453+15]..[773,20453+16])
    Pexp_ident "k" (src/grammarFunctor.ml[773,20453+15]..[773,20453+16])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[773,20453+21]..[773,20453+39])
    Pexp_construct "Some" (src/grammarFunctor.ml[773,20453+21]..[773,20453+25])
    Some
      expression (src/grammarFunctor.ml[773,20453+26]..[773,20453+39])
        Pexp_field
        expression (src/grammarFunctor.ml[773,20453+26]..[773,20453+32])
          Pexp_ident "branch" (src/grammarFunctor.ml[773,20453+26]..[773,20453+32])
        "action" (src/grammarFunctor.ml[773,20453+33]..[773,20453+39])
                                                                      ]
                                                                    expression (src/grammarFunctor.ml[774,20494+6]..[780,20828+9])
                                                                      Pexp_sequence
                                                                      expression (src/grammarFunctor.ml[774,20494+6]..[774,20494+67])
Pexp_apply
expression (src/grammarFunctor.ml[774,20494+6]..[774,20494+67]) ghost
  Pexp_ident "Array.set" (src/grammarFunctor.ml[774,20494+6]..[774,20494+67]) ghost
[
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[774,20494+6]..[774,20494+20])
      Pexp_ident "rhs_attributes" (src/grammarFunctor.ml[774,20494+6]..[774,20494+20])
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[774,20494+22]..[774,20494+23])
      Pexp_ident "k" (src/grammarFunctor.ml[774,20494+22]..[774,20494+23])
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[774,20494+28]..[774,20494+67])
      Pexp_apply
      expression (src/grammarFunctor.ml[774,20494+28]..[774,20494+37])
        Pexp_ident "Array.map" (src/grammarFunctor.ml[774,20494+28]..[774,20494+37])
      [
        <arg>
        Nolabel
          expression (src/grammarFunctor.ml[774,20494+38]..[774,20494+57])
            Pexp_ident "producer_attributes" (src/grammarFunctor.ml[774,20494+38]..[774,20494+57])
        <arg>
        Nolabel
          expression (src/grammarFunctor.ml[774,20494+58]..[774,20494+67])
            Pexp_ident "producers" (src/grammarFunctor.ml[774,20494+58]..[774,20494+67])
      ]
]
                                                                      expression (src/grammarFunctor.ml[775,20563+6]..[780,20828+9])
Pexp_sequence
expression (src/grammarFunctor.ml[775,20563+6]..[775,20563+60])
  Pexp_apply
  expression (src/grammarFunctor.ml[775,20563+6]..[775,20563+60]) ghost
    Pexp_ident "Array.set" (src/grammarFunctor.ml[775,20563+6]..[775,20563+60]) ghost
  [
    <arg>
    Nolabel
      expression (src/grammarFunctor.ml[775,20563+6]..[775,20563+22])
        Pexp_ident "production_level" (src/grammarFunctor.ml[775,20563+6]..[775,20563+22])
    <arg>
    Nolabel
      expression (src/grammarFunctor.ml[775,20563+24]..[775,20563+25])
        Pexp_ident "k" (src/grammarFunctor.ml[775,20563+24]..[775,20563+25])
    <arg>
    Nolabel
      expression (src/grammarFunctor.ml[775,20563+30]..[775,20563+60])
        Pexp_field
        expression (src/grammarFunctor.ml[775,20563+30]..[775,20563+36])
          Pexp_ident "branch" (src/grammarFunctor.ml[775,20563+30]..[775,20563+36])
        "branch_production_level" (src/grammarFunctor.ml[775,20563+37]..[775,20563+60])
  ]
expression (src/grammarFunctor.ml[776,20625+6]..[780,20828+9])
  Pexp_sequence
  expression (src/grammarFunctor.ml[776,20625+6]..[776,20625+52])
    Pexp_apply
    expression (src/grammarFunctor.ml[776,20625+6]..[776,20625+52]) ghost
      Pexp_ident "Array.set" (src/grammarFunctor.ml[776,20625+6]..[776,20625+52]) ghost
    [
      <arg>
      Nolabel
        expression (src/grammarFunctor.ml[776,20625+6]..[776,20625+15])
          Pexp_ident "prec_decl" (src/grammarFunctor.ml[776,20625+6]..[776,20625+15])
      <arg>
      Nolabel
        expression (src/grammarFunctor.ml[776,20625+17]..[776,20625+18])
          Pexp_ident "k" (src/grammarFunctor.ml[776,20625+17]..[776,20625+18])
      <arg>
      Nolabel
        expression (src/grammarFunctor.ml[776,20625+23]..[776,20625+52])
          Pexp_field
          expression (src/grammarFunctor.ml[776,20625+23]..[776,20625+29])
            Pexp_ident "branch" (src/grammarFunctor.ml[776,20625+23]..[776,20625+29])
          "branch_prec_annotation" (src/grammarFunctor.ml[776,20625+30]..[776,20625+52])
    ]
  expression (src/grammarFunctor.ml[777,20679+6]..[780,20828+9])
    Pexp_sequence
    expression (src/grammarFunctor.ml[777,20679+6]..[777,20679+49])
      Pexp_apply
      expression (src/grammarFunctor.ml[777,20679+6]..[777,20679+49]) ghost
        Pexp_ident "Array.set" (src/grammarFunctor.ml[777,20679+6]..[777,20679+49]) ghost
      [
        <arg>
        Nolabel
          expression (src/grammarFunctor.ml[777,20679+6]..[777,20679+15])
            Pexp_ident "positions" (src/grammarFunctor.ml[777,20679+6]..[777,20679+15])
        <arg>
        Nolabel
          expression (src/grammarFunctor.ml[777,20679+17]..[777,20679+18])
            Pexp_ident "k" (src/grammarFunctor.ml[777,20679+17]..[777,20679+18])
        <arg>
        Nolabel
          expression (src/grammarFunctor.ml[777,20679+23]..[777,20679+49])
            Pexp_construct "::" (src/grammarFunctor.ml[777,20679+25]..[777,20679+49]) ghost
            Some
              expression (src/grammarFunctor.ml[777,20679+25]..[777,20679+49]) ghost
                Pexp_tuple
                [
                  expression (src/grammarFunctor.ml[777,20679+25]..[777,20679+47])
                    Pexp_field
                    expression (src/grammarFunctor.ml[777,20679+25]..[777,20679+31])
                      Pexp_ident "branch" (src/grammarFunctor.ml[777,20679+25]..[777,20679+31])
                    "branch_position" (src/grammarFunctor.ml[777,20679+32]..[777,20679+47])
                  expression (src/grammarFunctor.ml[777,20679+48]..[777,20679+49]) ghost
                    Pexp_construct "[]" (src/grammarFunctor.ml[777,20679+48]..[777,20679+49]) ghost
                    None
                ]
      ]
    expression (src/grammarFunctor.ml[778,20730+6]..[780,20828+9])
      Pexp_sequence
      expression (src/grammarFunctor.ml[778,20730+6]..[779,20786+40])
        Pexp_ifthenelse
        expression (src/grammarFunctor.ml[778,20730+9]..[778,20730+50])
          Pexp_apply
          expression (src/grammarFunctor.ml[778,20730+9]..[778,20730+12])
            Pexp_ident "not" (src/grammarFunctor.ml[778,20730+9]..[778,20730+12])
          [
            <arg>
            Nolabel
              expression (src/grammarFunctor.ml[778,20730+13]..[778,20730+50])
                Pexp_apply
                expression (src/grammarFunctor.ml[778,20730+14]..[778,20730+28])
                  Pexp_ident "MArray.for_all" (src/grammarFunctor.ml[778,20730+14]..[778,20730+28])
                [
                  <arg>
                  Nolabel
                    expression (src/grammarFunctor.ml[778,20730+29]..[778,20730+45])
                      Pexp_ident "Symbol.non_error" (src/grammarFunctor.ml[778,20730+29]..[778,20730+45])
                  <arg>
                  Nolabel
                    expression (src/grammarFunctor.ml[778,20730+46]..[778,20730+49])
                      Pexp_ident "rhs" (src/grammarFunctor.ml[778,20730+46]..[778,20730+49])
                ]
          ]
        expression (src/grammarFunctor.ml[779,20786+8]..[779,20786+40])
          Pexp_apply
          expression (src/grammarFunctor.ml[779,20786+33]..[779,20786+35])
            Pexp_ident ":=" (src/grammarFunctor.ml[779,20786+33]..[779,20786+35])
          [
            <arg>
            Nolabel
              expression (src/grammarFunctor.ml[779,20786+8]..[779,20786+32])
                Pexp_ident "grammar_uses_error_token" (src/grammarFunctor.ml[779,20786+8]..[779,20786+32])
            <arg>
            Nolabel
              expression (src/grammarFunctor.ml[779,20786+36]..[779,20786+40])
                Pexp_construct "true" (src/grammarFunctor.ml[779,20786+36]..[779,20786+40])
                None
          ]
        None
      expression (src/grammarFunctor.ml[780,20828+6]..[780,20828+9])
        Pexp_apply
        expression (src/grammarFunctor.ml[780,20828+7]..[780,20828+8])
          Pexp_ident "+" (src/grammarFunctor.ml[780,20828+7]..[780,20828+8])
        [
          <arg>
          Nolabel
            expression (src/grammarFunctor.ml[780,20828+6]..[780,20828+7])
              Pexp_ident "k" (src/grammarFunctor.ml[780,20828+6]..[780,20828+7])
          <arg>
          Nolabel
            expression (src/grammarFunctor.ml[780,20828+8]..[780,20828+9])
              Pexp_constant PConst_int (1,None)
        ]
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[781,20838+6]..[781,20838+7])
                                                        Pexp_ident "k" (src/grammarFunctor.ml[781,20838+6]..[781,20838+7])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[781,20838+8]..[781,20838+16])
                                                        Pexp_ident "branches" (src/grammarFunctor.ml[781,20838+8]..[781,20838+16])
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[782,20858+4]..[783,20887+6])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[782,20858+4]..[782,20858+27])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[782,20858+4]..[782,20858+27]) ghost
                                                  Pexp_ident "Array.set" (src/grammarFunctor.ml[782,20858+4]..[782,20858+27]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[782,20858+4]..[782,20858+11])
                                                      Pexp_ident "ntprods" (src/grammarFunctor.ml[782,20858+4]..[782,20858+11])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[782,20858+13]..[782,20858+15])
                                                      Pexp_ident "nt" (src/grammarFunctor.ml[782,20858+13]..[782,20858+15])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[782,20858+20]..[782,20858+27])
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[782,20858+21]..[782,20858+22])
                                                          Pexp_ident "k" (src/grammarFunctor.ml[782,20858+21]..[782,20858+22])
                                                        expression (src/grammarFunctor.ml[782,20858+24]..[782,20858+26])
                                                          Pexp_ident "k'" (src/grammarFunctor.ml[782,20858+24]..[782,20858+26])
                                                      ]
                                                ]
                                              expression (src/grammarFunctor.ml[783,20887+4]..[783,20887+6])
                                                Pexp_ident "k'" (src/grammarFunctor.ml[783,20887+4]..[783,20887+6])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[784,20894+4]..[784,20894+17])
                                    Pexp_field
                                    expression (src/grammarFunctor.ml[784,20894+4]..[784,20894+11])
                                      Pexp_ident "grammar" (src/grammarFunctor.ml[784,20894+4]..[784,20894+11])
                                    "rules" (src/grammarFunctor.ml[784,20894+12]..[784,20894+17])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[784,20894+18]..[784,20894+23])
                                    Pexp_ident "start" (src/grammarFunctor.ml[784,20894+18]..[784,20894+23])
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[788,20999+2]..[790,21051+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[788,20999+6]..[788,20999+12])
                              Ppat_var "iternt" (src/grammarFunctor.ml[788,20999+6]..[788,20999+12])
                            expression (src/grammarFunctor.ml[788,20999+13]..[790,21051+22]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[788,20999+13]..[788,20999+15])
                                Ppat_var "nt" (src/grammarFunctor.ml[788,20999+13]..[788,20999+15])
                              expression (src/grammarFunctor.ml[788,20999+16]..[790,21051+22]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[788,20999+16]..[788,20999+17])
                                  Ppat_var "f" (src/grammarFunctor.ml[788,20999+16]..[788,20999+17])
                                expression (src/grammarFunctor.ml[789,21019+4]..[790,21051+22])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[789,21019+8]..[789,21019+13])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[789,21019+8]..[789,21019+9])
                                            Ppat_var "k" (src/grammarFunctor.ml[789,21019+8]..[789,21019+9])
                                          pattern (src/grammarFunctor.ml[789,21019+11]..[789,21019+13])
                                            Ppat_var "k'" (src/grammarFunctor.ml[789,21019+11]..[789,21019+13])
                                        ]
                                      expression (src/grammarFunctor.ml[789,21019+16]..[789,21019+28])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[789,21019+16]..[789,21019+28]) ghost
                                          Pexp_ident "Array.get" (src/grammarFunctor.ml[789,21019+16]..[789,21019+28]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[789,21019+16]..[789,21019+23])
                                              Pexp_ident "ntprods" (src/grammarFunctor.ml[789,21019+16]..[789,21019+23])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[789,21019+25]..[789,21019+27])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[789,21019+25]..[789,21019+27])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[790,21051+4]..[790,21051+22])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[790,21051+4]..[790,21051+15])
                                      Pexp_ident "Misc.iterij" (src/grammarFunctor.ml[790,21051+4]..[790,21051+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[790,21051+16]..[790,21051+17])
                                          Pexp_ident "k" (src/grammarFunctor.ml[790,21051+16]..[790,21051+17])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[790,21051+18]..[790,21051+20])
                                          Pexp_ident "k'" (src/grammarFunctor.ml[790,21051+18]..[790,21051+20])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[790,21051+21]..[790,21051+22])
                                          Pexp_ident "f" (src/grammarFunctor.ml[790,21051+21]..[790,21051+22])
                                    ]
                        ]
                      structure_item (src/grammarFunctor.ml[792,21075+2]..[794,21132+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[792,21075+6]..[792,21075+12])
                              Ppat_var "foldnt" (src/grammarFunctor.ml[792,21075+6]..[792,21075+12])
                            expression (src/grammarFunctor.ml[792,21075+13]..[794,21132+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[792,21075+13]..[792,21075+15])
                                Ppat_var "nt" (src/grammarFunctor.ml[792,21075+13]..[792,21075+15])
                              expression (src/grammarFunctor.ml[792,21075+16]..[794,21132+27]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[792,21075+16]..[792,21075+17])
                                  Ppat_var "f" (src/grammarFunctor.ml[792,21075+16]..[792,21075+17])
                                expression (src/grammarFunctor.ml[792,21075+18]..[794,21132+27]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[792,21075+18]..[792,21075+22])
                                    Ppat_var "accu" (src/grammarFunctor.ml[792,21075+18]..[792,21075+22])
                                  expression (src/grammarFunctor.ml[793,21100+4]..[794,21132+27])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[793,21100+8]..[793,21100+13])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[793,21100+8]..[793,21100+9])
                                              Ppat_var "k" (src/grammarFunctor.ml[793,21100+8]..[793,21100+9])
                                            pattern (src/grammarFunctor.ml[793,21100+11]..[793,21100+13])
                                              Ppat_var "k'" (src/grammarFunctor.ml[793,21100+11]..[793,21100+13])
                                          ]
                                        expression (src/grammarFunctor.ml[793,21100+16]..[793,21100+28])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[793,21100+16]..[793,21100+28]) ghost
                                            Pexp_ident "Array.get" (src/grammarFunctor.ml[793,21100+16]..[793,21100+28]) ghost
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[793,21100+16]..[793,21100+23])
                                                Pexp_ident "ntprods" (src/grammarFunctor.ml[793,21100+16]..[793,21100+23])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[793,21100+25]..[793,21100+27])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[793,21100+25]..[793,21100+27])
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[794,21132+4]..[794,21132+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[794,21132+4]..[794,21132+15])
                                        Pexp_ident "Misc.foldij" (src/grammarFunctor.ml[794,21132+4]..[794,21132+15])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[794,21132+16]..[794,21132+17])
                                            Pexp_ident "k" (src/grammarFunctor.ml[794,21132+16]..[794,21132+17])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[794,21132+18]..[794,21132+20])
                                            Pexp_ident "k'" (src/grammarFunctor.ml[794,21132+18]..[794,21132+20])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[794,21132+21]..[794,21132+22])
                                            Pexp_ident "f" (src/grammarFunctor.ml[794,21132+21]..[794,21132+22])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[794,21132+23]..[794,21132+27])
                                            Pexp_ident "accu" (src/grammarFunctor.ml[794,21132+23]..[794,21132+27])
                                      ]
                        ]
                      structure_item (src/grammarFunctor.ml[796,21161+2]..[798,21212+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[796,21161+6]..[796,21161+11])
                              Ppat_var "mapnt" (src/grammarFunctor.ml[796,21161+6]..[796,21161+11])
                            expression (src/grammarFunctor.ml[796,21161+12]..[798,21212+21]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[796,21161+12]..[796,21161+14])
                                Ppat_var "nt" (src/grammarFunctor.ml[796,21161+12]..[796,21161+14])
                              expression (src/grammarFunctor.ml[796,21161+15]..[798,21212+21]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[796,21161+15]..[796,21161+16])
                                  Ppat_var "f" (src/grammarFunctor.ml[796,21161+15]..[796,21161+16])
                                expression (src/grammarFunctor.ml[797,21180+4]..[798,21212+21])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[797,21180+8]..[797,21180+13])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[797,21180+8]..[797,21180+9])
                                            Ppat_var "k" (src/grammarFunctor.ml[797,21180+8]..[797,21180+9])
                                          pattern (src/grammarFunctor.ml[797,21180+11]..[797,21180+13])
                                            Ppat_var "k'" (src/grammarFunctor.ml[797,21180+11]..[797,21180+13])
                                        ]
                                      expression (src/grammarFunctor.ml[797,21180+16]..[797,21180+28])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[797,21180+16]..[797,21180+28]) ghost
                                          Pexp_ident "Array.get" (src/grammarFunctor.ml[797,21180+16]..[797,21180+28]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[797,21180+16]..[797,21180+23])
                                              Pexp_ident "ntprods" (src/grammarFunctor.ml[797,21180+16]..[797,21180+23])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[797,21180+25]..[797,21180+27])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[797,21180+25]..[797,21180+27])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[798,21212+4]..[798,21212+21])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[798,21212+4]..[798,21212+14])
                                      Pexp_ident "Misc.mapij" (src/grammarFunctor.ml[798,21212+4]..[798,21212+14])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[798,21212+15]..[798,21212+16])
                                          Pexp_ident "k" (src/grammarFunctor.ml[798,21212+15]..[798,21212+16])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[798,21212+17]..[798,21212+19])
                                          Pexp_ident "k'" (src/grammarFunctor.ml[798,21212+17]..[798,21212+19])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[798,21212+20]..[798,21212+21])
                                          Pexp_ident "f" (src/grammarFunctor.ml[798,21212+20]..[798,21212+21])
                                    ]
                        ]
                      structure_item (src/grammarFunctor.ml[800,21235+2]..[802,21297+32])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[800,21235+6]..[800,21235+17])
                              Ppat_var "foldnt_lazy" (src/grammarFunctor.ml[800,21235+6]..[800,21235+17])
                            expression (src/grammarFunctor.ml[800,21235+18]..[802,21297+32]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[800,21235+18]..[800,21235+20])
                                Ppat_var "nt" (src/grammarFunctor.ml[800,21235+18]..[800,21235+20])
                              expression (src/grammarFunctor.ml[800,21235+21]..[802,21297+32]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[800,21235+21]..[800,21235+22])
                                  Ppat_var "f" (src/grammarFunctor.ml[800,21235+21]..[800,21235+22])
                                expression (src/grammarFunctor.ml[800,21235+23]..[802,21297+32]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[800,21235+23]..[800,21235+27])
                                    Ppat_var "accu" (src/grammarFunctor.ml[800,21235+23]..[800,21235+27])
                                  expression (src/grammarFunctor.ml[801,21265+4]..[802,21297+32])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[801,21265+8]..[801,21265+13])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[801,21265+8]..[801,21265+9])
                                              Ppat_var "k" (src/grammarFunctor.ml[801,21265+8]..[801,21265+9])
                                            pattern (src/grammarFunctor.ml[801,21265+11]..[801,21265+13])
                                              Ppat_var "k'" (src/grammarFunctor.ml[801,21265+11]..[801,21265+13])
                                          ]
                                        expression (src/grammarFunctor.ml[801,21265+16]..[801,21265+28])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[801,21265+16]..[801,21265+28]) ghost
                                            Pexp_ident "Array.get" (src/grammarFunctor.ml[801,21265+16]..[801,21265+28]) ghost
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[801,21265+16]..[801,21265+23])
                                                Pexp_ident "ntprods" (src/grammarFunctor.ml[801,21265+16]..[801,21265+23])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[801,21265+25]..[801,21265+27])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[801,21265+25]..[801,21265+27])
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[802,21297+4]..[802,21297+32])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[802,21297+4]..[802,21297+20])
                                        Pexp_ident "Misc.foldij_lazy" (src/grammarFunctor.ml[802,21297+4]..[802,21297+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[802,21297+21]..[802,21297+22])
                                            Pexp_ident "k" (src/grammarFunctor.ml[802,21297+21]..[802,21297+22])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[802,21297+23]..[802,21297+25])
                                            Pexp_ident "k'" (src/grammarFunctor.ml[802,21297+23]..[802,21297+25])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[802,21297+26]..[802,21297+27])
                                            Pexp_ident "f" (src/grammarFunctor.ml[802,21297+26]..[802,21297+27])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[802,21297+28]..[802,21297+32])
                                            Pexp_ident "accu" (src/grammarFunctor.ml[802,21297+28]..[802,21297+32])
                                      ]
                        ]
                      structure_item (src/grammarFunctor.ml[806,21351+2]..[807,21368+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[806,21351+6]..[806,21351+9])
                              Ppat_var "def" (src/grammarFunctor.ml[806,21351+6]..[806,21351+9])
                            expression (src/grammarFunctor.ml[806,21351+10]..[807,21368+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[806,21351+10]..[806,21351+14])
                                Ppat_var "prod" (src/grammarFunctor.ml[806,21351+10]..[806,21351+14])
                              expression (src/grammarFunctor.ml[807,21368+4]..[807,21368+16])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[807,21368+4]..[807,21368+16]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[807,21368+4]..[807,21368+16]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[807,21368+4]..[807,21368+9])
                                      Pexp_ident "table" (src/grammarFunctor.ml[807,21368+4]..[807,21368+9])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[807,21368+11]..[807,21368+15])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[807,21368+11]..[807,21368+15])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[809,21386+2]..[811,21434+6])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[809,21386+6]..[809,21386+8])
                              Ppat_var "nt" (src/grammarFunctor.ml[809,21386+6]..[809,21386+8])
                            expression (src/grammarFunctor.ml[809,21386+9]..[811,21434+6]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[809,21386+9]..[809,21386+13])
                                Ppat_var "prod" (src/grammarFunctor.ml[809,21386+9]..[809,21386+13])
                              expression (src/grammarFunctor.ml[810,21402+4]..[811,21434+6])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[810,21402+8]..[810,21402+13])
                                      Ppat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[810,21402+8]..[810,21402+10])
                                          Ppat_var "nt" (src/grammarFunctor.ml[810,21402+8]..[810,21402+10])
                                        pattern (src/grammarFunctor.ml[810,21402+12]..[810,21402+13])
                                          Ppat_any
                                      ]
                                    expression (src/grammarFunctor.ml[810,21402+16]..[810,21402+28])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[810,21402+16]..[810,21402+28]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[810,21402+16]..[810,21402+28]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[810,21402+16]..[810,21402+21])
                                            Pexp_ident "table" (src/grammarFunctor.ml[810,21402+16]..[810,21402+21])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[810,21402+23]..[810,21402+27])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[810,21402+23]..[810,21402+27])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[811,21434+4]..[811,21434+6])
                                  Pexp_ident "nt" (src/grammarFunctor.ml[811,21434+4]..[811,21434+6])
                        ]
                      structure_item (src/grammarFunctor.ml[813,21442+2]..[815,21492+7])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[813,21442+6]..[813,21442+9])
                              Ppat_var "rhs" (src/grammarFunctor.ml[813,21442+6]..[813,21442+9])
                            expression (src/grammarFunctor.ml[813,21442+10]..[815,21492+7]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[813,21442+10]..[813,21442+14])
                                Ppat_var "prod" (src/grammarFunctor.ml[813,21442+10]..[813,21442+14])
                              expression (src/grammarFunctor.ml[814,21459+4]..[815,21492+7])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[814,21459+8]..[814,21459+14])
                                      Ppat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[814,21459+8]..[814,21459+9])
                                          Ppat_any
                                        pattern (src/grammarFunctor.ml[814,21459+11]..[814,21459+14])
                                          Ppat_var "rhs" (src/grammarFunctor.ml[814,21459+11]..[814,21459+14])
                                      ]
                                    expression (src/grammarFunctor.ml[814,21459+17]..[814,21459+29])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[814,21459+17]..[814,21459+29]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[814,21459+17]..[814,21459+29]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[814,21459+17]..[814,21459+22])
                                            Pexp_ident "table" (src/grammarFunctor.ml[814,21459+17]..[814,21459+22])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[814,21459+24]..[814,21459+28])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[814,21459+24]..[814,21459+28])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[815,21492+4]..[815,21492+7])
                                  Pexp_ident "rhs" (src/grammarFunctor.ml[815,21492+4]..[815,21492+7])
                        ]
                      structure_item (src/grammarFunctor.ml[817,21501+2]..[818,21521+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[817,21501+6]..[817,21501+12])
                              Ppat_var "length" (src/grammarFunctor.ml[817,21501+6]..[817,21501+12])
                            expression (src/grammarFunctor.ml[817,21501+13]..[818,21521+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[817,21501+13]..[817,21501+17])
                                Ppat_var "prod" (src/grammarFunctor.ml[817,21501+13]..[817,21501+17])
                              expression (src/grammarFunctor.ml[818,21521+4]..[818,21521+27])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[818,21521+4]..[818,21521+16])
                                  Pexp_ident "Array.length" (src/grammarFunctor.ml[818,21521+4]..[818,21521+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[818,21521+17]..[818,21521+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[818,21521+18]..[818,21521+21])
                                        Pexp_ident "rhs" (src/grammarFunctor.ml[818,21521+18]..[818,21521+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[818,21521+22]..[818,21521+26])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[818,21521+22]..[818,21521+26])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[820,21550+2]..[821,21575+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[820,21550+6]..[820,21550+17])
                              Ppat_var "identifiers" (src/grammarFunctor.ml[820,21550+6]..[820,21550+17])
                            expression (src/grammarFunctor.ml[820,21550+18]..[821,21575+22]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[820,21550+18]..[820,21550+22])
                                Ppat_var "prod" (src/grammarFunctor.ml[820,21550+18]..[820,21550+22])
                              expression (src/grammarFunctor.ml[821,21575+4]..[821,21575+22])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[821,21575+4]..[821,21575+22]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[821,21575+4]..[821,21575+22]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[821,21575+4]..[821,21575+15])
                                      Pexp_ident "identifiers" (src/grammarFunctor.ml[821,21575+4]..[821,21575+15])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[821,21575+17]..[821,21575+21])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[821,21575+17]..[821,21575+21])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[823,21599+2]..[824,21621+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[823,21599+6]..[823,21599+14])
                              Ppat_var "is_start" (src/grammarFunctor.ml[823,21599+6]..[823,21599+14])
                            expression (src/grammarFunctor.ml[823,21599+15]..[824,21621+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[823,21599+15]..[823,21599+19])
                                Ppat_var "prod" (src/grammarFunctor.ml[823,21599+15]..[823,21599+19])
                              expression (src/grammarFunctor.ml[824,21621+4]..[824,21621+16])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[824,21621+9]..[824,21621+10])
                                  Pexp_ident "<" (src/grammarFunctor.ml[824,21621+9]..[824,21621+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[824,21621+4]..[824,21621+8])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[824,21621+4]..[824,21621+8])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[824,21621+11]..[824,21621+16])
                                      Pexp_ident "start" (src/grammarFunctor.ml[824,21621+11]..[824,21621+16])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[826,21639+2]..[834,21814+10])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[826,21639+6]..[826,21639+14])
                              Ppat_var "classify" (src/grammarFunctor.ml[826,21639+6]..[826,21639+14])
                            expression (src/grammarFunctor.ml[826,21639+15]..[834,21814+10]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[826,21639+15]..[826,21639+19])
                                Ppat_var "prod" (src/grammarFunctor.ml[826,21639+15]..[826,21639+19])
                              expression (src/grammarFunctor.ml[827,21661+4]..[834,21814+10])
                                Pexp_ifthenelse
                                expression (src/grammarFunctor.ml[827,21661+7]..[827,21661+20])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[827,21661+7]..[827,21661+15])
                                    Pexp_ident "is_start" (src/grammarFunctor.ml[827,21661+7]..[827,21661+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[827,21661+16]..[827,21661+20])
                                        Pexp_ident "prod" (src/grammarFunctor.ml[827,21661+16]..[827,21661+20])
                                  ]
                                expression (src/grammarFunctor.ml[828,21687+6]..[832,21782+22])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[828,21687+12]..[828,21687+26])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[828,21687+12]..[828,21687+26]) ghost
                                      Pexp_ident "Array.get" (src/grammarFunctor.ml[828,21687+12]..[828,21687+26]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[828,21687+12]..[828,21687+22])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[828,21687+13]..[828,21687+16])
                                            Pexp_ident "rhs" (src/grammarFunctor.ml[828,21687+13]..[828,21687+16])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[828,21687+17]..[828,21687+21])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[828,21687+17]..[828,21687+21])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[828,21687+24]..[828,21687+25])
                                          Pexp_constant PConst_int (0,None)
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[829,21719+8]..[829,21719+19])
                                        Ppat_construct "Symbol.N" (src/grammarFunctor.ml[829,21719+8]..[829,21719+16])
                                        Some
                                          []
                                          pattern (src/grammarFunctor.ml[829,21719+17]..[829,21719+19])
                                            Ppat_var "nt" (src/grammarFunctor.ml[829,21719+17]..[829,21719+19])
                                      expression (src/grammarFunctor.ml[830,21742+10]..[830,21742+17])
                                        Pexp_construct "Some" (src/grammarFunctor.ml[830,21742+10]..[830,21742+14])
                                        Some
                                          expression (src/grammarFunctor.ml[830,21742+15]..[830,21742+17])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[830,21742+15]..[830,21742+17])
                                    <case>
                                      pattern (src/grammarFunctor.ml[831,21760+8]..[831,21760+18])
                                        Ppat_construct "Symbol.T" (src/grammarFunctor.ml[831,21760+8]..[831,21760+16])
                                        Some
                                          []
                                          pattern (src/grammarFunctor.ml[831,21760+17]..[831,21760+18])
                                            Ppat_any
                                      expression (src/grammarFunctor.ml[832,21782+10]..[832,21782+22])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[832,21782+17]..[832,21782+22])
                                          Pexp_construct "false" (src/grammarFunctor.ml[832,21782+17]..[832,21782+22])
                                          None
                                  ]
                                Some
                                  expression (src/grammarFunctor.ml[834,21814+6]..[834,21814+10])
                                    Pexp_construct "None" (src/grammarFunctor.ml[834,21814+6]..[834,21814+10])
                                    None
                        ]
                      structure_item (src/grammarFunctor.ml[836,21826+2]..[843,22006+20])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[836,21826+6]..[836,21826+12])
                              Ppat_var "action" (src/grammarFunctor.ml[836,21826+6]..[836,21826+12])
                            expression (src/grammarFunctor.ml[836,21826+13]..[843,22006+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[836,21826+13]..[836,21826+17])
                                Ppat_var "prod" (src/grammarFunctor.ml[836,21826+13]..[836,21826+17])
                              expression (src/grammarFunctor.ml[837,21846+4]..[843,22006+20])
                                Pexp_match
                                expression (src/grammarFunctor.ml[837,21846+10]..[837,21846+24])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[837,21846+10]..[837,21846+24]) ghost
                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[837,21846+10]..[837,21846+24]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[837,21846+10]..[837,21846+17])
                                        Pexp_ident "actions" (src/grammarFunctor.ml[837,21846+10]..[837,21846+17])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[837,21846+19]..[837,21846+23])
                                        Pexp_ident "prod" (src/grammarFunctor.ml[837,21846+19]..[837,21846+23])
                                  ]
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[838,21876+6]..[838,21876+17])
                                      Ppat_construct "Some" (src/grammarFunctor.ml[838,21876+6]..[838,21876+10])
                                      Some
                                        []
                                        pattern (src/grammarFunctor.ml[838,21876+11]..[838,21876+17])
                                          Ppat_var "action" (src/grammarFunctor.ml[838,21876+11]..[838,21876+17])
                                    expression (src/grammarFunctor.ml[839,21897+8]..[839,21897+14])
                                      Pexp_ident "action" (src/grammarFunctor.ml[839,21897+8]..[839,21897+14])
                                  <case>
                                    pattern (src/grammarFunctor.ml[840,21912+6]..[840,21912+10])
                                      Ppat_construct "None" (src/grammarFunctor.ml[840,21912+6]..[840,21912+10])
                                      None
                                    expression (src/grammarFunctor.ml[842,21974+8]..[843,22006+20])
                                      Pexp_sequence
                                      expression (src/grammarFunctor.ml[842,21974+8]..[842,21974+30])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[842,21974+15]..[842,21974+30])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[842,21974+16]..[842,21974+24])
                                            Pexp_ident "is_start" (src/grammarFunctor.ml[842,21974+16]..[842,21974+24])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[842,21974+25]..[842,21974+29])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[842,21974+25]..[842,21974+29])
                                          ]
                                      expression (src/grammarFunctor.ml[843,22006+8]..[843,22006+20])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[843,22006+15]..[843,22006+20])
                                          Pexp_construct "false" (src/grammarFunctor.ml[843,22006+15]..[843,22006+20])
                                          None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[845,22028+2]..[846,22051+20])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[845,22028+6]..[845,22028+15])
                              Ppat_var "positions" (src/grammarFunctor.ml[845,22028+6]..[845,22028+15])
                            expression (src/grammarFunctor.ml[845,22028+16]..[846,22051+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[845,22028+16]..[845,22028+20])
                                Ppat_var "prod" (src/grammarFunctor.ml[845,22028+16]..[845,22028+20])
                              expression (src/grammarFunctor.ml[846,22051+4]..[846,22051+20])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[846,22051+4]..[846,22051+20]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[846,22051+4]..[846,22051+20]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[846,22051+4]..[846,22051+13])
                                      Pexp_ident "positions" (src/grammarFunctor.ml[846,22051+4]..[846,22051+13])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[846,22051+15]..[846,22051+19])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[846,22051+15]..[846,22051+19])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[848,22073+2]..[849,22101+36])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[848,22073+6]..[848,22073+20])
                              Ppat_var "lhs_attributes" (src/grammarFunctor.ml[848,22073+6]..[848,22073+20])
                            expression (src/grammarFunctor.ml[848,22073+21]..[849,22101+36]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[848,22073+21]..[848,22073+25])
                                Ppat_var "prod" (src/grammarFunctor.ml[848,22073+21]..[848,22073+25])
                              expression (src/grammarFunctor.ml[849,22101+4]..[849,22101+36])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[849,22101+4]..[849,22101+26])
                                  Pexp_ident "Nonterminal.attributes" (src/grammarFunctor.ml[849,22101+4]..[849,22101+26])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[849,22101+27]..[849,22101+36])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[849,22101+28]..[849,22101+30])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[849,22101+28]..[849,22101+30])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[849,22101+31]..[849,22101+35])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[849,22101+31]..[849,22101+35])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[851,22139+2]..[852,22167+25])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[851,22139+6]..[851,22139+20])
                              Ppat_var "rhs_attributes" (src/grammarFunctor.ml[851,22139+6]..[851,22139+20])
                            expression (src/grammarFunctor.ml[851,22139+21]..[852,22167+25]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[851,22139+21]..[851,22139+25])
                                Ppat_var "prod" (src/grammarFunctor.ml[851,22139+21]..[851,22139+25])
                              expression (src/grammarFunctor.ml[852,22167+4]..[852,22167+25])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[852,22167+4]..[852,22167+25]) ghost
                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[852,22167+4]..[852,22167+25]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[852,22167+4]..[852,22167+18])
                                      Pexp_ident "rhs_attributes" (src/grammarFunctor.ml[852,22167+4]..[852,22167+18])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[852,22167+20]..[852,22167+24])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[852,22167+20]..[852,22167+24])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[854,22194+2]..[858,22297+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[854,22194+6]..[854,22194+27])
                              Ppat_var "startsymbol2startprod" (src/grammarFunctor.ml[854,22194+6]..[854,22194+27])
                            expression (src/grammarFunctor.ml[854,22194+28]..[858,22297+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[854,22194+28]..[854,22194+30])
                                Ppat_var "nt" (src/grammarFunctor.ml[854,22194+28]..[854,22194+30])
                              expression (src/grammarFunctor.ml[855,22227+4]..[858,22297+18])
                                Pexp_try
                                expression (src/grammarFunctor.ml[856,22235+6]..[856,22235+39])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[856,22235+6]..[856,22235+25])
                                    Pexp_ident "NonterminalMap.find" (src/grammarFunctor.ml[856,22235+6]..[856,22235+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[856,22235+26]..[856,22235+28])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[856,22235+26]..[856,22235+28])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[856,22235+29]..[856,22235+39])
                                        Pexp_ident "startprods" (src/grammarFunctor.ml[856,22235+29]..[856,22235+39])
                                  ]
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[857,22275+9]..[857,22275+18])
                                      Ppat_construct "Not_found" (src/grammarFunctor.ml[857,22275+9]..[857,22275+18])
                                      None
                                    expression (src/grammarFunctor.ml[858,22297+6]..[858,22297+18])
                                      Pexp_assert
                                      expression (src/grammarFunctor.ml[858,22297+13]..[858,22297+18])
                                        Pexp_construct "false" (src/grammarFunctor.ml[858,22297+13]..[858,22297+18])
                                        None
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[860,22350+2]..[861,22374+46])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[860,22350+6]..[860,22350+16])
                              Ppat_var "error_free" (src/grammarFunctor.ml[860,22350+6]..[860,22350+16])
                            expression (src/grammarFunctor.ml[860,22350+17]..[861,22374+46]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[860,22350+17]..[860,22350+21])
                                Ppat_var "prod" (src/grammarFunctor.ml[860,22350+17]..[860,22350+21])
                              expression (src/grammarFunctor.ml[861,22374+4]..[861,22374+46])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[861,22374+4]..[861,22374+18])
                                  Pexp_ident "MArray.for_all" (src/grammarFunctor.ml[861,22374+4]..[861,22374+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[861,22374+19]..[861,22374+35])
                                      Pexp_ident "Symbol.non_error" (src/grammarFunctor.ml[861,22374+19]..[861,22374+35])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[861,22374+36]..[861,22374+46])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[861,22374+37]..[861,22374+40])
                                        Pexp_ident "rhs" (src/grammarFunctor.ml[861,22374+37]..[861,22374+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[861,22374+41]..[861,22374+45])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[861,22374+41]..[861,22374+45])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[865,22442+2]..[866,22457+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[865,22442+6]..[865,22442+10])
                              Ppat_var "init" (src/grammarFunctor.ml[865,22442+6]..[865,22442+10])
                            expression (src/grammarFunctor.ml[865,22442+11]..[866,22457+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[865,22442+11]..[865,22442+12])
                                Ppat_var "f" (src/grammarFunctor.ml[865,22442+11]..[865,22442+12])
                              expression (src/grammarFunctor.ml[866,22457+4]..[866,22457+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[866,22457+4]..[866,22457+14])
                                  Pexp_ident "Array.init" (src/grammarFunctor.ml[866,22457+4]..[866,22457+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[866,22457+15]..[866,22457+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[866,22457+15]..[866,22457+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[866,22457+17]..[866,22457+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[866,22457+17]..[866,22457+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[868,22477+2]..[869,22492+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[868,22477+6]..[868,22477+10])
                              Ppat_var "iter" (src/grammarFunctor.ml[868,22477+6]..[868,22477+10])
                            expression (src/grammarFunctor.ml[868,22477+11]..[869,22492+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[868,22477+11]..[868,22477+12])
                                Ppat_var "f" (src/grammarFunctor.ml[868,22477+11]..[868,22477+12])
                              expression (src/grammarFunctor.ml[869,22492+4]..[869,22492+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[869,22492+4]..[869,22492+14])
                                  Pexp_ident "Misc.iteri" (src/grammarFunctor.ml[869,22492+4]..[869,22492+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[869,22492+15]..[869,22492+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[869,22492+15]..[869,22492+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[869,22492+17]..[869,22492+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[869,22492+17]..[869,22492+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[871,22512+2]..[872,22532+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[871,22512+6]..[871,22512+10])
                              Ppat_var "fold" (src/grammarFunctor.ml[871,22512+6]..[871,22512+10])
                            expression (src/grammarFunctor.ml[871,22512+11]..[872,22532+23]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[871,22512+11]..[871,22512+12])
                                Ppat_var "f" (src/grammarFunctor.ml[871,22512+11]..[871,22512+12])
                              expression (src/grammarFunctor.ml[871,22512+13]..[872,22532+23]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[871,22512+13]..[871,22512+17])
                                  Ppat_var "accu" (src/grammarFunctor.ml[871,22512+13]..[871,22512+17])
                                expression (src/grammarFunctor.ml[872,22532+4]..[872,22532+23])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[872,22532+4]..[872,22532+14])
                                    Pexp_ident "Misc.foldi" (src/grammarFunctor.ml[872,22532+4]..[872,22532+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[872,22532+15]..[872,22532+16])
                                        Pexp_ident "n" (src/grammarFunctor.ml[872,22532+15]..[872,22532+16])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[872,22532+17]..[872,22532+18])
                                        Pexp_ident "f" (src/grammarFunctor.ml[872,22532+17]..[872,22532+18])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[872,22532+19]..[872,22532+23])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[872,22532+19]..[872,22532+23])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[874,22557+2]..[875,22571+17])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[874,22557+6]..[874,22557+9])
                              Ppat_var "map" (src/grammarFunctor.ml[874,22557+6]..[874,22557+9])
                            expression (src/grammarFunctor.ml[874,22557+10]..[875,22571+17]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[874,22557+10]..[874,22557+11])
                                Ppat_var "f" (src/grammarFunctor.ml[874,22557+10]..[874,22557+11])
                              expression (src/grammarFunctor.ml[875,22571+4]..[875,22571+17])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[875,22571+4]..[875,22571+13])
                                  Pexp_ident "Misc.mapi" (src/grammarFunctor.ml[875,22571+4]..[875,22571+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[875,22571+14]..[875,22571+15])
                                      Pexp_ident "n" (src/grammarFunctor.ml[875,22571+14]..[875,22571+15])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[875,22571+16]..[875,22571+17])
                                      Pexp_ident "f" (src/grammarFunctor.ml[875,22571+16]..[875,22571+17])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[877,22590+2]..[878,22605+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[877,22590+6]..[877,22590+10])
                              Ppat_var "amap" (src/grammarFunctor.ml[877,22590+6]..[877,22590+10])
                            expression (src/grammarFunctor.ml[877,22590+11]..[878,22605+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[877,22590+11]..[877,22590+12])
                                Ppat_var "f" (src/grammarFunctor.ml[877,22590+11]..[877,22590+12])
                              expression (src/grammarFunctor.ml[878,22605+4]..[878,22605+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[878,22605+4]..[878,22605+14])
                                  Pexp_ident "Array.init" (src/grammarFunctor.ml[878,22605+4]..[878,22605+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[878,22605+15]..[878,22605+16])
                                      Pexp_ident "n" (src/grammarFunctor.ml[878,22605+15]..[878,22605+16])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[878,22605+17]..[878,22605+18])
                                      Pexp_ident "f" (src/grammarFunctor.ml[878,22605+17]..[878,22605+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[880,22625+2]..[883,22687+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[880,22625+6]..[880,22625+11])
                              Ppat_var "iterx" (src/grammarFunctor.ml[880,22625+6]..[880,22625+11])
                            expression (src/grammarFunctor.ml[880,22625+12]..[883,22687+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[880,22625+12]..[880,22625+13])
                                Ppat_var "f" (src/grammarFunctor.ml[880,22625+12]..[880,22625+13])
                              expression (src/grammarFunctor.ml[881,22641+4]..[883,22687+8])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[881,22641+8]..[881,22641+12])
                                  Ppat_var "prod" (src/grammarFunctor.ml[881,22641+8]..[881,22641+12])
                                expression (src/grammarFunctor.ml[881,22641+15]..[881,22641+20])
                                  Pexp_ident "start" (src/grammarFunctor.ml[881,22641+15]..[881,22641+20])
                                expression (src/grammarFunctor.ml[881,22641+24]..[881,22641+29])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[881,22641+26]..[881,22641+27])
                                    Pexp_ident "-" (src/grammarFunctor.ml[881,22641+26]..[881,22641+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[881,22641+24]..[881,22641+25])
                                        Pexp_ident "n" (src/grammarFunctor.ml[881,22641+24]..[881,22641+25])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[881,22641+28]..[881,22641+29])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                                expression (src/grammarFunctor.ml[882,22674+6]..[882,22674+12])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[882,22674+6]..[882,22674+7])
                                    Pexp_ident "f" (src/grammarFunctor.ml[882,22674+6]..[882,22674+7])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[882,22674+8]..[882,22674+12])
                                        Pexp_ident "prod" (src/grammarFunctor.ml[882,22674+8]..[882,22674+12])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[885,22697+2]..[886,22718+30])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[885,22697+6]..[885,22697+11])
                              Ppat_var "foldx" (src/grammarFunctor.ml[885,22697+6]..[885,22697+11])
                            expression (src/grammarFunctor.ml[885,22697+12]..[886,22718+30]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[885,22697+12]..[885,22697+13])
                                Ppat_var "f" (src/grammarFunctor.ml[885,22697+12]..[885,22697+13])
                              expression (src/grammarFunctor.ml[885,22697+14]..[886,22718+30]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[885,22697+14]..[885,22697+18])
                                  Ppat_var "accu" (src/grammarFunctor.ml[885,22697+14]..[885,22697+18])
                                expression (src/grammarFunctor.ml[886,22718+4]..[886,22718+30])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[886,22718+4]..[886,22718+15])
                                    Pexp_ident "Misc.foldij" (src/grammarFunctor.ml[886,22718+4]..[886,22718+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[886,22718+16]..[886,22718+21])
                                        Pexp_ident "start" (src/grammarFunctor.ml[886,22718+16]..[886,22718+21])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[886,22718+22]..[886,22718+23])
                                        Pexp_ident "n" (src/grammarFunctor.ml[886,22718+22]..[886,22718+23])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[886,22718+24]..[886,22718+25])
                                        Pexp_ident "f" (src/grammarFunctor.ml[886,22718+24]..[886,22718+25])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[886,22718+26]..[886,22718+30])
                                        Pexp_ident "accu" (src/grammarFunctor.ml[886,22718+26]..[886,22718+30])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[888,22750+2]..[889,22765+24])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[888,22750+6]..[888,22750+10])
                              Ppat_var "mapx" (src/grammarFunctor.ml[888,22750+6]..[888,22750+10])
                            expression (src/grammarFunctor.ml[888,22750+11]..[889,22765+24]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[888,22750+11]..[888,22750+12])
                                Ppat_var "f" (src/grammarFunctor.ml[888,22750+11]..[888,22750+12])
                              expression (src/grammarFunctor.ml[889,22765+4]..[889,22765+24])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[889,22765+4]..[889,22765+14])
                                  Pexp_ident "Misc.mapij" (src/grammarFunctor.ml[889,22765+4]..[889,22765+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[889,22765+15]..[889,22765+20])
                                      Pexp_ident "start" (src/grammarFunctor.ml[889,22765+15]..[889,22765+20])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[889,22765+21]..[889,22765+22])
                                      Pexp_ident "n" (src/grammarFunctor.ml[889,22765+21]..[889,22765+22])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[889,22765+23]..[889,22765+24])
                                      Pexp_ident "f" (src/grammarFunctor.ml[889,22765+23]..[889,22765+24])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[893,22823+2]..[900,23056+83])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[893,22823+6]..[893,22823+11])
                              Ppat_var "print" (src/grammarFunctor.ml[893,22823+6]..[893,22823+11])
                            expression (src/grammarFunctor.ml[893,22823+12]..[900,23056+83]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[893,22823+12]..[893,22823+16])
                                Ppat_var "prod" (src/grammarFunctor.ml[893,22823+12]..[893,22823+16])
                              expression (src/grammarFunctor.ml[894,22842+4]..[900,23056+83])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[894,22842+4]..[894,22842+32])
                                  Pexp_assert
                                  expression (src/grammarFunctor.ml[894,22842+11]..[894,22842+32])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[894,22842+12]..[894,22842+15])
                                      Pexp_ident "not" (src/grammarFunctor.ml[894,22842+12]..[894,22842+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[894,22842+16]..[894,22842+31])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[894,22842+17]..[894,22842+25])
                                            Pexp_ident "is_start" (src/grammarFunctor.ml[894,22842+17]..[894,22842+25])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[894,22842+26]..[894,22842+30])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[894,22842+26]..[894,22842+30])
                                          ]
                                    ]
                                expression (src/grammarFunctor.ml[895,22876+4]..[900,23056+83])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[895,22876+8]..[895,22876+15])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[895,22876+8]..[895,22876+10])
                                            Ppat_var "nt" (src/grammarFunctor.ml[895,22876+8]..[895,22876+10])
                                          pattern (src/grammarFunctor.ml[895,22876+12]..[895,22876+15])
                                            Ppat_var "rhs" (src/grammarFunctor.ml[895,22876+12]..[895,22876+15])
                                        ]
                                      expression (src/grammarFunctor.ml[895,22876+18]..[895,22876+30])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[895,22876+18]..[895,22876+30]) ghost
                                          Pexp_ident "Array.get" (src/grammarFunctor.ml[895,22876+18]..[895,22876+30]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[895,22876+18]..[895,22876+23])
                                              Pexp_ident "table" (src/grammarFunctor.ml[895,22876+18]..[895,22876+23])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[895,22876+25]..[895,22876+29])
                                              Pexp_ident "prod" (src/grammarFunctor.ml[895,22876+25]..[895,22876+29])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[896,22910+4]..[900,23056+83])
                                    Pexp_ifthenelse
                                    expression (src/grammarFunctor.ml[896,22910+7]..[896,22910+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[896,22910+24]..[896,22910+25])
                                        Pexp_ident "=" (src/grammarFunctor.ml[896,22910+24]..[896,22910+25])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[896,22910+7]..[896,22910+23])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[896,22910+7]..[896,22910+19])
                                              Pexp_ident "Array.length" (src/grammarFunctor.ml[896,22910+7]..[896,22910+19])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[896,22910+20]..[896,22910+23])
                                                  Pexp_ident "rhs" (src/grammarFunctor.ml[896,22910+20]..[896,22910+23])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[896,22910+26]..[896,22910+27])
                                            Pexp_constant PConst_int (0,None)
                                      ]
                                    expression (src/grammarFunctor.ml[898,22989+6]..[898,22989+57])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[898,22989+6]..[898,22989+20])
                                        Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[898,22989+6]..[898,22989+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[898,22989+21]..[898,22989+28])
                                            Pexp_constant PConst_string("%s ->",(src/grammarFunctor.ml[898,22989+22]..[898,22989+27]),None)
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[898,22989+29]..[898,22989+57])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[898,22989+30]..[898,22989+47])
                                              Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[898,22989+30]..[898,22989+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[898,22989+48]..[898,22989+53])
                                                  Pexp_construct "false" (src/grammarFunctor.ml[898,22989+48]..[898,22989+53])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[898,22989+54]..[898,22989+56])
                                                  Pexp_ident "nt" (src/grammarFunctor.ml[898,22989+54]..[898,22989+56])
                                            ]
                                      ]
                                    Some
                                      expression (src/grammarFunctor.ml[900,23056+6]..[900,23056+83])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[900,23056+6]..[900,23056+20])
                                          Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[900,23056+6]..[900,23056+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[900,23056+21]..[900,23056+31])
                                              Pexp_constant PConst_string("%s -> %s",(src/grammarFunctor.ml[900,23056+22]..[900,23056+30]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[900,23056+32]..[900,23056+60])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[900,23056+33]..[900,23056+50])
                                                Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[900,23056+33]..[900,23056+50])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[900,23056+51]..[900,23056+56])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[900,23056+51]..[900,23056+56])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[900,23056+57]..[900,23056+59])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[900,23056+57]..[900,23056+59])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[900,23056+61]..[900,23056+83])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[900,23056+62]..[900,23056+76])
                                                Pexp_ident "Symbol.printao" (src/grammarFunctor.ml[900,23056+62]..[900,23056+76])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[900,23056+77]..[900,23056+78])
                                                    Pexp_constant PConst_int (0,None)
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[900,23056+79]..[900,23056+82])
                                                    Pexp_ident "rhs" (src/grammarFunctor.ml[900,23056+79]..[900,23056+82])
                                              ]
                                        ]
                        ]
                      structure_item (src/grammarFunctor.ml[902,23141+2]..[909,23410+66])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[902,23141+6]..[902,23141+14])
                              Ppat_var "describe" (src/grammarFunctor.ml[902,23141+6]..[902,23141+14])
                            expression (src/grammarFunctor.ml[902,23141+15]..[909,23410+66]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[902,23141+15]..[902,23141+21])
                                Ppat_var "gerund" (src/grammarFunctor.ml[902,23141+15]..[902,23141+21])
                              expression (src/grammarFunctor.ml[902,23141+22]..[909,23410+66]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[902,23141+22]..[902,23141+26])
                                  Ppat_var "prod" (src/grammarFunctor.ml[902,23141+22]..[902,23141+26])
                                expression (src/grammarFunctor.ml[903,23170+4]..[909,23410+66])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[903,23170+10]..[903,23170+23])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[903,23170+10]..[903,23170+18])
                                      Pexp_ident "classify" (src/grammarFunctor.ml[903,23170+10]..[903,23170+18])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[903,23170+19]..[903,23170+23])
                                          Pexp_ident "prod" (src/grammarFunctor.ml[903,23170+19]..[903,23170+23])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[904,23199+6]..[904,23199+13])
                                        Ppat_construct "Some" (src/grammarFunctor.ml[904,23199+6]..[904,23199+10])
                                        Some
                                          []
                                          pattern (src/grammarFunctor.ml[904,23199+11]..[904,23199+13])
                                            Ppat_var "nt" (src/grammarFunctor.ml[904,23199+11]..[904,23199+13])
                                      expression (src/grammarFunctor.ml[905,23216+8]..[906,23269+72])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[905,23216+12]..[905,23216+18])
                                              Ppat_var "ending" (src/grammarFunctor.ml[905,23216+12]..[905,23216+18])
                                            expression (src/grammarFunctor.ml[905,23216+21]..[905,23216+49])
                                              Pexp_ifthenelse
                                              expression (src/grammarFunctor.ml[905,23216+24]..[905,23216+30])
                                                Pexp_ident "gerund" (src/grammarFunctor.ml[905,23216+24]..[905,23216+30])
                                              expression (src/grammarFunctor.ml[905,23216+36]..[905,23216+41])
                                                Pexp_constant PConst_string("ing",(src/grammarFunctor.ml[905,23216+37]..[905,23216+40]),None)
                                              Some
                                                expression (src/grammarFunctor.ml[905,23216+47]..[905,23216+49])
                                                  Pexp_constant PConst_string("",(src/grammarFunctor.ml[905,23216+48]..[905,23216+48]),None)
                                        ]
                                        expression (src/grammarFunctor.ml[906,23269+8]..[906,23269+72])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[906,23269+8]..[906,23269+22])
                                            Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[906,23269+8]..[906,23269+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[906,23269+23]..[906,23269+36])
                                                Pexp_constant PConst_string("accept%s %s",(src/grammarFunctor.ml[906,23269+24]..[906,23269+35]),None)
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[906,23269+37]..[906,23269+43])
                                                Pexp_ident "ending" (src/grammarFunctor.ml[906,23269+37]..[906,23269+43])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[906,23269+44]..[906,23269+72])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[906,23269+45]..[906,23269+62])
                                                  Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[906,23269+45]..[906,23269+62])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[906,23269+63]..[906,23269+68])
                                                      Pexp_construct "false" (src/grammarFunctor.ml[906,23269+63]..[906,23269+68])
                                                      None
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[906,23269+69]..[906,23269+71])
                                                      Pexp_ident "nt" (src/grammarFunctor.ml[906,23269+69]..[906,23269+71])
                                                ]
                                          ]
                                    <case>
                                      pattern (src/grammarFunctor.ml[907,23342+6]..[907,23342+10])
                                        Ppat_construct "None" (src/grammarFunctor.ml[907,23342+6]..[907,23342+10])
                                        None
                                      expression (src/grammarFunctor.ml[908,23356+8]..[909,23410+66])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[908,23356+12]..[908,23356+18])
                                              Ppat_var "ending" (src/grammarFunctor.ml[908,23356+12]..[908,23356+18])
                                            expression (src/grammarFunctor.ml[908,23356+21]..[908,23356+50])
                                              Pexp_ifthenelse
                                              expression (src/grammarFunctor.ml[908,23356+24]..[908,23356+30])
                                                Pexp_ident "gerund" (src/grammarFunctor.ml[908,23356+24]..[908,23356+30])
                                              expression (src/grammarFunctor.ml[908,23356+36]..[908,23356+41])
                                                Pexp_constant PConst_string("ing",(src/grammarFunctor.ml[908,23356+37]..[908,23356+40]),None)
                                              Some
                                                expression (src/grammarFunctor.ml[908,23356+47]..[908,23356+50])
                                                  Pexp_constant PConst_string("e",(src/grammarFunctor.ml[908,23356+48]..[908,23356+49]),None)
                                        ]
                                        expression (src/grammarFunctor.ml[909,23410+8]..[909,23410+66])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[909,23410+8]..[909,23410+22])
                                            Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[909,23410+8]..[909,23410+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[909,23410+23]..[909,23410+46])
                                                Pexp_constant PConst_string("reduc%s production %s",(src/grammarFunctor.ml[909,23410+24]..[909,23410+45]),None)
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[909,23410+47]..[909,23410+53])
                                                Pexp_ident "ending" (src/grammarFunctor.ml[909,23410+47]..[909,23410+53])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[909,23410+54]..[909,23410+66])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[909,23410+55]..[909,23410+60])
                                                  Pexp_ident "print" (src/grammarFunctor.ml[909,23410+55]..[909,23410+60])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[909,23410+61]..[909,23410+65])
                                                      Pexp_ident "prod" (src/grammarFunctor.ml[909,23410+61]..[909,23410+65])
                                                ]
                                          ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[913,23507+2]..[914,23526+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[913,23507+6]..[913,23507+14])
                              Ppat_var "tabulate" (src/grammarFunctor.ml[913,23507+6]..[913,23507+14])
                            expression (src/grammarFunctor.ml[913,23507+15]..[914,23526+21]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[913,23507+15]..[913,23507+16])
                                Ppat_var "f" (src/grammarFunctor.ml[913,23507+15]..[913,23507+16])
                              expression (src/grammarFunctor.ml[914,23526+4]..[914,23526+21])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[914,23526+4]..[914,23526+17])
                                  Pexp_ident "Misc.tabulate" (src/grammarFunctor.ml[914,23526+4]..[914,23526+17])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[914,23526+18]..[914,23526+19])
                                      Pexp_ident "n" (src/grammarFunctor.ml[914,23526+18]..[914,23526+19])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[914,23526+20]..[914,23526+21])
                                      Pexp_ident "f" (src/grammarFunctor.ml[914,23526+20]..[914,23526+21])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[916,23549+2]..[917,23563+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[916,23549+6]..[916,23549+9])
                              Ppat_var "sum" (src/grammarFunctor.ml[916,23549+6]..[916,23549+9])
                            expression (src/grammarFunctor.ml[916,23549+10]..[917,23563+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[916,23549+10]..[916,23549+11])
                                Ppat_var "f" (src/grammarFunctor.ml[916,23549+10]..[916,23549+11])
                              expression (src/grammarFunctor.ml[917,23563+4]..[917,23563+16])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[917,23563+4]..[917,23563+12])
                                  Pexp_ident "Misc.sum" (src/grammarFunctor.ml[917,23563+4]..[917,23563+12])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[917,23563+13]..[917,23563+14])
                                      Pexp_ident "n" (src/grammarFunctor.ml[917,23563+13]..[917,23563+14])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[917,23563+15]..[917,23563+16])
                                      Pexp_ident "f" (src/grammarFunctor.ml[917,23563+15]..[917,23563+16])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[930,24166+2]..[932,24291+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[930,24166+6]..[930,24166+17])
                              Ppat_var "ever_useful" (src/grammarFunctor.ml[930,24166+6]..[930,24166+17])
                            core_type (src/grammarFunctor.ml[930,24166+20]..[930,24166+49])
                              Ptyp_constr "Hashtbl.t" (src/grammarFunctor.ml[930,24166+40]..[930,24166+49])
                              [
                                core_type (src/grammarFunctor.ml[930,24166+21]..[930,24166+32])
                                  Ptyp_constr "Positions.t" (src/grammarFunctor.ml[930,24166+21]..[930,24166+32])
                                  []
                                core_type (src/grammarFunctor.ml[930,24166+34]..[930,24166+38])
                                  Ptyp_constr "unit" (src/grammarFunctor.ml[930,24166+34]..[930,24166+38])
                                  []
                              ]
                            expression (src/grammarFunctor.ml[932,24291+4]..[932,24291+21])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[932,24291+4]..[932,24291+18])
                                Pexp_ident "Hashtbl.create" (src/grammarFunctor.ml[932,24291+4]..[932,24291+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[932,24291+19]..[932,24291+21])
                                    Pexp_constant PConst_int (16,None)
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[934,24314+2]..[943,24577+8])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[934,24314+6]..[934,24314+23])
                              Ppat_var "consult_prec_decl" (src/grammarFunctor.ml[934,24314+6]..[934,24314+23])
                            expression (src/grammarFunctor.ml[934,24314+24]..[943,24577+8]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[934,24314+24]..[934,24314+28])
                                Ppat_var "prod" (src/grammarFunctor.ml[934,24314+24]..[934,24314+28])
                              expression (src/grammarFunctor.ml[935,24345+4]..[943,24577+8])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[935,24345+8]..[935,24345+12])
                                      Ppat_var "osym" (src/grammarFunctor.ml[935,24345+8]..[935,24345+12])
                                    expression (src/grammarFunctor.ml[935,24345+15]..[935,24345+31])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[935,24345+15]..[935,24345+31]) ghost
                                        Pexp_ident "Array.get" (src/grammarFunctor.ml[935,24345+15]..[935,24345+31]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[935,24345+15]..[935,24345+24])
                                            Pexp_ident "prec_decl" (src/grammarFunctor.ml[935,24345+15]..[935,24345+24])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[935,24345+26]..[935,24345+30])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[935,24345+26]..[935,24345+30])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[936,24380+4]..[943,24577+8])
                                  Pexp_tuple
                                  [
                                    expression (src/grammarFunctor.ml[936,24380+4]..[942,24570+5])
                                      Pexp_lazy
                                      expression (src/grammarFunctor.ml[936,24380+9]..[942,24570+5])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[937,24391+6]..[937,24391+17])
                                          Pexp_ident "Option.iter" (src/grammarFunctor.ml[937,24391+6]..[937,24391+17])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[937,24391+18]..[941,24557+7])
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/grammarFunctor.ml[937,24391+23]..[937,24391+26])
                                                Ppat_var "sym" (src/grammarFunctor.ml[937,24391+23]..[937,24391+26])
                                              expression (src/grammarFunctor.ml[939,24474+8]..[940,24518+38])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (src/grammarFunctor.ml[939,24474+12]..[939,24474+15])
                                                      Ppat_var "pos" (src/grammarFunctor.ml[939,24474+12]..[939,24474+15])
                                                    expression (src/grammarFunctor.ml[939,24474+18]..[939,24474+40])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[939,24474+18]..[939,24474+36])
                                                        Pexp_ident "Positions.position" (src/grammarFunctor.ml[939,24474+18]..[939,24474+36])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[939,24474+37]..[939,24474+40])
                                                            Pexp_ident "sym" (src/grammarFunctor.ml[939,24474+37]..[939,24474+40])
                                                      ]
                                                ]
                                                expression (src/grammarFunctor.ml[940,24518+8]..[940,24518+38])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[940,24518+8]..[940,24518+19])
                                                    Pexp_ident "Hashtbl.add" (src/grammarFunctor.ml[940,24518+8]..[940,24518+19])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[940,24518+20]..[940,24518+31])
                                                        Pexp_ident "ever_useful" (src/grammarFunctor.ml[940,24518+20]..[940,24518+31])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[940,24518+32]..[940,24518+35])
                                                        Pexp_ident "pos" (src/grammarFunctor.ml[940,24518+32]..[940,24518+35])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[940,24518+36]..[940,24518+38])
                                                        Pexp_construct "()" (src/grammarFunctor.ml[940,24518+36]..[940,24518+38])
                                                        None
                                                  ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[941,24557+8]..[941,24557+12])
                                              Pexp_ident "osym" (src/grammarFunctor.ml[941,24557+8]..[941,24557+12])
                                        ]
                                    expression (src/grammarFunctor.ml[943,24577+4]..[943,24577+8])
                                      Pexp_ident "osym" (src/grammarFunctor.ml[943,24577+4]..[943,24577+8])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[949,24767+2]..[960,25244+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[949,24767+6]..[949,24767+17])
                              Ppat_var "diagnostics" (src/grammarFunctor.ml[949,24767+6]..[949,24767+17])
                            expression (src/grammarFunctor.ml[949,24767+18]..[960,25244+5]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[949,24767+18]..[949,24767+20])
                                Ppat_construct "()" (src/grammarFunctor.ml[949,24767+18]..[949,24767+20])
                                None
                              expression (src/grammarFunctor.ml[950,24790+4]..[960,25244+5])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[950,24790+4]..[950,24790+9])
                                  Pexp_ident "iterx" (src/grammarFunctor.ml[950,24790+4]..[950,24790+9])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[950,24790+10]..[960,25244+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[950,24790+15]..[950,24790+19])
                                        Ppat_var "prod" (src/grammarFunctor.ml[950,24790+15]..[950,24790+19])
                                      expression (src/grammarFunctor.ml[951,24813+6]..[959,25231+12])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[951,24813+10]..[951,24813+14])
                                              Ppat_var "osym" (src/grammarFunctor.ml[951,24813+10]..[951,24813+14])
                                            expression (src/grammarFunctor.ml[951,24813+17]..[951,24813+33])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[951,24813+17]..[951,24813+33]) ghost
                                                Pexp_ident "Array.get" (src/grammarFunctor.ml[951,24813+17]..[951,24813+33]) ghost
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[951,24813+17]..[951,24813+26])
                                                    Pexp_ident "prec_decl" (src/grammarFunctor.ml[951,24813+17]..[951,24813+26])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[951,24813+28]..[951,24813+32])
                                                    Pexp_ident "prod" (src/grammarFunctor.ml[951,24813+28]..[951,24813+32])
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[952,24850+6]..[959,25231+12])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[952,24850+6]..[952,24850+17])
                                            Pexp_ident "Option.iter" (src/grammarFunctor.ml[952,24850+6]..[952,24850+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[952,24850+18]..[959,25231+7])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (src/grammarFunctor.ml[952,24850+23]..[952,24850+26])
                                                  Ppat_var "sym" (src/grammarFunctor.ml[952,24850+23]..[952,24850+26])
                                                expression (src/grammarFunctor.ml[954,24944+8]..[958,25219+11])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[954,24944+12]..[954,24944+15])
                                                        Ppat_var "pos" (src/grammarFunctor.ml[954,24944+12]..[954,24944+15])
                                                      expression (src/grammarFunctor.ml[954,24944+18]..[954,24944+40])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[954,24944+18]..[954,24944+36])
                                                          Pexp_ident "Positions.position" (src/grammarFunctor.ml[954,24944+18]..[954,24944+36])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[954,24944+37]..[954,24944+40])
                                                              Pexp_ident "sym" (src/grammarFunctor.ml[954,24944+37]..[954,24944+40])
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[955,24988+8]..[958,25219+11])
                                                    Pexp_ifthenelse
                                                    expression (src/grammarFunctor.ml[955,24988+11]..[955,24988+44])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[955,24988+11]..[955,24988+14])
                                                        Pexp_ident "not" (src/grammarFunctor.ml[955,24988+11]..[955,24988+14])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[955,24988+15]..[955,24988+44])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[955,24988+16]..[955,24988+27])
                                                              Pexp_ident "Hashtbl.mem" (src/grammarFunctor.ml[955,24988+16]..[955,24988+27])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[955,24988+28]..[955,24988+39])
                                                                  Pexp_ident "ever_useful" (src/grammarFunctor.ml[955,24988+28]..[955,24988+39])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[955,24988+40]..[955,24988+43])
                                                                  Pexp_ident "pos" (src/grammarFunctor.ml[955,24988+40]..[955,24988+43])
                                                            ]
                                                      ]
                                                    expression (src/grammarFunctor.ml[955,24988+50]..[958,25219+11])
                                                      Pexp_sequence
                                                      expression (src/grammarFunctor.ml[956,25044+10]..[956,25044+80])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[956,25044+10]..[956,25044+31])
                                                          Pexp_ident "Error.grammar_warning" (src/grammarFunctor.ml[956,25044+10]..[956,25044+31])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[956,25044+32]..[956,25044+37])
                                                              Pexp_construct "::" (src/grammarFunctor.ml[956,25044+33]..[956,25044+37]) ghost
                                                              Some
                                                                expression (src/grammarFunctor.ml[956,25044+33]..[956,25044+37]) ghost
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (src/grammarFunctor.ml[956,25044+33]..[956,25044+36])
                                                                      Pexp_ident "pos" (src/grammarFunctor.ml[956,25044+33]..[956,25044+36])
                                                                    expression (src/grammarFunctor.ml[956,25044+36]..[956,25044+37]) ghost
                                                                      Pexp_construct "[]" (src/grammarFunctor.ml[956,25044+36]..[956,25044+37]) ghost
                                                                      None
                                                                  ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[956,25044+38]..[956,25044+80])
                                                              Pexp_constant PConst_string("this %%prec declaration is never useful.",(src/grammarFunctor.ml[956,25044+39]..[956,25044+79]),None)
                                                        ]
                                                      expression (src/grammarFunctor.ml[957,25126+10]..[957,25126+40])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[957,25126+10]..[957,25126+21])
                                                          Pexp_ident "Hashtbl.add" (src/grammarFunctor.ml[957,25126+10]..[957,25126+21])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[957,25126+22]..[957,25126+33])
                                                              Pexp_ident "ever_useful" (src/grammarFunctor.ml[957,25126+22]..[957,25126+33])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[957,25126+34]..[957,25126+37])
                                                              Pexp_ident "pos" (src/grammarFunctor.ml[957,25126+34]..[957,25126+37])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[957,25126+38]..[957,25126+40])
                                                              Pexp_construct "()" (src/grammarFunctor.ml[957,25126+38]..[957,25126+40])
                                                              None
                                                        ]
                                                    None
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[959,25231+8]..[959,25231+12])
                                                Pexp_ident "osym" (src/grammarFunctor.ml[959,25231+8]..[959,25231+12])
                                          ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[967,25471+2]..[970,25545+25])
                        Pstr_type Rec
                        [
                          type_declaration "production_level" (src/grammarFunctor.ml[967,25471+7]..[967,25471+23]) (src/grammarFunctor.ml[967,25471+2]..[970,25545+25])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_variant
                                [
                                  (src/grammarFunctor.ml[968,25497+4]..[968,25497+11])
                                    "PNone" (src/grammarFunctor.ml[968,25497+6]..[968,25497+11])
                                    []
                                    None
                                  (src/grammarFunctor.ml[969,25509+4]..[969,25509+35])
                                    "PRightmostToken" (src/grammarFunctor.ml[969,25509+6]..[969,25509+21])
                                    [
                                      core_type (src/grammarFunctor.ml[969,25509+25]..[969,25509+35])
                                        Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[969,25509+25]..[969,25509+35])
                                        []
                                    ]
                                    None
                                  (src/grammarFunctor.ml[970,25545+4]..[970,25545+25])
                                    "PPrecDecl" (src/grammarFunctor.ml[970,25545+6]..[970,25545+15])
                                    [
                                      core_type (src/grammarFunctor.ml[970,25545+19]..[970,25545+25])
                                        Ptyp_constr "symbol" (src/grammarFunctor.ml[970,25545+19]..[970,25545+25])
                                        []
                                    ]
                                    None
                                ]
                            ptype_private = Public
                            ptype_manifest =
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[972,25572+2]..[979,25759+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[972,25572+6]..[972,25572+24])
                              Ppat_var "rightmost_terminal" (src/grammarFunctor.ml[972,25572+6]..[972,25572+24])
                            expression (src/grammarFunctor.ml[972,25572+25]..[979,25759+22]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[972,25572+25]..[972,25572+29])
                                Ppat_var "prod" (src/grammarFunctor.ml[972,25572+25]..[972,25572+29])
                              expression (src/grammarFunctor.ml[973,25604+4]..[979,25759+22])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[973,25604+4]..[973,25604+19])
                                  Pexp_ident "Array.fold_left" (src/grammarFunctor.ml[973,25604+4]..[973,25604+19])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[973,25604+20]..[979,25759+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[973,25604+25]..[973,25604+29])
                                        Ppat_var "accu" (src/grammarFunctor.ml[973,25604+25]..[973,25604+29])
                                      expression (src/grammarFunctor.ml[973,25604+30]..[978,25744+14]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[973,25604+30]..[973,25604+36])
                                          Ppat_var "symbol" (src/grammarFunctor.ml[973,25604+30]..[973,25604+36])
                                        expression (src/grammarFunctor.ml[974,25644+6]..[978,25744+14])
                                          Pexp_match
                                          expression (src/grammarFunctor.ml[974,25644+12]..[974,25644+18])
                                            Pexp_ident "symbol" (src/grammarFunctor.ml[974,25644+12]..[974,25644+18])
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[975,25668+8]..[975,25668+20])
                                                Ppat_construct "Symbol.T" (src/grammarFunctor.ml[975,25668+8]..[975,25668+16])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[975,25668+17]..[975,25668+20])
                                                    Ppat_var "tok" (src/grammarFunctor.ml[975,25668+17]..[975,25668+20])
                                              expression (src/grammarFunctor.ml[976,25692+10]..[976,25692+29])
                                                Pexp_construct "PRightmostToken" (src/grammarFunctor.ml[976,25692+10]..[976,25692+25])
                                                Some
                                                  expression (src/grammarFunctor.ml[976,25692+26]..[976,25692+29])
                                                    Pexp_ident "tok" (src/grammarFunctor.ml[976,25692+26]..[976,25692+29])
                                            <case>
                                              pattern (src/grammarFunctor.ml[977,25722+8]..[977,25722+18])
                                                Ppat_construct "Symbol.N" (src/grammarFunctor.ml[977,25722+8]..[977,25722+16])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[977,25722+17]..[977,25722+18])
                                                    Ppat_any
                                              expression (src/grammarFunctor.ml[978,25744+10]..[978,25744+14])
                                                Pexp_ident "accu" (src/grammarFunctor.ml[978,25744+10]..[978,25744+14])
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[979,25759+6]..[979,25759+11])
                                      Pexp_construct "PNone" (src/grammarFunctor.ml[979,25759+6]..[979,25759+11])
                                      None
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[979,25759+12]..[979,25759+22])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[979,25759+13]..[979,25759+16])
                                        Pexp_ident "rhs" (src/grammarFunctor.ml[979,25759+13]..[979,25759+16])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[979,25759+17]..[979,25759+21])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[979,25759+17]..[979,25759+21])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[981,25783+2]..[982,25805+39])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[981,25783+6]..[981,25783+13])
                              Ppat_var "combine" (src/grammarFunctor.ml[981,25783+6]..[981,25783+13])
                            expression (src/grammarFunctor.ml[981,25783+14]..[982,25805+39]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[981,25783+14]..[981,25783+16])
                                Ppat_var "e1" (src/grammarFunctor.ml[981,25783+14]..[981,25783+16])
                              expression (src/grammarFunctor.ml[981,25783+17]..[982,25805+39]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[981,25783+17]..[981,25783+19])
                                  Ppat_var "e2" (src/grammarFunctor.ml[981,25783+17]..[981,25783+19])
                                expression (src/grammarFunctor.ml[982,25805+4]..[982,25805+39])
                                  Pexp_lazy
                                  expression (src/grammarFunctor.ml[982,25805+9]..[982,25805+39])
                                    Pexp_sequence
                                    expression (src/grammarFunctor.ml[982,25805+10]..[982,25805+23])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[982,25805+10]..[982,25805+20])
                                        Pexp_ident "Lazy.force" (src/grammarFunctor.ml[982,25805+10]..[982,25805+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[982,25805+21]..[982,25805+23])
                                            Pexp_ident "e1" (src/grammarFunctor.ml[982,25805+21]..[982,25805+23])
                                      ]
                                    expression (src/grammarFunctor.ml[982,25805+25]..[982,25805+38])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[982,25805+25]..[982,25805+35])
                                        Pexp_ident "Lazy.force" (src/grammarFunctor.ml[982,25805+25]..[982,25805+35])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[982,25805+36]..[982,25805+38])
                                            Pexp_ident "e2" (src/grammarFunctor.ml[982,25805+36]..[982,25805+38])
                                      ]
                        ]
                      structure_item (src/grammarFunctor.ml[984,25846+2]..[1001,26369+34])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[984,25846+6]..[984,25846+16])
                              Ppat_var "precedence" (src/grammarFunctor.ml[984,25846+6]..[984,25846+16])
                            expression (src/grammarFunctor.ml[984,25846+17]..[1001,26369+34]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[984,25846+17]..[984,25846+21])
                                Ppat_var "prod" (src/grammarFunctor.ml[984,25846+17]..[984,25846+21])
                              expression (src/grammarFunctor.ml[985,25870+4]..[1001,26369+34])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[985,25870+8]..[985,25870+24])
                                      Ppat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[985,25870+8]..[985,25870+13])
                                          Ppat_var "fact1" (src/grammarFunctor.ml[985,25870+8]..[985,25870+13])
                                        pattern (src/grammarFunctor.ml[985,25870+15]..[985,25870+24])
                                          Ppat_var "prec_decl" (src/grammarFunctor.ml[985,25870+15]..[985,25870+24])
                                      ]
                                    expression (src/grammarFunctor.ml[985,25870+27]..[985,25870+49])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[985,25870+27]..[985,25870+44])
                                        Pexp_ident "consult_prec_decl" (src/grammarFunctor.ml[985,25870+27]..[985,25870+44])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[985,25870+45]..[985,25870+49])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[985,25870+45]..[985,25870+49])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[986,25923+4]..[1001,26369+34])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[986,25923+8]..[986,25923+17])
                                        Ppat_var "oterminal" (src/grammarFunctor.ml[986,25923+8]..[986,25923+17])
                                      expression (src/grammarFunctor.ml[987,25943+6]..[991,26057+28])
                                        Pexp_match
                                        expression (src/grammarFunctor.ml[987,25943+12]..[987,25943+21])
                                          Pexp_ident "prec_decl" (src/grammarFunctor.ml[987,25943+12]..[987,25943+21])
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[988,25970+8]..[988,25970+12])
                                              Ppat_construct "None" (src/grammarFunctor.ml[988,25970+8]..[988,25970+12])
                                              None
                                            expression (src/grammarFunctor.ml[989,25986+10]..[989,25986+33])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[989,25986+10]..[989,25986+28])
                                                Pexp_ident "rightmost_terminal" (src/grammarFunctor.ml[989,25986+10]..[989,25986+28])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[989,25986+29]..[989,25986+33])
                                                    Pexp_ident "prod" (src/grammarFunctor.ml[989,25986+29]..[989,25986+33])
                                              ]
                                          <case>
                                            pattern (src/grammarFunctor.ml[990,26020+8]..[990,26020+33])
                                              Ppat_construct "Some" (src/grammarFunctor.ml[990,26020+8]..[990,26020+12])
                                              Some
                                                []
                                                pattern (src/grammarFunctor.ml[990,26020+13]..[990,26020+33])
                                                  Ppat_record Closed
                                                  [
                                                    "value" (src/grammarFunctor.ml[990,26020+15]..[990,26020+20])
                                                      pattern (src/grammarFunctor.ml[990,26020+23]..[990,26020+31])
                                                        Ppat_var "terminal" (src/grammarFunctor.ml[990,26020+23]..[990,26020+31])
                                                  ]
                                            expression (src/grammarFunctor.ml[991,26057+10]..[991,26057+28])
                                              Pexp_construct "PPrecDecl" (src/grammarFunctor.ml[991,26057+10]..[991,26057+19])
                                              Some
                                                expression (src/grammarFunctor.ml[991,26057+20]..[991,26057+28])
                                                  Pexp_ident "terminal" (src/grammarFunctor.ml[991,26057+20]..[991,26057+28])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[993,26093+4]..[1001,26369+34])
                                    Pexp_match
                                    expression (src/grammarFunctor.ml[993,26093+10]..[993,26093+19])
                                      Pexp_ident "oterminal" (src/grammarFunctor.ml[993,26093+10]..[993,26093+19])
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[994,26118+6]..[994,26118+11])
                                          Ppat_construct "PNone" (src/grammarFunctor.ml[994,26118+6]..[994,26118+11])
                                          None
                                        expression (src/grammarFunctor.ml[995,26133+8]..[995,26133+34])
                                          Pexp_tuple
                                          [
                                            expression (src/grammarFunctor.ml[995,26133+8]..[995,26133+13])
                                              Pexp_ident "fact1" (src/grammarFunctor.ml[995,26133+8]..[995,26133+13])
                                            expression (src/grammarFunctor.ml[995,26133+15]..[995,26133+34])
                                              Pexp_construct "UndefinedPrecedence" (src/grammarFunctor.ml[995,26133+15]..[995,26133+34])
                                              None
                                          ]
                                      <case>
                                        pattern (src/grammarFunctor.ml[996,26168+6]..[996,26168+25])
                                          Ppat_construct "PRightmostToken" (src/grammarFunctor.ml[996,26168+6]..[996,26168+21])
                                          Some
                                            []
                                            pattern (src/grammarFunctor.ml[996,26168+22]..[996,26168+25])
                                              Ppat_var "tok" (src/grammarFunctor.ml[996,26168+22]..[996,26168+25])
                                        expression (src/grammarFunctor.ml[997,26197+8]..[998,26257+34])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[997,26197+12]..[997,26197+24])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[997,26197+12]..[997,26197+17])
                                                    Ppat_var "fact2" (src/grammarFunctor.ml[997,26197+12]..[997,26197+17])
                                                  pattern (src/grammarFunctor.ml[997,26197+19]..[997,26197+24])
                                                    Ppat_var "level" (src/grammarFunctor.ml[997,26197+19]..[997,26197+24])
                                                ]
                                              expression (src/grammarFunctor.ml[997,26197+27]..[997,26197+56])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[997,26197+27]..[997,26197+52])
                                                  Pexp_ident "Terminal.precedence_level" (src/grammarFunctor.ml[997,26197+27]..[997,26197+52])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[997,26197+53]..[997,26197+56])
                                                      Pexp_ident "tok" (src/grammarFunctor.ml[997,26197+53]..[997,26197+56])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[998,26257+8]..[998,26257+34])
                                            Pexp_tuple
                                            [
                                              expression (src/grammarFunctor.ml[998,26257+8]..[998,26257+27])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[998,26257+8]..[998,26257+15])
                                                  Pexp_ident "combine" (src/grammarFunctor.ml[998,26257+8]..[998,26257+15])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[998,26257+16]..[998,26257+21])
                                                      Pexp_ident "fact1" (src/grammarFunctor.ml[998,26257+16]..[998,26257+21])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[998,26257+22]..[998,26257+27])
                                                      Pexp_ident "fact2" (src/grammarFunctor.ml[998,26257+22]..[998,26257+27])
                                                ]
                                              expression (src/grammarFunctor.ml[998,26257+29]..[998,26257+34])
                                                Pexp_ident "level" (src/grammarFunctor.ml[998,26257+29]..[998,26257+34])
                                            ]
                                      <case>
                                        pattern (src/grammarFunctor.ml[999,26292+6]..[999,26292+18])
                                          Ppat_construct "PPrecDecl" (src/grammarFunctor.ml[999,26292+6]..[999,26292+15])
                                          Some
                                            []
                                            pattern (src/grammarFunctor.ml[999,26292+16]..[999,26292+18])
                                              Ppat_var "id" (src/grammarFunctor.ml[999,26292+16]..[999,26292+18])
                                        expression (src/grammarFunctor.ml[1000,26314+8]..[1001,26369+34])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[1000,26314+12]..[1000,26314+24])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1000,26314+12]..[1000,26314+17])
                                                    Ppat_var "fact2" (src/grammarFunctor.ml[1000,26314+12]..[1000,26314+17])
                                                  pattern (src/grammarFunctor.ml[1000,26314+19]..[1000,26314+24])
                                                    Ppat_var "level" (src/grammarFunctor.ml[1000,26314+19]..[1000,26314+24])
                                                ]
                                              expression (src/grammarFunctor.ml[1000,26314+27]..[1000,26314+50])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1000,26314+27]..[1000,26314+47])
                                                  Pexp_ident "TokPrecedence.leveli" (src/grammarFunctor.ml[1000,26314+27]..[1000,26314+47])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1000,26314+48]..[1000,26314+50])
                                                      Pexp_ident "id" (src/grammarFunctor.ml[1000,26314+48]..[1000,26314+50])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[1001,26369+8]..[1001,26369+34])
                                            Pexp_tuple
                                            [
                                              expression (src/grammarFunctor.ml[1001,26369+8]..[1001,26369+27])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1001,26369+8]..[1001,26369+15])
                                                  Pexp_ident "combine" (src/grammarFunctor.ml[1001,26369+8]..[1001,26369+15])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1001,26369+16]..[1001,26369+21])
                                                      Pexp_ident "fact1" (src/grammarFunctor.ml[1001,26369+16]..[1001,26369+21])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1001,26369+22]..[1001,26369+27])
                                                      Pexp_ident "fact2" (src/grammarFunctor.ml[1001,26369+22]..[1001,26369+27])
                                                ]
                                              expression (src/grammarFunctor.ml[1001,26369+29]..[1001,26369+34])
                                                Pexp_ident "level" (src/grammarFunctor.ml[1001,26369+29]..[1001,26369+34])
                                            ]
                                    ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1005,26410+0]..[1006,26441+38])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1005,26410+4]..[1005,26410+28])
                      Ppat_var "grammar_uses_error_token" (src/grammarFunctor.ml[1005,26410+4]..[1005,26410+28])
                    expression (src/grammarFunctor.ml[1006,26441+2]..[1006,26441+38])
                      Pexp_apply
                      expression (src/grammarFunctor.ml[1006,26441+2]..[1006,26441+3])
                        Pexp_ident "!" (src/grammarFunctor.ml[1006,26441+2]..[1006,26441+3])
                      [
                        <arg>
                        Nolabel
                          expression (src/grammarFunctor.ml[1006,26441+3]..[1006,26441+38])
                            Pexp_ident "Production.grammar_uses_error_token" (src/grammarFunctor.ml[1006,26441+3]..[1006,26441+38])
                      ]
                ]
              structure_item (src/grammarFunctor.ml[1011,26590+0]..[1022,26799+3])
                Pstr_module
                "ProductionMap" (src/grammarFunctor.ml[1011,26590+7]..[1011,26590+20])
                  module_expr (src/grammarFunctor.ml[1011,26590+23]..[1022,26799+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1013,26621+2]..[1013,26621+22])
                        Pstr_include                        module_expr (src/grammarFunctor.ml[1013,26621+10]..[1013,26621+22])
                          Pmod_ident "Patricia.Big" (src/grammarFunctor.ml[1013,26621+10]..[1013,26621+22])
                      structure_item (src/grammarFunctor.ml[1017,26697+2]..[1020,26786+11])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1017,26697+6]..[1017,26697+11])
                              Ppat_var "start" (src/grammarFunctor.ml[1017,26697+6]..[1017,26697+11])
                            expression (src/grammarFunctor.ml[1017,26697+12]..[1020,26786+11]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1017,26697+12]..[1017,26697+13])
                                Ppat_var "f" (src/grammarFunctor.ml[1017,26697+12]..[1017,26697+13])
                              expression (src/grammarFunctor.ml[1018,26713+4]..[1020,26786+11])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1018,26713+4]..[1018,26713+14])
                                  Pexp_ident "Misc.foldi" (src/grammarFunctor.ml[1018,26713+4]..[1018,26713+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1018,26713+15]..[1018,26713+31])
                                      Pexp_ident "Production.start" (src/grammarFunctor.ml[1018,26713+15]..[1018,26713+31])
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1018,26713+32]..[1020,26786+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1018,26713+37]..[1018,26713+41])
                                        Ppat_var "prod" (src/grammarFunctor.ml[1018,26713+37]..[1018,26713+41])
                                      expression (src/grammarFunctor.ml[1018,26713+42]..[1019,26760+25]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1018,26713+42]..[1018,26713+43])
                                          Ppat_var "m" (src/grammarFunctor.ml[1018,26713+42]..[1018,26713+43])
                                        expression (src/grammarFunctor.ml[1019,26760+6]..[1019,26760+25])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1019,26760+6]..[1019,26760+9])
                                            Pexp_ident "add" (src/grammarFunctor.ml[1019,26760+6]..[1019,26760+9])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1019,26760+10]..[1019,26760+14])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[1019,26760+10]..[1019,26760+14])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1019,26760+15]..[1019,26760+23])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1019,26760+16]..[1019,26760+17])
                                                  Pexp_ident "f" (src/grammarFunctor.ml[1019,26760+16]..[1019,26760+17])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1019,26760+18]..[1019,26760+22])
                                                      Pexp_ident "prod" (src/grammarFunctor.ml[1019,26760+18]..[1019,26760+22])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1019,26760+24]..[1019,26760+25])
                                                Pexp_ident "m" (src/grammarFunctor.ml[1019,26760+24]..[1019,26760+25])
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1020,26786+6]..[1020,26786+11])
                                      Pexp_ident "empty" (src/grammarFunctor.ml[1020,26786+6]..[1020,26786+11])
                                ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1033,27265+0]..[1157,31358+3])
                Pstr_module
                "GenericAnalysis" (src/grammarFunctor.ml[1033,27265+7]..[1033,27265+22])
                  module_expr (src/grammarFunctor.ml[1034,27288+2]..[1157,31358+3])
                    Pmod_functor "P" (src/grammarFunctor.ml[1034,27288+3]..[1034,27288+4])
                    module_type (src/grammarFunctor.ml[1034,27288+7]..[1034,27288+19])
                      Pmty_ident "Fix.PROPERTY" (src/grammarFunctor.ml[1034,27288+7]..[1034,27288+19])
                    module_expr (src/grammarFunctor.ml[1035,27309+2]..[1157,31358+3])
                      Pmod_functor "S" (src/grammarFunctor.ml[1035,27309+3]..[1035,27309+4])
                      module_type (src/grammarFunctor.ml[1035,27309+7]..[1067,28719+5])
                        Pmty_signature
                        [
                          signature_item (src/grammarFunctor.ml[1036,27320+4]..[1036,27320+10])
                            Psig_open Fresh "P" (src/grammarFunctor.ml[1036,27320+9]..[1036,27320+10])
                          signature_item (src/grammarFunctor.ml[1042,27547+4]..[1042,27547+50])
                            Psig_value
                            value_description "shortcut" (src/grammarFunctor.ml[1042,27547+8]..[1042,27547+16]) (src/grammarFunctor.ml[1042,27547+4]..[1042,27547+50])
                              core_type (src/grammarFunctor.ml[1042,27547+18]..[1042,27547+50])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1042,27547+18]..[1042,27547+31])
                                  Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1042,27547+18]..[1042,27547+31])
                                  []
                                core_type (src/grammarFunctor.ml[1042,27547+35]..[1042,27547+50])
                                  Ptyp_constr "option" (src/grammarFunctor.ml[1042,27547+44]..[1042,27547+50])
                                  [
                                    core_type (src/grammarFunctor.ml[1042,27547+35]..[1042,27547+43])
                                      Ptyp_constr "property" (src/grammarFunctor.ml[1042,27547+35]..[1042,27547+43])
                                      []
                                  ]
                              []
                          signature_item (src/grammarFunctor.ml[1045,27658+4]..[1045,27658+40])
                            Psig_value
                            value_description "terminal" (src/grammarFunctor.ml[1045,27658+8]..[1045,27658+16]) (src/grammarFunctor.ml[1045,27658+4]..[1045,27658+40])
                              core_type (src/grammarFunctor.ml[1045,27658+18]..[1045,27658+40])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1045,27658+18]..[1045,27658+28])
                                  Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1045,27658+18]..[1045,27658+28])
                                  []
                                core_type (src/grammarFunctor.ml[1045,27658+32]..[1045,27658+40])
                                  Ptyp_constr "property" (src/grammarFunctor.ml[1045,27658+32]..[1045,27658+40])
                                  []
                              []
                          signature_item (src/grammarFunctor.ml[1051,27954+4]..[1051,27954+63])
                            Psig_value
                            value_description "disjunction" (src/grammarFunctor.ml[1051,27954+8]..[1051,27954+19]) (src/grammarFunctor.ml[1051,27954+4]..[1051,27954+63])
                              core_type (src/grammarFunctor.ml[1051,27954+21]..[1051,27954+63])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1051,27954+21]..[1051,27954+29])
                                  Ptyp_constr "property" (src/grammarFunctor.ml[1051,27954+21]..[1051,27954+29])
                                  []
                                core_type (src/grammarFunctor.ml[1051,27954+33]..[1051,27954+63])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1051,27954+34]..[1051,27954+50])
                                    Ptyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1051,27954+34]..[1051,27954+38])
                                      Ptyp_constr "unit" (src/grammarFunctor.ml[1051,27954+34]..[1051,27954+38])
                                      []
                                    core_type (src/grammarFunctor.ml[1051,27954+42]..[1051,27954+50])
                                      Ptyp_constr "property" (src/grammarFunctor.ml[1051,27954+42]..[1051,27954+50])
                                      []
                                  core_type (src/grammarFunctor.ml[1051,27954+55]..[1051,27954+63])
                                    Ptyp_constr "property" (src/grammarFunctor.ml[1051,27954+55]..[1051,27954+63])
                                    []
                              []
                          signature_item (src/grammarFunctor.ml[1061,28508+4]..[1061,28508+75])
                            Psig_value
                            value_description "conjunction" (src/grammarFunctor.ml[1061,28508+8]..[1061,28508+19]) (src/grammarFunctor.ml[1061,28508+4]..[1061,28508+75])
                              core_type (src/grammarFunctor.ml[1061,28508+21]..[1061,28508+75])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1061,28508+21]..[1061,28508+29])
                                  Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[1061,28508+21]..[1061,28508+29])
                                  []
                                core_type (src/grammarFunctor.ml[1061,28508+33]..[1061,28508+75])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1061,28508+33]..[1061,28508+41])
                                    Ptyp_constr "property" (src/grammarFunctor.ml[1061,28508+33]..[1061,28508+41])
                                    []
                                  core_type (src/grammarFunctor.ml[1061,28508+45]..[1061,28508+75])
                                    Ptyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1061,28508+46]..[1061,28508+62])
                                      Ptyp_arrow
                                      Nolabel
                                      core_type (src/grammarFunctor.ml[1061,28508+46]..[1061,28508+50])
                                        Ptyp_constr "unit" (src/grammarFunctor.ml[1061,28508+46]..[1061,28508+50])
                                        []
                                      core_type (src/grammarFunctor.ml[1061,28508+54]..[1061,28508+62])
                                        Ptyp_constr "property" (src/grammarFunctor.ml[1061,28508+54]..[1061,28508+62])
                                        []
                                    core_type (src/grammarFunctor.ml[1061,28508+67]..[1061,28508+75])
                                      Ptyp_constr "property" (src/grammarFunctor.ml[1061,28508+67]..[1061,28508+75])
                                      []
                              []
                          signature_item (src/grammarFunctor.ml[1065,28692+4]..[1065,28692+25])
                            Psig_value
                            value_description "epsilon" (src/grammarFunctor.ml[1065,28692+8]..[1065,28692+15]) (src/grammarFunctor.ml[1065,28692+4]..[1065,28692+25])
                              core_type (src/grammarFunctor.ml[1065,28692+17]..[1065,28692+25])
                                Ptyp_constr "property" (src/grammarFunctor.ml[1065,28692+17]..[1065,28692+25])
                                []
                              []
                        ]
                      module_expr (src/grammarFunctor.ml[1068,28726+0]..[1157,31358+3])
                        Pmod_constraint
                        module_expr (src/grammarFunctor.ml[1085,29293+6]..[1157,31358+3])
                          Pmod_structure
                          [
                            structure_item (src/grammarFunctor.ml[1086,29306+2]..[1086,29306+8])
                              Pstr_open Fresh
                              module_expr (src/grammarFunctor.ml[1086,29306+7]..[1086,29306+8])
                                Pmod_ident "P" (src/grammarFunctor.ml[1086,29306+7]..[1086,29306+8])
                            structure_item (src/grammarFunctor.ml[1094,29554+2]..[1100,29730+14])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1094,29554+6]..[1094,29554+12])
                                    Ppat_var "symbol" (src/grammarFunctor.ml[1094,29554+6]..[1094,29554+12])
                                  expression (src/grammarFunctor.ml[1094,29554+13]..[1100,29730+14]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1094,29554+13]..[1094,29554+16])
                                      Ppat_var "sym" (src/grammarFunctor.ml[1094,29554+13]..[1094,29554+16])
                                    expression (src/grammarFunctor.ml[1094,29554+17]..[1100,29730+14]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1094,29554+17]..[1094,29554+20])
                                        Ppat_var "get" (src/grammarFunctor.ml[1094,29554+17]..[1094,29554+20])
                                      expression (src/grammarFunctor.ml[1094,29554+21]..[1100,29730+14])
                                        Pexp_constraint
                                        expression (src/grammarFunctor.ml[1095,29588+4]..[1100,29730+14])
                                          Pexp_match
                                          expression (src/grammarFunctor.ml[1095,29588+10]..[1095,29588+13])
                                            Pexp_ident "sym" (src/grammarFunctor.ml[1095,29588+10]..[1095,29588+13])
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[1096,29607+6]..[1096,29607+18])
                                                Ppat_construct "Symbol.T" (src/grammarFunctor.ml[1096,29607+6]..[1096,29607+14])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[1096,29607+15]..[1096,29607+18])
                                                    Ppat_var "tok" (src/grammarFunctor.ml[1096,29607+15]..[1096,29607+18])
                                              expression (src/grammarFunctor.ml[1097,29629+8]..[1097,29629+22])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1097,29629+8]..[1097,29629+18])
                                                  Pexp_ident "S.terminal" (src/grammarFunctor.ml[1097,29629+8]..[1097,29629+18])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1097,29629+19]..[1097,29629+22])
                                                      Pexp_ident "tok" (src/grammarFunctor.ml[1097,29629+19]..[1097,29629+22])
                                                ]
                                            <case>
                                              pattern (src/grammarFunctor.ml[1098,29652+6]..[1098,29652+17])
                                                Ppat_construct "Symbol.N" (src/grammarFunctor.ml[1098,29652+6]..[1098,29652+14])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[1098,29652+15]..[1098,29652+17])
                                                    Ppat_var "nt" (src/grammarFunctor.ml[1098,29652+15]..[1098,29652+17])
                                              expression (src/grammarFunctor.ml[1100,29730+8]..[1100,29730+14])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1100,29730+8]..[1100,29730+11])
                                                  Pexp_ident "get" (src/grammarFunctor.ml[1100,29730+8]..[1100,29730+11])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1100,29730+12]..[1100,29730+14])
                                                      Pexp_ident "nt" (src/grammarFunctor.ml[1100,29730+12]..[1100,29730+14])
                                                ]
                                          ]
                                        core_type (src/grammarFunctor.ml[1094,29554+23]..[1094,29554+31])
                                          Ptyp_constr "property" (src/grammarFunctor.ml[1094,29554+23]..[1094,29554+31])
                                          []
                              ]
                            structure_item (src/grammarFunctor.ml[1104,29825+2]..[1120,30385+10])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1104,29825+6]..[1104,29825+16])
                                    Ppat_var "production" (src/grammarFunctor.ml[1104,29825+6]..[1104,29825+16])
                                  expression (src/grammarFunctor.ml[1104,29825+17]..[1120,30385+10]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1104,29825+17]..[1104,29825+21])
                                      Ppat_var "prod" (src/grammarFunctor.ml[1104,29825+17]..[1104,29825+21])
                                    expression (src/grammarFunctor.ml[1104,29825+22]..[1120,30385+10]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1104,29825+22]..[1104,29825+23])
                                        Ppat_var "i" (src/grammarFunctor.ml[1104,29825+22]..[1104,29825+23])
                                      expression (src/grammarFunctor.ml[1104,29825+24]..[1120,30385+10]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1104,29825+24]..[1104,29825+27])
                                          Ppat_var "get" (src/grammarFunctor.ml[1104,29825+24]..[1104,29825+27])
                                        expression (src/grammarFunctor.ml[1104,29825+28]..[1120,30385+10])
                                          Pexp_constraint
                                          expression (src/grammarFunctor.ml[1105,29866+4]..[1120,30385+10])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1105,29866+8]..[1105,29866+11])
                                                  Ppat_var "rhs" (src/grammarFunctor.ml[1105,29866+8]..[1105,29866+11])
                                                expression (src/grammarFunctor.ml[1105,29866+14]..[1105,29866+33])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1105,29866+14]..[1105,29866+28])
                                                    Pexp_ident "Production.rhs" (src/grammarFunctor.ml[1105,29866+14]..[1105,29866+28])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1105,29866+29]..[1105,29866+33])
                                                        Pexp_ident "prod" (src/grammarFunctor.ml[1105,29866+29]..[1105,29866+33])
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1106,29903+4]..[1120,30385+10])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/grammarFunctor.ml[1106,29903+8]..[1106,29903+9])
                                                    Ppat_var "n" (src/grammarFunctor.ml[1106,29903+8]..[1106,29903+9])
                                                  expression (src/grammarFunctor.ml[1106,29903+12]..[1106,29903+28])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1106,29903+12]..[1106,29903+24])
                                                      Pexp_ident "Array.length" (src/grammarFunctor.ml[1106,29903+12]..[1106,29903+24])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1106,29903+25]..[1106,29903+28])
                                                          Pexp_ident "rhs" (src/grammarFunctor.ml[1106,29903+25]..[1106,29903+28])
                                                    ]
                                              ]
                                              expression (src/grammarFunctor.ml[1111,30193+4]..[1120,30385+10])
                                                Pexp_let Rec
                                                [
                                                  <def>
                                                    pattern (src/grammarFunctor.ml[1111,30193+12]..[1111,30193+16])
                                                      Ppat_var "loop" (src/grammarFunctor.ml[1111,30193+12]..[1111,30193+16])
                                                    expression (src/grammarFunctor.ml[1111,30193+17]..[1118,30345+32]) ghost
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (src/grammarFunctor.ml[1111,30193+17]..[1111,30193+18])
                                                        Ppat_var "i" (src/grammarFunctor.ml[1111,30193+17]..[1111,30193+18])
                                                      expression (src/grammarFunctor.ml[1112,30214+6]..[1118,30345+32])
                                                        Pexp_ifthenelse
                                                        expression (src/grammarFunctor.ml[1112,30214+9]..[1112,30214+14])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1112,30214+11]..[1112,30214+12])
                                                            Pexp_ident "=" (src/grammarFunctor.ml[1112,30214+11]..[1112,30214+12])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1112,30214+9]..[1112,30214+10])
                                                                Pexp_ident "i" (src/grammarFunctor.ml[1112,30214+9]..[1112,30214+10])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1112,30214+13]..[1112,30214+14])
                                                                Pexp_ident "n" (src/grammarFunctor.ml[1112,30214+13]..[1112,30214+14])
                                                          ]
                                                        expression (src/grammarFunctor.ml[1113,30234+8]..[1113,30234+17])
                                                          Pexp_ident "S.epsilon" (src/grammarFunctor.ml[1113,30234+8]..[1113,30234+17])
                                                        Some
                                                          expression (src/grammarFunctor.ml[1115,30263+8]..[1118,30345+32])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/grammarFunctor.ml[1115,30263+12]..[1115,30263+15])
                                                                  Ppat_var "sym" (src/grammarFunctor.ml[1115,30263+12]..[1115,30263+15])
                                                                expression (src/grammarFunctor.ml[1115,30263+18]..[1115,30263+25])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[1115,30263+18]..[1115,30263+25]) ghost
                                                                    Pexp_ident "Array.get" (src/grammarFunctor.ml[1115,30263+18]..[1115,30263+25]) ghost
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1115,30263+18]..[1115,30263+21])
Pexp_ident "rhs" (src/grammarFunctor.ml[1115,30263+18]..[1115,30263+21])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1115,30263+23]..[1115,30263+24])
Pexp_ident "i" (src/grammarFunctor.ml[1115,30263+23]..[1115,30263+24])
                                                                  ]
                                                            ]
                                                            expression (src/grammarFunctor.ml[1116,30292+8]..[1118,30345+32])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1116,30292+8]..[1116,30292+21])
                                                                Pexp_ident "S.conjunction" (src/grammarFunctor.ml[1116,30292+8]..[1116,30292+21])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1116,30292+22]..[1116,30292+25])
                                                                    Pexp_ident "sym" (src/grammarFunctor.ml[1116,30292+22]..[1116,30292+25])
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1117,30318+10]..[1117,30318+26])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[1117,30318+11]..[1117,30318+17])
                                                                      Pexp_ident "symbol" (src/grammarFunctor.ml[1117,30318+11]..[1117,30318+17])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1117,30318+18]..[1117,30318+21])
  Pexp_ident "sym" (src/grammarFunctor.ml[1117,30318+18]..[1117,30318+21])
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1117,30318+22]..[1117,30318+25])
  Pexp_ident "get" (src/grammarFunctor.ml[1117,30318+22]..[1117,30318+25])
                                                                    ]
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1118,30345+10]..[1118,30345+32])
                                                                    Pexp_fun
                                                                    Nolabel
                                                                    None
                                                                    pattern (src/grammarFunctor.ml[1118,30345+15]..[1118,30345+17])
                                                                      Ppat_construct "()" (src/grammarFunctor.ml[1118,30345+15]..[1118,30345+17])
                                                                      None
                                                                    expression (src/grammarFunctor.ml[1118,30345+21]..[1118,30345+31])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[1118,30345+21]..[1118,30345+25])
Pexp_ident "loop" (src/grammarFunctor.ml[1118,30345+21]..[1118,30345+25])
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1118,30345+26]..[1118,30345+31])
    Pexp_apply
    expression (src/grammarFunctor.ml[1118,30345+28]..[1118,30345+29])
      Pexp_ident "+" (src/grammarFunctor.ml[1118,30345+28]..[1118,30345+29])
    [
      <arg>
      Nolabel
        expression (src/grammarFunctor.ml[1118,30345+27]..[1118,30345+28])
          Pexp_ident "i" (src/grammarFunctor.ml[1118,30345+27]..[1118,30345+28])
      <arg>
      Nolabel
        expression (src/grammarFunctor.ml[1118,30345+29]..[1118,30345+30])
          Pexp_constant PConst_int (1,None)
    ]
                                                                      ]
                                                              ]
                                                ]
                                                expression (src/grammarFunctor.ml[1120,30385+4]..[1120,30385+10])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1120,30385+4]..[1120,30385+8])
                                                    Pexp_ident "loop" (src/grammarFunctor.ml[1120,30385+4]..[1120,30385+8])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1120,30385+9]..[1120,30385+10])
                                                        Pexp_ident "i" (src/grammarFunctor.ml[1120,30385+9]..[1120,30385+10])
                                                  ]
                                          core_type (src/grammarFunctor.ml[1104,29825+30]..[1104,29825+38])
                                            Ptyp_constr "property" (src/grammarFunctor.ml[1104,29825+30]..[1104,29825+38])
                                            []
                              ]
                            structure_item (src/grammarFunctor.ml[1126,30605+2]..[1136,30917+18])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1126,30605+6]..[1126,30605+17])
                                    Ppat_var "nonterminal" (src/grammarFunctor.ml[1126,30605+6]..[1126,30605+17])
                                  expression (src/grammarFunctor.ml[1126,30605+18]..[1136,30917+18]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1126,30605+18]..[1126,30605+20])
                                      Ppat_var "nt" (src/grammarFunctor.ml[1126,30605+18]..[1126,30605+20])
                                    expression (src/grammarFunctor.ml[1126,30605+21]..[1136,30917+18]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1126,30605+21]..[1126,30605+24])
                                        Ppat_var "get" (src/grammarFunctor.ml[1126,30605+21]..[1126,30605+24])
                                      expression (src/grammarFunctor.ml[1126,30605+25]..[1136,30917+18])
                                        Pexp_constraint
                                        expression (src/grammarFunctor.ml[1127,30643+4]..[1136,30917+18])
                                          Pexp_match
                                          expression (src/grammarFunctor.ml[1127,30643+10]..[1127,30643+23])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1127,30643+10]..[1127,30643+20])
                                              Pexp_ident "S.shortcut" (src/grammarFunctor.ml[1127,30643+10]..[1127,30643+20])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1127,30643+21]..[1127,30643+23])
                                                  Pexp_ident "nt" (src/grammarFunctor.ml[1127,30643+21]..[1127,30643+23])
                                            ]
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[1128,30672+6]..[1128,30672+12])
                                                Ppat_construct "Some" (src/grammarFunctor.ml[1128,30672+6]..[1128,30672+10])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[1128,30672+11]..[1128,30672+12])
                                                    Ppat_var "p" (src/grammarFunctor.ml[1128,30672+11]..[1128,30672+12])
                                              expression (src/grammarFunctor.ml[1129,30688+8]..[1129,30688+9])
                                                Pexp_ident "p" (src/grammarFunctor.ml[1129,30688+8]..[1129,30688+9])
                                            <case>
                                              pattern (src/grammarFunctor.ml[1130,30698+6]..[1130,30698+10])
                                                Ppat_construct "None" (src/grammarFunctor.ml[1130,30698+6]..[1130,30698+10])
                                                None
                                              expression (src/grammarFunctor.ml[1132,30788+8]..[1136,30917+18])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1132,30788+8]..[1132,30788+30])
                                                  Pexp_ident "Production.foldnt_lazy" (src/grammarFunctor.ml[1132,30788+8]..[1132,30788+30])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1132,30788+31]..[1132,30788+33])
                                                      Pexp_ident "nt" (src/grammarFunctor.ml[1132,30788+31]..[1132,30788+33])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1132,30788+34]..[1136,30917+9])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (src/grammarFunctor.ml[1132,30788+39]..[1132,30788+43])
                                                        Ppat_var "prod" (src/grammarFunctor.ml[1132,30788+39]..[1132,30788+43])
                                                      expression (src/grammarFunctor.ml[1132,30788+44]..[1135,30900+16]) ghost
                                                        Pexp_fun
                                                        Nolabel
                                                        None
                                                        pattern (src/grammarFunctor.ml[1132,30788+44]..[1132,30788+48])
                                                          Ppat_var "rest" (src/grammarFunctor.ml[1132,30788+44]..[1132,30788+48])
                                                        expression (src/grammarFunctor.ml[1133,30840+10]..[1135,30900+16])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1133,30840+10]..[1133,30840+23])
                                                            Pexp_ident "S.disjunction" (src/grammarFunctor.ml[1133,30840+10]..[1133,30840+23])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1134,30864+12]..[1134,30864+35])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[1134,30864+13]..[1134,30864+23])
                                                                  Pexp_ident "production" (src/grammarFunctor.ml[1134,30864+13]..[1134,30864+23])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1134,30864+24]..[1134,30864+28])
                                                                      Pexp_ident "prod" (src/grammarFunctor.ml[1134,30864+24]..[1134,30864+28])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1134,30864+29]..[1134,30864+30])
                                                                      Pexp_constant PConst_int (0,None)
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1134,30864+31]..[1134,30864+34])
                                                                      Pexp_ident "get" (src/grammarFunctor.ml[1134,30864+31]..[1134,30864+34])
                                                                ]
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1135,30900+12]..[1135,30900+16])
                                                                Pexp_ident "rest" (src/grammarFunctor.ml[1135,30900+12]..[1135,30900+16])
                                                          ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1136,30917+10]..[1136,30917+18])
                                                      Pexp_ident "P.bottom" (src/grammarFunctor.ml[1136,30917+10]..[1136,30917+18])
                                                ]
                                          ]
                                        core_type (src/grammarFunctor.ml[1126,30605+27]..[1126,30605+35])
                                          Ptyp_constr "property" (src/grammarFunctor.ml[1126,30605+27]..[1126,30605+35])
                                          []
                              ]
                            structure_item (src/grammarFunctor.ml[1141,31062+2]..[1144,31141+9])
                              Pstr_module
                              "F" (src/grammarFunctor.ml[1141,31062+9]..[1141,31062+10])
                                module_expr (src/grammarFunctor.ml[1142,31075+4]..[1144,31141+9])
                                  Pmod_apply
                                  module_expr (src/grammarFunctor.ml[1142,31075+4]..[1143,31088+52])
                                    Pmod_apply
                                    module_expr (src/grammarFunctor.ml[1142,31075+4]..[1142,31075+12])
                                      Pmod_ident "Fix.Make" (src/grammarFunctor.ml[1142,31075+4]..[1142,31075+12])
                                    module_expr (src/grammarFunctor.ml[1143,31088+7]..[1143,31088+51])
                                      Pmod_apply
                                      module_expr (src/grammarFunctor.ml[1143,31088+7]..[1143,31088+38])
                                        Pmod_ident "Fix.Glue.ArraysAsImperativeMaps" (src/grammarFunctor.ml[1143,31088+7]..[1143,31088+38])
                                      module_expr (src/grammarFunctor.ml[1143,31088+39]..[1143,31088+50])
                                        Pmod_ident "Nonterminal" (src/grammarFunctor.ml[1143,31088+39]..[1143,31088+50])
                                  module_expr (src/grammarFunctor.ml[1144,31141+7]..[1144,31141+8])
                                    Pmod_ident "P" (src/grammarFunctor.ml[1144,31141+7]..[1144,31141+8])
                            structure_item (src/grammarFunctor.ml[1146,31152+2]..[1147,31172+21])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1146,31152+6]..[1146,31152+17])
                                    Ppat_var "nonterminal" (src/grammarFunctor.ml[1146,31152+6]..[1146,31152+17])
                                  expression (src/grammarFunctor.ml[1147,31172+4]..[1147,31172+21])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1147,31172+4]..[1147,31172+9])
                                      Pexp_ident "F.lfp" (src/grammarFunctor.ml[1147,31172+4]..[1147,31172+9])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1147,31172+10]..[1147,31172+21])
                                          Pexp_ident "nonterminal" (src/grammarFunctor.ml[1147,31172+10]..[1147,31172+21])
                                    ]
                              ]
                            structure_item (src/grammarFunctor.ml[1151,31250+2]..[1152,31269+26])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1151,31250+6]..[1151,31250+12])
                                    Ppat_var "symbol" (src/grammarFunctor.ml[1151,31250+6]..[1151,31250+12])
                                  expression (src/grammarFunctor.ml[1151,31250+13]..[1152,31269+26]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1151,31250+13]..[1151,31250+16])
                                      Ppat_var "sym" (src/grammarFunctor.ml[1151,31250+13]..[1151,31250+16])
                                    expression (src/grammarFunctor.ml[1152,31269+4]..[1152,31269+26])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1152,31269+4]..[1152,31269+10])
                                        Pexp_ident "symbol" (src/grammarFunctor.ml[1152,31269+4]..[1152,31269+10])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1152,31269+11]..[1152,31269+14])
                                            Pexp_ident "sym" (src/grammarFunctor.ml[1152,31269+11]..[1152,31269+14])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1152,31269+15]..[1152,31269+26])
                                            Pexp_ident "nonterminal" (src/grammarFunctor.ml[1152,31269+15]..[1152,31269+26])
                                      ]
                              ]
                            structure_item (src/grammarFunctor.ml[1154,31297+2]..[1155,31323+33])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1154,31297+6]..[1154,31297+16])
                                    Ppat_var "production" (src/grammarFunctor.ml[1154,31297+6]..[1154,31297+16])
                                  expression (src/grammarFunctor.ml[1154,31297+17]..[1155,31323+33]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1154,31297+17]..[1154,31297+21])
                                      Ppat_var "prod" (src/grammarFunctor.ml[1154,31297+17]..[1154,31297+21])
                                    expression (src/grammarFunctor.ml[1154,31297+22]..[1155,31323+33]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1154,31297+22]..[1154,31297+23])
                                        Ppat_var "i" (src/grammarFunctor.ml[1154,31297+22]..[1154,31297+23])
                                      expression (src/grammarFunctor.ml[1155,31323+4]..[1155,31323+33])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1155,31323+4]..[1155,31323+14])
                                          Pexp_ident "production" (src/grammarFunctor.ml[1155,31323+4]..[1155,31323+14])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1155,31323+15]..[1155,31323+19])
                                              Pexp_ident "prod" (src/grammarFunctor.ml[1155,31323+15]..[1155,31323+19])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1155,31323+20]..[1155,31323+21])
                                              Pexp_ident "i" (src/grammarFunctor.ml[1155,31323+20]..[1155,31323+21])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1155,31323+22]..[1155,31323+33])
                                              Pexp_ident "nonterminal" (src/grammarFunctor.ml[1155,31323+22]..[1155,31323+33])
                                        ]
                              ]
                          ]
                        module_type (src/grammarFunctor.ml[1068,28726+2]..[1085,29293+3])
                          Pmty_signature
                          [
                            signature_item (src/grammarFunctor.ml[1069,28732+2]..[1069,28732+8])
                              Psig_open Fresh "P" (src/grammarFunctor.ml[1069,28732+7]..[1069,28732+8])
                            signature_item (src/grammarFunctor.ml[1074,28866+2]..[1074,28866+44])
                              Psig_value
                              value_description "nonterminal" (src/grammarFunctor.ml[1074,28866+6]..[1074,28866+17]) (src/grammarFunctor.ml[1074,28866+2]..[1074,28866+44])
                                core_type (src/grammarFunctor.ml[1074,28866+19]..[1074,28866+44])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1074,28866+19]..[1074,28866+32])
                                    Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1074,28866+19]..[1074,28866+32])
                                    []
                                  core_type (src/grammarFunctor.ml[1074,28866+36]..[1074,28866+44])
                                    Ptyp_constr "property" (src/grammarFunctor.ml[1074,28866+36]..[1074,28866+44])
                                    []
                                []
                            signature_item (src/grammarFunctor.ml[1077,28962+2]..[1077,28962+34])
                              Psig_value
                              value_description "symbol" (src/grammarFunctor.ml[1077,28962+6]..[1077,28962+12]) (src/grammarFunctor.ml[1077,28962+2]..[1077,28962+34])
                                core_type (src/grammarFunctor.ml[1077,28962+14]..[1077,28962+34])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1077,28962+14]..[1077,28962+22])
                                    Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[1077,28962+14]..[1077,28962+22])
                                    []
                                  core_type (src/grammarFunctor.ml[1077,28962+26]..[1077,28962+34])
                                    Ptyp_constr "property" (src/grammarFunctor.ml[1077,28962+26]..[1077,28962+34])
                                    []
                                []
                            signature_item (src/grammarFunctor.ml[1083,29238+2]..[1083,29238+53])
                              Psig_value
                              value_description "production" (src/grammarFunctor.ml[1083,29238+6]..[1083,29238+16]) (src/grammarFunctor.ml[1083,29238+2]..[1083,29238+53])
                                core_type (src/grammarFunctor.ml[1083,29238+18]..[1083,29238+53])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1083,29238+18]..[1083,29238+34])
                                    Ptyp_constr "Production.index" (src/grammarFunctor.ml[1083,29238+18]..[1083,29238+34])
                                    []
                                  core_type (src/grammarFunctor.ml[1083,29238+38]..[1083,29238+53])
                                    Ptyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1083,29238+38]..[1083,29238+41])
                                      Ptyp_constr "int" (src/grammarFunctor.ml[1083,29238+38]..[1083,29238+41])
                                      []
                                    core_type (src/grammarFunctor.ml[1083,29238+45]..[1083,29238+53])
                                      Ptyp_constr "property" (src/grammarFunctor.ml[1083,29238+45]..[1083,29238+53])
                                      []
                                []
                          ]
              structure_item (src/grammarFunctor.ml[1166,31732+0]..[1180,32247+9])
                Pstr_module
                "NONEMPTY" (src/grammarFunctor.ml[1166,31732+7]..[1166,31732+15])
                  module_expr (src/grammarFunctor.ml[1167,31750+2]..[1180,32247+9])
                    Pmod_apply
                    module_expr (src/grammarFunctor.ml[1167,31750+2]..[1168,31768+22])
                      Pmod_apply
                      module_expr (src/grammarFunctor.ml[1167,31750+2]..[1167,31750+17])
                        Pmod_ident "GenericAnalysis" (src/grammarFunctor.ml[1167,31750+2]..[1167,31750+17])
                      module_expr (src/grammarFunctor.ml[1168,31768+5]..[1168,31768+21])
                        Pmod_ident "Fix.Prop.Boolean" (src/grammarFunctor.ml[1168,31768+5]..[1168,31768+21])
                    module_expr (src/grammarFunctor.ml[1169,31791+5]..[1180,32247+8])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1170,31803+6]..[1170,31803+29])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1170,31803+10]..[1170,31803+18])
                                Ppat_var "shortcut" (src/grammarFunctor.ml[1170,31803+10]..[1170,31803+18])
                              expression (src/grammarFunctor.ml[1170,31803+19]..[1170,31803+29]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1170,31803+19]..[1170,31803+22])
                                  Ppat_var "_nt" (src/grammarFunctor.ml[1170,31803+19]..[1170,31803+22])
                                expression (src/grammarFunctor.ml[1170,31803+25]..[1170,31803+29])
                                  Pexp_construct "None" (src/grammarFunctor.ml[1170,31803+25]..[1170,31803+29])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1172,31876+6]..[1172,31876+27])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1172,31876+10]..[1172,31876+18])
                                Ppat_var "terminal" (src/grammarFunctor.ml[1172,31876+10]..[1172,31876+18])
                              expression (src/grammarFunctor.ml[1172,31876+19]..[1172,31876+27]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1172,31876+19]..[1172,31876+20])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1172,31876+23]..[1172,31876+27])
                                  Pexp_construct "true" (src/grammarFunctor.ml[1172,31876+23]..[1172,31876+27])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1174,31979+6]..[1174,31979+36])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1174,31979+10]..[1174,31979+21])
                                Ppat_var "disjunction" (src/grammarFunctor.ml[1174,31979+10]..[1174,31979+21])
                              expression (src/grammarFunctor.ml[1174,31979+22]..[1174,31979+36]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1174,31979+22]..[1174,31979+23])
                                  Ppat_var "p" (src/grammarFunctor.ml[1174,31979+22]..[1174,31979+23])
                                expression (src/grammarFunctor.ml[1174,31979+24]..[1174,31979+36]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1174,31979+24]..[1174,31979+25])
                                    Ppat_var "q" (src/grammarFunctor.ml[1174,31979+24]..[1174,31979+25])
                                  expression (src/grammarFunctor.ml[1174,31979+28]..[1174,31979+36])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1174,31979+30]..[1174,31979+32])
                                      Pexp_ident "||" (src/grammarFunctor.ml[1174,31979+30]..[1174,31979+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1174,31979+28]..[1174,31979+29])
                                          Pexp_ident "p" (src/grammarFunctor.ml[1174,31979+28]..[1174,31979+29])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1174,31979+33]..[1174,31979+36])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1174,31979+33]..[1174,31979+34])
                                            Pexp_ident "q" (src/grammarFunctor.ml[1174,31979+33]..[1174,31979+34])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1174,31979+34]..[1174,31979+36])
                                                Pexp_construct "()" (src/grammarFunctor.ml[1174,31979+34]..[1174,31979+36])
                                                None
                                          ]
                                    ]
                          ]
                        structure_item (src/grammarFunctor.ml[1176,32081+6]..[1176,32081+38])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1176,32081+10]..[1176,32081+21])
                                Ppat_var "conjunction" (src/grammarFunctor.ml[1176,32081+10]..[1176,32081+21])
                              expression (src/grammarFunctor.ml[1176,32081+22]..[1176,32081+38]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1176,32081+22]..[1176,32081+23])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1176,32081+24]..[1176,32081+38]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1176,32081+24]..[1176,32081+25])
                                    Ppat_var "p" (src/grammarFunctor.ml[1176,32081+24]..[1176,32081+25])
                                  expression (src/grammarFunctor.ml[1176,32081+26]..[1176,32081+38]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1176,32081+26]..[1176,32081+27])
                                      Ppat_var "q" (src/grammarFunctor.ml[1176,32081+26]..[1176,32081+27])
                                    expression (src/grammarFunctor.ml[1176,32081+30]..[1176,32081+38])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1176,32081+32]..[1176,32081+34])
                                        Pexp_ident "&&" (src/grammarFunctor.ml[1176,32081+32]..[1176,32081+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1176,32081+30]..[1176,32081+31])
                                            Pexp_ident "p" (src/grammarFunctor.ml[1176,32081+30]..[1176,32081+31])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1176,32081+35]..[1176,32081+38])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1176,32081+35]..[1176,32081+36])
                                              Pexp_ident "q" (src/grammarFunctor.ml[1176,32081+35]..[1176,32081+36])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1176,32081+36]..[1176,32081+38])
                                                  Pexp_construct "()" (src/grammarFunctor.ml[1176,32081+36]..[1176,32081+38])
                                                  None
                                            ]
                                      ]
                          ]
                        structure_item (src/grammarFunctor.ml[1179,32222+6]..[1179,32222+24])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1179,32222+10]..[1179,32222+17])
                                Ppat_var "epsilon" (src/grammarFunctor.ml[1179,32222+10]..[1179,32222+17])
                              expression (src/grammarFunctor.ml[1179,32222+20]..[1179,32222+24])
                                Pexp_construct "true" (src/grammarFunctor.ml[1179,32222+20]..[1179,32222+24])
                                None
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1182,32258+0]..[1195,32722+9])
                Pstr_module
                "NULLABLE" (src/grammarFunctor.ml[1182,32258+7]..[1182,32258+15])
                  module_expr (src/grammarFunctor.ml[1183,32276+2]..[1195,32722+9])
                    Pmod_apply
                    module_expr (src/grammarFunctor.ml[1183,32276+2]..[1184,32294+22])
                      Pmod_apply
                      module_expr (src/grammarFunctor.ml[1183,32276+2]..[1183,32276+17])
                        Pmod_ident "GenericAnalysis" (src/grammarFunctor.ml[1183,32276+2]..[1183,32276+17])
                      module_expr (src/grammarFunctor.ml[1184,32294+5]..[1184,32294+21])
                        Pmod_ident "Fix.Prop.Boolean" (src/grammarFunctor.ml[1184,32294+5]..[1184,32294+21])
                    module_expr (src/grammarFunctor.ml[1185,32317+5]..[1195,32722+8])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1186,32329+6]..[1186,32329+29])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1186,32329+10]..[1186,32329+18])
                                Ppat_var "shortcut" (src/grammarFunctor.ml[1186,32329+10]..[1186,32329+18])
                              expression (src/grammarFunctor.ml[1186,32329+19]..[1186,32329+29]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1186,32329+19]..[1186,32329+22])
                                  Ppat_var "_nt" (src/grammarFunctor.ml[1186,32329+19]..[1186,32329+22])
                                expression (src/grammarFunctor.ml[1186,32329+25]..[1186,32329+29])
                                  Pexp_construct "None" (src/grammarFunctor.ml[1186,32329+25]..[1186,32329+29])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1188,32406+6]..[1188,32406+28])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1188,32406+10]..[1188,32406+18])
                                Ppat_var "terminal" (src/grammarFunctor.ml[1188,32406+10]..[1188,32406+18])
                              expression (src/grammarFunctor.ml[1188,32406+19]..[1188,32406+28]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1188,32406+19]..[1188,32406+20])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1188,32406+23]..[1188,32406+28])
                                  Pexp_construct "false" (src/grammarFunctor.ml[1188,32406+23]..[1188,32406+28])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1190,32510+6]..[1190,32510+36])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1190,32510+10]..[1190,32510+21])
                                Ppat_var "disjunction" (src/grammarFunctor.ml[1190,32510+10]..[1190,32510+21])
                              expression (src/grammarFunctor.ml[1190,32510+22]..[1190,32510+36]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1190,32510+22]..[1190,32510+23])
                                  Ppat_var "p" (src/grammarFunctor.ml[1190,32510+22]..[1190,32510+23])
                                expression (src/grammarFunctor.ml[1190,32510+24]..[1190,32510+36]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1190,32510+24]..[1190,32510+25])
                                    Ppat_var "q" (src/grammarFunctor.ml[1190,32510+24]..[1190,32510+25])
                                  expression (src/grammarFunctor.ml[1190,32510+28]..[1190,32510+36])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1190,32510+30]..[1190,32510+32])
                                      Pexp_ident "||" (src/grammarFunctor.ml[1190,32510+30]..[1190,32510+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1190,32510+28]..[1190,32510+29])
                                          Pexp_ident "p" (src/grammarFunctor.ml[1190,32510+28]..[1190,32510+29])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1190,32510+33]..[1190,32510+36])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1190,32510+33]..[1190,32510+34])
                                            Pexp_ident "q" (src/grammarFunctor.ml[1190,32510+33]..[1190,32510+34])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1190,32510+34]..[1190,32510+36])
                                                Pexp_construct "()" (src/grammarFunctor.ml[1190,32510+34]..[1190,32510+36])
                                                None
                                          ]
                                    ]
                          ]
                        structure_item (src/grammarFunctor.ml[1192,32612+6]..[1192,32612+38])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1192,32612+10]..[1192,32612+21])
                                Ppat_var "conjunction" (src/grammarFunctor.ml[1192,32612+10]..[1192,32612+21])
                              expression (src/grammarFunctor.ml[1192,32612+22]..[1192,32612+38]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1192,32612+22]..[1192,32612+23])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1192,32612+24]..[1192,32612+38]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1192,32612+24]..[1192,32612+25])
                                    Ppat_var "p" (src/grammarFunctor.ml[1192,32612+24]..[1192,32612+25])
                                  expression (src/grammarFunctor.ml[1192,32612+26]..[1192,32612+38]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1192,32612+26]..[1192,32612+27])
                                      Ppat_var "q" (src/grammarFunctor.ml[1192,32612+26]..[1192,32612+27])
                                    expression (src/grammarFunctor.ml[1192,32612+30]..[1192,32612+38])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1192,32612+32]..[1192,32612+34])
                                        Pexp_ident "&&" (src/grammarFunctor.ml[1192,32612+32]..[1192,32612+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1192,32612+30]..[1192,32612+31])
                                            Pexp_ident "p" (src/grammarFunctor.ml[1192,32612+30]..[1192,32612+31])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1192,32612+35]..[1192,32612+38])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1192,32612+35]..[1192,32612+36])
                                              Pexp_ident "q" (src/grammarFunctor.ml[1192,32612+35]..[1192,32612+36])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1192,32612+36]..[1192,32612+38])
                                                  Pexp_construct "()" (src/grammarFunctor.ml[1192,32612+36]..[1192,32612+38])
                                                  None
                                            ]
                                      ]
                          ]
                        structure_item (src/grammarFunctor.ml[1194,32697+6]..[1194,32697+24])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1194,32697+10]..[1194,32697+17])
                                Ppat_var "epsilon" (src/grammarFunctor.ml[1194,32697+10]..[1194,32697+17])
                              expression (src/grammarFunctor.ml[1194,32697+20]..[1194,32697+24])
                                Pexp_construct "true" (src/grammarFunctor.ml[1194,32697+20]..[1194,32697+24])
                                None
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1200,32839+0]..[1219,33580+9])
                Pstr_module
                "FIRST" (src/grammarFunctor.ml[1200,32839+7]..[1200,32839+12])
                  module_expr (src/grammarFunctor.ml[1201,32854+2]..[1219,33580+9])
                    Pmod_apply
                    module_expr (src/grammarFunctor.ml[1201,32854+2]..[1202,32872+17])
                      Pmod_apply
                      module_expr (src/grammarFunctor.ml[1201,32854+2]..[1201,32854+17])
                        Pmod_ident "GenericAnalysis" (src/grammarFunctor.ml[1201,32854+2]..[1201,32854+17])
                      module_expr (src/grammarFunctor.ml[1202,32872+5]..[1202,32872+16])
                        Pmod_ident "TerminalSet" (src/grammarFunctor.ml[1202,32872+5]..[1202,32872+16])
                    module_expr (src/grammarFunctor.ml[1203,32890+5]..[1219,33580+8])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1204,32902+6]..[1204,32902+29])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1204,32902+10]..[1204,32902+18])
                                Ppat_var "shortcut" (src/grammarFunctor.ml[1204,32902+10]..[1204,32902+18])
                              expression (src/grammarFunctor.ml[1204,32902+19]..[1204,32902+29]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1204,32902+19]..[1204,32902+22])
                                  Ppat_var "_nt" (src/grammarFunctor.ml[1204,32902+19]..[1204,32902+22])
                                expression (src/grammarFunctor.ml[1204,32902+25]..[1204,32902+29])
                                  Pexp_construct "None" (src/grammarFunctor.ml[1204,32902+25]..[1204,32902+29])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1206,32989+6]..[1206,32989+42])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1206,32989+10]..[1206,32989+18])
                                Ppat_var "terminal" (src/grammarFunctor.ml[1206,32989+10]..[1206,32989+18])
                              expression (src/grammarFunctor.ml[1206,32989+21]..[1206,32989+42])
                                Pexp_ident "TerminalSet.singleton" (src/grammarFunctor.ml[1206,32989+21]..[1206,32989+42])
                          ]
                        structure_item (src/grammarFunctor.ml[1208,33108+6]..[1208,33108+53])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1208,33108+10]..[1208,33108+21])
                                Ppat_var "disjunction" (src/grammarFunctor.ml[1208,33108+10]..[1208,33108+21])
                              expression (src/grammarFunctor.ml[1208,33108+22]..[1208,33108+53]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1208,33108+22]..[1208,33108+23])
                                  Ppat_var "p" (src/grammarFunctor.ml[1208,33108+22]..[1208,33108+23])
                                expression (src/grammarFunctor.ml[1208,33108+24]..[1208,33108+53]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1208,33108+24]..[1208,33108+25])
                                    Ppat_var "q" (src/grammarFunctor.ml[1208,33108+24]..[1208,33108+25])
                                  expression (src/grammarFunctor.ml[1208,33108+28]..[1208,33108+53])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1208,33108+28]..[1208,33108+45])
                                      Pexp_ident "TerminalSet.union" (src/grammarFunctor.ml[1208,33108+28]..[1208,33108+45])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1208,33108+46]..[1208,33108+47])
                                          Pexp_ident "p" (src/grammarFunctor.ml[1208,33108+46]..[1208,33108+47])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1208,33108+48]..[1208,33108+53])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1208,33108+49]..[1208,33108+50])
                                            Pexp_ident "q" (src/grammarFunctor.ml[1208,33108+49]..[1208,33108+50])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1208,33108+50]..[1208,33108+52])
                                                Pexp_construct "()" (src/grammarFunctor.ml[1208,33108+50]..[1208,33108+52])
                                                None
                                          ]
                                    ]
                          ]
                        structure_item (src/grammarFunctor.ml[1212,33349+6]..[1216,33472+11])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1212,33349+10]..[1212,33349+21])
                                Ppat_var "conjunction" (src/grammarFunctor.ml[1212,33349+10]..[1212,33349+21])
                              expression (src/grammarFunctor.ml[1212,33349+22]..[1216,33472+11]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1212,33349+22]..[1212,33349+28])
                                  Ppat_var "symbol" (src/grammarFunctor.ml[1212,33349+22]..[1212,33349+28])
                                expression (src/grammarFunctor.ml[1212,33349+29]..[1216,33472+11]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1212,33349+29]..[1212,33349+30])
                                    Ppat_var "p" (src/grammarFunctor.ml[1212,33349+29]..[1212,33349+30])
                                  expression (src/grammarFunctor.ml[1212,33349+31]..[1216,33472+11]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1212,33349+31]..[1212,33349+32])
                                      Ppat_var "q" (src/grammarFunctor.ml[1212,33349+31]..[1212,33349+32])
                                    expression (src/grammarFunctor.ml[1213,33384+8]..[1216,33472+11])
                                      Pexp_ifthenelse
                                      expression (src/grammarFunctor.ml[1213,33384+11]..[1213,33384+33])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1213,33384+11]..[1213,33384+26])
                                          Pexp_ident "NULLABLE.symbol" (src/grammarFunctor.ml[1213,33384+11]..[1213,33384+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1213,33384+27]..[1213,33384+33])
                                              Pexp_ident "symbol" (src/grammarFunctor.ml[1213,33384+27]..[1213,33384+33])
                                        ]
                                      expression (src/grammarFunctor.ml[1214,33423+10]..[1214,33423+35])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1214,33423+10]..[1214,33423+27])
                                          Pexp_ident "TerminalSet.union" (src/grammarFunctor.ml[1214,33423+10]..[1214,33423+27])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1214,33423+28]..[1214,33423+29])
                                              Pexp_ident "p" (src/grammarFunctor.ml[1214,33423+28]..[1214,33423+29])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1214,33423+30]..[1214,33423+35])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1214,33423+31]..[1214,33423+32])
                                                Pexp_ident "q" (src/grammarFunctor.ml[1214,33423+31]..[1214,33423+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1214,33423+32]..[1214,33423+34])
                                                    Pexp_construct "()" (src/grammarFunctor.ml[1214,33423+32]..[1214,33423+34])
                                                    None
                                              ]
                                        ]
                                      Some
                                        expression (src/grammarFunctor.ml[1216,33472+10]..[1216,33472+11])
                                          Pexp_ident "p" (src/grammarFunctor.ml[1216,33472+10]..[1216,33472+11])
                          ]
                        structure_item (src/grammarFunctor.ml[1218,33542+6]..[1218,33542+37])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1218,33542+10]..[1218,33542+17])
                                Ppat_var "epsilon" (src/grammarFunctor.ml[1218,33542+10]..[1218,33542+17])
                              expression (src/grammarFunctor.ml[1218,33542+20]..[1218,33542+37])
                                Pexp_ident "TerminalSet.empty" (src/grammarFunctor.ml[1218,33542+20]..[1218,33542+37])
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1232,34202+0]..[1249,34776+9])
                Pstr_module
                "MINIMAL" (src/grammarFunctor.ml[1232,34202+7]..[1232,34202+14])
                  module_expr (src/grammarFunctor.ml[1233,34219+2]..[1249,34776+9])
                    Pmod_apply
                    module_expr (src/grammarFunctor.ml[1233,34219+2]..[1237,34318+9])
                      Pmod_apply
                      module_expr (src/grammarFunctor.ml[1233,34219+2]..[1233,34219+17])
                        Pmod_ident "GenericAnalysis" (src/grammarFunctor.ml[1233,34219+2]..[1233,34219+17])
                      module_expr (src/grammarFunctor.ml[1234,34237+5]..[1237,34318+8])
                        Pmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1235,34249+6]..[1235,34249+33])
                            Pstr_include                            module_expr (src/grammarFunctor.ml[1235,34249+14]..[1235,34249+33])
                              Pmod_ident "CompletedNatWitness" (src/grammarFunctor.ml[1235,34249+14]..[1235,34249+33])
                          structure_item (src/grammarFunctor.ml[1236,34283+6]..[1236,34283+34])
                            Pstr_type Rec
                            [
                              type_declaration "property" (src/grammarFunctor.ml[1236,34283+11]..[1236,34283+19]) (src/grammarFunctor.ml[1236,34283+6]..[1236,34283+34])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ptype_abstract
                                ptype_private = Public
                                ptype_manifest =
                                  Some
                                    core_type (src/grammarFunctor.ml[1236,34283+22]..[1236,34283+34])
                                      Ptyp_constr "t" (src/grammarFunctor.ml[1236,34283+33]..[1236,34283+34])
                                      [
                                        core_type (src/grammarFunctor.ml[1236,34283+22]..[1236,34283+32])
                                          Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1236,34283+22]..[1236,34283+32])
                                          []
                                      ]
                            ]
                        ]
                    module_expr (src/grammarFunctor.ml[1238,34328+5]..[1249,34776+8])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1239,34340+6]..[1239,34340+29])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1239,34340+10]..[1239,34340+18])
                                Ppat_var "shortcut" (src/grammarFunctor.ml[1239,34340+10]..[1239,34340+18])
                              expression (src/grammarFunctor.ml[1239,34340+19]..[1239,34340+29]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1239,34340+19]..[1239,34340+22])
                                  Ppat_var "_nt" (src/grammarFunctor.ml[1239,34340+19]..[1239,34340+22])
                                expression (src/grammarFunctor.ml[1239,34340+25]..[1239,34340+29])
                                  Pexp_construct "None" (src/grammarFunctor.ml[1239,34340+25]..[1239,34340+29])
                                  None
                          ]
                        structure_item (src/grammarFunctor.ml[1240,34370+6]..[1240,34370+30])
                          Pstr_open Fresh
                          module_expr (src/grammarFunctor.ml[1240,34370+11]..[1240,34370+30])
                            Pmod_ident "CompletedNatWitness" (src/grammarFunctor.ml[1240,34370+11]..[1240,34370+30])
                        structure_item (src/grammarFunctor.ml[1242,34445+6]..[1242,34445+30])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1242,34445+10]..[1242,34445+18])
                                Ppat_var "terminal" (src/grammarFunctor.ml[1242,34445+10]..[1242,34445+18])
                              expression (src/grammarFunctor.ml[1242,34445+21]..[1242,34445+30])
                                Pexp_ident "singleton" (src/grammarFunctor.ml[1242,34445+21]..[1242,34445+30])
                          ]
                        structure_item (src/grammarFunctor.ml[1244,34554+6]..[1244,34554+32])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1244,34554+10]..[1244,34554+21])
                                Ppat_var "disjunction" (src/grammarFunctor.ml[1244,34554+10]..[1244,34554+21])
                              expression (src/grammarFunctor.ml[1244,34554+24]..[1244,34554+32])
                                Pexp_ident "min_lazy" (src/grammarFunctor.ml[1244,34554+24]..[1244,34554+32])
                          ]
                        structure_item (src/grammarFunctor.ml[1246,34666+6]..[1246,34666+34])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1246,34666+10]..[1246,34666+21])
                                Ppat_var "conjunction" (src/grammarFunctor.ml[1246,34666+10]..[1246,34666+21])
                              expression (src/grammarFunctor.ml[1246,34666+22]..[1246,34666+34]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1246,34666+22]..[1246,34666+23])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1246,34666+26]..[1246,34666+34])
                                  Pexp_ident "add_lazy" (src/grammarFunctor.ml[1246,34666+26]..[1246,34666+34])
                          ]
                        structure_item (src/grammarFunctor.ml[1248,34748+6]..[1248,34748+27])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1248,34748+10]..[1248,34748+17])
                                Ppat_var "epsilon" (src/grammarFunctor.ml[1248,34748+10]..[1248,34748+17])
                              expression (src/grammarFunctor.ml[1248,34748+20]..[1248,34748+27])
                                Pexp_ident "epsilon" (src/grammarFunctor.ml[1248,34748+20]..[1248,34748+27])
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1267,35633+0]..[1268,35677+50])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1267,35633+4]..[1267,35633+27])
                      Ppat_var "generates_nonempty_word" (src/grammarFunctor.ml[1267,35633+4]..[1267,35633+27])
                    expression (src/grammarFunctor.ml[1267,35633+28]..[1268,35677+50]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1267,35633+28]..[1267,35633+34])
                        Ppat_var "symbol" (src/grammarFunctor.ml[1267,35633+28]..[1267,35633+34])
                      expression (src/grammarFunctor.ml[1267,35633+35]..[1268,35677+50])
                        Pexp_constraint
                        expression (src/grammarFunctor.ml[1268,35677+2]..[1268,35677+50])
                          Pexp_apply
                          expression (src/grammarFunctor.ml[1268,35677+2]..[1268,35677+5])
                            Pexp_ident "not" (src/grammarFunctor.ml[1268,35677+2]..[1268,35677+5])
                          [
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1268,35677+6]..[1268,35677+50])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1268,35677+7]..[1268,35677+27])
                                  Pexp_ident "TerminalSet.is_empty" (src/grammarFunctor.ml[1268,35677+7]..[1268,35677+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1268,35677+28]..[1268,35677+49])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1268,35677+29]..[1268,35677+41])
                                        Pexp_ident "FIRST.symbol" (src/grammarFunctor.ml[1268,35677+29]..[1268,35677+41])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1268,35677+42]..[1268,35677+48])
                                            Pexp_ident "symbol" (src/grammarFunctor.ml[1268,35677+42]..[1268,35677+48])
                                      ]
                                ]
                          ]
                        core_type (src/grammarFunctor.ml[1267,35633+37]..[1267,35633+41])
                          Ptyp_constr "bool" (src/grammarFunctor.ml[1267,35633+37]..[1267,35633+41])
                          []
                ]
              structure_item (src/grammarFunctor.ml[1276,36059+0]..[1301,36911+3])
                Pstr_module
                "G" (src/grammarFunctor.ml[1276,36059+7]..[1276,36059+8])
                  module_expr (src/grammarFunctor.ml[1276,36059+11]..[1301,36911+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1277,36077+2]..[1277,36077+27])
                        Pstr_type Rec
                        [
                          type_declaration "node" (src/grammarFunctor.ml[1277,36077+7]..[1277,36077+11]) (src/grammarFunctor.ml[1277,36077+2]..[1277,36077+27])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[1277,36077+14]..[1277,36077+27])
                                  Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1277,36077+14]..[1277,36077+27])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[1278,36105+2]..[1278,36105+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1278,36105+6]..[1278,36105+7])
                              Ppat_var "n" (src/grammarFunctor.ml[1278,36105+6]..[1278,36105+7])
                            expression (src/grammarFunctor.ml[1278,36105+10]..[1278,36105+23])
                              Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1278,36105+10]..[1278,36105+23])
                        ]
                      structure_item (src/grammarFunctor.ml[1279,36129+2]..[1279,36129+19])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1279,36129+6]..[1279,36129+11])
                              Ppat_var "index" (src/grammarFunctor.ml[1279,36129+6]..[1279,36129+11])
                            expression (src/grammarFunctor.ml[1279,36129+12]..[1279,36129+19]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1279,36129+12]..[1279,36129+14])
                                Ppat_var "nt" (src/grammarFunctor.ml[1279,36129+12]..[1279,36129+14])
                              expression (src/grammarFunctor.ml[1279,36129+17]..[1279,36129+19])
                                Pexp_ident "nt" (src/grammarFunctor.ml[1279,36129+17]..[1279,36129+19])
                        ]
                      structure_item (src/grammarFunctor.ml[1280,36149+2]..[1280,36149+29])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1280,36149+6]..[1280,36149+10])
                              Ppat_var "iter" (src/grammarFunctor.ml[1280,36149+6]..[1280,36149+10])
                            expression (src/grammarFunctor.ml[1280,36149+13]..[1280,36149+29])
                              Pexp_ident "Nonterminal.iter" (src/grammarFunctor.ml[1280,36149+13]..[1280,36149+29])
                        ]
                      structure_item (src/grammarFunctor.ml[1281,36179+2]..[1298,36823+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1281,36179+6]..[1281,36179+24])
                              Ppat_var "labeled_successors" (src/grammarFunctor.ml[1281,36179+6]..[1281,36179+24])
                            expression (src/grammarFunctor.ml[1281,36179+25]..[1298,36823+5]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1281,36179+25]..[1281,36179+30])
                                Ppat_var "yield" (src/grammarFunctor.ml[1281,36179+25]..[1281,36179+30])
                              expression (src/grammarFunctor.ml[1281,36179+31]..[1298,36823+5]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1281,36179+31]..[1281,36179+33])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1281,36179+31]..[1281,36179+33])
                                expression (src/grammarFunctor.ml[1282,36215+4]..[1298,36823+5])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1282,36215+4]..[1282,36215+21])
                                    Pexp_ident "Production.iternt" (src/grammarFunctor.ml[1282,36215+4]..[1282,36215+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1282,36215+22]..[1282,36215+24])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[1282,36215+22]..[1282,36215+24])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1282,36215+25]..[1298,36823+5])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1282,36215+30]..[1282,36215+34])
                                          Ppat_var "prod" (src/grammarFunctor.ml[1282,36215+30]..[1282,36215+34])
                                        expression (src/grammarFunctor.ml[1283,36253+6]..[1297,36815+7])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[1283,36253+10]..[1283,36253+13])
                                                Ppat_var "rhs" (src/grammarFunctor.ml[1283,36253+10]..[1283,36253+13])
                                              expression (src/grammarFunctor.ml[1283,36253+16]..[1283,36253+35])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1283,36253+16]..[1283,36253+30])
                                                  Pexp_ident "Production.rhs" (src/grammarFunctor.ml[1283,36253+16]..[1283,36253+30])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1283,36253+31]..[1283,36253+35])
                                                      Pexp_ident "prod" (src/grammarFunctor.ml[1283,36253+31]..[1283,36253+35])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[1284,36292+6]..[1297,36815+7])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1284,36292+10]..[1284,36292+12])
                                              Pexp_ident "|>" (src/grammarFunctor.ml[1284,36292+10]..[1284,36292+12])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1284,36292+6]..[1284,36292+9])
                                                  Pexp_ident "rhs" (src/grammarFunctor.ml[1284,36292+6]..[1284,36292+9])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1284,36292+13]..[1297,36815+7])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1284,36292+13]..[1284,36292+24])
                                                    Pexp_ident "Array.iteri" (src/grammarFunctor.ml[1284,36292+13]..[1284,36292+24])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1284,36292+25]..[1297,36815+7])
                                                        Pexp_fun
                                                        Nolabel
                                                        None
                                                        pattern (src/grammarFunctor.ml[1284,36292+30]..[1284,36292+31])
                                                          Ppat_var "i" (src/grammarFunctor.ml[1284,36292+30]..[1284,36292+31])
                                                        expression (src/grammarFunctor.ml[1284,36292+32]..[1296,36789+25]) ghost
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (src/grammarFunctor.ml[1284,36292+32]..[1284,36292+38])
                                                            Ppat_var "symbol" (src/grammarFunctor.ml[1284,36292+32]..[1284,36292+38])
                                                          expression (src/grammarFunctor.ml[1285,36334+8]..[1296,36789+25])
                                                            Pexp_match
                                                            expression (src/grammarFunctor.ml[1285,36334+14]..[1285,36334+20])
                                                              Pexp_ident "symbol" (src/grammarFunctor.ml[1285,36334+14]..[1285,36334+20])
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1286,36360+10]..[1286,36360+20])
                                                                  Ppat_construct "Symbol.T" (src/grammarFunctor.ml[1286,36360+10]..[1286,36360+18])
                                                                  Some
                                                                    []
                                                                    pattern (src/grammarFunctor.ml[1286,36360+19]..[1286,36360+20])
                                                                      Ppat_any
                                                                expression (src/grammarFunctor.ml[1286,36360+26]..[1286,36360+28])
                                                                  Pexp_construct "()" (src/grammarFunctor.ml[1286,36360+26]..[1286,36360+28])
                                                                  None
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1287,36389+10]..[1287,36389+22])
                                                                  Ppat_construct "Symbol.N" (src/grammarFunctor.ml[1287,36389+10]..[1287,36389+18])
                                                                  Some
                                                                    []
                                                                    pattern (src/grammarFunctor.ml[1287,36389+19]..[1287,36389+22])
                                                                      Ppat_var "nt'" (src/grammarFunctor.ml[1287,36389+19]..[1287,36389+22])
                                                                expression (src/grammarFunctor.ml[1291,36629+12]..[1296,36789+25])
                                                                  Pexp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (src/grammarFunctor.ml[1291,36629+16]..[1291,36629+19])
Ppat_var "gnw" (src/grammarFunctor.ml[1291,36629+16]..[1291,36629+19])
                                                                      expression (src/grammarFunctor.ml[1292,36651+14]..[1294,36754+19])
Pexp_apply
expression (src/grammarFunctor.ml[1292,36651+14]..[1292,36651+28])
  Pexp_ident "MArray.existsi" (src/grammarFunctor.ml[1292,36651+14]..[1292,36651+28])
[
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[1292,36651+29]..[1294,36754+15])
      Pexp_fun
      Nolabel
      None
      pattern (src/grammarFunctor.ml[1292,36651+34]..[1292,36651+35])
        Ppat_var "j" (src/grammarFunctor.ml[1292,36651+34]..[1292,36651+35])
      expression (src/grammarFunctor.ml[1292,36651+36]..[1293,36697+56]) ghost
        Pexp_fun
        Nolabel
        None
        pattern (src/grammarFunctor.ml[1292,36651+36]..[1292,36651+42])
          Ppat_var "symbol" (src/grammarFunctor.ml[1292,36651+36]..[1292,36651+42])
        expression (src/grammarFunctor.ml[1293,36697+16]..[1293,36697+56])
          Pexp_apply
          expression (src/grammarFunctor.ml[1293,36697+23]..[1293,36697+25])
            Pexp_ident "&&" (src/grammarFunctor.ml[1293,36697+23]..[1293,36697+25])
          [
            <arg>
            Nolabel
              expression (src/grammarFunctor.ml[1293,36697+16]..[1293,36697+22])
                Pexp_apply
                expression (src/grammarFunctor.ml[1293,36697+18]..[1293,36697+20])
                  Pexp_ident "<>" (src/grammarFunctor.ml[1293,36697+18]..[1293,36697+20])
                [
                  <arg>
                  Nolabel
                    expression (src/grammarFunctor.ml[1293,36697+16]..[1293,36697+17])
                      Pexp_ident "i" (src/grammarFunctor.ml[1293,36697+16]..[1293,36697+17])
                  <arg>
                  Nolabel
                    expression (src/grammarFunctor.ml[1293,36697+21]..[1293,36697+22])
                      Pexp_ident "j" (src/grammarFunctor.ml[1293,36697+21]..[1293,36697+22])
                ]
            <arg>
            Nolabel
              expression (src/grammarFunctor.ml[1293,36697+26]..[1293,36697+56])
                Pexp_apply
                expression (src/grammarFunctor.ml[1293,36697+26]..[1293,36697+49])
                  Pexp_ident "generates_nonempty_word" (src/grammarFunctor.ml[1293,36697+26]..[1293,36697+49])
                [
                  <arg>
                  Nolabel
                    expression (src/grammarFunctor.ml[1293,36697+50]..[1293,36697+56])
                      Pexp_ident "symbol" (src/grammarFunctor.ml[1293,36697+50]..[1293,36697+56])
                ]
          ]
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[1294,36754+16]..[1294,36754+19])
      Pexp_ident "rhs" (src/grammarFunctor.ml[1294,36754+16]..[1294,36754+19])
]
                                                                  ]
                                                                  expression (src/grammarFunctor.ml[1296,36789+12]..[1296,36789+25])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[1296,36789+12]..[1296,36789+17])
                                                                      Pexp_ident "yield" (src/grammarFunctor.ml[1296,36789+12]..[1296,36789+17])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1296,36789+18]..[1296,36789+21])
  Pexp_ident "gnw" (src/grammarFunctor.ml[1296,36789+18]..[1296,36789+21])
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1296,36789+22]..[1296,36789+25])
  Pexp_ident "nt'" (src/grammarFunctor.ml[1296,36789+22]..[1296,36789+25])
                                                                    ]
                                                            ]
                                                  ]
                                            ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1299,36829+2]..[1300,36857+53])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1299,36829+6]..[1299,36829+16])
                              Ppat_var "successors" (src/grammarFunctor.ml[1299,36829+6]..[1299,36829+16])
                            expression (src/grammarFunctor.ml[1299,36829+17]..[1300,36857+53]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1299,36829+17]..[1299,36829+22])
                                Ppat_var "yield" (src/grammarFunctor.ml[1299,36829+17]..[1299,36829+22])
                              expression (src/grammarFunctor.ml[1299,36829+23]..[1300,36857+53]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1299,36829+23]..[1299,36829+25])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1299,36829+23]..[1299,36829+25])
                                expression (src/grammarFunctor.ml[1300,36857+4]..[1300,36857+53])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1300,36857+4]..[1300,36857+22])
                                    Pexp_ident "labeled_successors" (src/grammarFunctor.ml[1300,36857+4]..[1300,36857+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1300,36857+23]..[1300,36857+50])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1300,36857+28]..[1300,36857+32])
                                          Ppat_var "_gnw" (src/grammarFunctor.ml[1300,36857+28]..[1300,36857+32])
                                        expression (src/grammarFunctor.ml[1300,36857+33]..[1300,36857+49]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/grammarFunctor.ml[1300,36857+33]..[1300,36857+36])
                                            Ppat_var "nt'" (src/grammarFunctor.ml[1300,36857+33]..[1300,36857+36])
                                          expression (src/grammarFunctor.ml[1300,36857+40]..[1300,36857+49])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1300,36857+40]..[1300,36857+45])
                                              Pexp_ident "yield" (src/grammarFunctor.ml[1300,36857+40]..[1300,36857+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1300,36857+46]..[1300,36857+49])
                                                  Pexp_ident "nt'" (src/grammarFunctor.ml[1300,36857+46]..[1300,36857+49])
                                            ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1300,36857+51]..[1300,36857+53])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[1300,36857+51]..[1300,36857+53])
                                  ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1309,37254+0]..[1326,37913+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1309,37254+4]..[1309,37254+13])
                      Ppat_var "unbounded" (src/grammarFunctor.ml[1309,37254+4]..[1309,37254+13])
                    core_type (src/grammarFunctor.ml[1309,37254+16]..[1309,37254+33])
                      Ptyp_constr "Lazy.t" (src/grammarFunctor.ml[1309,37254+27]..[1309,37254+33])
                      [
                        core_type (src/grammarFunctor.ml[1309,37254+16]..[1309,37254+26])
                          Ptyp_constr "array" (src/grammarFunctor.ml[1309,37254+21]..[1309,37254+26])
                          [
                            core_type (src/grammarFunctor.ml[1309,37254+16]..[1309,37254+20])
                              Ptyp_constr "bool" (src/grammarFunctor.ml[1309,37254+16]..[1309,37254+20])
                              []
                          ]
                      ]
                    expression (src/grammarFunctor.ml[1310,37290+2]..[1326,37913+5])
                      Pexp_lazy
                      expression (src/grammarFunctor.ml[1310,37290+7]..[1326,37913+5])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1311,37303+8]..[1311,37303+17])
                              Ppat_var "unbounded" (src/grammarFunctor.ml[1311,37303+8]..[1311,37303+17])
                            expression (src/grammarFunctor.ml[1311,37303+20]..[1311,37303+50])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1311,37303+20]..[1311,37303+30])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[1311,37303+20]..[1311,37303+30])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1311,37303+31]..[1311,37303+44])
                                    Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1311,37303+31]..[1311,37303+44])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1311,37303+45]..[1311,37303+50])
                                    Pexp_construct "false" (src/grammarFunctor.ml[1311,37303+45]..[1311,37303+50])
                                    None
                              ]
                        ]
                        expression (src/grammarFunctor.ml[1312,37357+4]..[1325,37899+13])
                          Pexp_letmodule "T" (src/grammarFunctor.ml[1312,37357+15]..[1312,37357+16])
                          module_expr (src/grammarFunctor.ml[1312,37357+19]..[1312,37357+32])
                            Pmod_apply
                            module_expr (src/grammarFunctor.ml[1312,37357+19]..[1312,37357+29])
                              Pmod_ident "Tarjan.Run" (src/grammarFunctor.ml[1312,37357+19]..[1312,37357+29])
                            module_expr (src/grammarFunctor.ml[1312,37357+30]..[1312,37357+31])
                              Pmod_ident "G" (src/grammarFunctor.ml[1312,37357+30]..[1312,37357+31])
                          expression (src/grammarFunctor.ml[1314,37449+4]..[1325,37899+13])
                            Pexp_sequence
                            expression (src/grammarFunctor.ml[1314,37449+4]..[1324,37890+7])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1314,37449+4]..[1314,37449+10])
                                Pexp_ident "G.iter" (src/grammarFunctor.ml[1314,37449+4]..[1314,37449+10])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1314,37449+11]..[1324,37890+7])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1314,37449+21]..[1314,37449+23])
                                      Ppat_var "nt" (src/grammarFunctor.ml[1314,37449+21]..[1314,37449+23])
                                    expression (src/grammarFunctor.ml[1315,37476+6]..[1323,37880+9])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1315,37476+9]..[1315,37476+11])
                                        Pexp_ident "|>" (src/grammarFunctor.ml[1315,37476+9]..[1315,37476+11])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1315,37476+6]..[1315,37476+8])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[1315,37476+6]..[1315,37476+8])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1315,37476+12]..[1323,37880+9])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1315,37476+12]..[1315,37476+32])
                                              Pexp_ident "G.labeled_successors" (src/grammarFunctor.ml[1315,37476+12]..[1315,37476+32])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1315,37476+33]..[1323,37880+9])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[1315,37476+43]..[1315,37476+46])
                                                    Ppat_var "gnw" (src/grammarFunctor.ml[1315,37476+43]..[1315,37476+46])
                                                  expression (src/grammarFunctor.ml[1315,37476+47]..[1322,37868+11]) ghost
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (src/grammarFunctor.ml[1315,37476+47]..[1315,37476+50])
                                                      Ppat_var "nt'" (src/grammarFunctor.ml[1315,37476+47]..[1315,37476+50])
                                                    expression (src/grammarFunctor.ml[1317,37609+8]..[1322,37868+11])
                                                      Pexp_ifthenelse
                                                      expression (src/grammarFunctor.ml[1317,37609+11]..[1317,37609+60])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1317,37609+15]..[1317,37609+17])
                                                          Pexp_ident "&&" (src/grammarFunctor.ml[1317,37609+15]..[1317,37609+17])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1317,37609+11]..[1317,37609+14])
                                                              Pexp_ident "gnw" (src/grammarFunctor.ml[1317,37609+11]..[1317,37609+14])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1317,37609+18]..[1317,37609+60])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1317,37609+38]..[1317,37609+39])
                                                                Pexp_ident "=" (src/grammarFunctor.ml[1317,37609+38]..[1317,37609+39])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1317,37609+18]..[1317,37609+37])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[1317,37609+18]..[1317,37609+34])
                                                                      Pexp_ident "T.representative" (src/grammarFunctor.ml[1317,37609+18]..[1317,37609+34])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1317,37609+35]..[1317,37609+37])
  Pexp_ident "nt" (src/grammarFunctor.ml[1317,37609+35]..[1317,37609+37])
                                                                    ]
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1317,37609+40]..[1317,37609+60])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[1317,37609+40]..[1317,37609+56])
                                                                      Pexp_ident "T.representative" (src/grammarFunctor.ml[1317,37609+40]..[1317,37609+56])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1317,37609+57]..[1317,37609+60])
  Pexp_ident "nt'" (src/grammarFunctor.ml[1317,37609+57]..[1317,37609+60])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[1317,37609+66]..[1322,37868+11])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1319,37752+38]..[1319,37752+40])
                                                          Pexp_ident "|>" (src/grammarFunctor.ml[1319,37752+38]..[1319,37752+40])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1319,37752+10]..[1319,37752+37])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1319,37752+10]..[1319,37752+15])
                                                                Pexp_ident "T.scc" (src/grammarFunctor.ml[1319,37752+10]..[1319,37752+15])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1319,37752+16]..[1319,37752+37])
                                                                    Pexp_apply
                                                                    expression (src/grammarFunctor.ml[1319,37752+17]..[1319,37752+33])
                                                                      Pexp_ident "T.representative" (src/grammarFunctor.ml[1319,37752+17]..[1319,37752+33])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (src/grammarFunctor.ml[1319,37752+34]..[1319,37752+36])
  Pexp_ident "nt" (src/grammarFunctor.ml[1319,37752+34]..[1319,37752+36])
                                                                    ]
                                                              ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1319,37752+41]..[1321,37854+13])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1319,37752+41]..[1319,37752+50])
                                                                Pexp_ident "List.iter" (src/grammarFunctor.ml[1319,37752+41]..[1319,37752+50])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1319,37752+51]..[1321,37854+13])
                                                                    Pexp_fun
                                                                    Nolabel
                                                                    None
                                                                    pattern (src/grammarFunctor.ml[1319,37752+61]..[1319,37752+63])
                                                                      Ppat_var "nt" (src/grammarFunctor.ml[1319,37752+61]..[1319,37752+63])
                                                                    expression (src/grammarFunctor.ml[1320,37819+12]..[1320,37819+34])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[1320,37819+12]..[1320,37819+34]) ghost
Pexp_ident "Array.set" (src/grammarFunctor.ml[1320,37819+12]..[1320,37819+34]) ghost
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1320,37819+12]..[1320,37819+21])
    Pexp_ident "unbounded" (src/grammarFunctor.ml[1320,37819+12]..[1320,37819+21])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1320,37819+23]..[1320,37819+25])
    Pexp_ident "nt" (src/grammarFunctor.ml[1320,37819+23]..[1320,37819+25])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1320,37819+30]..[1320,37819+34])
    Pexp_construct "true" (src/grammarFunctor.ml[1320,37819+30]..[1320,37819+34])
    None
                                                                      ]
                                                              ]
                                                        ]
                                                      None
                                            ]
                                      ]
                              ]
                            expression (src/grammarFunctor.ml[1325,37899+4]..[1325,37899+13])
                              Pexp_ident "unbounded" (src/grammarFunctor.ml[1325,37899+4]..[1325,37899+13])
                ]
              structure_item (src/grammarFunctor.ml[1328,37920+0]..[1329,37946+29])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1328,37920+4]..[1328,37920+13])
                      Ppat_var "unbounded" (src/grammarFunctor.ml[1328,37920+4]..[1328,37920+13])
                    expression (src/grammarFunctor.ml[1328,37920+14]..[1329,37946+29]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1328,37920+14]..[1328,37920+16])
                        Ppat_var "nt" (src/grammarFunctor.ml[1328,37920+14]..[1328,37920+16])
                      expression (src/grammarFunctor.ml[1328,37920+17]..[1329,37946+29])
                        Pexp_constraint
                        expression (src/grammarFunctor.ml[1329,37946+2]..[1329,37946+29])
                          Pexp_apply
                          expression (src/grammarFunctor.ml[1329,37946+2]..[1329,37946+29]) ghost
                            Pexp_ident "Array.get" (src/grammarFunctor.ml[1329,37946+2]..[1329,37946+29]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1329,37946+2]..[1329,37946+24])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1329,37946+3]..[1329,37946+13])
                                  Pexp_ident "Lazy.force" (src/grammarFunctor.ml[1329,37946+3]..[1329,37946+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1329,37946+14]..[1329,37946+23])
                                      Pexp_ident "unbounded" (src/grammarFunctor.ml[1329,37946+14]..[1329,37946+23])
                                ]
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1329,37946+26]..[1329,37946+28])
                                Pexp_ident "nt" (src/grammarFunctor.ml[1329,37946+26]..[1329,37946+28])
                          ]
                        core_type (src/grammarFunctor.ml[1328,37920+19]..[1328,37920+23])
                          Ptyp_constr "bool" (src/grammarFunctor.ml[1328,37920+19]..[1328,37920+23])
                          []
                ]
              structure_item (src/grammarFunctor.ml[1343,38754+0]..[1357,39295+9])
                Pstr_module
                "MAXIMAL" (src/grammarFunctor.ml[1343,38754+7]..[1343,38754+14])
                  module_expr (src/grammarFunctor.ml[1344,38771+2]..[1357,39295+9])
                    Pmod_apply
                    module_expr (src/grammarFunctor.ml[1344,38771+2]..[1345,38789+20])
                      Pmod_apply
                      module_expr (src/grammarFunctor.ml[1344,38771+2]..[1344,38771+17])
                        Pmod_ident "GenericAnalysis" (src/grammarFunctor.ml[1344,38771+2]..[1344,38771+17])
                      module_expr (src/grammarFunctor.ml[1345,38789+5]..[1345,38789+19])
                        Pmod_ident "NatInfinityMax" (src/grammarFunctor.ml[1345,38789+5]..[1345,38789+19])
                    module_expr (src/grammarFunctor.ml[1346,38810+5]..[1357,39295+8])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1347,38822+6]..[1347,38822+25])
                          Pstr_open Fresh
                          module_expr (src/grammarFunctor.ml[1347,38822+11]..[1347,38822+25])
                            Pmod_ident "NatInfinityMax" (src/grammarFunctor.ml[1347,38822+11]..[1347,38822+25])
                        structure_item (src/grammarFunctor.ml[1348,38848+6]..[1348,38848+68])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1348,38848+10]..[1348,38848+18])
                                Ppat_var "shortcut" (src/grammarFunctor.ml[1348,38848+10]..[1348,38848+18])
                              expression (src/grammarFunctor.ml[1348,38848+19]..[1348,38848+68]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1348,38848+19]..[1348,38848+21])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1348,38848+19]..[1348,38848+21])
                                expression (src/grammarFunctor.ml[1348,38848+24]..[1348,38848+68])
                                  Pexp_ifthenelse
                                  expression (src/grammarFunctor.ml[1348,38848+27]..[1348,38848+39])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1348,38848+27]..[1348,38848+36])
                                      Pexp_ident "unbounded" (src/grammarFunctor.ml[1348,38848+27]..[1348,38848+36])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1348,38848+37]..[1348,38848+39])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[1348,38848+37]..[1348,38848+39])
                                    ]
                                  expression (src/grammarFunctor.ml[1348,38848+45]..[1348,38848+58])
                                    Pexp_construct "Some" (src/grammarFunctor.ml[1348,38848+45]..[1348,38848+49])
                                    Some
                                      expression (src/grammarFunctor.ml[1348,38848+50]..[1348,38848+58])
                                        Pexp_ident "infinity" (src/grammarFunctor.ml[1348,38848+50]..[1348,38848+58])
                                  Some
                                    expression (src/grammarFunctor.ml[1348,38848+64]..[1348,38848+68])
                                      Pexp_construct "None" (src/grammarFunctor.ml[1348,38848+64]..[1348,38848+68])
                                      None
                          ]
                        structure_item (src/grammarFunctor.ml[1350,38961+6]..[1350,38961+34])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1350,38961+10]..[1350,38961+18])
                                Ppat_var "terminal" (src/grammarFunctor.ml[1350,38961+10]..[1350,38961+18])
                              expression (src/grammarFunctor.ml[1350,38961+19]..[1350,38961+34]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1350,38961+19]..[1350,38961+23])
                                  Ppat_var "_tok" (src/grammarFunctor.ml[1350,38961+19]..[1350,38961+23])
                                expression (src/grammarFunctor.ml[1350,38961+26]..[1350,38961+34])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1350,38961+26]..[1350,38961+32])
                                    Pexp_ident "finite" (src/grammarFunctor.ml[1350,38961+26]..[1350,38961+32])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1350,38961+33]..[1350,38961+34])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                          ]
                        structure_item (src/grammarFunctor.ml[1352,39074+6]..[1352,39074+32])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1352,39074+10]..[1352,39074+21])
                                Ppat_var "disjunction" (src/grammarFunctor.ml[1352,39074+10]..[1352,39074+21])
                              expression (src/grammarFunctor.ml[1352,39074+24]..[1352,39074+32])
                                Pexp_ident "max_lazy" (src/grammarFunctor.ml[1352,39074+24]..[1352,39074+32])
                          ]
                        structure_item (src/grammarFunctor.ml[1354,39186+6]..[1354,39186+34])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1354,39186+10]..[1354,39186+21])
                                Ppat_var "conjunction" (src/grammarFunctor.ml[1354,39186+10]..[1354,39186+21])
                              expression (src/grammarFunctor.ml[1354,39186+22]..[1354,39186+34]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1354,39186+22]..[1354,39186+23])
                                  Ppat_any
                                expression (src/grammarFunctor.ml[1354,39186+26]..[1354,39186+34])
                                  Pexp_ident "add_lazy" (src/grammarFunctor.ml[1354,39186+26]..[1354,39186+34])
                          ]
                        structure_item (src/grammarFunctor.ml[1356,39268+6]..[1356,39268+26])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1356,39268+10]..[1356,39268+17])
                                Ppat_var "epsilon" (src/grammarFunctor.ml[1356,39268+10]..[1356,39268+17])
                              expression (src/grammarFunctor.ml[1356,39268+20]..[1356,39268+26])
                                Pexp_ident "bottom" (src/grammarFunctor.ml[1356,39268+20]..[1356,39268+26])
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1361,39386+0]..[1387,40583+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1361,39386+4]..[1361,39386+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1361,39386+4]..[1361,39386+6])
                      None
                    expression (src/grammarFunctor.ml[1362,39395+2]..[1387,40583+5])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1362,39395+5]..[1362,39395+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1362,39395+5]..[1362,39395+12])
                      expression (src/grammarFunctor.ml[1362,39395+18]..[1387,40583+5])
                        Pexp_sequence
                        expression (src/grammarFunctor.ml[1369,39776+4]..[1379,40223+27])
                          Pexp_apply
                          expression (src/grammarFunctor.ml[1369,39776+4]..[1369,39776+18])
                            Pexp_ident "StringSet.iter" (src/grammarFunctor.ml[1369,39776+4]..[1369,39776+18])
                          [
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1369,39776+19]..[1379,40223+5])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1369,39776+24]..[1369,39776+30])
                                  Ppat_var "symbol" (src/grammarFunctor.ml[1369,39776+24]..[1369,39776+30])
                                expression (src/grammarFunctor.ml[1370,39810+6]..[1378,40145+77])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1370,39810+10]..[1370,39810+12])
                                        Ppat_var "nt" (src/grammarFunctor.ml[1370,39810+10]..[1370,39810+12])
                                      expression (src/grammarFunctor.ml[1370,39810+15]..[1370,39810+40])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1370,39810+15]..[1370,39810+33])
                                          Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[1370,39810+15]..[1370,39810+33])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1370,39810+34]..[1370,39810+40])
                                              Pexp_ident "symbol" (src/grammarFunctor.ml[1370,39810+34]..[1370,39810+40])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[1371,39854+6]..[1378,40145+77])
                                    Pexp_sequence
                                    expression (src/grammarFunctor.ml[1371,39854+6]..[1374,39955+73])
                                      Pexp_ifthenelse
                                      expression (src/grammarFunctor.ml[1371,39854+9]..[1371,39854+38])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1371,39854+9]..[1371,39854+12])
                                          Pexp_ident "not" (src/grammarFunctor.ml[1371,39854+9]..[1371,39854+12])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1371,39854+13]..[1371,39854+38])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1371,39854+14]..[1371,39854+34])
                                                Pexp_ident "NONEMPTY.nonterminal" (src/grammarFunctor.ml[1371,39854+14]..[1371,39854+34])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1371,39854+35]..[1371,39854+37])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1371,39854+35]..[1371,39854+37])
                                              ]
                                        ]
                                      expression (src/grammarFunctor.ml[1372,39898+8]..[1374,39955+73])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1372,39898+8]..[1372,39898+19])
                                          Pexp_ident "Error.error" (src/grammarFunctor.ml[1372,39898+8]..[1372,39898+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1373,39918+10]..[1373,39918+36])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1373,39918+11]..[1373,39918+32])
                                                Pexp_ident "Nonterminal.positions" (src/grammarFunctor.ml[1373,39918+11]..[1373,39918+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1373,39918+33]..[1373,39918+35])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1373,39918+33]..[1373,39918+35])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1374,39955+10]..[1374,39955+44])
                                              Pexp_constant PConst_string("%s generates the empty language.",(src/grammarFunctor.ml[1374,39955+11]..[1374,39955+43]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1374,39955+45]..[1374,39955+73])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1374,39955+46]..[1374,39955+63])
                                                Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1374,39955+46]..[1374,39955+63])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1374,39955+64]..[1374,39955+69])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1374,39955+64]..[1374,39955+69])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1374,39955+70]..[1374,39955+72])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1374,39955+70]..[1374,39955+72])
                                              ]
                                        ]
                                      None
                                    expression (src/grammarFunctor.ml[1375,40030+6]..[1378,40145+77])
                                      Pexp_ifthenelse
                                      expression (src/grammarFunctor.ml[1375,40030+9]..[1375,40030+52])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1375,40030+9]..[1375,40030+29])
                                          Pexp_ident "TerminalSet.is_empty" (src/grammarFunctor.ml[1375,40030+9]..[1375,40030+29])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1375,40030+30]..[1375,40030+52])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1375,40030+31]..[1375,40030+48])
                                                Pexp_ident "FIRST.nonterminal" (src/grammarFunctor.ml[1375,40030+31]..[1375,40030+48])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1375,40030+49]..[1375,40030+51])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1375,40030+49]..[1375,40030+51])
                                              ]
                                        ]
                                      expression (src/grammarFunctor.ml[1376,40088+8]..[1378,40145+77])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1376,40088+8]..[1376,40088+19])
                                          Pexp_ident "Error.error" (src/grammarFunctor.ml[1376,40088+8]..[1376,40088+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1377,40108+10]..[1377,40108+36])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1377,40108+11]..[1377,40108+32])
                                                Pexp_ident "Nonterminal.positions" (src/grammarFunctor.ml[1377,40108+11]..[1377,40108+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1377,40108+33]..[1377,40108+35])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1377,40108+33]..[1377,40108+35])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1378,40145+10]..[1378,40145+48])
                                              Pexp_constant PConst_string("%s generates the language {epsilon}.",(src/grammarFunctor.ml[1378,40145+11]..[1378,40145+47]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1378,40145+49]..[1378,40145+77])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1378,40145+50]..[1378,40145+67])
                                                Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1378,40145+50]..[1378,40145+67])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1378,40145+68]..[1378,40145+73])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1378,40145+68]..[1378,40145+73])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1378,40145+74]..[1378,40145+76])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1378,40145+74]..[1378,40145+76])
                                              ]
                                        ]
                                      None
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1379,40223+6]..[1379,40223+27])
                                Pexp_field
                                expression (src/grammarFunctor.ml[1379,40223+6]..[1379,40223+13])
                                  Pexp_ident "grammar" (src/grammarFunctor.ml[1379,40223+6]..[1379,40223+13])
                                "start_symbols" (src/grammarFunctor.ml[1379,40223+14]..[1379,40223+27])
                          ]
                        expression (src/grammarFunctor.ml[1381,40333+4]..[1386,40574+8])
                          Pexp_for Up
                          pattern (src/grammarFunctor.ml[1381,40333+8]..[1381,40333+10])
                            Ppat_var "nt" (src/grammarFunctor.ml[1381,40333+8]..[1381,40333+10])
                          expression (src/grammarFunctor.ml[1381,40333+13]..[1381,40333+30])
                            Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1381,40333+13]..[1381,40333+30])
                          expression (src/grammarFunctor.ml[1381,40333+34]..[1381,40333+51])
                            Pexp_apply
                            expression (src/grammarFunctor.ml[1381,40333+48]..[1381,40333+49])
                              Pexp_ident "-" (src/grammarFunctor.ml[1381,40333+48]..[1381,40333+49])
                            [
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1381,40333+34]..[1381,40333+47])
                                  Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1381,40333+34]..[1381,40333+47])
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1381,40333+50]..[1381,40333+51])
                                  Pexp_constant PConst_int (1,None)
                            ]
                          expression (src/grammarFunctor.ml[1382,40388+6]..[1385,40499+73])
                            Pexp_ifthenelse
                            expression (src/grammarFunctor.ml[1382,40388+9]..[1382,40388+38])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1382,40388+9]..[1382,40388+12])
                                Pexp_ident "not" (src/grammarFunctor.ml[1382,40388+9]..[1382,40388+12])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1382,40388+13]..[1382,40388+38])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1382,40388+14]..[1382,40388+34])
                                      Pexp_ident "NONEMPTY.nonterminal" (src/grammarFunctor.ml[1382,40388+14]..[1382,40388+34])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1382,40388+35]..[1382,40388+37])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[1382,40388+35]..[1382,40388+37])
                                    ]
                              ]
                            expression (src/grammarFunctor.ml[1383,40432+8]..[1385,40499+73])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1383,40432+8]..[1383,40432+29])
                                Pexp_ident "Error.grammar_warning" (src/grammarFunctor.ml[1383,40432+8]..[1383,40432+29])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1384,40462+10]..[1384,40462+36])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1384,40462+11]..[1384,40462+32])
                                      Pexp_ident "Nonterminal.positions" (src/grammarFunctor.ml[1384,40462+11]..[1384,40462+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1384,40462+33]..[1384,40462+35])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[1384,40462+33]..[1384,40462+35])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1385,40499+10]..[1385,40499+44])
                                    Pexp_constant PConst_string("%s generates the empty language.",(src/grammarFunctor.ml[1385,40499+11]..[1385,40499+43]),None)
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1385,40499+45]..[1385,40499+73])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1385,40499+46]..[1385,40499+63])
                                      Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1385,40499+46]..[1385,40499+63])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1385,40499+64]..[1385,40499+69])
                                          Pexp_construct "false" (src/grammarFunctor.ml[1385,40499+64]..[1385,40499+69])
                                          None
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1385,40499+70]..[1385,40499+72])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[1385,40499+70]..[1385,40499+72])
                                    ]
                              ]
                            None
                      None
                ]
              structure_item (src/grammarFunctor.ml[1392,40703+0]..[1415,41597+3])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1392,40703+4]..[1392,40703+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1392,40703+4]..[1392,40703+6])
                      None
                    expression (src/grammarFunctor.ml[1393,40712+2]..[1415,41597+3])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1393,40712+5]..[1393,40712+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1393,40712+5]..[1393,40712+12])
                      expression (src/grammarFunctor.ml[1394,40730+4]..[1415,41597+3])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1394,40730+4]..[1394,40730+14])
                          Pexp_ident "Error.logG" (src/grammarFunctor.ml[1394,40730+4]..[1394,40730+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1394,40730+15]..[1394,40730+16])
                              Pexp_constant PConst_int (2,None)
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1394,40730+17]..[1415,41597+3])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1394,40730+22]..[1394,40730+23])
                                Ppat_var "f" (src/grammarFunctor.ml[1394,40730+22]..[1394,40730+23])
                              expression (src/grammarFunctor.ml[1395,40757+6]..[1414,41585+11])
                                Pexp_sequence
                                expression (src/grammarFunctor.ml[1395,40757+6]..[1399,40936+10])
                                  Pexp_for Up
                                  pattern (src/grammarFunctor.ml[1395,40757+10]..[1395,40757+12])
                                    Ppat_var "nt" (src/grammarFunctor.ml[1395,40757+10]..[1395,40757+12])
                                  expression (src/grammarFunctor.ml[1395,40757+15]..[1395,40757+32])
                                    Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1395,40757+15]..[1395,40757+32])
                                  expression (src/grammarFunctor.ml[1395,40757+36]..[1395,40757+53])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1395,40757+50]..[1395,40757+51])
                                      Pexp_ident "-" (src/grammarFunctor.ml[1395,40757+50]..[1395,40757+51])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1395,40757+36]..[1395,40757+49])
                                          Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1395,40757+36]..[1395,40757+49])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1395,40757+52]..[1395,40757+53])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                  expression (src/grammarFunctor.ml[1396,40814+8]..[1398,40900+35])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1396,40814+8]..[1396,40814+22])
                                      Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1396,40814+8]..[1396,40814+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1396,40814+23]..[1396,40814+24])
                                          Pexp_ident "f" (src/grammarFunctor.ml[1396,40814+23]..[1396,40814+24])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1396,40814+25]..[1396,40814+46])
                                          Pexp_constant PConst_string("nullable(%s) = %b\n",(src/grammarFunctor.ml[1396,40814+26]..[1396,40814+45]),None)
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1397,40861+10]..[1397,40861+38])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1397,40861+11]..[1397,40861+28])
                                            Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1397,40861+11]..[1397,40861+28])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1397,40861+29]..[1397,40861+34])
                                                Pexp_construct "false" (src/grammarFunctor.ml[1397,40861+29]..[1397,40861+34])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1397,40861+35]..[1397,40861+37])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[1397,40861+35]..[1397,40861+37])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1398,40900+10]..[1398,40900+35])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1398,40900+11]..[1398,40900+31])
                                            Pexp_ident "NULLABLE.nonterminal" (src/grammarFunctor.ml[1398,40900+11]..[1398,40900+31])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1398,40900+32]..[1398,40900+34])
                                                Pexp_ident "nt" (src/grammarFunctor.ml[1398,40900+32]..[1398,40900+34])
                                          ]
                                    ]
                                expression (src/grammarFunctor.ml[1400,40948+6]..[1414,41585+11])
                                  Pexp_sequence
                                  expression (src/grammarFunctor.ml[1400,40948+6]..[1404,41141+10])
                                    Pexp_for Up
                                    pattern (src/grammarFunctor.ml[1400,40948+10]..[1400,40948+12])
                                      Ppat_var "nt" (src/grammarFunctor.ml[1400,40948+10]..[1400,40948+12])
                                    expression (src/grammarFunctor.ml[1400,40948+15]..[1400,40948+32])
                                      Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1400,40948+15]..[1400,40948+32])
                                    expression (src/grammarFunctor.ml[1400,40948+36]..[1400,40948+53])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1400,40948+50]..[1400,40948+51])
                                        Pexp_ident "-" (src/grammarFunctor.ml[1400,40948+50]..[1400,40948+51])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1400,40948+36]..[1400,40948+49])
                                            Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1400,40948+36]..[1400,40948+49])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1400,40948+52]..[1400,40948+53])
                                            Pexp_constant PConst_int (1,None)
                                      ]
                                    expression (src/grammarFunctor.ml[1401,41005+8]..[1403,41088+52])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1401,41005+8]..[1401,41005+22])
                                        Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1401,41005+8]..[1401,41005+22])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1401,41005+23]..[1401,41005+24])
                                            Pexp_ident "f" (src/grammarFunctor.ml[1401,41005+23]..[1401,41005+24])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1401,41005+25]..[1401,41005+43])
                                            Pexp_constant PConst_string("first(%s) = %s\n",(src/grammarFunctor.ml[1401,41005+26]..[1401,41005+42]),None)
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1402,41049+10]..[1402,41049+38])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1402,41049+11]..[1402,41049+28])
                                              Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1402,41049+11]..[1402,41049+28])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1402,41049+29]..[1402,41049+34])
                                                  Pexp_construct "false" (src/grammarFunctor.ml[1402,41049+29]..[1402,41049+34])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1402,41049+35]..[1402,41049+37])
                                                  Pexp_ident "nt" (src/grammarFunctor.ml[1402,41049+35]..[1402,41049+37])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1403,41088+10]..[1403,41088+52])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1403,41088+11]..[1403,41088+28])
                                              Pexp_ident "TerminalSet.print" (src/grammarFunctor.ml[1403,41088+11]..[1403,41088+28])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1403,41088+29]..[1403,41088+51])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1403,41088+30]..[1403,41088+47])
                                                    Pexp_ident "FIRST.nonterminal" (src/grammarFunctor.ml[1403,41088+30]..[1403,41088+47])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1403,41088+48]..[1403,41088+50])
                                                        Pexp_ident "nt" (src/grammarFunctor.ml[1403,41088+48]..[1403,41088+50])
                                                  ]
                                            ]
                                      ]
                                  expression (src/grammarFunctor.ml[1405,41153+6]..[1414,41585+11])
                                    Pexp_sequence
                                    expression (src/grammarFunctor.ml[1405,41153+6]..[1409,41373+10])
                                      Pexp_for Up
                                      pattern (src/grammarFunctor.ml[1405,41153+10]..[1405,41153+12])
                                        Ppat_var "nt" (src/grammarFunctor.ml[1405,41153+10]..[1405,41153+12])
                                      expression (src/grammarFunctor.ml[1405,41153+15]..[1405,41153+32])
                                        Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1405,41153+15]..[1405,41153+32])
                                      expression (src/grammarFunctor.ml[1405,41153+36]..[1405,41153+53])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1405,41153+50]..[1405,41153+51])
                                          Pexp_ident "-" (src/grammarFunctor.ml[1405,41153+50]..[1405,41153+51])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1405,41153+36]..[1405,41153+49])
                                              Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1405,41153+36]..[1405,41153+49])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1405,41153+52]..[1405,41153+53])
                                              Pexp_constant PConst_int (1,None)
                                        ]
                                      expression (src/grammarFunctor.ml[1406,41210+8]..[1408,41295+77])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1406,41210+8]..[1406,41210+22])
                                          Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1406,41210+8]..[1406,41210+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1406,41210+23]..[1406,41210+24])
                                              Pexp_ident "f" (src/grammarFunctor.ml[1406,41210+23]..[1406,41210+24])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1406,41210+25]..[1406,41210+45])
                                              Pexp_constant PConst_string("minimal(%s) = %s\n",(src/grammarFunctor.ml[1406,41210+26]..[1406,41210+44]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1407,41256+10]..[1407,41256+38])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1407,41256+11]..[1407,41256+28])
                                                Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1407,41256+11]..[1407,41256+28])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1407,41256+29]..[1407,41256+34])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1407,41256+29]..[1407,41256+34])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1407,41256+35]..[1407,41256+37])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1407,41256+35]..[1407,41256+37])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1408,41295+10]..[1408,41295+77])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1408,41295+11]..[1408,41295+36])
                                                Pexp_ident "CompletedNatWitness.print" (src/grammarFunctor.ml[1408,41295+11]..[1408,41295+36])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1408,41295+37]..[1408,41295+51])
                                                    Pexp_ident "Terminal.print" (src/grammarFunctor.ml[1408,41295+37]..[1408,41295+51])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1408,41295+52]..[1408,41295+76])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1408,41295+53]..[1408,41295+72])
                                                      Pexp_ident "MINIMAL.nonterminal" (src/grammarFunctor.ml[1408,41295+53]..[1408,41295+72])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1408,41295+73]..[1408,41295+75])
                                                          Pexp_ident "nt" (src/grammarFunctor.ml[1408,41295+73]..[1408,41295+75])
                                                    ]
                                              ]
                                        ]
                                    expression (src/grammarFunctor.ml[1410,41385+6]..[1414,41585+10])
                                      Pexp_for Up
                                      pattern (src/grammarFunctor.ml[1410,41385+10]..[1410,41385+12])
                                        Ppat_var "nt" (src/grammarFunctor.ml[1410,41385+10]..[1410,41385+12])
                                      expression (src/grammarFunctor.ml[1410,41385+15]..[1410,41385+32])
                                        Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1410,41385+15]..[1410,41385+32])
                                      expression (src/grammarFunctor.ml[1410,41385+36]..[1410,41385+53])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1410,41385+50]..[1410,41385+51])
                                          Pexp_ident "-" (src/grammarFunctor.ml[1410,41385+50]..[1410,41385+51])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1410,41385+36]..[1410,41385+49])
                                              Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1410,41385+36]..[1410,41385+49])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1410,41385+52]..[1410,41385+53])
                                              Pexp_constant PConst_int (1,None)
                                        ]
                                      expression (src/grammarFunctor.ml[1411,41442+8]..[1413,41527+57])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1411,41442+8]..[1411,41442+22])
                                          Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1411,41442+8]..[1411,41442+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1411,41442+23]..[1411,41442+24])
                                              Pexp_ident "f" (src/grammarFunctor.ml[1411,41442+23]..[1411,41442+24])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1411,41442+25]..[1411,41442+45])
                                              Pexp_constant PConst_string("maximal(%s) = %s\n",(src/grammarFunctor.ml[1411,41442+26]..[1411,41442+44]),None)
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1412,41488+10]..[1412,41488+38])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1412,41488+11]..[1412,41488+28])
                                                Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1412,41488+11]..[1412,41488+28])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1412,41488+29]..[1412,41488+34])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1412,41488+29]..[1412,41488+34])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1412,41488+35]..[1412,41488+37])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1412,41488+35]..[1412,41488+37])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1413,41527+10]..[1413,41527+57])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1413,41527+11]..[1413,41527+31])
                                                Pexp_ident "NatInfinityMax.print" (src/grammarFunctor.ml[1413,41527+11]..[1413,41527+31])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1413,41527+32]..[1413,41527+56])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1413,41527+33]..[1413,41527+52])
                                                      Pexp_ident "MAXIMAL.nonterminal" (src/grammarFunctor.ml[1413,41527+33]..[1413,41527+52])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1413,41527+53]..[1413,41527+55])
                                                          Pexp_ident "nt" (src/grammarFunctor.ml[1413,41527+53]..[1413,41527+55])
                                                    ]
                                              ]
                                        ]
                        ]
                      None
                ]
              structure_item (src/grammarFunctor.ml[1417,41602+0]..[1419,41629+39])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1417,41602+4]..[1417,41602+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1417,41602+4]..[1417,41602+6])
                      None
                    expression (src/grammarFunctor.ml[1418,41611+2]..[1419,41629+39])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1418,41611+5]..[1418,41611+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1418,41611+5]..[1418,41611+12])
                      expression (src/grammarFunctor.ml[1419,41629+4]..[1419,41629+39])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1419,41629+4]..[1419,41629+13])
                          Pexp_ident "Time.tick" (src/grammarFunctor.ml[1419,41629+4]..[1419,41629+13])
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1419,41629+14]..[1419,41629+39])
                              Pexp_constant PConst_string("Analysis of the grammar",(src/grammarFunctor.ml[1419,41629+15]..[1419,41629+38]),None)
                        ]
                      None
                ]
              structure_item (src/grammarFunctor.ml[1431,42180+0]..[1490,44083+3])
                Pstr_module
                "FOLLOW" (src/grammarFunctor.ml[1431,42180+7]..[1431,42180+13])
                  module_expr (src/grammarFunctor.ml[1431,42180+14]..[1490,44083+3])
                    Pmod_functor "P" (src/grammarFunctor.ml[1431,42180+15]..[1431,42180+16])
                    module_type (src/grammarFunctor.ml[1431,42180+19]..[1436,42349+3])
                      Pmty_signature
                      [
                        signature_item (src/grammarFunctor.ml[1432,42203+2]..[1432,42203+34])
                          Psig_include
                          module_type (src/grammarFunctor.ml[1432,42203+10]..[1432,42203+34])
                            Pmty_ident "Fix.MINIMAL_SEMI_LATTICE" (src/grammarFunctor.ml[1432,42203+10]..[1432,42203+34])
                        signature_item (src/grammarFunctor.ml[1433,42238+2]..[1433,42238+22])
                          Psig_value
                          value_description "bottom" (src/grammarFunctor.ml[1433,42238+6]..[1433,42238+12]) (src/grammarFunctor.ml[1433,42238+2]..[1433,42238+22])
                            core_type (src/grammarFunctor.ml[1433,42238+14]..[1433,42238+22])
                              Ptyp_constr "property" (src/grammarFunctor.ml[1433,42238+14]..[1433,42238+22])
                              []
                            []
                        signature_item (src/grammarFunctor.ml[1434,42261+2]..[1434,42261+38])
                          Psig_value
                          value_description "terminal" (src/grammarFunctor.ml[1434,42261+6]..[1434,42261+14]) (src/grammarFunctor.ml[1434,42261+2]..[1434,42261+38])
                            core_type (src/grammarFunctor.ml[1434,42261+16]..[1434,42261+38])
                              Ptyp_arrow
                              Nolabel
                              core_type (src/grammarFunctor.ml[1434,42261+16]..[1434,42261+26])
                                Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1434,42261+16]..[1434,42261+26])
                                []
                              core_type (src/grammarFunctor.ml[1434,42261+30]..[1434,42261+38])
                                Ptyp_constr "property" (src/grammarFunctor.ml[1434,42261+30]..[1434,42261+38])
                                []
                            []
                        signature_item (src/grammarFunctor.ml[1435,42300+2]..[1435,42300+48])
                          Psig_value
                          value_description "first" (src/grammarFunctor.ml[1435,42300+6]..[1435,42300+11]) (src/grammarFunctor.ml[1435,42300+2]..[1435,42300+48])
                            core_type (src/grammarFunctor.ml[1435,42300+13]..[1435,42300+48])
                              Ptyp_arrow
                              Nolabel
                              core_type (src/grammarFunctor.ml[1435,42300+13]..[1435,42300+29])
                                Ptyp_constr "Production.index" (src/grammarFunctor.ml[1435,42300+13]..[1435,42300+29])
                                []
                              core_type (src/grammarFunctor.ml[1435,42300+33]..[1435,42300+48])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1435,42300+33]..[1435,42300+36])
                                  Ptyp_constr "int" (src/grammarFunctor.ml[1435,42300+33]..[1435,42300+36])
                                  []
                                core_type (src/grammarFunctor.ml[1435,42300+40]..[1435,42300+48])
                                  Ptyp_constr "property" (src/grammarFunctor.ml[1435,42300+40]..[1435,42300+48])
                                  []
                            []
                      ]
                    module_expr (src/grammarFunctor.ml[1436,42349+7]..[1490,44083+3])
                      Pmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1438,42364+2]..[1439,42377+48])
                          Pstr_module
                          "M" (src/grammarFunctor.ml[1438,42364+9]..[1438,42364+10])
                            module_expr (src/grammarFunctor.ml[1439,42377+4]..[1439,42377+48])
                              Pmod_apply
                              module_expr (src/grammarFunctor.ml[1439,42377+4]..[1439,42377+35])
                                Pmod_ident "Fix.Glue.ArraysAsImperativeMaps" (src/grammarFunctor.ml[1439,42377+4]..[1439,42377+35])
                              module_expr (src/grammarFunctor.ml[1439,42377+36]..[1439,42377+47])
                                Pmod_ident "Nonterminal" (src/grammarFunctor.ml[1439,42377+36]..[1439,42377+47])
                        structure_item (src/grammarFunctor.ml[1441,42427+2]..[1442,42440+24])
                          Pstr_module
                          "S" (src/grammarFunctor.ml[1441,42427+9]..[1441,42427+10])
                            module_expr (src/grammarFunctor.ml[1442,42440+4]..[1442,42440+24])
                              Pmod_apply
                              module_expr (src/grammarFunctor.ml[1442,42440+4]..[1442,42440+21])
                                Pmod_apply
                                module_expr (src/grammarFunctor.ml[1442,42440+4]..[1442,42440+18])
                                  Pmod_ident "FixSolver.Make" (src/grammarFunctor.ml[1442,42440+4]..[1442,42440+18])
                                module_expr (src/grammarFunctor.ml[1442,42440+19]..[1442,42440+20])
                                  Pmod_ident "M" (src/grammarFunctor.ml[1442,42440+19]..[1442,42440+20])
                              module_expr (src/grammarFunctor.ml[1442,42440+22]..[1442,42440+23])
                                Pmod_ident "P" (src/grammarFunctor.ml[1442,42440+22]..[1442,42440+23])
                        structure_item (src/grammarFunctor.ml[1447,42546+2]..[1453,42758+8])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1447,42546+6]..[1447,42546+8])
                                Ppat_construct "()" (src/grammarFunctor.ml[1447,42546+6]..[1447,42546+8])
                                None
                              expression (src/grammarFunctor.ml[1448,42557+4]..[1453,42758+8])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1448,42557+8]..[1448,42557+13])
                                      Ppat_var "sharp" (src/grammarFunctor.ml[1448,42557+8]..[1448,42557+13])
                                    expression (src/grammarFunctor.ml[1448,42557+16]..[1448,42557+41])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1448,42557+16]..[1448,42557+26])
                                        Pexp_ident "P.terminal" (src/grammarFunctor.ml[1448,42557+16]..[1448,42557+26])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1448,42557+27]..[1448,42557+41])
                                            Pexp_ident "Terminal.sharp" (src/grammarFunctor.ml[1448,42557+27]..[1448,42557+41])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[1449,42602+4]..[1453,42758+8])
                                  Pexp_for Up
                                  pattern (src/grammarFunctor.ml[1449,42602+8]..[1449,42602+10])
                                    Ppat_var "nt" (src/grammarFunctor.ml[1449,42602+8]..[1449,42602+10])
                                  expression (src/grammarFunctor.ml[1449,42602+13]..[1449,42602+14])
                                    Pexp_constant PConst_int (0,None)
                                  expression (src/grammarFunctor.ml[1449,42602+18]..[1449,42602+39])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1449,42602+36]..[1449,42602+37])
                                      Pexp_ident "-" (src/grammarFunctor.ml[1449,42602+36]..[1449,42602+37])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1449,42602+18]..[1449,42602+35])
                                          Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1449,42602+18]..[1449,42602+35])
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1449,42602+38]..[1449,42602+39])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                                  expression (src/grammarFunctor.ml[1450,42645+6]..[1452,42727+30])
                                    Pexp_sequence
                                    expression (src/grammarFunctor.ml[1450,42645+6]..[1450,42645+47])
                                      Pexp_assert
                                      expression (src/grammarFunctor.ml[1450,42645+13]..[1450,42645+47])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1450,42645+14]..[1450,42645+43])
                                          Pexp_ident "Nonterminal.is_internal_start" (src/grammarFunctor.ml[1450,42645+14]..[1450,42645+43])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1450,42645+44]..[1450,42645+46])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[1450,42645+44]..[1450,42645+46])
                                        ]
                                    expression (src/grammarFunctor.ml[1452,42727+6]..[1452,42727+30])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1452,42727+6]..[1452,42727+21])
                                        Pexp_ident "S.record_ConVar" (src/grammarFunctor.ml[1452,42727+6]..[1452,42727+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1452,42727+22]..[1452,42727+27])
                                            Pexp_ident "sharp" (src/grammarFunctor.ml[1452,42727+22]..[1452,42727+27])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1452,42727+28]..[1452,42727+30])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[1452,42727+28]..[1452,42727+30])
                                      ]
                          ]
                        structure_item (src/grammarFunctor.ml[1459,43021+2]..[1477,43752+22])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1459,43021+6]..[1459,43021+8])
                                Ppat_construct "()" (src/grammarFunctor.ml[1459,43021+6]..[1459,43021+8])
                                None
                              expression (src/grammarFunctor.ml[1460,43032+4]..[1477,43752+22])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1460,43032+4]..[1460,43032+15])
                                  Pexp_ident "Array.iteri" (src/grammarFunctor.ml[1460,43032+4]..[1460,43032+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1460,43032+16]..[1477,43752+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1460,43032+21]..[1460,43032+25])
                                        Ppat_var "prod" (src/grammarFunctor.ml[1460,43032+21]..[1460,43032+25])
                                      expression (src/grammarFunctor.ml[1460,43032+26]..[1476,43740+11]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1460,43032+26]..[1460,43032+36])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[1460,43032+27]..[1460,43032+30])
                                              Ppat_var "nt1" (src/grammarFunctor.ml[1460,43032+27]..[1460,43032+30])
                                            pattern (src/grammarFunctor.ml[1460,43032+32]..[1460,43032+35])
                                              Ppat_var "rhs" (src/grammarFunctor.ml[1460,43032+32]..[1460,43032+35])
                                          ]
                                        expression (src/grammarFunctor.ml[1462,43151+6]..[1476,43740+11])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1462,43151+6]..[1462,43151+17])
                                            Pexp_ident "Array.iteri" (src/grammarFunctor.ml[1462,43151+6]..[1462,43151+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1462,43151+18]..[1476,43740+7])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (src/grammarFunctor.ml[1462,43151+23]..[1462,43151+24])
                                                  Ppat_var "i" (src/grammarFunctor.ml[1462,43151+23]..[1462,43151+24])
                                                expression (src/grammarFunctor.ml[1462,43151+25]..[1475,43702+37]) ghost
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[1462,43151+25]..[1462,43151+31])
                                                    Ppat_var "symbol" (src/grammarFunctor.ml[1462,43151+25]..[1462,43151+31])
                                                  expression (src/grammarFunctor.ml[1463,43186+8]..[1475,43702+37])
                                                    Pexp_match
                                                    expression (src/grammarFunctor.ml[1463,43186+14]..[1463,43186+20])
                                                      Pexp_ident "symbol" (src/grammarFunctor.ml[1463,43186+14]..[1463,43186+20])
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1464,43212+10]..[1464,43212+20])
                                                          Ppat_construct "Symbol.T" (src/grammarFunctor.ml[1464,43212+10]..[1464,43212+18])
                                                          Some
                                                            []
                                                            pattern (src/grammarFunctor.ml[1464,43212+19]..[1464,43212+20])
                                                              Ppat_any
                                                        expression (src/grammarFunctor.ml[1465,43236+12]..[1465,43236+14])
                                                          Pexp_construct "()" (src/grammarFunctor.ml[1465,43236+12]..[1465,43236+14])
                                                          None
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1466,43251+10]..[1466,43251+22])
                                                          Ppat_construct "Symbol.N" (src/grammarFunctor.ml[1466,43251+10]..[1466,43251+18])
                                                          Some
                                                            []
                                                            pattern (src/grammarFunctor.ml[1466,43251+19]..[1466,43251+22])
                                                              Ppat_var "nt2" (src/grammarFunctor.ml[1466,43251+19]..[1466,43251+22])
                                                        expression (src/grammarFunctor.ml[1467,43277+12]..[1475,43702+37])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[1467,43277+16]..[1467,43277+24])
                                                                Ppat_var "nullable" (src/grammarFunctor.ml[1467,43277+16]..[1467,43277+24])
                                                              expression (src/grammarFunctor.ml[1467,43277+27]..[1467,43277+57])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[1467,43277+27]..[1467,43277+46])
                                                                  Pexp_ident "NULLABLE.production" (src/grammarFunctor.ml[1467,43277+27]..[1467,43277+46])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1467,43277+47]..[1467,43277+51])
                                                                      Pexp_ident "prod" (src/grammarFunctor.ml[1467,43277+47]..[1467,43277+51])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1467,43277+52]..[1467,43277+57])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[1467,43277+54]..[1467,43277+55])
Pexp_ident "+" (src/grammarFunctor.ml[1467,43277+54]..[1467,43277+55])
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1467,43277+53]..[1467,43277+54])
    Pexp_ident "i" (src/grammarFunctor.ml[1467,43277+53]..[1467,43277+54])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1467,43277+55]..[1467,43277+56])
    Pexp_constant PConst_int (1,None)
                                                                      ]
                                                                ]
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[1468,43335+16]..[1468,43335+21])
                                                                Ppat_var "first" (src/grammarFunctor.ml[1468,43335+16]..[1468,43335+21])
                                                              expression (src/grammarFunctor.ml[1468,43335+24]..[1468,43335+42])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[1468,43335+24]..[1468,43335+31])
                                                                  Pexp_ident "P.first" (src/grammarFunctor.ml[1468,43335+24]..[1468,43335+31])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1468,43335+32]..[1468,43335+36])
                                                                      Pexp_ident "prod" (src/grammarFunctor.ml[1468,43335+32]..[1468,43335+36])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1468,43335+37]..[1468,43335+42])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[1468,43335+39]..[1468,43335+40])
Pexp_ident "+" (src/grammarFunctor.ml[1468,43335+39]..[1468,43335+40])
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1468,43335+38]..[1468,43335+39])
    Pexp_ident "i" (src/grammarFunctor.ml[1468,43335+38]..[1468,43335+39])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1468,43335+40]..[1468,43335+41])
    Pexp_constant PConst_int (1,None)
                                                                      ]
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[1471,43508+12]..[1475,43702+37])
                                                            Pexp_sequence
                                                            expression (src/grammarFunctor.ml[1471,43508+12]..[1471,43508+37])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1471,43508+12]..[1471,43508+27])
                                                                Pexp_ident "S.record_ConVar" (src/grammarFunctor.ml[1471,43508+12]..[1471,43508+27])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1471,43508+28]..[1471,43508+33])
                                                                    Pexp_ident "first" (src/grammarFunctor.ml[1471,43508+28]..[1471,43508+33])
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1471,43508+34]..[1471,43508+37])
                                                                    Pexp_ident "nt2" (src/grammarFunctor.ml[1471,43508+34]..[1471,43508+37])
                                                              ]
                                                            expression (src/grammarFunctor.ml[1474,43673+12]..[1475,43702+37])
                                                              Pexp_ifthenelse
                                                              expression (src/grammarFunctor.ml[1474,43673+15]..[1474,43673+23])
                                                                Pexp_ident "nullable" (src/grammarFunctor.ml[1474,43673+15]..[1474,43673+23])
                                                              expression (src/grammarFunctor.ml[1475,43702+14]..[1475,43702+37])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[1475,43702+14]..[1475,43702+29])
                                                                  Pexp_ident "S.record_VarVar" (src/grammarFunctor.ml[1475,43702+14]..[1475,43702+29])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1475,43702+30]..[1475,43702+33])
                                                                      Pexp_ident "nt1" (src/grammarFunctor.ml[1475,43702+30]..[1475,43702+33])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1475,43702+34]..[1475,43702+37])
                                                                      Pexp_ident "nt2" (src/grammarFunctor.ml[1475,43702+34]..[1475,43702+37])
                                                                ]
                                                              None
                                                    ]
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1476,43740+8]..[1476,43740+11])
                                                Pexp_ident "rhs" (src/grammarFunctor.ml[1476,43740+8]..[1476,43740+11])
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1477,43752+6]..[1477,43752+22])
                                      Pexp_ident "Production.table" (src/grammarFunctor.ml[1477,43752+6]..[1477,43752+22])
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1481,43831+2]..[1485,43993+5])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1481,43831+6]..[1481,43831+12])
                                Ppat_var "follow" (src/grammarFunctor.ml[1481,43831+6]..[1481,43831+12])
                              core_type (src/grammarFunctor.ml[1481,43831+15]..[1481,43831+51])
                                Ptyp_constr "Lazy.t" (src/grammarFunctor.ml[1481,43831+45]..[1481,43831+51])
                                [
                                  core_type (src/grammarFunctor.ml[1481,43831+16]..[1481,43831+43])
                                    Ptyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1481,43831+16]..[1481,43831+29])
                                      Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1481,43831+16]..[1481,43831+29])
                                      []
                                    core_type (src/grammarFunctor.ml[1481,43831+33]..[1481,43831+43])
                                      Ptyp_constr "P.property" (src/grammarFunctor.ml[1481,43831+33]..[1481,43831+43])
                                      []
                                ]
                              expression (src/grammarFunctor.ml[1482,43885+4]..[1485,43993+5])
                                Pexp_lazy
                                expression (src/grammarFunctor.ml[1482,43885+9]..[1485,43993+5])
                                  Pexp_letmodule "S" (src/grammarFunctor.ml[1483,43896+17]..[1483,43896+18])
                                  module_expr (src/grammarFunctor.ml[1483,43896+21]..[1483,43896+30])
                                    Pmod_apply_unit
                                    module_expr (src/grammarFunctor.ml[1483,43896+21]..[1483,43896+28])
                                      Pmod_ident "S.Solve" (src/grammarFunctor.ml[1483,43896+21]..[1483,43896+28])
                                  expression (src/grammarFunctor.ml[1484,43930+6]..[1484,43930+62])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1484,43930+10]..[1484,43930+12])
                                      Ppat_var "nt" (src/grammarFunctor.ml[1484,43930+10]..[1484,43930+12])
                                    expression (src/grammarFunctor.ml[1484,43930+16]..[1484,43930+62])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1484,43930+16]..[1484,43930+28])
                                        Pexp_ident "Option.value" (src/grammarFunctor.ml[1484,43930+16]..[1484,43930+28])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1484,43930+29]..[1484,43930+44])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1484,43930+30]..[1484,43930+40])
                                              Pexp_ident "S.solution" (src/grammarFunctor.ml[1484,43930+30]..[1484,43930+40])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1484,43930+41]..[1484,43930+43])
                                                  Pexp_ident "nt" (src/grammarFunctor.ml[1484,43930+41]..[1484,43930+43])
                                            ]
                                        <arg>
                                        Labelled "default"
                                          expression (src/grammarFunctor.ml[1484,43930+54]..[1484,43930+62])
                                            Pexp_ident "P.bottom" (src/grammarFunctor.ml[1484,43930+54]..[1484,43930+62])
                                      ]
                          ]
                        structure_item (src/grammarFunctor.ml[1487,44000+2]..[1488,44045+36])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1487,44000+6]..[1487,44000+12])
                                Ppat_var "follow" (src/grammarFunctor.ml[1487,44000+6]..[1487,44000+12])
                              core_type (src/grammarFunctor.ml[1487,44000+15]..[1487,44000+42])
                                Ptyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1487,44000+15]..[1487,44000+28])
                                  Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1487,44000+15]..[1487,44000+28])
                                  []
                                core_type (src/grammarFunctor.ml[1487,44000+32]..[1487,44000+42])
                                  Ptyp_constr "P.property" (src/grammarFunctor.ml[1487,44000+32]..[1487,44000+42])
                                  []
                              expression (src/grammarFunctor.ml[1488,44045+4]..[1488,44045+36])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1488,44045+8]..[1488,44045+10])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1488,44045+8]..[1488,44045+10])
                                expression (src/grammarFunctor.ml[1488,44045+14]..[1488,44045+36])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1488,44045+14]..[1488,44045+33])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1488,44045+15]..[1488,44045+25])
                                      Pexp_ident "Lazy.force" (src/grammarFunctor.ml[1488,44045+15]..[1488,44045+25])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1488,44045+26]..[1488,44045+32])
                                          Pexp_ident "follow" (src/grammarFunctor.ml[1488,44045+26]..[1488,44045+32])
                                    ]
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1488,44045+34]..[1488,44045+36])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[1488,44045+34]..[1488,44045+36])
                                  ]
                          ]
                      ]
              structure_item (src/grammarFunctor.ml[1494,44164+0]..[1500,44337+10])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1494,44164+4]..[1494,44164+10])
                      Ppat_var "follow" (src/grammarFunctor.ml[1494,44164+4]..[1494,44164+10])
                    core_type (src/grammarFunctor.ml[1494,44164+13]..[1494,44164+43])
                      Ptyp_arrow
                      Nolabel
                      core_type (src/grammarFunctor.ml[1494,44164+13]..[1494,44164+26])
                        Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1494,44164+13]..[1494,44164+26])
                        []
                      core_type (src/grammarFunctor.ml[1494,44164+30]..[1494,44164+43])
                        Ptyp_constr "TerminalSet.t" (src/grammarFunctor.ml[1494,44164+30]..[1494,44164+43])
                        []
                    expression (src/grammarFunctor.ml[1495,44210+2]..[1500,44337+10])
                      Pexp_letmodule "F" (src/grammarFunctor.ml[1495,44210+13]..[1495,44210+14])
                      module_expr (src/grammarFunctor.ml[1495,44210+17]..[1499,44327+6])
                        Pmod_apply
                        module_expr (src/grammarFunctor.ml[1495,44210+17]..[1495,44210+23])
                          Pmod_ident "FOLLOW" (src/grammarFunctor.ml[1495,44210+17]..[1495,44210+23])
                        module_expr (src/grammarFunctor.ml[1495,44210+24]..[1499,44327+5])
                          Pmod_structure
                          [
                            structure_item (src/grammarFunctor.ml[1496,44241+4]..[1496,44241+23])
                              Pstr_include                              module_expr (src/grammarFunctor.ml[1496,44241+12]..[1496,44241+23])
                                Pmod_ident "TerminalSet" (src/grammarFunctor.ml[1496,44241+12]..[1496,44241+23])
                            structure_item (src/grammarFunctor.ml[1497,44265+4]..[1497,44265+28])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1497,44265+8]..[1497,44265+16])
                                    Ppat_var "terminal" (src/grammarFunctor.ml[1497,44265+8]..[1497,44265+16])
                                  expression (src/grammarFunctor.ml[1497,44265+19]..[1497,44265+28])
                                    Pexp_ident "singleton" (src/grammarFunctor.ml[1497,44265+19]..[1497,44265+28])
                              ]
                            structure_item (src/grammarFunctor.ml[1498,44294+4]..[1498,44294+32])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1498,44294+8]..[1498,44294+13])
                                    Ppat_var "first" (src/grammarFunctor.ml[1498,44294+8]..[1498,44294+13])
                                  expression (src/grammarFunctor.ml[1498,44294+16]..[1498,44294+32])
                                    Pexp_ident "FIRST.production" (src/grammarFunctor.ml[1498,44294+16]..[1498,44294+32])
                              ]
                          ]
                      expression (src/grammarFunctor.ml[1500,44337+2]..[1500,44337+10])
                        Pexp_ident "F.follow" (src/grammarFunctor.ml[1500,44337+2]..[1500,44337+10])
                ]
              structure_item (src/grammarFunctor.ml[1504,44397+0]..[1512,44645+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1504,44397+4]..[1504,44397+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1504,44397+4]..[1504,44397+6])
                      None
                    expression (src/grammarFunctor.ml[1505,44406+2]..[1512,44645+5])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1505,44406+5]..[1505,44406+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1505,44406+5]..[1505,44406+12])
                      expression (src/grammarFunctor.ml[1506,44424+4]..[1512,44645+5])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1506,44424+4]..[1506,44424+14])
                          Pexp_ident "Error.logG" (src/grammarFunctor.ml[1506,44424+4]..[1506,44424+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1506,44424+15]..[1506,44424+16])
                              Pexp_constant PConst_int (2,None)
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1506,44424+17]..[1512,44645+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1506,44424+22]..[1506,44424+23])
                                Ppat_var "f" (src/grammarFunctor.ml[1506,44424+22]..[1506,44424+23])
                              expression (src/grammarFunctor.ml[1507,44451+6]..[1511,44634+10])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[1507,44451+10]..[1507,44451+12])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1507,44451+10]..[1507,44451+12])
                                expression (src/grammarFunctor.ml[1507,44451+15]..[1507,44451+32])
                                  Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1507,44451+15]..[1507,44451+32])
                                expression (src/grammarFunctor.ml[1507,44451+36]..[1507,44451+53])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1507,44451+50]..[1507,44451+51])
                                    Pexp_ident "-" (src/grammarFunctor.ml[1507,44451+50]..[1507,44451+51])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1507,44451+36]..[1507,44451+49])
                                        Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1507,44451+36]..[1507,44451+49])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1507,44451+52]..[1507,44451+53])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                                expression (src/grammarFunctor.ml[1508,44508+8]..[1510,44592+41])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1508,44508+8]..[1508,44508+22])
                                    Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1508,44508+8]..[1508,44508+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1508,44508+23]..[1508,44508+24])
                                        Pexp_ident "f" (src/grammarFunctor.ml[1508,44508+23]..[1508,44508+24])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1508,44508+25]..[1508,44508+44])
                                        Pexp_constant PConst_string("follow(%s) = %s\n",(src/grammarFunctor.ml[1508,44508+26]..[1508,44508+43]),None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1509,44553+10]..[1509,44553+38])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1509,44553+11]..[1509,44553+28])
                                          Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1509,44553+11]..[1509,44553+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1509,44553+29]..[1509,44553+34])
                                              Pexp_construct "false" (src/grammarFunctor.ml[1509,44553+29]..[1509,44553+34])
                                              None
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1509,44553+35]..[1509,44553+37])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[1509,44553+35]..[1509,44553+37])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1510,44592+10]..[1510,44592+41])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1510,44592+11]..[1510,44592+28])
                                          Pexp_ident "TerminalSet.print" (src/grammarFunctor.ml[1510,44592+11]..[1510,44592+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1510,44592+29]..[1510,44592+40])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1510,44592+30]..[1510,44592+36])
                                                Pexp_ident "follow" (src/grammarFunctor.ml[1510,44592+30]..[1510,44592+36])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1510,44592+37]..[1510,44592+39])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1510,44592+37]..[1510,44592+39])
                                              ]
                                        ]
                                  ]
                        ]
                      None
                ]
              structure_item (src/grammarFunctor.ml[1518,44862+0]..[1547,45850+3])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1518,44862+4]..[1518,44862+11])
                      Ppat_var "tfollow" (src/grammarFunctor.ml[1518,44862+4]..[1518,44862+11])
                    core_type (src/grammarFunctor.ml[1518,44862+14]..[1518,44862+40])
                      Ptyp_constr "Lazy.t" (src/grammarFunctor.ml[1518,44862+34]..[1518,44862+40])
                      [
                        core_type (src/grammarFunctor.ml[1518,44862+14]..[1518,44862+33])
                          Ptyp_constr "array" (src/grammarFunctor.ml[1518,44862+28]..[1518,44862+33])
                          [
                            core_type (src/grammarFunctor.ml[1518,44862+14]..[1518,44862+27])
                              Ptyp_constr "TerminalSet.t" (src/grammarFunctor.ml[1518,44862+14]..[1518,44862+27])
                              []
                          ]
                      ]
                    expression (src/grammarFunctor.ml[1519,44905+2]..[1547,45850+3])
                      Pexp_lazy
                      expression (src/grammarFunctor.ml[1519,44905+7]..[1547,45850+3])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1521,44915+8]..[1521,44915+15])
                              Ppat_var "tfollow" (src/grammarFunctor.ml[1521,44915+8]..[1521,44915+15])
                            expression (src/grammarFunctor.ml[1522,44933+6]..[1522,44933+45])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1522,44933+6]..[1522,44933+16])
                                Pexp_ident "Array.make" (src/grammarFunctor.ml[1522,44933+6]..[1522,44933+16])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1522,44933+17]..[1522,44933+27])
                                    Pexp_ident "Terminal.n" (src/grammarFunctor.ml[1522,44933+17]..[1522,44933+27])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1522,44933+28]..[1522,44933+45])
                                    Pexp_ident "TerminalSet.empty" (src/grammarFunctor.ml[1522,44933+28]..[1522,44933+45])
                              ]
                        ]
                        expression (src/grammarFunctor.ml[1526,45027+4]..[1545,45837+11])
                          Pexp_sequence
                          expression (src/grammarFunctor.ml[1526,45027+4]..[1543,45812+22])
                            Pexp_apply
                            expression (src/grammarFunctor.ml[1526,45027+4]..[1526,45027+15])
                              Pexp_ident "Array.iteri" (src/grammarFunctor.ml[1526,45027+4]..[1526,45027+15])
                            [
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1526,45027+16]..[1543,45812+5])
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1526,45027+21]..[1526,45027+25])
                                    Ppat_var "prod" (src/grammarFunctor.ml[1526,45027+21]..[1526,45027+25])
                                  expression (src/grammarFunctor.ml[1526,45027+26]..[1542,45800+11]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1526,45027+26]..[1526,45027+36])
                                      Ppat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[1526,45027+27]..[1526,45027+30])
                                          Ppat_var "nt1" (src/grammarFunctor.ml[1526,45027+27]..[1526,45027+30])
                                        pattern (src/grammarFunctor.ml[1526,45027+32]..[1526,45027+35])
                                          Ppat_var "rhs" (src/grammarFunctor.ml[1526,45027+32]..[1526,45027+35])
                                      ]
                                    expression (src/grammarFunctor.ml[1528,45142+6]..[1542,45800+11])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1528,45142+6]..[1528,45142+17])
                                        Pexp_ident "Array.iteri" (src/grammarFunctor.ml[1528,45142+6]..[1528,45142+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1528,45142+18]..[1542,45800+7])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[1528,45142+23]..[1528,45142+24])
                                              Ppat_var "i" (src/grammarFunctor.ml[1528,45142+23]..[1528,45142+24])
                                            expression (src/grammarFunctor.ml[1528,45142+25]..[1541,45726+73]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (src/grammarFunctor.ml[1528,45142+25]..[1528,45142+31])
                                                Ppat_var "symbol" (src/grammarFunctor.ml[1528,45142+25]..[1528,45142+31])
                                              expression (src/grammarFunctor.ml[1529,45177+8]..[1541,45726+73])
                                                Pexp_match
                                                expression (src/grammarFunctor.ml[1529,45177+14]..[1529,45177+20])
                                                  Pexp_ident "symbol" (src/grammarFunctor.ml[1529,45177+14]..[1529,45177+20])
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[1530,45203+10]..[1530,45203+20])
                                                      Ppat_construct "Symbol.N" (src/grammarFunctor.ml[1530,45203+10]..[1530,45203+18])
                                                      Some
                                                        []
                                                        pattern (src/grammarFunctor.ml[1530,45203+19]..[1530,45203+20])
                                                          Ppat_any
                                                    expression (src/grammarFunctor.ml[1531,45227+12]..[1531,45227+14])
                                                      Pexp_construct "()" (src/grammarFunctor.ml[1531,45227+12]..[1531,45227+14])
                                                      None
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[1532,45242+10]..[1532,45242+21])
                                                      Ppat_construct "Symbol.T" (src/grammarFunctor.ml[1532,45242+10]..[1532,45242+18])
                                                      Some
                                                        []
                                                        pattern (src/grammarFunctor.ml[1532,45242+19]..[1532,45242+21])
                                                          Ppat_var "t2" (src/grammarFunctor.ml[1532,45242+19]..[1532,45242+21])
                                                    expression (src/grammarFunctor.ml[1533,45267+12]..[1541,45726+73])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/grammarFunctor.ml[1533,45267+16]..[1533,45267+24])
                                                            Ppat_var "nullable" (src/grammarFunctor.ml[1533,45267+16]..[1533,45267+24])
                                                          expression (src/grammarFunctor.ml[1533,45267+27]..[1533,45267+57])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[1533,45267+27]..[1533,45267+46])
                                                              Pexp_ident "NULLABLE.production" (src/grammarFunctor.ml[1533,45267+27]..[1533,45267+46])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1533,45267+47]..[1533,45267+51])
                                                                  Pexp_ident "prod" (src/grammarFunctor.ml[1533,45267+47]..[1533,45267+51])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1533,45267+52]..[1533,45267+57])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[1533,45267+54]..[1533,45267+55])
                                                                    Pexp_ident "+" (src/grammarFunctor.ml[1533,45267+54]..[1533,45267+55])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1533,45267+53]..[1533,45267+54])
Pexp_ident "i" (src/grammarFunctor.ml[1533,45267+53]..[1533,45267+54])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1533,45267+55]..[1533,45267+56])
Pexp_constant PConst_int (1,None)
                                                                  ]
                                                            ]
                                                        <def>
                                                          pattern (src/grammarFunctor.ml[1534,45325+16]..[1534,45325+21])
                                                            Ppat_var "first" (src/grammarFunctor.ml[1534,45325+16]..[1534,45325+21])
                                                          expression (src/grammarFunctor.ml[1534,45325+24]..[1534,45325+51])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[1534,45325+24]..[1534,45325+40])
                                                              Pexp_ident "FIRST.production" (src/grammarFunctor.ml[1534,45325+24]..[1534,45325+40])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1534,45325+41]..[1534,45325+45])
                                                                  Pexp_ident "prod" (src/grammarFunctor.ml[1534,45325+41]..[1534,45325+45])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1534,45325+46]..[1534,45325+51])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[1534,45325+48]..[1534,45325+49])
                                                                    Pexp_ident "+" (src/grammarFunctor.ml[1534,45325+48]..[1534,45325+49])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1534,45325+47]..[1534,45325+48])
Pexp_ident "i" (src/grammarFunctor.ml[1534,45325+47]..[1534,45325+48])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1534,45325+49]..[1534,45325+50])
Pexp_constant PConst_int (1,None)
                                                                  ]
                                                            ]
                                                      ]
                                                      expression (src/grammarFunctor.ml[1537,45506+12]..[1541,45726+73])
                                                        Pexp_sequence
                                                        expression (src/grammarFunctor.ml[1537,45506+12]..[1537,45506+64])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1537,45506+12]..[1537,45506+64]) ghost
                                                            Pexp_ident "Array.set" (src/grammarFunctor.ml[1537,45506+12]..[1537,45506+64]) ghost
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1537,45506+12]..[1537,45506+19])
                                                                Pexp_ident "tfollow" (src/grammarFunctor.ml[1537,45506+12]..[1537,45506+19])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1537,45506+21]..[1537,45506+23])
                                                                Pexp_ident "t2" (src/grammarFunctor.ml[1537,45506+21]..[1537,45506+23])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1537,45506+28]..[1537,45506+64])
                                                                Pexp_apply
                                                                expression (src/grammarFunctor.ml[1537,45506+28]..[1537,45506+45])
                                                                  Pexp_ident "TerminalSet.union" (src/grammarFunctor.ml[1537,45506+28]..[1537,45506+45])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1537,45506+46]..[1537,45506+51])
                                                                      Pexp_ident "first" (src/grammarFunctor.ml[1537,45506+46]..[1537,45506+51])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (src/grammarFunctor.ml[1537,45506+52]..[1537,45506+64])
                                                                      Pexp_apply
                                                                      expression (src/grammarFunctor.ml[1537,45506+52]..[1537,45506+64]) ghost
Pexp_ident "Array.get" (src/grammarFunctor.ml[1537,45506+52]..[1537,45506+64]) ghost
                                                                      [
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1537,45506+52]..[1537,45506+59])
    Pexp_ident "tfollow" (src/grammarFunctor.ml[1537,45506+52]..[1537,45506+59])
<arg>
Nolabel
  expression (src/grammarFunctor.ml[1537,45506+61]..[1537,45506+63])
    Pexp_ident "t2" (src/grammarFunctor.ml[1537,45506+61]..[1537,45506+63])
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[1540,45697+12]..[1541,45726+73])
                                                          Pexp_ifthenelse
                                                          expression (src/grammarFunctor.ml[1540,45697+15]..[1540,45697+23])
                                                            Pexp_ident "nullable" (src/grammarFunctor.ml[1540,45697+15]..[1540,45697+23])
                                                          expression (src/grammarFunctor.ml[1541,45726+14]..[1541,45726+73])
                                                            Pexp_apply
                                                            expression (src/grammarFunctor.ml[1541,45726+14]..[1541,45726+73]) ghost
                                                              Pexp_ident "Array.set" (src/grammarFunctor.ml[1541,45726+14]..[1541,45726+73]) ghost
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1541,45726+14]..[1541,45726+21])
                                                                  Pexp_ident "tfollow" (src/grammarFunctor.ml[1541,45726+14]..[1541,45726+21])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1541,45726+23]..[1541,45726+25])
                                                                  Pexp_ident "t2" (src/grammarFunctor.ml[1541,45726+23]..[1541,45726+25])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/grammarFunctor.ml[1541,45726+30]..[1541,45726+73])
                                                                  Pexp_apply
                                                                  expression (src/grammarFunctor.ml[1541,45726+30]..[1541,45726+47])
                                                                    Pexp_ident "TerminalSet.union" (src/grammarFunctor.ml[1541,45726+30]..[1541,45726+47])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1541,45726+48]..[1541,45726+60])
Pexp_apply
expression (src/grammarFunctor.ml[1541,45726+49]..[1541,45726+55])
  Pexp_ident "follow" (src/grammarFunctor.ml[1541,45726+49]..[1541,45726+55])
[
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[1541,45726+56]..[1541,45726+59])
      Pexp_ident "nt1" (src/grammarFunctor.ml[1541,45726+56]..[1541,45726+59])
]
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (src/grammarFunctor.ml[1541,45726+61]..[1541,45726+73])
Pexp_apply
expression (src/grammarFunctor.ml[1541,45726+61]..[1541,45726+73]) ghost
  Pexp_ident "Array.get" (src/grammarFunctor.ml[1541,45726+61]..[1541,45726+73]) ghost
[
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[1541,45726+61]..[1541,45726+68])
      Pexp_ident "tfollow" (src/grammarFunctor.ml[1541,45726+61]..[1541,45726+68])
  <arg>
  Nolabel
    expression (src/grammarFunctor.ml[1541,45726+70]..[1541,45726+72])
      Pexp_ident "t2" (src/grammarFunctor.ml[1541,45726+70]..[1541,45726+72])
]
                                                                  ]
                                                            ]
                                                          None
                                                ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1542,45800+8]..[1542,45800+11])
                                            Pexp_ident "rhs" (src/grammarFunctor.ml[1542,45800+8]..[1542,45800+11])
                                      ]
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1543,45812+6]..[1543,45812+22])
                                  Pexp_ident "Production.table" (src/grammarFunctor.ml[1543,45812+6]..[1543,45812+22])
                            ]
                          expression (src/grammarFunctor.ml[1545,45837+4]..[1545,45837+11])
                            Pexp_ident "tfollow" (src/grammarFunctor.ml[1545,45837+4]..[1545,45837+11])
                ]
              structure_item (src/grammarFunctor.ml[1551,45887+0]..[1552,45903+26])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1551,45887+4]..[1551,45887+11])
                      Ppat_var "tfollow" (src/grammarFunctor.ml[1551,45887+4]..[1551,45887+11])
                    expression (src/grammarFunctor.ml[1551,45887+12]..[1552,45903+26]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1551,45887+12]..[1551,45887+13])
                        Ppat_var "t" (src/grammarFunctor.ml[1551,45887+12]..[1551,45887+13])
                      expression (src/grammarFunctor.ml[1552,45903+2]..[1552,45903+26])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1552,45903+2]..[1552,45903+26]) ghost
                          Pexp_ident "Array.get" (src/grammarFunctor.ml[1552,45903+2]..[1552,45903+26]) ghost
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1552,45903+2]..[1552,45903+22])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1552,45903+3]..[1552,45903+13])
                                Pexp_ident "Lazy.force" (src/grammarFunctor.ml[1552,45903+3]..[1552,45903+13])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1552,45903+14]..[1552,45903+21])
                                    Pexp_ident "tfollow" (src/grammarFunctor.ml[1552,45903+14]..[1552,45903+21])
                              ]
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1552,45903+24]..[1552,45903+25])
                              Pexp_ident "t" (src/grammarFunctor.ml[1552,45903+24]..[1552,45903+25])
                        ]
                ]
              structure_item (src/grammarFunctor.ml[1556,46000+0]..[1564,46218+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1556,46000+4]..[1556,46000+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1556,46000+4]..[1556,46000+6])
                      None
                    expression (src/grammarFunctor.ml[1557,46009+2]..[1564,46218+5])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1557,46009+5]..[1557,46009+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1557,46009+5]..[1557,46009+12])
                      expression (src/grammarFunctor.ml[1558,46027+4]..[1564,46218+5])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1558,46027+4]..[1558,46027+14])
                          Pexp_ident "Error.logG" (src/grammarFunctor.ml[1558,46027+4]..[1558,46027+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1558,46027+15]..[1558,46027+16])
                              Pexp_constant PConst_int (3,None)
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1558,46027+17]..[1564,46218+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1558,46027+22]..[1558,46027+23])
                                Ppat_var "f" (src/grammarFunctor.ml[1558,46027+22]..[1558,46027+23])
                              expression (src/grammarFunctor.ml[1559,46054+6]..[1563,46207+10])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[1559,46054+10]..[1559,46054+11])
                                  Ppat_var "t" (src/grammarFunctor.ml[1559,46054+10]..[1559,46054+11])
                                expression (src/grammarFunctor.ml[1559,46054+14]..[1559,46054+15])
                                  Pexp_constant PConst_int (0,None)
                                expression (src/grammarFunctor.ml[1559,46054+19]..[1559,46054+33])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1559,46054+30]..[1559,46054+31])
                                    Pexp_ident "-" (src/grammarFunctor.ml[1559,46054+30]..[1559,46054+31])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1559,46054+19]..[1559,46054+29])
                                        Pexp_ident "Terminal.n" (src/grammarFunctor.ml[1559,46054+19]..[1559,46054+29])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1559,46054+32]..[1559,46054+33])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                                expression (src/grammarFunctor.ml[1560,46091+8]..[1562,46165+41])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1560,46091+8]..[1560,46091+22])
                                    Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1560,46091+8]..[1560,46091+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1560,46091+23]..[1560,46091+24])
                                        Pexp_ident "f" (src/grammarFunctor.ml[1560,46091+23]..[1560,46091+24])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1560,46091+25]..[1560,46091+44])
                                        Pexp_constant PConst_string("follow(%s) = %s\n",(src/grammarFunctor.ml[1560,46091+26]..[1560,46091+43]),None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1561,46136+10]..[1561,46136+28])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1561,46136+11]..[1561,46136+25])
                                          Pexp_ident "Terminal.print" (src/grammarFunctor.ml[1561,46136+11]..[1561,46136+25])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1561,46136+26]..[1561,46136+27])
                                              Pexp_ident "t" (src/grammarFunctor.ml[1561,46136+26]..[1561,46136+27])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1562,46165+10]..[1562,46165+41])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1562,46165+11]..[1562,46165+28])
                                          Pexp_ident "TerminalSet.print" (src/grammarFunctor.ml[1562,46165+11]..[1562,46165+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1562,46165+29]..[1562,46165+40])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1562,46165+30]..[1562,46165+37])
                                                Pexp_ident "tfollow" (src/grammarFunctor.ml[1562,46165+30]..[1562,46165+37])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1562,46165+38]..[1562,46165+39])
                                                    Pexp_ident "t" (src/grammarFunctor.ml[1562,46165+38]..[1562,46165+39])
                                              ]
                                        ]
                                  ]
                        ]
                      None
                ]
              structure_item (src/grammarFunctor.ml[1572,46457+0]..[1589,47104+8])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1572,46457+4]..[1572,46457+10])
                      Ppat_var "sfirst" (src/grammarFunctor.ml[1572,46457+4]..[1572,46457+10])
                    expression (src/grammarFunctor.ml[1572,46457+11]..[1589,47104+8]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1572,46457+11]..[1572,46457+15])
                        Ppat_var "prod" (src/grammarFunctor.ml[1572,46457+11]..[1572,46457+15])
                      expression (src/grammarFunctor.ml[1572,46457+16]..[1589,47104+8]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/grammarFunctor.ml[1572,46457+16]..[1572,46457+17])
                          Ppat_var "i" (src/grammarFunctor.ml[1572,46457+16]..[1572,46457+17])
                        expression (src/grammarFunctor.ml[1573,46477+2]..[1589,47104+8])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1573,46477+6]..[1573,46477+9])
                                Ppat_var "rhs" (src/grammarFunctor.ml[1573,46477+6]..[1573,46477+9])
                              expression (src/grammarFunctor.ml[1573,46477+12]..[1573,46477+31])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1573,46477+12]..[1573,46477+26])
                                  Pexp_ident "Production.rhs" (src/grammarFunctor.ml[1573,46477+12]..[1573,46477+26])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1573,46477+27]..[1573,46477+31])
                                      Pexp_ident "prod" (src/grammarFunctor.ml[1573,46477+27]..[1573,46477+31])
                                ]
                          ]
                          expression (src/grammarFunctor.ml[1574,46512+2]..[1589,47104+8])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1574,46512+6]..[1574,46512+7])
                                  Ppat_var "n" (src/grammarFunctor.ml[1574,46512+6]..[1574,46512+7])
                                expression (src/grammarFunctor.ml[1574,46512+10]..[1574,46512+26])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1574,46512+10]..[1574,46512+22])
                                    Pexp_ident "Array.length" (src/grammarFunctor.ml[1574,46512+10]..[1574,46512+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1574,46512+23]..[1574,46512+26])
                                        Pexp_ident "rhs" (src/grammarFunctor.ml[1574,46512+23]..[1574,46512+26])
                                  ]
                            ]
                            expression (src/grammarFunctor.ml[1575,46542+2]..[1589,47104+8])
                              Pexp_let Rec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1575,46542+10]..[1575,46542+14])
                                    Ppat_var "loop" (src/grammarFunctor.ml[1575,46542+10]..[1575,46542+14])
                                  expression (src/grammarFunctor.ml[1575,46542+15]..[1587,47027+71]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1575,46542+15]..[1575,46542+16])
                                      Ppat_var "i" (src/grammarFunctor.ml[1575,46542+15]..[1575,46542+16])
                                    expression (src/grammarFunctor.ml[1576,46561+4]..[1587,47027+71])
                                      Pexp_ifthenelse
                                      expression (src/grammarFunctor.ml[1576,46561+7]..[1576,46561+12])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1576,46561+9]..[1576,46561+10])
                                          Pexp_ident "=" (src/grammarFunctor.ml[1576,46561+9]..[1576,46561+10])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1576,46561+7]..[1576,46561+8])
                                              Pexp_ident "i" (src/grammarFunctor.ml[1576,46561+7]..[1576,46561+8])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1576,46561+11]..[1576,46561+12])
                                              Pexp_ident "n" (src/grammarFunctor.ml[1576,46561+11]..[1576,46561+12])
                                        ]
                                      expression (src/grammarFunctor.ml[1578,46640+6]..[1578,46640+21])
                                        Pexp_ident "SymbolSet.empty" (src/grammarFunctor.ml[1578,46640+6]..[1578,46640+21])
                                      Some
                                        expression (src/grammarFunctor.ml[1580,46671+6]..[1587,47027+71])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[1580,46671+10]..[1580,46671+13])
                                                Ppat_var "sym" (src/grammarFunctor.ml[1580,46671+10]..[1580,46671+13])
                                              expression (src/grammarFunctor.ml[1580,46671+16]..[1580,46671+23])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1580,46671+16]..[1580,46671+23]) ghost
                                                  Pexp_ident "Array.get" (src/grammarFunctor.ml[1580,46671+16]..[1580,46671+23]) ghost
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1580,46671+16]..[1580,46671+19])
                                                      Pexp_ident "rhs" (src/grammarFunctor.ml[1580,46671+16]..[1580,46671+19])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1580,46671+21]..[1580,46671+22])
                                                      Pexp_ident "i" (src/grammarFunctor.ml[1580,46671+21]..[1580,46671+22])
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[1583,46838+6]..[1587,47027+71])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1583,46838+6]..[1583,46838+21])
                                              Pexp_ident "SymbolSet.union" (src/grammarFunctor.ml[1583,46838+6]..[1583,46838+21])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1584,46860+8]..[1584,46860+33])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1584,46860+9]..[1584,46860+28])
                                                    Pexp_ident "SymbolSet.singleton" (src/grammarFunctor.ml[1584,46860+9]..[1584,46860+28])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1584,46860+29]..[1584,46860+32])
                                                        Pexp_ident "sym" (src/grammarFunctor.ml[1584,46860+29]..[1584,46860+32])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1587,47027+8]..[1587,47027+71])
                                                  Pexp_ifthenelse
                                                  expression (src/grammarFunctor.ml[1587,47027+12]..[1587,47027+31])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1587,47027+12]..[1587,47027+27])
                                                      Pexp_ident "NULLABLE.symbol" (src/grammarFunctor.ml[1587,47027+12]..[1587,47027+27])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1587,47027+28]..[1587,47027+31])
                                                          Pexp_ident "sym" (src/grammarFunctor.ml[1587,47027+28]..[1587,47027+31])
                                                    ]
                                                  expression (src/grammarFunctor.ml[1587,47027+37]..[1587,47027+49])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1587,47027+37]..[1587,47027+41])
                                                      Pexp_ident "loop" (src/grammarFunctor.ml[1587,47027+37]..[1587,47027+41])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1587,47027+42]..[1587,47027+49])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1587,47027+45]..[1587,47027+46])
                                                            Pexp_ident "+" (src/grammarFunctor.ml[1587,47027+45]..[1587,47027+46])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1587,47027+43]..[1587,47027+44])
                                                                Pexp_ident "i" (src/grammarFunctor.ml[1587,47027+43]..[1587,47027+44])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1587,47027+47]..[1587,47027+48])
                                                                Pexp_constant PConst_int (1,None)
                                                          ]
                                                    ]
                                                  Some
                                                    expression (src/grammarFunctor.ml[1587,47027+55]..[1587,47027+70])
                                                      Pexp_ident "SymbolSet.empty" (src/grammarFunctor.ml[1587,47027+55]..[1587,47027+70])
                                            ]
                              ]
                              expression (src/grammarFunctor.ml[1589,47104+2]..[1589,47104+8])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1589,47104+2]..[1589,47104+6])
                                  Pexp_ident "loop" (src/grammarFunctor.ml[1589,47104+2]..[1589,47104+6])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1589,47104+7]..[1589,47104+8])
                                      Pexp_ident "i" (src/grammarFunctor.ml[1589,47104+7]..[1589,47104+8])
                                ]
                ]
              structure_item (src/grammarFunctor.ml[1595,47260+0]..[1602,47508+10])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1595,47260+4]..[1595,47260+11])
                      Ppat_var "sfollow" (src/grammarFunctor.ml[1595,47260+4]..[1595,47260+11])
                    core_type (src/grammarFunctor.ml[1595,47260+14]..[1595,47260+42])
                      Ptyp_arrow
                      Nolabel
                      core_type (src/grammarFunctor.ml[1595,47260+14]..[1595,47260+27])
                        Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1595,47260+14]..[1595,47260+27])
                        []
                      core_type (src/grammarFunctor.ml[1595,47260+31]..[1595,47260+42])
                        Ptyp_constr "SymbolSet.t" (src/grammarFunctor.ml[1595,47260+31]..[1595,47260+42])
                        []
                    expression (src/grammarFunctor.ml[1596,47305+2]..[1602,47508+10])
                      Pexp_letmodule "F" (src/grammarFunctor.ml[1596,47305+13]..[1596,47305+14])
                      module_expr (src/grammarFunctor.ml[1596,47305+17]..[1601,47498+6])
                        Pmod_apply
                        module_expr (src/grammarFunctor.ml[1596,47305+17]..[1596,47305+23])
                          Pmod_ident "FOLLOW" (src/grammarFunctor.ml[1596,47305+17]..[1596,47305+23])
                        module_expr (src/grammarFunctor.ml[1596,47305+24]..[1601,47498+5])
                          Pmod_structure
                          [
                            structure_item (src/grammarFunctor.ml[1597,47336+4]..[1597,47336+33])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1597,47336+8]..[1597,47336+14])
                                    Ppat_var "bottom" (src/grammarFunctor.ml[1597,47336+8]..[1597,47336+14])
                                  expression (src/grammarFunctor.ml[1597,47336+17]..[1597,47336+33])
                                    Pexp_ident "SymbolSet.bottom" (src/grammarFunctor.ml[1597,47336+17]..[1597,47336+33])
                              ]
                            structure_item (src/grammarFunctor.ml[1598,47370+4]..[1598,47370+50])
                              Pstr_include                              module_expr (src/grammarFunctor.ml[1598,47370+12]..[1598,47370+50])
                                Pmod_apply
                                module_expr (src/grammarFunctor.ml[1598,47370+12]..[1598,47370+39])
                                  Pmod_ident "Fix.Glue.MinimalSemiLattice" (src/grammarFunctor.ml[1598,47370+12]..[1598,47370+39])
                                module_expr (src/grammarFunctor.ml[1598,47370+40]..[1598,47370+49])
                                  Pmod_ident "SymbolSet" (src/grammarFunctor.ml[1598,47370+40]..[1598,47370+49])
                            structure_item (src/grammarFunctor.ml[1599,47421+4]..[1599,47421+53])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1599,47421+8]..[1599,47421+16])
                                    Ppat_var "terminal" (src/grammarFunctor.ml[1599,47421+8]..[1599,47421+16])
                                  expression (src/grammarFunctor.ml[1599,47421+17]..[1599,47421+53]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1599,47421+17]..[1599,47421+18])
                                      Ppat_var "t" (src/grammarFunctor.ml[1599,47421+17]..[1599,47421+18])
                                    expression (src/grammarFunctor.ml[1599,47421+21]..[1599,47421+53])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1599,47421+21]..[1599,47421+40])
                                        Pexp_ident "SymbolSet.singleton" (src/grammarFunctor.ml[1599,47421+21]..[1599,47421+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1599,47421+41]..[1599,47421+53])
                                            Pexp_construct "Symbol.T" (src/grammarFunctor.ml[1599,47421+42]..[1599,47421+50])
                                            Some
                                              expression (src/grammarFunctor.ml[1599,47421+51]..[1599,47421+52])
                                                Pexp_ident "t" (src/grammarFunctor.ml[1599,47421+51]..[1599,47421+52])
                                      ]
                              ]
                            structure_item (src/grammarFunctor.ml[1600,47475+4]..[1600,47475+22])
                              Pstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1600,47475+8]..[1600,47475+13])
                                    Ppat_var "first" (src/grammarFunctor.ml[1600,47475+8]..[1600,47475+13])
                                  expression (src/grammarFunctor.ml[1600,47475+16]..[1600,47475+22])
                                    Pexp_ident "sfirst" (src/grammarFunctor.ml[1600,47475+16]..[1600,47475+22])
                              ]
                          ]
                      expression (src/grammarFunctor.ml[1602,47508+2]..[1602,47508+10])
                        Pexp_ident "F.follow" (src/grammarFunctor.ml[1602,47508+2]..[1602,47508+10])
                ]
              structure_item (src/grammarFunctor.ml[1606,47577+0]..[1614,47825+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1606,47577+4]..[1606,47577+6])
                      Ppat_construct "()" (src/grammarFunctor.ml[1606,47577+4]..[1606,47577+6])
                      None
                    expression (src/grammarFunctor.ml[1607,47586+2]..[1614,47825+5])
                      Pexp_ifthenelse
                      expression (src/grammarFunctor.ml[1607,47586+5]..[1607,47586+12])
                        Pexp_ident "verbose" (src/grammarFunctor.ml[1607,47586+5]..[1607,47586+12])
                      expression (src/grammarFunctor.ml[1608,47604+4]..[1614,47825+5])
                        Pexp_apply
                        expression (src/grammarFunctor.ml[1608,47604+4]..[1608,47604+14])
                          Pexp_ident "Error.logG" (src/grammarFunctor.ml[1608,47604+4]..[1608,47604+14])
                        [
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1608,47604+15]..[1608,47604+16])
                              Pexp_constant PConst_int (3,None)
                          <arg>
                          Nolabel
                            expression (src/grammarFunctor.ml[1608,47604+17]..[1614,47825+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1608,47604+22]..[1608,47604+23])
                                Ppat_var "f" (src/grammarFunctor.ml[1608,47604+22]..[1608,47604+23])
                              expression (src/grammarFunctor.ml[1609,47631+6]..[1613,47814+10])
                                Pexp_for Up
                                pattern (src/grammarFunctor.ml[1609,47631+10]..[1609,47631+12])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1609,47631+10]..[1609,47631+12])
                                expression (src/grammarFunctor.ml[1609,47631+15]..[1609,47631+32])
                                  Pexp_ident "Nonterminal.start" (src/grammarFunctor.ml[1609,47631+15]..[1609,47631+32])
                                expression (src/grammarFunctor.ml[1609,47631+36]..[1609,47631+53])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1609,47631+50]..[1609,47631+51])
                                    Pexp_ident "-" (src/grammarFunctor.ml[1609,47631+50]..[1609,47631+51])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1609,47631+36]..[1609,47631+49])
                                        Pexp_ident "Nonterminal.n" (src/grammarFunctor.ml[1609,47631+36]..[1609,47631+49])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1609,47631+52]..[1609,47631+53])
                                        Pexp_constant PConst_int (1,None)
                                  ]
                                expression (src/grammarFunctor.ml[1610,47688+8]..[1612,47773+40])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1610,47688+8]..[1610,47688+22])
                                    Pexp_ident "Printf.fprintf" (src/grammarFunctor.ml[1610,47688+8]..[1610,47688+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1610,47688+23]..[1610,47688+24])
                                        Pexp_ident "f" (src/grammarFunctor.ml[1610,47688+23]..[1610,47688+24])
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1610,47688+25]..[1610,47688+45])
                                        Pexp_constant PConst_string("sfollow(%s) = %s\n",(src/grammarFunctor.ml[1610,47688+26]..[1610,47688+44]),None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1611,47734+10]..[1611,47734+38])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1611,47734+11]..[1611,47734+28])
                                          Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1611,47734+11]..[1611,47734+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1611,47734+29]..[1611,47734+34])
                                              Pexp_construct "false" (src/grammarFunctor.ml[1611,47734+29]..[1611,47734+34])
                                              None
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1611,47734+35]..[1611,47734+37])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[1611,47734+35]..[1611,47734+37])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1612,47773+10]..[1612,47773+40])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1612,47773+11]..[1612,47773+26])
                                          Pexp_ident "SymbolSet.print" (src/grammarFunctor.ml[1612,47773+11]..[1612,47773+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1612,47773+27]..[1612,47773+39])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1612,47773+28]..[1612,47773+35])
                                                Pexp_ident "sfollow" (src/grammarFunctor.ml[1612,47773+28]..[1612,47773+35])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1612,47773+36]..[1612,47773+38])
                                                    Pexp_ident "nt" (src/grammarFunctor.ml[1612,47773+36]..[1612,47773+38])
                                              ]
                                        ]
                                  ]
                        ]
                      None
                ]
              structure_item (src/grammarFunctor.ml[1629,48452+0]..[1632,48671+44])
                Pstr_type Rec
                [
                  type_declaration "explanation" (src/grammarFunctor.ml[1629,48452+5]..[1629,48452+16]) (src/grammarFunctor.ml[1629,48452+0]..[1632,48671+44])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_variant
                        [
                          (src/grammarFunctor.ml[1630,48471+2]..[1630,48471+12])
                            "EObvious" (src/grammarFunctor.ml[1630,48471+4]..[1630,48471+12])
                            []
                            None
                          (src/grammarFunctor.ml[1631,48557+2]..[1631,48557+40])
                            "EFirst" (src/grammarFunctor.ml[1631,48557+4]..[1631,48557+10])
                            [
                              core_type (src/grammarFunctor.ml[1631,48557+14]..[1631,48557+24])
                                Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1631,48557+14]..[1631,48557+24])
                                []
                              core_type (src/grammarFunctor.ml[1631,48557+27]..[1631,48557+40])
                                Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1631,48557+27]..[1631,48557+40])
                                []
                            ]
                            None
                          (src/grammarFunctor.ml[1632,48671+2]..[1632,48671+44])
                            "ENullable" (src/grammarFunctor.ml[1632,48671+4]..[1632,48671+13])
                            [
                              core_type (src/grammarFunctor.ml[1632,48671+17]..[1632,48671+30])
                                Ptyp_constr "list" (src/grammarFunctor.ml[1632,48671+26]..[1632,48671+30])
                                [
                                  core_type (src/grammarFunctor.ml[1632,48671+17]..[1632,48671+25])
                                    Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[1632,48671+17]..[1632,48671+25])
                                    []
                                ]
                              core_type (src/grammarFunctor.ml[1632,48671+33]..[1632,48671+44])
                                Ptyp_constr "explanation" (src/grammarFunctor.ml[1632,48671+33]..[1632,48671+44])
                                []
                            ]
                            None
                        ]
                    ptype_private = Public
                    ptype_manifest =
                      None
                ]
              structure_item (src/grammarFunctor.ml[1634,48779+0]..[1655,49419+8])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1634,48779+4]..[1634,48779+11])
                      Ppat_var "explain" (src/grammarFunctor.ml[1634,48779+4]..[1634,48779+11])
                    expression (src/grammarFunctor.ml[1634,48779+12]..[1655,49419+8]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1634,48779+12]..[1634,48779+30])
                        Ppat_constraint
                        pattern (src/grammarFunctor.ml[1634,48779+13]..[1634,48779+16])
                          Ppat_var "tok" (src/grammarFunctor.ml[1634,48779+13]..[1634,48779+16])
                        core_type (src/grammarFunctor.ml[1634,48779+19]..[1634,48779+29])
                          Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1634,48779+19]..[1634,48779+29])
                          []
                      expression (src/grammarFunctor.ml[1634,48779+31]..[1655,49419+8]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/grammarFunctor.ml[1634,48779+31]..[1634,48779+53])
                          Ppat_constraint
                          pattern (src/grammarFunctor.ml[1634,48779+32]..[1634,48779+35])
                            Ppat_var "rhs" (src/grammarFunctor.ml[1634,48779+32]..[1634,48779+35])
                          core_type (src/grammarFunctor.ml[1634,48779+38]..[1634,48779+52])
                            Ptyp_constr "array" (src/grammarFunctor.ml[1634,48779+47]..[1634,48779+52])
                            [
                              core_type (src/grammarFunctor.ml[1634,48779+38]..[1634,48779+46])
                                Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[1634,48779+38]..[1634,48779+46])
                                []
                            ]
                        expression (src/grammarFunctor.ml[1634,48779+54]..[1655,49419+8]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/grammarFunctor.ml[1634,48779+54]..[1634,48779+63])
                            Ppat_constraint
                            pattern (src/grammarFunctor.ml[1634,48779+55]..[1634,48779+56])
                              Ppat_var "i" (src/grammarFunctor.ml[1634,48779+55]..[1634,48779+56])
                            core_type (src/grammarFunctor.ml[1634,48779+59]..[1634,48779+62])
                              Ptyp_constr "int" (src/grammarFunctor.ml[1634,48779+59]..[1634,48779+62])
                              []
                          expression (src/grammarFunctor.ml[1635,48845+2]..[1655,49419+8])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1635,48845+6]..[1635,48845+12])
                                  Ppat_var "length" (src/grammarFunctor.ml[1635,48845+6]..[1635,48845+12])
                                expression (src/grammarFunctor.ml[1635,48845+15]..[1635,48845+31])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1635,48845+15]..[1635,48845+27])
                                    Pexp_ident "Array.length" (src/grammarFunctor.ml[1635,48845+15]..[1635,48845+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1635,48845+28]..[1635,48845+31])
                                        Pexp_ident "rhs" (src/grammarFunctor.ml[1635,48845+28]..[1635,48845+31])
                                  ]
                            ]
                            expression (src/grammarFunctor.ml[1636,48880+2]..[1655,49419+8])
                              Pexp_let Rec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1636,48880+10]..[1636,48880+14])
                                    Ppat_var "loop" (src/grammarFunctor.ml[1636,48880+10]..[1636,48880+14])
                                  expression (src/grammarFunctor.ml[1636,48880+15]..[1653,49402+11]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1636,48880+15]..[1636,48880+16])
                                      Ppat_var "i" (src/grammarFunctor.ml[1636,48880+15]..[1636,48880+16])
                                    expression (src/grammarFunctor.ml[1637,48899+4]..[1653,49402+11])
                                      Pexp_sequence
                                      expression (src/grammarFunctor.ml[1637,48899+4]..[1637,48899+23])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[1637,48899+11]..[1637,48899+23])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1637,48899+14]..[1637,48899+15])
                                            Pexp_ident "<" (src/grammarFunctor.ml[1637,48899+14]..[1637,48899+15])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1637,48899+12]..[1637,48899+13])
                                                Pexp_ident "i" (src/grammarFunctor.ml[1637,48899+12]..[1637,48899+13])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1637,48899+16]..[1637,48899+22])
                                                Pexp_ident "length" (src/grammarFunctor.ml[1637,48899+16]..[1637,48899+22])
                                          ]
                                      expression (src/grammarFunctor.ml[1638,48924+4]..[1653,49402+11])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[1638,48924+8]..[1638,48924+14])
                                              Ppat_var "symbol" (src/grammarFunctor.ml[1638,48924+8]..[1638,48924+14])
                                            expression (src/grammarFunctor.ml[1638,48924+17]..[1638,48924+24])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1638,48924+17]..[1638,48924+24]) ghost
                                                Pexp_ident "Array.get" (src/grammarFunctor.ml[1638,48924+17]..[1638,48924+24]) ghost
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1638,48924+17]..[1638,48924+20])
                                                    Pexp_ident "rhs" (src/grammarFunctor.ml[1638,48924+17]..[1638,48924+20])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1638,48924+22]..[1638,48924+23])
                                                    Pexp_ident "i" (src/grammarFunctor.ml[1638,48924+22]..[1638,48924+23])
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[1639,48952+4]..[1653,49402+11])
                                          Pexp_match
                                          expression (src/grammarFunctor.ml[1639,48952+10]..[1639,48952+16])
                                            Pexp_ident "symbol" (src/grammarFunctor.ml[1639,48952+10]..[1639,48952+16])
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[1640,48974+6]..[1640,48974+19])
                                                Ppat_construct "Symbol.T" (src/grammarFunctor.ml[1640,48974+6]..[1640,48974+14])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[1640,48974+15]..[1640,48974+19])
                                                    Ppat_var "tok'" (src/grammarFunctor.ml[1640,48974+15]..[1640,48974+19])
                                              expression (src/grammarFunctor.ml[1641,48997+8]..[1642,49039+16])
                                                Pexp_sequence
                                                expression (src/grammarFunctor.ml[1641,48997+8]..[1641,48997+40])
                                                  Pexp_assert
                                                  expression (src/grammarFunctor.ml[1641,48997+15]..[1641,48997+40])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1641,48997+16]..[1641,48997+30])
                                                      Pexp_ident "Terminal.equal" (src/grammarFunctor.ml[1641,48997+16]..[1641,48997+30])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1641,48997+31]..[1641,48997+34])
                                                          Pexp_ident "tok" (src/grammarFunctor.ml[1641,48997+31]..[1641,48997+34])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1641,48997+35]..[1641,48997+39])
                                                          Pexp_ident "tok'" (src/grammarFunctor.ml[1641,48997+35]..[1641,48997+39])
                                                    ]
                                                expression (src/grammarFunctor.ml[1642,49039+8]..[1642,49039+16])
                                                  Pexp_construct "EObvious" (src/grammarFunctor.ml[1642,49039+8]..[1642,49039+16])
                                                  None
                                            <case>
                                              pattern (src/grammarFunctor.ml[1643,49056+6]..[1643,49056+17])
                                                Ppat_construct "Symbol.N" (src/grammarFunctor.ml[1643,49056+6]..[1643,49056+14])
                                                Some
                                                  []
                                                  pattern (src/grammarFunctor.ml[1643,49056+15]..[1643,49056+17])
                                                    Ppat_var "nt" (src/grammarFunctor.ml[1643,49056+15]..[1643,49056+17])
                                              expression (src/grammarFunctor.ml[1644,49077+8]..[1653,49402+11])
                                                Pexp_ifthenelse
                                                expression (src/grammarFunctor.ml[1644,49077+11]..[1644,49077+53])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1644,49077+11]..[1644,49077+26])
                                                    Pexp_ident "TerminalSet.mem" (src/grammarFunctor.ml[1644,49077+11]..[1644,49077+26])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1644,49077+27]..[1644,49077+30])
                                                        Pexp_ident "tok" (src/grammarFunctor.ml[1644,49077+27]..[1644,49077+30])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1644,49077+31]..[1644,49077+53])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1644,49077+32]..[1644,49077+49])
                                                          Pexp_ident "FIRST.nonterminal" (src/grammarFunctor.ml[1644,49077+32]..[1644,49077+49])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1644,49077+50]..[1644,49077+52])
                                                              Pexp_ident "nt" (src/grammarFunctor.ml[1644,49077+50]..[1644,49077+52])
                                                        ]
                                                  ]
                                                expression (src/grammarFunctor.ml[1645,49136+10]..[1645,49136+26])
                                                  Pexp_construct "EFirst" (src/grammarFunctor.ml[1645,49136+10]..[1645,49136+16])
                                                  Some
                                                    expression (src/grammarFunctor.ml[1645,49136+17]..[1645,49136+26])
                                                      Pexp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[1645,49136+18]..[1645,49136+21])
                                                          Pexp_ident "tok" (src/grammarFunctor.ml[1645,49136+18]..[1645,49136+21])
                                                        expression (src/grammarFunctor.ml[1645,49136+23]..[1645,49136+25])
                                                          Pexp_ident "nt" (src/grammarFunctor.ml[1645,49136+23]..[1645,49136+25])
                                                      ]
                                                Some
                                                  expression (src/grammarFunctor.ml[1646,49163+13]..[1653,49402+11])
                                                    Pexp_sequence
                                                    expression (src/grammarFunctor.ml[1647,49182+10]..[1647,49182+42])
                                                      Pexp_assert
                                                      expression (src/grammarFunctor.ml[1647,49182+17]..[1647,49182+42])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1647,49182+18]..[1647,49182+38])
                                                          Pexp_ident "NULLABLE.nonterminal" (src/grammarFunctor.ml[1647,49182+18]..[1647,49182+38])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1647,49182+39]..[1647,49182+41])
                                                              Pexp_ident "nt" (src/grammarFunctor.ml[1647,49182+39]..[1647,49182+41])
                                                        ]
                                                    expression (src/grammarFunctor.ml[1648,49226+10]..[1652,49362+39])
                                                      Pexp_match
                                                      expression (src/grammarFunctor.ml[1648,49226+16]..[1648,49226+28])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1648,49226+16]..[1648,49226+20])
                                                          Pexp_ident "loop" (src/grammarFunctor.ml[1648,49226+16]..[1648,49226+20])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1648,49226+21]..[1648,49226+28])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1648,49226+24]..[1648,49226+25])
                                                                Pexp_ident "+" (src/grammarFunctor.ml[1648,49226+24]..[1648,49226+25])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1648,49226+22]..[1648,49226+23])
                                                                    Pexp_ident "i" (src/grammarFunctor.ml[1648,49226+22]..[1648,49226+23])
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1648,49226+26]..[1648,49226+27])
                                                                    Pexp_constant PConst_int (1,None)
                                                              ]
                                                        ]
                                                      [
                                                        <case>
                                                          pattern (src/grammarFunctor.ml[1649,49260+12]..[1649,49260+34])
                                                            Ppat_construct "ENullable" (src/grammarFunctor.ml[1649,49260+12]..[1649,49260+21])
                                                            Some
                                                              []
                                                              pattern (src/grammarFunctor.ml[1649,49260+22]..[1649,49260+34])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (src/grammarFunctor.ml[1649,49260+23]..[1649,49260+30])
                                                                    Ppat_var "symbols" (src/grammarFunctor.ml[1649,49260+23]..[1649,49260+30])
                                                                  pattern (src/grammarFunctor.ml[1649,49260+32]..[1649,49260+33])
                                                                    Ppat_var "e" (src/grammarFunctor.ml[1649,49260+32]..[1649,49260+33])
                                                                ]
                                                          expression (src/grammarFunctor.ml[1650,49298+14]..[1650,49298+46])
                                                            Pexp_construct "ENullable" (src/grammarFunctor.ml[1650,49298+14]..[1650,49298+23])
                                                            Some
                                                              expression (src/grammarFunctor.ml[1650,49298+24]..[1650,49298+46])
                                                                Pexp_tuple
                                                                [
                                                                  expression (src/grammarFunctor.ml[1650,49298+25]..[1650,49298+42])
                                                                    Pexp_construct "::" (src/grammarFunctor.ml[1650,49298+32]..[1650,49298+34])
                                                                    Some
                                                                      expression (src/grammarFunctor.ml[1650,49298+25]..[1650,49298+42]) ghost
Pexp_tuple
[
  expression (src/grammarFunctor.ml[1650,49298+25]..[1650,49298+31])
    Pexp_ident "symbol" (src/grammarFunctor.ml[1650,49298+25]..[1650,49298+31])
  expression (src/grammarFunctor.ml[1650,49298+35]..[1650,49298+42])
    Pexp_ident "symbols" (src/grammarFunctor.ml[1650,49298+35]..[1650,49298+42])
]
                                                                  expression (src/grammarFunctor.ml[1650,49298+44]..[1650,49298+45])
                                                                    Pexp_ident "e" (src/grammarFunctor.ml[1650,49298+44]..[1650,49298+45])
                                                                ]
                                                        <case>
                                                          pattern (src/grammarFunctor.ml[1651,49345+12]..[1651,49345+13])
                                                            Ppat_var "e" (src/grammarFunctor.ml[1651,49345+12]..[1651,49345+13])
                                                          expression (src/grammarFunctor.ml[1652,49362+14]..[1652,49362+39])
                                                            Pexp_construct "ENullable" (src/grammarFunctor.ml[1652,49362+14]..[1652,49362+23])
                                                            Some
                                                              expression (src/grammarFunctor.ml[1652,49362+24]..[1652,49362+39])
                                                                Pexp_tuple
                                                                [
                                                                  expression (src/grammarFunctor.ml[1652,49362+25]..[1652,49362+35])
                                                                    Pexp_construct "::" (src/grammarFunctor.ml[1652,49362+27]..[1652,49362+35]) ghost
                                                                    Some
                                                                      expression (src/grammarFunctor.ml[1652,49362+27]..[1652,49362+35]) ghost
Pexp_tuple
[
  expression (src/grammarFunctor.ml[1652,49362+27]..[1652,49362+33])
    Pexp_ident "symbol" (src/grammarFunctor.ml[1652,49362+27]..[1652,49362+33])
  expression (src/grammarFunctor.ml[1652,49362+34]..[1652,49362+35]) ghost
    Pexp_construct "[]" (src/grammarFunctor.ml[1652,49362+34]..[1652,49362+35]) ghost
    None
]
                                                                  expression (src/grammarFunctor.ml[1652,49362+37]..[1652,49362+38])
                                                                    Pexp_ident "e" (src/grammarFunctor.ml[1652,49362+37]..[1652,49362+38])
                                                                ]
                                                      ]
                                          ]
                              ]
                              expression (src/grammarFunctor.ml[1655,49419+2]..[1655,49419+8])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1655,49419+2]..[1655,49419+6])
                                  Pexp_ident "loop" (src/grammarFunctor.ml[1655,49419+2]..[1655,49419+6])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1655,49419+7]..[1655,49419+8])
                                      Pexp_ident "i" (src/grammarFunctor.ml[1655,49419+7]..[1655,49419+8])
                                ]
                ]
              structure_item (src/grammarFunctor.ml[1657,49429+0]..[1669,49786+9])
                Pstr_value Rec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1657,49429+8]..[1657,49429+15])
                      Ppat_var "convert" (src/grammarFunctor.ml[1657,49429+8]..[1657,49429+15])
                    expression (src/grammarFunctor.ml[1657,49429+18]..[1669,49786+9])
                      Pexp_function
                      [
                        <case>
                          pattern (src/grammarFunctor.ml[1658,49456+4]..[1658,49456+12])
                            Ppat_construct "EObvious" (src/grammarFunctor.ml[1658,49456+4]..[1658,49456+12])
                            None
                          expression (src/grammarFunctor.ml[1659,49472+6]..[1659,49472+8])
                            Pexp_constant PConst_string("",(src/grammarFunctor.ml[1659,49472+7]..[1659,49472+7]),None)
                        <case>
                          pattern (src/grammarFunctor.ml[1660,49481+4]..[1660,49481+20])
                            Ppat_construct "EFirst" (src/grammarFunctor.ml[1660,49481+4]..[1660,49481+10])
                            Some
                              []
                              pattern (src/grammarFunctor.ml[1660,49481+11]..[1660,49481+20])
                                Ppat_tuple
                                [
                                  pattern (src/grammarFunctor.ml[1660,49481+12]..[1660,49481+15])
                                    Ppat_var "tok" (src/grammarFunctor.ml[1660,49481+12]..[1660,49481+15])
                                  pattern (src/grammarFunctor.ml[1660,49481+17]..[1660,49481+19])
                                    Ppat_var "nt" (src/grammarFunctor.ml[1660,49481+17]..[1660,49481+19])
                                ]
                          expression (src/grammarFunctor.ml[1661,49505+6]..[1663,49586+28])
                            Pexp_apply
                            expression (src/grammarFunctor.ml[1661,49505+6]..[1661,49505+20])
                              Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[1661,49505+6]..[1661,49505+20])
                            [
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1661,49505+21]..[1661,49505+43])
                                  Pexp_constant PConst_string("%s can begin with %s",(src/grammarFunctor.ml[1661,49505+22]..[1661,49505+42]),None)
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1662,49549+8]..[1662,49549+36])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1662,49549+9]..[1662,49549+26])
                                    Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1662,49549+9]..[1662,49549+26])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1662,49549+27]..[1662,49549+32])
                                        Pexp_construct "false" (src/grammarFunctor.ml[1662,49549+27]..[1662,49549+32])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1662,49549+33]..[1662,49549+35])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[1662,49549+33]..[1662,49549+35])
                                  ]
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1663,49586+8]..[1663,49586+28])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1663,49586+9]..[1663,49586+23])
                                    Pexp_ident "Terminal.print" (src/grammarFunctor.ml[1663,49586+9]..[1663,49586+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1663,49586+24]..[1663,49586+27])
                                        Pexp_ident "tok" (src/grammarFunctor.ml[1663,49586+24]..[1663,49586+27])
                                  ]
                            ]
                        <case>
                          pattern (src/grammarFunctor.ml[1664,49615+4]..[1664,49615+26])
                            Ppat_construct "ENullable" (src/grammarFunctor.ml[1664,49615+4]..[1664,49615+13])
                            Some
                              []
                              pattern (src/grammarFunctor.ml[1664,49615+14]..[1664,49615+26])
                                Ppat_tuple
                                [
                                  pattern (src/grammarFunctor.ml[1664,49615+15]..[1664,49615+22])
                                    Ppat_var "symbols" (src/grammarFunctor.ml[1664,49615+15]..[1664,49615+22])
                                  pattern (src/grammarFunctor.ml[1664,49615+24]..[1664,49615+25])
                                    Ppat_var "e" (src/grammarFunctor.ml[1664,49615+24]..[1664,49615+25])
                                ]
                          expression (src/grammarFunctor.ml[1665,49645+6]..[1669,49786+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1665,49645+10]..[1665,49645+11])
                                  Ppat_var "e" (src/grammarFunctor.ml[1665,49645+10]..[1665,49645+11])
                                expression (src/grammarFunctor.ml[1665,49645+14]..[1665,49645+23])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1665,49645+14]..[1665,49645+21])
                                    Pexp_ident "convert" (src/grammarFunctor.ml[1665,49645+14]..[1665,49645+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1665,49645+22]..[1665,49645+23])
                                        Pexp_ident "e" (src/grammarFunctor.ml[1665,49645+22]..[1665,49645+23])
                                  ]
                            ]
                            expression (src/grammarFunctor.ml[1666,49672+6]..[1669,49786+9])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1666,49672+6]..[1666,49672+20])
                                Pexp_ident "Printf.sprintf" (src/grammarFunctor.ml[1666,49672+6]..[1666,49672+20])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1666,49672+21]..[1666,49672+40])
                                    Pexp_constant PConst_string("%s can vanish%s%s",(src/grammarFunctor.ml[1666,49672+22]..[1666,49672+39]),None)
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1667,49713+8]..[1667,49713+31])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1667,49713+9]..[1667,49713+22])
                                      Pexp_ident "Symbol.printl" (src/grammarFunctor.ml[1667,49713+9]..[1667,49713+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1667,49713+23]..[1667,49713+30])
                                          Pexp_ident "symbols" (src/grammarFunctor.ml[1667,49713+23]..[1667,49713+30])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1668,49745+8]..[1668,49745+40])
                                    Pexp_ifthenelse
                                    expression (src/grammarFunctor.ml[1668,49745+12]..[1668,49745+18])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1668,49745+14]..[1668,49745+15])
                                        Pexp_ident "=" (src/grammarFunctor.ml[1668,49745+14]..[1668,49745+15])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1668,49745+12]..[1668,49745+13])
                                            Pexp_ident "e" (src/grammarFunctor.ml[1668,49745+12]..[1668,49745+13])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1668,49745+16]..[1668,49745+18])
                                            Pexp_constant PConst_string("",(src/grammarFunctor.ml[1668,49745+17]..[1668,49745+17]),None)
                                      ]
                                    expression (src/grammarFunctor.ml[1668,49745+24]..[1668,49745+26])
                                      Pexp_constant PConst_string("",(src/grammarFunctor.ml[1668,49745+25]..[1668,49745+25]),None)
                                    Some
                                      expression (src/grammarFunctor.ml[1668,49745+32]..[1668,49745+39])
                                        Pexp_constant PConst_string(" and ",(src/grammarFunctor.ml[1668,49745+33]..[1668,49745+38]),None)
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1669,49786+8]..[1669,49786+9])
                                    Pexp_ident "e" (src/grammarFunctor.ml[1669,49786+8]..[1669,49786+9])
                              ]
                      ]
                ]
              structure_item (src/grammarFunctor.ml[1674,49913+0]..[1729,51289+3])
                Pstr_module
                "Analysis" (src/grammarFunctor.ml[1674,49913+7]..[1674,49913+15])
                  module_expr (src/grammarFunctor.ml[1674,49913+18]..[1729,51289+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1676,49939+2]..[1676,49939+37])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1676,49939+6]..[1676,49939+14])
                              Ppat_var "nullable" (src/grammarFunctor.ml[1676,49939+6]..[1676,49939+14])
                            expression (src/grammarFunctor.ml[1676,49939+17]..[1676,49939+37])
                              Pexp_ident "NULLABLE.nonterminal" (src/grammarFunctor.ml[1676,49939+17]..[1676,49939+37])
                        ]
                      structure_item (src/grammarFunctor.ml[1678,49978+2]..[1678,49978+39])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1678,49978+6]..[1678,49978+21])
                              Ppat_var "nullable_symbol" (src/grammarFunctor.ml[1678,49978+6]..[1678,49978+21])
                            expression (src/grammarFunctor.ml[1678,49978+24]..[1678,49978+39])
                              Pexp_ident "NULLABLE.symbol" (src/grammarFunctor.ml[1678,49978+24]..[1678,49978+39])
                        ]
                      structure_item (src/grammarFunctor.ml[1680,50019+2]..[1680,50019+31])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1680,50019+6]..[1680,50019+11])
                              Ppat_var "first" (src/grammarFunctor.ml[1680,50019+6]..[1680,50019+11])
                            expression (src/grammarFunctor.ml[1680,50019+14]..[1680,50019+31])
                              Pexp_ident "FIRST.nonterminal" (src/grammarFunctor.ml[1680,50019+14]..[1680,50019+31])
                        ]
                      structure_item (src/grammarFunctor.ml[1682,50052+2]..[1682,50052+33])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1682,50052+6]..[1682,50052+18])
                              Ppat_var "first_symbol" (src/grammarFunctor.ml[1682,50052+6]..[1682,50052+18])
                            expression (src/grammarFunctor.ml[1682,50052+21]..[1682,50052+33])
                              Pexp_ident "FIRST.symbol" (src/grammarFunctor.ml[1682,50052+21]..[1682,50052+33])
                        ]
                      structure_item (src/grammarFunctor.ml[1686,50144+2]..[1688,50211+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1686,50144+6]..[1686,50144+25])
                              Ppat_var "nullable_first_prod" (src/grammarFunctor.ml[1686,50144+6]..[1686,50144+25])
                            expression (src/grammarFunctor.ml[1686,50144+26]..[1688,50211+27]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1686,50144+26]..[1686,50144+30])
                                Ppat_var "prod" (src/grammarFunctor.ml[1686,50144+26]..[1686,50144+30])
                              expression (src/grammarFunctor.ml[1686,50144+31]..[1688,50211+27]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1686,50144+31]..[1686,50144+32])
                                  Ppat_var "i" (src/grammarFunctor.ml[1686,50144+31]..[1686,50144+32])
                                expression (src/grammarFunctor.ml[1687,50179+4]..[1688,50211+27])
                                  Pexp_tuple
                                  [
                                    expression (src/grammarFunctor.ml[1687,50179+4]..[1687,50179+30])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1687,50179+4]..[1687,50179+23])
                                        Pexp_ident "NULLABLE.production" (src/grammarFunctor.ml[1687,50179+4]..[1687,50179+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1687,50179+24]..[1687,50179+28])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[1687,50179+24]..[1687,50179+28])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1687,50179+29]..[1687,50179+30])
                                            Pexp_ident "i" (src/grammarFunctor.ml[1687,50179+29]..[1687,50179+30])
                                      ]
                                    expression (src/grammarFunctor.ml[1688,50211+4]..[1688,50211+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1688,50211+4]..[1688,50211+20])
                                        Pexp_ident "FIRST.production" (src/grammarFunctor.ml[1688,50211+4]..[1688,50211+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1688,50211+21]..[1688,50211+25])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[1688,50211+21]..[1688,50211+25])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1688,50211+26]..[1688,50211+27])
                                            Pexp_ident "i" (src/grammarFunctor.ml[1688,50211+26]..[1688,50211+27])
                                      ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1693,50339+2]..[1698,50513+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1693,50339+6]..[1693,50339+25])
                              Ppat_var "nullable_first_prod" (src/grammarFunctor.ml[1693,50339+6]..[1693,50339+25])
                            expression (src/grammarFunctor.ml[1694,50367+4]..[1698,50513+5])
                              Pexp_apply
                              expression (src/grammarFunctor.ml[1694,50367+4]..[1694,50367+17])
                                Pexp_ident "Misc.tabulate" (src/grammarFunctor.ml[1694,50367+4]..[1694,50367+17])
                              [
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1694,50367+18]..[1694,50367+30])
                                    Pexp_ident "Production.n" (src/grammarFunctor.ml[1694,50367+18]..[1694,50367+30])
                                <arg>
                                Nolabel
                                  expression (src/grammarFunctor.ml[1694,50367+31]..[1698,50513+5])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/grammarFunctor.ml[1694,50367+36]..[1694,50367+40])
                                      Ppat_var "prod" (src/grammarFunctor.ml[1694,50367+36]..[1694,50367+40])
                                    expression (src/grammarFunctor.ml[1695,50411+6]..[1697,50505+7])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1695,50411+6]..[1695,50411+19])
                                        Pexp_ident "Misc.tabulate" (src/grammarFunctor.ml[1695,50411+6]..[1695,50411+19])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1695,50411+20]..[1695,50411+48])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1695,50411+44]..[1695,50411+45])
                                              Pexp_ident "+" (src/grammarFunctor.ml[1695,50411+44]..[1695,50411+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1695,50411+21]..[1695,50411+43])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1695,50411+21]..[1695,50411+38])
                                                    Pexp_ident "Production.length" (src/grammarFunctor.ml[1695,50411+21]..[1695,50411+38])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1695,50411+39]..[1695,50411+43])
                                                        Pexp_ident "prod" (src/grammarFunctor.ml[1695,50411+39]..[1695,50411+43])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1695,50411+46]..[1695,50411+47])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1695,50411+49]..[1697,50505+7])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (src/grammarFunctor.ml[1695,50411+54]..[1695,50411+55])
                                              Ppat_var "i" (src/grammarFunctor.ml[1695,50411+54]..[1695,50411+55])
                                            expression (src/grammarFunctor.ml[1696,50470+8]..[1696,50470+34])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1696,50470+8]..[1696,50470+27])
                                                Pexp_ident "nullable_first_prod" (src/grammarFunctor.ml[1696,50470+8]..[1696,50470+27])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1696,50470+28]..[1696,50470+32])
                                                    Pexp_ident "prod" (src/grammarFunctor.ml[1696,50470+28]..[1696,50470+32])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1696,50470+33]..[1696,50470+34])
                                                    Pexp_ident "i" (src/grammarFunctor.ml[1696,50470+33]..[1696,50470+34])
                                              ]
                                      ]
                              ]
                        ]
                      structure_item (src/grammarFunctor.ml[1700,50520+2]..[1705,50674+11])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1700,50520+6]..[1700,50520+26])
                              Ppat_var "first_prod_lookahead" (src/grammarFunctor.ml[1700,50520+6]..[1700,50520+26])
                            expression (src/grammarFunctor.ml[1700,50520+27]..[1705,50674+11]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1700,50520+27]..[1700,50520+31])
                                Ppat_var "prod" (src/grammarFunctor.ml[1700,50520+27]..[1700,50520+31])
                              expression (src/grammarFunctor.ml[1700,50520+32]..[1705,50674+11]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1700,50520+32]..[1700,50520+33])
                                  Ppat_var "i" (src/grammarFunctor.ml[1700,50520+32]..[1700,50520+33])
                                expression (src/grammarFunctor.ml[1700,50520+34]..[1705,50674+11]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1700,50520+34]..[1700,50520+35])
                                    Ppat_var "z" (src/grammarFunctor.ml[1700,50520+34]..[1700,50520+35])
                                  expression (src/grammarFunctor.ml[1701,50558+4]..[1705,50674+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[1701,50558+8]..[1701,50558+23])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[1701,50558+8]..[1701,50558+16])
                                              Ppat_var "nullable" (src/grammarFunctor.ml[1701,50558+8]..[1701,50558+16])
                                            pattern (src/grammarFunctor.ml[1701,50558+18]..[1701,50558+23])
                                              Ppat_var "first" (src/grammarFunctor.ml[1701,50558+18]..[1701,50558+23])
                                          ]
                                        expression (src/grammarFunctor.ml[1701,50558+26]..[1701,50558+52])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1701,50558+26]..[1701,50558+45])
                                            Pexp_ident "nullable_first_prod" (src/grammarFunctor.ml[1701,50558+26]..[1701,50558+45])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1701,50558+46]..[1701,50558+50])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[1701,50558+46]..[1701,50558+50])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1701,50558+51]..[1701,50558+52])
                                                Pexp_ident "i" (src/grammarFunctor.ml[1701,50558+51]..[1701,50558+52])
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[1702,50614+4]..[1705,50674+11])
                                      Pexp_ifthenelse
                                      expression (src/grammarFunctor.ml[1702,50614+7]..[1702,50614+15])
                                        Pexp_ident "nullable" (src/grammarFunctor.ml[1702,50614+7]..[1702,50614+15])
                                      expression (src/grammarFunctor.ml[1703,50635+6]..[1703,50635+29])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1703,50635+6]..[1703,50635+21])
                                          Pexp_ident "TerminalSet.add" (src/grammarFunctor.ml[1703,50635+6]..[1703,50635+21])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1703,50635+22]..[1703,50635+23])
                                              Pexp_ident "z" (src/grammarFunctor.ml[1703,50635+22]..[1703,50635+23])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1703,50635+24]..[1703,50635+29])
                                              Pexp_ident "first" (src/grammarFunctor.ml[1703,50635+24]..[1703,50635+29])
                                        ]
                                      Some
                                        expression (src/grammarFunctor.ml[1705,50674+6]..[1705,50674+11])
                                          Pexp_ident "first" (src/grammarFunctor.ml[1705,50674+6]..[1705,50674+11])
                        ]
                      structure_item (src/grammarFunctor.ml[1707,50687+2]..[1708,50765+31])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1707,50687+6]..[1707,50687+23])
                              Ppat_var "explain_first_rhs" (src/grammarFunctor.ml[1707,50687+6]..[1707,50687+23])
                            expression (src/grammarFunctor.ml[1707,50687+24]..[1708,50765+31]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1707,50687+24]..[1707,50687+42])
                                Ppat_constraint
                                pattern (src/grammarFunctor.ml[1707,50687+25]..[1707,50687+28])
                                  Ppat_var "tok" (src/grammarFunctor.ml[1707,50687+25]..[1707,50687+28])
                                core_type (src/grammarFunctor.ml[1707,50687+31]..[1707,50687+41])
                                  Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1707,50687+31]..[1707,50687+41])
                                  []
                              expression (src/grammarFunctor.ml[1707,50687+43]..[1708,50765+31]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1707,50687+43]..[1707,50687+65])
                                  Ppat_constraint
                                  pattern (src/grammarFunctor.ml[1707,50687+44]..[1707,50687+47])
                                    Ppat_var "rhs" (src/grammarFunctor.ml[1707,50687+44]..[1707,50687+47])
                                  core_type (src/grammarFunctor.ml[1707,50687+50]..[1707,50687+64])
                                    Ptyp_constr "array" (src/grammarFunctor.ml[1707,50687+59]..[1707,50687+64])
                                    [
                                      core_type (src/grammarFunctor.ml[1707,50687+50]..[1707,50687+58])
                                        Ptyp_constr "Symbol.t" (src/grammarFunctor.ml[1707,50687+50]..[1707,50687+58])
                                        []
                                    ]
                                expression (src/grammarFunctor.ml[1707,50687+66]..[1708,50765+31]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/grammarFunctor.ml[1707,50687+66]..[1707,50687+75])
                                    Ppat_constraint
                                    pattern (src/grammarFunctor.ml[1707,50687+67]..[1707,50687+68])
                                      Ppat_var "i" (src/grammarFunctor.ml[1707,50687+67]..[1707,50687+68])
                                    core_type (src/grammarFunctor.ml[1707,50687+71]..[1707,50687+74])
                                      Ptyp_constr "int" (src/grammarFunctor.ml[1707,50687+71]..[1707,50687+74])
                                      []
                                  expression (src/grammarFunctor.ml[1708,50765+4]..[1708,50765+31])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1708,50765+4]..[1708,50765+11])
                                      Pexp_ident "convert" (src/grammarFunctor.ml[1708,50765+4]..[1708,50765+11])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1708,50765+12]..[1708,50765+31])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1708,50765+13]..[1708,50765+20])
                                            Pexp_ident "explain" (src/grammarFunctor.ml[1708,50765+13]..[1708,50765+20])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1708,50765+21]..[1708,50765+24])
                                                Pexp_ident "tok" (src/grammarFunctor.ml[1708,50765+21]..[1708,50765+24])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1708,50765+25]..[1708,50765+28])
                                                Pexp_ident "rhs" (src/grammarFunctor.ml[1708,50765+25]..[1708,50765+28])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1708,50765+29]..[1708,50765+30])
                                                Pexp_ident "i" (src/grammarFunctor.ml[1708,50765+29]..[1708,50765+30])
                                          ]
                                    ]
                        ]
                      structure_item (src/grammarFunctor.ml[1710,50798+2]..[1710,50798+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1710,50798+6]..[1710,50798+12])
                              Ppat_var "follow" (src/grammarFunctor.ml[1710,50798+6]..[1710,50798+12])
                            expression (src/grammarFunctor.ml[1710,50798+15]..[1710,50798+21])
                              Pexp_ident "follow" (src/grammarFunctor.ml[1710,50798+15]..[1710,50798+21])
                        ]
                      structure_item (src/grammarFunctor.ml[1712,50821+2]..[1713,50840+25])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1712,50821+6]..[1712,50821+16])
                              Ppat_var "attributes" (src/grammarFunctor.ml[1712,50821+6]..[1712,50821+16])
                            expression (src/grammarFunctor.ml[1713,50840+4]..[1713,50840+25])
                              Pexp_field
                              expression (src/grammarFunctor.ml[1713,50840+4]..[1713,50840+11])
                                Pexp_ident "grammar" (src/grammarFunctor.ml[1713,50840+4]..[1713,50840+11])
                              "gr_attributes" (src/grammarFunctor.ml[1713,50840+12]..[1713,50840+25])
                        ]
                      structure_item (src/grammarFunctor.ml[1715,50867+2]..[1716,50886+55])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1715,50867+6]..[1715,50867+13])
                              Ppat_var "minimal" (src/grammarFunctor.ml[1715,50867+6]..[1715,50867+13])
                            expression (src/grammarFunctor.ml[1715,50867+14]..[1716,50886+55]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1715,50867+14]..[1715,50867+16])
                                Ppat_var "nt" (src/grammarFunctor.ml[1715,50867+14]..[1715,50867+16])
                              expression (src/grammarFunctor.ml[1716,50886+4]..[1716,50886+55])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1716,50886+4]..[1716,50886+30])
                                  Pexp_ident "CompletedNatWitness.to_int" (src/grammarFunctor.ml[1716,50886+4]..[1716,50886+30])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1716,50886+31]..[1716,50886+55])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1716,50886+32]..[1716,50886+51])
                                        Pexp_ident "MINIMAL.nonterminal" (src/grammarFunctor.ml[1716,50886+32]..[1716,50886+51])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1716,50886+52]..[1716,50886+54])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[1716,50886+52]..[1716,50886+54])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[1718,50943+2]..[1720,51023+58])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1718,50943+6]..[1718,50943+18])
                              Ppat_var "minimal_prod" (src/grammarFunctor.ml[1718,50943+6]..[1718,50943+18])
                            expression (src/grammarFunctor.ml[1718,50943+19]..[1720,51023+58]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1718,50943+19]..[1718,50943+23])
                                Ppat_var "prod" (src/grammarFunctor.ml[1718,50943+19]..[1718,50943+23])
                              expression (src/grammarFunctor.ml[1718,50943+24]..[1720,51023+58]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1718,50943+24]..[1718,50943+25])
                                  Ppat_var "i" (src/grammarFunctor.ml[1718,50943+24]..[1718,50943+25])
                                expression (src/grammarFunctor.ml[1719,50971+4]..[1720,51023+58])
                                  Pexp_sequence
                                  expression (src/grammarFunctor.ml[1719,50971+4]..[1719,50971+50])
                                    Pexp_assert
                                    expression (src/grammarFunctor.ml[1719,50971+11]..[1719,50971+50])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1719,50971+19]..[1719,50971+21])
                                        Pexp_ident "&&" (src/grammarFunctor.ml[1719,50971+19]..[1719,50971+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1719,50971+12]..[1719,50971+18])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1719,50971+14]..[1719,50971+16])
                                              Pexp_ident "<=" (src/grammarFunctor.ml[1719,50971+14]..[1719,50971+16])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1719,50971+12]..[1719,50971+13])
                                                  Pexp_constant PConst_int (0,None)
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1719,50971+17]..[1719,50971+18])
                                                  Pexp_ident "i" (src/grammarFunctor.ml[1719,50971+17]..[1719,50971+18])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1719,50971+22]..[1719,50971+49])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1719,50971+24]..[1719,50971+26])
                                              Pexp_ident "<=" (src/grammarFunctor.ml[1719,50971+24]..[1719,50971+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1719,50971+22]..[1719,50971+23])
                                                  Pexp_ident "i" (src/grammarFunctor.ml[1719,50971+22]..[1719,50971+23])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1719,50971+27]..[1719,50971+49])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1719,50971+27]..[1719,50971+44])
                                                    Pexp_ident "Production.length" (src/grammarFunctor.ml[1719,50971+27]..[1719,50971+44])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1719,50971+45]..[1719,50971+49])
                                                        Pexp_ident "prod" (src/grammarFunctor.ml[1719,50971+45]..[1719,50971+49])
                                                  ]
                                            ]
                                      ]
                                  expression (src/grammarFunctor.ml[1720,51023+4]..[1720,51023+58])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1720,51023+4]..[1720,51023+30])
                                      Pexp_ident "CompletedNatWitness.to_int" (src/grammarFunctor.ml[1720,51023+4]..[1720,51023+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1720,51023+31]..[1720,51023+58])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1720,51023+32]..[1720,51023+50])
                                            Pexp_ident "MINIMAL.production" (src/grammarFunctor.ml[1720,51023+32]..[1720,51023+50])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1720,51023+51]..[1720,51023+55])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[1720,51023+51]..[1720,51023+55])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1720,51023+56]..[1720,51023+57])
                                                Pexp_ident "i" (src/grammarFunctor.ml[1720,51023+56]..[1720,51023+57])
                                          ]
                                    ]
                        ]
                      structure_item (src/grammarFunctor.ml[1722,51083+2]..[1723,51102+50])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1722,51083+6]..[1722,51083+13])
                              Ppat_var "maximal" (src/grammarFunctor.ml[1722,51083+6]..[1722,51083+13])
                            expression (src/grammarFunctor.ml[1722,51083+14]..[1723,51102+50]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1722,51083+14]..[1722,51083+16])
                                Ppat_var "nt" (src/grammarFunctor.ml[1722,51083+14]..[1722,51083+16])
                              expression (src/grammarFunctor.ml[1723,51102+4]..[1723,51102+50])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1723,51102+4]..[1723,51102+25])
                                  Pexp_ident "NatInfinityMax.to_int" (src/grammarFunctor.ml[1723,51102+4]..[1723,51102+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1723,51102+26]..[1723,51102+50])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1723,51102+27]..[1723,51102+46])
                                        Pexp_ident "MAXIMAL.nonterminal" (src/grammarFunctor.ml[1723,51102+27]..[1723,51102+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1723,51102+47]..[1723,51102+49])
                                            Pexp_ident "nt" (src/grammarFunctor.ml[1723,51102+47]..[1723,51102+49])
                                      ]
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[1725,51154+2]..[1727,51234+53])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1725,51154+6]..[1725,51154+18])
                              Ppat_var "maximal_prod" (src/grammarFunctor.ml[1725,51154+6]..[1725,51154+18])
                            expression (src/grammarFunctor.ml[1725,51154+19]..[1727,51234+53]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1725,51154+19]..[1725,51154+23])
                                Ppat_var "prod" (src/grammarFunctor.ml[1725,51154+19]..[1725,51154+23])
                              expression (src/grammarFunctor.ml[1725,51154+24]..[1727,51234+53]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1725,51154+24]..[1725,51154+25])
                                  Ppat_var "i" (src/grammarFunctor.ml[1725,51154+24]..[1725,51154+25])
                                expression (src/grammarFunctor.ml[1726,51182+4]..[1727,51234+53])
                                  Pexp_sequence
                                  expression (src/grammarFunctor.ml[1726,51182+4]..[1726,51182+50])
                                    Pexp_assert
                                    expression (src/grammarFunctor.ml[1726,51182+11]..[1726,51182+50])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1726,51182+19]..[1726,51182+21])
                                        Pexp_ident "&&" (src/grammarFunctor.ml[1726,51182+19]..[1726,51182+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1726,51182+12]..[1726,51182+18])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1726,51182+14]..[1726,51182+16])
                                              Pexp_ident "<=" (src/grammarFunctor.ml[1726,51182+14]..[1726,51182+16])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1726,51182+12]..[1726,51182+13])
                                                  Pexp_constant PConst_int (0,None)
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1726,51182+17]..[1726,51182+18])
                                                  Pexp_ident "i" (src/grammarFunctor.ml[1726,51182+17]..[1726,51182+18])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1726,51182+22]..[1726,51182+49])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1726,51182+24]..[1726,51182+26])
                                              Pexp_ident "<=" (src/grammarFunctor.ml[1726,51182+24]..[1726,51182+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1726,51182+22]..[1726,51182+23])
                                                  Pexp_ident "i" (src/grammarFunctor.ml[1726,51182+22]..[1726,51182+23])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1726,51182+27]..[1726,51182+49])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1726,51182+27]..[1726,51182+44])
                                                    Pexp_ident "Production.length" (src/grammarFunctor.ml[1726,51182+27]..[1726,51182+44])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1726,51182+45]..[1726,51182+49])
                                                        Pexp_ident "prod" (src/grammarFunctor.ml[1726,51182+45]..[1726,51182+49])
                                                  ]
                                            ]
                                      ]
                                  expression (src/grammarFunctor.ml[1727,51234+4]..[1727,51234+53])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1727,51234+4]..[1727,51234+25])
                                      Pexp_ident "NatInfinityMax.to_int" (src/grammarFunctor.ml[1727,51234+4]..[1727,51234+25])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1727,51234+26]..[1727,51234+53])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1727,51234+27]..[1727,51234+45])
                                            Pexp_ident "MAXIMAL.production" (src/grammarFunctor.ml[1727,51234+27]..[1727,51234+45])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1727,51234+46]..[1727,51234+50])
                                                Pexp_ident "prod" (src/grammarFunctor.ml[1727,51234+46]..[1727,51234+50])
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1727,51234+51]..[1727,51234+52])
                                                Pexp_ident "i" (src/grammarFunctor.ml[1727,51234+51]..[1727,51234+52])
                                          ]
                                    ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1734,51417+0]..[1830,54038+3])
                Pstr_module
                "Precedence" (src/grammarFunctor.ml[1734,51417+7]..[1734,51417+17])
                  module_expr (src/grammarFunctor.ml[1734,51417+20]..[1830,54038+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1736,51445+2]..[1740,51518+14])
                        Pstr_type Rec
                        [
                          type_declaration "choice" (src/grammarFunctor.ml[1736,51445+7]..[1736,51445+13]) (src/grammarFunctor.ml[1736,51445+2]..[1740,51518+14])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_variant
                                [
                                  (src/grammarFunctor.ml[1737,51461+4]..[1737,51461+17])
                                    "ChooseShift" (src/grammarFunctor.ml[1737,51461+6]..[1737,51461+17])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1738,51479+4]..[1738,51479+18])
                                    "ChooseReduce" (src/grammarFunctor.ml[1738,51479+6]..[1738,51479+18])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1739,51498+4]..[1739,51498+19])
                                    "ChooseNeither" (src/grammarFunctor.ml[1739,51498+6]..[1739,51498+19])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1740,51518+4]..[1740,51518+14])
                                    "DontKnow" (src/grammarFunctor.ml[1740,51518+6]..[1740,51518+14])
                                    []
                                    None
                                ]
                            ptype_private = Public
                            ptype_manifest =
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[1742,51534+2]..[1742,51534+32])
                        Pstr_type Rec
                        [
                          type_declaration "order" (src/grammarFunctor.ml[1742,51534+7]..[1742,51534+12]) (src/grammarFunctor.ml[1742,51534+2]..[1742,51534+32])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_variant
                                [
                                  (src/grammarFunctor.ml[1742,51534+15]..[1742,51534+17])
                                    "Lt" (src/grammarFunctor.ml[1742,51534+15]..[1742,51534+17])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1742,51534+18]..[1742,51534+22])
                                    "Gt" (src/grammarFunctor.ml[1742,51534+20]..[1742,51534+22])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1742,51534+23]..[1742,51534+27])
                                    "Eq" (src/grammarFunctor.ml[1742,51534+25]..[1742,51534+27])
                                    []
                                    None
                                  (src/grammarFunctor.ml[1742,51534+28]..[1742,51534+32])
                                    "Ic" (src/grammarFunctor.ml[1742,51534+30]..[1742,51534+32])
                                    []
                                    None
                                ]
                            ptype_private = Public
                            ptype_manifest =
                              None
                        ]
                      structure_item (src/grammarFunctor.ml[1744,51568+2]..[1758,51971+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1744,51568+6]..[1744,51568+22])
                              Ppat_var "precedence_order" (src/grammarFunctor.ml[1744,51568+6]..[1744,51568+22])
                            expression (src/grammarFunctor.ml[1744,51568+23]..[1758,51971+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1744,51568+23]..[1744,51568+25])
                                Ppat_var "p1" (src/grammarFunctor.ml[1744,51568+23]..[1744,51568+25])
                              expression (src/grammarFunctor.ml[1744,51568+26]..[1758,51971+16]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1744,51568+26]..[1744,51568+28])
                                  Ppat_var "p2" (src/grammarFunctor.ml[1744,51568+26]..[1744,51568+28])
                                expression (src/grammarFunctor.ml[1745,51599+4]..[1758,51971+16])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[1745,51599+10]..[1745,51599+16])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[1745,51599+10]..[1745,51599+12])
                                        Pexp_ident "p1" (src/grammarFunctor.ml[1745,51599+10]..[1745,51599+12])
                                      expression (src/grammarFunctor.ml[1745,51599+14]..[1745,51599+16])
                                        Pexp_ident "p2" (src/grammarFunctor.ml[1745,51599+14]..[1745,51599+16])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1746,51621+8]..[1747,51652+30])
                                        Ppat_or
                                        pattern (src/grammarFunctor.ml[1746,51621+8]..[1746,51621+30])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[1746,51621+8]..[1746,51621+27])
                                              Ppat_construct "UndefinedPrecedence" (src/grammarFunctor.ml[1746,51621+8]..[1746,51621+27])
                                              None
                                            pattern (src/grammarFunctor.ml[1746,51621+29]..[1746,51621+30])
                                              Ppat_any
                                          ]
                                        pattern (src/grammarFunctor.ml[1747,51652+8]..[1747,51652+30])
                                          Ppat_tuple
                                          [
                                            pattern (src/grammarFunctor.ml[1747,51652+8]..[1747,51652+9])
                                              Ppat_any
                                            pattern (src/grammarFunctor.ml[1747,51652+11]..[1747,51652+30])
                                              Ppat_construct "UndefinedPrecedence" (src/grammarFunctor.ml[1747,51652+11]..[1747,51652+30])
                                              None
                                          ]
                                      expression (src/grammarFunctor.ml[1748,51686+10]..[1748,51686+12])
                                        Pexp_construct "Ic" (src/grammarFunctor.ml[1748,51686+10]..[1748,51686+12])
                                        None
                                    <case>
                                      pattern (src/grammarFunctor.ml[1749,51699+8]..[1749,51699+70])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[1749,51699+8]..[1749,51699+38])
                                            Ppat_construct "PrecedenceLevel" (src/grammarFunctor.ml[1749,51699+8]..[1749,51699+23])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[1749,51699+24]..[1749,51699+38])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1749,51699+25]..[1749,51699+27])
                                                    Ppat_var "m1" (src/grammarFunctor.ml[1749,51699+25]..[1749,51699+27])
                                                  pattern (src/grammarFunctor.ml[1749,51699+29]..[1749,51699+31])
                                                    Ppat_var "l1" (src/grammarFunctor.ml[1749,51699+29]..[1749,51699+31])
                                                  pattern (src/grammarFunctor.ml[1749,51699+33]..[1749,51699+34])
                                                    Ppat_any
                                                  pattern (src/grammarFunctor.ml[1749,51699+36]..[1749,51699+37])
                                                    Ppat_any
                                                ]
                                          pattern (src/grammarFunctor.ml[1749,51699+40]..[1749,51699+70])
                                            Ppat_construct "PrecedenceLevel" (src/grammarFunctor.ml[1749,51699+40]..[1749,51699+55])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[1749,51699+56]..[1749,51699+70])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1749,51699+57]..[1749,51699+59])
                                                    Ppat_var "m2" (src/grammarFunctor.ml[1749,51699+57]..[1749,51699+59])
                                                  pattern (src/grammarFunctor.ml[1749,51699+61]..[1749,51699+63])
                                                    Ppat_var "l2" (src/grammarFunctor.ml[1749,51699+61]..[1749,51699+63])
                                                  pattern (src/grammarFunctor.ml[1749,51699+65]..[1749,51699+66])
                                                    Ppat_any
                                                  pattern (src/grammarFunctor.ml[1749,51699+68]..[1749,51699+69])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (src/grammarFunctor.ml[1750,51773+10]..[1758,51971+16])
                                        Pexp_ifthenelse
                                        expression (src/grammarFunctor.ml[1750,51773+13]..[1750,51773+50])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1750,51773+13]..[1750,51773+16])
                                            Pexp_ident "not" (src/grammarFunctor.ml[1750,51773+13]..[1750,51773+16])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1750,51773+17]..[1750,51773+50])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1750,51773+18]..[1750,51773+43])
                                                  Pexp_ident "InputFile.same_input_file" (src/grammarFunctor.ml[1750,51773+18]..[1750,51773+43])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1750,51773+44]..[1750,51773+46])
                                                      Pexp_ident "m1" (src/grammarFunctor.ml[1750,51773+44]..[1750,51773+46])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1750,51773+47]..[1750,51773+49])
                                                      Pexp_ident "m2" (src/grammarFunctor.ml[1750,51773+47]..[1750,51773+49])
                                                ]
                                          ]
                                        expression (src/grammarFunctor.ml[1751,51829+12]..[1751,51829+14])
                                          Pexp_construct "Ic" (src/grammarFunctor.ml[1751,51829+12]..[1751,51829+14])
                                          None
                                        Some
                                          expression (src/grammarFunctor.ml[1753,51859+12]..[1758,51971+16])
                                            Pexp_ifthenelse
                                            expression (src/grammarFunctor.ml[1753,51859+15]..[1753,51859+22])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1753,51859+18]..[1753,51859+19])
                                                Pexp_ident ">" (src/grammarFunctor.ml[1753,51859+18]..[1753,51859+19])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1753,51859+15]..[1753,51859+17])
                                                    Pexp_ident "l1" (src/grammarFunctor.ml[1753,51859+15]..[1753,51859+17])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1753,51859+20]..[1753,51859+22])
                                                    Pexp_ident "l2" (src/grammarFunctor.ml[1753,51859+20]..[1753,51859+22])
                                              ]
                                            expression (src/grammarFunctor.ml[1754,51887+14]..[1754,51887+16])
                                              Pexp_construct "Gt" (src/grammarFunctor.ml[1754,51887+14]..[1754,51887+16])
                                              None
                                            Some
                                              expression (src/grammarFunctor.ml[1755,51904+17]..[1758,51971+16])
                                                Pexp_ifthenelse
                                                expression (src/grammarFunctor.ml[1755,51904+20]..[1755,51904+27])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1755,51904+23]..[1755,51904+24])
                                                    Pexp_ident "<" (src/grammarFunctor.ml[1755,51904+23]..[1755,51904+24])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1755,51904+20]..[1755,51904+22])
                                                        Pexp_ident "l1" (src/grammarFunctor.ml[1755,51904+20]..[1755,51904+22])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1755,51904+25]..[1755,51904+27])
                                                        Pexp_ident "l2" (src/grammarFunctor.ml[1755,51904+25]..[1755,51904+27])
                                                  ]
                                                expression (src/grammarFunctor.ml[1756,51937+14]..[1756,51937+16])
                                                  Pexp_construct "Lt" (src/grammarFunctor.ml[1756,51937+14]..[1756,51937+16])
                                                  None
                                                Some
                                                  expression (src/grammarFunctor.ml[1758,51971+14]..[1758,51971+16])
                                                    Pexp_construct "Eq" (src/grammarFunctor.ml[1758,51971+14]..[1758,51971+16])
                                                    None
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1760,51989+2]..[1771,52302+16])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1760,51989+6]..[1760,51989+22])
                              Ppat_var "production_order" (src/grammarFunctor.ml[1760,51989+6]..[1760,51989+22])
                            expression (src/grammarFunctor.ml[1760,51989+23]..[1771,52302+16]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1760,51989+23]..[1760,51989+25])
                                Ppat_var "p1" (src/grammarFunctor.ml[1760,51989+23]..[1760,51989+25])
                              expression (src/grammarFunctor.ml[1760,51989+26]..[1771,52302+16]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1760,51989+26]..[1760,51989+28])
                                  Ppat_var "p2" (src/grammarFunctor.ml[1760,51989+26]..[1760,51989+28])
                                expression (src/grammarFunctor.ml[1761,52020+4]..[1771,52302+16])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[1761,52020+10]..[1761,52020+16])
                                    Pexp_tuple
                                    [
                                      expression (src/grammarFunctor.ml[1761,52020+10]..[1761,52020+12])
                                        Pexp_ident "p1" (src/grammarFunctor.ml[1761,52020+10]..[1761,52020+12])
                                      expression (src/grammarFunctor.ml[1761,52020+14]..[1761,52020+16])
                                        Pexp_ident "p2" (src/grammarFunctor.ml[1761,52020+14]..[1761,52020+16])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1762,52042+8]..[1762,52042+58])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[1762,52042+8]..[1762,52042+32])
                                            Ppat_construct "ProductionLevel" (src/grammarFunctor.ml[1762,52042+8]..[1762,52042+23])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[1762,52042+24]..[1762,52042+32])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1762,52042+25]..[1762,52042+27])
                                                    Ppat_var "m1" (src/grammarFunctor.ml[1762,52042+25]..[1762,52042+27])
                                                  pattern (src/grammarFunctor.ml[1762,52042+29]..[1762,52042+31])
                                                    Ppat_var "l1" (src/grammarFunctor.ml[1762,52042+29]..[1762,52042+31])
                                                ]
                                          pattern (src/grammarFunctor.ml[1762,52042+34]..[1762,52042+58])
                                            Ppat_construct "ProductionLevel" (src/grammarFunctor.ml[1762,52042+34]..[1762,52042+49])
                                            Some
                                              []
                                              pattern (src/grammarFunctor.ml[1762,52042+50]..[1762,52042+58])
                                                Ppat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1762,52042+51]..[1762,52042+53])
                                                    Ppat_var "m2" (src/grammarFunctor.ml[1762,52042+51]..[1762,52042+53])
                                                  pattern (src/grammarFunctor.ml[1762,52042+55]..[1762,52042+57])
                                                    Ppat_var "l2" (src/grammarFunctor.ml[1762,52042+55]..[1762,52042+57])
                                                ]
                                        ]
                                      expression (src/grammarFunctor.ml[1763,52104+10]..[1771,52302+16])
                                        Pexp_ifthenelse
                                        expression (src/grammarFunctor.ml[1763,52104+13]..[1763,52104+50])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1763,52104+13]..[1763,52104+16])
                                            Pexp_ident "not" (src/grammarFunctor.ml[1763,52104+13]..[1763,52104+16])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1763,52104+17]..[1763,52104+50])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1763,52104+18]..[1763,52104+43])
                                                  Pexp_ident "InputFile.same_input_file" (src/grammarFunctor.ml[1763,52104+18]..[1763,52104+43])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1763,52104+44]..[1763,52104+46])
                                                      Pexp_ident "m1" (src/grammarFunctor.ml[1763,52104+44]..[1763,52104+46])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1763,52104+47]..[1763,52104+49])
                                                      Pexp_ident "m2" (src/grammarFunctor.ml[1763,52104+47]..[1763,52104+49])
                                                ]
                                          ]
                                        expression (src/grammarFunctor.ml[1764,52160+12]..[1764,52160+14])
                                          Pexp_construct "Ic" (src/grammarFunctor.ml[1764,52160+12]..[1764,52160+14])
                                          None
                                        Some
                                          expression (src/grammarFunctor.ml[1766,52190+12]..[1771,52302+16])
                                            Pexp_ifthenelse
                                            expression (src/grammarFunctor.ml[1766,52190+15]..[1766,52190+22])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1766,52190+18]..[1766,52190+19])
                                                Pexp_ident ">" (src/grammarFunctor.ml[1766,52190+18]..[1766,52190+19])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1766,52190+15]..[1766,52190+17])
                                                    Pexp_ident "l1" (src/grammarFunctor.ml[1766,52190+15]..[1766,52190+17])
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1766,52190+20]..[1766,52190+22])
                                                    Pexp_ident "l2" (src/grammarFunctor.ml[1766,52190+20]..[1766,52190+22])
                                              ]
                                            expression (src/grammarFunctor.ml[1767,52218+14]..[1767,52218+16])
                                              Pexp_construct "Gt" (src/grammarFunctor.ml[1767,52218+14]..[1767,52218+16])
                                              None
                                            Some
                                              expression (src/grammarFunctor.ml[1768,52235+17]..[1771,52302+16])
                                                Pexp_ifthenelse
                                                expression (src/grammarFunctor.ml[1768,52235+20]..[1768,52235+27])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1768,52235+23]..[1768,52235+24])
                                                    Pexp_ident "<" (src/grammarFunctor.ml[1768,52235+23]..[1768,52235+24])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1768,52235+20]..[1768,52235+22])
                                                        Pexp_ident "l1" (src/grammarFunctor.ml[1768,52235+20]..[1768,52235+22])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1768,52235+25]..[1768,52235+27])
                                                        Pexp_ident "l2" (src/grammarFunctor.ml[1768,52235+25]..[1768,52235+27])
                                                  ]
                                                expression (src/grammarFunctor.ml[1769,52268+14]..[1769,52268+16])
                                                  Pexp_construct "Lt" (src/grammarFunctor.ml[1769,52268+14]..[1769,52268+16])
                                                  None
                                                Some
                                                  expression (src/grammarFunctor.ml[1771,52302+14]..[1771,52302+16])
                                                    Pexp_construct "Eq" (src/grammarFunctor.ml[1771,52302+14]..[1771,52302+16])
                                                    None
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1773,52320+2]..[1810,53429+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1773,52320+6]..[1773,52320+18])
                              Ppat_var "shift_reduce" (src/grammarFunctor.ml[1773,52320+6]..[1773,52320+18])
                            expression (src/grammarFunctor.ml[1773,52320+19]..[1810,53429+23]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1773,52320+19]..[1773,52320+22])
                                Ppat_var "tok" (src/grammarFunctor.ml[1773,52320+19]..[1773,52320+22])
                              expression (src/grammarFunctor.ml[1773,52320+23]..[1810,53429+23]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1773,52320+23]..[1773,52320+27])
                                  Ppat_var "prod" (src/grammarFunctor.ml[1773,52320+23]..[1773,52320+27])
                                expression (src/grammarFunctor.ml[1774,52350+4]..[1810,53429+23])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1774,52350+8]..[1774,52350+19])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[1774,52350+8]..[1774,52350+13])
                                            Ppat_var "fact1" (src/grammarFunctor.ml[1774,52350+8]..[1774,52350+13])
                                          pattern (src/grammarFunctor.ml[1774,52350+15]..[1774,52350+19])
                                            Ppat_var "tokp" (src/grammarFunctor.ml[1774,52350+15]..[1774,52350+19])
                                        ]
                                      expression (src/grammarFunctor.ml[1774,52350+23]..[1774,52350+52])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1774,52350+23]..[1774,52350+48])
                                          Pexp_ident "Terminal.precedence_level" (src/grammarFunctor.ml[1774,52350+23]..[1774,52350+48])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1774,52350+49]..[1774,52350+52])
                                              Pexp_ident "tok" (src/grammarFunctor.ml[1774,52350+49]..[1774,52350+52])
                                        ]
                                    <def>
                                      pattern (src/grammarFunctor.ml[1775,52403+8]..[1775,52403+20])
                                        Ppat_tuple
                                        [
                                          pattern (src/grammarFunctor.ml[1775,52403+8]..[1775,52403+13])
                                            Ppat_var "fact2" (src/grammarFunctor.ml[1775,52403+8]..[1775,52403+13])
                                          pattern (src/grammarFunctor.ml[1775,52403+15]..[1775,52403+20])
                                            Ppat_var "prodp" (src/grammarFunctor.ml[1775,52403+15]..[1775,52403+20])
                                        ]
                                      expression (src/grammarFunctor.ml[1775,52403+23]..[1775,52403+49])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1775,52403+23]..[1775,52403+44])
                                          Pexp_ident "Production.precedence" (src/grammarFunctor.ml[1775,52403+23]..[1775,52403+44])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1775,52403+45]..[1775,52403+49])
                                              Pexp_ident "prod" (src/grammarFunctor.ml[1775,52403+45]..[1775,52403+49])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[1776,52456+4]..[1810,53429+23])
                                    Pexp_match
                                    expression (src/grammarFunctor.ml[1776,52456+10]..[1776,52456+37])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1776,52456+10]..[1776,52456+26])
                                        Pexp_ident "precedence_order" (src/grammarFunctor.ml[1776,52456+10]..[1776,52456+26])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1776,52456+27]..[1776,52456+31])
                                            Pexp_ident "tokp" (src/grammarFunctor.ml[1776,52456+27]..[1776,52456+31])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1776,52456+32]..[1776,52456+37])
                                            Pexp_ident "prodp" (src/grammarFunctor.ml[1776,52456+32]..[1776,52456+37])
                                      ]
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[1781,52638+6]..[1781,52638+8])
                                          Ppat_construct "Ic" (src/grammarFunctor.ml[1781,52638+6]..[1781,52638+8])
                                          None
                                        expression (src/grammarFunctor.ml[1782,52650+8]..[1782,52650+16])
                                          Pexp_construct "DontKnow" (src/grammarFunctor.ml[1782,52650+8]..[1782,52650+16])
                                          None
                                      <case>
                                        pattern (src/grammarFunctor.ml[1787,52769+6]..[1787,52769+25])
                                          Ppat_alias "c" (src/grammarFunctor.ml[1787,52769+24]..[1787,52769+25])
                                          pattern (src/grammarFunctor.ml[1787,52769+6]..[1787,52769+20])
                                            Ppat_or
                                            pattern (src/grammarFunctor.ml[1787,52769+7]..[1787,52769+14])
                                              Ppat_or
                                              pattern (src/grammarFunctor.ml[1787,52769+7]..[1787,52769+9])
                                                Ppat_construct "Eq" (src/grammarFunctor.ml[1787,52769+7]..[1787,52769+9])
                                                None
                                              pattern (src/grammarFunctor.ml[1787,52769+12]..[1787,52769+14])
                                                Ppat_construct "Lt" (src/grammarFunctor.ml[1787,52769+12]..[1787,52769+14])
                                                None
                                            pattern (src/grammarFunctor.ml[1787,52769+17]..[1787,52769+19])
                                              Ppat_construct "Gt" (src/grammarFunctor.ml[1787,52769+17]..[1787,52769+19])
                                              None
                                        expression (src/grammarFunctor.ml[1788,52798+8]..[1810,53429+23])
                                          Pexp_sequence
                                          expression (src/grammarFunctor.ml[1788,52798+8]..[1788,52798+24])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1788,52798+8]..[1788,52798+18])
                                              Pexp_ident "Lazy.force" (src/grammarFunctor.ml[1788,52798+8]..[1788,52798+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1788,52798+19]..[1788,52798+24])
                                                  Pexp_ident "fact1" (src/grammarFunctor.ml[1788,52798+19]..[1788,52798+24])
                                            ]
                                          expression (src/grammarFunctor.ml[1789,52824+8]..[1810,53429+23])
                                            Pexp_sequence
                                            expression (src/grammarFunctor.ml[1789,52824+8]..[1789,52824+24])
                                              Pexp_apply
                                              expression (src/grammarFunctor.ml[1789,52824+8]..[1789,52824+18])
                                                Pexp_ident "Lazy.force" (src/grammarFunctor.ml[1789,52824+8]..[1789,52824+18])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/grammarFunctor.ml[1789,52824+19]..[1789,52824+24])
                                                    Pexp_ident "fact2" (src/grammarFunctor.ml[1789,52824+19]..[1789,52824+24])
                                              ]
                                            expression (src/grammarFunctor.ml[1790,52850+8]..[1810,53429+23])
                                              Pexp_match
                                              expression (src/grammarFunctor.ml[1790,52850+14]..[1790,52850+15])
                                                Pexp_ident "c" (src/grammarFunctor.ml[1790,52850+14]..[1790,52850+15])
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1792,52872+10]..[1792,52872+12])
                                                    Ppat_construct "Ic" (src/grammarFunctor.ml[1792,52872+10]..[1792,52872+12])
                                                    None
                                                  expression (src/grammarFunctor.ml[1793,52888+12]..[1793,52888+24])
                                                    Pexp_assert
                                                    expression (src/grammarFunctor.ml[1793,52888+19]..[1793,52888+24])
                                                      Pexp_construct "false" (src/grammarFunctor.ml[1793,52888+19]..[1793,52888+24])
                                                      None
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1795,52939+10]..[1795,52939+12])
                                                    Ppat_construct "Eq" (src/grammarFunctor.ml[1795,52939+10]..[1795,52939+12])
                                                    None
                                                  expression (src/grammarFunctor.ml[1796,52955+12]..[1804,53354+15])
                                                    Pexp_match
                                                    expression (src/grammarFunctor.ml[1797,52973+20]..[1797,52973+46])
                                                      Pexp_apply
                                                      expression (src/grammarFunctor.ml[1797,52973+20]..[1797,52973+42])
                                                        Pexp_ident "Terminal.associativity" (src/grammarFunctor.ml[1797,52973+20]..[1797,52973+42])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/grammarFunctor.ml[1797,52973+43]..[1797,52973+46])
                                                            Pexp_ident "tok" (src/grammarFunctor.ml[1797,52973+43]..[1797,52973+46])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1798,53025+16]..[1798,53025+25])
                                                          Ppat_construct "LeftAssoc" (src/grammarFunctor.ml[1798,53025+16]..[1798,53025+25])
                                                          None
                                                        expression (src/grammarFunctor.ml[1798,53025+30]..[1798,53025+42])
                                                          Pexp_construct "ChooseReduce" (src/grammarFunctor.ml[1798,53025+30]..[1798,53025+42])
                                                          None
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1799,53068+16]..[1799,53068+26])
                                                          Ppat_construct "RightAssoc" (src/grammarFunctor.ml[1799,53068+16]..[1799,53068+26])
                                                          None
                                                        expression (src/grammarFunctor.ml[1799,53068+30]..[1799,53068+41])
                                                          Pexp_construct "ChooseShift" (src/grammarFunctor.ml[1799,53068+30]..[1799,53068+41])
                                                          None
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1800,53110+16]..[1800,53110+24])
                                                          Ppat_construct "NonAssoc" (src/grammarFunctor.ml[1800,53110+16]..[1800,53110+24])
                                                          None
                                                        expression (src/grammarFunctor.ml[1800,53110+30]..[1800,53110+43])
                                                          Pexp_construct "ChooseNeither" (src/grammarFunctor.ml[1800,53110+30]..[1800,53110+43])
                                                          None
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1801,53154+16]..[1801,53154+17])
                                                          Ppat_any
                                                        expression (src/grammarFunctor.ml[1801,53154+30]..[1801,53154+42])
                                                          Pexp_assert
                                                          expression (src/grammarFunctor.ml[1801,53154+37]..[1801,53154+42])
                                                            Pexp_construct "false" (src/grammarFunctor.ml[1801,53154+37]..[1801,53154+42])
                                                            None
                                                    ]
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1806,53371+10]..[1806,53371+12])
                                                    Ppat_construct "Lt" (src/grammarFunctor.ml[1806,53371+10]..[1806,53371+12])
                                                    None
                                                  expression (src/grammarFunctor.ml[1807,53387+12]..[1807,53387+24])
                                                    Pexp_construct "ChooseReduce" (src/grammarFunctor.ml[1807,53387+12]..[1807,53387+24])
                                                    None
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1809,53413+10]..[1809,53413+12])
                                                    Ppat_construct "Gt" (src/grammarFunctor.ml[1809,53413+10]..[1809,53413+12])
                                                    None
                                                  expression (src/grammarFunctor.ml[1810,53429+12]..[1810,53429+23])
                                                    Pexp_construct "ChooseShift" (src/grammarFunctor.ml[1810,53429+12]..[1810,53429+23])
                                                    None
                                              ]
                                    ]
                        ]
                      structure_item (src/grammarFunctor.ml[1813,53455+2]..[1828,54024+12])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1813,53455+6]..[1813,53455+19])
                              Ppat_var "reduce_reduce" (src/grammarFunctor.ml[1813,53455+6]..[1813,53455+19])
                            expression (src/grammarFunctor.ml[1813,53455+20]..[1828,54024+12]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1813,53455+20]..[1813,53455+25])
                                Ppat_var "prod1" (src/grammarFunctor.ml[1813,53455+20]..[1813,53455+25])
                              expression (src/grammarFunctor.ml[1813,53455+26]..[1828,54024+12]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1813,53455+26]..[1813,53455+31])
                                  Ppat_var "prod2" (src/grammarFunctor.ml[1813,53455+26]..[1813,53455+31])
                                expression (src/grammarFunctor.ml[1814,53489+4]..[1828,54024+12])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1814,53489+8]..[1814,53489+11])
                                        Ppat_var "pl1" (src/grammarFunctor.ml[1814,53489+8]..[1814,53489+11])
                                      expression (src/grammarFunctor.ml[1814,53489+14]..[1814,53489+49])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1814,53489+14]..[1814,53489+49]) ghost
                                          Pexp_ident "Array.get" (src/grammarFunctor.ml[1814,53489+14]..[1814,53489+49]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1814,53489+14]..[1814,53489+41])
                                              Pexp_ident "Production.production_level" (src/grammarFunctor.ml[1814,53489+14]..[1814,53489+41])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1814,53489+43]..[1814,53489+48])
                                              Pexp_ident "prod1" (src/grammarFunctor.ml[1814,53489+43]..[1814,53489+48])
                                        ]
                                    <def>
                                      pattern (src/grammarFunctor.ml[1815,53539+8]..[1815,53539+11])
                                        Ppat_var "pl2" (src/grammarFunctor.ml[1815,53539+8]..[1815,53539+11])
                                      expression (src/grammarFunctor.ml[1815,53539+14]..[1815,53539+49])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1815,53539+14]..[1815,53539+49]) ghost
                                          Pexp_ident "Array.get" (src/grammarFunctor.ml[1815,53539+14]..[1815,53539+49]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1815,53539+14]..[1815,53539+41])
                                              Pexp_ident "Production.production_level" (src/grammarFunctor.ml[1815,53539+14]..[1815,53539+41])
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1815,53539+43]..[1815,53539+48])
                                              Pexp_ident "prod2" (src/grammarFunctor.ml[1815,53539+43]..[1815,53539+48])
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[1816,53592+4]..[1828,54024+12])
                                    Pexp_match
                                    expression (src/grammarFunctor.ml[1816,53592+10]..[1816,53592+34])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1816,53592+10]..[1816,53592+26])
                                        Pexp_ident "production_order" (src/grammarFunctor.ml[1816,53592+10]..[1816,53592+26])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1816,53592+27]..[1816,53592+30])
                                            Pexp_ident "pl1" (src/grammarFunctor.ml[1816,53592+27]..[1816,53592+30])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1816,53592+31]..[1816,53592+34])
                                            Pexp_ident "pl2" (src/grammarFunctor.ml[1816,53592+31]..[1816,53592+34])
                                      ]
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[1817,53632+6]..[1817,53632+8])
                                          Ppat_construct "Lt" (src/grammarFunctor.ml[1817,53632+6]..[1817,53632+8])
                                          None
                                        expression (src/grammarFunctor.ml[1818,53644+8]..[1818,53644+18])
                                          Pexp_construct "Some" (src/grammarFunctor.ml[1818,53644+8]..[1818,53644+12])
                                          Some
                                            expression (src/grammarFunctor.ml[1818,53644+13]..[1818,53644+18])
                                              Pexp_ident "prod1" (src/grammarFunctor.ml[1818,53644+13]..[1818,53644+18])
                                      <case>
                                        pattern (src/grammarFunctor.ml[1819,53663+6]..[1819,53663+8])
                                          Ppat_construct "Gt" (src/grammarFunctor.ml[1819,53663+6]..[1819,53663+8])
                                          None
                                        expression (src/grammarFunctor.ml[1820,53675+8]..[1820,53675+18])
                                          Pexp_construct "Some" (src/grammarFunctor.ml[1820,53675+8]..[1820,53675+12])
                                          Some
                                            expression (src/grammarFunctor.ml[1820,53675+13]..[1820,53675+18])
                                              Pexp_ident "prod2" (src/grammarFunctor.ml[1820,53675+13]..[1820,53675+18])
                                      <case>
                                        pattern (src/grammarFunctor.ml[1821,53694+6]..[1821,53694+8])
                                          Ppat_construct "Eq" (src/grammarFunctor.ml[1821,53694+6]..[1821,53694+8])
                                          None
                                        expression (src/grammarFunctor.ml[1826,53999+8]..[1826,53999+12])
                                          Pexp_construct "None" (src/grammarFunctor.ml[1826,53999+8]..[1826,53999+12])
                                          None
                                      <case>
                                        pattern (src/grammarFunctor.ml[1827,54012+6]..[1827,54012+8])
                                          Ppat_construct "Ic" (src/grammarFunctor.ml[1827,54012+6]..[1827,54012+8])
                                          None
                                        expression (src/grammarFunctor.ml[1828,54024+8]..[1828,54024+12])
                                          Pexp_construct "None" (src/grammarFunctor.ml[1828,54024+8]..[1828,54024+12])
                                          None
                                    ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1836,54265+0]..[1840,54413+5])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (src/grammarFunctor.ml[1836,54265+4]..[1836,54265+15])
                      Ppat_var "diagnostics" (src/grammarFunctor.ml[1836,54265+4]..[1836,54265+15])
                    expression (src/grammarFunctor.ml[1836,54265+16]..[1840,54413+5]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/grammarFunctor.ml[1836,54265+16]..[1836,54265+18])
                        Ppat_construct "()" (src/grammarFunctor.ml[1836,54265+16]..[1836,54265+18])
                        None
                      expression (src/grammarFunctor.ml[1837,54286+2]..[1840,54413+5])
                        Pexp_ifthenelse
                        expression (src/grammarFunctor.ml[1837,54286+5]..[1837,54286+53])
                          Pexp_apply
                          expression (src/grammarFunctor.ml[1837,54286+5]..[1837,54286+8])
                            Pexp_ident "not" (src/grammarFunctor.ml[1837,54286+5]..[1837,54286+8])
                          [
                            <arg>
                            Nolabel
                              expression (src/grammarFunctor.ml[1837,54286+9]..[1837,54286+53])
                                Pexp_ident "Settings.ignore_all_unused_precedence_levels" (src/grammarFunctor.ml[1837,54286+9]..[1837,54286+53])
                          ]
                        expression (src/grammarFunctor.ml[1837,54286+59]..[1840,54413+5])
                          Pexp_sequence
                          expression (src/grammarFunctor.ml[1838,54351+4]..[1838,54351+31])
                            Pexp_apply
                            expression (src/grammarFunctor.ml[1838,54351+4]..[1838,54351+29])
                              Pexp_ident "TokPrecedence.diagnostics" (src/grammarFunctor.ml[1838,54351+4]..[1838,54351+29])
                            [
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1838,54351+29]..[1838,54351+31])
                                  Pexp_construct "()" (src/grammarFunctor.ml[1838,54351+29]..[1838,54351+31])
                                  None
                            ]
                          expression (src/grammarFunctor.ml[1839,54384+4]..[1839,54384+28])
                            Pexp_apply
                            expression (src/grammarFunctor.ml[1839,54384+4]..[1839,54384+26])
                              Pexp_ident "Production.diagnostics" (src/grammarFunctor.ml[1839,54384+4]..[1839,54384+26])
                            [
                              <arg>
                              Nolabel
                                expression (src/grammarFunctor.ml[1839,54384+26]..[1839,54384+28])
                                  Pexp_construct "()" (src/grammarFunctor.ml[1839,54384+26]..[1839,54384+28])
                                  None
                            ]
                        None
                ]
              structure_item (src/grammarFunctor.ml[1845,54537+0]..[1908,56535+3])
                Pstr_module
                "OnErrorReduce" (src/grammarFunctor.ml[1845,54537+7]..[1845,54537+20])
                  module_expr (src/grammarFunctor.ml[1845,54537+23]..[1908,56535+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1851,54778+2]..[1852,54842+27])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1851,54778+6]..[1851,54778+18])
                              Ppat_var "declarations" (src/grammarFunctor.ml[1851,54778+6]..[1851,54778+18])
                            core_type (src/grammarFunctor.ml[1851,54778+21]..[1851,54778+61])
                              Ptyp_constr "StringMap.t" (src/grammarFunctor.ml[1851,54778+50]..[1851,54778+61])
                              [
                                core_type (src/grammarFunctor.ml[1851,54778+21]..[1851,54778+49])
                                  Ptyp_constr "Syntax.on_error_reduce_level" (src/grammarFunctor.ml[1851,54778+21]..[1851,54778+49])
                                  []
                              ]
                            expression (src/grammarFunctor.ml[1852,54842+4]..[1852,54842+27])
                              Pexp_field
                              expression (src/grammarFunctor.ml[1852,54842+4]..[1852,54842+11])
                                Pexp_ident "grammar" (src/grammarFunctor.ml[1852,54842+4]..[1852,54842+11])
                              "on_error_reduce" (src/grammarFunctor.ml[1852,54842+12]..[1852,54842+27])
                        ]
                      structure_item (src/grammarFunctor.ml[1854,54871+2]..[1855,54915+30])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1854,54871+6]..[1854,54871+11])
                              Ppat_var "print" (src/grammarFunctor.ml[1854,54871+6]..[1854,54871+11])
                            expression (src/grammarFunctor.ml[1854,54871+12]..[1855,54915+30]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1854,54871+12]..[1854,54871+32])
                                Ppat_constraint
                                pattern (src/grammarFunctor.ml[1854,54871+13]..[1854,54871+15])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1854,54871+13]..[1854,54871+15])
                                core_type (src/grammarFunctor.ml[1854,54871+18]..[1854,54871+31])
                                  Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1854,54871+18]..[1854,54871+31])
                                  []
                              expression (src/grammarFunctor.ml[1854,54871+33]..[1855,54915+30])
                                Pexp_constraint
                                expression (src/grammarFunctor.ml[1855,54915+4]..[1855,54915+30])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1855,54915+4]..[1855,54915+21])
                                    Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1855,54915+4]..[1855,54915+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1855,54915+22]..[1855,54915+27])
                                        Pexp_construct "false" (src/grammarFunctor.ml[1855,54915+22]..[1855,54915+27])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1855,54915+28]..[1855,54915+30])
                                        Pexp_ident "nt" (src/grammarFunctor.ml[1855,54915+28]..[1855,54915+30])
                                  ]
                                core_type (src/grammarFunctor.ml[1854,54871+35]..[1854,54871+41])
                                  Ptyp_constr "string" (src/grammarFunctor.ml[1854,54871+35]..[1854,54871+41])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[1857,54947+2]..[1863,55156+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1857,54947+6]..[1857,54947+12])
                              Ppat_var "lookup" (src/grammarFunctor.ml[1857,54947+6]..[1857,54947+12])
                            expression (src/grammarFunctor.ml[1857,54947+13]..[1863,55156+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1857,54947+13]..[1857,54947+26])
                                Ppat_constraint
                                pattern (src/grammarFunctor.ml[1857,54947+14]..[1857,54947+16])
                                  Ppat_var "nt" (src/grammarFunctor.ml[1857,54947+14]..[1857,54947+16])
                                core_type (src/grammarFunctor.ml[1857,54947+19]..[1857,54947+25])
                                  Ptyp_constr "string" (src/grammarFunctor.ml[1857,54947+19]..[1857,54947+25])
                                  []
                              expression (src/grammarFunctor.ml[1857,54947+27]..[1863,55156+18])
                                Pexp_constraint
                                expression (src/grammarFunctor.ml[1858,54992+4]..[1863,55156+18])
                                  Pexp_try
                                  expression (src/grammarFunctor.ml[1859,55000+6]..[1859,55000+27])
                                    Pexp_apply
                                    expression (src/grammarFunctor.ml[1859,55000+6]..[1859,55000+24])
                                      Pexp_ident "Nonterminal.lookup" (src/grammarFunctor.ml[1859,55000+6]..[1859,55000+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/grammarFunctor.ml[1859,55000+25]..[1859,55000+27])
                                          Pexp_ident "nt" (src/grammarFunctor.ml[1859,55000+25]..[1859,55000+27])
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1860,55028+9]..[1860,55028+18])
                                        Ppat_construct "Not_found" (src/grammarFunctor.ml[1860,55028+9]..[1860,55028+18])
                                        None
                                      expression (src/grammarFunctor.ml[1863,55156+6]..[1863,55156+18])
                                        Pexp_assert
                                        expression (src/grammarFunctor.ml[1863,55156+13]..[1863,55156+18])
                                          Pexp_construct "false" (src/grammarFunctor.ml[1863,55156+13]..[1863,55156+18])
                                          None
                                  ]
                                core_type (src/grammarFunctor.ml[1857,54947+29]..[1857,54947+42])
                                  Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1857,54947+29]..[1857,54947+42])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[1865,55176+2]..[1867,55231+41])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1865,55176+6]..[1865,55176+12])
                              Ppat_var "reduce" (src/grammarFunctor.ml[1865,55176+6]..[1865,55176+12])
                            expression (src/grammarFunctor.ml[1865,55176+13]..[1867,55231+41]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1865,55176+13]..[1865,55176+17])
                                Ppat_var "prod" (src/grammarFunctor.ml[1865,55176+13]..[1865,55176+17])
                              expression (src/grammarFunctor.ml[1866,55196+4]..[1867,55231+41])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1866,55196+8]..[1866,55196+10])
                                      Ppat_var "nt" (src/grammarFunctor.ml[1866,55196+8]..[1866,55196+10])
                                    expression (src/grammarFunctor.ml[1866,55196+13]..[1866,55196+31])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1866,55196+13]..[1866,55196+26])
                                        Pexp_ident "Production.nt" (src/grammarFunctor.ml[1866,55196+13]..[1866,55196+26])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1866,55196+27]..[1866,55196+31])
                                            Pexp_ident "prod" (src/grammarFunctor.ml[1866,55196+27]..[1866,55196+31])
                                      ]
                                ]
                                expression (src/grammarFunctor.ml[1867,55231+4]..[1867,55231+41])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1867,55231+4]..[1867,55231+17])
                                    Pexp_ident "StringMap.mem" (src/grammarFunctor.ml[1867,55231+4]..[1867,55231+17])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1867,55231+18]..[1867,55231+28])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1867,55231+19]..[1867,55231+24])
                                          Pexp_ident "print" (src/grammarFunctor.ml[1867,55231+19]..[1867,55231+24])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1867,55231+25]..[1867,55231+27])
                                              Pexp_ident "nt" (src/grammarFunctor.ml[1867,55231+25]..[1867,55231+27])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1867,55231+29]..[1867,55231+41])
                                        Pexp_ident "declarations" (src/grammarFunctor.ml[1867,55231+29]..[1867,55231+41])
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1869,55274+2]..[1872,55345+18])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1869,55274+6]..[1869,55274+10])
                              Ppat_var "iter" (src/grammarFunctor.ml[1869,55274+6]..[1869,55274+10])
                            expression (src/grammarFunctor.ml[1869,55274+11]..[1872,55345+18]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1869,55274+11]..[1869,55274+12])
                                Ppat_var "f" (src/grammarFunctor.ml[1869,55274+11]..[1869,55274+12])
                              expression (src/grammarFunctor.ml[1870,55289+4]..[1872,55345+18])
                                Pexp_apply
                                expression (src/grammarFunctor.ml[1870,55289+4]..[1870,55289+18])
                                  Pexp_ident "StringMap.iter" (src/grammarFunctor.ml[1870,55289+4]..[1870,55289+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1870,55289+19]..[1872,55345+5])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/grammarFunctor.ml[1870,55289+24]..[1870,55289+26])
                                        Ppat_var "nt" (src/grammarFunctor.ml[1870,55289+24]..[1870,55289+26])
                                      expression (src/grammarFunctor.ml[1870,55289+27]..[1871,55325+19]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1870,55289+27]..[1870,55289+32])
                                          Ppat_var "_prec" (src/grammarFunctor.ml[1870,55289+27]..[1870,55289+32])
                                        expression (src/grammarFunctor.ml[1871,55325+6]..[1871,55325+19])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1871,55325+6]..[1871,55325+7])
                                            Pexp_ident "f" (src/grammarFunctor.ml[1871,55325+6]..[1871,55325+7])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1871,55325+8]..[1871,55325+19])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1871,55325+9]..[1871,55325+15])
                                                  Pexp_ident "lookup" (src/grammarFunctor.ml[1871,55325+9]..[1871,55325+15])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1871,55325+16]..[1871,55325+18])
                                                      Pexp_ident "nt" (src/grammarFunctor.ml[1871,55325+16]..[1871,55325+18])
                                                ]
                                          ]
                                  <arg>
                                  Nolabel
                                    expression (src/grammarFunctor.ml[1872,55345+6]..[1872,55345+18])
                                      Pexp_ident "declarations" (src/grammarFunctor.ml[1872,55345+6]..[1872,55345+18])
                                ]
                        ]
                      structure_item (src/grammarFunctor.ml[1874,55365+2]..[1874,55365+17])
                        Pstr_open Fresh
                        module_expr (src/grammarFunctor.ml[1874,55365+7]..[1874,55365+17])
                          Pmod_ident "Precedence" (src/grammarFunctor.ml[1874,55365+7]..[1874,55365+17])
                      structure_item (src/grammarFunctor.ml[1876,55384+2]..[1906,56520+13])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1876,55384+6]..[1876,55384+16])
                              Ppat_var "preferable" (src/grammarFunctor.ml[1876,55384+6]..[1876,55384+16])
                            expression (src/grammarFunctor.ml[1876,55384+17]..[1906,56520+13]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1876,55384+17]..[1876,55384+22])
                                Ppat_var "prod1" (src/grammarFunctor.ml[1876,55384+17]..[1876,55384+22])
                              expression (src/grammarFunctor.ml[1876,55384+23]..[1906,56520+13]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1876,55384+23]..[1876,55384+28])
                                  Ppat_var "prod2" (src/grammarFunctor.ml[1876,55384+23]..[1876,55384+28])
                                expression (src/grammarFunctor.ml[1878,55485+4]..[1906,56520+13])
                                  Pexp_sequence
                                  expression (src/grammarFunctor.ml[1878,55485+4]..[1878,55485+27])
                                    Pexp_assert
                                    expression (src/grammarFunctor.ml[1878,55485+11]..[1878,55485+27])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1878,55485+18]..[1878,55485+20])
                                        Pexp_ident "<>" (src/grammarFunctor.ml[1878,55485+18]..[1878,55485+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1878,55485+12]..[1878,55485+17])
                                            Pexp_ident "prod1" (src/grammarFunctor.ml[1878,55485+12]..[1878,55485+17])
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1878,55485+21]..[1878,55485+26])
                                            Pexp_ident "prod2" (src/grammarFunctor.ml[1878,55485+21]..[1878,55485+26])
                                      ]
                                  expression (src/grammarFunctor.ml[1879,55514+4]..[1906,56520+13])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[1879,55514+8]..[1879,55514+11])
                                          Ppat_var "nt1" (src/grammarFunctor.ml[1879,55514+8]..[1879,55514+11])
                                        expression (src/grammarFunctor.ml[1879,55514+14]..[1879,55514+33])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1879,55514+14]..[1879,55514+27])
                                            Pexp_ident "Production.nt" (src/grammarFunctor.ml[1879,55514+14]..[1879,55514+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1879,55514+28]..[1879,55514+33])
                                                Pexp_ident "prod1" (src/grammarFunctor.ml[1879,55514+28]..[1879,55514+33])
                                          ]
                                      <def>
                                        pattern (src/grammarFunctor.ml[1880,55548+8]..[1880,55548+11])
                                          Ppat_var "nt2" (src/grammarFunctor.ml[1880,55548+8]..[1880,55548+11])
                                        expression (src/grammarFunctor.ml[1880,55548+14]..[1880,55548+33])
                                          Pexp_apply
                                          expression (src/grammarFunctor.ml[1880,55548+14]..[1880,55548+27])
                                            Pexp_ident "Production.nt" (src/grammarFunctor.ml[1880,55548+14]..[1880,55548+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/grammarFunctor.ml[1880,55548+28]..[1880,55548+33])
                                                Pexp_ident "prod2" (src/grammarFunctor.ml[1880,55548+28]..[1880,55548+33])
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[1883,55698+4]..[1906,56520+13])
                                      Pexp_apply
                                      expression (src/grammarFunctor.ml[1883,55698+15]..[1883,55698+17])
                                        Pexp_ident "&&" (src/grammarFunctor.ml[1883,55698+15]..[1883,55698+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1883,55698+4]..[1883,55698+14])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1883,55698+8]..[1883,55698+10])
                                              Pexp_ident "<>" (src/grammarFunctor.ml[1883,55698+8]..[1883,55698+10])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1883,55698+4]..[1883,55698+7])
                                                  Pexp_ident "nt1" (src/grammarFunctor.ml[1883,55698+4]..[1883,55698+7])
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1883,55698+11]..[1883,55698+14])
                                                  Pexp_ident "nt2" (src/grammarFunctor.ml[1883,55698+11]..[1883,55698+14])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (src/grammarFunctor.ml[1886,55813+4]..[1906,56520+13])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1886,55813+8]..[1886,55813+20])
                                                  Ppat_tuple
                                                  [
                                                    pattern (src/grammarFunctor.ml[1886,55813+8]..[1886,55813+13])
                                                      Ppat_var "prec1" (src/grammarFunctor.ml[1886,55813+8]..[1886,55813+13])
                                                    pattern (src/grammarFunctor.ml[1886,55813+15]..[1886,55813+20])
                                                      Ppat_var "prec2" (src/grammarFunctor.ml[1886,55813+15]..[1886,55813+20])
                                                  ]
                                                expression (src/grammarFunctor.ml[1887,55836+6]..[1893,56098+20])
                                                  Pexp_try
                                                  expression (src/grammarFunctor.ml[1888,55846+8]..[1889,55895+47])
                                                    Pexp_tuple
                                                    [
                                                      expression (src/grammarFunctor.ml[1888,55846+8]..[1888,55846+47])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1888,55846+8]..[1888,55846+22])
                                                          Pexp_ident "StringMap.find" (src/grammarFunctor.ml[1888,55846+8]..[1888,55846+22])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1888,55846+23]..[1888,55846+34])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1888,55846+24]..[1888,55846+29])
                                                                Pexp_ident "print" (src/grammarFunctor.ml[1888,55846+24]..[1888,55846+29])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1888,55846+30]..[1888,55846+33])
                                                                    Pexp_ident "nt1" (src/grammarFunctor.ml[1888,55846+30]..[1888,55846+33])
                                                              ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1888,55846+35]..[1888,55846+47])
                                                              Pexp_ident "declarations" (src/grammarFunctor.ml[1888,55846+35]..[1888,55846+47])
                                                        ]
                                                      expression (src/grammarFunctor.ml[1889,55895+8]..[1889,55895+47])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1889,55895+8]..[1889,55895+22])
                                                          Pexp_ident "StringMap.find" (src/grammarFunctor.ml[1889,55895+8]..[1889,55895+22])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1889,55895+23]..[1889,55895+34])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1889,55895+24]..[1889,55895+29])
                                                                Pexp_ident "print" (src/grammarFunctor.ml[1889,55895+24]..[1889,55895+29])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1889,55895+30]..[1889,55895+33])
                                                                    Pexp_ident "nt2" (src/grammarFunctor.ml[1889,55895+30]..[1889,55895+33])
                                                              ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1889,55895+35]..[1889,55895+47])
                                                              Pexp_ident "declarations" (src/grammarFunctor.ml[1889,55895+35]..[1889,55895+47])
                                                        ]
                                                    ]
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1890,55943+11]..[1890,55943+20])
                                                        Ppat_construct "Not_found" (src/grammarFunctor.ml[1890,55943+11]..[1890,55943+20])
                                                        None
                                                      expression (src/grammarFunctor.ml[1893,56098+8]..[1893,56098+20])
                                                        Pexp_assert
                                                        expression (src/grammarFunctor.ml[1893,56098+15]..[1893,56098+20])
                                                          Pexp_construct "false" (src/grammarFunctor.ml[1893,56098+15]..[1893,56098+20])
                                                          None
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1895,56126+4]..[1906,56520+13])
                                              Pexp_match
                                              expression (src/grammarFunctor.ml[1895,56126+10]..[1895,56126+38])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1895,56126+10]..[1895,56126+26])
                                                  Pexp_ident "production_order" (src/grammarFunctor.ml[1895,56126+10]..[1895,56126+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1895,56126+27]..[1895,56126+32])
                                                      Pexp_ident "prec1" (src/grammarFunctor.ml[1895,56126+27]..[1895,56126+32])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1895,56126+33]..[1895,56126+38])
                                                      Pexp_ident "prec2" (src/grammarFunctor.ml[1895,56126+33]..[1895,56126+38])
                                                ]
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1896,56170+6]..[1896,56170+8])
                                                    Ppat_construct "Gt" (src/grammarFunctor.ml[1896,56170+6]..[1896,56170+8])
                                                    None
                                                  expression (src/grammarFunctor.ml[1900,56379+8]..[1900,56379+12])
                                                    Pexp_construct "true" (src/grammarFunctor.ml[1900,56379+8]..[1900,56379+12])
                                                    None
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1901,56392+6]..[1901,56392+8])
                                                    Ppat_construct "Lt" (src/grammarFunctor.ml[1901,56392+6]..[1901,56392+8])
                                                    None
                                                  expression (src/grammarFunctor.ml[1902,56404+8]..[1902,56404+13])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1902,56404+8]..[1902,56404+13])
                                                    None
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1903,56418+6]..[1904,56427+8])
                                                    Ppat_or
                                                    pattern (src/grammarFunctor.ml[1903,56418+6]..[1903,56418+8])
                                                      Ppat_construct "Eq" (src/grammarFunctor.ml[1903,56418+6]..[1903,56418+8])
                                                      None
                                                    pattern (src/grammarFunctor.ml[1904,56427+6]..[1904,56427+8])
                                                      Ppat_construct "Ic" (src/grammarFunctor.ml[1904,56427+6]..[1904,56427+8])
                                                      None
                                                  expression (src/grammarFunctor.ml[1906,56520+8]..[1906,56520+13])
                                                    Pexp_construct "false" (src/grammarFunctor.ml[1906,56520+8]..[1906,56520+13])
                                                    None
                                              ]
                                      ]
                        ]
                    ]
              structure_item (src/grammarFunctor.ml[1913,56661+0]..[1947,57516+3])
                Pstr_module
                "Sentence" (src/grammarFunctor.ml[1913,56661+7]..[1913,56661+15])
                  module_expr (src/grammarFunctor.ml[1913,56661+18]..[1947,57516+3])
                    Pmod_structure
                    [
                      structure_item (src/grammarFunctor.ml[1915,56687+2]..[1916,56705+42])
                        Pstr_type Rec
                        [
                          type_declaration "sentence" (src/grammarFunctor.ml[1915,56687+7]..[1915,56687+15]) (src/grammarFunctor.ml[1915,56687+2]..[1916,56705+42])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (src/grammarFunctor.ml[1916,56705+4]..[1916,56705+42])
                                  Ptyp_tuple
                                  [
                                    core_type (src/grammarFunctor.ml[1916,56705+4]..[1916,56705+24])
                                      Ptyp_constr "option" (src/grammarFunctor.ml[1916,56705+18]..[1916,56705+24])
                                      [
                                        core_type (src/grammarFunctor.ml[1916,56705+4]..[1916,56705+17])
                                          Ptyp_constr "Nonterminal.t" (src/grammarFunctor.ml[1916,56705+4]..[1916,56705+17])
                                          []
                                      ]
                                    core_type (src/grammarFunctor.ml[1916,56705+27]..[1916,56705+42])
                                      Ptyp_constr "list" (src/grammarFunctor.ml[1916,56705+38]..[1916,56705+42])
                                      [
                                        core_type (src/grammarFunctor.ml[1916,56705+27]..[1916,56705+37])
                                          Ptyp_constr "Terminal.t" (src/grammarFunctor.ml[1916,56705+27]..[1916,56705+37])
                                          []
                                      ]
                                  ]
                        ]
                      structure_item (src/grammarFunctor.ml[1918,56749+2]..[1918,56749+13])
                        Pstr_open Fresh
                        module_expr (src/grammarFunctor.ml[1918,56749+7]..[1918,56749+13])
                          Pmod_ident "Printf" (src/grammarFunctor.ml[1918,56749+7]..[1918,56749+13])
                      structure_item (src/grammarFunctor.ml[1920,56764+2]..[1930,57111+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1920,56764+6]..[1920,56764+20])
                              Ppat_var "print_abstract" (src/grammarFunctor.ml[1920,56764+6]..[1920,56764+20])
                            expression (src/grammarFunctor.ml[1920,56764+21]..[1930,57111+5]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1920,56764+21]..[1920,56764+37])
                                Ppat_tuple
                                [
                                  pattern (src/grammarFunctor.ml[1920,56764+22]..[1920,56764+25])
                                    Ppat_var "nto" (src/grammarFunctor.ml[1920,56764+22]..[1920,56764+25])
                                  pattern (src/grammarFunctor.ml[1920,56764+27]..[1920,56764+36])
                                    Ppat_var "terminals" (src/grammarFunctor.ml[1920,56764+27]..[1920,56764+36])
                                ]
                              expression (src/grammarFunctor.ml[1920,56764+38]..[1930,57111+5])
                                Pexp_constraint
                                expression (src/grammarFunctor.ml[1921,56813+4]..[1930,57111+5])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1921,56813+4]..[1921,56813+20])
                                    Pexp_ident "Misc.with_buffer" (src/grammarFunctor.ml[1921,56813+4]..[1921,56813+20])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1921,56813+21]..[1921,56813+24])
                                        Pexp_constant PConst_int (128,None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1921,56813+25]..[1930,57111+5])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1921,56813+30]..[1921,56813+31])
                                          Ppat_var "b" (src/grammarFunctor.ml[1921,56813+30]..[1921,56813+31])
                                        expression (src/grammarFunctor.ml[1922,56848+6]..[1929,57089+21])
                                          Pexp_sequence
                                          expression (src/grammarFunctor.ml[1922,56848+6]..[1924,56931+11])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1922,56848+6]..[1922,56848+17])
                                              Pexp_ident "Option.iter" (src/grammarFunctor.ml[1922,56848+6]..[1922,56848+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1922,56848+18]..[1924,56931+7])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[1922,56848+23]..[1922,56848+25])
                                                    Ppat_var "nt" (src/grammarFunctor.ml[1922,56848+23]..[1922,56848+25])
                                                  expression (src/grammarFunctor.ml[1923,56877+8]..[1923,56877+53])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1923,56877+8]..[1923,56877+15])
                                                      Pexp_ident "bprintf" (src/grammarFunctor.ml[1923,56877+8]..[1923,56877+15])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1923,56877+16]..[1923,56877+17])
                                                          Pexp_ident "b" (src/grammarFunctor.ml[1923,56877+16]..[1923,56877+17])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1923,56877+18]..[1923,56877+24])
                                                          Pexp_constant PConst_string("%s: ",(src/grammarFunctor.ml[1923,56877+19]..[1923,56877+23]),None)
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1923,56877+25]..[1923,56877+53])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1923,56877+26]..[1923,56877+43])
                                                            Pexp_ident "Nonterminal.print" (src/grammarFunctor.ml[1923,56877+26]..[1923,56877+43])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1923,56877+44]..[1923,56877+49])
                                                                Pexp_construct "false" (src/grammarFunctor.ml[1923,56877+44]..[1923,56877+49])
                                                                None
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1923,56877+50]..[1923,56877+52])
                                                                Pexp_ident "nt" (src/grammarFunctor.ml[1923,56877+50]..[1923,56877+52])
                                                          ]
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1924,56931+8]..[1924,56931+11])
                                                  Pexp_ident "nto" (src/grammarFunctor.ml[1924,56931+8]..[1924,56931+11])
                                            ]
                                          expression (src/grammarFunctor.ml[1925,56944+6]..[1929,57089+21])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1925,56944+10]..[1925,56944+19])
                                                  Ppat_var "separator" (src/grammarFunctor.ml[1925,56944+10]..[1925,56944+19])
                                                expression (src/grammarFunctor.ml[1925,56944+22]..[1925,56944+38])
                                                  Pexp_apply
                                                  expression (src/grammarFunctor.ml[1925,56944+22]..[1925,56944+31])
                                                    Pexp_ident "Misc.once" (src/grammarFunctor.ml[1925,56944+22]..[1925,56944+31])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1925,56944+32]..[1925,56944+34])
                                                        Pexp_constant PConst_string("",(src/grammarFunctor.ml[1925,56944+33]..[1925,56944+33]),None)
                                                    <arg>
                                                    Nolabel
                                                      expression (src/grammarFunctor.ml[1925,56944+35]..[1925,56944+38])
                                                        Pexp_constant PConst_string(" ",(src/grammarFunctor.ml[1925,56944+36]..[1925,56944+37]),None)
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1926,56986+6]..[1929,57089+21])
                                              Pexp_sequence
                                              expression (src/grammarFunctor.ml[1926,56986+6]..[1928,57070+17])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1926,56986+6]..[1926,56986+15])
                                                  Pexp_ident "List.iter" (src/grammarFunctor.ml[1926,56986+6]..[1926,56986+15])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1926,56986+16]..[1928,57070+7])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (src/grammarFunctor.ml[1926,56986+21]..[1926,56986+22])
                                                        Ppat_var "t" (src/grammarFunctor.ml[1926,56986+21]..[1926,56986+22])
                                                      expression (src/grammarFunctor.ml[1927,57012+8]..[1927,57012+57])
                                                        Pexp_apply
                                                        expression (src/grammarFunctor.ml[1927,57012+8]..[1927,57012+15])
                                                          Pexp_ident "bprintf" (src/grammarFunctor.ml[1927,57012+8]..[1927,57012+15])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1927,57012+16]..[1927,57012+17])
                                                              Pexp_ident "b" (src/grammarFunctor.ml[1927,57012+16]..[1927,57012+17])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1927,57012+18]..[1927,57012+24])
                                                              Pexp_constant PConst_string("%s%s",(src/grammarFunctor.ml[1927,57012+19]..[1927,57012+23]),None)
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1927,57012+25]..[1927,57012+38])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1927,57012+26]..[1927,57012+35])
                                                                Pexp_ident "separator" (src/grammarFunctor.ml[1927,57012+26]..[1927,57012+35])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1927,57012+35]..[1927,57012+37])
                                                                    Pexp_construct "()" (src/grammarFunctor.ml[1927,57012+35]..[1927,57012+37])
                                                                    None
                                                              ]
                                                          <arg>
                                                          Nolabel
                                                            expression (src/grammarFunctor.ml[1927,57012+39]..[1927,57012+57])
                                                              Pexp_apply
                                                              expression (src/grammarFunctor.ml[1927,57012+40]..[1927,57012+54])
                                                                Pexp_ident "Terminal.print" (src/grammarFunctor.ml[1927,57012+40]..[1927,57012+54])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (src/grammarFunctor.ml[1927,57012+55]..[1927,57012+56])
                                                                    Pexp_ident "t" (src/grammarFunctor.ml[1927,57012+55]..[1927,57012+56])
                                                              ]
                                                        ]
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1928,57070+8]..[1928,57070+17])
                                                      Pexp_ident "terminals" (src/grammarFunctor.ml[1928,57070+8]..[1928,57070+17])
                                                ]
                                              expression (src/grammarFunctor.ml[1929,57089+6]..[1929,57089+20])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1929,57089+6]..[1929,57089+13])
                                                  Pexp_ident "bprintf" (src/grammarFunctor.ml[1929,57089+6]..[1929,57089+13])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1929,57089+14]..[1929,57089+15])
                                                      Pexp_ident "b" (src/grammarFunctor.ml[1929,57089+14]..[1929,57089+15])
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1929,57089+16]..[1929,57089+20])
                                                      Pexp_constant PConst_string("\n",(src/grammarFunctor.ml[1929,57089+17]..[1929,57089+19]),None)
                                                ]
                                  ]
                                core_type (src/grammarFunctor.ml[1920,56764+40]..[1920,56764+46])
                                  Ptyp_constr "string" (src/grammarFunctor.ml[1920,56764+40]..[1920,56764+46])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[1932,57118+2]..[1938,57356+5])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1932,57118+6]..[1932,57118+20])
                              Ppat_var "print_concrete" (src/grammarFunctor.ml[1932,57118+6]..[1932,57118+20])
                            expression (src/grammarFunctor.ml[1932,57118+21]..[1938,57356+5]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1932,57118+21]..[1932,57118+38])
                                Ppat_tuple
                                [
                                  pattern (src/grammarFunctor.ml[1932,57118+22]..[1932,57118+26])
                                    Ppat_var "_nto" (src/grammarFunctor.ml[1932,57118+22]..[1932,57118+26])
                                  pattern (src/grammarFunctor.ml[1932,57118+28]..[1932,57118+37])
                                    Ppat_var "terminals" (src/grammarFunctor.ml[1932,57118+28]..[1932,57118+37])
                                ]
                              expression (src/grammarFunctor.ml[1932,57118+39]..[1938,57356+5])
                                Pexp_constraint
                                expression (src/grammarFunctor.ml[1933,57168+4]..[1938,57356+5])
                                  Pexp_apply
                                  expression (src/grammarFunctor.ml[1933,57168+4]..[1933,57168+20])
                                    Pexp_ident "Misc.with_buffer" (src/grammarFunctor.ml[1933,57168+4]..[1933,57168+20])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1933,57168+21]..[1933,57168+24])
                                        Pexp_constant PConst_int (128,None)
                                    <arg>
                                    Nolabel
                                      expression (src/grammarFunctor.ml[1933,57168+25]..[1938,57356+5])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (src/grammarFunctor.ml[1933,57168+30]..[1933,57168+31])
                                          Ppat_var "b" (src/grammarFunctor.ml[1933,57168+30]..[1933,57168+31])
                                        expression (src/grammarFunctor.ml[1934,57203+6]..[1937,57338+17])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[1934,57203+10]..[1934,57203+19])
                                                Ppat_var "separator" (src/grammarFunctor.ml[1934,57203+10]..[1934,57203+19])
                                              expression (src/grammarFunctor.ml[1934,57203+22]..[1934,57203+38])
                                                Pexp_apply
                                                expression (src/grammarFunctor.ml[1934,57203+22]..[1934,57203+31])
                                                  Pexp_ident "Misc.once" (src/grammarFunctor.ml[1934,57203+22]..[1934,57203+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1934,57203+32]..[1934,57203+34])
                                                      Pexp_constant PConst_string("",(src/grammarFunctor.ml[1934,57203+33]..[1934,57203+33]),None)
                                                  <arg>
                                                  Nolabel
                                                    expression (src/grammarFunctor.ml[1934,57203+35]..[1934,57203+38])
                                                      Pexp_constant PConst_string(" ",(src/grammarFunctor.ml[1934,57203+36]..[1934,57203+37]),None)
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[1935,57245+6]..[1937,57338+17])
                                            Pexp_apply
                                            expression (src/grammarFunctor.ml[1935,57245+6]..[1935,57245+15])
                                              Pexp_ident "List.iter" (src/grammarFunctor.ml[1935,57245+6]..[1935,57245+15])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1935,57245+16]..[1937,57338+7])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/grammarFunctor.ml[1935,57245+21]..[1935,57245+22])
                                                    Ppat_var "t" (src/grammarFunctor.ml[1935,57245+21]..[1935,57245+22])
                                                  expression (src/grammarFunctor.ml[1936,57271+8]..[1936,57271+66])
                                                    Pexp_apply
                                                    expression (src/grammarFunctor.ml[1936,57271+8]..[1936,57271+15])
                                                      Pexp_ident "bprintf" (src/grammarFunctor.ml[1936,57271+8]..[1936,57271+15])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1936,57271+16]..[1936,57271+17])
                                                          Pexp_ident "b" (src/grammarFunctor.ml[1936,57271+16]..[1936,57271+17])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1936,57271+18]..[1936,57271+24])
                                                          Pexp_constant PConst_string("%s%s",(src/grammarFunctor.ml[1936,57271+19]..[1936,57271+23]),None)
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1936,57271+25]..[1936,57271+38])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1936,57271+26]..[1936,57271+35])
                                                            Pexp_ident "separator" (src/grammarFunctor.ml[1936,57271+26]..[1936,57271+35])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1936,57271+35]..[1936,57271+37])
                                                                Pexp_construct "()" (src/grammarFunctor.ml[1936,57271+35]..[1936,57271+37])
                                                                None
                                                          ]
                                                      <arg>
                                                      Nolabel
                                                        expression (src/grammarFunctor.ml[1936,57271+39]..[1936,57271+66])
                                                          Pexp_apply
                                                          expression (src/grammarFunctor.ml[1936,57271+40]..[1936,57271+63])
                                                            Pexp_ident "Terminal.print_concrete" (src/grammarFunctor.ml[1936,57271+40]..[1936,57271+63])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/grammarFunctor.ml[1936,57271+64]..[1936,57271+65])
                                                                Pexp_ident "t" (src/grammarFunctor.ml[1936,57271+64]..[1936,57271+65])
                                                          ]
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (src/grammarFunctor.ml[1937,57338+8]..[1937,57338+17])
                                                  Pexp_ident "terminals" (src/grammarFunctor.ml[1937,57338+8]..[1937,57338+17])
                                            ]
                                  ]
                                core_type (src/grammarFunctor.ml[1932,57118+41]..[1932,57118+47])
                                  Ptyp_constr "string" (src/grammarFunctor.ml[1932,57118+41]..[1932,57118+47])
                                  []
                        ]
                      structure_item (src/grammarFunctor.ml[1940,57363+2]..[1945,57483+31])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (src/grammarFunctor.ml[1940,57363+6]..[1940,57363+11])
                              Ppat_var "print" (src/grammarFunctor.ml[1940,57363+6]..[1940,57363+11])
                            expression (src/grammarFunctor.ml[1940,57363+12]..[1945,57483+31]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/grammarFunctor.ml[1940,57363+12]..[1940,57363+17])
                                Ppat_var "style" (src/grammarFunctor.ml[1940,57363+12]..[1940,57363+17])
                              expression (src/grammarFunctor.ml[1940,57363+18]..[1945,57483+31]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/grammarFunctor.ml[1940,57363+18]..[1940,57363+26])
                                  Ppat_var "sentence" (src/grammarFunctor.ml[1940,57363+18]..[1940,57363+26])
                                expression (src/grammarFunctor.ml[1941,57392+4]..[1945,57483+31])
                                  Pexp_match
                                  expression (src/grammarFunctor.ml[1941,57392+10]..[1941,57392+15])
                                    Pexp_ident "style" (src/grammarFunctor.ml[1941,57392+10]..[1941,57392+15])
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1942,57413+6]..[1942,57413+15])
                                        Ppat_variant "Abstract"
                                        None
                                      expression (src/grammarFunctor.ml[1943,57432+8]..[1943,57432+31])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1943,57432+8]..[1943,57432+22])
                                          Pexp_ident "print_abstract" (src/grammarFunctor.ml[1943,57432+8]..[1943,57432+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1943,57432+23]..[1943,57432+31])
                                              Pexp_ident "sentence" (src/grammarFunctor.ml[1943,57432+23]..[1943,57432+31])
                                        ]
                                    <case>
                                      pattern (src/grammarFunctor.ml[1944,57464+6]..[1944,57464+15])
                                        Ppat_variant "Concrete"
                                        None
                                      expression (src/grammarFunctor.ml[1945,57483+8]..[1945,57483+31])
                                        Pexp_apply
                                        expression (src/grammarFunctor.ml[1945,57483+8]..[1945,57483+22])
                                          Pexp_ident "print_concrete" (src/grammarFunctor.ml[1945,57483+8]..[1945,57483+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/grammarFunctor.ml[1945,57483+23]..[1945,57483+31])
                                              Pexp_ident "sentence" (src/grammarFunctor.ml[1945,57483+23]..[1945,57483+31])
                                        ]
                                  ]
                        ]
                    ]
            ]
]

open BasicSyntax
open Syntax
open Positions
module Make(G:sig val grammar : BasicSyntax.grammar val verbose : bool end)() =
  struct
    open G
    let index (strings : string list) =
      (let name = Array.of_list strings
       and (n, map) =
         List.fold_left
           (fun (n, map) -> fun s -> ((n + 1), (StringMap.add s n map)))
           (0, StringMap.empty) strings in
       (n, name, map) : (int * string array * int StringMap.t))
    module TokPrecedence =
      struct
        let ever_useful : StringSet.t ref = ref StringSet.empty
        let use id = ever_useful := (StringSet.add id (!ever_useful))
        let levelip id properties =
          ((lazy (use id)), (properties.tk_precedence))
        let leveli id =
          let properties =
            try StringMap.find id grammar.tokens
            with | Not_found -> assert false in
          levelip id properties
        let diagnostics () =
          StringMap.iter
            (fun id ->
               fun properties ->
                 if not (StringSet.mem id (!ever_useful))
                 then
                   match properties.tk_precedence with
                   | UndefinedPrecedence -> ()
                   | PrecedenceLevel (_, _, pos1, pos2) ->
                       Error.grammar_warning [Positions.import (pos1, pos2)]
                         "the precedence level assigned to %s is never useful."
                         id) grammar.tokens
      end
    module Nonterminal =
      struct
        type t = int
        let n2i i = i
        let equal (nt1 : t) (nt2 : t) = nt1 = nt2
        let compare = (-)
        let new_start_nonterminals =
          StringSet.fold (fun symbol -> fun ss -> (symbol ^ "'") :: ss)
            grammar.start_symbols []
        let original_nonterminals = nonterminals grammar
        let start = List.length new_start_nonterminals
        let ((n : int), (name : string array), (map : int StringMap.t)) =
          index (new_start_nonterminals @ original_nonterminals)
        let () =
          if verbose
          then
            Error.logG 1
              (fun f ->
                 Printf.fprintf f
                   "Grammar has %d nonterminal symbols, among which %d start symbols.\n"
                   (n - start) start)
        let is_internal_start nt = nt < start
        let is_user_start nt =
          StringSet.mem (name.(nt)) grammar.start_symbols
        let print normalize nt =
          if normalize then Misc.normalize (name.(nt)) else name.(nt)
        let lookup name = StringMap.find name map
        let positions nt =
          (StringMap.find (print false nt) grammar.rules).positions
        let init f = Array.init n f
        let iter f = Misc.iteri n f
        let fold f accu = Misc.foldi n f accu
        let map f = Misc.mapi n f
        let iterx f = for nt = start to n - 1 do f nt done
        let foldx f accu = Misc.foldij start n f accu
        let ocamltype nt =
          assert (not (is_internal_start nt));
          (try Some (StringMap.find (print false nt) grammar.types)
           with | Not_found -> None)
        let ocamltype_of_start_symbol nt =
          match ocamltype nt with | Some typ -> typ | None -> assert false
        let tabulate f = Array.get (Array.init n f)
        let attributes : Syntax.attributes array = Array.make n []
        let () =
          StringMap.iter
            (fun nonterminal ->
               fun { attributes = attrs } ->
                 let nt = lookup nonterminal in attributes.(nt) <- attrs)
            grammar.rules
        let attributes nt = attributes.(nt)
      end
    module NonterminalMap = Patricia.Big
    module NonterminalSet = Patricia.Big.Domain
    module Terminal =
      struct
        type t = int
        let t2i i = i
        let i2t i = i
        let compare = (-)
        let equal (tok1 : t) (tok2 : t) = tok1 = tok2
        let ((n : int), (name : string array), (map : int StringMap.t)) =
          let tokens = tokens grammar in
          match tokens with
          | [] when verbose -> Error.error [] "no tokens have been declared."
          | _ -> index (("error" :: tokens) @ ["#"])
        let print tok = name.(tok)
        let lookup name = StringMap.find name map
        let sharp = lookup "#"
        let error = lookup "error"
        let pseudo tok = (tok = sharp) || (tok = error)
        let real t = (error <> t) && (t <> sharp)
        let non_error tok = tok <> error
        let token_properties =
          let not_so_dummy_properties =
            {
              tk_filename = "__primitives__";
              tk_precedence = UndefinedPrecedence;
              tk_associativity = UndefinedAssoc;
              tk_ocamltype = None;
              tk_is_declared = true;
              tk_position = Positions.dummy;
              tk_attributes = [];
              tk_alias = None
            } in
          Array.init n
            (fun tok ->
               try StringMap.find (name.(tok)) grammar.tokens
               with
               | Not_found ->
                   (assert ((tok = sharp) || (tok = error));
                    not_so_dummy_properties))
        let () =
          if verbose
          then
            Error.logG 1
              (fun f ->
                 Printf.fprintf f "Grammar has %d terminal symbols.\n"
                   (n - 2))
        let precedence_level tok =
          TokPrecedence.levelip (print tok) (token_properties.(tok))
        let associativity tok = (token_properties.(tok)).tk_associativity
        let ocamltype tok = (token_properties.(tok)).tk_ocamltype
        let init f = Array.init n f
        let iter f = Misc.iteri n f
        let fold f accu = Misc.foldi n f accu
        let map f = Misc.mapi n f
        let () = assert (sharp = (n - 1))
        let foldx f accu = Misc.foldi sharp f accu
        let mapx f = Misc.mapi sharp f
        let () = assert (error = 0)
        let iter_real f = for i = 1 to n - 2 do f i done
        let tokens_without_an_alias =
          let accu = ref [] in
          iter_real
            (fun tok ->
               let properties = token_properties.(tok) in
               if properties.tk_alias = None then accu := (tok :: (!accu)));
          List.rev (!accu)
        let () =
          if verbose && Settings.require_aliases
          then
            tokens_without_an_alias |>
              (List.iter
                 (fun tok ->
                    let properties = token_properties.(tok) in
                    let pos = properties.tk_position in
                    Error.grammar_warning [pos]
                      "no alias has been defined for the token %s."
                      (print tok)))
        let every_token_has_an_alias = tokens_without_an_alias = []
        let alias tok = (token_properties.(tok)).tk_alias
        let unquoted_alias tok =
          (alias tok) |>
            (Option.map
               (fun qid ->
                  assert ((qid.[0]) = '"');
                  (let qid = String.sub qid 1 ((String.length qid) - 1) in
                   let lexbuf = Lexing.from_string qid in
                   Misc.with_buffer 8 (fun b -> Lexer.decode_string b lexbuf))))
        let print_concrete t =
          match unquoted_alias t with | Some alias -> alias | None -> print t
        let eof = try Some (lookup "EOF") with | Not_found -> None
        let attributes tok = (token_properties.(tok)).tk_attributes
        module Word(X:sig  end) =
          struct
            let () = assert (n <= 256)
            let ((encode : string -> int), (decode : int -> string), verbose)
              = Misc.new_encode_decode 1024
            type word = int
            let epsilon = encode ""
            let singleton t = encode (String.make 1 (Char.chr t))
            let append i1 i2 =
              let w1 = decode i1
              and w2 = decode i2 in
              if (String.length w1) = 0
              then i2
              else if (String.length w2) = 0 then i1 else encode (w1 ^ w2)
            let length i = String.length (decode i)
            let first i z =
              let w = decode i in
              if (String.length w) > 0 then Char.code (w.[0]) else z
            let rec elements i n w =
              if i = n
              then []
              else (Char.code (w.[i])) :: (elements (i + 1) n w)
            let elements i =
              let w = decode i in elements 0 (String.length w) w
            let print i =
              let w = decode i in
              Misc.separated_iter_to_string (fun c -> print (Char.code c))
                " " (fun f -> String.iter f w)
            let compare i1 i2 = Generic.compare (decode i1) (decode i2)
          end
      end
    module TerminalSet =
      struct
        include ((BoundedBitSet.Make)(Terminal))()
        let print toks =
          Misc.separated_iter_to_string Terminal.print " "
            (fun f -> iter f toks)
        let universe =
          remove Terminal.sharp
            (remove Terminal.error (Terminal.fold add empty))
        type property = t
        let bottom = empty
        let is_maximal _ = false
        let leq_join = union
      end
    module TerminalMap = Patricia.Big
    module Symbol =
      struct
        type t =
          | N of Nonterminal.t 
          | T of Terminal.t 
        let is_terminal sym = match sym with | N _ -> false | T _ -> true
        let compare sym1 sym2 =
          match (sym1, sym2) with
          | (N nt1, N nt2) -> Nonterminal.compare nt1 nt2
          | (T tok1, T tok2) -> Terminal.compare tok1 tok2
          | (N _, T _) -> 1
          | (T _, N _) -> (-1)
        let equal sym1 sym2 = (compare sym1 sym2) = 0
        let rec lequal syms1 syms2 =
          match (syms1, syms2) with
          | ([], []) -> true
          | (sym1::syms1, sym2::syms2) ->
              (equal sym1 sym2) && (lequal syms1 syms2)
          | (_::_, []) | ([], _::_) -> false
        let non_error sym =
          match sym with | T tok -> Terminal.non_error tok | N _ -> true
        let print =
          function
          | N nt -> Nonterminal.print false nt
          | T tok -> Terminal.print tok
        let nonterminal = function | T _ -> false | N _ -> true
        let buffer = Buffer.create 1024
        let printaod offset dot symbols =
          let length = Array.length symbols in
          let first = ref true in
          let separate () =
            if not (!first) then Printf.bprintf buffer " "; first := false in
          for i = offset to length do
            (if i = dot then (separate (); Printf.bprintf buffer ".");
             if i < length
             then
               (separate (); Printf.bprintf buffer "%s" (print (symbols.(i)))))
          done;
          (let s = Buffer.contents buffer in Buffer.clear buffer; s)
        let printao offset symbols = printaod offset (-1) symbols
        let printa symbols = printao 0 symbols
        let printl symbols = printa (Array.of_list symbols)
        let lookup name =
          try T (Terminal.lookup name)
          with
          | Not_found ->
              (try N (Nonterminal.lookup name)
               with | Not_found -> assert false)
      end
    module SymbolSet =
      struct
        include (Set.Make)(Symbol)
        let print symbols = Symbol.printl (elements symbols)
        type property = t
        let bottom = empty
        let leq = subset
        let join = union
      end
    module SymbolMap =
      struct
        include (Map.Make)(Symbol)
        let domain m =
          fold (fun symbol -> fun _ -> fun accu -> symbol :: accu) m []
        let init f xs =
          List.fold_left (fun accu -> fun x -> add x (f x) accu) empty xs
        let purelynonterminal m =
          fold
            (fun symbol ->
               fun _ -> fun accu -> accu && (Symbol.nonterminal symbol)) m
            true
      end
    module Production =
      struct
        type index = int
        let compare = (-)
        let n : int =
          let n =
            StringMap.fold
              (fun _ ->
                 fun { branches } -> fun n -> n + (List.length branches))
              grammar.rules 0 in
          if verbose
          then
            Error.logG 1
              (fun f -> Printf.fprintf f "Grammar has %d productions.\n" n);
          n + (StringSet.cardinal grammar.start_symbols)
        let p2i prod = prod
        let i2p prod = assert ((prod >= 0) && (prod < n)); prod
        let table : (Nonterminal.t * Symbol.t array) array =
          Array.make n ((-1), [||])
        let identifiers : identifier array array = Array.make n [||]
        let actions : action option array = Array.make n None
        let positions : Positions.t list array = Array.make n []
        let rhs_attributes : Syntax.attributes array array =
          Array.make n [||]
        let prec_decl : symbol located option array = Array.make n None
        let production_level : branch_production_level array =
          let dummy = ProductionLevel (InputFile.builtin_input_file, 0) in
          Array.make n dummy
        let ntprods : (int * int) array =
          Array.make Nonterminal.n ((-1), (-1))
        let grammar_uses_error_token = ref false
        let ((start : int), (startprods : index NonterminalMap.t)) =
          StringSet.fold
            (fun nonterminal ->
               fun (k, startprods) ->
                 let nt = Nonterminal.lookup nonterminal
                 and nt' = Nonterminal.lookup (nonterminal ^ "'") in
                 table.(k) <- (nt', [|(Symbol.N nt)|]);
                 identifiers.(k) <- [|"_1"|];
                 ntprods.(nt') <- (k, (k + 1));
                 positions.(k) <- (Nonterminal.positions nt);
                 ((k + 1), (NonterminalMap.add nt k startprods)))
            grammar.start_symbols (0, NonterminalMap.empty)
        let producer_symbol producer =
          Symbol.lookup (producer_symbol producer)
        let (_ : int) =
          StringMap.fold
            (fun nonterminal ->
               fun { branches } ->
                 fun k ->
                   let nt = Nonterminal.lookup nonterminal in
                   let k' =
                     List.fold_left
                       (fun k ->
                          fun branch ->
                            let producers = Array.of_list branch.producers in
                            let rhs = Array.map producer_symbol producers in
                            table.(k) <- (nt, rhs);
                            identifiers.(k) <-
                              (Array.map producer_identifier producers);
                            actions.(k) <- (Some (branch.action));
                            rhs_attributes.(k) <-
                              (Array.map producer_attributes producers);
                            production_level.(k) <-
                              (branch.branch_production_level);
                            prec_decl.(k) <- (branch.branch_prec_annotation);
                            positions.(k) <- [branch.branch_position];
                            if not (MArray.for_all Symbol.non_error rhs)
                            then grammar_uses_error_token := true;
                            k + 1) k branches in
                   ntprods.(nt) <- (k, k'); k') grammar.rules start
        let iternt nt f = let (k, k') = ntprods.(nt) in Misc.iterij k k' f
        let foldnt nt f accu =
          let (k, k') = ntprods.(nt) in Misc.foldij k k' f accu
        let mapnt nt f = let (k, k') = ntprods.(nt) in Misc.mapij k k' f
        let foldnt_lazy nt f accu =
          let (k, k') = ntprods.(nt) in Misc.foldij_lazy k k' f accu
        let def prod = table.(prod)
        let nt prod = let (nt, _) = table.(prod) in nt
        let rhs prod = let (_, rhs) = table.(prod) in rhs
        let length prod = Array.length (rhs prod)
        let identifiers prod = identifiers.(prod)
        let is_start prod = prod < start
        let classify prod =
          if is_start prod
          then
            match (rhs prod).(0) with
            | Symbol.N nt -> Some nt
            | Symbol.T _ -> assert false
          else None
        let action prod =
          match actions.(prod) with
          | Some action -> action
          | None -> (assert (is_start prod); assert false)
        let positions prod = positions.(prod)
        let lhs_attributes prod = Nonterminal.attributes (nt prod)
        let rhs_attributes prod = rhs_attributes.(prod)
        let startsymbol2startprod nt =
          try NonterminalMap.find nt startprods
          with | Not_found -> assert false
        let error_free prod = MArray.for_all Symbol.non_error (rhs prod)
        let init f = Array.init n f
        let iter f = Misc.iteri n f
        let fold f accu = Misc.foldi n f accu
        let map f = Misc.mapi n f
        let amap f = Array.init n f
        let iterx f = for prod = start to n - 1 do f prod done
        let foldx f accu = Misc.foldij start n f accu
        let mapx f = Misc.mapij start n f
        let print prod =
          assert (not (is_start prod));
          (let (nt, rhs) = table.(prod) in
           if (Array.length rhs) = 0
           then Printf.sprintf "%s ->" (Nonterminal.print false nt)
           else
             Printf.sprintf "%s -> %s" (Nonterminal.print false nt)
               (Symbol.printao 0 rhs))
        let describe gerund prod =
          match classify prod with
          | Some nt ->
              let ending = if gerund then "ing" else "" in
              Printf.sprintf "accept%s %s" ending
                (Nonterminal.print false nt)
          | None ->
              let ending = if gerund then "ing" else "e" in
              Printf.sprintf "reduc%s production %s" ending (print prod)
        let tabulate f = Misc.tabulate n f
        let sum f = Misc.sum n f
        let ever_useful : (Positions.t, unit) Hashtbl.t = Hashtbl.create 16
        let consult_prec_decl prod =
          let osym = prec_decl.(prod) in
          ((lazy
              (Option.iter
                 (fun sym ->
                    let pos = Positions.position sym in
                    Hashtbl.add ever_useful pos ()) osym)), osym)
        let diagnostics () =
          iterx
            (fun prod ->
               let osym = prec_decl.(prod) in
               Option.iter
                 (fun sym ->
                    let pos = Positions.position sym in
                    if not (Hashtbl.mem ever_useful pos)
                    then
                      (Error.grammar_warning [pos]
                         "this %%prec declaration is never useful.";
                       Hashtbl.add ever_useful pos ())) osym)
        type production_level =
          | PNone 
          | PRightmostToken of Terminal.t 
          | PPrecDecl of symbol 
        let rightmost_terminal prod =
          Array.fold_left
            (fun accu ->
               fun symbol ->
                 match symbol with
                 | Symbol.T tok -> PRightmostToken tok
                 | Symbol.N _ -> accu) PNone (rhs prod)
        let combine e1 e2 = lazy (Lazy.force e1; Lazy.force e2)
        let precedence prod =
          let (fact1, prec_decl) = consult_prec_decl prod in
          let oterminal =
            match prec_decl with
            | None -> rightmost_terminal prod
            | Some { value = terminal } -> PPrecDecl terminal in
          match oterminal with
          | PNone -> (fact1, UndefinedPrecedence)
          | PRightmostToken tok ->
              let (fact2, level) = Terminal.precedence_level tok in
              ((combine fact1 fact2), level)
          | PPrecDecl id ->
              let (fact2, level) = TokPrecedence.leveli id in
              ((combine fact1 fact2), level)
      end
    let grammar_uses_error_token = !Production.grammar_uses_error_token
    module ProductionMap =
      struct
        include Patricia.Big
        let start f =
          Misc.foldi Production.start
            (fun prod -> fun m -> add prod (f prod) m) empty
      end
    module GenericAnalysis(P:Fix.PROPERTY)(S:sig
                                               open P
                                               val shortcut :
                                                 Nonterminal.t ->
                                                   property option
                                               val terminal :
                                                 Terminal.t -> property
                                               val disjunction :
                                                 property ->
                                                   (unit -> property) ->
                                                     property
                                               val conjunction :
                                                 Symbol.t ->
                                                   property ->
                                                     (unit -> property) ->
                                                       property
                                               val epsilon : property
                                             end) :
      sig
        open P
        val nonterminal : Nonterminal.t -> property
        val symbol : Symbol.t -> property
        val production : Production.index -> int -> property
      end =
      struct
        open P
        let symbol sym get =
          (match sym with
           | Symbol.T tok -> S.terminal tok
           | Symbol.N nt -> get nt : property)
        let production prod i get =
          (let rhs = Production.rhs prod in
           let n = Array.length rhs in
           let rec loop i =
             if i = n
             then S.epsilon
             else
               (let sym = rhs.(i) in
                S.conjunction sym (symbol sym get) (fun () -> loop (i + 1))) in
           loop i : property)
        let nonterminal nt get =
          (match S.shortcut nt with
           | Some p -> p
           | None ->
               Production.foldnt_lazy nt
                 (fun prod ->
                    fun rest -> S.disjunction (production prod 0 get) rest)
                 P.bottom : property)
        module F =
          ((Fix.Make)((Fix.Glue.ArraysAsImperativeMaps)(Nonterminal)))(P)
        let nonterminal = F.lfp nonterminal
        let symbol sym = symbol sym nonterminal
        let production prod i = production prod i nonterminal
      end 
    module NONEMPTY =
      ((GenericAnalysis)(Fix.Prop.Boolean))(struct
                                              let shortcut _nt = None
                                              let terminal _ = true
                                              let disjunction p q =
                                                p || (q ())
                                              let conjunction _ p q =
                                                p && (q ())
                                              let epsilon = true
                                            end)
    module NULLABLE =
      ((GenericAnalysis)(Fix.Prop.Boolean))(struct
                                              let shortcut _nt = None
                                              let terminal _ = false
                                              let disjunction p q =
                                                p || (q ())
                                              let conjunction _ p q =
                                                p && (q ())
                                              let epsilon = true
                                            end)
    module FIRST =
      ((GenericAnalysis)(TerminalSet))(struct
                                         let shortcut _nt = None
                                         let terminal = TerminalSet.singleton
                                         let disjunction p q =
                                           TerminalSet.union p (q ())
                                         let conjunction symbol p q =
                                           if NULLABLE.symbol symbol
                                           then TerminalSet.union p (q ())
                                           else p
                                         let epsilon = TerminalSet.empty
                                       end)
    module MINIMAL =
      ((GenericAnalysis)(struct
                           include CompletedNatWitness
                           type property = Terminal.t t
                         end))(struct
                                 let shortcut _nt = None
                                 open CompletedNatWitness
                                 let terminal = singleton
                                 let disjunction = min_lazy
                                 let conjunction _ = add_lazy
                                 let epsilon = epsilon
                               end)
    let generates_nonempty_word symbol =
      (not (TerminalSet.is_empty (FIRST.symbol symbol)) : bool)
    module G =
      struct
        type node = Nonterminal.t
        let n = Nonterminal.n
        let index nt = nt
        let iter = Nonterminal.iter
        let labeled_successors yield nt =
          Production.iternt nt
            (fun prod ->
               let rhs = Production.rhs prod in
               rhs |>
                 (Array.iteri
                    (fun i ->
                       fun symbol ->
                         match symbol with
                         | Symbol.T _ -> ()
                         | Symbol.N nt' ->
                             let gnw =
                               MArray.existsi
                                 (fun j ->
                                    fun symbol ->
                                      (i <> j) &&
                                        (generates_nonempty_word symbol)) rhs in
                             yield gnw nt')))
        let successors yield nt =
          labeled_successors (fun _gnw -> fun nt' -> yield nt') nt
      end
    let unbounded : bool array Lazy.t =
      lazy
        (let unbounded = Array.make Nonterminal.n false in
         let module T = (Tarjan.Run)(G) in
           G.iter
             (fun nt ->
                nt |>
                  (G.labeled_successors
                     (fun gnw ->
                        fun nt' ->
                          if
                            gnw &&
                              ((T.representative nt) = (T.representative nt'))
                          then
                            (T.scc (T.representative nt)) |>
                              (List.iter (fun nt -> unbounded.(nt) <- true)))));
           unbounded)
    let unbounded nt = ((Lazy.force unbounded).(nt) : bool)
    module MAXIMAL =
      ((GenericAnalysis)(NatInfinityMax))(struct
                                            open NatInfinityMax
                                            let shortcut nt =
                                              if unbounded nt
                                              then Some infinity
                                              else None
                                            let terminal _tok = finite 1
                                            let disjunction = max_lazy
                                            let conjunction _ = add_lazy
                                            let epsilon = bottom
                                          end)
    let () =
      if verbose
      then
        (StringSet.iter
           (fun symbol ->
              let nt = Nonterminal.lookup symbol in
              if not (NONEMPTY.nonterminal nt)
              then
                Error.error (Nonterminal.positions nt)
                  "%s generates the empty language."
                  (Nonterminal.print false nt);
              if TerminalSet.is_empty (FIRST.nonterminal nt)
              then
                Error.error (Nonterminal.positions nt)
                  "%s generates the language {epsilon}."
                  (Nonterminal.print false nt)) grammar.start_symbols;
         for nt = Nonterminal.start to Nonterminal.n - 1 do
           if not (NONEMPTY.nonterminal nt)
           then
             Error.grammar_warning (Nonterminal.positions nt)
               "%s generates the empty language."
               (Nonterminal.print false nt)
         done)
    let () =
      if verbose
      then
        Error.logG 2
          (fun f ->
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "nullable(%s) = %b\n"
                 (Nonterminal.print false nt) (NULLABLE.nonterminal nt)
             done;
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "first(%s) = %s\n"
                 (Nonterminal.print false nt)
                 (TerminalSet.print (FIRST.nonterminal nt))
             done;
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "minimal(%s) = %s\n"
                 (Nonterminal.print false nt)
                 (CompletedNatWitness.print Terminal.print
                    (MINIMAL.nonterminal nt))
             done;
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "maximal(%s) = %s\n"
                 (Nonterminal.print false nt)
                 (NatInfinityMax.print (MAXIMAL.nonterminal nt))
             done)
    let () = if verbose then Time.tick "Analysis of the grammar"
    module FOLLOW(P:sig
                      include Fix.MINIMAL_SEMI_LATTICE
                      val bottom : property
                      val terminal : Terminal.t -> property
                      val first : Production.index -> int -> property
                    end) =
      struct
        module M = (Fix.Glue.ArraysAsImperativeMaps)(Nonterminal)
        module S = ((FixSolver.Make)(M))(P)
        let () =
          let sharp = P.terminal Terminal.sharp in
          for nt = 0 to Nonterminal.start - 1 do
            assert (Nonterminal.is_internal_start nt);
            S.record_ConVar sharp nt
          done
        let () =
          Array.iteri
            (fun prod ->
               fun (nt1, rhs) ->
                 Array.iteri
                   (fun i ->
                      fun symbol ->
                        match symbol with
                        | Symbol.T _ -> ()
                        | Symbol.N nt2 ->
                            let nullable = NULLABLE.production prod (i + 1)
                            and first = P.first prod (i + 1) in
                            (S.record_ConVar first nt2;
                             if nullable then S.record_VarVar nt1 nt2)) rhs)
            Production.table
        let follow : (Nonterminal.t -> P.property) Lazy.t =
          lazy
            (let module S = (S.Solve)() in
               fun nt -> Option.value (S.solution nt) ~default:P.bottom)
        let follow : Nonterminal.t -> P.property =
          fun nt -> (Lazy.force follow) nt
      end
    let follow : Nonterminal.t -> TerminalSet.t =
      let module F =
        (FOLLOW)(struct
                   include TerminalSet
                   let terminal = singleton
                   let first = FIRST.production
                 end) in F.follow
    let () =
      if verbose
      then
        Error.logG 2
          (fun f ->
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "follow(%s) = %s\n"
                 (Nonterminal.print false nt) (TerminalSet.print (follow nt))
             done)
    let tfollow : TerminalSet.t array Lazy.t =
      lazy
        (let tfollow = Array.make Terminal.n TerminalSet.empty in
         Array.iteri
           (fun prod ->
              fun (nt1, rhs) ->
                Array.iteri
                  (fun i ->
                     fun symbol ->
                       match symbol with
                       | Symbol.N _ -> ()
                       | Symbol.T t2 ->
                           let nullable = NULLABLE.production prod (i + 1)
                           and first = FIRST.production prod (i + 1) in
                           (tfollow.(t2) <-
                              (TerminalSet.union first (tfollow.(t2)));
                            if nullable
                            then
                              tfollow.(t2) <-
                                (TerminalSet.union (follow nt1)
                                   (tfollow.(t2))))) rhs) Production.table;
         tfollow)
    let tfollow t = (Lazy.force tfollow).(t)
    let () =
      if verbose
      then
        Error.logG 3
          (fun f ->
             for t = 0 to Terminal.n - 1 do
               Printf.fprintf f "follow(%s) = %s\n" (Terminal.print t)
                 (TerminalSet.print (tfollow t))
             done)
    let sfirst prod i =
      let rhs = Production.rhs prod in
      let n = Array.length rhs in
      let rec loop i =
        if i = n
        then SymbolSet.empty
        else
          (let sym = rhs.(i) in
           SymbolSet.union (SymbolSet.singleton sym)
             (if NULLABLE.symbol sym then loop (i + 1) else SymbolSet.empty)) in
      loop i
    let sfollow : Nonterminal.t -> SymbolSet.t =
      let module F =
        (FOLLOW)(struct
                   let bottom = SymbolSet.bottom
                   include (Fix.Glue.MinimalSemiLattice)(SymbolSet)
                   let terminal t = SymbolSet.singleton (Symbol.T t)
                   let first = sfirst
                 end) in F.follow
    let () =
      if verbose
      then
        Error.logG 3
          (fun f ->
             for nt = Nonterminal.start to Nonterminal.n - 1 do
               Printf.fprintf f "sfollow(%s) = %s\n"
                 (Nonterminal.print false nt) (SymbolSet.print (sfollow nt))
             done)
    type explanation =
      | EObvious 
      | EFirst of Terminal.t * Nonterminal.t 
      | ENullable of Symbol.t list * explanation 
    let explain (tok : Terminal.t) (rhs : Symbol.t array) (i : int) =
      let length = Array.length rhs in
      let rec loop i =
        assert (i < length);
        (let symbol = rhs.(i) in
         match symbol with
         | Symbol.T tok' -> (assert (Terminal.equal tok tok'); EObvious)
         | Symbol.N nt ->
             if TerminalSet.mem tok (FIRST.nonterminal nt)
             then EFirst (tok, nt)
             else
               (assert (NULLABLE.nonterminal nt);
                (match loop (i + 1) with
                 | ENullable (symbols, e) ->
                     ENullable ((symbol :: symbols), e)
                 | e -> ENullable ([symbol], e)))) in
      loop i
    let rec convert =
      function
      | EObvious -> ""
      | EFirst (tok, nt) ->
          Printf.sprintf "%s can begin with %s" (Nonterminal.print false nt)
            (Terminal.print tok)
      | ENullable (symbols, e) ->
          let e = convert e in
          Printf.sprintf "%s can vanish%s%s" (Symbol.printl symbols)
            (if e = "" then "" else " and ") e
    module Analysis =
      struct
        let nullable = NULLABLE.nonterminal
        let nullable_symbol = NULLABLE.symbol
        let first = FIRST.nonterminal
        let first_symbol = FIRST.symbol
        let nullable_first_prod prod i =
          ((NULLABLE.production prod i), (FIRST.production prod i))
        let nullable_first_prod =
          Misc.tabulate Production.n
            (fun prod ->
               Misc.tabulate ((Production.length prod) + 1)
                 (fun i -> nullable_first_prod prod i))
        let first_prod_lookahead prod i z =
          let (nullable, first) = nullable_first_prod prod i in
          if nullable then TerminalSet.add z first else first
        let explain_first_rhs (tok : Terminal.t) (rhs : Symbol.t array)
          (i : int) = convert (explain tok rhs i)
        let follow = follow
        let attributes = grammar.gr_attributes
        let minimal nt = CompletedNatWitness.to_int (MINIMAL.nonterminal nt)
        let minimal_prod prod i =
          assert ((0 <= i) && (i <= (Production.length prod)));
          CompletedNatWitness.to_int (MINIMAL.production prod i)
        let maximal nt = NatInfinityMax.to_int (MAXIMAL.nonterminal nt)
        let maximal_prod prod i =
          assert ((0 <= i) && (i <= (Production.length prod)));
          NatInfinityMax.to_int (MAXIMAL.production prod i)
      end
    module Precedence =
      struct
        type choice =
          | ChooseShift 
          | ChooseReduce 
          | ChooseNeither 
          | DontKnow 
        type order =
          | Lt 
          | Gt 
          | Eq 
          | Ic 
        let precedence_order p1 p2 =
          match (p1, p2) with
          | (UndefinedPrecedence, _) | (_, UndefinedPrecedence) -> Ic
          | (PrecedenceLevel (m1, l1, _, _), PrecedenceLevel (m2, l2, _, _))
              ->
              if not (InputFile.same_input_file m1 m2)
              then Ic
              else if l1 > l2 then Gt else if l1 < l2 then Lt else Eq
        let production_order p1 p2 =
          match (p1, p2) with
          | (ProductionLevel (m1, l1), ProductionLevel (m2, l2)) ->
              if not (InputFile.same_input_file m1 m2)
              then Ic
              else if l1 > l2 then Gt else if l1 < l2 then Lt else Eq
        let shift_reduce tok prod =
          let (fact1, tokp) = Terminal.precedence_level tok
          and (fact2, prodp) = Production.precedence prod in
          match precedence_order tokp prodp with
          | Ic -> DontKnow
          | Eq | Lt | Gt as c ->
              (Lazy.force fact1;
               Lazy.force fact2;
               (match c with
                | Ic -> assert false
                | Eq ->
                    (match Terminal.associativity tok with
                     | LeftAssoc -> ChooseReduce
                     | RightAssoc -> ChooseShift
                     | NonAssoc -> ChooseNeither
                     | _ -> assert false)
                | Lt -> ChooseReduce
                | Gt -> ChooseShift))
        let reduce_reduce prod1 prod2 =
          let pl1 = Production.production_level.(prod1)
          and pl2 = Production.production_level.(prod2) in
          match production_order pl1 pl2 with
          | Lt -> Some prod1
          | Gt -> Some prod2
          | Eq -> None
          | Ic -> None
      end
    let diagnostics () =
      if not Settings.ignore_all_unused_precedence_levels
      then (TokPrecedence.diagnostics (); Production.diagnostics ())
    module OnErrorReduce =
      struct
        let declarations : Syntax.on_error_reduce_level StringMap.t =
          grammar.on_error_reduce
        let print (nt : Nonterminal.t) =
          (Nonterminal.print false nt : string)
        let lookup (nt : string) =
          (try Nonterminal.lookup nt with | Not_found -> assert false : 
          Nonterminal.t)
        let reduce prod =
          let nt = Production.nt prod in
          StringMap.mem (print nt) declarations
        let iter f =
          StringMap.iter (fun nt -> fun _prec -> f (lookup nt)) declarations
        open Precedence
        let preferable prod1 prod2 =
          assert (prod1 <> prod2);
          (let nt1 = Production.nt prod1
           and nt2 = Production.nt prod2 in
           (nt1 <> nt2) &&
             (let (prec1, prec2) =
                try
                  ((StringMap.find (print nt1) declarations),
                    (StringMap.find (print nt2) declarations))
                with | Not_found -> assert false in
              match production_order prec1 prec2 with
              | Gt -> true
              | Lt -> false
              | Eq | Ic -> false))
      end
    module Sentence =
      struct
        type sentence = (Nonterminal.t option * Terminal.t list)
        open Printf
        let print_abstract (nto, terminals) =
          (Misc.with_buffer 128
             (fun b ->
                Option.iter
                  (fun nt -> bprintf b "%s: " (Nonterminal.print false nt))
                  nto;
                (let separator = Misc.once "" " " in
                 List.iter
                   (fun t ->
                      bprintf b "%s%s" (separator ()) (Terminal.print t))
                   terminals;
                 bprintf b "\n")) : string)
        let print_concrete (_nto, terminals) =
          (Misc.with_buffer 128
             (fun b ->
                let separator = Misc.once "" " " in
                List.iter
                  (fun t ->
                     bprintf b "%s%s" (separator ())
                       (Terminal.print_concrete t)) terminals) : string)
        let print style sentence =
          match style with
          | `Abstract -> print_abstract sentence
          | `Concrete -> print_concrete sentence
      end
  end
[
  structure_item (src/grammarFunctor.ml[14,1004+0]..src/grammarFunctor.ml[14,1004+16])
    Tstr_open Fresh
    module_expr (src/grammarFunctor.ml[14,1004+5]..src/grammarFunctor.ml[14,1004+16])
      Tmod_ident "Dune__exe!.BasicSyntax"
  structure_item (src/grammarFunctor.ml[15,1021+0]..src/grammarFunctor.ml[15,1021+11])
    Tstr_open Fresh
    module_expr (src/grammarFunctor.ml[15,1021+5]..src/grammarFunctor.ml[15,1021+11])
      Tmod_ident "Dune__exe!.Syntax"
  structure_item (src/grammarFunctor.ml[16,1033+0]..src/grammarFunctor.ml[16,1033+14])
    Tstr_open Fresh
    module_expr (src/grammarFunctor.ml[16,1033+5]..src/grammarFunctor.ml[16,1033+14])
      Tmod_ident "Dune__exe!.Positions"
  structure_item (src/grammarFunctor.ml[18,1049+0]..src/grammarFunctor.ml[1951,57601+3])
    Tstr_module
    Make/3822
      module_expr (src/grammarFunctor.ml[18,1049+12]..src/grammarFunctor.ml[1951,57601+3])
        Tmod_functor "G/488"
        module_type (src/grammarFunctor.ml[18,1049+17]..src/grammarFunctor.ml[28,1377+3])
          Tmty_signature
          [
            signature_item (src/grammarFunctor.ml[21,1120+2]..src/grammarFunctor.ml[21,1120+34])
              Tsig_value
              value_description grammar/486 (src/grammarFunctor.ml[21,1120+2]..src/grammarFunctor.ml[21,1120+34])
                core_type (src/grammarFunctor.ml[21,1120+15]..src/grammarFunctor.ml[21,1120+34])
                  Ttyp_constr "Dune__exe!.BasicSyntax.grammar"
                  []
                []
            signature_item (src/grammarFunctor.ml[26,1356+2]..src/grammarFunctor.ml[26,1356+19])
              Tsig_value
              value_description verbose/487 (src/grammarFunctor.ml[26,1356+2]..src/grammarFunctor.ml[26,1356+19])
                core_type (src/grammarFunctor.ml[26,1356+15]..src/grammarFunctor.ml[26,1356+19])
                  Ttyp_constr "bool/5!"
                  []
                []
          ]
        module_expr (src/grammarFunctor.ml[28,1377+5]..src/grammarFunctor.ml[1951,57601+3])
          Tmod_functor ()
          module_expr (src/grammarFunctor.ml[28,1377+10]..src/grammarFunctor.ml[1951,57601+3])
            module_expr (src/grammarFunctor.ml[28,1377+10]..src/grammarFunctor.ml[1951,57601+3])
              Tmod_structure
              [
                structure_item (src/grammarFunctor.ml[30,1395+2]..src/grammarFunctor.ml[30,1395+8])
                  Tstr_open Fresh
                  module_expr (src/grammarFunctor.ml[30,1395+7]..src/grammarFunctor.ml[30,1395+8])
                    Tmod_ident "G/488"
                structure_item (src/grammarFunctor.ml[38,1652+0]..src/grammarFunctor.ml[43,1878+14])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[38,1652+4]..src/grammarFunctor.ml[38,1652+9])
                        Tpat_var "index/489"
                      expression (src/grammarFunctor.ml[38,1652+10]..src/grammarFunctor.ml[43,1878+14]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[38,1652+11]..src/grammarFunctor.ml[38,1652+18])
                              extra
                                Tpat_extra_constraint
                                core_type (src/grammarFunctor.ml[38,1652+21]..src/grammarFunctor.ml[38,1652+32])
                                  Ttyp_constr "list/9!"
                                  [
                                    core_type (src/grammarFunctor.ml[38,1652+21]..src/grammarFunctor.ml[38,1652+27])
                                      Ttyp_constr "string/15!"
                                      []
                                  ]
                              Tpat_alias "strings/491"
                              pattern (src/grammarFunctor.ml[38,1652+11]..src/grammarFunctor.ml[38,1652+18])
                                Tpat_any
                            expression (src/grammarFunctor.ml[39,1727+2]..src/grammarFunctor.ml[43,1878+14])
                              extra
                                Texp_constraint
                                core_type (src/grammarFunctor.ml[38,1652+36]..src/grammarFunctor.ml[38,1652+72])
                                  Ttyp_tuple
                                  [
                                    core_type (src/grammarFunctor.ml[38,1652+36]..src/grammarFunctor.ml[38,1652+39])
                                      Ttyp_constr "int/1!"
                                      []
                                    core_type (src/grammarFunctor.ml[38,1652+42]..src/grammarFunctor.ml[38,1652+54])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[38,1652+42]..src/grammarFunctor.ml[38,1652+48])
                                          Ttyp_constr "string/15!"
                                          []
                                      ]
                                    core_type (src/grammarFunctor.ml[38,1652+57]..src/grammarFunctor.ml[38,1652+72])
                                      Ttyp_constr "Dune__exe!.StringMap.t"
                                      [
                                        core_type (src/grammarFunctor.ml[38,1652+57]..src/grammarFunctor.ml[38,1652+60])
                                          Ttyp_constr "int/1!"
                                          []
                                      ]
                                  ]
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[39,1727+6]..src/grammarFunctor.ml[39,1727+10])
                                    Tpat_var "name/540"
                                  expression (src/grammarFunctor.ml[39,1727+13]..src/grammarFunctor.ml[39,1727+34])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[39,1727+13]..src/grammarFunctor.ml[39,1727+26])
                                      Texp_ident "Stdlib!.Array.of_list"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[39,1727+27]..src/grammarFunctor.ml[39,1727+34])
                                          Texp_ident "strings/491"
                                    ]
                                <def>
                                  pattern (src/grammarFunctor.ml[40,1762+6]..src/grammarFunctor.ml[40,1762+12])
                                    Tpat_tuple
                                    [
                                      pattern (src/grammarFunctor.ml[40,1762+6]..src/grammarFunctor.ml[40,1762+7])
                                        Tpat_var "n/541"
                                      pattern (src/grammarFunctor.ml[40,1762+9]..src/grammarFunctor.ml[40,1762+12])
                                        Tpat_var "map/542"
                                    ]
                                  expression (src/grammarFunctor.ml[40,1762+15]..src/grammarFunctor.ml[42,1842+32])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[40,1762+15]..src/grammarFunctor.ml[40,1762+29])
                                      Texp_ident "Stdlib!.List.fold_left"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[40,1762+30]..src/grammarFunctor.ml[42,1842+3])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[40,1762+35]..src/grammarFunctor.ml[40,1762+43])
                                                Tpat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[40,1762+36]..src/grammarFunctor.ml[40,1762+37])
                                                    Tpat_var "n/657"
                                                  pattern (src/grammarFunctor.ml[40,1762+39]..src/grammarFunctor.ml[40,1762+42])
                                                    Tpat_var "map/658"
                                                ]
                                              expression (src/grammarFunctor.ml[40,1762+44]..src/grammarFunctor.ml[41,1811+30]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[40,1762+44]..src/grammarFunctor.ml[40,1762+45])
                                                      Tpat_var "s/659"
                                                    expression (src/grammarFunctor.ml[41,1811+4]..src/grammarFunctor.ml[41,1811+30])
                                                      Texp_tuple
                                                      [
                                                        expression (src/grammarFunctor.ml[41,1811+4]..src/grammarFunctor.ml[41,1811+7])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[41,1811+5]..src/grammarFunctor.ml[41,1811+6])
                                                            Texp_ident "Stdlib!.+"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[41,1811+4]..src/grammarFunctor.ml[41,1811+5])
                                                                Texp_ident "n/657"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[41,1811+6]..src/grammarFunctor.ml[41,1811+7])
                                                                Texp_constant Const_int 1
                                                          ]
                                                        expression (src/grammarFunctor.ml[41,1811+9]..src/grammarFunctor.ml[41,1811+30])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[41,1811+9]..src/grammarFunctor.ml[41,1811+22])
                                                            Texp_ident "Dune__exe!.StringMap.add"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[41,1811+23]..src/grammarFunctor.ml[41,1811+24])
                                                                Texp_ident "s/659"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[41,1811+25]..src/grammarFunctor.ml[41,1811+26])
                                                                Texp_ident "n/657"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[41,1811+27]..src/grammarFunctor.ml[41,1811+30])
                                                                Texp_ident "map/658"
                                                          ]
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[42,1842+4]..src/grammarFunctor.ml[42,1842+24])
                                          Texp_tuple
                                          [
                                            expression (src/grammarFunctor.ml[42,1842+5]..src/grammarFunctor.ml[42,1842+6])
                                              Texp_constant Const_int 0
                                            expression (src/grammarFunctor.ml[42,1842+8]..src/grammarFunctor.ml[42,1842+23])
                                              Texp_ident "Dune__exe!.StringMap.empty"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[42,1842+25]..src/grammarFunctor.ml[42,1842+32])
                                          Texp_ident "strings/491"
                                    ]
                              ]
                              expression (src/grammarFunctor.ml[43,1878+2]..src/grammarFunctor.ml[43,1878+14])
                                Texp_tuple
                                [
                                  expression (src/grammarFunctor.ml[43,1878+2]..src/grammarFunctor.ml[43,1878+3])
                                    Texp_ident "n/541"
                                  expression (src/grammarFunctor.ml[43,1878+5]..src/grammarFunctor.ml[43,1878+9])
                                    Texp_ident "name/540"
                                  expression (src/grammarFunctor.ml[43,1878+11]..src/grammarFunctor.ml[43,1878+14])
                                    Texp_ident "map/542"
                                ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[48,2033+0]..src/grammarFunctor.ml[95,3734+3])
                  Tstr_module
                  TokPrecedence/990
                    module_expr (src/grammarFunctor.ml[48,2033+23]..src/grammarFunctor.ml[95,3734+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[54,2250+2]..src/grammarFunctor.ml[55,2288+23])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[54,2250+6]..src/grammarFunctor.ml[54,2250+17])
                                extra
                                  Tpat_extra_constraint
                                  core_type (src/grammarFunctor.ml[54,2250+20]..src/grammarFunctor.ml[54,2250+35])
                                    Ttyp_constr "Stdlib!.ref"
                                    [
                                      core_type (src/grammarFunctor.ml[54,2250+20]..src/grammarFunctor.ml[54,2250+31])
                                        Ttyp_constr "Dune__exe!.StringSet.t"
                                        []
                                    ]
                                Tpat_alias "ever_useful/755"
                                pattern (src/grammarFunctor.ml[54,2250+6]..src/grammarFunctor.ml[54,2250+17])
                                  Tpat_any
                              expression (src/grammarFunctor.ml[55,2288+4]..src/grammarFunctor.ml[55,2288+23])
                                extra
                                  Texp_constraint
                                  core_type (src/grammarFunctor.ml[54,2250+20]..src/grammarFunctor.ml[54,2250+35])
                                    Ttyp_constr "Stdlib!.ref"
                                    [
                                      core_type (src/grammarFunctor.ml[54,2250+20]..src/grammarFunctor.ml[54,2250+31])
                                        Ttyp_constr "Dune__exe!.StringSet.t"
                                        []
                                    ]
                                Texp_apply
                                expression (src/grammarFunctor.ml[55,2288+4]..src/grammarFunctor.ml[55,2288+7])
                                  Texp_ident "Stdlib!.ref"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[55,2288+8]..src/grammarFunctor.ml[55,2288+23])
                                      Texp_ident "Dune__exe!.StringSet.empty"
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[57,2313+2]..src/grammarFunctor.ml[58,2328+48])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[57,2313+6]..src/grammarFunctor.ml[57,2313+9])
                                Tpat_var "use/756"
                              expression (src/grammarFunctor.ml[57,2313+10]..src/grammarFunctor.ml[58,2328+48]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[57,2313+10]..src/grammarFunctor.ml[57,2313+12])
                                      Tpat_var "id/758"
                                    expression (src/grammarFunctor.ml[58,2328+4]..src/grammarFunctor.ml[58,2328+48])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[58,2328+16]..src/grammarFunctor.ml[58,2328+18])
                                        Texp_ident "Stdlib!.:="
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[58,2328+4]..src/grammarFunctor.ml[58,2328+15])
                                            Texp_ident "ever_useful/755"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[58,2328+19]..src/grammarFunctor.ml[58,2328+48])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[58,2328+19]..src/grammarFunctor.ml[58,2328+32])
                                              Texp_ident "Dune__exe!.StringSet.add"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[58,2328+33]..src/grammarFunctor.ml[58,2328+35])
                                                  Texp_ident "id/758"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[58,2328+36]..src/grammarFunctor.ml[58,2328+48])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[58,2328+36]..src/grammarFunctor.ml[58,2328+37])
                                                    Texp_ident "Stdlib!.!"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[58,2328+37]..src/grammarFunctor.ml[58,2328+48])
                                                        Texp_ident "ever_useful/755"
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[68,2817+2]..src/grammarFunctor.ml[69,2847+43])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[68,2817+6]..src/grammarFunctor.ml[68,2817+13])
                                Tpat_var "levelip/805"
                              expression (src/grammarFunctor.ml[68,2817+14]..src/grammarFunctor.ml[69,2847+43]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[68,2817+14]..src/grammarFunctor.ml[68,2817+16])
                                      Tpat_var "id/807"
                                    expression (src/grammarFunctor.ml[68,2817+17]..src/grammarFunctor.ml[69,2847+43]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[68,2817+17]..src/grammarFunctor.ml[68,2817+27])
                                            Tpat_var "properties/808"
                                          expression (src/grammarFunctor.ml[69,2847+4]..src/grammarFunctor.ml[69,2847+43])
                                            Texp_tuple
                                            [
                                              expression (src/grammarFunctor.ml[69,2847+4]..src/grammarFunctor.ml[69,2847+17])
                                                Texp_lazy                                                expression (src/grammarFunctor.ml[69,2847+9]..src/grammarFunctor.ml[69,2847+17])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[69,2847+10]..src/grammarFunctor.ml[69,2847+13])
                                                    Texp_ident "use/756"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[69,2847+14]..src/grammarFunctor.ml[69,2847+16])
                                                        Texp_ident "id/807"
                                                  ]
                                              expression (src/grammarFunctor.ml[69,2847+19]..src/grammarFunctor.ml[69,2847+43])
                                                Texp_field
                                                expression (src/grammarFunctor.ml[69,2847+19]..src/grammarFunctor.ml[69,2847+29])
                                                  Texp_ident "properties/808"
                                                "tk_precedence"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[71,2892+2]..src/grammarFunctor.ml[78,3089+25])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[71,2892+6]..src/grammarFunctor.ml[71,2892+12])
                                Tpat_var "leveli/809"
                              expression (src/grammarFunctor.ml[71,2892+13]..src/grammarFunctor.ml[78,3089+25]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[71,2892+13]..src/grammarFunctor.ml[71,2892+15])
                                      Tpat_var "id/811"
                                    expression (src/grammarFunctor.ml[72,2910+4]..src/grammarFunctor.ml[78,3089+25])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/grammarFunctor.ml[72,2910+8]..src/grammarFunctor.ml[72,2910+18])
                                            Tpat_var "properties/812"
                                          expression (src/grammarFunctor.ml[73,2931+6]..src/grammarFunctor.ml[76,3006+20])
                                            Texp_try
                                            expression (src/grammarFunctor.ml[74,2941+8]..src/grammarFunctor.ml[74,2941+40])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[74,2941+8]..src/grammarFunctor.ml[74,2941+22])
                                                Texp_ident "Dune__exe!.StringMap.find"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[74,2941+23]..src/grammarFunctor.ml[74,2941+25])
                                                    Texp_ident "id/811"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[74,2941+26]..src/grammarFunctor.ml[74,2941+40])
                                                    Texp_field
                                                    expression (src/grammarFunctor.ml[74,2941+26]..src/grammarFunctor.ml[74,2941+33])
                                                      Texp_ident "G/488.grammar"
                                                    "tokens"
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[75,2982+11]..src/grammarFunctor.ml[75,2982+20])
                                                  Tpat_construct "Not_found"
                                                  []
                                                  None
                                                expression (src/grammarFunctor.ml[76,3006+8]..src/grammarFunctor.ml[76,3006+20])
                                                  Texp_assert                                                  expression (src/grammarFunctor.ml[76,3006+15]..src/grammarFunctor.ml[76,3006+20])
                                                    Texp_construct "false"
                                                    []
                                            ]
                                      ]
                                      expression (src/grammarFunctor.ml[78,3089+4]..src/grammarFunctor.ml[78,3089+25])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[78,3089+4]..src/grammarFunctor.ml[78,3089+11])
                                          Texp_ident "levelip/805"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[78,3089+12]..src/grammarFunctor.ml[78,3089+14])
                                              Texp_ident "id/811"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[78,3089+15]..src/grammarFunctor.ml[78,3089+25])
                                              Texp_ident "properties/812"
                                        ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[84,3320+2]..src/grammarFunctor.ml[93,3712+20])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[84,3320+6]..src/grammarFunctor.ml[84,3320+17])
                                Tpat_var "diagnostics/868"
                              expression (src/grammarFunctor.ml[84,3320+18]..src/grammarFunctor.ml[93,3712+20]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[84,3320+18]..src/grammarFunctor.ml[84,3320+20])
                                      Tpat_construct "()"
                                      []
                                      None
                                    expression (src/grammarFunctor.ml[85,3343+4]..src/grammarFunctor.ml[93,3712+20])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[85,3343+4]..src/grammarFunctor.ml[85,3343+18])
                                        Texp_ident "Dune__exe!.StringMap.iter"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[85,3343+19]..src/grammarFunctor.ml[93,3712+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[85,3343+24]..src/grammarFunctor.ml[85,3343+26])
                                                  Tpat_var "id/870"
                                                expression (src/grammarFunctor.ml[85,3343+27]..src/grammarFunctor.ml[92,3640+71]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[85,3343+27]..src/grammarFunctor.ml[85,3343+37])
                                                        Tpat_var "properties/871"
                                                      expression (src/grammarFunctor.ml[86,3384+6]..src/grammarFunctor.ml[92,3640+71])
                                                        Texp_ifthenelse
                                                        expression (src/grammarFunctor.ml[86,3384+9]..src/grammarFunctor.ml[86,3384+44])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[86,3384+9]..src/grammarFunctor.ml[86,3384+12])
                                                            Texp_ident "Stdlib!.not"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[86,3384+13]..src/grammarFunctor.ml[86,3384+44])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[86,3384+14]..src/grammarFunctor.ml[86,3384+27])
                                                                  Texp_ident "Dune__exe!.StringSet.mem"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[86,3384+28]..src/grammarFunctor.ml[86,3384+30])
                                                                      Texp_ident "id/870"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[86,3384+31]..src/grammarFunctor.ml[86,3384+43])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[86,3384+31]..src/grammarFunctor.ml[86,3384+32])
                                                                        Texp_ident "Stdlib!.!"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[86,3384+32]..src/grammarFunctor.ml[86,3384+43])
                                                                            Texp_ident "ever_useful/755"
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[87,3434+8]..src/grammarFunctor.ml[92,3640+71])
                                                          Texp_match
                                                          expression (src/grammarFunctor.ml[87,3434+14]..src/grammarFunctor.ml[87,3434+38])
                                                            Texp_field
                                                            expression (src/grammarFunctor.ml[87,3434+14]..src/grammarFunctor.ml[87,3434+24])
                                                              Texp_ident "properties/871"
                                                            "tk_precedence"
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[88,3478+10]..src/grammarFunctor.ml[88,3478+29])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[88,3478+10]..src/grammarFunctor.ml[88,3478+29])
                                                                  Tpat_construct "UndefinedPrecedence"
                                                                  []
                                                                  None
                                                              expression (src/grammarFunctor.ml[89,3511+12]..src/grammarFunctor.ml[89,3511+14])
                                                                Texp_construct "()"
                                                                []
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[90,3526+10]..src/grammarFunctor.ml[90,3526+44])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[90,3526+10]..src/grammarFunctor.ml[90,3526+44])
                                                                  Tpat_construct "PrecedenceLevel"
                                                                  [
                                                                    pattern (src/grammarFunctor.ml[90,3526+27]..src/grammarFunctor.ml[90,3526+28])
                                                                      Tpat_any
                                                                    pattern (src/grammarFunctor.ml[90,3526+30]..src/grammarFunctor.ml[90,3526+31])
                                                                      Tpat_any
                                                                    pattern (src/grammarFunctor.ml[90,3526+33]..src/grammarFunctor.ml[90,3526+37])
                                                                      Tpat_var "pos1/872"
                                                                    pattern (src/grammarFunctor.ml[90,3526+39]..src/grammarFunctor.ml[90,3526+43])
                                                                      Tpat_var "pos2/873"
                                                                  ]
                                                                  None
                                                              expression (src/grammarFunctor.ml[91,3574+12]..src/grammarFunctor.ml[92,3640+71])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[91,3574+12]..src/grammarFunctor.ml[91,3574+33])
                                                                  Texp_ident "Dune__exe!.Error.grammar_warning"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[91,3574+34]..src/grammarFunctor.ml[91,3574+65])
                                                                      Texp_construct "::"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[91,3574+35]..src/grammarFunctor.ml[91,3574+64])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[91,3574+35]..src/grammarFunctor.ml[91,3574+51])
                                                                            Texp_ident "Dune__exe!.Positions.import"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[91,3574+52]..src/grammarFunctor.ml[91,3574+64])
                                                                                Texp_tuple
                                                                                [
                                                                                  expression (src/grammarFunctor.ml[91,3574+53]..src/grammarFunctor.ml[91,3574+57])
                                                                                    Texp_ident "pos1/872"
                                                                                  expression (src/grammarFunctor.ml[91,3574+59]..src/grammarFunctor.ml[91,3574+63])
                                                                                    Texp_ident "pos2/873"
                                                                                ]
                                                                          ]
                                                                        expression (src/grammarFunctor.ml[91,3574+64]..src/grammarFunctor.ml[91,3574+65]) ghost
                                                                          Texp_construct "[]"
                                                                          []
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68])
                                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                          [
                                                                            expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                              Texp_constant Const_string("the precedence level assigned to ",(src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost,None)
                                                                            expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                  []
                                                                                expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                  [
                                                                                    expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                                      Texp_constant Const_string(" is never useful.",(src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost,None)
                                                                                    expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                      []
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                        expression (src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost
                                                                          Texp_constant Const_string("the precedence level assigned to %s is never useful.",(src/grammarFunctor.ml[92,3640+14]..src/grammarFunctor.ml[92,3640+68]) ghost,None)
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[92,3640+69]..src/grammarFunctor.ml[92,3640+71])
                                                                      Texp_ident "id/870"
                                                                ]
                                                          ]
                                                        None
                                                  ]
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[93,3712+6]..src/grammarFunctor.ml[93,3712+20])
                                            Texp_field
                                            expression (src/grammarFunctor.ml[93,3712+6]..src/grammarFunctor.ml[93,3712+13])
                                              Texp_ident "G/488.grammar"
                                            "tokens"
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[100,3839+0]..src/grammarFunctor.ml[203,5983+3])
                  Tstr_module
                  Nonterminal/1110
                    module_expr (src/grammarFunctor.ml[100,3839+21]..src/grammarFunctor.ml[203,5983+3])
                      module_expr (src/grammarFunctor.ml[100,3839+21]..src/grammarFunctor.ml[203,5983+3])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[102,3868+2]..src/grammarFunctor.ml[102,3868+14])
                            Tstr_type Rec
                            [
                              type_declaration t/991 (src/grammarFunctor.ml[102,3868+2]..src/grammarFunctor.ml[102,3868+14])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ttype_abstract
                                ptype_private = Public
                                ptype_manifest =
                                  Some
                                    core_type (src/grammarFunctor.ml[102,3868+11]..src/grammarFunctor.ml[102,3868+14])
                                      Ttyp_constr "int/1!"
                                      []
                            ]
                          structure_item (src/grammarFunctor.ml[104,3884+2]..src/grammarFunctor.ml[104,3884+15])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[104,3884+6]..src/grammarFunctor.ml[104,3884+9])
                                  Tpat_var "n2i/992"
                                expression (src/grammarFunctor.ml[104,3884+10]..src/grammarFunctor.ml[104,3884+15]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[104,3884+10]..src/grammarFunctor.ml[104,3884+11])
                                        Tpat_var "i/994"
                                      expression (src/grammarFunctor.ml[104,3884+14]..src/grammarFunctor.ml[104,3884+15])
                                        Texp_ident "i/994"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[106,3901+2]..src/grammarFunctor.ml[107,3935+13])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[106,3901+6]..src/grammarFunctor.ml[106,3901+11])
                                  Tpat_var "equal/995"
                                expression (src/grammarFunctor.ml[106,3901+12]..src/grammarFunctor.ml[107,3935+13]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[106,3901+13]..src/grammarFunctor.ml[106,3901+16])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/grammarFunctor.ml[106,3901+19]..src/grammarFunctor.ml[106,3901+20])
                                            Ttyp_constr "t/991"
                                            []
                                        Tpat_alias "nt1/997"
                                        pattern (src/grammarFunctor.ml[106,3901+13]..src/grammarFunctor.ml[106,3901+16])
                                          Tpat_any
                                      expression (src/grammarFunctor.ml[106,3901+22]..src/grammarFunctor.ml[107,3935+13]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[106,3901+23]..src/grammarFunctor.ml[106,3901+26])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (src/grammarFunctor.ml[106,3901+29]..src/grammarFunctor.ml[106,3901+30])
                                                  Ttyp_constr "t/991"
                                                  []
                                              Tpat_alias "nt2/998"
                                              pattern (src/grammarFunctor.ml[106,3901+23]..src/grammarFunctor.ml[106,3901+26])
                                                Tpat_any
                                            expression (src/grammarFunctor.ml[107,3935+4]..src/grammarFunctor.ml[107,3935+13])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[107,3935+8]..src/grammarFunctor.ml[107,3935+9])
                                                Texp_ident "Stdlib!.="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[107,3935+4]..src/grammarFunctor.ml[107,3935+7])
                                                    Texp_ident "nt1/997"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[107,3935+10]..src/grammarFunctor.ml[107,3935+13])
                                                    Texp_ident "nt2/998"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[109,3950+2]..src/grammarFunctor.ml[109,3950+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[109,3950+6]..src/grammarFunctor.ml[109,3950+13])
                                  Tpat_var "compare/999"
                                expression (src/grammarFunctor.ml[109,3950+16]..src/grammarFunctor.ml[109,3950+19])
                                  Texp_ident "Stdlib!.-"
                            ]
                          structure_item (src/grammarFunctor.ml[115,4139+2]..src/grammarFunctor.ml[116,4170+83])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[115,4139+6]..src/grammarFunctor.ml[115,4139+28])
                                  Tpat_var "new_start_nonterminals/1000"
                                expression (src/grammarFunctor.ml[116,4170+4]..src/grammarFunctor.ml[116,4170+83])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[116,4170+4]..src/grammarFunctor.ml[116,4170+18])
                                    Texp_ident "Dune__exe!.StringSet.fold"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[116,4170+19]..src/grammarFunctor.ml[116,4170+58])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[116,4170+24]..src/grammarFunctor.ml[116,4170+30])
                                              Tpat_var "symbol/1001"
                                            expression (src/grammarFunctor.ml[116,4170+31]..src/grammarFunctor.ml[116,4170+57]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[116,4170+31]..src/grammarFunctor.ml[116,4170+33])
                                                    Tpat_var "ss/1002"
                                                  expression (src/grammarFunctor.ml[116,4170+37]..src/grammarFunctor.ml[116,4170+57])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/grammarFunctor.ml[116,4170+37]..src/grammarFunctor.ml[116,4170+51])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[116,4170+45]..src/grammarFunctor.ml[116,4170+46])
                                                          Texp_ident "Stdlib!.^"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[116,4170+38]..src/grammarFunctor.ml[116,4170+44])
                                                              Texp_ident "symbol/1001"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[116,4170+47]..src/grammarFunctor.ml[116,4170+50])
                                                              Texp_constant Const_string("'",(src/grammarFunctor.ml[116,4170+48]..src/grammarFunctor.ml[116,4170+49]),None)
                                                        ]
                                                      expression (src/grammarFunctor.ml[116,4170+55]..src/grammarFunctor.ml[116,4170+57])
                                                        Texp_ident "ss/1002"
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[116,4170+59]..src/grammarFunctor.ml[116,4170+80])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[116,4170+59]..src/grammarFunctor.ml[116,4170+66])
                                          Texp_ident "G/488.grammar"
                                        "start_symbols"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[116,4170+81]..src/grammarFunctor.ml[116,4170+83])
                                        Texp_construct "[]"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[118,4255+2]..src/grammarFunctor.ml[119,4285+24])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[118,4255+6]..src/grammarFunctor.ml[118,4255+27])
                                  Tpat_var "original_nonterminals/1003"
                                expression (src/grammarFunctor.ml[119,4285+4]..src/grammarFunctor.ml[119,4285+24])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[119,4285+4]..src/grammarFunctor.ml[119,4285+16])
                                    Texp_ident "Dune__exe!.BasicSyntax.nonterminals"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[119,4285+17]..src/grammarFunctor.ml[119,4285+24])
                                        Texp_ident "G/488.grammar"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[121,4311+2]..src/grammarFunctor.ml[122,4325+38])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[121,4311+6]..src/grammarFunctor.ml[121,4311+11])
                                  Tpat_var "start/1004"
                                expression (src/grammarFunctor.ml[122,4325+4]..src/grammarFunctor.ml[122,4325+38])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[122,4325+4]..src/grammarFunctor.ml[122,4325+15])
                                    Texp_ident "Stdlib!.List.length"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[122,4325+16]..src/grammarFunctor.ml[122,4325+38])
                                        Texp_ident "new_start_nonterminals/1000"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[124,4365+2]..src/grammarFunctor.ml[125,4431+58])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[124,4365+6]..src/grammarFunctor.ml[124,4365+63])
                                  Tpat_tuple
                                  [
                                    pattern (src/grammarFunctor.ml[124,4365+7]..src/grammarFunctor.ml[124,4365+8])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[124,4365+11]..src/grammarFunctor.ml[124,4365+14])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "n/1005"
                                      pattern (src/grammarFunctor.ml[124,4365+7]..src/grammarFunctor.ml[124,4365+8])
                                        Tpat_any
                                    pattern (src/grammarFunctor.ml[124,4365+18]..src/grammarFunctor.ml[124,4365+22])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[124,4365+25]..src/grammarFunctor.ml[124,4365+37])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[124,4365+25]..src/grammarFunctor.ml[124,4365+31])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Tpat_alias "name/1006"
                                      pattern (src/grammarFunctor.ml[124,4365+18]..src/grammarFunctor.ml[124,4365+22])
                                        Tpat_any
                                    pattern (src/grammarFunctor.ml[124,4365+41]..src/grammarFunctor.ml[124,4365+44])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[124,4365+47]..src/grammarFunctor.ml[124,4365+62])
                                          Ttyp_constr "Dune__exe!.StringMap.t"
                                          [
                                            core_type (src/grammarFunctor.ml[124,4365+47]..src/grammarFunctor.ml[124,4365+50])
                                              Ttyp_constr "int/1!"
                                              []
                                          ]
                                      Tpat_alias "map/1007"
                                      pattern (src/grammarFunctor.ml[124,4365+41]..src/grammarFunctor.ml[124,4365+44])
                                        Tpat_any
                                  ]
                                expression (src/grammarFunctor.ml[125,4431+4]..src/grammarFunctor.ml[125,4431+58])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[125,4431+4]..src/grammarFunctor.ml[125,4431+9])
                                    Texp_ident "index/489"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[125,4431+10]..src/grammarFunctor.ml[125,4431+58])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[125,4431+34]..src/grammarFunctor.ml[125,4431+35])
                                          Texp_ident "Stdlib!.@"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[125,4431+11]..src/grammarFunctor.ml[125,4431+33])
                                              Texp_ident "new_start_nonterminals/1000"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[125,4431+36]..src/grammarFunctor.ml[125,4431+57])
                                              Texp_ident "original_nonterminals/1003"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[127,4491+2]..src/grammarFunctor.ml[133,4684+7])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[127,4491+6]..src/grammarFunctor.ml[127,4491+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[128,4502+4]..src/grammarFunctor.ml[133,4684+7])
                                  Texp_ifthenelse
                                  expression (src/grammarFunctor.ml[128,4502+7]..src/grammarFunctor.ml[128,4502+14])
                                    Texp_ident "G/488.verbose"
                                  expression (src/grammarFunctor.ml[129,4522+6]..src/grammarFunctor.ml[133,4684+7])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[129,4522+6]..src/grammarFunctor.ml[129,4522+16])
                                      Texp_ident "Dune__exe!.Error.logG"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[129,4522+17]..src/grammarFunctor.ml[129,4522+18])
                                          Texp_constant Const_int 1
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[129,4522+19]..src/grammarFunctor.ml[133,4684+7])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[129,4522+24]..src/grammarFunctor.ml[129,4522+25])
                                                Tpat_var "f/1008"
                                              expression (src/grammarFunctor.ml[130,4551+8]..src/grammarFunctor.ml[132,4656+27])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[130,4551+8]..src/grammarFunctor.ml[130,4551+22])
                                                  Texp_ident "Stdlib!.Printf.fprintf"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[130,4551+23]..src/grammarFunctor.ml[130,4551+24])
                                                      Texp_ident "f/1008"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79])
                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                      [
                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                              Texp_constant Const_string("Grammar has ",(src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost,None)
                                                            expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.Int"
                                                              [
                                                                expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                  []
                                                                expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                  []
                                                                expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                  []
                                                                expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                      Texp_constant Const_string(" nonterminal symbols, among which ",(src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost,None)
                                                                    expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Int"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                          []
                                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                          []
                                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                          []
                                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                          [
                                                                            expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                              Texp_constant Const_string(" start symbols.\n",(src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost,None)
                                                                            expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                              []
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost
                                                          Texp_constant Const_string("Grammar has %d nonterminal symbols, among which %d start symbols.\n",(src/grammarFunctor.ml[131,4576+10]..src/grammarFunctor.ml[131,4576+79]) ghost,None)
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[132,4656+10]..src/grammarFunctor.ml[132,4656+21])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[132,4656+13]..src/grammarFunctor.ml[132,4656+14])
                                                        Texp_ident "Stdlib!.-"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[132,4656+11]..src/grammarFunctor.ml[132,4656+12])
                                                            Texp_ident "n/1005"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[132,4656+15]..src/grammarFunctor.ml[132,4656+20])
                                                            Texp_ident "start/1004"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[132,4656+22]..src/grammarFunctor.ml[132,4656+27])
                                                      Texp_ident "start/1004"
                                                ]
                                          ]
                                    ]
                                  None
                            ]
                          structure_item (src/grammarFunctor.ml[135,4693+2]..src/grammarFunctor.ml[136,4722+14])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[135,4693+6]..src/grammarFunctor.ml[135,4693+23])
                                  Tpat_var "is_internal_start/1022"
                                expression (src/grammarFunctor.ml[135,4693+24]..src/grammarFunctor.ml[136,4722+14]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[135,4693+24]..src/grammarFunctor.ml[135,4693+26])
                                        Tpat_var "nt/1024"
                                      expression (src/grammarFunctor.ml[136,4722+4]..src/grammarFunctor.ml[136,4722+14])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[136,4722+7]..src/grammarFunctor.ml[136,4722+8])
                                          Texp_ident "Stdlib!.<"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[136,4722+4]..src/grammarFunctor.ml[136,4722+6])
                                              Texp_ident "nt/1024"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[136,4722+9]..src/grammarFunctor.ml[136,4722+14])
                                              Texp_ident "start/1004"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[138,4738+2]..src/grammarFunctor.ml[139,4763+49])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[138,4738+6]..src/grammarFunctor.ml[138,4738+19])
                                  Tpat_var "is_user_start/1025"
                                expression (src/grammarFunctor.ml[138,4738+20]..src/grammarFunctor.ml[139,4763+49]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[138,4738+20]..src/grammarFunctor.ml[138,4738+22])
                                        Tpat_var "nt/1027"
                                      expression (src/grammarFunctor.ml[139,4763+4]..src/grammarFunctor.ml[139,4763+49])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[139,4763+4]..src/grammarFunctor.ml[139,4763+17])
                                          Texp_ident "Dune__exe!.StringSet.mem"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[139,4763+18]..src/grammarFunctor.ml[139,4763+27])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[139,4763+18]..src/grammarFunctor.ml[139,4763+27]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[139,4763+18]..src/grammarFunctor.ml[139,4763+22])
                                                    Texp_ident "name/1006"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[139,4763+24]..src/grammarFunctor.ml[139,4763+26])
                                                    Texp_ident "nt/1027"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[139,4763+28]..src/grammarFunctor.ml[139,4763+49])
                                              Texp_field
                                              expression (src/grammarFunctor.ml[139,4763+28]..src/grammarFunctor.ml[139,4763+35])
                                                Texp_ident "G/488.grammar"
                                              "start_symbols"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[141,4814+2]..src/grammarFunctor.ml[145,4903+15])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[141,4814+6]..src/grammarFunctor.ml[141,4814+11])
                                  Tpat_var "print/1028"
                                expression (src/grammarFunctor.ml[141,4814+12]..src/grammarFunctor.ml[145,4903+15]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[141,4814+12]..src/grammarFunctor.ml[141,4814+21])
                                        Tpat_var "normalize/1029"
                                      expression (src/grammarFunctor.ml[141,4814+22]..src/grammarFunctor.ml[145,4903+15]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[141,4814+22]..src/grammarFunctor.ml[141,4814+24])
                                              Tpat_var "nt/1030"
                                            expression (src/grammarFunctor.ml[142,4841+4]..src/grammarFunctor.ml[145,4903+15])
                                              Texp_ifthenelse
                                              expression (src/grammarFunctor.ml[142,4841+7]..src/grammarFunctor.ml[142,4841+16])
                                                Texp_ident "normalize/1029"
                                              expression (src/grammarFunctor.ml[143,4863+6]..src/grammarFunctor.ml[143,4863+30])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[143,4863+6]..src/grammarFunctor.ml[143,4863+20])
                                                  Texp_ident "Dune__exe!.Misc.normalize"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[143,4863+21]..src/grammarFunctor.ml[143,4863+30])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[143,4863+21]..src/grammarFunctor.ml[143,4863+30]) ghost
                                                        Texp_ident "Stdlib!.Array.get"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[143,4863+21]..src/grammarFunctor.ml[143,4863+25])
                                                            Texp_ident "name/1006"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[143,4863+27]..src/grammarFunctor.ml[143,4863+29])
                                                            Texp_ident "nt/1030"
                                                      ]
                                                ]
                                              Some
                                                expression (src/grammarFunctor.ml[145,4903+6]..src/grammarFunctor.ml[145,4903+15])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[145,4903+6]..src/grammarFunctor.ml[145,4903+15]) ghost
                                                    Texp_ident "Stdlib!.Array.get"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[145,4903+6]..src/grammarFunctor.ml[145,4903+10])
                                                        Texp_ident "name/1006"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[145,4903+12]..src/grammarFunctor.ml[145,4903+14])
                                                        Texp_ident "nt/1030"
                                                  ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[147,4920+2]..src/grammarFunctor.ml[148,4940+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[147,4920+6]..src/grammarFunctor.ml[147,4920+12])
                                  Tpat_var "lookup/1067"
                                expression (src/grammarFunctor.ml[147,4920+13]..src/grammarFunctor.ml[148,4940+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[147,4920+13]..src/grammarFunctor.ml[147,4920+17])
                                        Tpat_var "name/1069"
                                      expression (src/grammarFunctor.ml[148,4940+4]..src/grammarFunctor.ml[148,4940+27])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[148,4940+4]..src/grammarFunctor.ml[148,4940+18])
                                          Texp_ident "Dune__exe!.StringMap.find"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[148,4940+19]..src/grammarFunctor.ml[148,4940+23])
                                              Texp_ident "name/1069"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[148,4940+24]..src/grammarFunctor.ml[148,4940+27])
                                              Texp_ident "map/1007"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[150,4969+2]..src/grammarFunctor.ml[151,4990+61])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[150,4969+6]..src/grammarFunctor.ml[150,4969+15])
                                  Tpat_var "positions/1070"
                                expression (src/grammarFunctor.ml[150,4969+16]..src/grammarFunctor.ml[151,4990+61]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[150,4969+16]..src/grammarFunctor.ml[150,4969+18])
                                        Tpat_var "nt/1072"
                                      expression (src/grammarFunctor.ml[151,4990+4]..src/grammarFunctor.ml[151,4990+61])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[151,4990+4]..src/grammarFunctor.ml[151,4990+51])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[151,4990+5]..src/grammarFunctor.ml[151,4990+19])
                                            Texp_ident "Dune__exe!.StringMap.find"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[151,4990+20]..src/grammarFunctor.ml[151,4990+36])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[151,4990+21]..src/grammarFunctor.ml[151,4990+26])
                                                  Texp_ident "print/1028"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[151,4990+27]..src/grammarFunctor.ml[151,4990+32])
                                                      Texp_construct "false"
                                                      []
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[151,4990+33]..src/grammarFunctor.ml[151,4990+35])
                                                      Texp_ident "nt/1072"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[151,4990+37]..src/grammarFunctor.ml[151,4990+50])
                                                Texp_field
                                                expression (src/grammarFunctor.ml[151,4990+37]..src/grammarFunctor.ml[151,4990+44])
                                                  Texp_ident "G/488.grammar"
                                                "rules"
                                          ]
                                        "positions"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[153,5053+2]..src/grammarFunctor.ml[154,5068+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[153,5053+6]..src/grammarFunctor.ml[153,5053+10])
                                  Tpat_var "init/1073"
                                expression (src/grammarFunctor.ml[153,5053+11]..src/grammarFunctor.ml[154,5068+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[153,5053+11]..src/grammarFunctor.ml[153,5053+12])
                                        Tpat_var "f/1075"
                                      expression (src/grammarFunctor.ml[154,5068+4]..src/grammarFunctor.ml[154,5068+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[154,5068+4]..src/grammarFunctor.ml[154,5068+14])
                                          Texp_ident "Stdlib!.Array.init"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[154,5068+15]..src/grammarFunctor.ml[154,5068+16])
                                              Texp_ident "n/1005"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[154,5068+17]..src/grammarFunctor.ml[154,5068+18])
                                              Texp_ident "f/1075"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[156,5088+2]..src/grammarFunctor.ml[157,5103+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[156,5088+6]..src/grammarFunctor.ml[156,5088+10])
                                  Tpat_var "iter/1076"
                                expression (src/grammarFunctor.ml[156,5088+11]..src/grammarFunctor.ml[157,5103+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[156,5088+11]..src/grammarFunctor.ml[156,5088+12])
                                        Tpat_var "f/1077"
                                      expression (src/grammarFunctor.ml[157,5103+4]..src/grammarFunctor.ml[157,5103+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[157,5103+4]..src/grammarFunctor.ml[157,5103+14])
                                          Texp_ident "Dune__exe!.Misc.iteri"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[157,5103+15]..src/grammarFunctor.ml[157,5103+16])
                                              Texp_ident "n/1005"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[157,5103+17]..src/grammarFunctor.ml[157,5103+18])
                                              Texp_ident "f/1077"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[159,5123+2]..src/grammarFunctor.ml[160,5143+23])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[159,5123+6]..src/grammarFunctor.ml[159,5123+10])
                                  Tpat_var "fold/1078"
                                expression (src/grammarFunctor.ml[159,5123+11]..src/grammarFunctor.ml[160,5143+23]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[159,5123+11]..src/grammarFunctor.ml[159,5123+12])
                                        Tpat_var "f/1080"
                                      expression (src/grammarFunctor.ml[159,5123+13]..src/grammarFunctor.ml[160,5143+23]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[159,5123+13]..src/grammarFunctor.ml[159,5123+17])
                                              Tpat_var "accu/1081"
                                            expression (src/grammarFunctor.ml[160,5143+4]..src/grammarFunctor.ml[160,5143+23])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[160,5143+4]..src/grammarFunctor.ml[160,5143+14])
                                                Texp_ident "Dune__exe!.Misc.foldi"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[160,5143+15]..src/grammarFunctor.ml[160,5143+16])
                                                    Texp_ident "n/1005"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[160,5143+17]..src/grammarFunctor.ml[160,5143+18])
                                                    Texp_ident "f/1080"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[160,5143+19]..src/grammarFunctor.ml[160,5143+23])
                                                    Texp_ident "accu/1081"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[162,5168+2]..src/grammarFunctor.ml[163,5182+17])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[162,5168+6]..src/grammarFunctor.ml[162,5168+9])
                                  Tpat_var "map/1082"
                                expression (src/grammarFunctor.ml[162,5168+10]..src/grammarFunctor.ml[163,5182+17]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[162,5168+10]..src/grammarFunctor.ml[162,5168+11])
                                        Tpat_var "f/1083"
                                      expression (src/grammarFunctor.ml[163,5182+4]..src/grammarFunctor.ml[163,5182+17])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[163,5182+4]..src/grammarFunctor.ml[163,5182+13])
                                          Texp_ident "Dune__exe!.Misc.mapi"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[163,5182+14]..src/grammarFunctor.ml[163,5182+15])
                                              Texp_ident "n/1005"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[163,5182+16]..src/grammarFunctor.ml[163,5182+17])
                                              Texp_ident "f/1083"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[165,5201+2]..src/grammarFunctor.ml[168,5259+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[165,5201+6]..src/grammarFunctor.ml[165,5201+11])
                                  Tpat_var "iterx/1084"
                                expression (src/grammarFunctor.ml[165,5201+12]..src/grammarFunctor.ml[168,5259+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[165,5201+12]..src/grammarFunctor.ml[165,5201+13])
                                        Tpat_var "f/1086"
                                      expression (src/grammarFunctor.ml[166,5217+4]..src/grammarFunctor.ml[168,5259+8])
                                        Texp_for "nt/1087" Up
                                        expression (src/grammarFunctor.ml[166,5217+13]..src/grammarFunctor.ml[166,5217+18])
                                          Texp_ident "start/1004"
                                        expression (src/grammarFunctor.ml[166,5217+22]..src/grammarFunctor.ml[166,5217+27])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[166,5217+24]..src/grammarFunctor.ml[166,5217+25])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[166,5217+22]..src/grammarFunctor.ml[166,5217+23])
                                                Texp_ident "n/1005"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[166,5217+26]..src/grammarFunctor.ml[166,5217+27])
                                                Texp_constant Const_int 1
                                          ]
                                        expression (src/grammarFunctor.ml[167,5248+6]..src/grammarFunctor.ml[167,5248+10])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[167,5248+6]..src/grammarFunctor.ml[167,5248+7])
                                            Texp_ident "f/1086"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[167,5248+8]..src/grammarFunctor.ml[167,5248+10])
                                                Texp_ident "nt/1087"
                                          ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[170,5269+2]..src/grammarFunctor.ml[171,5290+30])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[170,5269+6]..src/grammarFunctor.ml[170,5269+11])
                                  Tpat_var "foldx/1088"
                                expression (src/grammarFunctor.ml[170,5269+12]..src/grammarFunctor.ml[171,5290+30]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[170,5269+12]..src/grammarFunctor.ml[170,5269+13])
                                        Tpat_var "f/1090"
                                      expression (src/grammarFunctor.ml[170,5269+14]..src/grammarFunctor.ml[171,5290+30]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[170,5269+14]..src/grammarFunctor.ml[170,5269+18])
                                              Tpat_var "accu/1091"
                                            expression (src/grammarFunctor.ml[171,5290+4]..src/grammarFunctor.ml[171,5290+30])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[171,5290+4]..src/grammarFunctor.ml[171,5290+15])
                                                Texp_ident "Dune__exe!.Misc.foldij"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[171,5290+16]..src/grammarFunctor.ml[171,5290+21])
                                                    Texp_ident "start/1004"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[171,5290+22]..src/grammarFunctor.ml[171,5290+23])
                                                    Texp_ident "n/1005"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[171,5290+24]..src/grammarFunctor.ml[171,5290+25])
                                                    Texp_ident "f/1090"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[171,5290+26]..src/grammarFunctor.ml[171,5290+30])
                                                    Texp_ident "accu/1091"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[173,5322+2]..src/grammarFunctor.ml[178,5473+10])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[173,5322+6]..src/grammarFunctor.ml[173,5322+15])
                                  Tpat_var "ocamltype/1092"
                                expression (src/grammarFunctor.ml[173,5322+16]..src/grammarFunctor.ml[178,5473+10]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[173,5322+16]..src/grammarFunctor.ml[173,5322+18])
                                        Tpat_var "nt/1094"
                                      expression (src/grammarFunctor.ml[174,5343+4]..src/grammarFunctor.ml[178,5473+10])
                                        Texp_sequence
                                        expression (src/grammarFunctor.ml[174,5343+4]..src/grammarFunctor.ml[174,5343+39])
                                          Texp_assert                                          expression (src/grammarFunctor.ml[174,5343+11]..src/grammarFunctor.ml[174,5343+39])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[174,5343+12]..src/grammarFunctor.ml[174,5343+15])
                                              Texp_ident "Stdlib!.not"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[174,5343+16]..src/grammarFunctor.ml[174,5343+38])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[174,5343+17]..src/grammarFunctor.ml[174,5343+34])
                                                    Texp_ident "is_internal_start/1022"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[174,5343+35]..src/grammarFunctor.ml[174,5343+37])
                                                        Texp_ident "nt/1094"
                                                  ]
                                            ]
                                        expression (src/grammarFunctor.ml[175,5384+4]..src/grammarFunctor.ml[178,5473+10])
                                          Texp_try
                                          expression (src/grammarFunctor.ml[176,5392+6]..src/grammarFunctor.ml[176,5392+58])
                                            Texp_construct "Some"
                                            [
                                              expression (src/grammarFunctor.ml[176,5392+11]..src/grammarFunctor.ml[176,5392+58])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[176,5392+12]..src/grammarFunctor.ml[176,5392+26])
                                                  Texp_ident "Dune__exe!.StringMap.find"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[176,5392+27]..src/grammarFunctor.ml[176,5392+43])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[176,5392+28]..src/grammarFunctor.ml[176,5392+33])
                                                        Texp_ident "print/1028"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[176,5392+34]..src/grammarFunctor.ml[176,5392+39])
                                                            Texp_construct "false"
                                                            []
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[176,5392+40]..src/grammarFunctor.ml[176,5392+42])
                                                            Texp_ident "nt/1094"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[176,5392+44]..src/grammarFunctor.ml[176,5392+57])
                                                      Texp_field
                                                      expression (src/grammarFunctor.ml[176,5392+44]..src/grammarFunctor.ml[176,5392+51])
                                                        Texp_ident "G/488.grammar"
                                                      "types"
                                                ]
                                            ]
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[177,5451+9]..src/grammarFunctor.ml[177,5451+18])
                                                Tpat_construct "Not_found"
                                                []
                                                None
                                              expression (src/grammarFunctor.ml[178,5473+6]..src/grammarFunctor.ml[178,5473+10])
                                                Texp_construct "None"
                                                []
                                          ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[180,5485+2]..src/grammarFunctor.ml[186,5639+20])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[180,5485+6]..src/grammarFunctor.ml[180,5485+31])
                                  Tpat_var "ocamltype_of_start_symbol/1095"
                                expression (src/grammarFunctor.ml[180,5485+32]..src/grammarFunctor.ml[186,5639+20]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[180,5485+32]..src/grammarFunctor.ml[180,5485+34])
                                        Tpat_var "nt/1096"
                                      expression (src/grammarFunctor.ml[181,5522+4]..src/grammarFunctor.ml[186,5639+20])
                                        Texp_match
                                        expression (src/grammarFunctor.ml[181,5522+10]..src/grammarFunctor.ml[181,5522+22])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[181,5522+10]..src/grammarFunctor.ml[181,5522+19])
                                            Texp_ident "ocamltype/1092"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[181,5522+20]..src/grammarFunctor.ml[181,5522+22])
                                                Texp_ident "nt/1096"
                                          ]
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[182,5550+6]..src/grammarFunctor.ml[182,5550+14])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[182,5550+6]..src/grammarFunctor.ml[182,5550+14])
                                                Tpat_construct "Some"
                                                [
                                                  pattern (src/grammarFunctor.ml[182,5550+11]..src/grammarFunctor.ml[182,5550+14])
                                                    Tpat_var "typ/1097"
                                                ]
                                                None
                                            expression (src/grammarFunctor.ml[183,5568+8]..src/grammarFunctor.ml[183,5568+11])
                                              Texp_ident "typ/1097"
                                          <case>
                                            pattern (src/grammarFunctor.ml[184,5580+6]..src/grammarFunctor.ml[184,5580+10])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[184,5580+6]..src/grammarFunctor.ml[184,5580+10])
                                                Tpat_construct "None"
                                                []
                                                None
                                            expression (src/grammarFunctor.ml[186,5639+8]..src/grammarFunctor.ml[186,5639+20])
                                              Texp_assert                                              expression (src/grammarFunctor.ml[186,5639+15]..src/grammarFunctor.ml[186,5639+20])
                                                Texp_construct "false"
                                                []
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[188,5661+2]..src/grammarFunctor.ml[189,5680+30])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[188,5661+6]..src/grammarFunctor.ml[188,5661+14])
                                  Tpat_var "tabulate/1100"
                                expression (src/grammarFunctor.ml[188,5661+15]..src/grammarFunctor.ml[189,5680+30]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[188,5661+15]..src/grammarFunctor.ml[188,5661+16])
                                        Tpat_var "f/1102"
                                      expression (src/grammarFunctor.ml[189,5680+4]..src/grammarFunctor.ml[189,5680+30])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[189,5680+4]..src/grammarFunctor.ml[189,5680+13])
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[189,5680+14]..src/grammarFunctor.ml[189,5680+30])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[189,5680+15]..src/grammarFunctor.ml[189,5680+25])
                                                Texp_ident "Stdlib!.Array.init"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[189,5680+26]..src/grammarFunctor.ml[189,5680+27])
                                                    Texp_ident "n/1005"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[189,5680+28]..src/grammarFunctor.ml[189,5680+29])
                                                    Texp_ident "f/1102"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[191,5712+2]..src/grammarFunctor.ml[192,5757+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[191,5712+6]..src/grammarFunctor.ml[191,5712+16])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[191,5712+19]..src/grammarFunctor.ml[191,5712+42])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[191,5712+19]..src/grammarFunctor.ml[191,5712+36])
                                          Ttyp_constr "Dune__exe!.Syntax.attributes"
                                          []
                                      ]
                                  Tpat_alias "attributes/1103"
                                  pattern (src/grammarFunctor.ml[191,5712+6]..src/grammarFunctor.ml[191,5712+16])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[192,5757+4]..src/grammarFunctor.ml[192,5757+19])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[191,5712+19]..src/grammarFunctor.ml[191,5712+42])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[191,5712+19]..src/grammarFunctor.ml[191,5712+36])
                                          Ttyp_constr "Dune__exe!.Syntax.attributes"
                                          []
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[192,5757+4]..src/grammarFunctor.ml[192,5757+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[192,5757+15]..src/grammarFunctor.ml[192,5757+16])
                                        Texp_ident "n/1005"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[192,5757+17]..src/grammarFunctor.ml[192,5757+19])
                                        Texp_construct "[]"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[194,5778+2]..src/grammarFunctor.ml[198,5919+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[194,5778+6]..src/grammarFunctor.ml[194,5778+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[195,5789+4]..src/grammarFunctor.ml[198,5919+19])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[195,5789+4]..src/grammarFunctor.ml[195,5789+18])
                                    Texp_ident "Dune__exe!.StringMap.iter"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[195,5789+19]..src/grammarFunctor.ml[198,5919+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[195,5789+24]..src/grammarFunctor.ml[195,5789+35])
                                              Tpat_var "nonterminal/1104"
                                            expression (src/grammarFunctor.ml[195,5789+36]..src/grammarFunctor.ml[197,5888+30]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[195,5789+36]..src/grammarFunctor.ml[195,5789+58])
                                                    Tpat_record
                                                    [
                                                      "attributes"
                                                        pattern (src/grammarFunctor.ml[195,5789+51]..src/grammarFunctor.ml[195,5789+56])
                                                          Tpat_var "attrs/1105"
                                                    ]
                                                  expression (src/grammarFunctor.ml[196,5851+6]..src/grammarFunctor.ml[197,5888+30])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[196,5851+10]..src/grammarFunctor.ml[196,5851+12])
                                                          Tpat_var "nt/1106"
                                                        expression (src/grammarFunctor.ml[196,5851+15]..src/grammarFunctor.ml[196,5851+33])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[196,5851+15]..src/grammarFunctor.ml[196,5851+21])
                                                            Texp_ident "lookup/1067"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[196,5851+22]..src/grammarFunctor.ml[196,5851+33])
                                                                Texp_ident "nonterminal/1104"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[197,5888+6]..src/grammarFunctor.ml[197,5888+30])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[197,5888+6]..src/grammarFunctor.ml[197,5888+30]) ghost
                                                        Texp_ident "Stdlib!.Array.set"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[197,5888+6]..src/grammarFunctor.ml[197,5888+16])
                                                            Texp_ident "attributes/1103"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[197,5888+18]..src/grammarFunctor.ml[197,5888+20])
                                                            Texp_ident "nt/1106"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[197,5888+25]..src/grammarFunctor.ml[197,5888+30])
                                                            Texp_ident "attrs/1105"
                                                      ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[198,5919+6]..src/grammarFunctor.ml[198,5919+19])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[198,5919+6]..src/grammarFunctor.ml[198,5919+13])
                                          Texp_ident "G/488.grammar"
                                        "rules"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[200,5940+2]..src/grammarFunctor.ml[201,5962+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[200,5940+6]..src/grammarFunctor.ml[200,5940+16])
                                  Tpat_var "attributes/1108"
                                expression (src/grammarFunctor.ml[200,5940+17]..src/grammarFunctor.ml[201,5962+19]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[200,5940+17]..src/grammarFunctor.ml[200,5940+19])
                                        Tpat_var "nt/1109"
                                      expression (src/grammarFunctor.ml[201,5962+4]..src/grammarFunctor.ml[201,5962+19])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[201,5962+4]..src/grammarFunctor.ml[201,5962+19]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[201,5962+4]..src/grammarFunctor.ml[201,5962+14])
                                              Texp_ident "attributes/1103"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[201,5962+16]..src/grammarFunctor.ml[201,5962+18])
                                              Texp_ident "nt/1109"
                                        ]
                                  ]
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[207,6028+0]..src/grammarFunctor.ml[207,6028+36])
                  Tstr_module
                  NonterminalMap/1113
                    module_expr (src/grammarFunctor.ml[207,6028+24]..src/grammarFunctor.ml[207,6028+36])
                      Tmod_ident "Dune__exe!.Patricia.Big"
                structure_item (src/grammarFunctor.ml[209,6066+0]..src/grammarFunctor.ml[209,6066+43])
                  Tstr_module
                  NonterminalSet/1149
                    module_expr (src/grammarFunctor.ml[209,6066+24]..src/grammarFunctor.ml[209,6066+43])
                      Tmod_ident "Dune__exe!.Patricia.Big.Domain"
                structure_item (src/grammarFunctor.ml[214,6208+0]..src/grammarFunctor.ml[463,12600+3])
                  Tstr_module
                  Terminal/1588
                    module_expr (src/grammarFunctor.ml[214,6208+18]..src/grammarFunctor.ml[463,12600+3])
                      module_expr (src/grammarFunctor.ml[214,6208+18]..src/grammarFunctor.ml[463,12600+3])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[216,6234+2]..src/grammarFunctor.ml[216,6234+14])
                            Tstr_type Rec
                            [
                              type_declaration t/1150 (src/grammarFunctor.ml[216,6234+2]..src/grammarFunctor.ml[216,6234+14])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ttype_abstract
                                ptype_private = Public
                                ptype_manifest =
                                  Some
                                    core_type (src/grammarFunctor.ml[216,6234+11]..src/grammarFunctor.ml[216,6234+14])
                                      Ttyp_constr "int/1!"
                                      []
                            ]
                          structure_item (src/grammarFunctor.ml[218,6250+2]..src/grammarFunctor.ml[218,6250+15])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[218,6250+6]..src/grammarFunctor.ml[218,6250+9])
                                  Tpat_var "t2i/1151"
                                expression (src/grammarFunctor.ml[218,6250+10]..src/grammarFunctor.ml[218,6250+15]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[218,6250+10]..src/grammarFunctor.ml[218,6250+11])
                                        Tpat_var "i/1153"
                                      expression (src/grammarFunctor.ml[218,6250+14]..src/grammarFunctor.ml[218,6250+15])
                                        Texp_ident "i/1153"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[219,6266+2]..src/grammarFunctor.ml[219,6266+15])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[219,6266+6]..src/grammarFunctor.ml[219,6266+9])
                                  Tpat_var "i2t/1154"
                                expression (src/grammarFunctor.ml[219,6266+10]..src/grammarFunctor.ml[219,6266+15]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[219,6266+10]..src/grammarFunctor.ml[219,6266+11])
                                        Tpat_var "i/1156"
                                      expression (src/grammarFunctor.ml[219,6266+14]..src/grammarFunctor.ml[219,6266+15])
                                        Texp_ident "i/1156"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[221,6283+2]..src/grammarFunctor.ml[221,6283+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[221,6283+6]..src/grammarFunctor.ml[221,6283+13])
                                  Tpat_var "compare/1157"
                                expression (src/grammarFunctor.ml[221,6283+16]..src/grammarFunctor.ml[221,6283+19])
                                  Texp_ident "Stdlib!.-"
                            ]
                          structure_item (src/grammarFunctor.ml[223,6304+2]..src/grammarFunctor.ml[224,6340+15])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[223,6304+6]..src/grammarFunctor.ml[223,6304+11])
                                  Tpat_var "equal/1158"
                                expression (src/grammarFunctor.ml[223,6304+12]..src/grammarFunctor.ml[224,6340+15]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[223,6304+13]..src/grammarFunctor.ml[223,6304+17])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/grammarFunctor.ml[223,6304+20]..src/grammarFunctor.ml[223,6304+21])
                                            Ttyp_constr "t/1150"
                                            []
                                        Tpat_alias "tok1/1160"
                                        pattern (src/grammarFunctor.ml[223,6304+13]..src/grammarFunctor.ml[223,6304+17])
                                          Tpat_any
                                      expression (src/grammarFunctor.ml[223,6304+23]..src/grammarFunctor.ml[224,6340+15]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[223,6304+24]..src/grammarFunctor.ml[223,6304+28])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (src/grammarFunctor.ml[223,6304+31]..src/grammarFunctor.ml[223,6304+32])
                                                  Ttyp_constr "t/1150"
                                                  []
                                              Tpat_alias "tok2/1161"
                                              pattern (src/grammarFunctor.ml[223,6304+24]..src/grammarFunctor.ml[223,6304+28])
                                                Tpat_any
                                            expression (src/grammarFunctor.ml[224,6340+4]..src/grammarFunctor.ml[224,6340+15])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[224,6340+9]..src/grammarFunctor.ml[224,6340+10])
                                                Texp_ident "Stdlib!.="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[224,6340+4]..src/grammarFunctor.ml[224,6340+8])
                                                    Texp_ident "tok1/1160"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[224,6340+11]..src/grammarFunctor.ml[224,6340+15])
                                                    Texp_ident "tok2/1161"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[239,6959+2]..src/grammarFunctor.ml[245,7173+43])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[239,6959+6]..src/grammarFunctor.ml[239,6959+63])
                                  Tpat_tuple
                                  [
                                    pattern (src/grammarFunctor.ml[239,6959+7]..src/grammarFunctor.ml[239,6959+8])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[239,6959+11]..src/grammarFunctor.ml[239,6959+14])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "n/1162"
                                      pattern (src/grammarFunctor.ml[239,6959+7]..src/grammarFunctor.ml[239,6959+8])
                                        Tpat_any
                                    pattern (src/grammarFunctor.ml[239,6959+18]..src/grammarFunctor.ml[239,6959+22])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[239,6959+25]..src/grammarFunctor.ml[239,6959+37])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[239,6959+25]..src/grammarFunctor.ml[239,6959+31])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Tpat_alias "name/1163"
                                      pattern (src/grammarFunctor.ml[239,6959+18]..src/grammarFunctor.ml[239,6959+22])
                                        Tpat_any
                                    pattern (src/grammarFunctor.ml[239,6959+41]..src/grammarFunctor.ml[239,6959+44])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[239,6959+47]..src/grammarFunctor.ml[239,6959+62])
                                          Ttyp_constr "Dune__exe!.StringMap.t"
                                          [
                                            core_type (src/grammarFunctor.ml[239,6959+47]..src/grammarFunctor.ml[239,6959+50])
                                              Ttyp_constr "int/1!"
                                              []
                                          ]
                                      Tpat_alias "map/1164"
                                      pattern (src/grammarFunctor.ml[239,6959+41]..src/grammarFunctor.ml[239,6959+44])
                                        Tpat_any
                                  ]
                                expression (src/grammarFunctor.ml[240,7025+4]..src/grammarFunctor.ml[245,7173+43])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[240,7025+8]..src/grammarFunctor.ml[240,7025+14])
                                        Tpat_var "tokens/1165"
                                      expression (src/grammarFunctor.ml[240,7025+17]..src/grammarFunctor.ml[240,7025+31])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[240,7025+17]..src/grammarFunctor.ml[240,7025+23])
                                          Texp_ident "Dune__exe!.BasicSyntax.tokens"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[240,7025+24]..src/grammarFunctor.ml[240,7025+31])
                                              Texp_ident "G/488.grammar"
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[241,7060+4]..src/grammarFunctor.ml[245,7173+43])
                                    Texp_match
                                    expression (src/grammarFunctor.ml[241,7060+10]..src/grammarFunctor.ml[241,7060+16])
                                      Texp_ident "tokens/1165"
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[242,7082+6]..src/grammarFunctor.ml[242,7082+8])
                                          Tpat_value
                                          pattern (src/grammarFunctor.ml[242,7082+6]..src/grammarFunctor.ml[242,7082+8])
                                            Tpat_construct "[]"
                                            []
                                            None
                                        <when>
                                          expression (src/grammarFunctor.ml[242,7082+14]..src/grammarFunctor.ml[242,7082+21])
                                            Texp_ident "G/488.verbose"
                                        expression (src/grammarFunctor.ml[243,7107+8]..src/grammarFunctor.ml[243,7107+54])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[243,7107+8]..src/grammarFunctor.ml[243,7107+19])
                                            Texp_ident "Dune__exe!.Error.error"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[243,7107+20]..src/grammarFunctor.ml[243,7107+22])
                                                Texp_construct "[]"
                                                []
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54])
                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                [
                                                  expression (src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost
                                                        Texp_constant Const_string("no tokens have been declared.",(src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost,None)
                                                      expression (src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                        []
                                                    ]
                                                  expression (src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost
                                                    Texp_constant Const_string("no tokens have been declared.",(src/grammarFunctor.ml[243,7107+23]..src/grammarFunctor.ml[243,7107+54]) ghost,None)
                                                ]
                                          ]
                                      <case>
                                        pattern (src/grammarFunctor.ml[244,7162+6]..src/grammarFunctor.ml[244,7162+7])
                                          Tpat_value
                                          pattern (src/grammarFunctor.ml[244,7162+6]..src/grammarFunctor.ml[244,7162+7])
                                            Tpat_any
                                        expression (src/grammarFunctor.ml[245,7173+8]..src/grammarFunctor.ml[245,7173+43])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[245,7173+8]..src/grammarFunctor.ml[245,7173+13])
                                            Texp_ident "index/489"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[245,7173+14]..src/grammarFunctor.ml[245,7173+43])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[245,7173+33]..src/grammarFunctor.ml[245,7173+34])
                                                  Texp_ident "Stdlib!.@"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[245,7173+15]..src/grammarFunctor.ml[245,7173+32])
                                                      Texp_construct "::"
                                                      [
                                                        expression (src/grammarFunctor.ml[245,7173+15]..src/grammarFunctor.ml[245,7173+22])
                                                          Texp_constant Const_string("error",(src/grammarFunctor.ml[245,7173+16]..src/grammarFunctor.ml[245,7173+21]),None)
                                                        expression (src/grammarFunctor.ml[245,7173+26]..src/grammarFunctor.ml[245,7173+32])
                                                          Texp_ident "tokens/1165"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[245,7173+35]..src/grammarFunctor.ml[245,7173+42])
                                                      Texp_construct "::"
                                                      [
                                                        expression (src/grammarFunctor.ml[245,7173+37]..src/grammarFunctor.ml[245,7173+40])
                                                          Texp_constant Const_string("#",(src/grammarFunctor.ml[245,7173+38]..src/grammarFunctor.ml[245,7173+39]),None)
                                                        expression (src/grammarFunctor.ml[245,7173+41]..src/grammarFunctor.ml[245,7173+42]) ghost
                                                          Texp_construct "[]"
                                                          []
                                                      ]
                                                ]
                                          ]
                                    ]
                            ]
                          structure_item (src/grammarFunctor.ml[247,7218+2]..src/grammarFunctor.ml[248,7236+14])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[247,7218+6]..src/grammarFunctor.ml[247,7218+11])
                                  Tpat_var "print/1166"
                                expression (src/grammarFunctor.ml[247,7218+12]..src/grammarFunctor.ml[248,7236+14]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[247,7218+12]..src/grammarFunctor.ml[247,7218+15])
                                        Tpat_var "tok/1167"
                                      expression (src/grammarFunctor.ml[248,7236+4]..src/grammarFunctor.ml[248,7236+14])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[248,7236+4]..src/grammarFunctor.ml[248,7236+14]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[248,7236+4]..src/grammarFunctor.ml[248,7236+8])
                                              Texp_ident "name/1163"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[248,7236+10]..src/grammarFunctor.ml[248,7236+13])
                                              Texp_ident "tok/1167"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[250,7252+2]..src/grammarFunctor.ml[251,7272+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[250,7252+6]..src/grammarFunctor.ml[250,7252+12])
                                  Tpat_var "lookup/1168"
                                expression (src/grammarFunctor.ml[250,7252+13]..src/grammarFunctor.ml[251,7272+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[250,7252+13]..src/grammarFunctor.ml[250,7252+17])
                                        Tpat_var "name/1170"
                                      expression (src/grammarFunctor.ml[251,7272+4]..src/grammarFunctor.ml[251,7272+27])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[251,7272+4]..src/grammarFunctor.ml[251,7272+18])
                                          Texp_ident "Dune__exe!.StringMap.find"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[251,7272+19]..src/grammarFunctor.ml[251,7272+23])
                                              Texp_ident "name/1170"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[251,7272+24]..src/grammarFunctor.ml[251,7272+27])
                                              Texp_ident "map/1164"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[253,7301+2]..src/grammarFunctor.ml[254,7315+14])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[253,7301+6]..src/grammarFunctor.ml[253,7301+11])
                                  Tpat_var "sharp/1171"
                                expression (src/grammarFunctor.ml[254,7315+4]..src/grammarFunctor.ml[254,7315+14])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[254,7315+4]..src/grammarFunctor.ml[254,7315+10])
                                    Texp_ident "lookup/1168"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[254,7315+11]..src/grammarFunctor.ml[254,7315+14])
                                        Texp_constant Const_string("#",(src/grammarFunctor.ml[254,7315+12]..src/grammarFunctor.ml[254,7315+13]),None)
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[256,7331+2]..src/grammarFunctor.ml[257,7345+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[256,7331+6]..src/grammarFunctor.ml[256,7331+11])
                                  Tpat_var "error/1172"
                                expression (src/grammarFunctor.ml[257,7345+4]..src/grammarFunctor.ml[257,7345+18])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[257,7345+4]..src/grammarFunctor.ml[257,7345+10])
                                    Texp_ident "lookup/1168"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[257,7345+11]..src/grammarFunctor.ml[257,7345+18])
                                        Texp_constant Const_string("error",(src/grammarFunctor.ml[257,7345+12]..src/grammarFunctor.ml[257,7345+17]),None)
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[259,7365+2]..src/grammarFunctor.ml[260,7384+34])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[259,7365+6]..src/grammarFunctor.ml[259,7365+12])
                                  Tpat_var "pseudo/1173"
                                expression (src/grammarFunctor.ml[259,7365+13]..src/grammarFunctor.ml[260,7384+34]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[259,7365+13]..src/grammarFunctor.ml[259,7365+16])
                                        Tpat_var "tok/1175"
                                      expression (src/grammarFunctor.ml[260,7384+4]..src/grammarFunctor.ml[260,7384+34])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[260,7384+18]..src/grammarFunctor.ml[260,7384+20])
                                          Texp_ident "Stdlib!.||"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[260,7384+4]..src/grammarFunctor.ml[260,7384+17])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[260,7384+9]..src/grammarFunctor.ml[260,7384+10])
                                                Texp_ident "Stdlib!.="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[260,7384+5]..src/grammarFunctor.ml[260,7384+8])
                                                    Texp_ident "tok/1175"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[260,7384+11]..src/grammarFunctor.ml[260,7384+16])
                                                    Texp_ident "sharp/1171"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[260,7384+21]..src/grammarFunctor.ml[260,7384+34])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[260,7384+26]..src/grammarFunctor.ml[260,7384+27])
                                                Texp_ident "Stdlib!.="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[260,7384+22]..src/grammarFunctor.ml[260,7384+25])
                                                    Texp_ident "tok/1175"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[260,7384+28]..src/grammarFunctor.ml[260,7384+33])
                                                    Texp_ident "error/1172"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[262,7420+2]..src/grammarFunctor.ml[263,7435+28])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[262,7420+6]..src/grammarFunctor.ml[262,7420+10])
                                  Tpat_var "real/1176"
                                expression (src/grammarFunctor.ml[262,7420+11]..src/grammarFunctor.ml[263,7435+28]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[262,7420+11]..src/grammarFunctor.ml[262,7420+12])
                                        Tpat_var "t/1178"
                                      expression (src/grammarFunctor.ml[263,7435+4]..src/grammarFunctor.ml[263,7435+28])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[263,7435+15]..src/grammarFunctor.ml[263,7435+17])
                                          Texp_ident "Stdlib!.&&"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[263,7435+4]..src/grammarFunctor.ml[263,7435+14])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[263,7435+10]..src/grammarFunctor.ml[263,7435+12])
                                                Texp_ident "Stdlib!.<>"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[263,7435+4]..src/grammarFunctor.ml[263,7435+9])
                                                    Texp_ident "error/1172"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[263,7435+13]..src/grammarFunctor.ml[263,7435+14])
                                                    Texp_ident "t/1178"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[263,7435+18]..src/grammarFunctor.ml[263,7435+28])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[263,7435+20]..src/grammarFunctor.ml[263,7435+22])
                                                Texp_ident "Stdlib!.<>"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[263,7435+18]..src/grammarFunctor.ml[263,7435+19])
                                                    Texp_ident "t/1178"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[263,7435+23]..src/grammarFunctor.ml[263,7435+28])
                                                    Texp_ident "sharp/1171"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[265,7465+2]..src/grammarFunctor.ml[266,7487+16])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[265,7465+6]..src/grammarFunctor.ml[265,7465+15])
                                  Tpat_var "non_error/1179"
                                expression (src/grammarFunctor.ml[265,7465+16]..src/grammarFunctor.ml[266,7487+16]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[265,7465+16]..src/grammarFunctor.ml[265,7465+19])
                                        Tpat_var "tok/1181"
                                      expression (src/grammarFunctor.ml[266,7487+4]..src/grammarFunctor.ml[266,7487+16])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[266,7487+8]..src/grammarFunctor.ml[266,7487+10])
                                          Texp_ident "Stdlib!.<>"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[266,7487+4]..src/grammarFunctor.ml[266,7487+7])
                                              Texp_ident "tok/1181"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[266,7487+11]..src/grammarFunctor.ml[266,7487+16])
                                              Texp_ident "error/1172"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[268,7505+2]..src/grammarFunctor.ml[287,8126+5])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[268,7505+6]..src/grammarFunctor.ml[268,7505+22])
                                  Tpat_var "token_properties/1182"
                                expression (src/grammarFunctor.ml[269,7530+4]..src/grammarFunctor.ml[287,8126+5])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[269,7530+8]..src/grammarFunctor.ml[269,7530+31])
                                        Tpat_var "not_so_dummy_properties/1183"
                                      expression (src/grammarFunctor.ml[270,7600+6]..src/grammarFunctor.ml[279,7918+7])
                                        Texp_record
                                          fields =
                                            [
                                              "tk_filename"
                                                expression (src/grammarFunctor.ml[271,7608+27]..src/grammarFunctor.ml[271,7608+43])
                                                  Texp_constant Const_string("__primitives__",(src/grammarFunctor.ml[271,7608+28]..src/grammarFunctor.ml[271,7608+42]),None)
                                              "tk_ocamltype"
                                                expression (src/grammarFunctor.ml[274,7744+27]..src/grammarFunctor.ml[274,7744+31])
                                                  Texp_construct "None"
                                                  []
                                              "tk_position"
                                                expression (src/grammarFunctor.ml[276,7810+27]..src/grammarFunctor.ml[276,7810+42])
                                                  Texp_ident "Dune__exe!.Positions.dummy"
                                              "tk_alias"
                                                expression (src/grammarFunctor.ml[278,7885+27]..src/grammarFunctor.ml[278,7885+31])
                                                  Texp_construct "None"
                                                  []
                                              "tk_attributes"
                                                expression (src/grammarFunctor.ml[277,7854+27]..src/grammarFunctor.ml[277,7854+29])
                                                  Texp_construct "[]"
                                                  []
                                              "tk_associativity"
                                                expression (src/grammarFunctor.ml[273,7701+27]..src/grammarFunctor.ml[273,7701+41])
                                                  Texp_construct "UndefinedAssoc"
                                                  []
                                              "tk_precedence"
                                                expression (src/grammarFunctor.ml[272,7653+27]..src/grammarFunctor.ml[272,7653+46])
                                                  Texp_construct "UndefinedPrecedence"
                                                  []
                                              "tk_is_declared"
                                                expression (src/grammarFunctor.ml[275,7777+27]..src/grammarFunctor.ml[275,7777+31])
                                                  Texp_construct "true"
                                                  []
                                            ]
                                          representation =
                                            Record_regular
                                          extended_expression =
                                            None
                                  ]
                                  expression (src/grammarFunctor.ml[281,7933+4]..src/grammarFunctor.ml[287,8126+5])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[281,7933+4]..src/grammarFunctor.ml[281,7933+14])
                                      Texp_ident "Stdlib!.Array.init"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[281,7933+15]..src/grammarFunctor.ml[281,7933+16])
                                          Texp_ident "n/1162"
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[281,7933+17]..src/grammarFunctor.ml[287,8126+5])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[281,7933+22]..src/grammarFunctor.ml[281,7933+25])
                                                Tpat_var "tok/1184"
                                              expression (src/grammarFunctor.ml[282,7962+6]..src/grammarFunctor.ml[286,8093+32])
                                                Texp_try
                                                expression (src/grammarFunctor.ml[283,7972+9]..src/grammarFunctor.ml[283,7972+49])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[283,7972+9]..src/grammarFunctor.ml[283,7972+23])
                                                    Texp_ident "Dune__exe!.StringMap.find"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[283,7972+24]..src/grammarFunctor.ml[283,7972+34])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[283,7972+24]..src/grammarFunctor.ml[283,7972+34]) ghost
                                                          Texp_ident "Stdlib!.Array.get"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[283,7972+24]..src/grammarFunctor.ml[283,7972+28])
                                                              Texp_ident "name/1163"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[283,7972+30]..src/grammarFunctor.ml[283,7972+33])
                                                              Texp_ident "tok/1184"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[283,7972+35]..src/grammarFunctor.ml[283,7972+49])
                                                        Texp_field
                                                        expression (src/grammarFunctor.ml[283,7972+35]..src/grammarFunctor.ml[283,7972+42])
                                                          Texp_ident "G/488.grammar"
                                                        "tokens"
                                                  ]
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[284,8022+12]..src/grammarFunctor.ml[284,8022+21])
                                                      Tpat_construct "Not_found"
                                                      []
                                                      None
                                                    expression (src/grammarFunctor.ml[285,8047+9]..src/grammarFunctor.ml[286,8093+32])
                                                      Texp_sequence
                                                      expression (src/grammarFunctor.ml[285,8047+9]..src/grammarFunctor.ml[285,8047+44])
                                                        Texp_assert                                                        expression (src/grammarFunctor.ml[285,8047+16]..src/grammarFunctor.ml[285,8047+44])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[285,8047+29]..src/grammarFunctor.ml[285,8047+31])
                                                            Texp_ident "Stdlib!.||"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[285,8047+17]..src/grammarFunctor.ml[285,8047+28])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[285,8047+21]..src/grammarFunctor.ml[285,8047+22])
                                                                  Texp_ident "Stdlib!.="
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[285,8047+17]..src/grammarFunctor.ml[285,8047+20])
                                                                      Texp_ident "tok/1184"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[285,8047+23]..src/grammarFunctor.ml[285,8047+28])
                                                                      Texp_ident "sharp/1171"
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[285,8047+32]..src/grammarFunctor.ml[285,8047+43])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[285,8047+36]..src/grammarFunctor.ml[285,8047+37])
                                                                  Texp_ident "Stdlib!.="
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[285,8047+32]..src/grammarFunctor.ml[285,8047+35])
                                                                      Texp_ident "tok/1184"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[285,8047+38]..src/grammarFunctor.ml[285,8047+43])
                                                                      Texp_ident "error/1172"
                                                                ]
                                                          ]
                                                      expression (src/grammarFunctor.ml[286,8093+9]..src/grammarFunctor.ml[286,8093+32])
                                                        Texp_ident "not_so_dummy_properties/1183"
                                                ]
                                          ]
                                    ]
                            ]
                          structure_item (src/grammarFunctor.ml[289,8133+2]..src/grammarFunctor.ml[293,8263+7])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[289,8133+6]..src/grammarFunctor.ml[289,8133+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[290,8144+4]..src/grammarFunctor.ml[293,8263+7])
                                  Texp_ifthenelse
                                  expression (src/grammarFunctor.ml[290,8144+7]..src/grammarFunctor.ml[290,8144+14])
                                    Texp_ident "G/488.verbose"
                                  expression (src/grammarFunctor.ml[291,8164+6]..src/grammarFunctor.ml[293,8263+7])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[291,8164+6]..src/grammarFunctor.ml[291,8164+16])
                                      Texp_ident "Dune__exe!.Error.logG"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[291,8164+17]..src/grammarFunctor.ml[291,8164+18])
                                          Texp_constant Const_int 1
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[291,8164+19]..src/grammarFunctor.ml[293,8263+7])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[291,8164+24]..src/grammarFunctor.ml[291,8164+25])
                                                Tpat_var "f/1185"
                                              expression (src/grammarFunctor.ml[292,8193+8]..src/grammarFunctor.ml[292,8193+69])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[292,8193+8]..src/grammarFunctor.ml[292,8193+22])
                                                  Texp_ident "Stdlib!.Printf.fprintf"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[292,8193+23]..src/grammarFunctor.ml[292,8193+24])
                                                      Texp_ident "f/1185"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61])
                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                      [
                                                        expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                              Texp_constant Const_string("Grammar has ",(src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost,None)
                                                            expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.Int"
                                                              [
                                                                expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                  []
                                                                expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                  []
                                                                expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                  []
                                                                expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                      Texp_constant Const_string(" terminal symbols.\n",(src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost,None)
                                                                    expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost
                                                          Texp_constant Const_string("Grammar has %d terminal symbols.\n",(src/grammarFunctor.ml[292,8193+25]..src/grammarFunctor.ml[292,8193+61]) ghost,None)
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[292,8193+62]..src/grammarFunctor.ml[292,8193+69])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[292,8193+65]..src/grammarFunctor.ml[292,8193+66])
                                                        Texp_ident "Stdlib!.-"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[292,8193+63]..src/grammarFunctor.ml[292,8193+64])
                                                            Texp_ident "n/1162"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[292,8193+67]..src/grammarFunctor.ml[292,8193+68])
                                                            Texp_constant Const_int 2
                                                      ]
                                                ]
                                          ]
                                    ]
                                  None
                            ]
                          structure_item (src/grammarFunctor.ml[295,8272+2]..src/grammarFunctor.ml[296,8301+60])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[295,8272+6]..src/grammarFunctor.ml[295,8272+22])
                                  Tpat_var "precedence_level/1186"
                                expression (src/grammarFunctor.ml[295,8272+23]..src/grammarFunctor.ml[296,8301+60]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[295,8272+23]..src/grammarFunctor.ml[295,8272+26])
                                        Tpat_var "tok/1188"
                                      expression (src/grammarFunctor.ml[296,8301+4]..src/grammarFunctor.ml[296,8301+60])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[296,8301+4]..src/grammarFunctor.ml[296,8301+25])
                                          Texp_ident "TokPrecedence/990.levelip"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[296,8301+26]..src/grammarFunctor.ml[296,8301+37])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[296,8301+27]..src/grammarFunctor.ml[296,8301+32])
                                                Texp_ident "print/1166"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[296,8301+33]..src/grammarFunctor.ml[296,8301+36])
                                                    Texp_ident "tok/1188"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[296,8301+38]..src/grammarFunctor.ml[296,8301+60])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[296,8301+38]..src/grammarFunctor.ml[296,8301+60]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[296,8301+38]..src/grammarFunctor.ml[296,8301+54])
                                                    Texp_ident "token_properties/1182"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[296,8301+56]..src/grammarFunctor.ml[296,8301+59])
                                                    Texp_ident "tok/1188"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[298,8363+2]..src/grammarFunctor.ml[299,8389+43])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[298,8363+6]..src/grammarFunctor.ml[298,8363+19])
                                  Tpat_var "associativity/1189"
                                expression (src/grammarFunctor.ml[298,8363+20]..src/grammarFunctor.ml[299,8389+43]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[298,8363+20]..src/grammarFunctor.ml[298,8363+23])
                                        Tpat_var "tok/1191"
                                      expression (src/grammarFunctor.ml[299,8389+4]..src/grammarFunctor.ml[299,8389+43])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[299,8389+4]..src/grammarFunctor.ml[299,8389+26])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[299,8389+4]..src/grammarFunctor.ml[299,8389+26]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[299,8389+4]..src/grammarFunctor.ml[299,8389+20])
                                                Texp_ident "token_properties/1182"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[299,8389+22]..src/grammarFunctor.ml[299,8389+25])
                                                Texp_ident "tok/1191"
                                          ]
                                        "tk_associativity"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[301,8434+2]..src/grammarFunctor.ml[302,8456+39])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[301,8434+6]..src/grammarFunctor.ml[301,8434+15])
                                  Tpat_var "ocamltype/1192"
                                expression (src/grammarFunctor.ml[301,8434+16]..src/grammarFunctor.ml[302,8456+39]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[301,8434+16]..src/grammarFunctor.ml[301,8434+19])
                                        Tpat_var "tok/1194"
                                      expression (src/grammarFunctor.ml[302,8456+4]..src/grammarFunctor.ml[302,8456+39])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[302,8456+4]..src/grammarFunctor.ml[302,8456+26])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[302,8456+4]..src/grammarFunctor.ml[302,8456+26]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[302,8456+4]..src/grammarFunctor.ml[302,8456+20])
                                                Texp_ident "token_properties/1182"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[302,8456+22]..src/grammarFunctor.ml[302,8456+25])
                                                Texp_ident "tok/1194"
                                          ]
                                        "tk_ocamltype"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[304,8497+2]..src/grammarFunctor.ml[305,8512+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[304,8497+6]..src/grammarFunctor.ml[304,8497+10])
                                  Tpat_var "init/1195"
                                expression (src/grammarFunctor.ml[304,8497+11]..src/grammarFunctor.ml[305,8512+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[304,8497+11]..src/grammarFunctor.ml[304,8497+12])
                                        Tpat_var "f/1197"
                                      expression (src/grammarFunctor.ml[305,8512+4]..src/grammarFunctor.ml[305,8512+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[305,8512+4]..src/grammarFunctor.ml[305,8512+14])
                                          Texp_ident "Stdlib!.Array.init"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[305,8512+15]..src/grammarFunctor.ml[305,8512+16])
                                              Texp_ident "n/1162"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[305,8512+17]..src/grammarFunctor.ml[305,8512+18])
                                              Texp_ident "f/1197"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[307,8532+2]..src/grammarFunctor.ml[308,8547+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[307,8532+6]..src/grammarFunctor.ml[307,8532+10])
                                  Tpat_var "iter/1198"
                                expression (src/grammarFunctor.ml[307,8532+11]..src/grammarFunctor.ml[308,8547+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[307,8532+11]..src/grammarFunctor.ml[307,8532+12])
                                        Tpat_var "f/1199"
                                      expression (src/grammarFunctor.ml[308,8547+4]..src/grammarFunctor.ml[308,8547+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[308,8547+4]..src/grammarFunctor.ml[308,8547+14])
                                          Texp_ident "Dune__exe!.Misc.iteri"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[308,8547+15]..src/grammarFunctor.ml[308,8547+16])
                                              Texp_ident "n/1162"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[308,8547+17]..src/grammarFunctor.ml[308,8547+18])
                                              Texp_ident "f/1199"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[310,8567+2]..src/grammarFunctor.ml[311,8587+23])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[310,8567+6]..src/grammarFunctor.ml[310,8567+10])
                                  Tpat_var "fold/1200"
                                expression (src/grammarFunctor.ml[310,8567+11]..src/grammarFunctor.ml[311,8587+23]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[310,8567+11]..src/grammarFunctor.ml[310,8567+12])
                                        Tpat_var "f/1202"
                                      expression (src/grammarFunctor.ml[310,8567+13]..src/grammarFunctor.ml[311,8587+23]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[310,8567+13]..src/grammarFunctor.ml[310,8567+17])
                                              Tpat_var "accu/1203"
                                            expression (src/grammarFunctor.ml[311,8587+4]..src/grammarFunctor.ml[311,8587+23])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[311,8587+4]..src/grammarFunctor.ml[311,8587+14])
                                                Texp_ident "Dune__exe!.Misc.foldi"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[311,8587+15]..src/grammarFunctor.ml[311,8587+16])
                                                    Texp_ident "n/1162"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[311,8587+17]..src/grammarFunctor.ml[311,8587+18])
                                                    Texp_ident "f/1202"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[311,8587+19]..src/grammarFunctor.ml[311,8587+23])
                                                    Texp_ident "accu/1203"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[313,8612+2]..src/grammarFunctor.ml[314,8626+17])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[313,8612+6]..src/grammarFunctor.ml[313,8612+9])
                                  Tpat_var "map/1204"
                                expression (src/grammarFunctor.ml[313,8612+10]..src/grammarFunctor.ml[314,8626+17]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[313,8612+10]..src/grammarFunctor.ml[313,8612+11])
                                        Tpat_var "f/1205"
                                      expression (src/grammarFunctor.ml[314,8626+4]..src/grammarFunctor.ml[314,8626+17])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[314,8626+4]..src/grammarFunctor.ml[314,8626+13])
                                          Texp_ident "Dune__exe!.Misc.mapi"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[314,8626+14]..src/grammarFunctor.ml[314,8626+15])
                                              Texp_ident "n/1162"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[314,8626+16]..src/grammarFunctor.ml[314,8626+17])
                                              Texp_ident "f/1205"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[316,8645+2]..src/grammarFunctor.ml[317,8656+26])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[316,8645+6]..src/grammarFunctor.ml[316,8645+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[317,8656+4]..src/grammarFunctor.ml[317,8656+26])
                                  Texp_assert                                  expression (src/grammarFunctor.ml[317,8656+11]..src/grammarFunctor.ml[317,8656+26])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[317,8656+18]..src/grammarFunctor.ml[317,8656+19])
                                      Texp_ident "Stdlib!.="
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[317,8656+12]..src/grammarFunctor.ml[317,8656+17])
                                          Texp_ident "sharp/1171"
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[317,8656+20]..src/grammarFunctor.ml[317,8656+25])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[317,8656+22]..src/grammarFunctor.ml[317,8656+23])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[317,8656+20]..src/grammarFunctor.ml[317,8656+21])
                                                Texp_ident "n/1162"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[317,8656+24]..src/grammarFunctor.ml[317,8656+25])
                                                Texp_constant Const_int 1
                                          ]
                                    ]
                            ]
                          structure_item (src/grammarFunctor.ml[318,8683+2]..src/grammarFunctor.ml[319,8704+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[318,8683+6]..src/grammarFunctor.ml[318,8683+11])
                                  Tpat_var "foldx/1206"
                                expression (src/grammarFunctor.ml[318,8683+12]..src/grammarFunctor.ml[319,8704+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[318,8683+12]..src/grammarFunctor.ml[318,8683+13])
                                        Tpat_var "f/1208"
                                      expression (src/grammarFunctor.ml[318,8683+14]..src/grammarFunctor.ml[319,8704+27]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[318,8683+14]..src/grammarFunctor.ml[318,8683+18])
                                              Tpat_var "accu/1209"
                                            expression (src/grammarFunctor.ml[319,8704+4]..src/grammarFunctor.ml[319,8704+27])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[319,8704+4]..src/grammarFunctor.ml[319,8704+14])
                                                Texp_ident "Dune__exe!.Misc.foldi"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[319,8704+15]..src/grammarFunctor.ml[319,8704+20])
                                                    Texp_ident "sharp/1171"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[319,8704+21]..src/grammarFunctor.ml[319,8704+22])
                                                    Texp_ident "f/1208"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[319,8704+23]..src/grammarFunctor.ml[319,8704+27])
                                                    Texp_ident "accu/1209"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[320,8732+2]..src/grammarFunctor.ml[321,8747+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[320,8732+6]..src/grammarFunctor.ml[320,8732+10])
                                  Tpat_var "mapx/1210"
                                expression (src/grammarFunctor.ml[320,8732+11]..src/grammarFunctor.ml[321,8747+21]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[320,8732+11]..src/grammarFunctor.ml[320,8732+12])
                                        Tpat_var "f/1212"
                                      expression (src/grammarFunctor.ml[321,8747+4]..src/grammarFunctor.ml[321,8747+21])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[321,8747+4]..src/grammarFunctor.ml[321,8747+13])
                                          Texp_ident "Dune__exe!.Misc.mapi"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[321,8747+14]..src/grammarFunctor.ml[321,8747+19])
                                              Texp_ident "sharp/1171"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[321,8747+20]..src/grammarFunctor.ml[321,8747+21])
                                              Texp_ident "f/1212"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[323,8770+2]..src/grammarFunctor.ml[324,8781+22])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[323,8770+6]..src/grammarFunctor.ml[323,8770+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[324,8781+4]..src/grammarFunctor.ml[324,8781+22])
                                  Texp_assert                                  expression (src/grammarFunctor.ml[324,8781+11]..src/grammarFunctor.ml[324,8781+22])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[324,8781+18]..src/grammarFunctor.ml[324,8781+19])
                                      Texp_ident "Stdlib!.="
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[324,8781+12]..src/grammarFunctor.ml[324,8781+17])
                                          Texp_ident "error/1172"
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[324,8781+20]..src/grammarFunctor.ml[324,8781+21])
                                          Texp_constant Const_int 0
                                    ]
                            ]
                          structure_item (src/grammarFunctor.ml[325,8804+2]..src/grammarFunctor.ml[328,8858+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[325,8804+6]..src/grammarFunctor.ml[325,8804+15])
                                  Tpat_var "iter_real/1213"
                                expression (src/grammarFunctor.ml[325,8804+16]..src/grammarFunctor.ml[328,8858+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[325,8804+16]..src/grammarFunctor.ml[325,8804+17])
                                        Tpat_var "f/1215"
                                      expression (src/grammarFunctor.ml[326,8824+4]..src/grammarFunctor.ml[328,8858+8])
                                        Texp_for "i/1216" Up
                                        expression (src/grammarFunctor.ml[326,8824+12]..src/grammarFunctor.ml[326,8824+13])
                                          Texp_constant Const_int 1
                                        expression (src/grammarFunctor.ml[326,8824+17]..src/grammarFunctor.ml[326,8824+20])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[326,8824+18]..src/grammarFunctor.ml[326,8824+19])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[326,8824+17]..src/grammarFunctor.ml[326,8824+18])
                                                Texp_ident "n/1162"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[326,8824+19]..src/grammarFunctor.ml[326,8824+20])
                                                Texp_constant Const_int 2
                                          ]
                                        expression (src/grammarFunctor.ml[327,8848+6]..src/grammarFunctor.ml[327,8848+9])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[327,8848+6]..src/grammarFunctor.ml[327,8848+7])
                                            Texp_ident "f/1215"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[327,8848+8]..src/grammarFunctor.ml[327,8848+9])
                                                Texp_ident "i/1216"
                                          ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[330,8868+2]..src/grammarFunctor.ml[337,9084+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[330,8868+6]..src/grammarFunctor.ml[330,8868+29])
                                  Tpat_var "tokens_without_an_alias/1217"
                                expression (src/grammarFunctor.ml[331,8900+4]..src/grammarFunctor.ml[337,9084+18])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[331,8900+8]..src/grammarFunctor.ml[331,8900+12])
                                        Tpat_var "accu/1218"
                                      expression (src/grammarFunctor.ml[331,8900+15]..src/grammarFunctor.ml[331,8900+21])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[331,8900+15]..src/grammarFunctor.ml[331,8900+18])
                                          Texp_ident "Stdlib!.ref"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[331,8900+19]..src/grammarFunctor.ml[331,8900+21])
                                              Texp_construct "[]"
                                              []
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[332,8925+4]..src/grammarFunctor.ml[337,9084+18])
                                    Texp_sequence
                                    expression (src/grammarFunctor.ml[332,8925+4]..src/grammarFunctor.ml[336,9075+7])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[332,8925+4]..src/grammarFunctor.ml[332,8925+13])
                                        Texp_ident "iter_real/1213"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[332,8925+14]..src/grammarFunctor.ml[336,9075+7])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[332,8925+24]..src/grammarFunctor.ml[332,8925+27])
                                                  Tpat_var "tok/1219"
                                                expression (src/grammarFunctor.ml[333,8956+6]..src/grammarFunctor.ml[335,9046+28])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[333,8956+10]..src/grammarFunctor.ml[333,8956+20])
                                                        Tpat_var "properties/1220"
                                                      expression (src/grammarFunctor.ml[333,8956+23]..src/grammarFunctor.ml[333,8956+45])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[333,8956+23]..src/grammarFunctor.ml[333,8956+45]) ghost
                                                          Texp_ident "Stdlib!.Array.get"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[333,8956+23]..src/grammarFunctor.ml[333,8956+39])
                                                              Texp_ident "token_properties/1182"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[333,8956+41]..src/grammarFunctor.ml[333,8956+44])
                                                              Texp_ident "tok/1219"
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[334,9005+6]..src/grammarFunctor.ml[335,9046+28])
                                                    Texp_ifthenelse
                                                    expression (src/grammarFunctor.ml[334,9005+9]..src/grammarFunctor.ml[334,9005+35])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[334,9005+29]..src/grammarFunctor.ml[334,9005+30])
                                                        Texp_ident "Stdlib!.="
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[334,9005+9]..src/grammarFunctor.ml[334,9005+28])
                                                            Texp_field
                                                            expression (src/grammarFunctor.ml[334,9005+9]..src/grammarFunctor.ml[334,9005+19])
                                                              Texp_ident "properties/1220"
                                                            "tk_alias"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[334,9005+31]..src/grammarFunctor.ml[334,9005+35])
                                                            Texp_construct "None"
                                                            []
                                                      ]
                                                    expression (src/grammarFunctor.ml[335,9046+8]..src/grammarFunctor.ml[335,9046+28])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[335,9046+13]..src/grammarFunctor.ml[335,9046+15])
                                                        Texp_ident "Stdlib!.:="
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[335,9046+8]..src/grammarFunctor.ml[335,9046+12])
                                                            Texp_ident "accu/1218"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[335,9046+16]..src/grammarFunctor.ml[335,9046+28])
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/grammarFunctor.ml[335,9046+16]..src/grammarFunctor.ml[335,9046+19])
                                                                Texp_ident "tok/1219"
                                                              expression (src/grammarFunctor.ml[335,9046+23]..src/grammarFunctor.ml[335,9046+28])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[335,9046+23]..src/grammarFunctor.ml[335,9046+24])
                                                                  Texp_ident "Stdlib!.!"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[335,9046+24]..src/grammarFunctor.ml[335,9046+28])
                                                                      Texp_ident "accu/1218"
                                                                ]
                                                            ]
                                                      ]
                                                    None
                                            ]
                                      ]
                                    expression (src/grammarFunctor.ml[337,9084+4]..src/grammarFunctor.ml[337,9084+18])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[337,9084+4]..src/grammarFunctor.ml[337,9084+12])
                                        Texp_ident "Stdlib!.List.rev"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[337,9084+13]..src/grammarFunctor.ml[337,9084+18])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[337,9084+13]..src/grammarFunctor.ml[337,9084+14])
                                              Texp_ident "Stdlib!.!"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[337,9084+14]..src/grammarFunctor.ml[337,9084+18])
                                                  Texp_ident "accu/1218"
                                            ]
                                      ]
                            ]
                          structure_item (src/grammarFunctor.ml[339,9104+2]..src/grammarFunctor.ml[347,9432+9])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[339,9104+6]..src/grammarFunctor.ml[339,9104+8])
                                  Tpat_construct "()"
                                  []
                                  None
                                expression (src/grammarFunctor.ml[340,9115+4]..src/grammarFunctor.ml[347,9432+9])
                                  Texp_ifthenelse
                                  expression (src/grammarFunctor.ml[340,9115+7]..src/grammarFunctor.ml[340,9115+42])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[340,9115+15]..src/grammarFunctor.ml[340,9115+17])
                                      Texp_ident "Stdlib!.&&"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[340,9115+7]..src/grammarFunctor.ml[340,9115+14])
                                          Texp_ident "G/488.verbose"
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[340,9115+18]..src/grammarFunctor.ml[340,9115+42])
                                          Texp_ident "Dune__exe!.Settings.require_aliases"
                                    ]
                                  expression (src/grammarFunctor.ml[341,9163+6]..src/grammarFunctor.ml[347,9432+9])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[341,9163+33]..src/grammarFunctor.ml[347,9432+9])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[341,9163+33]..src/grammarFunctor.ml[341,9163+42])
                                        Texp_ident "Stdlib!.List.iter"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[341,9163+43]..src/grammarFunctor.ml[347,9432+9])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[341,9163+53]..src/grammarFunctor.ml[341,9163+56])
                                                  Tpat_var "tok/1281"
                                                expression (src/grammarFunctor.ml[342,9223+8]..src/grammarFunctor.ml[346,9410+21])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[342,9223+12]..src/grammarFunctor.ml[342,9223+22])
                                                        Tpat_var "properties/1282"
                                                      expression (src/grammarFunctor.ml[342,9223+25]..src/grammarFunctor.ml[342,9223+47])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[342,9223+25]..src/grammarFunctor.ml[342,9223+47]) ghost
                                                          Texp_ident "Stdlib!.Array.get"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[342,9223+25]..src/grammarFunctor.ml[342,9223+41])
                                                              Texp_ident "token_properties/1182"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[342,9223+43]..src/grammarFunctor.ml[342,9223+46])
                                                              Texp_ident "tok/1281"
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[343,9274+8]..src/grammarFunctor.ml[346,9410+21])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[343,9274+12]..src/grammarFunctor.ml[343,9274+15])
                                                          Tpat_var "pos/1283"
                                                        expression (src/grammarFunctor.ml[343,9274+18]..src/grammarFunctor.ml[343,9274+40])
                                                          Texp_field
                                                          expression (src/grammarFunctor.ml[343,9274+18]..src/grammarFunctor.ml[343,9274+28])
                                                            Texp_ident "properties/1282"
                                                          "tk_position"
                                                    ]
                                                    expression (src/grammarFunctor.ml[344,9318+8]..src/grammarFunctor.ml[346,9410+21])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[344,9318+8]..src/grammarFunctor.ml[344,9318+29])
                                                        Texp_ident "Dune__exe!.Error.grammar_warning"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[344,9318+30]..src/grammarFunctor.ml[344,9318+35])
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/grammarFunctor.ml[344,9318+31]..src/grammarFunctor.ml[344,9318+34])
                                                                Texp_ident "pos/1283"
                                                              expression (src/grammarFunctor.ml[344,9318+34]..src/grammarFunctor.ml[344,9318+35]) ghost
                                                                Texp_construct "[]"
                                                                []
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                    Texp_constant Const_string("no alias has been defined for the token ",(src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost,None)
                                                                  expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                            Texp_constant Const_char 2e
                                                                          expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                            []
                                                                        ]
                                                                    ]
                                                                ]
                                                              expression (src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost
                                                                Texp_constant Const_string("no alias has been defined for the token %s.",(src/grammarFunctor.ml[345,9354+10]..src/grammarFunctor.ml[345,9354+55]) ghost,None)
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[346,9410+10]..src/grammarFunctor.ml[346,9410+21])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[346,9410+11]..src/grammarFunctor.ml[346,9410+16])
                                                              Texp_ident "print/1166"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[346,9410+17]..src/grammarFunctor.ml[346,9410+20])
                                                                  Texp_ident "tok/1281"
                                                            ]
                                                      ]
                                            ]
                                      ]
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[341,9163+6]..src/grammarFunctor.ml[341,9163+29])
                                          Texp_ident "tokens_without_an_alias/1217"
                                    ]
                                  None
                            ]
                          structure_item (src/grammarFunctor.ml[349,9443+2]..src/grammarFunctor.ml[350,9476+32])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[349,9443+6]..src/grammarFunctor.ml[349,9443+30])
                                  Tpat_var "every_token_has_an_alias/1284"
                                expression (src/grammarFunctor.ml[350,9476+4]..src/grammarFunctor.ml[350,9476+32])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[350,9476+28]..src/grammarFunctor.ml[350,9476+29])
                                    Texp_ident "Stdlib!.="
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[350,9476+4]..src/grammarFunctor.ml[350,9476+27])
                                        Texp_ident "tokens_without_an_alias/1217"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[350,9476+30]..src/grammarFunctor.ml[350,9476+32])
                                        Texp_construct "[]"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[352,9510+2]..src/grammarFunctor.ml[353,9528+35])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[352,9510+6]..src/grammarFunctor.ml[352,9510+11])
                                  Tpat_var "alias/1285"
                                expression (src/grammarFunctor.ml[352,9510+12]..src/grammarFunctor.ml[353,9528+35]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[352,9510+12]..src/grammarFunctor.ml[352,9510+15])
                                        Tpat_var "tok/1287"
                                      expression (src/grammarFunctor.ml[353,9528+4]..src/grammarFunctor.ml[353,9528+35])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[353,9528+4]..src/grammarFunctor.ml[353,9528+26])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[353,9528+4]..src/grammarFunctor.ml[353,9528+26]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[353,9528+4]..src/grammarFunctor.ml[353,9528+20])
                                                Texp_ident "token_properties/1182"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[353,9528+22]..src/grammarFunctor.ml[353,9528+25])
                                                Texp_ident "tok/1287"
                                          ]
                                        "tk_alias"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[355,9565+2]..src/grammarFunctor.ml[363,9934+3])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[355,9565+6]..src/grammarFunctor.ml[355,9565+20])
                                  Tpat_var "unquoted_alias/1288"
                                expression (src/grammarFunctor.ml[355,9565+21]..src/grammarFunctor.ml[363,9934+3]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[355,9565+21]..src/grammarFunctor.ml[355,9565+24])
                                        Tpat_var "tok/1290"
                                      expression (src/grammarFunctor.ml[356,9592+4]..src/grammarFunctor.ml[363,9934+3])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[356,9592+17]..src/grammarFunctor.ml[363,9934+3])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[356,9592+17]..src/grammarFunctor.ml[356,9592+27])
                                            Texp_ident "Dune__exe!.Option.map"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[356,9592+28]..src/grammarFunctor.ml[363,9934+3])
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[356,9592+33]..src/grammarFunctor.ml[356,9592+36])
                                                      Tpat_var "qid/1302"
                                                    expression (src/grammarFunctor.ml[357,9632+6]..src/grammarFunctor.ml[362,9869+64])
                                                      Texp_sequence
                                                      expression (src/grammarFunctor.ml[357,9632+6]..src/grammarFunctor.ml[357,9632+28])
                                                        Texp_assert                                                        expression (src/grammarFunctor.ml[357,9632+13]..src/grammarFunctor.ml[357,9632+28])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[357,9632+22]..src/grammarFunctor.ml[357,9632+23])
                                                            Texp_ident "Stdlib!.="
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[357,9632+14]..src/grammarFunctor.ml[357,9632+21])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[357,9632+14]..src/grammarFunctor.ml[357,9632+21]) ghost
                                                                  Texp_ident "Stdlib!.String.get"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[357,9632+14]..src/grammarFunctor.ml[357,9632+17])
                                                                      Texp_ident "qid/1302"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[357,9632+19]..src/grammarFunctor.ml[357,9632+20])
                                                                      Texp_constant Const_int 0
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[357,9632+24]..src/grammarFunctor.ml[357,9632+27])
                                                                Texp_constant Const_char 22
                                                          ]
                                                      expression (src/grammarFunctor.ml[360,9764+6]..src/grammarFunctor.ml[362,9869+64])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/grammarFunctor.ml[360,9764+10]..src/grammarFunctor.ml[360,9764+13])
                                                              Tpat_var "qid/1372"
                                                            expression (src/grammarFunctor.ml[360,9764+16]..src/grammarFunctor.ml[360,9764+56])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[360,9764+16]..src/grammarFunctor.ml[360,9764+26])
                                                                Texp_ident "Stdlib!.String.sub"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[360,9764+27]..src/grammarFunctor.ml[360,9764+30])
                                                                    Texp_ident "qid/1302"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[360,9764+31]..src/grammarFunctor.ml[360,9764+32])
                                                                    Texp_constant Const_int 1
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[360,9764+33]..src/grammarFunctor.ml[360,9764+56])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[360,9764+52]..src/grammarFunctor.ml[360,9764+53])
                                                                      Texp_ident "Stdlib!.-"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[360,9764+34]..src/grammarFunctor.ml[360,9764+51])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[360,9764+34]..src/grammarFunctor.ml[360,9764+47])
                                                                            Texp_ident "Stdlib!.String.length"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[360,9764+48]..src/grammarFunctor.ml[360,9764+51])
                                                                                Texp_ident "qid/1302"
                                                                          ]
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[360,9764+54]..src/grammarFunctor.ml[360,9764+55])
                                                                          Texp_constant Const_int 1
                                                                    ]
                                                              ]
                                                        ]
                                                        expression (src/grammarFunctor.ml[361,9824+6]..src/grammarFunctor.ml[362,9869+64])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[361,9824+10]..src/grammarFunctor.ml[361,9824+16])
                                                                Tpat_var "lexbuf/1373"
                                                              expression (src/grammarFunctor.ml[361,9824+19]..src/grammarFunctor.ml[361,9824+41])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[361,9824+19]..src/grammarFunctor.ml[361,9824+37])
                                                                  Texp_ident "Stdlib!.Lexing.from_string"
                                                                [
                                                                  <arg>
                                                                    Optional "with_positions"
                                                                    expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                                                      Texp_construct "None"
                                                                      []
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[361,9824+38]..src/grammarFunctor.ml[361,9824+41])
                                                                      Texp_ident "qid/1372"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[362,9869+6]..src/grammarFunctor.ml[362,9869+64])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[362,9869+6]..src/grammarFunctor.ml[362,9869+22])
                                                              Texp_ident "Dune__exe!.Misc.with_buffer"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[362,9869+23]..src/grammarFunctor.ml[362,9869+24])
                                                                  Texp_constant Const_int 8
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[362,9869+25]..src/grammarFunctor.ml[362,9869+64])
                                                                  Texp_function
                                                                  Nolabel
                                                                  [
                                                                    <case>
                                                                      pattern (src/grammarFunctor.ml[362,9869+30]..src/grammarFunctor.ml[362,9869+31])
                                                                        Tpat_var "b/1398"
                                                                      expression (src/grammarFunctor.ml[362,9869+35]..src/grammarFunctor.ml[362,9869+63])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[362,9869+35]..src/grammarFunctor.ml[362,9869+54])
                                                                          Texp_ident "Dune__exe!.Lexer.decode_string"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[362,9869+55]..src/grammarFunctor.ml[362,9869+56])
                                                                              Texp_ident "b/1398"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[362,9869+57]..src/grammarFunctor.ml[362,9869+63])
                                                                              Texp_ident "lexbuf/1373"
                                                                        ]
                                                                  ]
                                                            ]
                                                ]
                                          ]
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[356,9592+4]..src/grammarFunctor.ml[356,9592+13])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[356,9592+4]..src/grammarFunctor.ml[356,9592+9])
                                                Texp_ident "alias/1285"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[356,9592+10]..src/grammarFunctor.ml[356,9592+13])
                                                    Texp_ident "tok/1290"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[365,9939+2]..src/grammarFunctor.ml[372,10148+13])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[365,9939+6]..src/grammarFunctor.ml[365,9939+20])
                                  Tpat_var "print_concrete/1529"
                                expression (src/grammarFunctor.ml[365,9939+21]..src/grammarFunctor.ml[372,10148+13]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[365,9939+21]..src/grammarFunctor.ml[365,9939+22])
                                        Tpat_var "t/1531"
                                      expression (src/grammarFunctor.ml[366,9964+2]..src/grammarFunctor.ml[372,10148+13])
                                        Texp_match
                                        expression (src/grammarFunctor.ml[366,9964+8]..src/grammarFunctor.ml[366,9964+24])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[366,9964+8]..src/grammarFunctor.ml[366,9964+22])
                                            Texp_ident "unquoted_alias/1288"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[366,9964+23]..src/grammarFunctor.ml[366,9964+24])
                                                Texp_ident "t/1531"
                                          ]
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[367,9994+4]..src/grammarFunctor.ml[367,9994+14])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[367,9994+4]..src/grammarFunctor.ml[367,9994+14])
                                                Tpat_construct "Some"
                                                [
                                                  pattern (src/grammarFunctor.ml[367,9994+9]..src/grammarFunctor.ml[367,9994+14])
                                                    Tpat_var "alias/1532"
                                                ]
                                                None
                                            expression (src/grammarFunctor.ml[368,10012+6]..src/grammarFunctor.ml[368,10012+11])
                                              Texp_ident "alias/1532"
                                          <case>
                                            pattern (src/grammarFunctor.ml[369,10024+4]..src/grammarFunctor.ml[369,10024+8])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[369,10024+4]..src/grammarFunctor.ml[369,10024+8])
                                                Tpat_construct "None"
                                                []
                                                None
                                            expression (src/grammarFunctor.ml[372,10148+6]..src/grammarFunctor.ml[372,10148+13])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[372,10148+6]..src/grammarFunctor.ml[372,10148+11])
                                                Texp_ident "print/1166"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[372,10148+12]..src/grammarFunctor.ml[372,10148+13])
                                                    Texp_ident "t/1531"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[377,10266+2]..src/grammarFunctor.ml[381,10334+10])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[377,10266+6]..src/grammarFunctor.ml[377,10266+9])
                                  Tpat_var "eof/1533"
                                expression (src/grammarFunctor.ml[378,10278+4]..src/grammarFunctor.ml[381,10334+10])
                                  Texp_try
                                  expression (src/grammarFunctor.ml[379,10286+6]..src/grammarFunctor.ml[379,10286+25])
                                    Texp_construct "Some"
                                    [
                                      expression (src/grammarFunctor.ml[379,10286+11]..src/grammarFunctor.ml[379,10286+25])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[379,10286+12]..src/grammarFunctor.ml[379,10286+18])
                                          Texp_ident "lookup/1168"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[379,10286+19]..src/grammarFunctor.ml[379,10286+24])
                                              Texp_constant Const_string("EOF",(src/grammarFunctor.ml[379,10286+20]..src/grammarFunctor.ml[379,10286+23]),None)
                                        ]
                                    ]
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[380,10312+9]..src/grammarFunctor.ml[380,10312+18])
                                        Tpat_construct "Not_found"
                                        []
                                        None
                                      expression (src/grammarFunctor.ml[381,10334+6]..src/grammarFunctor.ml[381,10334+10])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[383,10346+2]..src/grammarFunctor.ml[384,10369+40])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[383,10346+6]..src/grammarFunctor.ml[383,10346+16])
                                  Tpat_var "attributes/1534"
                                expression (src/grammarFunctor.ml[383,10346+17]..src/grammarFunctor.ml[384,10369+40]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[383,10346+17]..src/grammarFunctor.ml[383,10346+20])
                                        Tpat_var "tok/1536"
                                      expression (src/grammarFunctor.ml[384,10369+4]..src/grammarFunctor.ml[384,10369+40])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[384,10369+4]..src/grammarFunctor.ml[384,10369+26])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[384,10369+4]..src/grammarFunctor.ml[384,10369+26]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[384,10369+4]..src/grammarFunctor.ml[384,10369+20])
                                                Texp_ident "token_properties/1182"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[384,10369+22]..src/grammarFunctor.ml[384,10369+25])
                                                Texp_ident "tok/1536"
                                          ]
                                        "tk_attributes"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[392,10705+2]..src/grammarFunctor.ml[461,12593+5])
                            Tstr_module
                            Word/1587
                              module_expr (src/grammarFunctor.ml[392,10705+14]..src/grammarFunctor.ml[461,12593+5])
                                Tmod_functor "X/1537"
                                module_type (src/grammarFunctor.ml[392,10705+19]..src/grammarFunctor.ml[392,10705+26])
                                  Tmty_signature
                                  []
                                module_expr (src/grammarFunctor.ml[392,10705+30]..src/grammarFunctor.ml[461,12593+5])
                                  module_expr (src/grammarFunctor.ml[392,10705+30]..src/grammarFunctor.ml[461,12593+5])
                                    Tmod_structure
                                    [
                                      structure_item (src/grammarFunctor.ml[405,11417+4]..src/grammarFunctor.ml[406,11430+23])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[405,11417+8]..src/grammarFunctor.ml[405,11417+10])
                                              Tpat_construct "()"
                                              []
                                              None
                                            expression (src/grammarFunctor.ml[406,11430+6]..src/grammarFunctor.ml[406,11430+23])
                                              Texp_assert                                              expression (src/grammarFunctor.ml[406,11430+13]..src/grammarFunctor.ml[406,11430+23])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[406,11430+16]..src/grammarFunctor.ml[406,11430+18])
                                                  Texp_ident "Stdlib!.<="
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[406,11430+14]..src/grammarFunctor.ml[406,11430+15])
                                                      Texp_ident "n/1162"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[406,11430+19]..src/grammarFunctor.ml[406,11430+22])
                                                      Texp_constant Const_int 256
                                                ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[408,11455+4]..src/grammarFunctor.ml[409,11525+33])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[408,11455+8]..src/grammarFunctor.ml[408,11455+67])
                                              Tpat_tuple
                                              [
                                                pattern (src/grammarFunctor.ml[408,11455+9]..src/grammarFunctor.ml[408,11455+15])
                                                  extra
                                                    Tpat_extra_constraint
                                                    core_type (src/grammarFunctor.ml[408,11455+18]..src/grammarFunctor.ml[408,11455+31])
                                                      Ttyp_arrow
                                                      Nolabel
                                                      core_type (src/grammarFunctor.ml[408,11455+18]..src/grammarFunctor.ml[408,11455+24])
                                                        Ttyp_constr "string/15!"
                                                        []
                                                      core_type (src/grammarFunctor.ml[408,11455+28]..src/grammarFunctor.ml[408,11455+31])
                                                        Ttyp_constr "int/1!"
                                                        []
                                                  Tpat_alias "encode/1538"
                                                  pattern (src/grammarFunctor.ml[408,11455+9]..src/grammarFunctor.ml[408,11455+15])
                                                    Tpat_any
                                                pattern (src/grammarFunctor.ml[408,11455+35]..src/grammarFunctor.ml[408,11455+41])
                                                  extra
                                                    Tpat_extra_constraint
                                                    core_type (src/grammarFunctor.ml[408,11455+44]..src/grammarFunctor.ml[408,11455+57])
                                                      Ttyp_arrow
                                                      Nolabel
                                                      core_type (src/grammarFunctor.ml[408,11455+44]..src/grammarFunctor.ml[408,11455+47])
                                                        Ttyp_constr "int/1!"
                                                        []
                                                      core_type (src/grammarFunctor.ml[408,11455+51]..src/grammarFunctor.ml[408,11455+57])
                                                        Ttyp_constr "string/15!"
                                                        []
                                                  Tpat_alias "decode/1539"
                                                  pattern (src/grammarFunctor.ml[408,11455+35]..src/grammarFunctor.ml[408,11455+41])
                                                    Tpat_any
                                                pattern (src/grammarFunctor.ml[408,11455+60]..src/grammarFunctor.ml[408,11455+67])
                                                  Tpat_var "verbose/1540"
                                              ]
                                            expression (src/grammarFunctor.ml[409,11525+6]..src/grammarFunctor.ml[409,11525+33])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[409,11525+6]..src/grammarFunctor.ml[409,11525+28])
                                                Texp_ident "Dune__exe!.Misc.new_encode_decode"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[409,11525+29]..src/grammarFunctor.ml[409,11525+33])
                                                    Texp_constant Const_int 1024
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[411,11560+4]..src/grammarFunctor.ml[412,11576+9])
                                        Tstr_type Rec
                                        [
                                          type_declaration word/1541 (src/grammarFunctor.ml[411,11560+4]..src/grammarFunctor.ml[412,11576+9])
                                            ptype_params =
                                              []
                                            ptype_cstrs =
                                              []
                                            ptype_kind =
                                              Ttype_abstract
                                            ptype_private = Public
                                            ptype_manifest =
                                              Some
                                                core_type (src/grammarFunctor.ml[412,11576+6]..src/grammarFunctor.ml[412,11576+9])
                                                  Ttyp_constr "int/1!"
                                                  []
                                        ]
                                      structure_item (src/grammarFunctor.ml[414,11587+4]..src/grammarFunctor.ml[415,11605+15])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[414,11587+8]..src/grammarFunctor.ml[414,11587+15])
                                              Tpat_var "epsilon/1542"
                                            expression (src/grammarFunctor.ml[415,11605+6]..src/grammarFunctor.ml[415,11605+15])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[415,11605+6]..src/grammarFunctor.ml[415,11605+12])
                                                Texp_ident "encode/1538"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[415,11605+13]..src/grammarFunctor.ml[415,11605+15])
                                                    Texp_constant Const_string("",(src/grammarFunctor.ml[415,11605+14]..src/grammarFunctor.ml[415,11605+14]),None)
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[417,11622+4]..src/grammarFunctor.ml[418,11644+41])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[417,11622+8]..src/grammarFunctor.ml[417,11622+17])
                                              Tpat_var "singleton/1543"
                                            expression (src/grammarFunctor.ml[417,11622+18]..src/grammarFunctor.ml[418,11644+41]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[417,11622+18]..src/grammarFunctor.ml[417,11622+19])
                                                    Tpat_var "t/1545"
                                                  expression (src/grammarFunctor.ml[418,11644+6]..src/grammarFunctor.ml[418,11644+41])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[418,11644+6]..src/grammarFunctor.ml[418,11644+12])
                                                      Texp_ident "encode/1538"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[418,11644+13]..src/grammarFunctor.ml[418,11644+41])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[418,11644+14]..src/grammarFunctor.ml[418,11644+25])
                                                            Texp_ident "Stdlib!.String.make"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[418,11644+26]..src/grammarFunctor.ml[418,11644+27])
                                                                Texp_constant Const_int 1
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[418,11644+28]..src/grammarFunctor.ml[418,11644+40])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[418,11644+29]..src/grammarFunctor.ml[418,11644+37])
                                                                  Texp_ident "Stdlib!.Char.chr"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[418,11644+38]..src/grammarFunctor.ml[418,11644+39])
                                                                      Texp_ident "t/1545"
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[420,11687+4]..src/grammarFunctor.ml[428,11871+24])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[420,11687+8]..src/grammarFunctor.ml[420,11687+14])
                                              Tpat_var "append/1557"
                                            expression (src/grammarFunctor.ml[420,11687+15]..src/grammarFunctor.ml[428,11871+24]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[420,11687+15]..src/grammarFunctor.ml[420,11687+17])
                                                    Tpat_var "i1/1559"
                                                  expression (src/grammarFunctor.ml[420,11687+18]..src/grammarFunctor.ml[428,11871+24]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[420,11687+18]..src/grammarFunctor.ml[420,11687+20])
                                                          Tpat_var "i2/1560"
                                                        expression (src/grammarFunctor.ml[421,11710+6]..src/grammarFunctor.ml[428,11871+24])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[421,11710+10]..src/grammarFunctor.ml[421,11710+12])
                                                                Tpat_var "w1/1561"
                                                              expression (src/grammarFunctor.ml[421,11710+15]..src/grammarFunctor.ml[421,11710+24])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[421,11710+15]..src/grammarFunctor.ml[421,11710+21])
                                                                  Texp_ident "decode/1539"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[421,11710+22]..src/grammarFunctor.ml[421,11710+24])
                                                                      Texp_ident "i1/1559"
                                                                ]
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[422,11735+10]..src/grammarFunctor.ml[422,11735+12])
                                                                Tpat_var "w2/1562"
                                                              expression (src/grammarFunctor.ml[422,11735+15]..src/grammarFunctor.ml[422,11735+24])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[422,11735+15]..src/grammarFunctor.ml[422,11735+21])
                                                                  Texp_ident "decode/1539"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[422,11735+22]..src/grammarFunctor.ml[422,11735+24])
                                                                      Texp_ident "i2/1560"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[423,11763+6]..src/grammarFunctor.ml[428,11871+24])
                                                            Texp_ifthenelse
                                                            expression (src/grammarFunctor.ml[423,11763+9]..src/grammarFunctor.ml[423,11763+29])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[423,11763+26]..src/grammarFunctor.ml[423,11763+27])
                                                                Texp_ident "Stdlib!.="
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[423,11763+9]..src/grammarFunctor.ml[423,11763+25])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[423,11763+9]..src/grammarFunctor.ml[423,11763+22])
                                                                      Texp_ident "Stdlib!.String.length"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[423,11763+23]..src/grammarFunctor.ml[423,11763+25])
                                                                          Texp_ident "w1/1561"
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[423,11763+28]..src/grammarFunctor.ml[423,11763+29])
                                                                    Texp_constant Const_int 0
                                                              ]
                                                            expression (src/grammarFunctor.ml[424,11798+8]..src/grammarFunctor.ml[424,11798+10])
                                                              Texp_ident "i2/1560"
                                                            Some
                                                              expression (src/grammarFunctor.ml[425,11809+11]..src/grammarFunctor.ml[428,11871+24])
                                                                Texp_ifthenelse
                                                                expression (src/grammarFunctor.ml[425,11809+14]..src/grammarFunctor.ml[425,11809+34])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[425,11809+31]..src/grammarFunctor.ml[425,11809+32])
                                                                    Texp_ident "Stdlib!.="
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[425,11809+14]..src/grammarFunctor.ml[425,11809+30])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[425,11809+14]..src/grammarFunctor.ml[425,11809+27])
                                                                          Texp_ident "Stdlib!.String.length"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[425,11809+28]..src/grammarFunctor.ml[425,11809+30])
                                                                              Texp_ident "w2/1562"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[425,11809+33]..src/grammarFunctor.ml[425,11809+34])
                                                                        Texp_constant Const_int 0
                                                                  ]
                                                                expression (src/grammarFunctor.ml[426,11849+8]..src/grammarFunctor.ml[426,11849+10])
                                                                  Texp_ident "i1/1559"
                                                                Some
                                                                  expression (src/grammarFunctor.ml[428,11871+8]..src/grammarFunctor.ml[428,11871+24])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[428,11871+8]..src/grammarFunctor.ml[428,11871+14])
                                                                      Texp_ident "encode/1538"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[428,11871+15]..src/grammarFunctor.ml[428,11871+24])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[428,11871+19]..src/grammarFunctor.ml[428,11871+20])
                                                                            Texp_ident "Stdlib!.^"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[428,11871+16]..src/grammarFunctor.ml[428,11871+18])
                                                                                Texp_ident "w1/1561"
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[428,11871+21]..src/grammarFunctor.ml[428,11871+23])
                                                                                Texp_ident "w2/1562"
                                                                          ]
                                                                    ]
                                                    ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[430,11897+4]..src/grammarFunctor.ml[431,11916+30])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[430,11897+8]..src/grammarFunctor.ml[430,11897+14])
                                              Tpat_var "length/1563"
                                            expression (src/grammarFunctor.ml[430,11897+15]..src/grammarFunctor.ml[431,11916+30]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[430,11897+15]..src/grammarFunctor.ml[430,11897+16])
                                                    Tpat_var "i/1565"
                                                  expression (src/grammarFunctor.ml[431,11916+6]..src/grammarFunctor.ml[431,11916+30])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[431,11916+6]..src/grammarFunctor.ml[431,11916+19])
                                                      Texp_ident "Stdlib!.String.length"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[431,11916+20]..src/grammarFunctor.ml[431,11916+30])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[431,11916+21]..src/grammarFunctor.ml[431,11916+27])
                                                            Texp_ident "decode/1539"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[431,11916+28]..src/grammarFunctor.ml[431,11916+29])
                                                                Texp_ident "i/1565"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[433,11948+4]..src/grammarFunctor.ml[438,12063+9])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[433,11948+8]..src/grammarFunctor.ml[433,11948+13])
                                              Tpat_var "first/1566"
                                            expression (src/grammarFunctor.ml[433,11948+14]..src/grammarFunctor.ml[438,12063+9]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[433,11948+14]..src/grammarFunctor.ml[433,11948+15])
                                                    Tpat_var "i/1568"
                                                  expression (src/grammarFunctor.ml[433,11948+16]..src/grammarFunctor.ml[438,12063+9]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[433,11948+16]..src/grammarFunctor.ml[433,11948+17])
                                                          Tpat_var "z/1569"
                                                        expression (src/grammarFunctor.ml[434,11968+6]..src/grammarFunctor.ml[438,12063+9])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[434,11968+10]..src/grammarFunctor.ml[434,11968+11])
                                                                Tpat_var "w/1570"
                                                              expression (src/grammarFunctor.ml[434,11968+14]..src/grammarFunctor.ml[434,11968+22])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[434,11968+14]..src/grammarFunctor.ml[434,11968+20])
                                                                  Texp_ident "decode/1539"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[434,11968+21]..src/grammarFunctor.ml[434,11968+22])
                                                                      Texp_ident "i/1568"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[435,11994+6]..src/grammarFunctor.ml[438,12063+9])
                                                            Texp_ifthenelse
                                                            expression (src/grammarFunctor.ml[435,11994+9]..src/grammarFunctor.ml[435,11994+28])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[435,11994+25]..src/grammarFunctor.ml[435,11994+26])
                                                                Texp_ident "Stdlib!.>"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[435,11994+9]..src/grammarFunctor.ml[435,11994+24])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[435,11994+9]..src/grammarFunctor.ml[435,11994+22])
                                                                      Texp_ident "Stdlib!.String.length"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[435,11994+23]..src/grammarFunctor.ml[435,11994+24])
                                                                          Texp_ident "w/1570"
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[435,11994+27]..src/grammarFunctor.ml[435,11994+28])
                                                                    Texp_constant Const_int 0
                                                              ]
                                                            expression (src/grammarFunctor.ml[436,12028+8]..src/grammarFunctor.ml[436,12028+23])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[436,12028+8]..src/grammarFunctor.ml[436,12028+17])
                                                                Texp_ident "Stdlib!.Char.code"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[436,12028+18]..src/grammarFunctor.ml[436,12028+23])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[436,12028+18]..src/grammarFunctor.ml[436,12028+23]) ghost
                                                                      Texp_ident "Stdlib!.String.get"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[436,12028+18]..src/grammarFunctor.ml[436,12028+19])
                                                                          Texp_ident "w/1570"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[436,12028+21]..src/grammarFunctor.ml[436,12028+22])
                                                                          Texp_constant Const_int 0
                                                                    ]
                                                              ]
                                                            Some
                                                              expression (src/grammarFunctor.ml[438,12063+8]..src/grammarFunctor.ml[438,12063+9])
                                                                Texp_ident "z/1569"
                                                    ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[440,12074+4]..src/grammarFunctor.ml[444,12145+47])
                                        Tstr_value Rec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[440,12074+12]..src/grammarFunctor.ml[440,12074+20])
                                              Tpat_var "elements/1571"
                                            expression (src/grammarFunctor.ml[440,12074+21]..src/grammarFunctor.ml[444,12145+47]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[440,12074+21]..src/grammarFunctor.ml[440,12074+22])
                                                    Tpat_var "i/1572"
                                                  expression (src/grammarFunctor.ml[440,12074+23]..src/grammarFunctor.ml[444,12145+47]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[440,12074+23]..src/grammarFunctor.ml[440,12074+24])
                                                          Tpat_var "n/1573"
                                                        expression (src/grammarFunctor.ml[440,12074+25]..src/grammarFunctor.ml[444,12145+47]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[440,12074+25]..src/grammarFunctor.ml[440,12074+26])
                                                                Tpat_var "w/1574"
                                                              expression (src/grammarFunctor.ml[441,12103+6]..src/grammarFunctor.ml[444,12145+47])
                                                                Texp_ifthenelse
                                                                expression (src/grammarFunctor.ml[441,12103+9]..src/grammarFunctor.ml[441,12103+14])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[441,12103+11]..src/grammarFunctor.ml[441,12103+12])
                                                                    Texp_ident "Stdlib!.="
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[441,12103+9]..src/grammarFunctor.ml[441,12103+10])
                                                                        Texp_ident "i/1572"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[441,12103+13]..src/grammarFunctor.ml[441,12103+14])
                                                                        Texp_ident "n/1573"
                                                                  ]
                                                                expression (src/grammarFunctor.ml[442,12123+8]..src/grammarFunctor.ml[442,12123+10])
                                                                  Texp_construct "[]"
                                                                  []
                                                                Some
                                                                  expression (src/grammarFunctor.ml[444,12145+8]..src/grammarFunctor.ml[444,12145+47])
                                                                    Texp_construct "::"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[444,12145+8]..src/grammarFunctor.ml[444,12145+23])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[444,12145+8]..src/grammarFunctor.ml[444,12145+17])
                                                                          Texp_ident "Stdlib!.Char.code"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[444,12145+18]..src/grammarFunctor.ml[444,12145+23])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[444,12145+18]..src/grammarFunctor.ml[444,12145+23]) ghost
                                                                                Texp_ident "Stdlib!.String.get"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[444,12145+18]..src/grammarFunctor.ml[444,12145+19])
                                                                                    Texp_ident "w/1574"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[444,12145+21]..src/grammarFunctor.ml[444,12145+22])
                                                                                    Texp_ident "i/1572"
                                                                              ]
                                                                        ]
                                                                      expression (src/grammarFunctor.ml[444,12145+27]..src/grammarFunctor.ml[444,12145+47])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[444,12145+27]..src/grammarFunctor.ml[444,12145+35])
                                                                          Texp_ident "elements/1571"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[444,12145+36]..src/grammarFunctor.ml[444,12145+43])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[444,12145+39]..src/grammarFunctor.ml[444,12145+40])
                                                                                Texp_ident "Stdlib!.+"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[444,12145+37]..src/grammarFunctor.ml[444,12145+38])
                                                                                    Texp_ident "i/1572"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[444,12145+41]..src/grammarFunctor.ml[444,12145+42])
                                                                                    Texp_constant Const_int 1
                                                                              ]
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[444,12145+44]..src/grammarFunctor.ml[444,12145+45])
                                                                              Texp_ident "n/1573"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[444,12145+46]..src/grammarFunctor.ml[444,12145+47])
                                                                              Texp_ident "w/1574"
                                                                        ]
                                                                    ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[446,12194+4]..src/grammarFunctor.ml[448,12241+36])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[446,12194+8]..src/grammarFunctor.ml[446,12194+16])
                                              Tpat_var "elements/1575"
                                            expression (src/grammarFunctor.ml[446,12194+17]..src/grammarFunctor.ml[448,12241+36]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[446,12194+17]..src/grammarFunctor.ml[446,12194+18])
                                                    Tpat_var "i/1576"
                                                  expression (src/grammarFunctor.ml[447,12215+6]..src/grammarFunctor.ml[448,12241+36])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[447,12215+10]..src/grammarFunctor.ml[447,12215+11])
                                                          Tpat_var "w/1577"
                                                        expression (src/grammarFunctor.ml[447,12215+14]..src/grammarFunctor.ml[447,12215+22])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[447,12215+14]..src/grammarFunctor.ml[447,12215+20])
                                                            Texp_ident "decode/1539"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[447,12215+21]..src/grammarFunctor.ml[447,12215+22])
                                                                Texp_ident "i/1576"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[448,12241+6]..src/grammarFunctor.ml[448,12241+36])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[448,12241+6]..src/grammarFunctor.ml[448,12241+14])
                                                        Texp_ident "elements/1571"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[448,12241+15]..src/grammarFunctor.ml[448,12241+16])
                                                            Texp_constant Const_int 0
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[448,12241+17]..src/grammarFunctor.ml[448,12241+34])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[448,12241+18]..src/grammarFunctor.ml[448,12241+31])
                                                              Texp_ident "Stdlib!.String.length"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[448,12241+32]..src/grammarFunctor.ml[448,12241+33])
                                                                  Texp_ident "w/1577"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[448,12241+35]..src/grammarFunctor.ml[448,12241+36])
                                                            Texp_ident "w/1577"
                                                      ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[450,12279+4]..src/grammarFunctor.ml[455,12410+34])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[450,12279+8]..src/grammarFunctor.ml[450,12279+13])
                                              Tpat_var "print/1578"
                                            expression (src/grammarFunctor.ml[450,12279+14]..src/grammarFunctor.ml[455,12410+34]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[450,12279+14]..src/grammarFunctor.ml[450,12279+15])
                                                    Tpat_var "i/1579"
                                                  expression (src/grammarFunctor.ml[451,12297+6]..src/grammarFunctor.ml[455,12410+34])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[451,12297+10]..src/grammarFunctor.ml[451,12297+11])
                                                          Tpat_var "w/1580"
                                                        expression (src/grammarFunctor.ml[451,12297+14]..src/grammarFunctor.ml[451,12297+22])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[451,12297+14]..src/grammarFunctor.ml[451,12297+20])
                                                            Texp_ident "decode/1539"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[451,12297+21]..src/grammarFunctor.ml[451,12297+22])
                                                                Texp_ident "i/1579"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[452,12323+6]..src/grammarFunctor.ml[455,12410+34])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[452,12323+6]..src/grammarFunctor.ml[452,12323+35])
                                                        Texp_ident "Dune__exe!.Misc.separated_iter_to_string"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[453,12359+8]..src/grammarFunctor.ml[453,12359+38])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[453,12359+13]..src/grammarFunctor.ml[453,12359+14])
                                                                  Tpat_var "c/1581"
                                                                expression (src/grammarFunctor.ml[453,12359+18]..src/grammarFunctor.ml[453,12359+37])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[453,12359+18]..src/grammarFunctor.ml[453,12359+23])
                                                                    Texp_ident "print/1166"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[453,12359+24]..src/grammarFunctor.ml[453,12359+37])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[453,12359+25]..src/grammarFunctor.ml[453,12359+34])
                                                                          Texp_ident "Stdlib!.Char.code"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[453,12359+35]..src/grammarFunctor.ml[453,12359+36])
                                                                              Texp_ident "c/1581"
                                                                        ]
                                                                  ]
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[454,12398+8]..src/grammarFunctor.ml[454,12398+11])
                                                            Texp_constant Const_string(" ",(src/grammarFunctor.ml[454,12398+9]..src/grammarFunctor.ml[454,12398+10]),None)
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[455,12410+8]..src/grammarFunctor.ml[455,12410+34])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[455,12410+13]..src/grammarFunctor.ml[455,12410+14])
                                                                  Tpat_var "f/1582"
                                                                expression (src/grammarFunctor.ml[455,12410+18]..src/grammarFunctor.ml[455,12410+33])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[455,12410+18]..src/grammarFunctor.ml[455,12410+29])
                                                                    Texp_ident "Stdlib!.String.iter"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[455,12410+30]..src/grammarFunctor.ml[455,12410+31])
                                                                        Texp_ident "f/1582"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[455,12410+32]..src/grammarFunctor.ml[455,12410+33])
                                                                        Texp_ident "w/1580"
                                                                  ]
                                                            ]
                                                      ]
                                              ]
                                        ]
                                      structure_item (src/grammarFunctor.ml[458,12522+4]..src/grammarFunctor.ml[459,12546+45])
                                        Tstr_value Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[458,12522+8]..src/grammarFunctor.ml[458,12522+15])
                                              Tpat_var "compare/1583"
                                            expression (src/grammarFunctor.ml[458,12522+16]..src/grammarFunctor.ml[459,12546+45]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[458,12522+16]..src/grammarFunctor.ml[458,12522+18])
                                                    Tpat_var "i1/1584"
                                                  expression (src/grammarFunctor.ml[458,12522+19]..src/grammarFunctor.ml[459,12546+45]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[458,12522+19]..src/grammarFunctor.ml[458,12522+21])
                                                          Tpat_var "i2/1585"
                                                        expression (src/grammarFunctor.ml[459,12546+6]..src/grammarFunctor.ml[459,12546+45])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[459,12546+6]..src/grammarFunctor.ml[459,12546+21])
                                                            Texp_ident "Dune__exe!.Generic.compare"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[459,12546+22]..src/grammarFunctor.ml[459,12546+33])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[459,12546+23]..src/grammarFunctor.ml[459,12546+29])
                                                                  Texp_ident "decode/1539"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[459,12546+30]..src/grammarFunctor.ml[459,12546+32])
                                                                      Texp_ident "i1/1584"
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[459,12546+34]..src/grammarFunctor.ml[459,12546+45])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[459,12546+35]..src/grammarFunctor.ml[459,12546+41])
                                                                  Texp_ident "decode/1539"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[459,12546+42]..src/grammarFunctor.ml[459,12546+44])
                                                                      Texp_ident "i2/1585"
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                    ]
                        ]
                structure_item (src/grammarFunctor.ml[468,12739+0]..src/grammarFunctor.ml[499,13340+3])
                  Tstr_module
                  TerminalSet/1666
                    module_expr (src/grammarFunctor.ml[468,12739+21]..src/grammarFunctor.ml[499,13340+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[472,12836+2]..src/grammarFunctor.ml[472,12836+40])
                          Tstr_include                          module_expr (src/grammarFunctor.ml[472,12836+10]..src/grammarFunctor.ml[472,12836+38])
                            Tmod_apply_unit
                            module_expr (src/grammarFunctor.ml[472,12836+10]..src/grammarFunctor.ml[472,12836+38])
                              Tmod_apply
                              module_expr (src/grammarFunctor.ml[472,12836+10]..src/grammarFunctor.ml[472,12836+28])
                                module_expr (src/grammarFunctor.ml[472,12836+10]..src/grammarFunctor.ml[472,12836+28])
                                  Tmod_ident "Dune__exe!.BoundedBitSet.Make"
                              module_expr (src/grammarFunctor.ml[472,12836+29]..src/grammarFunctor.ml[472,12836+37])
                                Tmod_ident "Terminal/1588"
                        structure_item (src/grammarFunctor.ml[474,12878+2]..src/grammarFunctor.ml[475,12897+75])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[474,12878+6]..src/grammarFunctor.ml[474,12878+11])
                                Tpat_var "print/1655"
                              expression (src/grammarFunctor.ml[474,12878+12]..src/grammarFunctor.ml[475,12897+75]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[474,12878+12]..src/grammarFunctor.ml[474,12878+16])
                                      Tpat_var "toks/1656"
                                    expression (src/grammarFunctor.ml[475,12897+4]..src/grammarFunctor.ml[475,12897+75])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[475,12897+4]..src/grammarFunctor.ml[475,12897+33])
                                        Texp_ident "Dune__exe!.Misc.separated_iter_to_string"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[475,12897+34]..src/grammarFunctor.ml[475,12897+48])
                                            Texp_ident "Terminal/1588.print"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[475,12897+49]..src/grammarFunctor.ml[475,12897+52])
                                            Texp_constant Const_string(" ",(src/grammarFunctor.ml[475,12897+50]..src/grammarFunctor.ml[475,12897+51]),None)
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[475,12897+53]..src/grammarFunctor.ml[475,12897+75])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[475,12897+58]..src/grammarFunctor.ml[475,12897+59])
                                                  Tpat_var "f/1658"
                                                expression (src/grammarFunctor.ml[475,12897+63]..src/grammarFunctor.ml[475,12897+74])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[475,12897+63]..src/grammarFunctor.ml[475,12897+67])
                                                    Texp_ident "iter/1649"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[475,12897+68]..src/grammarFunctor.ml[475,12897+69])
                                                        Texp_ident "f/1658"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[475,12897+70]..src/grammarFunctor.ml[475,12897+74])
                                                        Texp_ident "toks/1656"
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[477,12974+2]..src/grammarFunctor.ml[482,13089+5])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[477,12974+6]..src/grammarFunctor.ml[477,12974+14])
                                Tpat_var "universe/1659"
                              expression (src/grammarFunctor.ml[478,12991+4]..src/grammarFunctor.ml[482,13089+5])
                                Texp_apply
                                expression (src/grammarFunctor.ml[478,12991+4]..src/grammarFunctor.ml[478,12991+10])
                                  Texp_ident "remove/1645"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[478,12991+11]..src/grammarFunctor.ml[478,12991+25])
                                      Texp_ident "Terminal/1588.sharp"
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[478,12991+26]..src/grammarFunctor.ml[482,13089+5])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[479,13019+6]..src/grammarFunctor.ml[479,13019+12])
                                        Texp_ident "remove/1645"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[479,13019+13]..src/grammarFunctor.ml[479,13019+27])
                                            Texp_ident "Terminal/1588.error"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[479,13019+28]..src/grammarFunctor.ml[481,13081+7])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[480,13049+8]..src/grammarFunctor.ml[480,13049+21])
                                              Texp_ident "Terminal/1588.fold"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[480,13049+22]..src/grammarFunctor.ml[480,13049+25])
                                                  Texp_ident "add/1644"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[480,13049+26]..src/grammarFunctor.ml[480,13049+31])
                                                  Texp_ident "empty/1637"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[487,13229+2]..src/grammarFunctor.ml[488,13247+5])
                          Tstr_type Rec
                          [
                            type_declaration property/1660 (src/grammarFunctor.ml[487,13229+2]..src/grammarFunctor.ml[488,13247+5])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_abstract
                              ptype_private = Public
                              ptype_manifest =
                                Some
                                  core_type (src/grammarFunctor.ml[488,13247+4]..src/grammarFunctor.ml[488,13247+5])
                                    Ttyp_constr "t/1636"
                                    []
                          ]
                        structure_item (src/grammarFunctor.ml[490,13254+2]..src/grammarFunctor.ml[491,13269+9])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[490,13254+6]..src/grammarFunctor.ml[490,13254+12])
                                Tpat_var "bottom/1661"
                              expression (src/grammarFunctor.ml[491,13269+4]..src/grammarFunctor.ml[491,13269+9])
                                Texp_ident "empty/1637"
                          ]
                        structure_item (src/grammarFunctor.ml[493,13280+2]..src/grammarFunctor.ml[494,13301+9])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[493,13280+6]..src/grammarFunctor.ml[493,13280+16])
                                Tpat_var "is_maximal/1662"
                              expression (src/grammarFunctor.ml[493,13280+17]..src/grammarFunctor.ml[494,13301+9]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[493,13280+17]..src/grammarFunctor.ml[493,13280+18])
                                      Tpat_any
                                    expression (src/grammarFunctor.ml[494,13301+4]..src/grammarFunctor.ml[494,13301+9])
                                      Texp_construct "false"
                                      []
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[496,13312+2]..src/grammarFunctor.ml[497,13329+9])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[496,13312+6]..src/grammarFunctor.ml[496,13312+14])
                                Tpat_var "leq_join/1665"
                              expression (src/grammarFunctor.ml[497,13329+4]..src/grammarFunctor.ml[497,13329+9])
                                Texp_ident "union/1646"
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[503,13373+0]..src/grammarFunctor.ml[503,13373+33])
                  Tstr_module
                  TerminalMap/1667
                    module_expr (src/grammarFunctor.ml[503,13373+21]..src/grammarFunctor.ml[503,13373+33])
                      Tmod_ident "Dune__exe!.Patricia.Big"
                structure_item (src/grammarFunctor.ml[508,13503+0]..src/grammarFunctor.ml[611,15697+3])
                  Tstr_module
                  Symbol/1729
                    module_expr (src/grammarFunctor.ml[508,13503+16]..src/grammarFunctor.ml[611,15697+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[510,13527+2]..src/grammarFunctor.ml[512,13563+21])
                          Tstr_type Rec
                          [
                            type_declaration t/1668 (src/grammarFunctor.ml[510,13527+2]..src/grammarFunctor.ml[512,13563+21])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_variant
                                  [
                                    (src/grammarFunctor.ml[511,13538+4]..src/grammarFunctor.ml[511,13538+24])
                                      N/1669
                                      [
                                        core_type (src/grammarFunctor.ml[511,13538+11]..src/grammarFunctor.ml[511,13538+24])
                                          Ttyp_constr "Nonterminal/1110.t"
                                          []
                                      ]
                                      None
                                    (src/grammarFunctor.ml[512,13563+4]..src/grammarFunctor.ml[512,13563+21])
                                      T/1670
                                      [
                                        core_type (src/grammarFunctor.ml[512,13563+11]..src/grammarFunctor.ml[512,13563+21])
                                          Ttyp_constr "Terminal/1588.t"
                                          []
                                      ]
                                      None
                                  ]
                              ptype_private = Public
                              ptype_manifest =
                                None
                          ]
                        structure_item (src/grammarFunctor.ml[514,13586+2]..src/grammarFunctor.ml[519,13669+12])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[514,13586+6]..src/grammarFunctor.ml[514,13586+17])
                                Tpat_var "is_terminal/1671"
                              expression (src/grammarFunctor.ml[514,13586+18]..src/grammarFunctor.ml[519,13669+12]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[514,13586+18]..src/grammarFunctor.ml[514,13586+21])
                                      Tpat_var "sym/1673"
                                    expression (src/grammarFunctor.ml[515,13610+4]..src/grammarFunctor.ml[519,13669+12])
                                      Texp_match
                                      expression (src/grammarFunctor.ml[515,13610+10]..src/grammarFunctor.ml[515,13610+13])
                                        Texp_ident "sym/1673"
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[516,13629+6]..src/grammarFunctor.ml[516,13629+9])
                                            Tpat_value
                                            pattern (src/grammarFunctor.ml[516,13629+6]..src/grammarFunctor.ml[516,13629+9])
                                              Tpat_construct "N"
                                              [
                                                pattern (src/grammarFunctor.ml[516,13629+8]..src/grammarFunctor.ml[516,13629+9])
                                                  Tpat_any
                                              ]
                                              None
                                          expression (src/grammarFunctor.ml[517,13642+8]..src/grammarFunctor.ml[517,13642+13])
                                            Texp_construct "false"
                                            []
                                        <case>
                                          pattern (src/grammarFunctor.ml[518,13656+6]..src/grammarFunctor.ml[518,13656+9])
                                            Tpat_value
                                            pattern (src/grammarFunctor.ml[518,13656+6]..src/grammarFunctor.ml[518,13656+9])
                                              Tpat_construct "T"
                                              [
                                                pattern (src/grammarFunctor.ml[518,13656+8]..src/grammarFunctor.ml[518,13656+9])
                                                  Tpat_any
                                              ]
                                              None
                                          expression (src/grammarFunctor.ml[519,13669+8]..src/grammarFunctor.ml[519,13669+12])
                                            Texp_construct "true"
                                            []
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[521,13683+2]..src/grammarFunctor.ml[530,13898+10])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[521,13683+6]..src/grammarFunctor.ml[521,13683+13])
                                Tpat_var "compare/1674"
                              expression (src/grammarFunctor.ml[521,13683+14]..src/grammarFunctor.ml[530,13898+10]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[521,13683+14]..src/grammarFunctor.ml[521,13683+18])
                                      Tpat_var "sym1/1675"
                                    expression (src/grammarFunctor.ml[521,13683+19]..src/grammarFunctor.ml[530,13898+10]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[521,13683+19]..src/grammarFunctor.ml[521,13683+23])
                                            Tpat_var "sym2/1676"
                                          expression (src/grammarFunctor.ml[522,13709+4]..src/grammarFunctor.ml[530,13898+10])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[522,13709+10]..src/grammarFunctor.ml[522,13709+20])
                                              Texp_tuple
                                              [
                                                expression (src/grammarFunctor.ml[522,13709+10]..src/grammarFunctor.ml[522,13709+14])
                                                  Texp_ident "sym1/1675"
                                                expression (src/grammarFunctor.ml[522,13709+16]..src/grammarFunctor.ml[522,13709+20])
                                                  Texp_ident "sym2/1676"
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[523,13735+6]..src/grammarFunctor.ml[523,13735+18])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[523,13735+6]..src/grammarFunctor.ml[523,13735+18])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[523,13735+6]..src/grammarFunctor.ml[523,13735+11])
                                                        Tpat_construct "N"
                                                        [
                                                          pattern (src/grammarFunctor.ml[523,13735+8]..src/grammarFunctor.ml[523,13735+11])
                                                            Tpat_var "nt1/1677"
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[523,13735+13]..src/grammarFunctor.ml[523,13735+18])
                                                        Tpat_construct "N"
                                                        [
                                                          pattern (src/grammarFunctor.ml[523,13735+15]..src/grammarFunctor.ml[523,13735+18])
                                                            Tpat_var "nt2/1678"
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[524,13757+8]..src/grammarFunctor.ml[524,13757+35])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[524,13757+8]..src/grammarFunctor.ml[524,13757+27])
                                                    Texp_ident "Nonterminal/1110.compare"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[524,13757+28]..src/grammarFunctor.ml[524,13757+31])
                                                        Texp_ident "nt1/1677"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[524,13757+32]..src/grammarFunctor.ml[524,13757+35])
                                                        Texp_ident "nt2/1678"
                                                  ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[525,13793+6]..src/grammarFunctor.ml[525,13793+20])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[525,13793+6]..src/grammarFunctor.ml[525,13793+20])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[525,13793+6]..src/grammarFunctor.ml[525,13793+12])
                                                        Tpat_construct "T"
                                                        [
                                                          pattern (src/grammarFunctor.ml[525,13793+8]..src/grammarFunctor.ml[525,13793+12])
                                                            Tpat_var "tok1/1679"
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[525,13793+14]..src/grammarFunctor.ml[525,13793+20])
                                                        Tpat_construct "T"
                                                        [
                                                          pattern (src/grammarFunctor.ml[525,13793+16]..src/grammarFunctor.ml[525,13793+20])
                                                            Tpat_var "tok2/1680"
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[526,13817+8]..src/grammarFunctor.ml[526,13817+34])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[526,13817+8]..src/grammarFunctor.ml[526,13817+24])
                                                    Texp_ident "Terminal/1588.compare"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[526,13817+25]..src/grammarFunctor.ml[526,13817+29])
                                                        Texp_ident "tok1/1679"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[526,13817+30]..src/grammarFunctor.ml[526,13817+34])
                                                        Texp_ident "tok2/1680"
                                                  ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[527,13852+6]..src/grammarFunctor.ml[527,13852+14])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[527,13852+6]..src/grammarFunctor.ml[527,13852+14])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[527,13852+6]..src/grammarFunctor.ml[527,13852+9])
                                                        Tpat_construct "N"
                                                        [
                                                          pattern (src/grammarFunctor.ml[527,13852+8]..src/grammarFunctor.ml[527,13852+9])
                                                            Tpat_any
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[527,13852+11]..src/grammarFunctor.ml[527,13852+14])
                                                        Tpat_construct "T"
                                                        [
                                                          pattern (src/grammarFunctor.ml[527,13852+13]..src/grammarFunctor.ml[527,13852+14])
                                                            Tpat_any
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[528,13870+8]..src/grammarFunctor.ml[528,13870+9])
                                                  Texp_constant Const_int 1
                                              <case>
                                                pattern (src/grammarFunctor.ml[529,13880+6]..src/grammarFunctor.ml[529,13880+14])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[529,13880+6]..src/grammarFunctor.ml[529,13880+14])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[529,13880+6]..src/grammarFunctor.ml[529,13880+9])
                                                        Tpat_construct "T"
                                                        [
                                                          pattern (src/grammarFunctor.ml[529,13880+8]..src/grammarFunctor.ml[529,13880+9])
                                                            Tpat_any
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[529,13880+11]..src/grammarFunctor.ml[529,13880+14])
                                                        Tpat_construct "N"
                                                        [
                                                          pattern (src/grammarFunctor.ml[529,13880+13]..src/grammarFunctor.ml[529,13880+14])
                                                            Tpat_any
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[530,13898+8]..src/grammarFunctor.ml[530,13898+10])
                                                  Texp_constant Const_int -1
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[532,13910+2]..src/grammarFunctor.ml[533,13934+25])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[532,13910+6]..src/grammarFunctor.ml[532,13910+11])
                                Tpat_var "equal/1681"
                              expression (src/grammarFunctor.ml[532,13910+12]..src/grammarFunctor.ml[533,13934+25]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[532,13910+12]..src/grammarFunctor.ml[532,13910+16])
                                      Tpat_var "sym1/1683"
                                    expression (src/grammarFunctor.ml[532,13910+17]..src/grammarFunctor.ml[533,13934+25]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[532,13910+17]..src/grammarFunctor.ml[532,13910+21])
                                            Tpat_var "sym2/1684"
                                          expression (src/grammarFunctor.ml[533,13934+4]..src/grammarFunctor.ml[533,13934+25])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[533,13934+22]..src/grammarFunctor.ml[533,13934+23])
                                              Texp_ident "Stdlib!.="
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[533,13934+4]..src/grammarFunctor.ml[533,13934+21])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[533,13934+4]..src/grammarFunctor.ml[533,13934+11])
                                                    Texp_ident "compare/1674"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[533,13934+12]..src/grammarFunctor.ml[533,13934+16])
                                                        Texp_ident "sym1/1683"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[533,13934+17]..src/grammarFunctor.ml[533,13934+21])
                                                        Texp_ident "sym2/1684"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[533,13934+24]..src/grammarFunctor.ml[533,13934+25])
                                                  Texp_constant Const_int 0
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[535,13961+2]..src/grammarFunctor.ml[543,14170+13])
                          Tstr_value Rec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[535,13961+10]..src/grammarFunctor.ml[535,13961+16])
                                Tpat_var "lequal/1685"
                              expression (src/grammarFunctor.ml[535,13961+17]..src/grammarFunctor.ml[543,14170+13]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[535,13961+17]..src/grammarFunctor.ml[535,13961+22])
                                      Tpat_var "syms1/1686"
                                    expression (src/grammarFunctor.ml[535,13961+23]..src/grammarFunctor.ml[543,14170+13]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[535,13961+23]..src/grammarFunctor.ml[535,13961+28])
                                            Tpat_var "syms2/1687"
                                          expression (src/grammarFunctor.ml[536,13992+4]..src/grammarFunctor.ml[543,14170+13])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[536,13992+10]..src/grammarFunctor.ml[536,13992+22])
                                              Texp_tuple
                                              [
                                                expression (src/grammarFunctor.ml[536,13992+10]..src/grammarFunctor.ml[536,13992+15])
                                                  Texp_ident "syms1/1686"
                                                expression (src/grammarFunctor.ml[536,13992+17]..src/grammarFunctor.ml[536,13992+22])
                                                  Texp_ident "syms2/1687"
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[537,14020+6]..src/grammarFunctor.ml[537,14020+12])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[537,14020+6]..src/grammarFunctor.ml[537,14020+12])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[537,14020+6]..src/grammarFunctor.ml[537,14020+8])
                                                        Tpat_construct "[]"
                                                        []
                                                        None
                                                      pattern (src/grammarFunctor.ml[537,14020+10]..src/grammarFunctor.ml[537,14020+12])
                                                        Tpat_construct "[]"
                                                        []
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[538,14036+8]..src/grammarFunctor.ml[538,14036+12])
                                                  Texp_construct "true"
                                                  []
                                              <case>
                                                pattern (src/grammarFunctor.ml[539,14049+6]..src/grammarFunctor.ml[539,14049+34])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[539,14049+6]..src/grammarFunctor.ml[539,14049+34])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[539,14049+6]..src/grammarFunctor.ml[539,14049+19])
                                                        Tpat_construct "::"
                                                        [
                                                          pattern (src/grammarFunctor.ml[539,14049+6]..src/grammarFunctor.ml[539,14049+10])
                                                            Tpat_var "sym1/1688"
                                                          pattern (src/grammarFunctor.ml[539,14049+14]..src/grammarFunctor.ml[539,14049+19])
                                                            Tpat_var "syms1/1689"
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[539,14049+21]..src/grammarFunctor.ml[539,14049+34])
                                                        Tpat_construct "::"
                                                        [
                                                          pattern (src/grammarFunctor.ml[539,14049+21]..src/grammarFunctor.ml[539,14049+25])
                                                            Tpat_var "sym2/1690"
                                                          pattern (src/grammarFunctor.ml[539,14049+29]..src/grammarFunctor.ml[539,14049+34])
                                                            Tpat_var "syms2/1691"
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[540,14087+8]..src/grammarFunctor.ml[540,14087+45])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[540,14087+24]..src/grammarFunctor.ml[540,14087+26])
                                                    Texp_ident "Stdlib!.&&"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[540,14087+8]..src/grammarFunctor.ml[540,14087+23])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[540,14087+8]..src/grammarFunctor.ml[540,14087+13])
                                                          Texp_ident "equal/1681"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[540,14087+14]..src/grammarFunctor.ml[540,14087+18])
                                                              Texp_ident "sym1/1688"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[540,14087+19]..src/grammarFunctor.ml[540,14087+23])
                                                              Texp_ident "sym2/1690"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[540,14087+27]..src/grammarFunctor.ml[540,14087+45])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[540,14087+27]..src/grammarFunctor.ml[540,14087+33])
                                                          Texp_ident "lequal/1685"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[540,14087+34]..src/grammarFunctor.ml[540,14087+39])
                                                              Texp_ident "syms1/1689"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[540,14087+40]..src/grammarFunctor.ml[540,14087+45])
                                                              Texp_ident "syms2/1691"
                                                        ]
                                                  ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[541,14133+6]..src/grammarFunctor.ml[542,14150+16])
                                                  Tpat_or
                                                  pattern (src/grammarFunctor.ml[541,14133+6]..src/grammarFunctor.ml[541,14133+16])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[541,14133+6]..src/grammarFunctor.ml[541,14133+16])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[541,14133+6]..src/grammarFunctor.ml[541,14133+12])
                                                          Tpat_construct "::"
                                                          [
                                                            pattern (src/grammarFunctor.ml[541,14133+6]..src/grammarFunctor.ml[541,14133+7])
                                                              Tpat_any
                                                            pattern (src/grammarFunctor.ml[541,14133+11]..src/grammarFunctor.ml[541,14133+12])
                                                              Tpat_any
                                                          ]
                                                          None
                                                        pattern (src/grammarFunctor.ml[541,14133+14]..src/grammarFunctor.ml[541,14133+16])
                                                          Tpat_construct "[]"
                                                          []
                                                          None
                                                      ]
                                                  pattern (src/grammarFunctor.ml[542,14150+6]..src/grammarFunctor.ml[542,14150+16])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[542,14150+6]..src/grammarFunctor.ml[542,14150+16])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[542,14150+6]..src/grammarFunctor.ml[542,14150+8])
                                                          Tpat_construct "[]"
                                                          []
                                                          None
                                                        pattern (src/grammarFunctor.ml[542,14150+10]..src/grammarFunctor.ml[542,14150+16])
                                                          Tpat_construct "::"
                                                          [
                                                            pattern (src/grammarFunctor.ml[542,14150+10]..src/grammarFunctor.ml[542,14150+11])
                                                              Tpat_any
                                                            pattern (src/grammarFunctor.ml[542,14150+15]..src/grammarFunctor.ml[542,14150+16])
                                                              Tpat_any
                                                          ]
                                                          None
                                                      ]
                                                expression (src/grammarFunctor.ml[543,14170+8]..src/grammarFunctor.ml[543,14170+13])
                                                  Texp_construct "false"
                                                  []
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[545,14185+2]..src/grammarFunctor.ml[550,14285+12])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[545,14185+6]..src/grammarFunctor.ml[545,14185+15])
                                Tpat_var "non_error/1692"
                              expression (src/grammarFunctor.ml[545,14185+16]..src/grammarFunctor.ml[550,14285+12]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[545,14185+16]..src/grammarFunctor.ml[545,14185+19])
                                      Tpat_var "sym/1694"
                                    expression (src/grammarFunctor.ml[546,14207+4]..src/grammarFunctor.ml[550,14285+12])
                                      Texp_match
                                      expression (src/grammarFunctor.ml[546,14207+10]..src/grammarFunctor.ml[546,14207+13])
                                        Texp_ident "sym/1694"
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[547,14226+6]..src/grammarFunctor.ml[547,14226+11])
                                            Tpat_value
                                            pattern (src/grammarFunctor.ml[547,14226+6]..src/grammarFunctor.ml[547,14226+11])
                                              Tpat_construct "T"
                                              [
                                                pattern (src/grammarFunctor.ml[547,14226+8]..src/grammarFunctor.ml[547,14226+11])
                                                  Tpat_var "tok/1695"
                                              ]
                                              None
                                          expression (src/grammarFunctor.ml[548,14241+8]..src/grammarFunctor.ml[548,14241+30])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[548,14241+8]..src/grammarFunctor.ml[548,14241+26])
                                              Texp_ident "Terminal/1588.non_error"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[548,14241+27]..src/grammarFunctor.ml[548,14241+30])
                                                  Texp_ident "tok/1695"
                                            ]
                                        <case>
                                          pattern (src/grammarFunctor.ml[549,14272+6]..src/grammarFunctor.ml[549,14272+9])
                                            Tpat_value
                                            pattern (src/grammarFunctor.ml[549,14272+6]..src/grammarFunctor.ml[549,14272+9])
                                              Tpat_construct "N"
                                              [
                                                pattern (src/grammarFunctor.ml[549,14272+8]..src/grammarFunctor.ml[549,14272+9])
                                                  Tpat_any
                                              ]
                                              None
                                          expression (src/grammarFunctor.ml[550,14285+8]..src/grammarFunctor.ml[550,14285+12])
                                            Texp_construct "true"
                                            []
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[552,14299+2]..src/grammarFunctor.ml[556,14386+26])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[552,14299+6]..src/grammarFunctor.ml[552,14299+11])
                                Tpat_var "print/1696"
                              expression (src/grammarFunctor.ml[552,14299+14]..src/grammarFunctor.ml[556,14386+26])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[553,14322+6]..src/grammarFunctor.ml[553,14322+10])
                                      Tpat_construct "N"
                                      [
                                        pattern (src/grammarFunctor.ml[553,14322+8]..src/grammarFunctor.ml[553,14322+10])
                                          Tpat_var "nt/1697"
                                      ]
                                      None
                                    expression (src/grammarFunctor.ml[554,14336+8]..src/grammarFunctor.ml[554,14336+34])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[554,14336+8]..src/grammarFunctor.ml[554,14336+25])
                                        Texp_ident "Nonterminal/1110.print"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[554,14336+26]..src/grammarFunctor.ml[554,14336+31])
                                            Texp_construct "false"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[554,14336+32]..src/grammarFunctor.ml[554,14336+34])
                                            Texp_ident "nt/1697"
                                      ]
                                  <case>
                                    pattern (src/grammarFunctor.ml[555,14371+6]..src/grammarFunctor.ml[555,14371+11])
                                      Tpat_construct "T"
                                      [
                                        pattern (src/grammarFunctor.ml[555,14371+8]..src/grammarFunctor.ml[555,14371+11])
                                          Tpat_var "tok/1698"
                                      ]
                                      None
                                    expression (src/grammarFunctor.ml[556,14386+8]..src/grammarFunctor.ml[556,14386+26])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[556,14386+8]..src/grammarFunctor.ml[556,14386+22])
                                        Texp_ident "Terminal/1588.print"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[556,14386+23]..src/grammarFunctor.ml[556,14386+26])
                                            Texp_ident "tok/1698"
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[558,14414+2]..src/grammarFunctor.ml[562,14483+12])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[558,14414+6]..src/grammarFunctor.ml[558,14414+17])
                                Tpat_var "nonterminal/1700"
                              expression (src/grammarFunctor.ml[558,14414+20]..src/grammarFunctor.ml[562,14483+12])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[559,14443+6]..src/grammarFunctor.ml[559,14443+9])
                                      Tpat_construct "T"
                                      [
                                        pattern (src/grammarFunctor.ml[559,14443+8]..src/grammarFunctor.ml[559,14443+9])
                                          Tpat_any
                                      ]
                                      None
                                    expression (src/grammarFunctor.ml[560,14456+8]..src/grammarFunctor.ml[560,14456+13])
                                      Texp_construct "false"
                                      []
                                  <case>
                                    pattern (src/grammarFunctor.ml[561,14470+6]..src/grammarFunctor.ml[561,14470+9])
                                      Tpat_construct "N"
                                      [
                                        pattern (src/grammarFunctor.ml[561,14470+8]..src/grammarFunctor.ml[561,14470+9])
                                          Tpat_any
                                      ]
                                      None
                                    expression (src/grammarFunctor.ml[562,14483+8]..src/grammarFunctor.ml[562,14483+12])
                                      Texp_construct "true"
                                      []
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[569,14732+2]..src/grammarFunctor.ml[570,14747+22])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[569,14732+6]..src/grammarFunctor.ml[569,14732+12])
                                Tpat_var "buffer/1703"
                              expression (src/grammarFunctor.ml[570,14747+4]..src/grammarFunctor.ml[570,14747+22])
                                Texp_apply
                                expression (src/grammarFunctor.ml[570,14747+4]..src/grammarFunctor.ml[570,14747+17])
                                  Texp_ident "Stdlib!.Buffer.create"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[570,14747+18]..src/grammarFunctor.ml[570,14747+22])
                                      Texp_constant Const_int 1024
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[572,14771+2]..src/grammarFunctor.ml[591,15292+5])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[572,14771+6]..src/grammarFunctor.ml[572,14771+14])
                                Tpat_var "printaod/1704"
                              expression (src/grammarFunctor.ml[572,14771+15]..src/grammarFunctor.ml[591,15292+5]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[572,14771+15]..src/grammarFunctor.ml[572,14771+21])
                                      Tpat_var "offset/1706"
                                    expression (src/grammarFunctor.ml[572,14771+22]..src/grammarFunctor.ml[591,15292+5]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[572,14771+22]..src/grammarFunctor.ml[572,14771+25])
                                            Tpat_var "dot/1707"
                                          expression (src/grammarFunctor.ml[572,14771+26]..src/grammarFunctor.ml[591,15292+5]) ghost
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[572,14771+26]..src/grammarFunctor.ml[572,14771+33])
                                                  Tpat_var "symbols/1708"
                                                expression (src/grammarFunctor.ml[573,14807+4]..src/grammarFunctor.ml[591,15292+5])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[573,14807+8]..src/grammarFunctor.ml[573,14807+14])
                                                        Tpat_var "length/1709"
                                                      expression (src/grammarFunctor.ml[573,14807+17]..src/grammarFunctor.ml[573,14807+37])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[573,14807+17]..src/grammarFunctor.ml[573,14807+29])
                                                          Texp_ident "Stdlib!.Array.length"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[573,14807+30]..src/grammarFunctor.ml[573,14807+37])
                                                              Texp_ident "symbols/1708"
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[574,14848+4]..src/grammarFunctor.ml[591,15292+5])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[574,14848+8]..src/grammarFunctor.ml[574,14848+13])
                                                          Tpat_var "first/1710"
                                                        expression (src/grammarFunctor.ml[574,14848+16]..src/grammarFunctor.ml[574,14848+24])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[574,14848+16]..src/grammarFunctor.ml[574,14848+19])
                                                            Texp_ident "Stdlib!.ref"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[574,14848+20]..src/grammarFunctor.ml[574,14848+24])
                                                                Texp_construct "true"
                                                                []
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[575,14876+4]..src/grammarFunctor.ml[591,15292+5])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/grammarFunctor.ml[575,14876+8]..src/grammarFunctor.ml[575,14876+16])
                                                            Tpat_var "separate/1711"
                                                          expression (src/grammarFunctor.ml[575,14876+17]..src/grammarFunctor.ml[577,14950+20]) ghost
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[575,14876+17]..src/grammarFunctor.ml[575,14876+19])
                                                                  Tpat_construct "()"
                                                                  []
                                                                  None
                                                                expression (src/grammarFunctor.ml[576,14898+6]..src/grammarFunctor.ml[577,14950+20])
                                                                  Texp_sequence
                                                                  expression (src/grammarFunctor.ml[576,14898+6]..src/grammarFunctor.ml[576,14898+50])
                                                                    Texp_ifthenelse
                                                                    expression (src/grammarFunctor.ml[576,14898+9]..src/grammarFunctor.ml[576,14898+19])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[576,14898+9]..src/grammarFunctor.ml[576,14898+12])
                                                                        Texp_ident "Stdlib!.not"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[576,14898+13]..src/grammarFunctor.ml[576,14898+19])
                                                                            Texp_apply
                                                                            expression (src/grammarFunctor.ml[576,14898+13]..src/grammarFunctor.ml[576,14898+14])
                                                                              Texp_ident "Stdlib!.!"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[576,14898+14]..src/grammarFunctor.ml[576,14898+19])
                                                                                  Texp_ident "first/1710"
                                                                            ]
                                                                      ]
                                                                    expression (src/grammarFunctor.ml[576,14898+25]..src/grammarFunctor.ml[576,14898+50])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[576,14898+25]..src/grammarFunctor.ml[576,14898+39])
                                                                        Texp_ident "Stdlib!.Printf.bprintf"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[576,14898+40]..src/grammarFunctor.ml[576,14898+46])
                                                                            Texp_ident "buffer/1703"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50])
                                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                                            [
                                                                              expression (src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                [
                                                                                  expression (src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50]) ghost
                                                                                    Texp_constant Const_char 20
                                                                                  expression (src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                    []
                                                                                ]
                                                                              expression (src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50]) ghost
                                                                                Texp_constant Const_string(" ",(src/grammarFunctor.ml[576,14898+47]..src/grammarFunctor.ml[576,14898+50]) ghost,None)
                                                                            ]
                                                                      ]
                                                                    None
                                                                  expression (src/grammarFunctor.ml[577,14950+6]..src/grammarFunctor.ml[577,14950+20])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[577,14950+12]..src/grammarFunctor.ml[577,14950+14])
                                                                      Texp_ident "Stdlib!.:="
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[577,14950+6]..src/grammarFunctor.ml[577,14950+11])
                                                                          Texp_ident "first/1710"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[577,14950+15]..src/grammarFunctor.ml[577,14950+20])
                                                                          Texp_construct "false"
                                                                          []
                                                                    ]
                                                            ]
                                                      ]
                                                      expression (src/grammarFunctor.ml[579,14978+4]..src/grammarFunctor.ml[591,15292+5])
                                                        Texp_sequence
                                                        expression (src/grammarFunctor.ml[579,14978+4]..src/grammarFunctor.ml[588,15219+8])
                                                          Texp_for "i/1714" Up
                                                          expression (src/grammarFunctor.ml[579,14978+12]..src/grammarFunctor.ml[579,14978+18])
                                                            Texp_ident "offset/1706"
                                                          expression (src/grammarFunctor.ml[579,14978+22]..src/grammarFunctor.ml[579,14978+28])
                                                            Texp_ident "length/1709"
                                                          expression (src/grammarFunctor.ml[580,15010+6]..src/grammarFunctor.ml[587,15209+9])
                                                            Texp_sequence
                                                            expression (src/grammarFunctor.ml[580,15010+6]..src/grammarFunctor.ml[583,15092+9])
                                                              Texp_ifthenelse
                                                              expression (src/grammarFunctor.ml[580,15010+9]..src/grammarFunctor.ml[580,15010+16])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[580,15010+11]..src/grammarFunctor.ml[580,15010+12])
                                                                  Texp_ident "Stdlib!.="
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[580,15010+9]..src/grammarFunctor.ml[580,15010+10])
                                                                      Texp_ident "i/1714"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[580,15010+13]..src/grammarFunctor.ml[580,15010+16])
                                                                      Texp_ident "dot/1707"
                                                                ]
                                                              expression (src/grammarFunctor.ml[580,15010+22]..src/grammarFunctor.ml[583,15092+9])
                                                                Texp_sequence
                                                                expression (src/grammarFunctor.ml[581,15038+8]..src/grammarFunctor.ml[581,15038+18])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[581,15038+8]..src/grammarFunctor.ml[581,15038+16])
                                                                    Texp_ident "separate/1711"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[581,15038+16]..src/grammarFunctor.ml[581,15038+18])
                                                                        Texp_construct "()"
                                                                        []
                                                                  ]
                                                                expression (src/grammarFunctor.ml[582,15058+8]..src/grammarFunctor.ml[582,15058+33])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[582,15058+8]..src/grammarFunctor.ml[582,15058+22])
                                                                    Texp_ident "Stdlib!.Printf.bprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[582,15058+23]..src/grammarFunctor.ml[582,15058+29])
                                                                        Texp_ident "buffer/1703"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                            [
                                                                              expression (src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33]) ghost
                                                                                Texp_constant Const_char 2e
                                                                              expression (src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                []
                                                                            ]
                                                                          expression (src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33]) ghost
                                                                            Texp_constant Const_string(".",(src/grammarFunctor.ml[582,15058+30]..src/grammarFunctor.ml[582,15058+33]) ghost,None)
                                                                        ]
                                                                  ]
                                                              None
                                                            expression (src/grammarFunctor.ml[584,15103+6]..src/grammarFunctor.ml[587,15209+9])
                                                              Texp_ifthenelse
                                                              expression (src/grammarFunctor.ml[584,15103+9]..src/grammarFunctor.ml[584,15103+19])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[584,15103+11]..src/grammarFunctor.ml[584,15103+12])
                                                                  Texp_ident "Stdlib!.<"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[584,15103+9]..src/grammarFunctor.ml[584,15103+10])
                                                                      Texp_ident "i/1714"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[584,15103+13]..src/grammarFunctor.ml[584,15103+19])
                                                                      Texp_ident "length/1709"
                                                                ]
                                                              expression (src/grammarFunctor.ml[584,15103+25]..src/grammarFunctor.ml[587,15209+9])
                                                                Texp_sequence
                                                                expression (src/grammarFunctor.ml[585,15134+8]..src/grammarFunctor.ml[585,15134+18])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[585,15134+8]..src/grammarFunctor.ml[585,15134+16])
                                                                    Texp_ident "separate/1711"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[585,15134+16]..src/grammarFunctor.ml[585,15134+18])
                                                                        Texp_construct "()"
                                                                        []
                                                                  ]
                                                                expression (src/grammarFunctor.ml[586,15154+8]..src/grammarFunctor.ml[586,15154+54])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[586,15154+8]..src/grammarFunctor.ml[586,15154+22])
                                                                    Texp_ident "Stdlib!.Printf.bprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[586,15154+23]..src/grammarFunctor.ml[586,15154+29])
                                                                        Texp_ident "buffer/1703"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                                            [
                                                                              expression (src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                []
                                                                              expression (src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                []
                                                                            ]
                                                                          expression (src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34]) ghost
                                                                            Texp_constant Const_string("%s",(src/grammarFunctor.ml[586,15154+30]..src/grammarFunctor.ml[586,15154+34]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[586,15154+35]..src/grammarFunctor.ml[586,15154+54])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[586,15154+36]..src/grammarFunctor.ml[586,15154+41])
                                                                          Texp_ident "print/1696"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[586,15154+42]..src/grammarFunctor.ml[586,15154+53])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[586,15154+42]..src/grammarFunctor.ml[586,15154+53]) ghost
                                                                                Texp_ident "Stdlib!.Array.get"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[586,15154+42]..src/grammarFunctor.ml[586,15154+49])
                                                                                    Texp_ident "symbols/1708"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[586,15154+51]..src/grammarFunctor.ml[586,15154+52])
                                                                                    Texp_ident "i/1714"
                                                                              ]
                                                                        ]
                                                                  ]
                                                              None
                                                        expression (src/grammarFunctor.ml[589,15229+4]..src/grammarFunctor.ml[591,15292+5])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[589,15229+8]..src/grammarFunctor.ml[589,15229+9])
                                                                Tpat_var "s/1715"
                                                              expression (src/grammarFunctor.ml[589,15229+12]..src/grammarFunctor.ml[589,15229+34])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[589,15229+12]..src/grammarFunctor.ml[589,15229+27])
                                                                  Texp_ident "Stdlib!.Buffer.contents"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[589,15229+28]..src/grammarFunctor.ml[589,15229+34])
                                                                      Texp_ident "buffer/1703"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[590,15267+4]..src/grammarFunctor.ml[591,15292+5])
                                                            Texp_sequence
                                                            expression (src/grammarFunctor.ml[590,15267+4]..src/grammarFunctor.ml[590,15267+23])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[590,15267+4]..src/grammarFunctor.ml[590,15267+16])
                                                                Texp_ident "Stdlib!.Buffer.clear"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[590,15267+17]..src/grammarFunctor.ml[590,15267+23])
                                                                    Texp_ident "buffer/1703"
                                                              ]
                                                            expression (src/grammarFunctor.ml[591,15292+4]..src/grammarFunctor.ml[591,15292+5])
                                                              Texp_ident "s/1715"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[593,15299+2]..src/grammarFunctor.ml[594,15330+32])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[593,15299+6]..src/grammarFunctor.ml[593,15299+13])
                                Tpat_var "printao/1716"
                              expression (src/grammarFunctor.ml[593,15299+14]..src/grammarFunctor.ml[594,15330+32]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[593,15299+14]..src/grammarFunctor.ml[593,15299+20])
                                      Tpat_var "offset/1718"
                                    expression (src/grammarFunctor.ml[593,15299+21]..src/grammarFunctor.ml[594,15330+32]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[593,15299+21]..src/grammarFunctor.ml[593,15299+28])
                                            Tpat_var "symbols/1719"
                                          expression (src/grammarFunctor.ml[594,15330+4]..src/grammarFunctor.ml[594,15330+32])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[594,15330+4]..src/grammarFunctor.ml[594,15330+12])
                                              Texp_ident "printaod/1704"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[594,15330+13]..src/grammarFunctor.ml[594,15330+19])
                                                  Texp_ident "offset/1718"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[594,15330+20]..src/grammarFunctor.ml[594,15330+24])
                                                  Texp_constant Const_int -1
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[594,15330+25]..src/grammarFunctor.ml[594,15330+32])
                                                  Texp_ident "symbols/1719"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[596,15364+2]..src/grammarFunctor.ml[597,15387+21])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[596,15364+6]..src/grammarFunctor.ml[596,15364+12])
                                Tpat_var "printa/1720"
                              expression (src/grammarFunctor.ml[596,15364+13]..src/grammarFunctor.ml[597,15387+21]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[596,15364+13]..src/grammarFunctor.ml[596,15364+20])
                                      Tpat_var "symbols/1722"
                                    expression (src/grammarFunctor.ml[597,15387+4]..src/grammarFunctor.ml[597,15387+21])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[597,15387+4]..src/grammarFunctor.ml[597,15387+11])
                                        Texp_ident "printao/1716"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[597,15387+12]..src/grammarFunctor.ml[597,15387+13])
                                            Texp_constant Const_int 0
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[597,15387+14]..src/grammarFunctor.ml[597,15387+21])
                                            Texp_ident "symbols/1722"
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[599,15410+2]..src/grammarFunctor.ml[600,15433+34])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[599,15410+6]..src/grammarFunctor.ml[599,15410+12])
                                Tpat_var "printl/1723"
                              expression (src/grammarFunctor.ml[599,15410+13]..src/grammarFunctor.ml[600,15433+34]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[599,15410+13]..src/grammarFunctor.ml[599,15410+20])
                                      Tpat_var "symbols/1725"
                                    expression (src/grammarFunctor.ml[600,15433+4]..src/grammarFunctor.ml[600,15433+34])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[600,15433+4]..src/grammarFunctor.ml[600,15433+10])
                                        Texp_ident "printa/1720"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[600,15433+11]..src/grammarFunctor.ml[600,15433+34])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[600,15433+12]..src/grammarFunctor.ml[600,15433+25])
                                              Texp_ident "Stdlib!.Array.of_list"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[600,15433+26]..src/grammarFunctor.ml[600,15433+33])
                                                  Texp_ident "symbols/1725"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[602,15469+2]..src/grammarFunctor.ml[609,15620+20])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[602,15469+6]..src/grammarFunctor.ml[602,15469+12])
                                Tpat_var "lookup/1726"
                              expression (src/grammarFunctor.ml[602,15469+13]..src/grammarFunctor.ml[609,15620+20]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[602,15469+13]..src/grammarFunctor.ml[602,15469+17])
                                      Tpat_var "name/1728"
                                    expression (src/grammarFunctor.ml[603,15489+4]..src/grammarFunctor.ml[609,15620+20])
                                      Texp_try
                                      expression (src/grammarFunctor.ml[604,15497+6]..src/grammarFunctor.ml[604,15497+30])
                                        Texp_construct "T"
                                        [
                                          expression (src/grammarFunctor.ml[604,15497+8]..src/grammarFunctor.ml[604,15497+30])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[604,15497+9]..src/grammarFunctor.ml[604,15497+24])
                                              Texp_ident "Terminal/1588.lookup"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[604,15497+25]..src/grammarFunctor.ml[604,15497+29])
                                                  Texp_ident "name/1728"
                                            ]
                                        ]
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[605,15528+9]..src/grammarFunctor.ml[605,15528+18])
                                            Tpat_construct "Not_found"
                                            []
                                            None
                                          expression (src/grammarFunctor.ml[606,15550+6]..src/grammarFunctor.ml[609,15620+20])
                                            Texp_try
                                            expression (src/grammarFunctor.ml[607,15560+8]..src/grammarFunctor.ml[607,15560+35])
                                              Texp_construct "N"
                                              [
                                                expression (src/grammarFunctor.ml[607,15560+10]..src/grammarFunctor.ml[607,15560+35])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[607,15560+11]..src/grammarFunctor.ml[607,15560+29])
                                                    Texp_ident "Nonterminal/1110.lookup"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[607,15560+30]..src/grammarFunctor.ml[607,15560+34])
                                                        Texp_ident "name/1728"
                                                  ]
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[608,15596+11]..src/grammarFunctor.ml[608,15596+20])
                                                  Tpat_construct "Not_found"
                                                  []
                                                  None
                                                expression (src/grammarFunctor.ml[609,15620+8]..src/grammarFunctor.ml[609,15620+20])
                                                  Texp_assert                                                  expression (src/grammarFunctor.ml[609,15620+15]..src/grammarFunctor.ml[609,15620+20])
                                                    Texp_construct "false"
                                                    []
                                            ]
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[615,15726+0]..src/grammarFunctor.ml[637,16083+3])
                  Tstr_module
                  SymbolSet/1972
                    module_expr (src/grammarFunctor.ml[615,15726+19]..src/grammarFunctor.ml[637,16083+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[617,15753+2]..src/grammarFunctor.ml[617,15753+26])
                          Tstr_include                          module_expr (src/grammarFunctor.ml[617,15753+10]..src/grammarFunctor.ml[617,15753+26])
                            Tmod_apply
                            module_expr (src/grammarFunctor.ml[617,15753+10]..src/grammarFunctor.ml[617,15753+18])
                              module_expr (src/grammarFunctor.ml[617,15753+10]..src/grammarFunctor.ml[617,15753+18])
                                Tmod_ident "Stdlib!.Set.Make"
                            module_expr (src/grammarFunctor.ml[617,15753+19]..src/grammarFunctor.ml[617,15753+25])
                              Tmod_ident "Symbol/1729"
                        structure_item (src/grammarFunctor.ml[619,15781+2]..src/grammarFunctor.ml[620,15803+36])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[619,15781+6]..src/grammarFunctor.ml[619,15781+11])
                                Tpat_var "print/1876"
                              expression (src/grammarFunctor.ml[619,15781+12]..src/grammarFunctor.ml[620,15803+36]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[619,15781+12]..src/grammarFunctor.ml[619,15781+19])
                                      Tpat_var "symbols/1877"
                                    expression (src/grammarFunctor.ml[620,15803+4]..src/grammarFunctor.ml[620,15803+36])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[620,15803+4]..src/grammarFunctor.ml[620,15803+17])
                                        Texp_ident "Symbol/1729.printl"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[620,15803+18]..src/grammarFunctor.ml[620,15803+36])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[620,15803+19]..src/grammarFunctor.ml[620,15803+27])
                                              Texp_ident "elements/1842"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[620,15803+28]..src/grammarFunctor.ml[620,15803+35])
                                                  Texp_ident "symbols/1877"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[625,15984+2]..src/grammarFunctor.ml[626,16002+5])
                          Tstr_type Rec
                          [
                            type_declaration property/1968 (src/grammarFunctor.ml[625,15984+2]..src/grammarFunctor.ml[626,16002+5])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_abstract
                              ptype_private = Public
                              ptype_manifest =
                                Some
                                  core_type (src/grammarFunctor.ml[626,16002+4]..src/grammarFunctor.ml[626,16002+5])
                                    Ttyp_constr "t/1832"
                                    []
                          ]
                        structure_item (src/grammarFunctor.ml[628,16009+2]..src/grammarFunctor.ml[629,16024+9])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[628,16009+6]..src/grammarFunctor.ml[628,16009+12])
                                Tpat_var "bottom/1969"
                              expression (src/grammarFunctor.ml[629,16024+4]..src/grammarFunctor.ml[629,16024+9])
                                Texp_ident "empty/1833"
                          ]
                        structure_item (src/grammarFunctor.ml[631,16035+2]..src/grammarFunctor.ml[632,16047+10])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[631,16035+6]..src/grammarFunctor.ml[631,16035+9])
                                Tpat_var "leq/1970"
                              expression (src/grammarFunctor.ml[632,16047+4]..src/grammarFunctor.ml[632,16047+10])
                                Texp_ident "subset/1866"
                          ]
                        structure_item (src/grammarFunctor.ml[634,16059+2]..src/grammarFunctor.ml[635,16072+9])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[634,16059+6]..src/grammarFunctor.ml[634,16059+10])
                                Tpat_var "join/1971"
                              expression (src/grammarFunctor.ml[635,16072+4]..src/grammarFunctor.ml[635,16072+9])
                                Texp_ident "union/1837"
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[641,16114+0]..src/grammarFunctor.ml[660,16454+3])
                  Tstr_module
                  SymbolMap/2227
                    module_expr (src/grammarFunctor.ml[641,16114+19]..src/grammarFunctor.ml[660,16454+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[643,16141+2]..src/grammarFunctor.ml[643,16141+26])
                          Tstr_include                          module_expr (src/grammarFunctor.ml[643,16141+10]..src/grammarFunctor.ml[643,16141+26])
                            Tmod_apply
                            module_expr (src/grammarFunctor.ml[643,16141+10]..src/grammarFunctor.ml[643,16141+18])
                              module_expr (src/grammarFunctor.ml[643,16141+10]..src/grammarFunctor.ml[643,16141+18])
                                Tmod_ident "Stdlib!.Map.Make"
                            module_expr (src/grammarFunctor.ml[643,16141+19]..src/grammarFunctor.ml[643,16141+25])
                              Tmod_ident "Symbol/1729"
                        structure_item (src/grammarFunctor.ml[645,16169+2]..src/grammarFunctor.ml[648,16238+10])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[645,16169+6]..src/grammarFunctor.ml[645,16169+12])
                                Tpat_var "domain/2119"
                              expression (src/grammarFunctor.ml[645,16169+13]..src/grammarFunctor.ml[648,16238+10]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[645,16169+13]..src/grammarFunctor.ml[645,16169+14])
                                      Tpat_var "m/2121"
                                    expression (src/grammarFunctor.ml[646,16186+4]..src/grammarFunctor.ml[648,16238+10])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[646,16186+4]..src/grammarFunctor.ml[646,16186+8])
                                        Texp_ident "fold/2099"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[646,16186+9]..src/grammarFunctor.ml[648,16238+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[646,16186+14]..src/grammarFunctor.ml[646,16186+20])
                                                  Tpat_var "symbol/2122"
                                                expression (src/grammarFunctor.ml[646,16186+21]..src/grammarFunctor.ml[647,16217+20]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[646,16186+21]..src/grammarFunctor.ml[646,16186+22])
                                                        Tpat_any
                                                      expression (src/grammarFunctor.ml[646,16186+23]..src/grammarFunctor.ml[647,16217+20]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[646,16186+23]..src/grammarFunctor.ml[646,16186+27])
                                                              Tpat_var "accu/2123"
                                                            expression (src/grammarFunctor.ml[647,16217+6]..src/grammarFunctor.ml[647,16217+20])
                                                              Texp_construct "::"
                                                              [
                                                                expression (src/grammarFunctor.ml[647,16217+6]..src/grammarFunctor.ml[647,16217+12])
                                                                  Texp_ident "symbol/2122"
                                                                expression (src/grammarFunctor.ml[647,16217+16]..src/grammarFunctor.ml[647,16217+20])
                                                                  Texp_ident "accu/2123"
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[648,16238+6]..src/grammarFunctor.ml[648,16238+7])
                                            Texp_ident "m/2121"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[648,16238+8]..src/grammarFunctor.ml[648,16238+10])
                                            Texp_construct "[]"
                                            []
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[650,16250+2]..src/grammarFunctor.ml[653,16325+14])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[650,16250+6]..src/grammarFunctor.ml[650,16250+10])
                                Tpat_var "init/2215"
                              expression (src/grammarFunctor.ml[650,16250+11]..src/grammarFunctor.ml[653,16325+14]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[650,16250+11]..src/grammarFunctor.ml[650,16250+12])
                                      Tpat_var "f/2217"
                                    expression (src/grammarFunctor.ml[650,16250+13]..src/grammarFunctor.ml[653,16325+14]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[650,16250+13]..src/grammarFunctor.ml[650,16250+15])
                                            Tpat_var "xs/2218"
                                          expression (src/grammarFunctor.ml[651,16268+4]..src/grammarFunctor.ml[653,16325+14])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[651,16268+4]..src/grammarFunctor.ml[651,16268+18])
                                              Texp_ident "Stdlib!.List.fold_left"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[651,16268+19]..src/grammarFunctor.ml[653,16325+5])
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[651,16268+24]..src/grammarFunctor.ml[651,16268+28])
                                                        Tpat_var "accu/2219"
                                                      expression (src/grammarFunctor.ml[651,16268+29]..src/grammarFunctor.ml[652,16302+22]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[651,16268+29]..src/grammarFunctor.ml[651,16268+30])
                                                              Tpat_var "x/2220"
                                                            expression (src/grammarFunctor.ml[652,16302+6]..src/grammarFunctor.ml[652,16302+22])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[652,16302+6]..src/grammarFunctor.ml[652,16302+9])
                                                                Texp_ident "add/2077"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[652,16302+10]..src/grammarFunctor.ml[652,16302+11])
                                                                    Texp_ident "x/2220"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[652,16302+12]..src/grammarFunctor.ml[652,16302+17])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[652,16302+13]..src/grammarFunctor.ml[652,16302+14])
                                                                      Texp_ident "f/2217"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[652,16302+15]..src/grammarFunctor.ml[652,16302+16])
                                                                          Texp_ident "x/2220"
                                                                    ]
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[652,16302+18]..src/grammarFunctor.ml[652,16302+22])
                                                                    Texp_ident "accu/2219"
                                                              ]
                                                        ]
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[653,16325+6]..src/grammarFunctor.ml[653,16325+11])
                                                  Texp_ident "empty/2076"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[653,16325+12]..src/grammarFunctor.ml[653,16325+14])
                                                  Texp_ident "xs/2218"
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[655,16341+2]..src/grammarFunctor.ml[658,16440+12])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[655,16341+6]..src/grammarFunctor.ml[655,16341+23])
                                Tpat_var "purelynonterminal/2221"
                              expression (src/grammarFunctor.ml[655,16341+24]..src/grammarFunctor.ml[658,16440+12]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[655,16341+24]..src/grammarFunctor.ml[655,16341+25])
                                      Tpat_var "m/2223"
                                    expression (src/grammarFunctor.ml[656,16369+4]..src/grammarFunctor.ml[658,16440+12])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[656,16369+4]..src/grammarFunctor.ml[656,16369+8])
                                        Texp_ident "fold/2099"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[656,16369+9]..src/grammarFunctor.ml[658,16440+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[656,16369+14]..src/grammarFunctor.ml[656,16369+20])
                                                  Tpat_var "symbol/2224"
                                                expression (src/grammarFunctor.ml[656,16369+21]..src/grammarFunctor.ml[657,16400+39]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[656,16369+21]..src/grammarFunctor.ml[656,16369+22])
                                                        Tpat_any
                                                      expression (src/grammarFunctor.ml[656,16369+23]..src/grammarFunctor.ml[657,16400+39]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[656,16369+23]..src/grammarFunctor.ml[656,16369+27])
                                                              Tpat_var "accu/2225"
                                                            expression (src/grammarFunctor.ml[657,16400+6]..src/grammarFunctor.ml[657,16400+39])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[657,16400+11]..src/grammarFunctor.ml[657,16400+13])
                                                                Texp_ident "Stdlib!.&&"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[657,16400+6]..src/grammarFunctor.ml[657,16400+10])
                                                                    Texp_ident "accu/2225"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[657,16400+14]..src/grammarFunctor.ml[657,16400+39])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[657,16400+14]..src/grammarFunctor.ml[657,16400+32])
                                                                      Texp_ident "Symbol/1729.nonterminal"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[657,16400+33]..src/grammarFunctor.ml[657,16400+39])
                                                                          Texp_ident "symbol/2224"
                                                                    ]
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[658,16440+6]..src/grammarFunctor.ml[658,16440+7])
                                            Texp_ident "m/2223"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[658,16440+8]..src/grammarFunctor.ml[658,16440+12])
                                            Texp_construct "true"
                                            []
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[665,16558+0]..src/grammarFunctor.ml[1003,26405+3])
                  Tstr_module
                  Production/2648
                    module_expr (src/grammarFunctor.ml[665,16558+20]..src/grammarFunctor.ml[1003,26405+3])
                      module_expr (src/grammarFunctor.ml[665,16558+20]..src/grammarFunctor.ml[1003,26405+3])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[667,16586+2]..src/grammarFunctor.ml[668,16601+9])
                            Tstr_type Rec
                            [
                              type_declaration index/2228 (src/grammarFunctor.ml[667,16586+2]..src/grammarFunctor.ml[668,16601+9])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ttype_abstract
                                ptype_private = Public
                                ptype_manifest =
                                  Some
                                    core_type (src/grammarFunctor.ml[668,16601+6]..src/grammarFunctor.ml[668,16601+9])
                                      Ttyp_constr "int/1!"
                                      []
                            ]
                          structure_item (src/grammarFunctor.ml[670,16612+2]..src/grammarFunctor.ml[671,16628+7])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[670,16612+6]..src/grammarFunctor.ml[670,16612+13])
                                  Tpat_var "compare/2229"
                                expression (src/grammarFunctor.ml[671,16628+4]..src/grammarFunctor.ml[671,16628+7])
                                  Texp_ident "Stdlib!.-"
                            ]
                          structure_item (src/grammarFunctor.ml[679,16844+2]..src/grammarFunctor.ml[685,17081+48])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[679,16844+6]..src/grammarFunctor.ml[679,16844+7])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[679,16844+10]..src/grammarFunctor.ml[679,16844+13])
                                      Ttyp_constr "int/1!"
                                      []
                                  Tpat_alias "n/2230"
                                  pattern (src/grammarFunctor.ml[679,16844+6]..src/grammarFunctor.ml[679,16844+7])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[680,16860+4]..src/grammarFunctor.ml[685,17081+48])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[679,16844+10]..src/grammarFunctor.ml[679,16844+13])
                                      Ttyp_constr "int/1!"
                                      []
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[680,16860+8]..src/grammarFunctor.ml[680,16860+9])
                                        Tpat_var "n/2231"
                                      expression (src/grammarFunctor.ml[680,16860+12]..src/grammarFunctor.ml[682,16954+21])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[680,16860+12]..src/grammarFunctor.ml[680,16860+26])
                                          Texp_ident "Dune__exe!.StringMap.fold"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[680,16860+27]..src/grammarFunctor.ml[682,16954+5])
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[680,16860+32]..src/grammarFunctor.ml[680,16860+33])
                                                    Tpat_any
                                                  expression (src/grammarFunctor.ml[680,16860+34]..src/grammarFunctor.ml[681,16923+30]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[680,16860+34]..src/grammarFunctor.ml[680,16860+57])
                                                          Tpat_record
                                                          [
                                                            "branches"
                                                              pattern (src/grammarFunctor.ml[680,16860+47]..src/grammarFunctor.ml[680,16860+55])
                                                                Tpat_var "branches/2232"
                                                          ]
                                                        expression (src/grammarFunctor.ml[680,16860+58]..src/grammarFunctor.ml[681,16923+30]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[680,16860+58]..src/grammarFunctor.ml[680,16860+59])
                                                                Tpat_var "n/2233"
                                                              expression (src/grammarFunctor.ml[681,16923+6]..src/grammarFunctor.ml[681,16923+30])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[681,16923+8]..src/grammarFunctor.ml[681,16923+9])
                                                                  Texp_ident "Stdlib!.+"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[681,16923+6]..src/grammarFunctor.ml[681,16923+7])
                                                                      Texp_ident "n/2233"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[681,16923+10]..src/grammarFunctor.ml[681,16923+30])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[681,16923+10]..src/grammarFunctor.ml[681,16923+21])
                                                                        Texp_ident "Stdlib!.List.length"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[681,16923+22]..src/grammarFunctor.ml[681,16923+30])
                                                                            Texp_ident "branches/2232"
                                                                      ]
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[682,16954+6]..src/grammarFunctor.ml[682,16954+19])
                                              Texp_field
                                              expression (src/grammarFunctor.ml[682,16954+6]..src/grammarFunctor.ml[682,16954+13])
                                                Texp_ident "G/488.grammar"
                                              "rules"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[682,16954+20]..src/grammarFunctor.ml[682,16954+21])
                                              Texp_constant Const_int 0
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[683,16979+4]..src/grammarFunctor.ml[685,17081+48])
                                    Texp_sequence
                                    expression (src/grammarFunctor.ml[683,16979+4]..src/grammarFunctor.ml[684,16999+80])
                                      Texp_ifthenelse
                                      expression (src/grammarFunctor.ml[683,16979+7]..src/grammarFunctor.ml[683,16979+14])
                                        Texp_ident "G/488.verbose"
                                      expression (src/grammarFunctor.ml[684,16999+6]..src/grammarFunctor.ml[684,16999+80])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[684,16999+6]..src/grammarFunctor.ml[684,16999+16])
                                          Texp_ident "Dune__exe!.Error.logG"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[684,16999+17]..src/grammarFunctor.ml[684,16999+18])
                                              Texp_constant Const_int 1
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[684,16999+19]..src/grammarFunctor.ml[684,16999+80])
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[684,16999+24]..src/grammarFunctor.ml[684,16999+25])
                                                    Tpat_var "f/2236"
                                                  expression (src/grammarFunctor.ml[684,16999+29]..src/grammarFunctor.ml[684,16999+79])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[684,16999+29]..src/grammarFunctor.ml[684,16999+43])
                                                      Texp_ident "Stdlib!.Printf.fprintf"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[684,16999+44]..src/grammarFunctor.ml[684,16999+45])
                                                          Texp_ident "f/2236"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77])
                                                          Texp_construct "CamlinternalFormatBasics.Format"
                                                          [
                                                            expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                              [
                                                                expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                  Texp_constant Const_string("Grammar has ",(src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost,None)
                                                                expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Int"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                      []
                                                                    expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                      []
                                                                    expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                          Texp_constant Const_string(" productions.\n",(src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost,None)
                                                                        expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                          []
                                                                      ]
                                                                  ]
                                                              ]
                                                            expression (src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost
                                                              Texp_constant Const_string("Grammar has %d productions.\n",(src/grammarFunctor.ml[684,16999+46]..src/grammarFunctor.ml[684,16999+77]) ghost,None)
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[684,16999+78]..src/grammarFunctor.ml[684,16999+79])
                                                          Texp_ident "n/2231"
                                                    ]
                                              ]
                                        ]
                                      None
                                    expression (src/grammarFunctor.ml[685,17081+4]..src/grammarFunctor.ml[685,17081+48])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[685,17081+6]..src/grammarFunctor.ml[685,17081+7])
                                        Texp_ident "Stdlib!.+"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[685,17081+4]..src/grammarFunctor.ml[685,17081+5])
                                            Texp_ident "n/2231"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[685,17081+8]..src/grammarFunctor.ml[685,17081+48])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[685,17081+8]..src/grammarFunctor.ml[685,17081+26])
                                              Texp_ident "Dune__exe!.StringSet.cardinal"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[685,17081+27]..src/grammarFunctor.ml[685,17081+48])
                                                  Texp_field
                                                  expression (src/grammarFunctor.ml[685,17081+27]..src/grammarFunctor.ml[685,17081+34])
                                                    Texp_ident "G/488.grammar"
                                                  "start_symbols"
                                            ]
                                      ]
                            ]
                          structure_item (src/grammarFunctor.ml[687,17131+2]..src/grammarFunctor.ml[688,17148+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[687,17131+6]..src/grammarFunctor.ml[687,17131+9])
                                  Tpat_var "p2i/2237"
                                expression (src/grammarFunctor.ml[687,17131+10]..src/grammarFunctor.ml[688,17148+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[687,17131+10]..src/grammarFunctor.ml[687,17131+14])
                                        Tpat_var "prod/2239"
                                      expression (src/grammarFunctor.ml[688,17148+4]..src/grammarFunctor.ml[688,17148+8])
                                        Texp_ident "prod/2239"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[690,17158+2]..src/grammarFunctor.ml[692,17211+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[690,17158+6]..src/grammarFunctor.ml[690,17158+9])
                                  Tpat_var "i2p/2240"
                                expression (src/grammarFunctor.ml[690,17158+10]..src/grammarFunctor.ml[692,17211+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[690,17158+10]..src/grammarFunctor.ml[690,17158+14])
                                        Tpat_var "prod/2242"
                                      expression (src/grammarFunctor.ml[691,17175+4]..src/grammarFunctor.ml[692,17211+8])
                                        Texp_sequence
                                        expression (src/grammarFunctor.ml[691,17175+4]..src/grammarFunctor.ml[691,17175+34])
                                          Texp_assert                                          expression (src/grammarFunctor.ml[691,17175+11]..src/grammarFunctor.ml[691,17175+34])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[691,17175+22]..src/grammarFunctor.ml[691,17175+24])
                                              Texp_ident "Stdlib!.&&"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[691,17175+12]..src/grammarFunctor.ml[691,17175+21])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[691,17175+17]..src/grammarFunctor.ml[691,17175+19])
                                                    Texp_ident "Stdlib!.>="
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[691,17175+12]..src/grammarFunctor.ml[691,17175+16])
                                                        Texp_ident "prod/2242"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[691,17175+20]..src/grammarFunctor.ml[691,17175+21])
                                                        Texp_constant Const_int 0
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[691,17175+25]..src/grammarFunctor.ml[691,17175+33])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[691,17175+30]..src/grammarFunctor.ml[691,17175+31])
                                                    Texp_ident "Stdlib!.<"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[691,17175+25]..src/grammarFunctor.ml[691,17175+29])
                                                        Texp_ident "prod/2242"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[691,17175+32]..src/grammarFunctor.ml[691,17175+33])
                                                        Texp_ident "n/2230"
                                                  ]
                                            ]
                                        expression (src/grammarFunctor.ml[692,17211+4]..src/grammarFunctor.ml[692,17211+8])
                                          Texp_ident "prod/2242"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[708,18080+2]..src/grammarFunctor.ml[709,18135+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[708,18080+6]..src/grammarFunctor.ml[708,18080+11])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[708,18080+14]..src/grammarFunctor.ml[708,18080+52])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[708,18080+15]..src/grammarFunctor.ml[708,18080+45])
                                          Ttyp_tuple
                                          [
                                            core_type (src/grammarFunctor.ml[708,18080+15]..src/grammarFunctor.ml[708,18080+28])
                                              Ttyp_constr "Nonterminal/1110.t"
                                              []
                                            core_type (src/grammarFunctor.ml[708,18080+31]..src/grammarFunctor.ml[708,18080+45])
                                              Ttyp_constr "array/8!"
                                              [
                                                core_type (src/grammarFunctor.ml[708,18080+31]..src/grammarFunctor.ml[708,18080+39])
                                                  Ttyp_constr "Symbol/1729.t"
                                                  []
                                              ]
                                          ]
                                      ]
                                  Tpat_alias "table/2243"
                                  pattern (src/grammarFunctor.ml[708,18080+6]..src/grammarFunctor.ml[708,18080+11])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[709,18135+4]..src/grammarFunctor.ml[709,18135+27])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[708,18080+14]..src/grammarFunctor.ml[708,18080+52])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[708,18080+15]..src/grammarFunctor.ml[708,18080+45])
                                          Ttyp_tuple
                                          [
                                            core_type (src/grammarFunctor.ml[708,18080+15]..src/grammarFunctor.ml[708,18080+28])
                                              Ttyp_constr "Nonterminal/1110.t"
                                              []
                                            core_type (src/grammarFunctor.ml[708,18080+31]..src/grammarFunctor.ml[708,18080+45])
                                              Ttyp_constr "array/8!"
                                              [
                                                core_type (src/grammarFunctor.ml[708,18080+31]..src/grammarFunctor.ml[708,18080+39])
                                                  Ttyp_constr "Symbol/1729.t"
                                                  []
                                              ]
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[709,18135+4]..src/grammarFunctor.ml[709,18135+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[709,18135+15]..src/grammarFunctor.ml[709,18135+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[709,18135+17]..src/grammarFunctor.ml[709,18135+27])
                                        Texp_tuple
                                        [
                                          expression (src/grammarFunctor.ml[709,18135+18]..src/grammarFunctor.ml[709,18135+20])
                                            Texp_constant Const_int -1
                                          expression (src/grammarFunctor.ml[709,18135+22]..src/grammarFunctor.ml[709,18135+26])
                                            Texp_array
                                            []
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[711,18164+2]..src/grammarFunctor.ml[712,18209+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[711,18164+6]..src/grammarFunctor.ml[711,18164+17])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+42])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+36])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+30])
                                              Ttyp_constr "Dune__exe!.Syntax.identifier"
                                              []
                                          ]
                                      ]
                                  Tpat_alias "identifiers/2244"
                                  pattern (src/grammarFunctor.ml[711,18164+6]..src/grammarFunctor.ml[711,18164+17])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[712,18209+4]..src/grammarFunctor.ml[712,18209+21])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+42])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+36])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[711,18164+20]..src/grammarFunctor.ml[711,18164+30])
                                              Ttyp_constr "Dune__exe!.Syntax.identifier"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[712,18209+4]..src/grammarFunctor.ml[712,18209+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[712,18209+15]..src/grammarFunctor.ml[712,18209+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[712,18209+17]..src/grammarFunctor.ml[712,18209+21])
                                        Texp_array
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[714,18232+2]..src/grammarFunctor.ml[715,18270+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[714,18232+6]..src/grammarFunctor.ml[714,18232+13])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+35])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+29])
                                          Ttyp_constr "option/10!"
                                          [
                                            core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+22])
                                              Ttyp_constr "Dune__exe!.Syntax.action"
                                              []
                                          ]
                                      ]
                                  Tpat_alias "actions/2245"
                                  pattern (src/grammarFunctor.ml[714,18232+6]..src/grammarFunctor.ml[714,18232+13])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[715,18270+4]..src/grammarFunctor.ml[715,18270+21])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+35])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+29])
                                          Ttyp_constr "option/10!"
                                          [
                                            core_type (src/grammarFunctor.ml[714,18232+16]..src/grammarFunctor.ml[714,18232+22])
                                              Ttyp_constr "Dune__exe!.Syntax.action"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[715,18270+4]..src/grammarFunctor.ml[715,18270+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[715,18270+15]..src/grammarFunctor.ml[715,18270+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[715,18270+17]..src/grammarFunctor.ml[715,18270+21])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[717,18293+2]..src/grammarFunctor.ml[718,18336+19])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[717,18293+6]..src/grammarFunctor.ml[717,18293+15])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+40])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+34])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+29])
                                              Ttyp_constr "Dune__exe!.Positions.t"
                                              []
                                          ]
                                      ]
                                  Tpat_alias "positions/2246"
                                  pattern (src/grammarFunctor.ml[717,18293+6]..src/grammarFunctor.ml[717,18293+15])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[718,18336+4]..src/grammarFunctor.ml[718,18336+19])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+40])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+34])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (src/grammarFunctor.ml[717,18293+18]..src/grammarFunctor.ml[717,18293+29])
                                              Ttyp_constr "Dune__exe!.Positions.t"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[718,18336+4]..src/grammarFunctor.ml[718,18336+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[718,18336+15]..src/grammarFunctor.ml[718,18336+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[718,18336+17]..src/grammarFunctor.ml[718,18336+19])
                                        Texp_construct "[]"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[720,18357+2]..src/grammarFunctor.ml[721,18412+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[720,18357+6]..src/grammarFunctor.ml[720,18357+20])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+52])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+46])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+40])
                                              Ttyp_constr "Dune__exe!.Syntax.attributes"
                                              []
                                          ]
                                      ]
                                  Tpat_alias "rhs_attributes/2247"
                                  pattern (src/grammarFunctor.ml[720,18357+6]..src/grammarFunctor.ml[720,18357+20])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[721,18412+4]..src/grammarFunctor.ml[721,18412+21])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+52])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+46])
                                          Ttyp_constr "array/8!"
                                          [
                                            core_type (src/grammarFunctor.ml[720,18357+23]..src/grammarFunctor.ml[720,18357+40])
                                              Ttyp_constr "Dune__exe!.Syntax.attributes"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[721,18412+4]..src/grammarFunctor.ml[721,18412+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[721,18412+15]..src/grammarFunctor.ml[721,18412+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[721,18412+17]..src/grammarFunctor.ml[721,18412+21])
                                        Texp_array
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[723,18435+2]..src/grammarFunctor.ml[724,18483+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[723,18435+6]..src/grammarFunctor.ml[723,18435+15])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+45])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+39])
                                          Ttyp_constr "option/10!"
                                          [
                                            core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+32])
                                              Ttyp_constr "Dune__exe!.Positions.located"
                                              [
                                                core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+24])
                                                  Ttyp_constr "Dune__exe!.Syntax.symbol"
                                                  []
                                              ]
                                          ]
                                      ]
                                  Tpat_alias "prec_decl/2248"
                                  pattern (src/grammarFunctor.ml[723,18435+6]..src/grammarFunctor.ml[723,18435+15])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[724,18483+4]..src/grammarFunctor.ml[724,18483+21])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+45])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+39])
                                          Ttyp_constr "option/10!"
                                          [
                                            core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+32])
                                              Ttyp_constr "Dune__exe!.Positions.located"
                                              [
                                                core_type (src/grammarFunctor.ml[723,18435+18]..src/grammarFunctor.ml[723,18435+24])
                                                  Ttyp_constr "Dune__exe!.Syntax.symbol"
                                                  []
                                              ]
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[724,18483+4]..src/grammarFunctor.ml[724,18483+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[724,18483+15]..src/grammarFunctor.ml[724,18483+16])
                                        Texp_ident "n/2230"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[724,18483+17]..src/grammarFunctor.ml[724,18483+21])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[726,18506+2]..src/grammarFunctor.ml[731,18842+22])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[726,18506+6]..src/grammarFunctor.ml[726,18506+22])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[726,18506+25]..src/grammarFunctor.ml[726,18506+54])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[726,18506+25]..src/grammarFunctor.ml[726,18506+48])
                                          Ttyp_constr "Dune__exe!.Syntax.branch_production_level"
                                          []
                                      ]
                                  Tpat_alias "production_level/2249"
                                  pattern (src/grammarFunctor.ml[726,18506+6]..src/grammarFunctor.ml[726,18506+22])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[730,18773+4]..src/grammarFunctor.ml[731,18842+22])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[726,18506+25]..src/grammarFunctor.ml[726,18506+54])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[726,18506+25]..src/grammarFunctor.ml[726,18506+48])
                                          Ttyp_constr "Dune__exe!.Syntax.branch_production_level"
                                          []
                                      ]
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[730,18773+8]..src/grammarFunctor.ml[730,18773+13])
                                        Tpat_var "dummy/2250"
                                      expression (src/grammarFunctor.ml[730,18773+16]..src/grammarFunctor.ml[730,18773+65])
                                        Texp_construct "ProductionLevel"
                                        [
                                          expression (src/grammarFunctor.ml[730,18773+33]..src/grammarFunctor.ml[730,18773+61])
                                            Texp_ident "Dune__exe!.InputFile.builtin_input_file"
                                          expression (src/grammarFunctor.ml[730,18773+63]..src/grammarFunctor.ml[730,18773+64])
                                            Texp_constant Const_int 0
                                        ]
                                  ]
                                  expression (src/grammarFunctor.ml[731,18842+4]..src/grammarFunctor.ml[731,18842+22])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[731,18842+4]..src/grammarFunctor.ml[731,18842+14])
                                      Texp_ident "Stdlib!.Array.make"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[731,18842+15]..src/grammarFunctor.ml[731,18842+16])
                                          Texp_ident "n/2230"
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[731,18842+17]..src/grammarFunctor.ml[731,18842+22])
                                          Texp_ident "dummy/2250"
                                    ]
                            ]
                          structure_item (src/grammarFunctor.ml[735,18947+2]..src/grammarFunctor.ml[736,18983+37])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[735,18947+6]..src/grammarFunctor.ml[735,18947+13])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[735,18947+16]..src/grammarFunctor.ml[735,18947+33])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[735,18947+17]..src/grammarFunctor.ml[735,18947+26])
                                          Ttyp_tuple
                                          [
                                            core_type (src/grammarFunctor.ml[735,18947+17]..src/grammarFunctor.ml[735,18947+20])
                                              Ttyp_constr "int/1!"
                                              []
                                            core_type (src/grammarFunctor.ml[735,18947+23]..src/grammarFunctor.ml[735,18947+26])
                                              Ttyp_constr "int/1!"
                                              []
                                          ]
                                      ]
                                  Tpat_alias "ntprods/2251"
                                  pattern (src/grammarFunctor.ml[735,18947+6]..src/grammarFunctor.ml[735,18947+13])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[736,18983+4]..src/grammarFunctor.ml[736,18983+37])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[735,18947+16]..src/grammarFunctor.ml[735,18947+33])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (src/grammarFunctor.ml[735,18947+17]..src/grammarFunctor.ml[735,18947+26])
                                          Ttyp_tuple
                                          [
                                            core_type (src/grammarFunctor.ml[735,18947+17]..src/grammarFunctor.ml[735,18947+20])
                                              Ttyp_constr "int/1!"
                                              []
                                            core_type (src/grammarFunctor.ml[735,18947+23]..src/grammarFunctor.ml[735,18947+26])
                                              Ttyp_constr "int/1!"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[736,18983+4]..src/grammarFunctor.ml[736,18983+14])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[736,18983+15]..src/grammarFunctor.ml[736,18983+28])
                                        Texp_ident "Nonterminal/1110.n"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[736,18983+29]..src/grammarFunctor.ml[736,18983+37])
                                        Texp_tuple
                                        [
                                          expression (src/grammarFunctor.ml[736,18983+30]..src/grammarFunctor.ml[736,18983+32])
                                            Texp_constant Const_int -1
                                          expression (src/grammarFunctor.ml[736,18983+34]..src/grammarFunctor.ml[736,18983+36])
                                            Texp_constant Const_int -1
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[740,19101+2]..src/grammarFunctor.ml[741,19134+13])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[740,19101+6]..src/grammarFunctor.ml[740,19101+30])
                                  Tpat_var "grammar_uses_error_token/2252"
                                expression (src/grammarFunctor.ml[741,19134+4]..src/grammarFunctor.ml[741,19134+13])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[741,19134+4]..src/grammarFunctor.ml[741,19134+7])
                                    Texp_ident "Stdlib!.ref"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[741,19134+8]..src/grammarFunctor.ml[741,19134+13])
                                        Texp_construct "false"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[748,19438+2]..src/grammarFunctor.ml[759,19880+53])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[748,19438+6]..src/grammarFunctor.ml[749,19459+43])
                                  Tpat_tuple
                                  [
                                    pattern (src/grammarFunctor.ml[748,19438+7]..src/grammarFunctor.ml[748,19438+12])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[748,19438+15]..src/grammarFunctor.ml[748,19438+18])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "start/2253"
                                      pattern (src/grammarFunctor.ml[748,19438+7]..src/grammarFunctor.ml[748,19438+12])
                                        Tpat_any
                                    pattern (src/grammarFunctor.ml[749,19459+7]..src/grammarFunctor.ml[749,19459+17])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[749,19459+20]..src/grammarFunctor.ml[749,19459+42])
                                          Ttyp_constr "NonterminalMap/1113.t"
                                          [
                                            core_type (src/grammarFunctor.ml[749,19459+20]..src/grammarFunctor.ml[749,19459+25])
                                              Ttyp_constr "index/2228"
                                              []
                                          ]
                                      Tpat_alias "startprods/2254"
                                      pattern (src/grammarFunctor.ml[749,19459+7]..src/grammarFunctor.ml[749,19459+17])
                                        Tpat_any
                                  ]
                                expression (src/grammarFunctor.ml[750,19505+4]..src/grammarFunctor.ml[759,19880+53])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[750,19505+4]..src/grammarFunctor.ml[750,19505+18])
                                    Texp_ident "Dune__exe!.StringSet.fold"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[750,19505+19]..src/grammarFunctor.ml[759,19880+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[750,19505+24]..src/grammarFunctor.ml[750,19505+35])
                                              Tpat_var "nonterminal/2255"
                                            expression (src/grammarFunctor.ml[750,19505+36]..src/grammarFunctor.ml[758,19839+40]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[750,19505+36]..src/grammarFunctor.ml[750,19505+51])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[750,19505+37]..src/grammarFunctor.ml[750,19505+38])
                                                        Tpat_var "k/2256"
                                                      pattern (src/grammarFunctor.ml[750,19505+40]..src/grammarFunctor.ml[750,19505+50])
                                                        Tpat_var "startprods/2257"
                                                    ]
                                                  expression (src/grammarFunctor.ml[751,19560+6]..src/grammarFunctor.ml[758,19839+40])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[751,19560+10]..src/grammarFunctor.ml[751,19560+12])
                                                          Tpat_var "nt/2258"
                                                        expression (src/grammarFunctor.ml[751,19560+15]..src/grammarFunctor.ml[751,19560+45])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[751,19560+15]..src/grammarFunctor.ml[751,19560+33])
                                                            Texp_ident "Nonterminal/1110.lookup"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[751,19560+34]..src/grammarFunctor.ml[751,19560+45])
                                                                Texp_ident "nonterminal/2255"
                                                          ]
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[752,19606+10]..src/grammarFunctor.ml[752,19606+13])
                                                          Tpat_var "nt'/2259"
                                                        expression (src/grammarFunctor.ml[752,19606+16]..src/grammarFunctor.ml[752,19606+54])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[752,19606+16]..src/grammarFunctor.ml[752,19606+34])
                                                            Texp_ident "Nonterminal/1110.lookup"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[752,19606+35]..src/grammarFunctor.ml[752,19606+54])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[752,19606+48]..src/grammarFunctor.ml[752,19606+49])
                                                                  Texp_ident "Stdlib!.^"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[752,19606+36]..src/grammarFunctor.ml[752,19606+47])
                                                                      Texp_ident "nonterminal/2255"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[752,19606+50]..src/grammarFunctor.ml[752,19606+53])
                                                                      Texp_constant Const_string("'",(src/grammarFunctor.ml[752,19606+51]..src/grammarFunctor.ml[752,19606+52]),None)
                                                                ]
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[753,19664+6]..src/grammarFunctor.ml[758,19839+40])
                                                      Texp_sequence
                                                      expression (src/grammarFunctor.ml[753,19664+6]..src/grammarFunctor.ml[753,19664+43])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[753,19664+6]..src/grammarFunctor.ml[753,19664+43]) ghost
                                                          Texp_ident "Stdlib!.Array.set"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[753,19664+6]..src/grammarFunctor.ml[753,19664+11])
                                                              Texp_ident "table/2243"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[753,19664+13]..src/grammarFunctor.ml[753,19664+14])
                                                              Texp_ident "k/2256"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[753,19664+19]..src/grammarFunctor.ml[753,19664+43])
                                                              Texp_tuple
                                                              [
                                                                expression (src/grammarFunctor.ml[753,19664+20]..src/grammarFunctor.ml[753,19664+23])
                                                                  Texp_ident "nt'/2259"
                                                                expression (src/grammarFunctor.ml[753,19664+25]..src/grammarFunctor.ml[753,19664+42])
                                                                  Texp_array
                                                                  [
                                                                    expression (src/grammarFunctor.ml[753,19664+28]..src/grammarFunctor.ml[753,19664+39])
                                                                      Texp_construct "Symbol.N"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[753,19664+37]..src/grammarFunctor.ml[753,19664+39])
                                                                          Texp_ident "nt/2258"
                                                                      ]
                                                                  ]
                                                              ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[754,19709+6]..src/grammarFunctor.ml[758,19839+40])
                                                        Texp_sequence
                                                        expression (src/grammarFunctor.ml[754,19709+6]..src/grammarFunctor.ml[754,19709+35])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[754,19709+6]..src/grammarFunctor.ml[754,19709+35]) ghost
                                                            Texp_ident "Stdlib!.Array.set"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[754,19709+6]..src/grammarFunctor.ml[754,19709+17])
                                                                Texp_ident "identifiers/2244"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[754,19709+19]..src/grammarFunctor.ml[754,19709+20])
                                                                Texp_ident "k/2256"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[754,19709+25]..src/grammarFunctor.ml[754,19709+35])
                                                                Texp_array
                                                                [
                                                                  expression (src/grammarFunctor.ml[754,19709+28]..src/grammarFunctor.ml[754,19709+32])
                                                                    Texp_constant Const_string("_1",(src/grammarFunctor.ml[754,19709+29]..src/grammarFunctor.ml[754,19709+31]),None)
                                                                ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[755,19746+6]..src/grammarFunctor.ml[758,19839+40])
                                                          Texp_sequence
                                                          expression (src/grammarFunctor.ml[755,19746+6]..src/grammarFunctor.ml[755,19746+31])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[755,19746+6]..src/grammarFunctor.ml[755,19746+31]) ghost
                                                              Texp_ident "Stdlib!.Array.set"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[755,19746+6]..src/grammarFunctor.ml[755,19746+13])
                                                                  Texp_ident "ntprods/2251"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[755,19746+15]..src/grammarFunctor.ml[755,19746+18])
                                                                  Texp_ident "nt'/2259"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[755,19746+23]..src/grammarFunctor.ml[755,19746+31])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/grammarFunctor.ml[755,19746+24]..src/grammarFunctor.ml[755,19746+25])
                                                                      Texp_ident "k/2256"
                                                                    expression (src/grammarFunctor.ml[755,19746+27]..src/grammarFunctor.ml[755,19746+30])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[755,19746+28]..src/grammarFunctor.ml[755,19746+29])
                                                                        Texp_ident "Stdlib!.+"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[755,19746+27]..src/grammarFunctor.ml[755,19746+28])
                                                                            Texp_ident "k/2256"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[755,19746+29]..src/grammarFunctor.ml[755,19746+30])
                                                                            Texp_constant Const_int 1
                                                                      ]
                                                                  ]
                                                            ]
                                                          expression (src/grammarFunctor.ml[756,19779+6]..src/grammarFunctor.ml[758,19839+40])
                                                            Texp_sequence
                                                            expression (src/grammarFunctor.ml[756,19779+6]..src/grammarFunctor.ml[756,19779+47])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[756,19779+6]..src/grammarFunctor.ml[756,19779+47]) ghost
                                                                Texp_ident "Stdlib!.Array.set"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[756,19779+6]..src/grammarFunctor.ml[756,19779+15])
                                                                    Texp_ident "positions/2246"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[756,19779+17]..src/grammarFunctor.ml[756,19779+18])
                                                                    Texp_ident "k/2256"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[756,19779+23]..src/grammarFunctor.ml[756,19779+47])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[756,19779+23]..src/grammarFunctor.ml[756,19779+44])
                                                                      Texp_ident "Nonterminal/1110.positions"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[756,19779+45]..src/grammarFunctor.ml[756,19779+47])
                                                                          Texp_ident "nt/2258"
                                                                    ]
                                                              ]
                                                            expression (src/grammarFunctor.ml[757,19828+6]..src/grammarFunctor.ml[758,19839+40])
                                                              Texp_tuple
                                                              [
                                                                expression (src/grammarFunctor.ml[757,19828+6]..src/grammarFunctor.ml[757,19828+9])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[757,19828+7]..src/grammarFunctor.ml[757,19828+8])
                                                                    Texp_ident "Stdlib!.+"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[757,19828+6]..src/grammarFunctor.ml[757,19828+7])
                                                                        Texp_ident "k/2256"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[757,19828+8]..src/grammarFunctor.ml[757,19828+9])
                                                                        Texp_constant Const_int 1
                                                                  ]
                                                                expression (src/grammarFunctor.ml[758,19839+6]..src/grammarFunctor.ml[758,19839+40])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[758,19839+6]..src/grammarFunctor.ml[758,19839+24])
                                                                    Texp_ident "NonterminalMap/1113.add"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[758,19839+25]..src/grammarFunctor.ml[758,19839+27])
                                                                        Texp_ident "nt/2258"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[758,19839+28]..src/grammarFunctor.ml[758,19839+29])
                                                                        Texp_ident "k/2256"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[758,19839+30]..src/grammarFunctor.ml[758,19839+40])
                                                                        Texp_ident "startprods/2257"
                                                                  ]
                                                              ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[759,19880+6]..src/grammarFunctor.ml[759,19880+27])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[759,19880+6]..src/grammarFunctor.ml[759,19880+13])
                                          Texp_ident "G/488.grammar"
                                        "start_symbols"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[759,19880+28]..src/grammarFunctor.ml[759,19880+53])
                                        Texp_tuple
                                        [
                                          expression (src/grammarFunctor.ml[759,19880+29]..src/grammarFunctor.ml[759,19880+30])
                                            Texp_constant Const_int 0
                                          expression (src/grammarFunctor.ml[759,19880+32]..src/grammarFunctor.ml[759,19880+52])
                                            Texp_ident "NonterminalMap/1113.empty"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[763,20007+2]..src/grammarFunctor.ml[764,20040+44])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[763,20007+6]..src/grammarFunctor.ml[763,20007+21])
                                  Tpat_var "producer_symbol/2294"
                                expression (src/grammarFunctor.ml[763,20007+22]..src/grammarFunctor.ml[764,20040+44]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[763,20007+22]..src/grammarFunctor.ml[763,20007+30])
                                        Tpat_var "producer/2295"
                                      expression (src/grammarFunctor.ml[764,20040+4]..src/grammarFunctor.ml[764,20040+44])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[764,20040+4]..src/grammarFunctor.ml[764,20040+17])
                                          Texp_ident "Symbol/1729.lookup"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[764,20040+18]..src/grammarFunctor.ml[764,20040+44])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[764,20040+19]..src/grammarFunctor.ml[764,20040+34])
                                                Texp_ident "Dune__exe!.BasicSyntax.producer_symbol"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[764,20040+35]..src/grammarFunctor.ml[764,20040+43])
                                                    Texp_ident "producer/2295"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[766,20086+2]..src/grammarFunctor.ml[784,20894+23])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[766,20086+7]..src/grammarFunctor.ml[766,20086+8])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[766,20086+11]..src/grammarFunctor.ml[766,20086+14])
                                      Ttyp_constr "int/1!"
                                      []
                                  Tpat_any
                                expression (src/grammarFunctor.ml[766,20086+18]..src/grammarFunctor.ml[784,20894+23])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[766,20086+18]..src/grammarFunctor.ml[766,20086+32])
                                    Texp_ident "Dune__exe!.StringMap.fold"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[766,20086+33]..src/grammarFunctor.ml[784,20894+3])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[766,20086+38]..src/grammarFunctor.ml[766,20086+49])
                                              Tpat_var "nonterminal/2296"
                                            expression (src/grammarFunctor.ml[766,20086+50]..src/grammarFunctor.ml[783,20887+6]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[766,20086+50]..src/grammarFunctor.ml[766,20086+62])
                                                    Tpat_record
                                                    [
                                                      "branches"
                                                        pattern (src/grammarFunctor.ml[766,20086+52]..src/grammarFunctor.ml[766,20086+60])
                                                          Tpat_var "branches/2297"
                                                    ]
                                                  expression (src/grammarFunctor.ml[766,20086+63]..src/grammarFunctor.ml[783,20887+6]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[766,20086+63]..src/grammarFunctor.ml[766,20086+64])
                                                          Tpat_var "k/2298"
                                                        expression (src/grammarFunctor.ml[767,20154+4]..src/grammarFunctor.ml[783,20887+6])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[767,20154+8]..src/grammarFunctor.ml[767,20154+10])
                                                                Tpat_var "nt/2299"
                                                              expression (src/grammarFunctor.ml[767,20154+13]..src/grammarFunctor.ml[767,20154+43])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[767,20154+13]..src/grammarFunctor.ml[767,20154+31])
                                                                  Texp_ident "Nonterminal/1110.lookup"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[767,20154+32]..src/grammarFunctor.ml[767,20154+43])
                                                                      Texp_ident "nonterminal/2296"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[768,20201+4]..src/grammarFunctor.ml[783,20887+6])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/grammarFunctor.ml[768,20201+8]..src/grammarFunctor.ml[768,20201+10])
                                                                  Tpat_var "k'/2300"
                                                                expression (src/grammarFunctor.ml[768,20201+13]..src/grammarFunctor.ml[781,20838+16])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[768,20201+13]..src/grammarFunctor.ml[768,20201+27])
                                                                    Texp_ident "Stdlib!.List.fold_left"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[768,20201+28]..src/grammarFunctor.ml[781,20838+5])
                                                                        Texp_function
                                                                        Nolabel
                                                                        [
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[768,20201+33]..src/grammarFunctor.ml[768,20201+34])
                                                                              Tpat_var "k/2301"
                                                                            expression (src/grammarFunctor.ml[768,20201+35]..src/grammarFunctor.ml[780,20828+9]) ghost
                                                                              Texp_function
                                                                              Nolabel
                                                                              [
                                                                                <case>
                                                                                  pattern (src/grammarFunctor.ml[768,20201+35]..src/grammarFunctor.ml[768,20201+41])
                                                                                    Tpat_var "branch/2302"
                                                                                  expression (src/grammarFunctor.ml[769,20246+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                    Texp_let Nonrec
                                                                                    [
                                                                                      <def>
                                                                                        pattern (src/grammarFunctor.ml[769,20246+10]..src/grammarFunctor.ml[769,20246+19])
                                                                                          Tpat_var "producers/2303"
                                                                                        expression (src/grammarFunctor.ml[769,20246+22]..src/grammarFunctor.ml[769,20246+52])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[769,20246+22]..src/grammarFunctor.ml[769,20246+35])
                                                                                            Texp_ident "Stdlib!.Array.of_list"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[769,20246+36]..src/grammarFunctor.ml[769,20246+52])
                                                                                                Texp_field
                                                                                                expression (src/grammarFunctor.ml[769,20246+36]..src/grammarFunctor.ml[769,20246+42])
                                                                                                  Texp_ident "branch/2302"
                                                                                                "producers"
                                                                                          ]
                                                                                    ]
                                                                                    expression (src/grammarFunctor.ml[770,20302+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                      Texp_let Nonrec
                                                                                      [
                                                                                        <def>
                                                                                          pattern (src/grammarFunctor.ml[770,20302+10]..src/grammarFunctor.ml[770,20302+13])
                                                                                            Tpat_var "rhs/2304"
                                                                                          expression (src/grammarFunctor.ml[770,20302+16]..src/grammarFunctor.ml[770,20302+51])
                                                                                            Texp_apply
                                                                                            expression (src/grammarFunctor.ml[770,20302+16]..src/grammarFunctor.ml[770,20302+25])
                                                                                              Texp_ident "Stdlib!.Array.map"
                                                                                            [
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[770,20302+26]..src/grammarFunctor.ml[770,20302+41])
                                                                                                  Texp_ident "producer_symbol/2294"
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[770,20302+42]..src/grammarFunctor.ml[770,20302+51])
                                                                                                  Texp_ident "producers/2303"
                                                                                            ]
                                                                                      ]
                                                                                      expression (src/grammarFunctor.ml[771,20357+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                        Texp_sequence
                                                                                        expression (src/grammarFunctor.ml[771,20357+6]..src/grammarFunctor.ml[771,20357+28])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[771,20357+6]..src/grammarFunctor.ml[771,20357+28]) ghost
                                                                                            Texp_ident "Stdlib!.Array.set"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[771,20357+6]..src/grammarFunctor.ml[771,20357+11])
                                                                                                Texp_ident "table/2243"
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[771,20357+13]..src/grammarFunctor.ml[771,20357+14])
                                                                                                Texp_ident "k/2301"
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[771,20357+19]..src/grammarFunctor.ml[771,20357+28])
                                                                                                Texp_tuple
                                                                                                [
                                                                                                  expression (src/grammarFunctor.ml[771,20357+20]..src/grammarFunctor.ml[771,20357+22])
                                                                                                    Texp_ident "nt/2299"
                                                                                                  expression (src/grammarFunctor.ml[771,20357+24]..src/grammarFunctor.ml[771,20357+27])
                                                                                                    Texp_ident "rhs/2304"
                                                                                                ]
                                                                                          ]
                                                                                        expression (src/grammarFunctor.ml[772,20387+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                          Texp_sequence
                                                                                          expression (src/grammarFunctor.ml[772,20387+6]..src/grammarFunctor.ml[772,20387+64])
                                                                                            Texp_apply
                                                                                            expression (src/grammarFunctor.ml[772,20387+6]..src/grammarFunctor.ml[772,20387+64]) ghost
                                                                                              Texp_ident "Stdlib!.Array.set"
                                                                                            [
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[772,20387+6]..src/grammarFunctor.ml[772,20387+17])
                                                                                                  Texp_ident "identifiers/2244"
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[772,20387+19]..src/grammarFunctor.ml[772,20387+20])
                                                                                                  Texp_ident "k/2301"
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[772,20387+25]..src/grammarFunctor.ml[772,20387+64])
                                                                                                  Texp_apply
                                                                                                  expression (src/grammarFunctor.ml[772,20387+25]..src/grammarFunctor.ml[772,20387+34])
                                                                                                    Texp_ident "Stdlib!.Array.map"
                                                                                                  [
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[772,20387+35]..src/grammarFunctor.ml[772,20387+54])
                                                                                                        Texp_ident "Dune__exe!.BasicSyntax.producer_identifier"
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[772,20387+55]..src/grammarFunctor.ml[772,20387+64])
                                                                                                        Texp_ident "producers/2303"
                                                                                                  ]
                                                                                            ]
                                                                                          expression (src/grammarFunctor.ml[773,20453+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                            Texp_sequence
                                                                                            expression (src/grammarFunctor.ml[773,20453+6]..src/grammarFunctor.ml[773,20453+39])
                                                                                              Texp_apply
                                                                                              expression (src/grammarFunctor.ml[773,20453+6]..src/grammarFunctor.ml[773,20453+39]) ghost
                                                                                                Texp_ident "Stdlib!.Array.set"
                                                                                              [
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/grammarFunctor.ml[773,20453+6]..src/grammarFunctor.ml[773,20453+13])
                                                                                                    Texp_ident "actions/2245"
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/grammarFunctor.ml[773,20453+15]..src/grammarFunctor.ml[773,20453+16])
                                                                                                    Texp_ident "k/2301"
                                                                                                <arg>
                                                                                                  Nolabel
                                                                                                  expression (src/grammarFunctor.ml[773,20453+21]..src/grammarFunctor.ml[773,20453+39])
                                                                                                    Texp_construct "Some"
                                                                                                    [
                                                                                                      expression (src/grammarFunctor.ml[773,20453+26]..src/grammarFunctor.ml[773,20453+39])
                                                                                                        Texp_field
                                                                                                        expression (src/grammarFunctor.ml[773,20453+26]..src/grammarFunctor.ml[773,20453+32])
                                                                                                          Texp_ident "branch/2302"
                                                                                                        "action"
                                                                                                    ]
                                                                                              ]
                                                                                            expression (src/grammarFunctor.ml[774,20494+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                              Texp_sequence
                                                                                              expression (src/grammarFunctor.ml[774,20494+6]..src/grammarFunctor.ml[774,20494+67])
                                                                                                Texp_apply
                                                                                                expression (src/grammarFunctor.ml[774,20494+6]..src/grammarFunctor.ml[774,20494+67]) ghost
                                                                                                  Texp_ident "Stdlib!.Array.set"
                                                                                                [
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/grammarFunctor.ml[774,20494+6]..src/grammarFunctor.ml[774,20494+20])
                                                                                                      Texp_ident "rhs_attributes/2247"
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/grammarFunctor.ml[774,20494+22]..src/grammarFunctor.ml[774,20494+23])
                                                                                                      Texp_ident "k/2301"
                                                                                                  <arg>
                                                                                                    Nolabel
                                                                                                    expression (src/grammarFunctor.ml[774,20494+28]..src/grammarFunctor.ml[774,20494+67])
                                                                                                      Texp_apply
                                                                                                      expression (src/grammarFunctor.ml[774,20494+28]..src/grammarFunctor.ml[774,20494+37])
                                                                                                        Texp_ident "Stdlib!.Array.map"
                                                                                                      [
                                                                                                        <arg>
                                                                                                          Nolabel
                                                                                                          expression (src/grammarFunctor.ml[774,20494+38]..src/grammarFunctor.ml[774,20494+57])
                                                                                                            Texp_ident "Dune__exe!.BasicSyntax.producer_attributes"
                                                                                                        <arg>
                                                                                                          Nolabel
                                                                                                          expression (src/grammarFunctor.ml[774,20494+58]..src/grammarFunctor.ml[774,20494+67])
                                                                                                            Texp_ident "producers/2303"
                                                                                                      ]
                                                                                                ]
                                                                                              expression (src/grammarFunctor.ml[775,20563+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                                Texp_sequence
                                                                                                expression (src/grammarFunctor.ml[775,20563+6]..src/grammarFunctor.ml[775,20563+60])
                                                                                                  Texp_apply
                                                                                                  expression (src/grammarFunctor.ml[775,20563+6]..src/grammarFunctor.ml[775,20563+60]) ghost
                                                                                                    Texp_ident "Stdlib!.Array.set"
                                                                                                  [
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[775,20563+6]..src/grammarFunctor.ml[775,20563+22])
                                                                                                        Texp_ident "production_level/2249"
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[775,20563+24]..src/grammarFunctor.ml[775,20563+25])
                                                                                                        Texp_ident "k/2301"
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[775,20563+30]..src/grammarFunctor.ml[775,20563+60])
                                                                                                        Texp_field
                                                                                                        expression (src/grammarFunctor.ml[775,20563+30]..src/grammarFunctor.ml[775,20563+36])
                                                                                                          Texp_ident "branch/2302"
                                                                                                        "branch_production_level"
                                                                                                  ]
                                                                                                expression (src/grammarFunctor.ml[776,20625+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                                  Texp_sequence
                                                                                                  expression (src/grammarFunctor.ml[776,20625+6]..src/grammarFunctor.ml[776,20625+52])
                                                                                                    Texp_apply
                                                                                                    expression (src/grammarFunctor.ml[776,20625+6]..src/grammarFunctor.ml[776,20625+52]) ghost
                                                                                                      Texp_ident "Stdlib!.Array.set"
                                                                                                    [
                                                                                                      <arg>
                                                                                                        Nolabel
                                                                                                        expression (src/grammarFunctor.ml[776,20625+6]..src/grammarFunctor.ml[776,20625+15])
                                                                                                          Texp_ident "prec_decl/2248"
                                                                                                      <arg>
                                                                                                        Nolabel
                                                                                                        expression (src/grammarFunctor.ml[776,20625+17]..src/grammarFunctor.ml[776,20625+18])
                                                                                                          Texp_ident "k/2301"
                                                                                                      <arg>
                                                                                                        Nolabel
                                                                                                        expression (src/grammarFunctor.ml[776,20625+23]..src/grammarFunctor.ml[776,20625+52])
                                                                                                          Texp_field
                                                                                                          expression (src/grammarFunctor.ml[776,20625+23]..src/grammarFunctor.ml[776,20625+29])
                                                                                                            Texp_ident "branch/2302"
                                                                                                          "branch_prec_annotation"
                                                                                                    ]
                                                                                                  expression (src/grammarFunctor.ml[777,20679+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                                    Texp_sequence
                                                                                                    expression (src/grammarFunctor.ml[777,20679+6]..src/grammarFunctor.ml[777,20679+49])
                                                                                                      Texp_apply
                                                                                                      expression (src/grammarFunctor.ml[777,20679+6]..src/grammarFunctor.ml[777,20679+49]) ghost
                                                                                                        Texp_ident "Stdlib!.Array.set"
                                                                                                      [
                                                                                                        <arg>
                                                                                                          Nolabel
                                                                                                          expression (src/grammarFunctor.ml[777,20679+6]..src/grammarFunctor.ml[777,20679+15])
                                                                                                            Texp_ident "positions/2246"
                                                                                                        <arg>
                                                                                                          Nolabel
                                                                                                          expression (src/grammarFunctor.ml[777,20679+17]..src/grammarFunctor.ml[777,20679+18])
                                                                                                            Texp_ident "k/2301"
                                                                                                        <arg>
                                                                                                          Nolabel
                                                                                                          expression (src/grammarFunctor.ml[777,20679+23]..src/grammarFunctor.ml[777,20679+49])
                                                                                                            Texp_construct "::"
                                                                                                            [
                                                                                                              expression (src/grammarFunctor.ml[777,20679+25]..src/grammarFunctor.ml[777,20679+47])
                                                                                                                Texp_field
                                                                                                                expression (src/grammarFunctor.ml[777,20679+25]..src/grammarFunctor.ml[777,20679+31])
                                                                                                                  Texp_ident "branch/2302"
                                                                                                                "branch_position"
                                                                                                              expression (src/grammarFunctor.ml[777,20679+48]..src/grammarFunctor.ml[777,20679+49]) ghost
                                                                                                                Texp_construct "[]"
                                                                                                                []
                                                                                                            ]
                                                                                                      ]
                                                                                                    expression (src/grammarFunctor.ml[778,20730+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                                      Texp_sequence
                                                                                                      expression (src/grammarFunctor.ml[778,20730+6]..src/grammarFunctor.ml[779,20786+40])
                                                                                                        Texp_ifthenelse
                                                                                                        expression (src/grammarFunctor.ml[778,20730+9]..src/grammarFunctor.ml[778,20730+50])
                                                                                                          Texp_apply
                                                                                                          expression (src/grammarFunctor.ml[778,20730+9]..src/grammarFunctor.ml[778,20730+12])
                                                                                                            Texp_ident "Stdlib!.not"
                                                                                                          [
                                                                                                            <arg>
                                                                                                              Nolabel
                                                                                                              expression (src/grammarFunctor.ml[778,20730+13]..src/grammarFunctor.ml[778,20730+50])
                                                                                                                Texp_apply
                                                                                                                expression (src/grammarFunctor.ml[778,20730+14]..src/grammarFunctor.ml[778,20730+28])
                                                                                                                  Texp_ident "Dune__exe!.MArray.for_all"
                                                                                                                [
                                                                                                                  <arg>
                                                                                                                    Nolabel
                                                                                                                    expression (src/grammarFunctor.ml[778,20730+29]..src/grammarFunctor.ml[778,20730+45])
                                                                                                                      Texp_ident "Symbol/1729.non_error"
                                                                                                                  <arg>
                                                                                                                    Nolabel
                                                                                                                    expression (src/grammarFunctor.ml[778,20730+46]..src/grammarFunctor.ml[778,20730+49])
                                                                                                                      Texp_ident "rhs/2304"
                                                                                                                ]
                                                                                                          ]
                                                                                                        expression (src/grammarFunctor.ml[779,20786+8]..src/grammarFunctor.ml[779,20786+40])
                                                                                                          Texp_apply
                                                                                                          expression (src/grammarFunctor.ml[779,20786+33]..src/grammarFunctor.ml[779,20786+35])
                                                                                                            Texp_ident "Stdlib!.:="
                                                                                                          [
                                                                                                            <arg>
                                                                                                              Nolabel
                                                                                                              expression (src/grammarFunctor.ml[779,20786+8]..src/grammarFunctor.ml[779,20786+32])
                                                                                                                Texp_ident "grammar_uses_error_token/2252"
                                                                                                            <arg>
                                                                                                              Nolabel
                                                                                                              expression (src/grammarFunctor.ml[779,20786+36]..src/grammarFunctor.ml[779,20786+40])
                                                                                                                Texp_construct "true"
                                                                                                                []
                                                                                                          ]
                                                                                                        None
                                                                                                      expression (src/grammarFunctor.ml[780,20828+6]..src/grammarFunctor.ml[780,20828+9])
                                                                                                        Texp_apply
                                                                                                        expression (src/grammarFunctor.ml[780,20828+7]..src/grammarFunctor.ml[780,20828+8])
                                                                                                          Texp_ident "Stdlib!.+"
                                                                                                        [
                                                                                                          <arg>
                                                                                                            Nolabel
                                                                                                            expression (src/grammarFunctor.ml[780,20828+6]..src/grammarFunctor.ml[780,20828+7])
                                                                                                              Texp_ident "k/2301"
                                                                                                          <arg>
                                                                                                            Nolabel
                                                                                                            expression (src/grammarFunctor.ml[780,20828+8]..src/grammarFunctor.ml[780,20828+9])
                                                                                                              Texp_constant Const_int 1
                                                                                                        ]
                                                                              ]
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[781,20838+6]..src/grammarFunctor.ml[781,20838+7])
                                                                        Texp_ident "k/2298"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[781,20838+8]..src/grammarFunctor.ml[781,20838+16])
                                                                        Texp_ident "branches/2297"
                                                                  ]
                                                            ]
                                                            expression (src/grammarFunctor.ml[782,20858+4]..src/grammarFunctor.ml[783,20887+6])
                                                              Texp_sequence
                                                              expression (src/grammarFunctor.ml[782,20858+4]..src/grammarFunctor.ml[782,20858+27])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[782,20858+4]..src/grammarFunctor.ml[782,20858+27]) ghost
                                                                  Texp_ident "Stdlib!.Array.set"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[782,20858+4]..src/grammarFunctor.ml[782,20858+11])
                                                                      Texp_ident "ntprods/2251"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[782,20858+13]..src/grammarFunctor.ml[782,20858+15])
                                                                      Texp_ident "nt/2299"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[782,20858+20]..src/grammarFunctor.ml[782,20858+27])
                                                                      Texp_tuple
                                                                      [
                                                                        expression (src/grammarFunctor.ml[782,20858+21]..src/grammarFunctor.ml[782,20858+22])
                                                                          Texp_ident "k/2298"
                                                                        expression (src/grammarFunctor.ml[782,20858+24]..src/grammarFunctor.ml[782,20858+26])
                                                                          Texp_ident "k'/2300"
                                                                      ]
                                                                ]
                                                              expression (src/grammarFunctor.ml[783,20887+4]..src/grammarFunctor.ml[783,20887+6])
                                                                Texp_ident "k'/2300"
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[784,20894+4]..src/grammarFunctor.ml[784,20894+17])
                                        Texp_field
                                        expression (src/grammarFunctor.ml[784,20894+4]..src/grammarFunctor.ml[784,20894+11])
                                          Texp_ident "G/488.grammar"
                                        "rules"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[784,20894+18]..src/grammarFunctor.ml[784,20894+23])
                                        Texp_ident "start/2253"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[788,20999+2]..src/grammarFunctor.ml[790,21051+22])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[788,20999+6]..src/grammarFunctor.ml[788,20999+12])
                                  Tpat_var "iternt/2406"
                                expression (src/grammarFunctor.ml[788,20999+13]..src/grammarFunctor.ml[790,21051+22]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[788,20999+13]..src/grammarFunctor.ml[788,20999+15])
                                        Tpat_var "nt/2408"
                                      expression (src/grammarFunctor.ml[788,20999+16]..src/grammarFunctor.ml[790,21051+22]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[788,20999+16]..src/grammarFunctor.ml[788,20999+17])
                                              Tpat_var "f/2409"
                                            expression (src/grammarFunctor.ml[789,21019+4]..src/grammarFunctor.ml[790,21051+22])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/grammarFunctor.ml[789,21019+8]..src/grammarFunctor.ml[789,21019+13])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[789,21019+8]..src/grammarFunctor.ml[789,21019+9])
                                                        Tpat_var "k/2410"
                                                      pattern (src/grammarFunctor.ml[789,21019+11]..src/grammarFunctor.ml[789,21019+13])
                                                        Tpat_var "k'/2411"
                                                    ]
                                                  expression (src/grammarFunctor.ml[789,21019+16]..src/grammarFunctor.ml[789,21019+28])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[789,21019+16]..src/grammarFunctor.ml[789,21019+28]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[789,21019+16]..src/grammarFunctor.ml[789,21019+23])
                                                          Texp_ident "ntprods/2251"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[789,21019+25]..src/grammarFunctor.ml[789,21019+27])
                                                          Texp_ident "nt/2408"
                                                    ]
                                              ]
                                              expression (src/grammarFunctor.ml[790,21051+4]..src/grammarFunctor.ml[790,21051+22])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[790,21051+4]..src/grammarFunctor.ml[790,21051+15])
                                                  Texp_ident "Dune__exe!.Misc.iterij"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[790,21051+16]..src/grammarFunctor.ml[790,21051+17])
                                                      Texp_ident "k/2410"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[790,21051+18]..src/grammarFunctor.ml[790,21051+20])
                                                      Texp_ident "k'/2411"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[790,21051+21]..src/grammarFunctor.ml[790,21051+22])
                                                      Texp_ident "f/2409"
                                                ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[792,21075+2]..src/grammarFunctor.ml[794,21132+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[792,21075+6]..src/grammarFunctor.ml[792,21075+12])
                                  Tpat_var "foldnt/2412"
                                expression (src/grammarFunctor.ml[792,21075+13]..src/grammarFunctor.ml[794,21132+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[792,21075+13]..src/grammarFunctor.ml[792,21075+15])
                                        Tpat_var "nt/2414"
                                      expression (src/grammarFunctor.ml[792,21075+16]..src/grammarFunctor.ml[794,21132+27]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[792,21075+16]..src/grammarFunctor.ml[792,21075+17])
                                              Tpat_var "f/2415"
                                            expression (src/grammarFunctor.ml[792,21075+18]..src/grammarFunctor.ml[794,21132+27]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[792,21075+18]..src/grammarFunctor.ml[792,21075+22])
                                                    Tpat_var "accu/2416"
                                                  expression (src/grammarFunctor.ml[793,21100+4]..src/grammarFunctor.ml[794,21132+27])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[793,21100+8]..src/grammarFunctor.ml[793,21100+13])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/grammarFunctor.ml[793,21100+8]..src/grammarFunctor.ml[793,21100+9])
                                                              Tpat_var "k/2417"
                                                            pattern (src/grammarFunctor.ml[793,21100+11]..src/grammarFunctor.ml[793,21100+13])
                                                              Tpat_var "k'/2418"
                                                          ]
                                                        expression (src/grammarFunctor.ml[793,21100+16]..src/grammarFunctor.ml[793,21100+28])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[793,21100+16]..src/grammarFunctor.ml[793,21100+28]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[793,21100+16]..src/grammarFunctor.ml[793,21100+23])
                                                                Texp_ident "ntprods/2251"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[793,21100+25]..src/grammarFunctor.ml[793,21100+27])
                                                                Texp_ident "nt/2414"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[794,21132+4]..src/grammarFunctor.ml[794,21132+27])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[794,21132+4]..src/grammarFunctor.ml[794,21132+15])
                                                        Texp_ident "Dune__exe!.Misc.foldij"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[794,21132+16]..src/grammarFunctor.ml[794,21132+17])
                                                            Texp_ident "k/2417"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[794,21132+18]..src/grammarFunctor.ml[794,21132+20])
                                                            Texp_ident "k'/2418"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[794,21132+21]..src/grammarFunctor.ml[794,21132+22])
                                                            Texp_ident "f/2415"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[794,21132+23]..src/grammarFunctor.ml[794,21132+27])
                                                            Texp_ident "accu/2416"
                                                      ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[796,21161+2]..src/grammarFunctor.ml[798,21212+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[796,21161+6]..src/grammarFunctor.ml[796,21161+11])
                                  Tpat_var "mapnt/2419"
                                expression (src/grammarFunctor.ml[796,21161+12]..src/grammarFunctor.ml[798,21212+21]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[796,21161+12]..src/grammarFunctor.ml[796,21161+14])
                                        Tpat_var "nt/2421"
                                      expression (src/grammarFunctor.ml[796,21161+15]..src/grammarFunctor.ml[798,21212+21]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[796,21161+15]..src/grammarFunctor.ml[796,21161+16])
                                              Tpat_var "f/2422"
                                            expression (src/grammarFunctor.ml[797,21180+4]..src/grammarFunctor.ml[798,21212+21])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/grammarFunctor.ml[797,21180+8]..src/grammarFunctor.ml[797,21180+13])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[797,21180+8]..src/grammarFunctor.ml[797,21180+9])
                                                        Tpat_var "k/2423"
                                                      pattern (src/grammarFunctor.ml[797,21180+11]..src/grammarFunctor.ml[797,21180+13])
                                                        Tpat_var "k'/2424"
                                                    ]
                                                  expression (src/grammarFunctor.ml[797,21180+16]..src/grammarFunctor.ml[797,21180+28])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[797,21180+16]..src/grammarFunctor.ml[797,21180+28]) ghost
                                                      Texp_ident "Stdlib!.Array.get"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[797,21180+16]..src/grammarFunctor.ml[797,21180+23])
                                                          Texp_ident "ntprods/2251"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[797,21180+25]..src/grammarFunctor.ml[797,21180+27])
                                                          Texp_ident "nt/2421"
                                                    ]
                                              ]
                                              expression (src/grammarFunctor.ml[798,21212+4]..src/grammarFunctor.ml[798,21212+21])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[798,21212+4]..src/grammarFunctor.ml[798,21212+14])
                                                  Texp_ident "Dune__exe!.Misc.mapij"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[798,21212+15]..src/grammarFunctor.ml[798,21212+16])
                                                      Texp_ident "k/2423"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[798,21212+17]..src/grammarFunctor.ml[798,21212+19])
                                                      Texp_ident "k'/2424"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[798,21212+20]..src/grammarFunctor.ml[798,21212+21])
                                                      Texp_ident "f/2422"
                                                ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[800,21235+2]..src/grammarFunctor.ml[802,21297+32])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[800,21235+6]..src/grammarFunctor.ml[800,21235+17])
                                  Tpat_var "foldnt_lazy/2425"
                                expression (src/grammarFunctor.ml[800,21235+18]..src/grammarFunctor.ml[802,21297+32]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[800,21235+18]..src/grammarFunctor.ml[800,21235+20])
                                        Tpat_var "nt/2427"
                                      expression (src/grammarFunctor.ml[800,21235+21]..src/grammarFunctor.ml[802,21297+32]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[800,21235+21]..src/grammarFunctor.ml[800,21235+22])
                                              Tpat_var "f/2428"
                                            expression (src/grammarFunctor.ml[800,21235+23]..src/grammarFunctor.ml[802,21297+32]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[800,21235+23]..src/grammarFunctor.ml[800,21235+27])
                                                    Tpat_var "accu/2429"
                                                  expression (src/grammarFunctor.ml[801,21265+4]..src/grammarFunctor.ml[802,21297+32])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[801,21265+8]..src/grammarFunctor.ml[801,21265+13])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/grammarFunctor.ml[801,21265+8]..src/grammarFunctor.ml[801,21265+9])
                                                              Tpat_var "k/2430"
                                                            pattern (src/grammarFunctor.ml[801,21265+11]..src/grammarFunctor.ml[801,21265+13])
                                                              Tpat_var "k'/2431"
                                                          ]
                                                        expression (src/grammarFunctor.ml[801,21265+16]..src/grammarFunctor.ml[801,21265+28])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[801,21265+16]..src/grammarFunctor.ml[801,21265+28]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[801,21265+16]..src/grammarFunctor.ml[801,21265+23])
                                                                Texp_ident "ntprods/2251"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[801,21265+25]..src/grammarFunctor.ml[801,21265+27])
                                                                Texp_ident "nt/2427"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[802,21297+4]..src/grammarFunctor.ml[802,21297+32])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[802,21297+4]..src/grammarFunctor.ml[802,21297+20])
                                                        Texp_ident "Dune__exe!.Misc.foldij_lazy"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[802,21297+21]..src/grammarFunctor.ml[802,21297+22])
                                                            Texp_ident "k/2430"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[802,21297+23]..src/grammarFunctor.ml[802,21297+25])
                                                            Texp_ident "k'/2431"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[802,21297+26]..src/grammarFunctor.ml[802,21297+27])
                                                            Texp_ident "f/2428"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[802,21297+28]..src/grammarFunctor.ml[802,21297+32])
                                                            Texp_ident "accu/2429"
                                                      ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[806,21351+2]..src/grammarFunctor.ml[807,21368+16])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[806,21351+6]..src/grammarFunctor.ml[806,21351+9])
                                  Tpat_var "def/2432"
                                expression (src/grammarFunctor.ml[806,21351+10]..src/grammarFunctor.ml[807,21368+16]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[806,21351+10]..src/grammarFunctor.ml[806,21351+14])
                                        Tpat_var "prod/2434"
                                      expression (src/grammarFunctor.ml[807,21368+4]..src/grammarFunctor.ml[807,21368+16])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[807,21368+4]..src/grammarFunctor.ml[807,21368+16]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[807,21368+4]..src/grammarFunctor.ml[807,21368+9])
                                              Texp_ident "table/2243"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[807,21368+11]..src/grammarFunctor.ml[807,21368+15])
                                              Texp_ident "prod/2434"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[809,21386+2]..src/grammarFunctor.ml[811,21434+6])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[809,21386+6]..src/grammarFunctor.ml[809,21386+8])
                                  Tpat_var "nt/2435"
                                expression (src/grammarFunctor.ml[809,21386+9]..src/grammarFunctor.ml[811,21434+6]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[809,21386+9]..src/grammarFunctor.ml[809,21386+13])
                                        Tpat_var "prod/2437"
                                      expression (src/grammarFunctor.ml[810,21402+4]..src/grammarFunctor.ml[811,21434+6])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[810,21402+8]..src/grammarFunctor.ml[810,21402+13])
                                              Tpat_tuple
                                              [
                                                pattern (src/grammarFunctor.ml[810,21402+8]..src/grammarFunctor.ml[810,21402+10])
                                                  Tpat_var "nt/2438"
                                                pattern (src/grammarFunctor.ml[810,21402+12]..src/grammarFunctor.ml[810,21402+13])
                                                  Tpat_any
                                              ]
                                            expression (src/grammarFunctor.ml[810,21402+16]..src/grammarFunctor.ml[810,21402+28])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[810,21402+16]..src/grammarFunctor.ml[810,21402+28]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[810,21402+16]..src/grammarFunctor.ml[810,21402+21])
                                                    Texp_ident "table/2243"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[810,21402+23]..src/grammarFunctor.ml[810,21402+27])
                                                    Texp_ident "prod/2437"
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[811,21434+4]..src/grammarFunctor.ml[811,21434+6])
                                          Texp_ident "nt/2438"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[813,21442+2]..src/grammarFunctor.ml[815,21492+7])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[813,21442+6]..src/grammarFunctor.ml[813,21442+9])
                                  Tpat_var "rhs/2439"
                                expression (src/grammarFunctor.ml[813,21442+10]..src/grammarFunctor.ml[815,21492+7]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[813,21442+10]..src/grammarFunctor.ml[813,21442+14])
                                        Tpat_var "prod/2441"
                                      expression (src/grammarFunctor.ml[814,21459+4]..src/grammarFunctor.ml[815,21492+7])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[814,21459+8]..src/grammarFunctor.ml[814,21459+14])
                                              Tpat_tuple
                                              [
                                                pattern (src/grammarFunctor.ml[814,21459+8]..src/grammarFunctor.ml[814,21459+9])
                                                  Tpat_any
                                                pattern (src/grammarFunctor.ml[814,21459+11]..src/grammarFunctor.ml[814,21459+14])
                                                  Tpat_var "rhs/2442"
                                              ]
                                            expression (src/grammarFunctor.ml[814,21459+17]..src/grammarFunctor.ml[814,21459+29])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[814,21459+17]..src/grammarFunctor.ml[814,21459+29]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[814,21459+17]..src/grammarFunctor.ml[814,21459+22])
                                                    Texp_ident "table/2243"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[814,21459+24]..src/grammarFunctor.ml[814,21459+28])
                                                    Texp_ident "prod/2441"
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[815,21492+4]..src/grammarFunctor.ml[815,21492+7])
                                          Texp_ident "rhs/2442"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[817,21501+2]..src/grammarFunctor.ml[818,21521+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[817,21501+6]..src/grammarFunctor.ml[817,21501+12])
                                  Tpat_var "length/2443"
                                expression (src/grammarFunctor.ml[817,21501+13]..src/grammarFunctor.ml[818,21521+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[817,21501+13]..src/grammarFunctor.ml[817,21501+17])
                                        Tpat_var "prod/2445"
                                      expression (src/grammarFunctor.ml[818,21521+4]..src/grammarFunctor.ml[818,21521+27])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[818,21521+4]..src/grammarFunctor.ml[818,21521+16])
                                          Texp_ident "Stdlib!.Array.length"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[818,21521+17]..src/grammarFunctor.ml[818,21521+27])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[818,21521+18]..src/grammarFunctor.ml[818,21521+21])
                                                Texp_ident "rhs/2439"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[818,21521+22]..src/grammarFunctor.ml[818,21521+26])
                                                    Texp_ident "prod/2445"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[820,21550+2]..src/grammarFunctor.ml[821,21575+22])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[820,21550+6]..src/grammarFunctor.ml[820,21550+17])
                                  Tpat_var "identifiers/2446"
                                expression (src/grammarFunctor.ml[820,21550+18]..src/grammarFunctor.ml[821,21575+22]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[820,21550+18]..src/grammarFunctor.ml[820,21550+22])
                                        Tpat_var "prod/2447"
                                      expression (src/grammarFunctor.ml[821,21575+4]..src/grammarFunctor.ml[821,21575+22])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[821,21575+4]..src/grammarFunctor.ml[821,21575+22]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[821,21575+4]..src/grammarFunctor.ml[821,21575+15])
                                              Texp_ident "identifiers/2244"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[821,21575+17]..src/grammarFunctor.ml[821,21575+21])
                                              Texp_ident "prod/2447"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[823,21599+2]..src/grammarFunctor.ml[824,21621+16])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[823,21599+6]..src/grammarFunctor.ml[823,21599+14])
                                  Tpat_var "is_start/2448"
                                expression (src/grammarFunctor.ml[823,21599+15]..src/grammarFunctor.ml[824,21621+16]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[823,21599+15]..src/grammarFunctor.ml[823,21599+19])
                                        Tpat_var "prod/2450"
                                      expression (src/grammarFunctor.ml[824,21621+4]..src/grammarFunctor.ml[824,21621+16])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[824,21621+9]..src/grammarFunctor.ml[824,21621+10])
                                          Texp_ident "Stdlib!.<"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[824,21621+4]..src/grammarFunctor.ml[824,21621+8])
                                              Texp_ident "prod/2450"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[824,21621+11]..src/grammarFunctor.ml[824,21621+16])
                                              Texp_ident "start/2253"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[826,21639+2]..src/grammarFunctor.ml[834,21814+10])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[826,21639+6]..src/grammarFunctor.ml[826,21639+14])
                                  Tpat_var "classify/2451"
                                expression (src/grammarFunctor.ml[826,21639+15]..src/grammarFunctor.ml[834,21814+10]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[826,21639+15]..src/grammarFunctor.ml[826,21639+19])
                                        Tpat_var "prod/2453"
                                      expression (src/grammarFunctor.ml[827,21661+4]..src/grammarFunctor.ml[834,21814+10])
                                        Texp_ifthenelse
                                        expression (src/grammarFunctor.ml[827,21661+7]..src/grammarFunctor.ml[827,21661+20])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[827,21661+7]..src/grammarFunctor.ml[827,21661+15])
                                            Texp_ident "is_start/2448"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[827,21661+16]..src/grammarFunctor.ml[827,21661+20])
                                                Texp_ident "prod/2453"
                                          ]
                                        expression (src/grammarFunctor.ml[828,21687+6]..src/grammarFunctor.ml[832,21782+22])
                                          Texp_match
                                          expression (src/grammarFunctor.ml[828,21687+12]..src/grammarFunctor.ml[828,21687+26])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[828,21687+12]..src/grammarFunctor.ml[828,21687+26]) ghost
                                              Texp_ident "Stdlib!.Array.get"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[828,21687+12]..src/grammarFunctor.ml[828,21687+22])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[828,21687+13]..src/grammarFunctor.ml[828,21687+16])
                                                    Texp_ident "rhs/2439"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[828,21687+17]..src/grammarFunctor.ml[828,21687+21])
                                                        Texp_ident "prod/2453"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[828,21687+24]..src/grammarFunctor.ml[828,21687+25])
                                                  Texp_constant Const_int 0
                                            ]
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[829,21719+8]..src/grammarFunctor.ml[829,21719+19])
                                                Tpat_value
                                                pattern (src/grammarFunctor.ml[829,21719+8]..src/grammarFunctor.ml[829,21719+19])
                                                  Tpat_construct "Symbol.N"
                                                  [
                                                    pattern (src/grammarFunctor.ml[829,21719+17]..src/grammarFunctor.ml[829,21719+19])
                                                      Tpat_var "nt/2454"
                                                  ]
                                                  None
                                              expression (src/grammarFunctor.ml[830,21742+10]..src/grammarFunctor.ml[830,21742+17])
                                                Texp_construct "Some"
                                                [
                                                  expression (src/grammarFunctor.ml[830,21742+15]..src/grammarFunctor.ml[830,21742+17])
                                                    Texp_ident "nt/2454"
                                                ]
                                            <case>
                                              pattern (src/grammarFunctor.ml[831,21760+8]..src/grammarFunctor.ml[831,21760+18])
                                                Tpat_value
                                                pattern (src/grammarFunctor.ml[831,21760+8]..src/grammarFunctor.ml[831,21760+18])
                                                  Tpat_construct "Symbol.T"
                                                  [
                                                    pattern (src/grammarFunctor.ml[831,21760+17]..src/grammarFunctor.ml[831,21760+18])
                                                      Tpat_any
                                                  ]
                                                  None
                                              expression (src/grammarFunctor.ml[832,21782+10]..src/grammarFunctor.ml[832,21782+22])
                                                Texp_assert                                                expression (src/grammarFunctor.ml[832,21782+17]..src/grammarFunctor.ml[832,21782+22])
                                                  Texp_construct "false"
                                                  []
                                          ]
                                        Some
                                          expression (src/grammarFunctor.ml[834,21814+6]..src/grammarFunctor.ml[834,21814+10])
                                            Texp_construct "None"
                                            []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[836,21826+2]..src/grammarFunctor.ml[843,22006+20])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[836,21826+6]..src/grammarFunctor.ml[836,21826+12])
                                  Tpat_var "action/2455"
                                expression (src/grammarFunctor.ml[836,21826+13]..src/grammarFunctor.ml[843,22006+20]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[836,21826+13]..src/grammarFunctor.ml[836,21826+17])
                                        Tpat_var "prod/2457"
                                      expression (src/grammarFunctor.ml[837,21846+4]..src/grammarFunctor.ml[843,22006+20])
                                        Texp_match
                                        expression (src/grammarFunctor.ml[837,21846+10]..src/grammarFunctor.ml[837,21846+24])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[837,21846+10]..src/grammarFunctor.ml[837,21846+24]) ghost
                                            Texp_ident "Stdlib!.Array.get"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[837,21846+10]..src/grammarFunctor.ml[837,21846+17])
                                                Texp_ident "actions/2245"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[837,21846+19]..src/grammarFunctor.ml[837,21846+23])
                                                Texp_ident "prod/2457"
                                          ]
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[838,21876+6]..src/grammarFunctor.ml[838,21876+17])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[838,21876+6]..src/grammarFunctor.ml[838,21876+17])
                                                Tpat_construct "Some"
                                                [
                                                  pattern (src/grammarFunctor.ml[838,21876+11]..src/grammarFunctor.ml[838,21876+17])
                                                    Tpat_var "action/2458"
                                                ]
                                                None
                                            expression (src/grammarFunctor.ml[839,21897+8]..src/grammarFunctor.ml[839,21897+14])
                                              Texp_ident "action/2458"
                                          <case>
                                            pattern (src/grammarFunctor.ml[840,21912+6]..src/grammarFunctor.ml[840,21912+10])
                                              Tpat_value
                                              pattern (src/grammarFunctor.ml[840,21912+6]..src/grammarFunctor.ml[840,21912+10])
                                                Tpat_construct "None"
                                                []
                                                None
                                            expression (src/grammarFunctor.ml[842,21974+8]..src/grammarFunctor.ml[843,22006+20])
                                              Texp_sequence
                                              expression (src/grammarFunctor.ml[842,21974+8]..src/grammarFunctor.ml[842,21974+30])
                                                Texp_assert                                                expression (src/grammarFunctor.ml[842,21974+15]..src/grammarFunctor.ml[842,21974+30])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[842,21974+16]..src/grammarFunctor.ml[842,21974+24])
                                                    Texp_ident "is_start/2448"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[842,21974+25]..src/grammarFunctor.ml[842,21974+29])
                                                        Texp_ident "prod/2457"
                                                  ]
                                              expression (src/grammarFunctor.ml[843,22006+8]..src/grammarFunctor.ml[843,22006+20])
                                                Texp_assert                                                expression (src/grammarFunctor.ml[843,22006+15]..src/grammarFunctor.ml[843,22006+20])
                                                  Texp_construct "false"
                                                  []
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[845,22028+2]..src/grammarFunctor.ml[846,22051+20])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[845,22028+6]..src/grammarFunctor.ml[845,22028+15])
                                  Tpat_var "positions/2459"
                                expression (src/grammarFunctor.ml[845,22028+16]..src/grammarFunctor.ml[846,22051+20]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[845,22028+16]..src/grammarFunctor.ml[845,22028+20])
                                        Tpat_var "prod/2460"
                                      expression (src/grammarFunctor.ml[846,22051+4]..src/grammarFunctor.ml[846,22051+20])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[846,22051+4]..src/grammarFunctor.ml[846,22051+20]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[846,22051+4]..src/grammarFunctor.ml[846,22051+13])
                                              Texp_ident "positions/2246"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[846,22051+15]..src/grammarFunctor.ml[846,22051+19])
                                              Texp_ident "prod/2460"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[848,22073+2]..src/grammarFunctor.ml[849,22101+36])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[848,22073+6]..src/grammarFunctor.ml[848,22073+20])
                                  Tpat_var "lhs_attributes/2461"
                                expression (src/grammarFunctor.ml[848,22073+21]..src/grammarFunctor.ml[849,22101+36]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[848,22073+21]..src/grammarFunctor.ml[848,22073+25])
                                        Tpat_var "prod/2463"
                                      expression (src/grammarFunctor.ml[849,22101+4]..src/grammarFunctor.ml[849,22101+36])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[849,22101+4]..src/grammarFunctor.ml[849,22101+26])
                                          Texp_ident "Nonterminal/1110.attributes"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[849,22101+27]..src/grammarFunctor.ml[849,22101+36])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[849,22101+28]..src/grammarFunctor.ml[849,22101+30])
                                                Texp_ident "nt/2435"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[849,22101+31]..src/grammarFunctor.ml[849,22101+35])
                                                    Texp_ident "prod/2463"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[851,22139+2]..src/grammarFunctor.ml[852,22167+25])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[851,22139+6]..src/grammarFunctor.ml[851,22139+20])
                                  Tpat_var "rhs_attributes/2464"
                                expression (src/grammarFunctor.ml[851,22139+21]..src/grammarFunctor.ml[852,22167+25]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[851,22139+21]..src/grammarFunctor.ml[851,22139+25])
                                        Tpat_var "prod/2465"
                                      expression (src/grammarFunctor.ml[852,22167+4]..src/grammarFunctor.ml[852,22167+25])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[852,22167+4]..src/grammarFunctor.ml[852,22167+25]) ghost
                                          Texp_ident "Stdlib!.Array.get"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[852,22167+4]..src/grammarFunctor.ml[852,22167+18])
                                              Texp_ident "rhs_attributes/2247"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[852,22167+20]..src/grammarFunctor.ml[852,22167+24])
                                              Texp_ident "prod/2465"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[854,22194+2]..src/grammarFunctor.ml[858,22297+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[854,22194+6]..src/grammarFunctor.ml[854,22194+27])
                                  Tpat_var "startsymbol2startprod/2466"
                                expression (src/grammarFunctor.ml[854,22194+28]..src/grammarFunctor.ml[858,22297+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[854,22194+28]..src/grammarFunctor.ml[854,22194+30])
                                        Tpat_var "nt/2468"
                                      expression (src/grammarFunctor.ml[855,22227+4]..src/grammarFunctor.ml[858,22297+18])
                                        Texp_try
                                        expression (src/grammarFunctor.ml[856,22235+6]..src/grammarFunctor.ml[856,22235+39])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[856,22235+6]..src/grammarFunctor.ml[856,22235+25])
                                            Texp_ident "NonterminalMap/1113.find"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[856,22235+26]..src/grammarFunctor.ml[856,22235+28])
                                                Texp_ident "nt/2468"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[856,22235+29]..src/grammarFunctor.ml[856,22235+39])
                                                Texp_ident "startprods/2254"
                                          ]
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[857,22275+9]..src/grammarFunctor.ml[857,22275+18])
                                              Tpat_construct "Not_found"
                                              []
                                              None
                                            expression (src/grammarFunctor.ml[858,22297+6]..src/grammarFunctor.ml[858,22297+18])
                                              Texp_assert                                              expression (src/grammarFunctor.ml[858,22297+13]..src/grammarFunctor.ml[858,22297+18])
                                                Texp_construct "false"
                                                []
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[860,22350+2]..src/grammarFunctor.ml[861,22374+46])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[860,22350+6]..src/grammarFunctor.ml[860,22350+16])
                                  Tpat_var "error_free/2469"
                                expression (src/grammarFunctor.ml[860,22350+17]..src/grammarFunctor.ml[861,22374+46]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[860,22350+17]..src/grammarFunctor.ml[860,22350+21])
                                        Tpat_var "prod/2471"
                                      expression (src/grammarFunctor.ml[861,22374+4]..src/grammarFunctor.ml[861,22374+46])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[861,22374+4]..src/grammarFunctor.ml[861,22374+18])
                                          Texp_ident "Dune__exe!.MArray.for_all"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[861,22374+19]..src/grammarFunctor.ml[861,22374+35])
                                              Texp_ident "Symbol/1729.non_error"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[861,22374+36]..src/grammarFunctor.ml[861,22374+46])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[861,22374+37]..src/grammarFunctor.ml[861,22374+40])
                                                Texp_ident "rhs/2439"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[861,22374+41]..src/grammarFunctor.ml[861,22374+45])
                                                    Texp_ident "prod/2471"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[865,22442+2]..src/grammarFunctor.ml[866,22457+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[865,22442+6]..src/grammarFunctor.ml[865,22442+10])
                                  Tpat_var "init/2472"
                                expression (src/grammarFunctor.ml[865,22442+11]..src/grammarFunctor.ml[866,22457+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[865,22442+11]..src/grammarFunctor.ml[865,22442+12])
                                        Tpat_var "f/2474"
                                      expression (src/grammarFunctor.ml[866,22457+4]..src/grammarFunctor.ml[866,22457+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[866,22457+4]..src/grammarFunctor.ml[866,22457+14])
                                          Texp_ident "Stdlib!.Array.init"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[866,22457+15]..src/grammarFunctor.ml[866,22457+16])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[866,22457+17]..src/grammarFunctor.ml[866,22457+18])
                                              Texp_ident "f/2474"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[868,22477+2]..src/grammarFunctor.ml[869,22492+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[868,22477+6]..src/grammarFunctor.ml[868,22477+10])
                                  Tpat_var "iter/2475"
                                expression (src/grammarFunctor.ml[868,22477+11]..src/grammarFunctor.ml[869,22492+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[868,22477+11]..src/grammarFunctor.ml[868,22477+12])
                                        Tpat_var "f/2476"
                                      expression (src/grammarFunctor.ml[869,22492+4]..src/grammarFunctor.ml[869,22492+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[869,22492+4]..src/grammarFunctor.ml[869,22492+14])
                                          Texp_ident "Dune__exe!.Misc.iteri"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[869,22492+15]..src/grammarFunctor.ml[869,22492+16])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[869,22492+17]..src/grammarFunctor.ml[869,22492+18])
                                              Texp_ident "f/2476"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[871,22512+2]..src/grammarFunctor.ml[872,22532+23])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[871,22512+6]..src/grammarFunctor.ml[871,22512+10])
                                  Tpat_var "fold/2477"
                                expression (src/grammarFunctor.ml[871,22512+11]..src/grammarFunctor.ml[872,22532+23]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[871,22512+11]..src/grammarFunctor.ml[871,22512+12])
                                        Tpat_var "f/2479"
                                      expression (src/grammarFunctor.ml[871,22512+13]..src/grammarFunctor.ml[872,22532+23]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[871,22512+13]..src/grammarFunctor.ml[871,22512+17])
                                              Tpat_var "accu/2480"
                                            expression (src/grammarFunctor.ml[872,22532+4]..src/grammarFunctor.ml[872,22532+23])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[872,22532+4]..src/grammarFunctor.ml[872,22532+14])
                                                Texp_ident "Dune__exe!.Misc.foldi"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[872,22532+15]..src/grammarFunctor.ml[872,22532+16])
                                                    Texp_ident "n/2230"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[872,22532+17]..src/grammarFunctor.ml[872,22532+18])
                                                    Texp_ident "f/2479"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[872,22532+19]..src/grammarFunctor.ml[872,22532+23])
                                                    Texp_ident "accu/2480"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[874,22557+2]..src/grammarFunctor.ml[875,22571+17])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[874,22557+6]..src/grammarFunctor.ml[874,22557+9])
                                  Tpat_var "map/2481"
                                expression (src/grammarFunctor.ml[874,22557+10]..src/grammarFunctor.ml[875,22571+17]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[874,22557+10]..src/grammarFunctor.ml[874,22557+11])
                                        Tpat_var "f/2482"
                                      expression (src/grammarFunctor.ml[875,22571+4]..src/grammarFunctor.ml[875,22571+17])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[875,22571+4]..src/grammarFunctor.ml[875,22571+13])
                                          Texp_ident "Dune__exe!.Misc.mapi"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[875,22571+14]..src/grammarFunctor.ml[875,22571+15])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[875,22571+16]..src/grammarFunctor.ml[875,22571+17])
                                              Texp_ident "f/2482"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[877,22590+2]..src/grammarFunctor.ml[878,22605+18])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[877,22590+6]..src/grammarFunctor.ml[877,22590+10])
                                  Tpat_var "amap/2483"
                                expression (src/grammarFunctor.ml[877,22590+11]..src/grammarFunctor.ml[878,22605+18]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[877,22590+11]..src/grammarFunctor.ml[877,22590+12])
                                        Tpat_var "f/2485"
                                      expression (src/grammarFunctor.ml[878,22605+4]..src/grammarFunctor.ml[878,22605+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[878,22605+4]..src/grammarFunctor.ml[878,22605+14])
                                          Texp_ident "Stdlib!.Array.init"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[878,22605+15]..src/grammarFunctor.ml[878,22605+16])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[878,22605+17]..src/grammarFunctor.ml[878,22605+18])
                                              Texp_ident "f/2485"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[880,22625+2]..src/grammarFunctor.ml[883,22687+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[880,22625+6]..src/grammarFunctor.ml[880,22625+11])
                                  Tpat_var "iterx/2486"
                                expression (src/grammarFunctor.ml[880,22625+12]..src/grammarFunctor.ml[883,22687+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[880,22625+12]..src/grammarFunctor.ml[880,22625+13])
                                        Tpat_var "f/2488"
                                      expression (src/grammarFunctor.ml[881,22641+4]..src/grammarFunctor.ml[883,22687+8])
                                        Texp_for "prod/2489" Up
                                        expression (src/grammarFunctor.ml[881,22641+15]..src/grammarFunctor.ml[881,22641+20])
                                          Texp_ident "start/2253"
                                        expression (src/grammarFunctor.ml[881,22641+24]..src/grammarFunctor.ml[881,22641+29])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[881,22641+26]..src/grammarFunctor.ml[881,22641+27])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[881,22641+24]..src/grammarFunctor.ml[881,22641+25])
                                                Texp_ident "n/2230"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[881,22641+28]..src/grammarFunctor.ml[881,22641+29])
                                                Texp_constant Const_int 1
                                          ]
                                        expression (src/grammarFunctor.ml[882,22674+6]..src/grammarFunctor.ml[882,22674+12])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[882,22674+6]..src/grammarFunctor.ml[882,22674+7])
                                            Texp_ident "f/2488"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[882,22674+8]..src/grammarFunctor.ml[882,22674+12])
                                                Texp_ident "prod/2489"
                                          ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[885,22697+2]..src/grammarFunctor.ml[886,22718+30])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[885,22697+6]..src/grammarFunctor.ml[885,22697+11])
                                  Tpat_var "foldx/2490"
                                expression (src/grammarFunctor.ml[885,22697+12]..src/grammarFunctor.ml[886,22718+30]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[885,22697+12]..src/grammarFunctor.ml[885,22697+13])
                                        Tpat_var "f/2492"
                                      expression (src/grammarFunctor.ml[885,22697+14]..src/grammarFunctor.ml[886,22718+30]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[885,22697+14]..src/grammarFunctor.ml[885,22697+18])
                                              Tpat_var "accu/2493"
                                            expression (src/grammarFunctor.ml[886,22718+4]..src/grammarFunctor.ml[886,22718+30])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[886,22718+4]..src/grammarFunctor.ml[886,22718+15])
                                                Texp_ident "Dune__exe!.Misc.foldij"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[886,22718+16]..src/grammarFunctor.ml[886,22718+21])
                                                    Texp_ident "start/2253"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[886,22718+22]..src/grammarFunctor.ml[886,22718+23])
                                                    Texp_ident "n/2230"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[886,22718+24]..src/grammarFunctor.ml[886,22718+25])
                                                    Texp_ident "f/2492"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[886,22718+26]..src/grammarFunctor.ml[886,22718+30])
                                                    Texp_ident "accu/2493"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[888,22750+2]..src/grammarFunctor.ml[889,22765+24])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[888,22750+6]..src/grammarFunctor.ml[888,22750+10])
                                  Tpat_var "mapx/2494"
                                expression (src/grammarFunctor.ml[888,22750+11]..src/grammarFunctor.ml[889,22765+24]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[888,22750+11]..src/grammarFunctor.ml[888,22750+12])
                                        Tpat_var "f/2496"
                                      expression (src/grammarFunctor.ml[889,22765+4]..src/grammarFunctor.ml[889,22765+24])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[889,22765+4]..src/grammarFunctor.ml[889,22765+14])
                                          Texp_ident "Dune__exe!.Misc.mapij"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[889,22765+15]..src/grammarFunctor.ml[889,22765+20])
                                              Texp_ident "start/2253"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[889,22765+21]..src/grammarFunctor.ml[889,22765+22])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[889,22765+23]..src/grammarFunctor.ml[889,22765+24])
                                              Texp_ident "f/2496"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[893,22823+2]..src/grammarFunctor.ml[900,23056+83])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[893,22823+6]..src/grammarFunctor.ml[893,22823+11])
                                  Tpat_var "print/2497"
                                expression (src/grammarFunctor.ml[893,22823+12]..src/grammarFunctor.ml[900,23056+83]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[893,22823+12]..src/grammarFunctor.ml[893,22823+16])
                                        Tpat_var "prod/2498"
                                      expression (src/grammarFunctor.ml[894,22842+4]..src/grammarFunctor.ml[900,23056+83])
                                        Texp_sequence
                                        expression (src/grammarFunctor.ml[894,22842+4]..src/grammarFunctor.ml[894,22842+32])
                                          Texp_assert                                          expression (src/grammarFunctor.ml[894,22842+11]..src/grammarFunctor.ml[894,22842+32])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[894,22842+12]..src/grammarFunctor.ml[894,22842+15])
                                              Texp_ident "Stdlib!.not"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[894,22842+16]..src/grammarFunctor.ml[894,22842+31])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[894,22842+17]..src/grammarFunctor.ml[894,22842+25])
                                                    Texp_ident "is_start/2448"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[894,22842+26]..src/grammarFunctor.ml[894,22842+30])
                                                        Texp_ident "prod/2498"
                                                  ]
                                            ]
                                        expression (src/grammarFunctor.ml[895,22876+4]..src/grammarFunctor.ml[900,23056+83])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[895,22876+8]..src/grammarFunctor.ml[895,22876+15])
                                                Tpat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[895,22876+8]..src/grammarFunctor.ml[895,22876+10])
                                                    Tpat_var "nt/2499"
                                                  pattern (src/grammarFunctor.ml[895,22876+12]..src/grammarFunctor.ml[895,22876+15])
                                                    Tpat_var "rhs/2500"
                                                ]
                                              expression (src/grammarFunctor.ml[895,22876+18]..src/grammarFunctor.ml[895,22876+30])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[895,22876+18]..src/grammarFunctor.ml[895,22876+30]) ghost
                                                  Texp_ident "Stdlib!.Array.get"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[895,22876+18]..src/grammarFunctor.ml[895,22876+23])
                                                      Texp_ident "table/2243"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[895,22876+25]..src/grammarFunctor.ml[895,22876+29])
                                                      Texp_ident "prod/2498"
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[896,22910+4]..src/grammarFunctor.ml[900,23056+83])
                                            Texp_ifthenelse
                                            expression (src/grammarFunctor.ml[896,22910+7]..src/grammarFunctor.ml[896,22910+27])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[896,22910+24]..src/grammarFunctor.ml[896,22910+25])
                                                Texp_ident "Stdlib!.="
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[896,22910+7]..src/grammarFunctor.ml[896,22910+23])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[896,22910+7]..src/grammarFunctor.ml[896,22910+19])
                                                      Texp_ident "Stdlib!.Array.length"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[896,22910+20]..src/grammarFunctor.ml[896,22910+23])
                                                          Texp_ident "rhs/2500"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[896,22910+26]..src/grammarFunctor.ml[896,22910+27])
                                                    Texp_constant Const_int 0
                                              ]
                                            expression (src/grammarFunctor.ml[898,22989+6]..src/grammarFunctor.ml[898,22989+57])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[898,22989+6]..src/grammarFunctor.ml[898,22989+20])
                                                Texp_ident "Stdlib!.Printf.sprintf"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                                Texp_constant Const_string(" ->",(src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost,None)
                                                              expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost
                                                        Texp_constant Const_string("%s ->",(src/grammarFunctor.ml[898,22989+21]..src/grammarFunctor.ml[898,22989+28]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[898,22989+29]..src/grammarFunctor.ml[898,22989+57])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[898,22989+30]..src/grammarFunctor.ml[898,22989+47])
                                                      Texp_ident "Nonterminal/1110.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[898,22989+48]..src/grammarFunctor.ml[898,22989+53])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[898,22989+54]..src/grammarFunctor.ml[898,22989+56])
                                                          Texp_ident "nt/2499"
                                                    ]
                                              ]
                                            Some
                                              expression (src/grammarFunctor.ml[900,23056+6]..src/grammarFunctor.ml[900,23056+83])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[900,23056+6]..src/grammarFunctor.ml[900,23056+20])
                                                  Texp_ident "Stdlib!.Printf.sprintf"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31])
                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                      [
                                                        expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                          [
                                                            expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                              []
                                                            expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                              [
                                                                expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                                  Texp_constant Const_string(" -> ",(src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost,None)
                                                                expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                        expression (src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost
                                                          Texp_constant Const_string("%s -> %s",(src/grammarFunctor.ml[900,23056+21]..src/grammarFunctor.ml[900,23056+31]) ghost,None)
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[900,23056+32]..src/grammarFunctor.ml[900,23056+60])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[900,23056+33]..src/grammarFunctor.ml[900,23056+50])
                                                        Texp_ident "Nonterminal/1110.print"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[900,23056+51]..src/grammarFunctor.ml[900,23056+56])
                                                            Texp_construct "false"
                                                            []
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[900,23056+57]..src/grammarFunctor.ml[900,23056+59])
                                                            Texp_ident "nt/2499"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[900,23056+61]..src/grammarFunctor.ml[900,23056+83])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[900,23056+62]..src/grammarFunctor.ml[900,23056+76])
                                                        Texp_ident "Symbol/1729.printao"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[900,23056+77]..src/grammarFunctor.ml[900,23056+78])
                                                            Texp_constant Const_int 0
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[900,23056+79]..src/grammarFunctor.ml[900,23056+82])
                                                            Texp_ident "rhs/2500"
                                                      ]
                                                ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[902,23141+2]..src/grammarFunctor.ml[909,23410+66])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[902,23141+6]..src/grammarFunctor.ml[902,23141+14])
                                  Tpat_var "describe/2501"
                                expression (src/grammarFunctor.ml[902,23141+15]..src/grammarFunctor.ml[909,23410+66]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[902,23141+15]..src/grammarFunctor.ml[902,23141+21])
                                        Tpat_var "gerund/2503"
                                      expression (src/grammarFunctor.ml[902,23141+22]..src/grammarFunctor.ml[909,23410+66]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[902,23141+22]..src/grammarFunctor.ml[902,23141+26])
                                              Tpat_var "prod/2504"
                                            expression (src/grammarFunctor.ml[903,23170+4]..src/grammarFunctor.ml[909,23410+66])
                                              Texp_match
                                              expression (src/grammarFunctor.ml[903,23170+10]..src/grammarFunctor.ml[903,23170+23])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[903,23170+10]..src/grammarFunctor.ml[903,23170+18])
                                                  Texp_ident "classify/2451"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[903,23170+19]..src/grammarFunctor.ml[903,23170+23])
                                                      Texp_ident "prod/2504"
                                                ]
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[904,23199+6]..src/grammarFunctor.ml[904,23199+13])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[904,23199+6]..src/grammarFunctor.ml[904,23199+13])
                                                      Tpat_construct "Some"
                                                      [
                                                        pattern (src/grammarFunctor.ml[904,23199+11]..src/grammarFunctor.ml[904,23199+13])
                                                          Tpat_var "nt/2505"
                                                      ]
                                                      None
                                                  expression (src/grammarFunctor.ml[905,23216+8]..src/grammarFunctor.ml[906,23269+72])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[905,23216+12]..src/grammarFunctor.ml[905,23216+18])
                                                          Tpat_var "ending/2506"
                                                        expression (src/grammarFunctor.ml[905,23216+21]..src/grammarFunctor.ml[905,23216+49])
                                                          Texp_ifthenelse
                                                          expression (src/grammarFunctor.ml[905,23216+24]..src/grammarFunctor.ml[905,23216+30])
                                                            Texp_ident "gerund/2503"
                                                          expression (src/grammarFunctor.ml[905,23216+36]..src/grammarFunctor.ml[905,23216+41])
                                                            Texp_constant Const_string("ing",(src/grammarFunctor.ml[905,23216+37]..src/grammarFunctor.ml[905,23216+40]),None)
                                                          Some
                                                            expression (src/grammarFunctor.ml[905,23216+47]..src/grammarFunctor.ml[905,23216+49])
                                                              Texp_constant Const_string("",(src/grammarFunctor.ml[905,23216+48]..src/grammarFunctor.ml[905,23216+48]),None)
                                                    ]
                                                    expression (src/grammarFunctor.ml[906,23269+8]..src/grammarFunctor.ml[906,23269+72])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[906,23269+8]..src/grammarFunctor.ml[906,23269+22])
                                                        Texp_ident "Stdlib!.Printf.sprintf"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                    Texp_constant Const_string("accept",(src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost,None)
                                                                  expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                            Texp_constant Const_char 20
                                                                          expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                                            [
                                                                              expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                []
                                                                              expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                []
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              expression (src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost
                                                                Texp_constant Const_string("accept%s %s",(src/grammarFunctor.ml[906,23269+23]..src/grammarFunctor.ml[906,23269+36]) ghost,None)
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[906,23269+37]..src/grammarFunctor.ml[906,23269+43])
                                                            Texp_ident "ending/2506"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[906,23269+44]..src/grammarFunctor.ml[906,23269+72])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[906,23269+45]..src/grammarFunctor.ml[906,23269+62])
                                                              Texp_ident "Nonterminal/1110.print"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[906,23269+63]..src/grammarFunctor.ml[906,23269+68])
                                                                  Texp_construct "false"
                                                                  []
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[906,23269+69]..src/grammarFunctor.ml[906,23269+71])
                                                                  Texp_ident "nt/2505"
                                                            ]
                                                      ]
                                                <case>
                                                  pattern (src/grammarFunctor.ml[907,23342+6]..src/grammarFunctor.ml[907,23342+10])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[907,23342+6]..src/grammarFunctor.ml[907,23342+10])
                                                      Tpat_construct "None"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[908,23356+8]..src/grammarFunctor.ml[909,23410+66])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[908,23356+12]..src/grammarFunctor.ml[908,23356+18])
                                                          Tpat_var "ending/2507"
                                                        expression (src/grammarFunctor.ml[908,23356+21]..src/grammarFunctor.ml[908,23356+50])
                                                          Texp_ifthenelse
                                                          expression (src/grammarFunctor.ml[908,23356+24]..src/grammarFunctor.ml[908,23356+30])
                                                            Texp_ident "gerund/2503"
                                                          expression (src/grammarFunctor.ml[908,23356+36]..src/grammarFunctor.ml[908,23356+41])
                                                            Texp_constant Const_string("ing",(src/grammarFunctor.ml[908,23356+37]..src/grammarFunctor.ml[908,23356+40]),None)
                                                          Some
                                                            expression (src/grammarFunctor.ml[908,23356+47]..src/grammarFunctor.ml[908,23356+50])
                                                              Texp_constant Const_string("e",(src/grammarFunctor.ml[908,23356+48]..src/grammarFunctor.ml[908,23356+49]),None)
                                                    ]
                                                    expression (src/grammarFunctor.ml[909,23410+8]..src/grammarFunctor.ml[909,23410+66])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[909,23410+8]..src/grammarFunctor.ml[909,23410+22])
                                                        Texp_ident "Stdlib!.Printf.sprintf"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                    Texp_constant Const_string("reduc",(src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost,None)
                                                                  expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                            Texp_constant Const_string(" production ",(src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost,None)
                                                                          expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                                            [
                                                                              expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                []
                                                                              expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                []
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              expression (src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost
                                                                Texp_constant Const_string("reduc%s production %s",(src/grammarFunctor.ml[909,23410+23]..src/grammarFunctor.ml[909,23410+46]) ghost,None)
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[909,23410+47]..src/grammarFunctor.ml[909,23410+53])
                                                            Texp_ident "ending/2507"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[909,23410+54]..src/grammarFunctor.ml[909,23410+66])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[909,23410+55]..src/grammarFunctor.ml[909,23410+60])
                                                              Texp_ident "print/2497"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[909,23410+61]..src/grammarFunctor.ml[909,23410+65])
                                                                  Texp_ident "prod/2504"
                                                            ]
                                                      ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[913,23507+2]..src/grammarFunctor.ml[914,23526+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[913,23507+6]..src/grammarFunctor.ml[913,23507+14])
                                  Tpat_var "tabulate/2508"
                                expression (src/grammarFunctor.ml[913,23507+15]..src/grammarFunctor.ml[914,23526+21]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[913,23507+15]..src/grammarFunctor.ml[913,23507+16])
                                        Tpat_var "f/2510"
                                      expression (src/grammarFunctor.ml[914,23526+4]..src/grammarFunctor.ml[914,23526+21])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[914,23526+4]..src/grammarFunctor.ml[914,23526+17])
                                          Texp_ident "Dune__exe!.Misc.tabulate"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[914,23526+18]..src/grammarFunctor.ml[914,23526+19])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[914,23526+20]..src/grammarFunctor.ml[914,23526+21])
                                              Texp_ident "f/2510"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[916,23549+2]..src/grammarFunctor.ml[917,23563+16])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[916,23549+6]..src/grammarFunctor.ml[916,23549+9])
                                  Tpat_var "sum/2511"
                                expression (src/grammarFunctor.ml[916,23549+10]..src/grammarFunctor.ml[917,23563+16]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[916,23549+10]..src/grammarFunctor.ml[916,23549+11])
                                        Tpat_var "f/2513"
                                      expression (src/grammarFunctor.ml[917,23563+4]..src/grammarFunctor.ml[917,23563+16])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[917,23563+4]..src/grammarFunctor.ml[917,23563+12])
                                          Texp_ident "Dune__exe!.Misc.sum"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[917,23563+13]..src/grammarFunctor.ml[917,23563+14])
                                              Texp_ident "n/2230"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[917,23563+15]..src/grammarFunctor.ml[917,23563+16])
                                              Texp_ident "f/2513"
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[930,24166+2]..src/grammarFunctor.ml[932,24291+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[930,24166+6]..src/grammarFunctor.ml[930,24166+17])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (src/grammarFunctor.ml[930,24166+20]..src/grammarFunctor.ml[930,24166+49])
                                      Ttyp_constr "Stdlib!.Hashtbl.t"
                                      [
                                        core_type (src/grammarFunctor.ml[930,24166+21]..src/grammarFunctor.ml[930,24166+32])
                                          Ttyp_constr "Dune__exe!.Positions.t"
                                          []
                                        core_type (src/grammarFunctor.ml[930,24166+34]..src/grammarFunctor.ml[930,24166+38])
                                          Ttyp_constr "unit/6!"
                                          []
                                      ]
                                  Tpat_alias "ever_useful/2553"
                                  pattern (src/grammarFunctor.ml[930,24166+6]..src/grammarFunctor.ml[930,24166+17])
                                    Tpat_any
                                expression (src/grammarFunctor.ml[932,24291+4]..src/grammarFunctor.ml[932,24291+21])
                                  extra
                                    Texp_constraint
                                    core_type (src/grammarFunctor.ml[930,24166+20]..src/grammarFunctor.ml[930,24166+49])
                                      Ttyp_constr "Stdlib!.Hashtbl.t"
                                      [
                                        core_type (src/grammarFunctor.ml[930,24166+21]..src/grammarFunctor.ml[930,24166+32])
                                          Ttyp_constr "Dune__exe!.Positions.t"
                                          []
                                        core_type (src/grammarFunctor.ml[930,24166+34]..src/grammarFunctor.ml[930,24166+38])
                                          Ttyp_constr "unit/6!"
                                          []
                                      ]
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[932,24291+4]..src/grammarFunctor.ml[932,24291+18])
                                    Texp_ident "Stdlib!.Hashtbl.create"
                                  [
                                    <arg>
                                      Optional "random"
                                      expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                        Texp_construct "None"
                                        []
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[932,24291+19]..src/grammarFunctor.ml[932,24291+21])
                                        Texp_constant Const_int 16
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[934,24314+2]..src/grammarFunctor.ml[943,24577+8])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[934,24314+6]..src/grammarFunctor.ml[934,24314+23])
                                  Tpat_var "consult_prec_decl/2595"
                                expression (src/grammarFunctor.ml[934,24314+24]..src/grammarFunctor.ml[943,24577+8]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[934,24314+24]..src/grammarFunctor.ml[934,24314+28])
                                        Tpat_var "prod/2597"
                                      expression (src/grammarFunctor.ml[935,24345+4]..src/grammarFunctor.ml[943,24577+8])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[935,24345+8]..src/grammarFunctor.ml[935,24345+12])
                                              Tpat_var "osym/2598"
                                            expression (src/grammarFunctor.ml[935,24345+15]..src/grammarFunctor.ml[935,24345+31])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[935,24345+15]..src/grammarFunctor.ml[935,24345+31]) ghost
                                                Texp_ident "Stdlib!.Array.get"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[935,24345+15]..src/grammarFunctor.ml[935,24345+24])
                                                    Texp_ident "prec_decl/2248"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[935,24345+26]..src/grammarFunctor.ml[935,24345+30])
                                                    Texp_ident "prod/2597"
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[936,24380+4]..src/grammarFunctor.ml[943,24577+8])
                                          Texp_tuple
                                          [
                                            expression (src/grammarFunctor.ml[936,24380+4]..src/grammarFunctor.ml[942,24570+5])
                                              Texp_lazy                                              expression (src/grammarFunctor.ml[936,24380+9]..src/grammarFunctor.ml[942,24570+5])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[937,24391+6]..src/grammarFunctor.ml[937,24391+17])
                                                  Texp_ident "Dune__exe!.Option.iter"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[937,24391+18]..src/grammarFunctor.ml[941,24557+7])
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/grammarFunctor.ml[937,24391+23]..src/grammarFunctor.ml[937,24391+26])
                                                            Tpat_var "sym/2599"
                                                          expression (src/grammarFunctor.ml[939,24474+8]..src/grammarFunctor.ml[940,24518+38])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/grammarFunctor.ml[939,24474+12]..src/grammarFunctor.ml[939,24474+15])
                                                                  Tpat_var "pos/2600"
                                                                expression (src/grammarFunctor.ml[939,24474+18]..src/grammarFunctor.ml[939,24474+40])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[939,24474+18]..src/grammarFunctor.ml[939,24474+36])
                                                                    Texp_ident "Dune__exe!.Positions.position"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[939,24474+37]..src/grammarFunctor.ml[939,24474+40])
                                                                        Texp_ident "sym/2599"
                                                                  ]
                                                            ]
                                                            expression (src/grammarFunctor.ml[940,24518+8]..src/grammarFunctor.ml[940,24518+38])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[940,24518+8]..src/grammarFunctor.ml[940,24518+19])
                                                                Texp_ident "Stdlib!.Hashtbl.add"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[940,24518+20]..src/grammarFunctor.ml[940,24518+31])
                                                                    Texp_ident "ever_useful/2553"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[940,24518+32]..src/grammarFunctor.ml[940,24518+35])
                                                                    Texp_ident "pos/2600"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[940,24518+36]..src/grammarFunctor.ml[940,24518+38])
                                                                    Texp_construct "()"
                                                                    []
                                                              ]
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[941,24557+8]..src/grammarFunctor.ml[941,24557+12])
                                                      Texp_ident "osym/2598"
                                                ]
                                            expression (src/grammarFunctor.ml[943,24577+4]..src/grammarFunctor.ml[943,24577+8])
                                              Texp_ident "osym/2598"
                                          ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[949,24767+2]..src/grammarFunctor.ml[960,25244+5])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[949,24767+6]..src/grammarFunctor.ml[949,24767+17])
                                  Tpat_var "diagnostics/2601"
                                expression (src/grammarFunctor.ml[949,24767+18]..src/grammarFunctor.ml[960,25244+5]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[949,24767+18]..src/grammarFunctor.ml[949,24767+20])
                                        Tpat_construct "()"
                                        []
                                        None
                                      expression (src/grammarFunctor.ml[950,24790+4]..src/grammarFunctor.ml[960,25244+5])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[950,24790+4]..src/grammarFunctor.ml[950,24790+9])
                                          Texp_ident "iterx/2486"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[950,24790+10]..src/grammarFunctor.ml[960,25244+5])
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[950,24790+15]..src/grammarFunctor.ml[950,24790+19])
                                                    Tpat_var "prod/2603"
                                                  expression (src/grammarFunctor.ml[951,24813+6]..src/grammarFunctor.ml[959,25231+12])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[951,24813+10]..src/grammarFunctor.ml[951,24813+14])
                                                          Tpat_var "osym/2604"
                                                        expression (src/grammarFunctor.ml[951,24813+17]..src/grammarFunctor.ml[951,24813+33])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[951,24813+17]..src/grammarFunctor.ml[951,24813+33]) ghost
                                                            Texp_ident "Stdlib!.Array.get"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[951,24813+17]..src/grammarFunctor.ml[951,24813+26])
                                                                Texp_ident "prec_decl/2248"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[951,24813+28]..src/grammarFunctor.ml[951,24813+32])
                                                                Texp_ident "prod/2603"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[952,24850+6]..src/grammarFunctor.ml[959,25231+12])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[952,24850+6]..src/grammarFunctor.ml[952,24850+17])
                                                        Texp_ident "Dune__exe!.Option.iter"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[952,24850+18]..src/grammarFunctor.ml[959,25231+7])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[952,24850+23]..src/grammarFunctor.ml[952,24850+26])
                                                                  Tpat_var "sym/2605"
                                                                expression (src/grammarFunctor.ml[954,24944+8]..src/grammarFunctor.ml[958,25219+11])
                                                                  Texp_let Nonrec
                                                                  [
                                                                    <def>
                                                                      pattern (src/grammarFunctor.ml[954,24944+12]..src/grammarFunctor.ml[954,24944+15])
                                                                        Tpat_var "pos/2606"
                                                                      expression (src/grammarFunctor.ml[954,24944+18]..src/grammarFunctor.ml[954,24944+40])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[954,24944+18]..src/grammarFunctor.ml[954,24944+36])
                                                                          Texp_ident "Dune__exe!.Positions.position"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[954,24944+37]..src/grammarFunctor.ml[954,24944+40])
                                                                              Texp_ident "sym/2605"
                                                                        ]
                                                                  ]
                                                                  expression (src/grammarFunctor.ml[955,24988+8]..src/grammarFunctor.ml[958,25219+11])
                                                                    Texp_ifthenelse
                                                                    expression (src/grammarFunctor.ml[955,24988+11]..src/grammarFunctor.ml[955,24988+44])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[955,24988+11]..src/grammarFunctor.ml[955,24988+14])
                                                                        Texp_ident "Stdlib!.not"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[955,24988+15]..src/grammarFunctor.ml[955,24988+44])
                                                                            Texp_apply
                                                                            expression (src/grammarFunctor.ml[955,24988+16]..src/grammarFunctor.ml[955,24988+27])
                                                                              Texp_ident "Stdlib!.Hashtbl.mem"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[955,24988+28]..src/grammarFunctor.ml[955,24988+39])
                                                                                  Texp_ident "ever_useful/2553"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[955,24988+40]..src/grammarFunctor.ml[955,24988+43])
                                                                                  Texp_ident "pos/2606"
                                                                            ]
                                                                      ]
                                                                    expression (src/grammarFunctor.ml[955,24988+50]..src/grammarFunctor.ml[958,25219+11])
                                                                      Texp_sequence
                                                                      expression (src/grammarFunctor.ml[956,25044+10]..src/grammarFunctor.ml[956,25044+80])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[956,25044+10]..src/grammarFunctor.ml[956,25044+31])
                                                                          Texp_ident "Dune__exe!.Error.grammar_warning"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[956,25044+32]..src/grammarFunctor.ml[956,25044+37])
                                                                              Texp_construct "::"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[956,25044+33]..src/grammarFunctor.ml[956,25044+36])
                                                                                  Texp_ident "pos/2606"
                                                                                expression (src/grammarFunctor.ml[956,25044+36]..src/grammarFunctor.ml[956,25044+37]) ghost
                                                                                  Texp_construct "[]"
                                                                                  []
                                                                              ]
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80])
                                                                              Texp_construct "CamlinternalFormatBasics.Format"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                  [
                                                                                    expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                      Texp_constant Const_string("this ",(src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost,None)
                                                                                    expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                      [
                                                                                        expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                          Texp_constant Const_char 25
                                                                                        expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                          [
                                                                                            expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                              Texp_constant Const_string("prec declaration is never useful.",(src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost,None)
                                                                                            expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                              Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                              []
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                expression (src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost
                                                                                  Texp_constant Const_string("this %%prec declaration is never useful.",(src/grammarFunctor.ml[956,25044+38]..src/grammarFunctor.ml[956,25044+80]) ghost,None)
                                                                              ]
                                                                        ]
                                                                      expression (src/grammarFunctor.ml[957,25126+10]..src/grammarFunctor.ml[957,25126+40])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[957,25126+10]..src/grammarFunctor.ml[957,25126+21])
                                                                          Texp_ident "Stdlib!.Hashtbl.add"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[957,25126+22]..src/grammarFunctor.ml[957,25126+33])
                                                                              Texp_ident "ever_useful/2553"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[957,25126+34]..src/grammarFunctor.ml[957,25126+37])
                                                                              Texp_ident "pos/2606"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[957,25126+38]..src/grammarFunctor.ml[957,25126+40])
                                                                              Texp_construct "()"
                                                                              []
                                                                        ]
                                                                    None
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[959,25231+8]..src/grammarFunctor.ml[959,25231+12])
                                                            Texp_ident "osym/2604"
                                                      ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[967,25471+2]..src/grammarFunctor.ml[970,25545+25])
                            Tstr_type Rec
                            [
                              type_declaration production_level/2608 (src/grammarFunctor.ml[967,25471+2]..src/grammarFunctor.ml[970,25545+25])
                                ptype_params =
                                  []
                                ptype_cstrs =
                                  []
                                ptype_kind =
                                  Ttype_variant
                                    [
                                      (src/grammarFunctor.ml[968,25497+4]..src/grammarFunctor.ml[968,25497+11])
                                        PNone/2609
                                        []
                                        None
                                      (src/grammarFunctor.ml[969,25509+4]..src/grammarFunctor.ml[969,25509+35])
                                        PRightmostToken/2610
                                        [
                                          core_type (src/grammarFunctor.ml[969,25509+25]..src/grammarFunctor.ml[969,25509+35])
                                            Ttyp_constr "Terminal/1588.t"
                                            []
                                        ]
                                        None
                                      (src/grammarFunctor.ml[970,25545+4]..src/grammarFunctor.ml[970,25545+25])
                                        PPrecDecl/2611
                                        [
                                          core_type (src/grammarFunctor.ml[970,25545+19]..src/grammarFunctor.ml[970,25545+25])
                                            Ttyp_constr "Dune__exe!.Syntax.symbol"
                                            []
                                        ]
                                        None
                                    ]
                                ptype_private = Public
                                ptype_manifest =
                                  None
                            ]
                          structure_item (src/grammarFunctor.ml[972,25572+2]..src/grammarFunctor.ml[979,25759+22])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[972,25572+6]..src/grammarFunctor.ml[972,25572+24])
                                  Tpat_var "rightmost_terminal/2612"
                                expression (src/grammarFunctor.ml[972,25572+25]..src/grammarFunctor.ml[979,25759+22]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[972,25572+25]..src/grammarFunctor.ml[972,25572+29])
                                        Tpat_var "prod/2614"
                                      expression (src/grammarFunctor.ml[973,25604+4]..src/grammarFunctor.ml[979,25759+22])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[973,25604+4]..src/grammarFunctor.ml[973,25604+19])
                                          Texp_ident "Stdlib!.Array.fold_left"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[973,25604+20]..src/grammarFunctor.ml[979,25759+5])
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[973,25604+25]..src/grammarFunctor.ml[973,25604+29])
                                                    Tpat_var "accu/2615"
                                                  expression (src/grammarFunctor.ml[973,25604+30]..src/grammarFunctor.ml[978,25744+14]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[973,25604+30]..src/grammarFunctor.ml[973,25604+36])
                                                          Tpat_var "symbol/2616"
                                                        expression (src/grammarFunctor.ml[974,25644+6]..src/grammarFunctor.ml[978,25744+14])
                                                          Texp_match
                                                          expression (src/grammarFunctor.ml[974,25644+12]..src/grammarFunctor.ml[974,25644+18])
                                                            Texp_ident "symbol/2616"
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[975,25668+8]..src/grammarFunctor.ml[975,25668+20])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[975,25668+8]..src/grammarFunctor.ml[975,25668+20])
                                                                  Tpat_construct "Symbol.T"
                                                                  [
                                                                    pattern (src/grammarFunctor.ml[975,25668+17]..src/grammarFunctor.ml[975,25668+20])
                                                                      Tpat_var "tok/2617"
                                                                  ]
                                                                  None
                                                              expression (src/grammarFunctor.ml[976,25692+10]..src/grammarFunctor.ml[976,25692+29])
                                                                Texp_construct "PRightmostToken"
                                                                [
                                                                  expression (src/grammarFunctor.ml[976,25692+26]..src/grammarFunctor.ml[976,25692+29])
                                                                    Texp_ident "tok/2617"
                                                                ]
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[977,25722+8]..src/grammarFunctor.ml[977,25722+18])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[977,25722+8]..src/grammarFunctor.ml[977,25722+18])
                                                                  Tpat_construct "Symbol.N"
                                                                  [
                                                                    pattern (src/grammarFunctor.ml[977,25722+17]..src/grammarFunctor.ml[977,25722+18])
                                                                      Tpat_any
                                                                  ]
                                                                  None
                                                              expression (src/grammarFunctor.ml[978,25744+10]..src/grammarFunctor.ml[978,25744+14])
                                                                Texp_ident "accu/2615"
                                                          ]
                                                    ]
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[979,25759+6]..src/grammarFunctor.ml[979,25759+11])
                                              Texp_construct "PNone"
                                              []
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[979,25759+12]..src/grammarFunctor.ml[979,25759+22])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[979,25759+13]..src/grammarFunctor.ml[979,25759+16])
                                                Texp_ident "rhs/2439"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[979,25759+17]..src/grammarFunctor.ml[979,25759+21])
                                                    Texp_ident "prod/2614"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[981,25783+2]..src/grammarFunctor.ml[982,25805+39])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[981,25783+6]..src/grammarFunctor.ml[981,25783+13])
                                  Tpat_var "combine/2618"
                                expression (src/grammarFunctor.ml[981,25783+14]..src/grammarFunctor.ml[982,25805+39]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[981,25783+14]..src/grammarFunctor.ml[981,25783+16])
                                        Tpat_var "e1/2620"
                                      expression (src/grammarFunctor.ml[981,25783+17]..src/grammarFunctor.ml[982,25805+39]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[981,25783+17]..src/grammarFunctor.ml[981,25783+19])
                                              Tpat_var "e2/2621"
                                            expression (src/grammarFunctor.ml[982,25805+4]..src/grammarFunctor.ml[982,25805+39])
                                              Texp_lazy                                              expression (src/grammarFunctor.ml[982,25805+9]..src/grammarFunctor.ml[982,25805+39])
                                                Texp_sequence
                                                expression (src/grammarFunctor.ml[982,25805+10]..src/grammarFunctor.ml[982,25805+23])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[982,25805+10]..src/grammarFunctor.ml[982,25805+20])
                                                    Texp_ident "Stdlib!.Lazy.force"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[982,25805+21]..src/grammarFunctor.ml[982,25805+23])
                                                        Texp_ident "e1/2620"
                                                  ]
                                                expression (src/grammarFunctor.ml[982,25805+25]..src/grammarFunctor.ml[982,25805+38])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[982,25805+25]..src/grammarFunctor.ml[982,25805+35])
                                                    Texp_ident "Stdlib!.Lazy.force"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[982,25805+36]..src/grammarFunctor.ml[982,25805+38])
                                                        Texp_ident "e2/2621"
                                                  ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[984,25846+2]..src/grammarFunctor.ml[1001,26369+34])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[984,25846+6]..src/grammarFunctor.ml[984,25846+16])
                                  Tpat_var "precedence/2635"
                                expression (src/grammarFunctor.ml[984,25846+17]..src/grammarFunctor.ml[1001,26369+34]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[984,25846+17]..src/grammarFunctor.ml[984,25846+21])
                                        Tpat_var "prod/2637"
                                      expression (src/grammarFunctor.ml[985,25870+4]..src/grammarFunctor.ml[1001,26369+34])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[985,25870+8]..src/grammarFunctor.ml[985,25870+24])
                                              Tpat_tuple
                                              [
                                                pattern (src/grammarFunctor.ml[985,25870+8]..src/grammarFunctor.ml[985,25870+13])
                                                  Tpat_var "fact1/2638"
                                                pattern (src/grammarFunctor.ml[985,25870+15]..src/grammarFunctor.ml[985,25870+24])
                                                  Tpat_var "prec_decl/2639"
                                              ]
                                            expression (src/grammarFunctor.ml[985,25870+27]..src/grammarFunctor.ml[985,25870+49])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[985,25870+27]..src/grammarFunctor.ml[985,25870+44])
                                                Texp_ident "consult_prec_decl/2595"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[985,25870+45]..src/grammarFunctor.ml[985,25870+49])
                                                    Texp_ident "prod/2637"
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[986,25923+4]..src/grammarFunctor.ml[1001,26369+34])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[986,25923+8]..src/grammarFunctor.ml[986,25923+17])
                                                Tpat_var "oterminal/2640"
                                              expression (src/grammarFunctor.ml[987,25943+6]..src/grammarFunctor.ml[991,26057+28])
                                                Texp_match
                                                expression (src/grammarFunctor.ml[987,25943+12]..src/grammarFunctor.ml[987,25943+21])
                                                  Texp_ident "prec_decl/2639"
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[988,25970+8]..src/grammarFunctor.ml[988,25970+12])
                                                      Tpat_value
                                                      pattern (src/grammarFunctor.ml[988,25970+8]..src/grammarFunctor.ml[988,25970+12])
                                                        Tpat_construct "None"
                                                        []
                                                        None
                                                    expression (src/grammarFunctor.ml[989,25986+10]..src/grammarFunctor.ml[989,25986+33])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[989,25986+10]..src/grammarFunctor.ml[989,25986+28])
                                                        Texp_ident "rightmost_terminal/2612"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[989,25986+29]..src/grammarFunctor.ml[989,25986+33])
                                                            Texp_ident "prod/2637"
                                                      ]
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[990,26020+8]..src/grammarFunctor.ml[990,26020+33])
                                                      Tpat_value
                                                      pattern (src/grammarFunctor.ml[990,26020+8]..src/grammarFunctor.ml[990,26020+33])
                                                        Tpat_construct "Some"
                                                        [
                                                          pattern (src/grammarFunctor.ml[990,26020+13]..src/grammarFunctor.ml[990,26020+33])
                                                            Tpat_record
                                                            [
                                                              "value"
                                                                pattern (src/grammarFunctor.ml[990,26020+23]..src/grammarFunctor.ml[990,26020+31])
                                                                  Tpat_var "terminal/2641"
                                                            ]
                                                        ]
                                                        None
                                                    expression (src/grammarFunctor.ml[991,26057+10]..src/grammarFunctor.ml[991,26057+28])
                                                      Texp_construct "PPrecDecl"
                                                      [
                                                        expression (src/grammarFunctor.ml[991,26057+20]..src/grammarFunctor.ml[991,26057+28])
                                                          Texp_ident "terminal/2641"
                                                      ]
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[993,26093+4]..src/grammarFunctor.ml[1001,26369+34])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[993,26093+10]..src/grammarFunctor.ml[993,26093+19])
                                              Texp_ident "oterminal/2640"
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[994,26118+6]..src/grammarFunctor.ml[994,26118+11])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[994,26118+6]..src/grammarFunctor.ml[994,26118+11])
                                                    Tpat_construct "PNone"
                                                    []
                                                    None
                                                expression (src/grammarFunctor.ml[995,26133+8]..src/grammarFunctor.ml[995,26133+34])
                                                  Texp_tuple
                                                  [
                                                    expression (src/grammarFunctor.ml[995,26133+8]..src/grammarFunctor.ml[995,26133+13])
                                                      Texp_ident "fact1/2638"
                                                    expression (src/grammarFunctor.ml[995,26133+15]..src/grammarFunctor.ml[995,26133+34])
                                                      Texp_construct "UndefinedPrecedence"
                                                      []
                                                  ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[996,26168+6]..src/grammarFunctor.ml[996,26168+25])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[996,26168+6]..src/grammarFunctor.ml[996,26168+25])
                                                    Tpat_construct "PRightmostToken"
                                                    [
                                                      pattern (src/grammarFunctor.ml[996,26168+22]..src/grammarFunctor.ml[996,26168+25])
                                                        Tpat_var "tok/2642"
                                                    ]
                                                    None
                                                expression (src/grammarFunctor.ml[997,26197+8]..src/grammarFunctor.ml[998,26257+34])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[997,26197+12]..src/grammarFunctor.ml[997,26197+24])
                                                        Tpat_tuple
                                                        [
                                                          pattern (src/grammarFunctor.ml[997,26197+12]..src/grammarFunctor.ml[997,26197+17])
                                                            Tpat_var "fact2/2644"
                                                          pattern (src/grammarFunctor.ml[997,26197+19]..src/grammarFunctor.ml[997,26197+24])
                                                            Tpat_var "level/2645"
                                                        ]
                                                      expression (src/grammarFunctor.ml[997,26197+27]..src/grammarFunctor.ml[997,26197+56])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[997,26197+27]..src/grammarFunctor.ml[997,26197+52])
                                                          Texp_ident "Terminal/1588.precedence_level"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[997,26197+53]..src/grammarFunctor.ml[997,26197+56])
                                                              Texp_ident "tok/2642"
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[998,26257+8]..src/grammarFunctor.ml[998,26257+34])
                                                    Texp_tuple
                                                    [
                                                      expression (src/grammarFunctor.ml[998,26257+8]..src/grammarFunctor.ml[998,26257+27])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[998,26257+8]..src/grammarFunctor.ml[998,26257+15])
                                                          Texp_ident "combine/2618"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[998,26257+16]..src/grammarFunctor.ml[998,26257+21])
                                                              Texp_ident "fact1/2638"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[998,26257+22]..src/grammarFunctor.ml[998,26257+27])
                                                              Texp_ident "fact2/2644"
                                                        ]
                                                      expression (src/grammarFunctor.ml[998,26257+29]..src/grammarFunctor.ml[998,26257+34])
                                                        Texp_ident "level/2645"
                                                    ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[999,26292+6]..src/grammarFunctor.ml[999,26292+18])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[999,26292+6]..src/grammarFunctor.ml[999,26292+18])
                                                    Tpat_construct "PPrecDecl"
                                                    [
                                                      pattern (src/grammarFunctor.ml[999,26292+16]..src/grammarFunctor.ml[999,26292+18])
                                                        Tpat_var "id/2643"
                                                    ]
                                                    None
                                                expression (src/grammarFunctor.ml[1000,26314+8]..src/grammarFunctor.ml[1001,26369+34])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[1000,26314+12]..src/grammarFunctor.ml[1000,26314+24])
                                                        Tpat_tuple
                                                        [
                                                          pattern (src/grammarFunctor.ml[1000,26314+12]..src/grammarFunctor.ml[1000,26314+17])
                                                            Tpat_var "fact2/2646"
                                                          pattern (src/grammarFunctor.ml[1000,26314+19]..src/grammarFunctor.ml[1000,26314+24])
                                                            Tpat_var "level/2647"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1000,26314+27]..src/grammarFunctor.ml[1000,26314+50])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1000,26314+27]..src/grammarFunctor.ml[1000,26314+47])
                                                          Texp_ident "TokPrecedence/990.leveli"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1000,26314+48]..src/grammarFunctor.ml[1000,26314+50])
                                                              Texp_ident "id/2643"
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[1001,26369+8]..src/grammarFunctor.ml[1001,26369+34])
                                                    Texp_tuple
                                                    [
                                                      expression (src/grammarFunctor.ml[1001,26369+8]..src/grammarFunctor.ml[1001,26369+27])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1001,26369+8]..src/grammarFunctor.ml[1001,26369+15])
                                                          Texp_ident "combine/2618"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1001,26369+16]..src/grammarFunctor.ml[1001,26369+21])
                                                              Texp_ident "fact1/2638"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1001,26369+22]..src/grammarFunctor.ml[1001,26369+27])
                                                              Texp_ident "fact2/2646"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1001,26369+29]..src/grammarFunctor.ml[1001,26369+34])
                                                        Texp_ident "level/2647"
                                                    ]
                                            ]
                                  ]
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1005,26410+0]..src/grammarFunctor.ml[1006,26441+38])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1005,26410+4]..src/grammarFunctor.ml[1005,26410+28])
                        Tpat_var "grammar_uses_error_token/2649"
                      expression (src/grammarFunctor.ml[1006,26441+2]..src/grammarFunctor.ml[1006,26441+38])
                        Texp_apply
                        expression (src/grammarFunctor.ml[1006,26441+2]..src/grammarFunctor.ml[1006,26441+3])
                          Texp_ident "Stdlib!.!"
                        [
                          <arg>
                            Nolabel
                            expression (src/grammarFunctor.ml[1006,26441+3]..src/grammarFunctor.ml[1006,26441+38])
                              Texp_ident "Production/2648.grammar_uses_error_token"
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1011,26590+0]..src/grammarFunctor.ml[1022,26799+3])
                  Tstr_module
                  ProductionMap/2688
                    module_expr (src/grammarFunctor.ml[1011,26590+23]..src/grammarFunctor.ml[1022,26799+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1013,26621+2]..src/grammarFunctor.ml[1013,26621+22])
                          Tstr_include                          module_expr (src/grammarFunctor.ml[1013,26621+10]..src/grammarFunctor.ml[1013,26621+22])
                            module_expr (src/grammarFunctor.ml[1013,26621+10]..src/grammarFunctor.ml[1013,26621+22])
                              Tmod_ident "Dune__exe!.Patricia.Big"
                        structure_item (src/grammarFunctor.ml[1017,26697+2]..src/grammarFunctor.ml[1020,26786+11])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1017,26697+6]..src/grammarFunctor.ml[1017,26697+11])
                                Tpat_var "start/2683"
                              expression (src/grammarFunctor.ml[1017,26697+12]..src/grammarFunctor.ml[1020,26786+11]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1017,26697+12]..src/grammarFunctor.ml[1017,26697+13])
                                      Tpat_var "f/2685"
                                    expression (src/grammarFunctor.ml[1018,26713+4]..src/grammarFunctor.ml[1020,26786+11])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1018,26713+4]..src/grammarFunctor.ml[1018,26713+14])
                                        Texp_ident "Dune__exe!.Misc.foldi"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1018,26713+15]..src/grammarFunctor.ml[1018,26713+31])
                                            Texp_ident "Production/2648.start"
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1018,26713+32]..src/grammarFunctor.ml[1020,26786+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1018,26713+37]..src/grammarFunctor.ml[1018,26713+41])
                                                  Tpat_var "prod/2686"
                                                expression (src/grammarFunctor.ml[1018,26713+42]..src/grammarFunctor.ml[1019,26760+25]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1018,26713+42]..src/grammarFunctor.ml[1018,26713+43])
                                                        Tpat_var "m/2687"
                                                      expression (src/grammarFunctor.ml[1019,26760+6]..src/grammarFunctor.ml[1019,26760+25])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1019,26760+6]..src/grammarFunctor.ml[1019,26760+9])
                                                          Texp_ident "add/2655"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1019,26760+10]..src/grammarFunctor.ml[1019,26760+14])
                                                              Texp_ident "prod/2686"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1019,26760+15]..src/grammarFunctor.ml[1019,26760+23])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1019,26760+16]..src/grammarFunctor.ml[1019,26760+17])
                                                                Texp_ident "f/2685"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1019,26760+18]..src/grammarFunctor.ml[1019,26760+22])
                                                                    Texp_ident "prod/2686"
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1019,26760+24]..src/grammarFunctor.ml[1019,26760+25])
                                                              Texp_ident "m/2687"
                                                        ]
                                                  ]
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1020,26786+6]..src/grammarFunctor.ml[1020,26786+11])
                                            Texp_ident "empty/2652"
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[1033,27265+0]..src/grammarFunctor.ml[1157,31358+3])
                  Tstr_module
                  GenericAnalysis/3012
                    module_expr (src/grammarFunctor.ml[1034,27288+2]..src/grammarFunctor.ml[1157,31358+3])
                      Tmod_functor "P/2810"
                      module_type (src/grammarFunctor.ml[1034,27288+7]..src/grammarFunctor.ml[1034,27288+19])
                        Tmty_ident "Dune__exe!.Fix.PROPERTY"
                      module_expr (src/grammarFunctor.ml[1035,27309+2]..src/grammarFunctor.ml[1157,31358+3])
                        Tmod_functor "S/2816"
                        module_type (src/grammarFunctor.ml[1035,27309+7]..src/grammarFunctor.ml[1067,28719+5])
                          Tmty_signature
                          [
                            signature_item (src/grammarFunctor.ml[1036,27320+4]..src/grammarFunctor.ml[1036,27320+10])
                              Tsig_open Fresh "P/2810"
                            signature_item (src/grammarFunctor.ml[1042,27547+4]..src/grammarFunctor.ml[1042,27547+50])
                              Tsig_value
                              value_description shortcut/2811 (src/grammarFunctor.ml[1042,27547+4]..src/grammarFunctor.ml[1042,27547+50])
                                core_type (src/grammarFunctor.ml[1042,27547+18]..src/grammarFunctor.ml[1042,27547+50])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1042,27547+18]..src/grammarFunctor.ml[1042,27547+31])
                                    Ttyp_constr "Nonterminal/1110.t"
                                    []
                                  core_type (src/grammarFunctor.ml[1042,27547+35]..src/grammarFunctor.ml[1042,27547+50])
                                    Ttyp_constr "option/10!"
                                    [
                                      core_type (src/grammarFunctor.ml[1042,27547+35]..src/grammarFunctor.ml[1042,27547+43])
                                        Ttyp_constr "P/2810.property"
                                        []
                                    ]
                                []
                            signature_item (src/grammarFunctor.ml[1045,27658+4]..src/grammarFunctor.ml[1045,27658+40])
                              Tsig_value
                              value_description terminal/2812 (src/grammarFunctor.ml[1045,27658+4]..src/grammarFunctor.ml[1045,27658+40])
                                core_type (src/grammarFunctor.ml[1045,27658+18]..src/grammarFunctor.ml[1045,27658+40])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1045,27658+18]..src/grammarFunctor.ml[1045,27658+28])
                                    Ttyp_constr "Terminal/1588.t"
                                    []
                                  core_type (src/grammarFunctor.ml[1045,27658+32]..src/grammarFunctor.ml[1045,27658+40])
                                    Ttyp_constr "P/2810.property"
                                    []
                                []
                            signature_item (src/grammarFunctor.ml[1051,27954+4]..src/grammarFunctor.ml[1051,27954+63])
                              Tsig_value
                              value_description disjunction/2813 (src/grammarFunctor.ml[1051,27954+4]..src/grammarFunctor.ml[1051,27954+63])
                                core_type (src/grammarFunctor.ml[1051,27954+21]..src/grammarFunctor.ml[1051,27954+63])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1051,27954+21]..src/grammarFunctor.ml[1051,27954+29])
                                    Ttyp_constr "P/2810.property"
                                    []
                                  core_type (src/grammarFunctor.ml[1051,27954+33]..src/grammarFunctor.ml[1051,27954+63])
                                    Ttyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1051,27954+34]..src/grammarFunctor.ml[1051,27954+50])
                                      Ttyp_arrow
                                      Nolabel
                                      core_type (src/grammarFunctor.ml[1051,27954+34]..src/grammarFunctor.ml[1051,27954+38])
                                        Ttyp_constr "unit/6!"
                                        []
                                      core_type (src/grammarFunctor.ml[1051,27954+42]..src/grammarFunctor.ml[1051,27954+50])
                                        Ttyp_constr "P/2810.property"
                                        []
                                    core_type (src/grammarFunctor.ml[1051,27954+55]..src/grammarFunctor.ml[1051,27954+63])
                                      Ttyp_constr "P/2810.property"
                                      []
                                []
                            signature_item (src/grammarFunctor.ml[1061,28508+4]..src/grammarFunctor.ml[1061,28508+75])
                              Tsig_value
                              value_description conjunction/2814 (src/grammarFunctor.ml[1061,28508+4]..src/grammarFunctor.ml[1061,28508+75])
                                core_type (src/grammarFunctor.ml[1061,28508+21]..src/grammarFunctor.ml[1061,28508+75])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1061,28508+21]..src/grammarFunctor.ml[1061,28508+29])
                                    Ttyp_constr "Symbol/1729.t"
                                    []
                                  core_type (src/grammarFunctor.ml[1061,28508+33]..src/grammarFunctor.ml[1061,28508+75])
                                    Ttyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1061,28508+33]..src/grammarFunctor.ml[1061,28508+41])
                                      Ttyp_constr "P/2810.property"
                                      []
                                    core_type (src/grammarFunctor.ml[1061,28508+45]..src/grammarFunctor.ml[1061,28508+75])
                                      Ttyp_arrow
                                      Nolabel
                                      core_type (src/grammarFunctor.ml[1061,28508+46]..src/grammarFunctor.ml[1061,28508+62])
                                        Ttyp_arrow
                                        Nolabel
                                        core_type (src/grammarFunctor.ml[1061,28508+46]..src/grammarFunctor.ml[1061,28508+50])
                                          Ttyp_constr "unit/6!"
                                          []
                                        core_type (src/grammarFunctor.ml[1061,28508+54]..src/grammarFunctor.ml[1061,28508+62])
                                          Ttyp_constr "P/2810.property"
                                          []
                                      core_type (src/grammarFunctor.ml[1061,28508+67]..src/grammarFunctor.ml[1061,28508+75])
                                        Ttyp_constr "P/2810.property"
                                        []
                                []
                            signature_item (src/grammarFunctor.ml[1065,28692+4]..src/grammarFunctor.ml[1065,28692+25])
                              Tsig_value
                              value_description epsilon/2815 (src/grammarFunctor.ml[1065,28692+4]..src/grammarFunctor.ml[1065,28692+25])
                                core_type (src/grammarFunctor.ml[1065,28692+17]..src/grammarFunctor.ml[1065,28692+25])
                                  Ttyp_constr "P/2810.property"
                                  []
                                []
                          ]
                        module_expr (src/grammarFunctor.ml[1068,28726+0]..src/grammarFunctor.ml[1157,31358+3])
                          Tmod_constraint
                          module_expr (src/grammarFunctor.ml[1085,29293+6]..src/grammarFunctor.ml[1157,31358+3])
                            module_expr (src/grammarFunctor.ml[1085,29293+6]..src/grammarFunctor.ml[1157,31358+3])
                              Tmod_structure
                              [
                                structure_item (src/grammarFunctor.ml[1086,29306+2]..src/grammarFunctor.ml[1086,29306+8])
                                  Tstr_open Fresh
                                  module_expr (src/grammarFunctor.ml[1086,29306+7]..src/grammarFunctor.ml[1086,29306+8])
                                    Tmod_ident "P/2810"
                                structure_item (src/grammarFunctor.ml[1094,29554+2]..src/grammarFunctor.ml[1100,29730+14])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1094,29554+6]..src/grammarFunctor.ml[1094,29554+12])
                                        Tpat_var "symbol/2817"
                                      expression (src/grammarFunctor.ml[1094,29554+13]..src/grammarFunctor.ml[1100,29730+14]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1094,29554+13]..src/grammarFunctor.ml[1094,29554+16])
                                              Tpat_var "sym/2819"
                                            expression (src/grammarFunctor.ml[1094,29554+17]..src/grammarFunctor.ml[1100,29730+14]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1094,29554+17]..src/grammarFunctor.ml[1094,29554+20])
                                                    Tpat_var "get/2820"
                                                  expression (src/grammarFunctor.ml[1095,29588+4]..src/grammarFunctor.ml[1100,29730+14])
                                                    extra
                                                      Texp_constraint
                                                      core_type (src/grammarFunctor.ml[1094,29554+23]..src/grammarFunctor.ml[1094,29554+31])
                                                        Ttyp_constr "P/2810.property"
                                                        []
                                                    Texp_match
                                                    expression (src/grammarFunctor.ml[1095,29588+10]..src/grammarFunctor.ml[1095,29588+13])
                                                      Texp_ident "sym/2819"
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1096,29607+6]..src/grammarFunctor.ml[1096,29607+18])
                                                          Tpat_value
                                                          pattern (src/grammarFunctor.ml[1096,29607+6]..src/grammarFunctor.ml[1096,29607+18])
                                                            Tpat_construct "Symbol.T"
                                                            [
                                                              pattern (src/grammarFunctor.ml[1096,29607+15]..src/grammarFunctor.ml[1096,29607+18])
                                                                Tpat_var "tok/2821"
                                                            ]
                                                            None
                                                        expression (src/grammarFunctor.ml[1097,29629+8]..src/grammarFunctor.ml[1097,29629+22])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1097,29629+8]..src/grammarFunctor.ml[1097,29629+18])
                                                            Texp_ident "S/2816.terminal"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1097,29629+19]..src/grammarFunctor.ml[1097,29629+22])
                                                                Texp_ident "tok/2821"
                                                          ]
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1098,29652+6]..src/grammarFunctor.ml[1098,29652+17])
                                                          Tpat_value
                                                          pattern (src/grammarFunctor.ml[1098,29652+6]..src/grammarFunctor.ml[1098,29652+17])
                                                            Tpat_construct "Symbol.N"
                                                            [
                                                              pattern (src/grammarFunctor.ml[1098,29652+15]..src/grammarFunctor.ml[1098,29652+17])
                                                                Tpat_var "nt/2822"
                                                            ]
                                                            None
                                                        expression (src/grammarFunctor.ml[1100,29730+8]..src/grammarFunctor.ml[1100,29730+14])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1100,29730+8]..src/grammarFunctor.ml[1100,29730+11])
                                                            Texp_ident "get/2820"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1100,29730+12]..src/grammarFunctor.ml[1100,29730+14])
                                                                Texp_ident "nt/2822"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[1104,29825+2]..src/grammarFunctor.ml[1120,30385+10])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1104,29825+6]..src/grammarFunctor.ml[1104,29825+16])
                                        Tpat_var "production/2823"
                                      expression (src/grammarFunctor.ml[1104,29825+17]..src/grammarFunctor.ml[1120,30385+10]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1104,29825+17]..src/grammarFunctor.ml[1104,29825+21])
                                              Tpat_var "prod/2825"
                                            expression (src/grammarFunctor.ml[1104,29825+22]..src/grammarFunctor.ml[1120,30385+10]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1104,29825+22]..src/grammarFunctor.ml[1104,29825+23])
                                                    Tpat_var "i/2826"
                                                  expression (src/grammarFunctor.ml[1104,29825+24]..src/grammarFunctor.ml[1120,30385+10]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1104,29825+24]..src/grammarFunctor.ml[1104,29825+27])
                                                          Tpat_var "get/2827"
                                                        expression (src/grammarFunctor.ml[1105,29866+4]..src/grammarFunctor.ml[1120,30385+10])
                                                          extra
                                                            Texp_constraint
                                                            core_type (src/grammarFunctor.ml[1104,29825+30]..src/grammarFunctor.ml[1104,29825+38])
                                                              Ttyp_constr "P/2810.property"
                                                              []
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[1105,29866+8]..src/grammarFunctor.ml[1105,29866+11])
                                                                Tpat_var "rhs/2828"
                                                              expression (src/grammarFunctor.ml[1105,29866+14]..src/grammarFunctor.ml[1105,29866+33])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1105,29866+14]..src/grammarFunctor.ml[1105,29866+28])
                                                                  Texp_ident "Production/2648.rhs"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1105,29866+29]..src/grammarFunctor.ml[1105,29866+33])
                                                                      Texp_ident "prod/2825"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[1106,29903+4]..src/grammarFunctor.ml[1120,30385+10])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/grammarFunctor.ml[1106,29903+8]..src/grammarFunctor.ml[1106,29903+9])
                                                                  Tpat_var "n/2829"
                                                                expression (src/grammarFunctor.ml[1106,29903+12]..src/grammarFunctor.ml[1106,29903+28])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1106,29903+12]..src/grammarFunctor.ml[1106,29903+24])
                                                                    Texp_ident "Stdlib!.Array.length"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1106,29903+25]..src/grammarFunctor.ml[1106,29903+28])
                                                                        Texp_ident "rhs/2828"
                                                                  ]
                                                            ]
                                                            expression (src/grammarFunctor.ml[1111,30193+4]..src/grammarFunctor.ml[1120,30385+10])
                                                              Texp_let Rec
                                                              [
                                                                <def>
                                                                  pattern (src/grammarFunctor.ml[1111,30193+12]..src/grammarFunctor.ml[1111,30193+16])
                                                                    Tpat_var "loop/2830"
                                                                  expression (src/grammarFunctor.ml[1111,30193+17]..src/grammarFunctor.ml[1118,30345+32]) ghost
                                                                    Texp_function
                                                                    Nolabel
                                                                    [
                                                                      <case>
                                                                        pattern (src/grammarFunctor.ml[1111,30193+17]..src/grammarFunctor.ml[1111,30193+18])
                                                                          Tpat_var "i/2831"
                                                                        expression (src/grammarFunctor.ml[1112,30214+6]..src/grammarFunctor.ml[1118,30345+32])
                                                                          Texp_ifthenelse
                                                                          expression (src/grammarFunctor.ml[1112,30214+9]..src/grammarFunctor.ml[1112,30214+14])
                                                                            Texp_apply
                                                                            expression (src/grammarFunctor.ml[1112,30214+11]..src/grammarFunctor.ml[1112,30214+12])
                                                                              Texp_ident "Stdlib!.="
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1112,30214+9]..src/grammarFunctor.ml[1112,30214+10])
                                                                                  Texp_ident "i/2831"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1112,30214+13]..src/grammarFunctor.ml[1112,30214+14])
                                                                                  Texp_ident "n/2829"
                                                                            ]
                                                                          expression (src/grammarFunctor.ml[1113,30234+8]..src/grammarFunctor.ml[1113,30234+17])
                                                                            Texp_ident "S/2816.epsilon"
                                                                          Some
                                                                            expression (src/grammarFunctor.ml[1115,30263+8]..src/grammarFunctor.ml[1118,30345+32])
                                                                              Texp_let Nonrec
                                                                              [
                                                                                <def>
                                                                                  pattern (src/grammarFunctor.ml[1115,30263+12]..src/grammarFunctor.ml[1115,30263+15])
                                                                                    Tpat_var "sym/2832"
                                                                                  expression (src/grammarFunctor.ml[1115,30263+18]..src/grammarFunctor.ml[1115,30263+25])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1115,30263+18]..src/grammarFunctor.ml[1115,30263+25]) ghost
                                                                                      Texp_ident "Stdlib!.Array.get"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1115,30263+18]..src/grammarFunctor.ml[1115,30263+21])
                                                                                          Texp_ident "rhs/2828"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1115,30263+23]..src/grammarFunctor.ml[1115,30263+24])
                                                                                          Texp_ident "i/2831"
                                                                                    ]
                                                                              ]
                                                                              expression (src/grammarFunctor.ml[1116,30292+8]..src/grammarFunctor.ml[1118,30345+32])
                                                                                Texp_apply
                                                                                expression (src/grammarFunctor.ml[1116,30292+8]..src/grammarFunctor.ml[1116,30292+21])
                                                                                  Texp_ident "S/2816.conjunction"
                                                                                [
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1116,30292+22]..src/grammarFunctor.ml[1116,30292+25])
                                                                                      Texp_ident "sym/2832"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1117,30318+10]..src/grammarFunctor.ml[1117,30318+26])
                                                                                      Texp_apply
                                                                                      expression (src/grammarFunctor.ml[1117,30318+11]..src/grammarFunctor.ml[1117,30318+17])
                                                                                        Texp_ident "symbol/2817"
                                                                                      [
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/grammarFunctor.ml[1117,30318+18]..src/grammarFunctor.ml[1117,30318+21])
                                                                                            Texp_ident "sym/2832"
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/grammarFunctor.ml[1117,30318+22]..src/grammarFunctor.ml[1117,30318+25])
                                                                                            Texp_ident "get/2827"
                                                                                      ]
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1118,30345+10]..src/grammarFunctor.ml[1118,30345+32])
                                                                                      Texp_function
                                                                                      Nolabel
                                                                                      [
                                                                                        <case>
                                                                                          pattern (src/grammarFunctor.ml[1118,30345+15]..src/grammarFunctor.ml[1118,30345+17])
                                                                                            Tpat_construct "()"
                                                                                            []
                                                                                            None
                                                                                          expression (src/grammarFunctor.ml[1118,30345+21]..src/grammarFunctor.ml[1118,30345+31])
                                                                                            Texp_apply
                                                                                            expression (src/grammarFunctor.ml[1118,30345+21]..src/grammarFunctor.ml[1118,30345+25])
                                                                                              Texp_ident "loop/2830"
                                                                                            [
                                                                                              <arg>
                                                                                                Nolabel
                                                                                                expression (src/grammarFunctor.ml[1118,30345+26]..src/grammarFunctor.ml[1118,30345+31])
                                                                                                  Texp_apply
                                                                                                  expression (src/grammarFunctor.ml[1118,30345+28]..src/grammarFunctor.ml[1118,30345+29])
                                                                                                    Texp_ident "Stdlib!.+"
                                                                                                  [
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[1118,30345+27]..src/grammarFunctor.ml[1118,30345+28])
                                                                                                        Texp_ident "i/2831"
                                                                                                    <arg>
                                                                                                      Nolabel
                                                                                                      expression (src/grammarFunctor.ml[1118,30345+29]..src/grammarFunctor.ml[1118,30345+30])
                                                                                                        Texp_constant Const_int 1
                                                                                                  ]
                                                                                            ]
                                                                                      ]
                                                                                ]
                                                                    ]
                                                              ]
                                                              expression (src/grammarFunctor.ml[1120,30385+4]..src/grammarFunctor.ml[1120,30385+10])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1120,30385+4]..src/grammarFunctor.ml[1120,30385+8])
                                                                  Texp_ident "loop/2830"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1120,30385+9]..src/grammarFunctor.ml[1120,30385+10])
                                                                      Texp_ident "i/2826"
                                                                ]
                                                    ]
                                              ]
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[1126,30605+2]..src/grammarFunctor.ml[1136,30917+18])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1126,30605+6]..src/grammarFunctor.ml[1126,30605+17])
                                        Tpat_var "nonterminal/2834"
                                      expression (src/grammarFunctor.ml[1126,30605+18]..src/grammarFunctor.ml[1136,30917+18]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1126,30605+18]..src/grammarFunctor.ml[1126,30605+20])
                                              Tpat_var "nt/2836"
                                            expression (src/grammarFunctor.ml[1126,30605+21]..src/grammarFunctor.ml[1136,30917+18]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1126,30605+21]..src/grammarFunctor.ml[1126,30605+24])
                                                    Tpat_var "get/2837"
                                                  expression (src/grammarFunctor.ml[1127,30643+4]..src/grammarFunctor.ml[1136,30917+18])
                                                    extra
                                                      Texp_constraint
                                                      core_type (src/grammarFunctor.ml[1126,30605+27]..src/grammarFunctor.ml[1126,30605+35])
                                                        Ttyp_constr "P/2810.property"
                                                        []
                                                    Texp_match
                                                    expression (src/grammarFunctor.ml[1127,30643+10]..src/grammarFunctor.ml[1127,30643+23])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1127,30643+10]..src/grammarFunctor.ml[1127,30643+20])
                                                        Texp_ident "S/2816.shortcut"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1127,30643+21]..src/grammarFunctor.ml[1127,30643+23])
                                                            Texp_ident "nt/2836"
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1128,30672+6]..src/grammarFunctor.ml[1128,30672+12])
                                                          Tpat_value
                                                          pattern (src/grammarFunctor.ml[1128,30672+6]..src/grammarFunctor.ml[1128,30672+12])
                                                            Tpat_construct "Some"
                                                            [
                                                              pattern (src/grammarFunctor.ml[1128,30672+11]..src/grammarFunctor.ml[1128,30672+12])
                                                                Tpat_var "p/2838"
                                                            ]
                                                            None
                                                        expression (src/grammarFunctor.ml[1129,30688+8]..src/grammarFunctor.ml[1129,30688+9])
                                                          Texp_ident "p/2838"
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1130,30698+6]..src/grammarFunctor.ml[1130,30698+10])
                                                          Tpat_value
                                                          pattern (src/grammarFunctor.ml[1130,30698+6]..src/grammarFunctor.ml[1130,30698+10])
                                                            Tpat_construct "None"
                                                            []
                                                            None
                                                        expression (src/grammarFunctor.ml[1132,30788+8]..src/grammarFunctor.ml[1136,30917+18])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1132,30788+8]..src/grammarFunctor.ml[1132,30788+30])
                                                            Texp_ident "Production/2648.foldnt_lazy"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1132,30788+31]..src/grammarFunctor.ml[1132,30788+33])
                                                                Texp_ident "nt/2836"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1132,30788+34]..src/grammarFunctor.ml[1136,30917+9])
                                                                Texp_function
                                                                Nolabel
                                                                [
                                                                  <case>
                                                                    pattern (src/grammarFunctor.ml[1132,30788+39]..src/grammarFunctor.ml[1132,30788+43])
                                                                      Tpat_var "prod/2839"
                                                                    expression (src/grammarFunctor.ml[1132,30788+44]..src/grammarFunctor.ml[1135,30900+16]) ghost
                                                                      Texp_function
                                                                      Nolabel
                                                                      [
                                                                        <case>
                                                                          pattern (src/grammarFunctor.ml[1132,30788+44]..src/grammarFunctor.ml[1132,30788+48])
                                                                            Tpat_var "rest/2840"
                                                                          expression (src/grammarFunctor.ml[1133,30840+10]..src/grammarFunctor.ml[1135,30900+16])
                                                                            Texp_apply
                                                                            expression (src/grammarFunctor.ml[1133,30840+10]..src/grammarFunctor.ml[1133,30840+23])
                                                                              Texp_ident "S/2816.disjunction"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1134,30864+12]..src/grammarFunctor.ml[1134,30864+35])
                                                                                  Texp_apply
                                                                                  expression (src/grammarFunctor.ml[1134,30864+13]..src/grammarFunctor.ml[1134,30864+23])
                                                                                    Texp_ident "production/2823"
                                                                                  [
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1134,30864+24]..src/grammarFunctor.ml[1134,30864+28])
                                                                                        Texp_ident "prod/2839"
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1134,30864+29]..src/grammarFunctor.ml[1134,30864+30])
                                                                                        Texp_constant Const_int 0
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1134,30864+31]..src/grammarFunctor.ml[1134,30864+34])
                                                                                        Texp_ident "get/2837"
                                                                                  ]
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1135,30900+12]..src/grammarFunctor.ml[1135,30900+16])
                                                                                  Texp_ident "rest/2840"
                                                                            ]
                                                                      ]
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1136,30917+10]..src/grammarFunctor.ml[1136,30917+18])
                                                                Texp_ident "P/2810.bottom"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[1141,31062+2]..src/grammarFunctor.ml[1144,31141+9])
                                  Tstr_module
                                  F/2987
                                    module_expr (src/grammarFunctor.ml[1142,31075+4]..src/grammarFunctor.ml[1144,31141+9])
                                      Tmod_apply
                                      module_expr (src/grammarFunctor.ml[1142,31075+4]..src/grammarFunctor.ml[1143,31088+52])
                                        Tmod_apply
                                        module_expr (src/grammarFunctor.ml[1142,31075+4]..src/grammarFunctor.ml[1142,31075+12])
                                          module_expr (src/grammarFunctor.ml[1142,31075+4]..src/grammarFunctor.ml[1142,31075+12])
                                            Tmod_ident "Dune__exe!.Fix.Make"
                                        module_expr (src/grammarFunctor.ml[1143,31088+7]..src/grammarFunctor.ml[1143,31088+51])
                                          Tmod_apply
                                          module_expr (src/grammarFunctor.ml[1143,31088+7]..src/grammarFunctor.ml[1143,31088+38])
                                            module_expr (src/grammarFunctor.ml[1143,31088+7]..src/grammarFunctor.ml[1143,31088+38])
                                              Tmod_ident "Dune__exe!.Fix.Glue.ArraysAsImperativeMaps"
                                          module_expr (src/grammarFunctor.ml[1143,31088+39]..src/grammarFunctor.ml[1143,31088+50])
                                            Tmod_ident "Nonterminal/1110"
                                      module_expr (src/grammarFunctor.ml[1144,31141+7]..src/grammarFunctor.ml[1144,31141+8])
                                        Tmod_ident "P/2810"
                                structure_item (src/grammarFunctor.ml[1146,31152+2]..src/grammarFunctor.ml[1147,31172+21])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1146,31152+6]..src/grammarFunctor.ml[1146,31152+17])
                                        Tpat_var "nonterminal/2988"
                                      expression (src/grammarFunctor.ml[1147,31172+4]..src/grammarFunctor.ml[1147,31172+21])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1147,31172+4]..src/grammarFunctor.ml[1147,31172+9])
                                          Texp_ident "F/2987.lfp"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1147,31172+10]..src/grammarFunctor.ml[1147,31172+21])
                                              Texp_ident "nonterminal/2834"
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[1151,31250+2]..src/grammarFunctor.ml[1152,31269+26])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1151,31250+6]..src/grammarFunctor.ml[1151,31250+12])
                                        Tpat_var "symbol/3004"
                                      expression (src/grammarFunctor.ml[1151,31250+13]..src/grammarFunctor.ml[1152,31269+26]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1151,31250+13]..src/grammarFunctor.ml[1151,31250+16])
                                              Tpat_var "sym/3005"
                                            expression (src/grammarFunctor.ml[1152,31269+4]..src/grammarFunctor.ml[1152,31269+26])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1152,31269+4]..src/grammarFunctor.ml[1152,31269+10])
                                                Texp_ident "symbol/2817"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1152,31269+11]..src/grammarFunctor.ml[1152,31269+14])
                                                    Texp_ident "sym/3005"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1152,31269+15]..src/grammarFunctor.ml[1152,31269+26])
                                                    Texp_ident "nonterminal/2988"
                                              ]
                                        ]
                                  ]
                                structure_item (src/grammarFunctor.ml[1154,31297+2]..src/grammarFunctor.ml[1155,31323+33])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (src/grammarFunctor.ml[1154,31297+6]..src/grammarFunctor.ml[1154,31297+16])
                                        Tpat_var "production/3006"
                                      expression (src/grammarFunctor.ml[1154,31297+17]..src/grammarFunctor.ml[1155,31323+33]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1154,31297+17]..src/grammarFunctor.ml[1154,31297+21])
                                              Tpat_var "prod/3007"
                                            expression (src/grammarFunctor.ml[1154,31297+22]..src/grammarFunctor.ml[1155,31323+33]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1154,31297+22]..src/grammarFunctor.ml[1154,31297+23])
                                                    Tpat_var "i/3008"
                                                  expression (src/grammarFunctor.ml[1155,31323+4]..src/grammarFunctor.ml[1155,31323+33])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1155,31323+4]..src/grammarFunctor.ml[1155,31323+14])
                                                      Texp_ident "production/2823"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1155,31323+15]..src/grammarFunctor.ml[1155,31323+19])
                                                          Texp_ident "prod/3007"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1155,31323+20]..src/grammarFunctor.ml[1155,31323+21])
                                                          Texp_ident "i/3008"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1155,31323+22]..src/grammarFunctor.ml[1155,31323+33])
                                                          Texp_ident "nonterminal/2988"
                                                    ]
                                              ]
                                        ]
                                  ]
                              ]
                          module_type (src/grammarFunctor.ml[1068,28726+2]..src/grammarFunctor.ml[1085,29293+3])
                            Tmty_signature
                            [
                              signature_item (src/grammarFunctor.ml[1069,28732+2]..src/grammarFunctor.ml[1069,28732+8])
                                Tsig_open Fresh "P/2810"
                              signature_item (src/grammarFunctor.ml[1074,28866+2]..src/grammarFunctor.ml[1074,28866+44])
                                Tsig_value
                                value_description nonterminal/3009 (src/grammarFunctor.ml[1074,28866+2]..src/grammarFunctor.ml[1074,28866+44])
                                  core_type (src/grammarFunctor.ml[1074,28866+19]..src/grammarFunctor.ml[1074,28866+44])
                                    Ttyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1074,28866+19]..src/grammarFunctor.ml[1074,28866+32])
                                      Ttyp_constr "Nonterminal/1110.t"
                                      []
                                    core_type (src/grammarFunctor.ml[1074,28866+36]..src/grammarFunctor.ml[1074,28866+44])
                                      Ttyp_constr "P/2810.property"
                                      []
                                  []
                              signature_item (src/grammarFunctor.ml[1077,28962+2]..src/grammarFunctor.ml[1077,28962+34])
                                Tsig_value
                                value_description symbol/3010 (src/grammarFunctor.ml[1077,28962+2]..src/grammarFunctor.ml[1077,28962+34])
                                  core_type (src/grammarFunctor.ml[1077,28962+14]..src/grammarFunctor.ml[1077,28962+34])
                                    Ttyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1077,28962+14]..src/grammarFunctor.ml[1077,28962+22])
                                      Ttyp_constr "Symbol/1729.t"
                                      []
                                    core_type (src/grammarFunctor.ml[1077,28962+26]..src/grammarFunctor.ml[1077,28962+34])
                                      Ttyp_constr "P/2810.property"
                                      []
                                  []
                              signature_item (src/grammarFunctor.ml[1083,29238+2]..src/grammarFunctor.ml[1083,29238+53])
                                Tsig_value
                                value_description production/3011 (src/grammarFunctor.ml[1083,29238+2]..src/grammarFunctor.ml[1083,29238+53])
                                  core_type (src/grammarFunctor.ml[1083,29238+18]..src/grammarFunctor.ml[1083,29238+53])
                                    Ttyp_arrow
                                    Nolabel
                                    core_type (src/grammarFunctor.ml[1083,29238+18]..src/grammarFunctor.ml[1083,29238+34])
                                      Ttyp_constr "Production/2648.index"
                                      []
                                    core_type (src/grammarFunctor.ml[1083,29238+38]..src/grammarFunctor.ml[1083,29238+53])
                                      Ttyp_arrow
                                      Nolabel
                                      core_type (src/grammarFunctor.ml[1083,29238+38]..src/grammarFunctor.ml[1083,29238+41])
                                        Ttyp_constr "int/1!"
                                        []
                                      core_type (src/grammarFunctor.ml[1083,29238+45]..src/grammarFunctor.ml[1083,29238+53])
                                        Ttyp_constr "P/2810.property"
                                        []
                                  []
                            ]
                structure_item (src/grammarFunctor.ml[1166,31732+0]..src/grammarFunctor.ml[1180,32247+9])
                  Tstr_module
                  NONEMPTY/3051
                    module_expr (src/grammarFunctor.ml[1167,31750+2]..src/grammarFunctor.ml[1180,32247+9])
                      Tmod_apply
                      module_expr (src/grammarFunctor.ml[1167,31750+2]..src/grammarFunctor.ml[1168,31768+22])
                        Tmod_apply
                        module_expr (src/grammarFunctor.ml[1167,31750+2]..src/grammarFunctor.ml[1167,31750+17])
                          Tmod_ident "GenericAnalysis/3012"
                        module_expr (src/grammarFunctor.ml[1168,31768+5]..src/grammarFunctor.ml[1168,31768+21])
                          module_expr (src/grammarFunctor.ml[1168,31768+5]..src/grammarFunctor.ml[1168,31768+21])
                            Tmod_ident "Dune__exe!.Fix.Prop.Boolean"
                      module_expr (src/grammarFunctor.ml[1169,31791+5]..src/grammarFunctor.ml[1180,32247+8])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1170,31803+6]..src/grammarFunctor.ml[1170,31803+29])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1170,31803+10]..src/grammarFunctor.ml[1170,31803+18])
                                  Tpat_var "shortcut/3013"
                                expression (src/grammarFunctor.ml[1170,31803+19]..src/grammarFunctor.ml[1170,31803+29]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1170,31803+19]..src/grammarFunctor.ml[1170,31803+22])
                                        Tpat_var "_nt/3015"
                                      expression (src/grammarFunctor.ml[1170,31803+25]..src/grammarFunctor.ml[1170,31803+29])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1172,31876+6]..src/grammarFunctor.ml[1172,31876+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1172,31876+10]..src/grammarFunctor.ml[1172,31876+18])
                                  Tpat_var "terminal/3016"
                                expression (src/grammarFunctor.ml[1172,31876+19]..src/grammarFunctor.ml[1172,31876+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1172,31876+19]..src/grammarFunctor.ml[1172,31876+20])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1172,31876+23]..src/grammarFunctor.ml[1172,31876+27])
                                        Texp_construct "true"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1174,31979+6]..src/grammarFunctor.ml[1174,31979+36])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1174,31979+10]..src/grammarFunctor.ml[1174,31979+21])
                                  Tpat_var "disjunction/3019"
                                expression (src/grammarFunctor.ml[1174,31979+22]..src/grammarFunctor.ml[1174,31979+36]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1174,31979+22]..src/grammarFunctor.ml[1174,31979+23])
                                        Tpat_var "p/3021"
                                      expression (src/grammarFunctor.ml[1174,31979+24]..src/grammarFunctor.ml[1174,31979+36]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1174,31979+24]..src/grammarFunctor.ml[1174,31979+25])
                                              Tpat_var "q/3022"
                                            expression (src/grammarFunctor.ml[1174,31979+28]..src/grammarFunctor.ml[1174,31979+36])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1174,31979+30]..src/grammarFunctor.ml[1174,31979+32])
                                                Texp_ident "Stdlib!.||"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1174,31979+28]..src/grammarFunctor.ml[1174,31979+29])
                                                    Texp_ident "p/3021"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1174,31979+33]..src/grammarFunctor.ml[1174,31979+36])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1174,31979+33]..src/grammarFunctor.ml[1174,31979+34])
                                                      Texp_ident "q/3022"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1174,31979+34]..src/grammarFunctor.ml[1174,31979+36])
                                                          Texp_construct "()"
                                                          []
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1176,32081+6]..src/grammarFunctor.ml[1176,32081+38])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1176,32081+10]..src/grammarFunctor.ml[1176,32081+21])
                                  Tpat_var "conjunction/3023"
                                expression (src/grammarFunctor.ml[1176,32081+22]..src/grammarFunctor.ml[1176,32081+38]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1176,32081+22]..src/grammarFunctor.ml[1176,32081+23])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1176,32081+24]..src/grammarFunctor.ml[1176,32081+38]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1176,32081+24]..src/grammarFunctor.ml[1176,32081+25])
                                              Tpat_var "p/3025"
                                            expression (src/grammarFunctor.ml[1176,32081+26]..src/grammarFunctor.ml[1176,32081+38]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1176,32081+26]..src/grammarFunctor.ml[1176,32081+27])
                                                    Tpat_var "q/3026"
                                                  expression (src/grammarFunctor.ml[1176,32081+30]..src/grammarFunctor.ml[1176,32081+38])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1176,32081+32]..src/grammarFunctor.ml[1176,32081+34])
                                                      Texp_ident "Stdlib!.&&"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1176,32081+30]..src/grammarFunctor.ml[1176,32081+31])
                                                          Texp_ident "p/3025"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1176,32081+35]..src/grammarFunctor.ml[1176,32081+38])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1176,32081+35]..src/grammarFunctor.ml[1176,32081+36])
                                                            Texp_ident "q/3026"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1176,32081+36]..src/grammarFunctor.ml[1176,32081+38])
                                                                Texp_construct "()"
                                                                []
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1179,32222+6]..src/grammarFunctor.ml[1179,32222+24])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1179,32222+10]..src/grammarFunctor.ml[1179,32222+17])
                                  Tpat_var "epsilon/3028"
                                expression (src/grammarFunctor.ml[1179,32222+20]..src/grammarFunctor.ml[1179,32222+24])
                                  Texp_construct "true"
                                  []
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1182,32258+0]..src/grammarFunctor.ml[1195,32722+9])
                  Tstr_module
                  NULLABLE/3080
                    module_expr (src/grammarFunctor.ml[1183,32276+2]..src/grammarFunctor.ml[1195,32722+9])
                      Tmod_apply
                      module_expr (src/grammarFunctor.ml[1183,32276+2]..src/grammarFunctor.ml[1184,32294+22])
                        Tmod_apply
                        module_expr (src/grammarFunctor.ml[1183,32276+2]..src/grammarFunctor.ml[1183,32276+17])
                          Tmod_ident "GenericAnalysis/3012"
                        module_expr (src/grammarFunctor.ml[1184,32294+5]..src/grammarFunctor.ml[1184,32294+21])
                          module_expr (src/grammarFunctor.ml[1184,32294+5]..src/grammarFunctor.ml[1184,32294+21])
                            Tmod_ident "Dune__exe!.Fix.Prop.Boolean"
                      module_expr (src/grammarFunctor.ml[1185,32317+5]..src/grammarFunctor.ml[1195,32722+8])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1186,32329+6]..src/grammarFunctor.ml[1186,32329+29])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1186,32329+10]..src/grammarFunctor.ml[1186,32329+18])
                                  Tpat_var "shortcut/3052"
                                expression (src/grammarFunctor.ml[1186,32329+19]..src/grammarFunctor.ml[1186,32329+29]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1186,32329+19]..src/grammarFunctor.ml[1186,32329+22])
                                        Tpat_var "_nt/3054"
                                      expression (src/grammarFunctor.ml[1186,32329+25]..src/grammarFunctor.ml[1186,32329+29])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1188,32406+6]..src/grammarFunctor.ml[1188,32406+28])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1188,32406+10]..src/grammarFunctor.ml[1188,32406+18])
                                  Tpat_var "terminal/3055"
                                expression (src/grammarFunctor.ml[1188,32406+19]..src/grammarFunctor.ml[1188,32406+28]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1188,32406+19]..src/grammarFunctor.ml[1188,32406+20])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1188,32406+23]..src/grammarFunctor.ml[1188,32406+28])
                                        Texp_construct "false"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1190,32510+6]..src/grammarFunctor.ml[1190,32510+36])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1190,32510+10]..src/grammarFunctor.ml[1190,32510+21])
                                  Tpat_var "disjunction/3058"
                                expression (src/grammarFunctor.ml[1190,32510+22]..src/grammarFunctor.ml[1190,32510+36]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1190,32510+22]..src/grammarFunctor.ml[1190,32510+23])
                                        Tpat_var "p/3060"
                                      expression (src/grammarFunctor.ml[1190,32510+24]..src/grammarFunctor.ml[1190,32510+36]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1190,32510+24]..src/grammarFunctor.ml[1190,32510+25])
                                              Tpat_var "q/3061"
                                            expression (src/grammarFunctor.ml[1190,32510+28]..src/grammarFunctor.ml[1190,32510+36])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1190,32510+30]..src/grammarFunctor.ml[1190,32510+32])
                                                Texp_ident "Stdlib!.||"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1190,32510+28]..src/grammarFunctor.ml[1190,32510+29])
                                                    Texp_ident "p/3060"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1190,32510+33]..src/grammarFunctor.ml[1190,32510+36])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1190,32510+33]..src/grammarFunctor.ml[1190,32510+34])
                                                      Texp_ident "q/3061"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1190,32510+34]..src/grammarFunctor.ml[1190,32510+36])
                                                          Texp_construct "()"
                                                          []
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1192,32612+6]..src/grammarFunctor.ml[1192,32612+38])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1192,32612+10]..src/grammarFunctor.ml[1192,32612+21])
                                  Tpat_var "conjunction/3062"
                                expression (src/grammarFunctor.ml[1192,32612+22]..src/grammarFunctor.ml[1192,32612+38]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1192,32612+22]..src/grammarFunctor.ml[1192,32612+23])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1192,32612+24]..src/grammarFunctor.ml[1192,32612+38]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1192,32612+24]..src/grammarFunctor.ml[1192,32612+25])
                                              Tpat_var "p/3064"
                                            expression (src/grammarFunctor.ml[1192,32612+26]..src/grammarFunctor.ml[1192,32612+38]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1192,32612+26]..src/grammarFunctor.ml[1192,32612+27])
                                                    Tpat_var "q/3065"
                                                  expression (src/grammarFunctor.ml[1192,32612+30]..src/grammarFunctor.ml[1192,32612+38])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1192,32612+32]..src/grammarFunctor.ml[1192,32612+34])
                                                      Texp_ident "Stdlib!.&&"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1192,32612+30]..src/grammarFunctor.ml[1192,32612+31])
                                                          Texp_ident "p/3064"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1192,32612+35]..src/grammarFunctor.ml[1192,32612+38])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1192,32612+35]..src/grammarFunctor.ml[1192,32612+36])
                                                            Texp_ident "q/3065"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1192,32612+36]..src/grammarFunctor.ml[1192,32612+38])
                                                                Texp_construct "()"
                                                                []
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1194,32697+6]..src/grammarFunctor.ml[1194,32697+24])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1194,32697+10]..src/grammarFunctor.ml[1194,32697+17])
                                  Tpat_var "epsilon/3067"
                                expression (src/grammarFunctor.ml[1194,32697+20]..src/grammarFunctor.ml[1194,32697+24])
                                  Texp_construct "true"
                                  []
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1200,32839+0]..src/grammarFunctor.ml[1219,33580+9])
                  Tstr_module
                  FIRST/3107
                    module_expr (src/grammarFunctor.ml[1201,32854+2]..src/grammarFunctor.ml[1219,33580+9])
                      Tmod_apply
                      module_expr (src/grammarFunctor.ml[1201,32854+2]..src/grammarFunctor.ml[1202,32872+17])
                        Tmod_apply
                        module_expr (src/grammarFunctor.ml[1201,32854+2]..src/grammarFunctor.ml[1201,32854+17])
                          Tmod_ident "GenericAnalysis/3012"
                        module_expr (src/grammarFunctor.ml[1202,32872+5]..src/grammarFunctor.ml[1202,32872+16])
                          Tmod_ident "TerminalSet/1666"
                      module_expr (src/grammarFunctor.ml[1203,32890+5]..src/grammarFunctor.ml[1219,33580+8])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1204,32902+6]..src/grammarFunctor.ml[1204,32902+29])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1204,32902+10]..src/grammarFunctor.ml[1204,32902+18])
                                  Tpat_var "shortcut/3081"
                                expression (src/grammarFunctor.ml[1204,32902+19]..src/grammarFunctor.ml[1204,32902+29]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1204,32902+19]..src/grammarFunctor.ml[1204,32902+22])
                                        Tpat_var "_nt/3083"
                                      expression (src/grammarFunctor.ml[1204,32902+25]..src/grammarFunctor.ml[1204,32902+29])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1206,32989+6]..src/grammarFunctor.ml[1206,32989+42])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1206,32989+10]..src/grammarFunctor.ml[1206,32989+18])
                                  Tpat_var "terminal/3084"
                                expression (src/grammarFunctor.ml[1206,32989+21]..src/grammarFunctor.ml[1206,32989+42])
                                  Texp_ident "TerminalSet/1666.singleton"
                            ]
                          structure_item (src/grammarFunctor.ml[1208,33108+6]..src/grammarFunctor.ml[1208,33108+53])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1208,33108+10]..src/grammarFunctor.ml[1208,33108+21])
                                  Tpat_var "disjunction/3085"
                                expression (src/grammarFunctor.ml[1208,33108+22]..src/grammarFunctor.ml[1208,33108+53]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1208,33108+22]..src/grammarFunctor.ml[1208,33108+23])
                                        Tpat_var "p/3087"
                                      expression (src/grammarFunctor.ml[1208,33108+24]..src/grammarFunctor.ml[1208,33108+53]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1208,33108+24]..src/grammarFunctor.ml[1208,33108+25])
                                              Tpat_var "q/3088"
                                            expression (src/grammarFunctor.ml[1208,33108+28]..src/grammarFunctor.ml[1208,33108+53])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1208,33108+28]..src/grammarFunctor.ml[1208,33108+45])
                                                Texp_ident "TerminalSet/1666.union"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1208,33108+46]..src/grammarFunctor.ml[1208,33108+47])
                                                    Texp_ident "p/3087"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1208,33108+48]..src/grammarFunctor.ml[1208,33108+53])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1208,33108+49]..src/grammarFunctor.ml[1208,33108+50])
                                                      Texp_ident "q/3088"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1208,33108+50]..src/grammarFunctor.ml[1208,33108+52])
                                                          Texp_construct "()"
                                                          []
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1212,33349+6]..src/grammarFunctor.ml[1216,33472+11])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1212,33349+10]..src/grammarFunctor.ml[1212,33349+21])
                                  Tpat_var "conjunction/3089"
                                expression (src/grammarFunctor.ml[1212,33349+22]..src/grammarFunctor.ml[1216,33472+11]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1212,33349+22]..src/grammarFunctor.ml[1212,33349+28])
                                        Tpat_var "symbol/3091"
                                      expression (src/grammarFunctor.ml[1212,33349+29]..src/grammarFunctor.ml[1216,33472+11]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1212,33349+29]..src/grammarFunctor.ml[1212,33349+30])
                                              Tpat_var "p/3092"
                                            expression (src/grammarFunctor.ml[1212,33349+31]..src/grammarFunctor.ml[1216,33472+11]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1212,33349+31]..src/grammarFunctor.ml[1212,33349+32])
                                                    Tpat_var "q/3093"
                                                  expression (src/grammarFunctor.ml[1213,33384+8]..src/grammarFunctor.ml[1216,33472+11])
                                                    Texp_ifthenelse
                                                    expression (src/grammarFunctor.ml[1213,33384+11]..src/grammarFunctor.ml[1213,33384+33])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1213,33384+11]..src/grammarFunctor.ml[1213,33384+26])
                                                        Texp_ident "NULLABLE/3080.symbol"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1213,33384+27]..src/grammarFunctor.ml[1213,33384+33])
                                                            Texp_ident "symbol/3091"
                                                      ]
                                                    expression (src/grammarFunctor.ml[1214,33423+10]..src/grammarFunctor.ml[1214,33423+35])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1214,33423+10]..src/grammarFunctor.ml[1214,33423+27])
                                                        Texp_ident "TerminalSet/1666.union"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1214,33423+28]..src/grammarFunctor.ml[1214,33423+29])
                                                            Texp_ident "p/3092"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1214,33423+30]..src/grammarFunctor.ml[1214,33423+35])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[1214,33423+31]..src/grammarFunctor.ml[1214,33423+32])
                                                              Texp_ident "q/3093"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1214,33423+32]..src/grammarFunctor.ml[1214,33423+34])
                                                                  Texp_construct "()"
                                                                  []
                                                            ]
                                                      ]
                                                    Some
                                                      expression (src/grammarFunctor.ml[1216,33472+10]..src/grammarFunctor.ml[1216,33472+11])
                                                        Texp_ident "p/3092"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1218,33542+6]..src/grammarFunctor.ml[1218,33542+37])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1218,33542+10]..src/grammarFunctor.ml[1218,33542+17])
                                  Tpat_var "epsilon/3094"
                                expression (src/grammarFunctor.ml[1218,33542+20]..src/grammarFunctor.ml[1218,33542+37])
                                  Texp_ident "TerminalSet/1666.empty"
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1232,34202+0]..src/grammarFunctor.ml[1249,34776+9])
                  Tstr_module
                  MINIMAL/3174
                    module_expr (src/grammarFunctor.ml[1233,34219+2]..src/grammarFunctor.ml[1249,34776+9])
                      Tmod_apply
                      module_expr (src/grammarFunctor.ml[1233,34219+2]..src/grammarFunctor.ml[1237,34318+9])
                        Tmod_apply
                        module_expr (src/grammarFunctor.ml[1233,34219+2]..src/grammarFunctor.ml[1233,34219+17])
                          Tmod_ident "GenericAnalysis/3012"
                        module_expr (src/grammarFunctor.ml[1234,34237+5]..src/grammarFunctor.ml[1237,34318+8])
                          Tmod_structure
                          [
                            structure_item (src/grammarFunctor.ml[1235,34249+6]..src/grammarFunctor.ml[1235,34249+33])
                              Tstr_include                              module_expr (src/grammarFunctor.ml[1235,34249+14]..src/grammarFunctor.ml[1235,34249+33])
                                module_expr (src/grammarFunctor.ml[1235,34249+14]..src/grammarFunctor.ml[1235,34249+33])
                                  Tmod_ident "Dune__exe!.CompletedNatWitness"
                            structure_item (src/grammarFunctor.ml[1236,34283+6]..src/grammarFunctor.ml[1236,34283+34])
                              Tstr_type Rec
                              [
                                type_declaration property/3143 (src/grammarFunctor.ml[1236,34283+6]..src/grammarFunctor.ml[1236,34283+34])
                                  ptype_params =
                                    []
                                  ptype_cstrs =
                                    []
                                  ptype_kind =
                                    Ttype_abstract
                                  ptype_private = Public
                                  ptype_manifest =
                                    Some
                                      core_type (src/grammarFunctor.ml[1236,34283+22]..src/grammarFunctor.ml[1236,34283+34])
                                        Ttyp_constr "t/3130"
                                        [
                                          core_type (src/grammarFunctor.ml[1236,34283+22]..src/grammarFunctor.ml[1236,34283+32])
                                            Ttyp_constr "Terminal/1588.t"
                                            []
                                        ]
                              ]
                          ]
                      module_expr (src/grammarFunctor.ml[1238,34328+5]..src/grammarFunctor.ml[1249,34776+8])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1239,34340+6]..src/grammarFunctor.ml[1239,34340+29])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1239,34340+10]..src/grammarFunctor.ml[1239,34340+18])
                                  Tpat_var "shortcut/3108"
                                expression (src/grammarFunctor.ml[1239,34340+19]..src/grammarFunctor.ml[1239,34340+29]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1239,34340+19]..src/grammarFunctor.ml[1239,34340+22])
                                        Tpat_var "_nt/3110"
                                      expression (src/grammarFunctor.ml[1239,34340+25]..src/grammarFunctor.ml[1239,34340+29])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1240,34370+6]..src/grammarFunctor.ml[1240,34370+30])
                            Tstr_open Fresh
                            module_expr (src/grammarFunctor.ml[1240,34370+11]..src/grammarFunctor.ml[1240,34370+30])
                              Tmod_ident "Dune__exe!.CompletedNatWitness"
                          structure_item (src/grammarFunctor.ml[1242,34445+6]..src/grammarFunctor.ml[1242,34445+30])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1242,34445+10]..src/grammarFunctor.ml[1242,34445+18])
                                  Tpat_var "terminal/3124"
                                expression (src/grammarFunctor.ml[1242,34445+21]..src/grammarFunctor.ml[1242,34445+30])
                                  Texp_ident "Dune__exe!.CompletedNatWitness.singleton"
                            ]
                          structure_item (src/grammarFunctor.ml[1244,34554+6]..src/grammarFunctor.ml[1244,34554+32])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1244,34554+10]..src/grammarFunctor.ml[1244,34554+21])
                                  Tpat_var "disjunction/3125"
                                expression (src/grammarFunctor.ml[1244,34554+24]..src/grammarFunctor.ml[1244,34554+32])
                                  Texp_ident "Dune__exe!.CompletedNatWitness.min_lazy"
                            ]
                          structure_item (src/grammarFunctor.ml[1246,34666+6]..src/grammarFunctor.ml[1246,34666+34])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1246,34666+10]..src/grammarFunctor.ml[1246,34666+21])
                                  Tpat_var "conjunction/3126"
                                expression (src/grammarFunctor.ml[1246,34666+22]..src/grammarFunctor.ml[1246,34666+34]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1246,34666+22]..src/grammarFunctor.ml[1246,34666+23])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1246,34666+26]..src/grammarFunctor.ml[1246,34666+34])
                                        Texp_ident "Dune__exe!.CompletedNatWitness.add_lazy"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1248,34748+6]..src/grammarFunctor.ml[1248,34748+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1248,34748+10]..src/grammarFunctor.ml[1248,34748+17])
                                  Tpat_var "epsilon/3129"
                                expression (src/grammarFunctor.ml[1248,34748+20]..src/grammarFunctor.ml[1248,34748+27])
                                  Texp_ident "Dune__exe!.CompletedNatWitness.epsilon"
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1267,35633+0]..src/grammarFunctor.ml[1268,35677+50])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1267,35633+4]..src/grammarFunctor.ml[1267,35633+27])
                        Tpat_var "generates_nonempty_word/3175"
                      expression (src/grammarFunctor.ml[1267,35633+28]..src/grammarFunctor.ml[1268,35677+50]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1267,35633+28]..src/grammarFunctor.ml[1267,35633+34])
                              Tpat_var "symbol/3177"
                            expression (src/grammarFunctor.ml[1268,35677+2]..src/grammarFunctor.ml[1268,35677+50])
                              extra
                                Texp_constraint
                                core_type (src/grammarFunctor.ml[1267,35633+37]..src/grammarFunctor.ml[1267,35633+41])
                                  Ttyp_constr "bool/5!"
                                  []
                              Texp_apply
                              expression (src/grammarFunctor.ml[1268,35677+2]..src/grammarFunctor.ml[1268,35677+5])
                                Texp_ident "Stdlib!.not"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1268,35677+6]..src/grammarFunctor.ml[1268,35677+50])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1268,35677+7]..src/grammarFunctor.ml[1268,35677+27])
                                      Texp_ident "TerminalSet/1666.is_empty"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1268,35677+28]..src/grammarFunctor.ml[1268,35677+49])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1268,35677+29]..src/grammarFunctor.ml[1268,35677+41])
                                            Texp_ident "FIRST/3107.symbol"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1268,35677+42]..src/grammarFunctor.ml[1268,35677+48])
                                                Texp_ident "symbol/3177"
                                          ]
                                    ]
                              ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1276,36059+0]..src/grammarFunctor.ml[1301,36911+3])
                  Tstr_module
                  G/3201
                    module_expr (src/grammarFunctor.ml[1276,36059+11]..src/grammarFunctor.ml[1301,36911+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1277,36077+2]..src/grammarFunctor.ml[1277,36077+27])
                          Tstr_type Rec
                          [
                            type_declaration node/3178 (src/grammarFunctor.ml[1277,36077+2]..src/grammarFunctor.ml[1277,36077+27])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_abstract
                              ptype_private = Public
                              ptype_manifest =
                                Some
                                  core_type (src/grammarFunctor.ml[1277,36077+14]..src/grammarFunctor.ml[1277,36077+27])
                                    Ttyp_constr "Nonterminal/1110.t"
                                    []
                          ]
                        structure_item (src/grammarFunctor.ml[1278,36105+2]..src/grammarFunctor.ml[1278,36105+23])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1278,36105+6]..src/grammarFunctor.ml[1278,36105+7])
                                Tpat_var "n/3179"
                              expression (src/grammarFunctor.ml[1278,36105+10]..src/grammarFunctor.ml[1278,36105+23])
                                Texp_ident "Nonterminal/1110.n"
                          ]
                        structure_item (src/grammarFunctor.ml[1279,36129+2]..src/grammarFunctor.ml[1279,36129+19])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1279,36129+6]..src/grammarFunctor.ml[1279,36129+11])
                                Tpat_var "index/3180"
                              expression (src/grammarFunctor.ml[1279,36129+12]..src/grammarFunctor.ml[1279,36129+19]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1279,36129+12]..src/grammarFunctor.ml[1279,36129+14])
                                      Tpat_var "nt/3181"
                                    expression (src/grammarFunctor.ml[1279,36129+17]..src/grammarFunctor.ml[1279,36129+19])
                                      Texp_ident "nt/3181"
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1280,36149+2]..src/grammarFunctor.ml[1280,36149+29])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1280,36149+6]..src/grammarFunctor.ml[1280,36149+10])
                                Tpat_var "iter/3182"
                              expression (src/grammarFunctor.ml[1280,36149+13]..src/grammarFunctor.ml[1280,36149+29])
                                Texp_ident "Nonterminal/1110.iter"
                          ]
                        structure_item (src/grammarFunctor.ml[1281,36179+2]..src/grammarFunctor.ml[1298,36823+5])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1281,36179+6]..src/grammarFunctor.ml[1281,36179+24])
                                Tpat_var "labeled_successors/3183"
                              expression (src/grammarFunctor.ml[1281,36179+25]..src/grammarFunctor.ml[1298,36823+5]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1281,36179+25]..src/grammarFunctor.ml[1281,36179+30])
                                      Tpat_var "yield/3185"
                                    expression (src/grammarFunctor.ml[1281,36179+31]..src/grammarFunctor.ml[1298,36823+5]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1281,36179+31]..src/grammarFunctor.ml[1281,36179+33])
                                            Tpat_var "nt/3186"
                                          expression (src/grammarFunctor.ml[1282,36215+4]..src/grammarFunctor.ml[1298,36823+5])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1282,36215+4]..src/grammarFunctor.ml[1282,36215+21])
                                              Texp_ident "Production/2648.iternt"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1282,36215+22]..src/grammarFunctor.ml[1282,36215+24])
                                                  Texp_ident "nt/3186"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1282,36215+25]..src/grammarFunctor.ml[1298,36823+5])
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1282,36215+30]..src/grammarFunctor.ml[1282,36215+34])
                                                        Tpat_var "prod/3187"
                                                      expression (src/grammarFunctor.ml[1283,36253+6]..src/grammarFunctor.ml[1297,36815+7])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/grammarFunctor.ml[1283,36253+10]..src/grammarFunctor.ml[1283,36253+13])
                                                              Tpat_var "rhs/3188"
                                                            expression (src/grammarFunctor.ml[1283,36253+16]..src/grammarFunctor.ml[1283,36253+35])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1283,36253+16]..src/grammarFunctor.ml[1283,36253+30])
                                                                Texp_ident "Production/2648.rhs"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1283,36253+31]..src/grammarFunctor.ml[1283,36253+35])
                                                                    Texp_ident "prod/3187"
                                                              ]
                                                        ]
                                                        expression (src/grammarFunctor.ml[1284,36292+6]..src/grammarFunctor.ml[1297,36815+7])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1284,36292+13]..src/grammarFunctor.ml[1297,36815+7])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[1284,36292+13]..src/grammarFunctor.ml[1284,36292+24])
                                                              Texp_ident "Stdlib!.Array.iteri"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1284,36292+25]..src/grammarFunctor.ml[1297,36815+7])
                                                                  Texp_function
                                                                  Nolabel
                                                                  [
                                                                    <case>
                                                                      pattern (src/grammarFunctor.ml[1284,36292+30]..src/grammarFunctor.ml[1284,36292+31])
                                                                        Tpat_var "i/3189"
                                                                      expression (src/grammarFunctor.ml[1284,36292+32]..src/grammarFunctor.ml[1296,36789+25]) ghost
                                                                        Texp_function
                                                                        Nolabel
                                                                        [
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[1284,36292+32]..src/grammarFunctor.ml[1284,36292+38])
                                                                              Tpat_var "symbol/3190"
                                                                            expression (src/grammarFunctor.ml[1285,36334+8]..src/grammarFunctor.ml[1296,36789+25])
                                                                              Texp_match
                                                                              expression (src/grammarFunctor.ml[1285,36334+14]..src/grammarFunctor.ml[1285,36334+20])
                                                                                Texp_ident "symbol/3190"
                                                                              [
                                                                                <case>
                                                                                  pattern (src/grammarFunctor.ml[1286,36360+10]..src/grammarFunctor.ml[1286,36360+20])
                                                                                    Tpat_value
                                                                                    pattern (src/grammarFunctor.ml[1286,36360+10]..src/grammarFunctor.ml[1286,36360+20])
                                                                                      Tpat_construct "Symbol.T"
                                                                                      [
                                                                                        pattern (src/grammarFunctor.ml[1286,36360+19]..src/grammarFunctor.ml[1286,36360+20])
                                                                                          Tpat_any
                                                                                      ]
                                                                                      None
                                                                                  expression (src/grammarFunctor.ml[1286,36360+26]..src/grammarFunctor.ml[1286,36360+28])
                                                                                    Texp_construct "()"
                                                                                    []
                                                                                <case>
                                                                                  pattern (src/grammarFunctor.ml[1287,36389+10]..src/grammarFunctor.ml[1287,36389+22])
                                                                                    Tpat_value
                                                                                    pattern (src/grammarFunctor.ml[1287,36389+10]..src/grammarFunctor.ml[1287,36389+22])
                                                                                      Tpat_construct "Symbol.N"
                                                                                      [
                                                                                        pattern (src/grammarFunctor.ml[1287,36389+19]..src/grammarFunctor.ml[1287,36389+22])
                                                                                          Tpat_var "nt'/3191"
                                                                                      ]
                                                                                      None
                                                                                  expression (src/grammarFunctor.ml[1291,36629+12]..src/grammarFunctor.ml[1296,36789+25])
                                                                                    Texp_let Nonrec
                                                                                    [
                                                                                      <def>
                                                                                        pattern (src/grammarFunctor.ml[1291,36629+16]..src/grammarFunctor.ml[1291,36629+19])
                                                                                          Tpat_var "gnw/3192"
                                                                                        expression (src/grammarFunctor.ml[1292,36651+14]..src/grammarFunctor.ml[1294,36754+19])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[1292,36651+14]..src/grammarFunctor.ml[1292,36651+28])
                                                                                            Texp_ident "Dune__exe!.MArray.existsi"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1292,36651+29]..src/grammarFunctor.ml[1294,36754+15])
                                                                                                Texp_function
                                                                                                Nolabel
                                                                                                [
                                                                                                  <case>
                                                                                                    pattern (src/grammarFunctor.ml[1292,36651+34]..src/grammarFunctor.ml[1292,36651+35])
                                                                                                      Tpat_var "j/3193"
                                                                                                    expression (src/grammarFunctor.ml[1292,36651+36]..src/grammarFunctor.ml[1293,36697+56]) ghost
                                                                                                      Texp_function
                                                                                                      Nolabel
                                                                                                      [
                                                                                                        <case>
                                                                                                          pattern (src/grammarFunctor.ml[1292,36651+36]..src/grammarFunctor.ml[1292,36651+42])
                                                                                                            Tpat_var "symbol/3194"
                                                                                                          expression (src/grammarFunctor.ml[1293,36697+16]..src/grammarFunctor.ml[1293,36697+56])
                                                                                                            Texp_apply
                                                                                                            expression (src/grammarFunctor.ml[1293,36697+23]..src/grammarFunctor.ml[1293,36697+25])
                                                                                                              Texp_ident "Stdlib!.&&"
                                                                                                            [
                                                                                                              <arg>
                                                                                                                Nolabel
                                                                                                                expression (src/grammarFunctor.ml[1293,36697+16]..src/grammarFunctor.ml[1293,36697+22])
                                                                                                                  Texp_apply
                                                                                                                  expression (src/grammarFunctor.ml[1293,36697+18]..src/grammarFunctor.ml[1293,36697+20])
                                                                                                                    Texp_ident "Stdlib!.<>"
                                                                                                                  [
                                                                                                                    <arg>
                                                                                                                      Nolabel
                                                                                                                      expression (src/grammarFunctor.ml[1293,36697+16]..src/grammarFunctor.ml[1293,36697+17])
                                                                                                                        Texp_ident "i/3189"
                                                                                                                    <arg>
                                                                                                                      Nolabel
                                                                                                                      expression (src/grammarFunctor.ml[1293,36697+21]..src/grammarFunctor.ml[1293,36697+22])
                                                                                                                        Texp_ident "j/3193"
                                                                                                                  ]
                                                                                                              <arg>
                                                                                                                Nolabel
                                                                                                                expression (src/grammarFunctor.ml[1293,36697+26]..src/grammarFunctor.ml[1293,36697+56])
                                                                                                                  Texp_apply
                                                                                                                  expression (src/grammarFunctor.ml[1293,36697+26]..src/grammarFunctor.ml[1293,36697+49])
                                                                                                                    Texp_ident "generates_nonempty_word/3175"
                                                                                                                  [
                                                                                                                    <arg>
                                                                                                                      Nolabel
                                                                                                                      expression (src/grammarFunctor.ml[1293,36697+50]..src/grammarFunctor.ml[1293,36697+56])
                                                                                                                        Texp_ident "symbol/3194"
                                                                                                                  ]
                                                                                                            ]
                                                                                                      ]
                                                                                                ]
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1294,36754+16]..src/grammarFunctor.ml[1294,36754+19])
                                                                                                Texp_ident "rhs/3188"
                                                                                          ]
                                                                                    ]
                                                                                    expression (src/grammarFunctor.ml[1296,36789+12]..src/grammarFunctor.ml[1296,36789+25])
                                                                                      Texp_apply
                                                                                      expression (src/grammarFunctor.ml[1296,36789+12]..src/grammarFunctor.ml[1296,36789+17])
                                                                                        Texp_ident "yield/3185"
                                                                                      [
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/grammarFunctor.ml[1296,36789+18]..src/grammarFunctor.ml[1296,36789+21])
                                                                                            Texp_ident "gnw/3192"
                                                                                        <arg>
                                                                                          Nolabel
                                                                                          expression (src/grammarFunctor.ml[1296,36789+22]..src/grammarFunctor.ml[1296,36789+25])
                                                                                            Texp_ident "nt'/3191"
                                                                                      ]
                                                                              ]
                                                                        ]
                                                                  ]
                                                            ]
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1284,36292+6]..src/grammarFunctor.ml[1284,36292+9])
                                                                Texp_ident "rhs/3188"
                                                          ]
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1299,36829+2]..src/grammarFunctor.ml[1300,36857+53])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1299,36829+6]..src/grammarFunctor.ml[1299,36829+16])
                                Tpat_var "successors/3195"
                              expression (src/grammarFunctor.ml[1299,36829+17]..src/grammarFunctor.ml[1300,36857+53]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1299,36829+17]..src/grammarFunctor.ml[1299,36829+22])
                                      Tpat_var "yield/3197"
                                    expression (src/grammarFunctor.ml[1299,36829+23]..src/grammarFunctor.ml[1300,36857+53]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1299,36829+23]..src/grammarFunctor.ml[1299,36829+25])
                                            Tpat_var "nt/3198"
                                          expression (src/grammarFunctor.ml[1300,36857+4]..src/grammarFunctor.ml[1300,36857+53])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1300,36857+4]..src/grammarFunctor.ml[1300,36857+22])
                                              Texp_ident "labeled_successors/3183"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1300,36857+23]..src/grammarFunctor.ml[1300,36857+50])
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1300,36857+28]..src/grammarFunctor.ml[1300,36857+32])
                                                        Tpat_var "_gnw/3199"
                                                      expression (src/grammarFunctor.ml[1300,36857+33]..src/grammarFunctor.ml[1300,36857+49]) ghost
                                                        Texp_function
                                                        Nolabel
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1300,36857+33]..src/grammarFunctor.ml[1300,36857+36])
                                                              Tpat_var "nt'/3200"
                                                            expression (src/grammarFunctor.ml[1300,36857+40]..src/grammarFunctor.ml[1300,36857+49])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1300,36857+40]..src/grammarFunctor.ml[1300,36857+45])
                                                                Texp_ident "yield/3197"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1300,36857+46]..src/grammarFunctor.ml[1300,36857+49])
                                                                    Texp_ident "nt'/3200"
                                                              ]
                                                        ]
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1300,36857+51]..src/grammarFunctor.ml[1300,36857+53])
                                                  Texp_ident "nt/3198"
                                            ]
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[1309,37254+0]..src/grammarFunctor.ml[1326,37913+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1309,37254+4]..src/grammarFunctor.ml[1309,37254+13])
                        extra
                          Tpat_extra_constraint
                          core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+33])
                            Ttyp_constr "Stdlib!.Lazy.t"
                            [
                              core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+26])
                                Ttyp_constr "array/8!"
                                [
                                  core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+20])
                                    Ttyp_constr "bool/5!"
                                    []
                                ]
                            ]
                        Tpat_alias "unbounded/3202"
                        pattern (src/grammarFunctor.ml[1309,37254+4]..src/grammarFunctor.ml[1309,37254+13])
                          Tpat_any
                      expression (src/grammarFunctor.ml[1310,37290+2]..src/grammarFunctor.ml[1326,37913+5])
                        extra
                          Texp_constraint
                          core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+33])
                            Ttyp_constr "Stdlib!.Lazy.t"
                            [
                              core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+26])
                                Ttyp_constr "array/8!"
                                [
                                  core_type (src/grammarFunctor.ml[1309,37254+16]..src/grammarFunctor.ml[1309,37254+20])
                                    Ttyp_constr "bool/5!"
                                    []
                                ]
                            ]
                        Texp_lazy                        expression (src/grammarFunctor.ml[1310,37290+7]..src/grammarFunctor.ml[1326,37913+5])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1311,37303+8]..src/grammarFunctor.ml[1311,37303+17])
                                Tpat_var "unbounded/3203"
                              expression (src/grammarFunctor.ml[1311,37303+20]..src/grammarFunctor.ml[1311,37303+50])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1311,37303+20]..src/grammarFunctor.ml[1311,37303+30])
                                  Texp_ident "Stdlib!.Array.make"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1311,37303+31]..src/grammarFunctor.ml[1311,37303+44])
                                      Texp_ident "Nonterminal/1110.n"
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1311,37303+45]..src/grammarFunctor.ml[1311,37303+50])
                                      Texp_construct "false"
                                      []
                                ]
                          ]
                          expression (src/grammarFunctor.ml[1312,37357+4]..src/grammarFunctor.ml[1325,37899+13])
                            Texp_letmodule "T/3222"
                            module_expr (src/grammarFunctor.ml[1312,37357+19]..src/grammarFunctor.ml[1312,37357+32])
                              Tmod_apply
                              module_expr (src/grammarFunctor.ml[1312,37357+19]..src/grammarFunctor.ml[1312,37357+29])
                                module_expr (src/grammarFunctor.ml[1312,37357+19]..src/grammarFunctor.ml[1312,37357+29])
                                  Tmod_ident "Dune__exe!.Tarjan.Run"
                              module_expr (src/grammarFunctor.ml[1312,37357+30]..src/grammarFunctor.ml[1312,37357+31])
                                Tmod_ident "G/3201"
                            expression (src/grammarFunctor.ml[1314,37449+4]..src/grammarFunctor.ml[1325,37899+13])
                              Texp_sequence
                              expression (src/grammarFunctor.ml[1314,37449+4]..src/grammarFunctor.ml[1324,37890+7])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1314,37449+4]..src/grammarFunctor.ml[1314,37449+10])
                                  Texp_ident "G/3201.iter"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1314,37449+11]..src/grammarFunctor.ml[1324,37890+7])
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1314,37449+21]..src/grammarFunctor.ml[1314,37449+23])
                                            Tpat_var "nt/3223"
                                          expression (src/grammarFunctor.ml[1315,37476+6]..src/grammarFunctor.ml[1323,37880+9])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1315,37476+12]..src/grammarFunctor.ml[1323,37880+9])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1315,37476+12]..src/grammarFunctor.ml[1315,37476+32])
                                                Texp_ident "G/3201.labeled_successors"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1315,37476+33]..src/grammarFunctor.ml[1323,37880+9])
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1315,37476+43]..src/grammarFunctor.ml[1315,37476+46])
                                                          Tpat_var "gnw/3224"
                                                        expression (src/grammarFunctor.ml[1315,37476+47]..src/grammarFunctor.ml[1322,37868+11]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[1315,37476+47]..src/grammarFunctor.ml[1315,37476+50])
                                                                Tpat_var "nt'/3225"
                                                              expression (src/grammarFunctor.ml[1317,37609+8]..src/grammarFunctor.ml[1322,37868+11])
                                                                Texp_ifthenelse
                                                                expression (src/grammarFunctor.ml[1317,37609+11]..src/grammarFunctor.ml[1317,37609+60])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1317,37609+15]..src/grammarFunctor.ml[1317,37609+17])
                                                                    Texp_ident "Stdlib!.&&"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1317,37609+11]..src/grammarFunctor.ml[1317,37609+14])
                                                                        Texp_ident "gnw/3224"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1317,37609+18]..src/grammarFunctor.ml[1317,37609+60])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[1317,37609+38]..src/grammarFunctor.ml[1317,37609+39])
                                                                          Texp_ident "Stdlib!.="
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1317,37609+18]..src/grammarFunctor.ml[1317,37609+37])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1317,37609+18]..src/grammarFunctor.ml[1317,37609+34])
                                                                                Texp_ident "T/3222.representative"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1317,37609+35]..src/grammarFunctor.ml[1317,37609+37])
                                                                                    Texp_ident "nt/3223"
                                                                              ]
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1317,37609+40]..src/grammarFunctor.ml[1317,37609+60])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1317,37609+40]..src/grammarFunctor.ml[1317,37609+56])
                                                                                Texp_ident "T/3222.representative"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1317,37609+57]..src/grammarFunctor.ml[1317,37609+60])
                                                                                    Texp_ident "nt'/3225"
                                                                              ]
                                                                        ]
                                                                  ]
                                                                expression (src/grammarFunctor.ml[1317,37609+66]..src/grammarFunctor.ml[1322,37868+11])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1319,37752+41]..src/grammarFunctor.ml[1321,37854+13])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[1319,37752+41]..src/grammarFunctor.ml[1319,37752+50])
                                                                      Texp_ident "Stdlib!.List.iter"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1319,37752+51]..src/grammarFunctor.ml[1321,37854+13])
                                                                          Texp_function
                                                                          Nolabel
                                                                          [
                                                                            <case>
                                                                              pattern (src/grammarFunctor.ml[1319,37752+61]..src/grammarFunctor.ml[1319,37752+63])
                                                                                Tpat_var "nt/3226"
                                                                              expression (src/grammarFunctor.ml[1320,37819+12]..src/grammarFunctor.ml[1320,37819+34])
                                                                                Texp_apply
                                                                                expression (src/grammarFunctor.ml[1320,37819+12]..src/grammarFunctor.ml[1320,37819+34]) ghost
                                                                                  Texp_ident "Stdlib!.Array.set"
                                                                                [
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1320,37819+12]..src/grammarFunctor.ml[1320,37819+21])
                                                                                      Texp_ident "unbounded/3203"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1320,37819+23]..src/grammarFunctor.ml[1320,37819+25])
                                                                                      Texp_ident "nt/3226"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1320,37819+30]..src/grammarFunctor.ml[1320,37819+34])
                                                                                      Texp_construct "true"
                                                                                      []
                                                                                ]
                                                                          ]
                                                                    ]
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1319,37752+10]..src/grammarFunctor.ml[1319,37752+37])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[1319,37752+10]..src/grammarFunctor.ml[1319,37752+15])
                                                                          Texp_ident "T/3222.scc"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1319,37752+16]..src/grammarFunctor.ml[1319,37752+37])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1319,37752+17]..src/grammarFunctor.ml[1319,37752+33])
                                                                                Texp_ident "T/3222.representative"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1319,37752+34]..src/grammarFunctor.ml[1319,37752+36])
                                                                                    Texp_ident "nt/3223"
                                                                              ]
                                                                        ]
                                                                  ]
                                                                None
                                                          ]
                                                    ]
                                              ]
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1315,37476+6]..src/grammarFunctor.ml[1315,37476+8])
                                                  Texp_ident "nt/3223"
                                            ]
                                      ]
                                ]
                              expression (src/grammarFunctor.ml[1325,37899+4]..src/grammarFunctor.ml[1325,37899+13])
                                Texp_ident "unbounded/3203"
                  ]
                structure_item (src/grammarFunctor.ml[1328,37920+0]..src/grammarFunctor.ml[1329,37946+29])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1328,37920+4]..src/grammarFunctor.ml[1328,37920+13])
                        Tpat_var "unbounded/3227"
                      expression (src/grammarFunctor.ml[1328,37920+14]..src/grammarFunctor.ml[1329,37946+29]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1328,37920+14]..src/grammarFunctor.ml[1328,37920+16])
                              Tpat_var "nt/3228"
                            expression (src/grammarFunctor.ml[1329,37946+2]..src/grammarFunctor.ml[1329,37946+29])
                              extra
                                Texp_constraint
                                core_type (src/grammarFunctor.ml[1328,37920+19]..src/grammarFunctor.ml[1328,37920+23])
                                  Ttyp_constr "bool/5!"
                                  []
                              Texp_apply
                              expression (src/grammarFunctor.ml[1329,37946+2]..src/grammarFunctor.ml[1329,37946+29]) ghost
                                Texp_ident "Stdlib!.Array.get"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1329,37946+2]..src/grammarFunctor.ml[1329,37946+24])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1329,37946+3]..src/grammarFunctor.ml[1329,37946+13])
                                      Texp_ident "Stdlib!.Lazy.force"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1329,37946+14]..src/grammarFunctor.ml[1329,37946+23])
                                          Texp_ident "unbounded/3202"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1329,37946+26]..src/grammarFunctor.ml[1329,37946+28])
                                    Texp_ident "nt/3228"
                              ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1343,38754+0]..src/grammarFunctor.ml[1357,39295+9])
                  Tstr_module
                  MAXIMAL/3276
                    module_expr (src/grammarFunctor.ml[1344,38771+2]..src/grammarFunctor.ml[1357,39295+9])
                      Tmod_apply
                      module_expr (src/grammarFunctor.ml[1344,38771+2]..src/grammarFunctor.ml[1345,38789+20])
                        Tmod_apply
                        module_expr (src/grammarFunctor.ml[1344,38771+2]..src/grammarFunctor.ml[1344,38771+17])
                          Tmod_ident "GenericAnalysis/3012"
                        module_expr (src/grammarFunctor.ml[1345,38789+5]..src/grammarFunctor.ml[1345,38789+19])
                          module_expr (src/grammarFunctor.ml[1345,38789+5]..src/grammarFunctor.ml[1345,38789+19])
                            Tmod_ident "Dune__exe!.NatInfinityMax"
                      module_expr (src/grammarFunctor.ml[1346,38810+5]..src/grammarFunctor.ml[1357,39295+8])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1347,38822+6]..src/grammarFunctor.ml[1347,38822+25])
                            Tstr_open Fresh
                            module_expr (src/grammarFunctor.ml[1347,38822+11]..src/grammarFunctor.ml[1347,38822+25])
                              Tmod_ident "Dune__exe!.NatInfinityMax"
                          structure_item (src/grammarFunctor.ml[1348,38848+6]..src/grammarFunctor.ml[1348,38848+68])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1348,38848+10]..src/grammarFunctor.ml[1348,38848+18])
                                  Tpat_var "shortcut/3241"
                                expression (src/grammarFunctor.ml[1348,38848+19]..src/grammarFunctor.ml[1348,38848+68]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1348,38848+19]..src/grammarFunctor.ml[1348,38848+21])
                                        Tpat_var "nt/3243"
                                      expression (src/grammarFunctor.ml[1348,38848+24]..src/grammarFunctor.ml[1348,38848+68])
                                        Texp_ifthenelse
                                        expression (src/grammarFunctor.ml[1348,38848+27]..src/grammarFunctor.ml[1348,38848+39])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1348,38848+27]..src/grammarFunctor.ml[1348,38848+36])
                                            Texp_ident "unbounded/3227"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1348,38848+37]..src/grammarFunctor.ml[1348,38848+39])
                                                Texp_ident "nt/3243"
                                          ]
                                        expression (src/grammarFunctor.ml[1348,38848+45]..src/grammarFunctor.ml[1348,38848+58])
                                          Texp_construct "Some"
                                          [
                                            expression (src/grammarFunctor.ml[1348,38848+50]..src/grammarFunctor.ml[1348,38848+58])
                                              Texp_ident "Dune__exe!.NatInfinityMax.infinity"
                                          ]
                                        Some
                                          expression (src/grammarFunctor.ml[1348,38848+64]..src/grammarFunctor.ml[1348,38848+68])
                                            Texp_construct "None"
                                            []
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1350,38961+6]..src/grammarFunctor.ml[1350,38961+34])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1350,38961+10]..src/grammarFunctor.ml[1350,38961+18])
                                  Tpat_var "terminal/3244"
                                expression (src/grammarFunctor.ml[1350,38961+19]..src/grammarFunctor.ml[1350,38961+34]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1350,38961+19]..src/grammarFunctor.ml[1350,38961+23])
                                        Tpat_var "_tok/3246"
                                      expression (src/grammarFunctor.ml[1350,38961+26]..src/grammarFunctor.ml[1350,38961+34])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1350,38961+26]..src/grammarFunctor.ml[1350,38961+32])
                                          Texp_ident "Dune__exe!.NatInfinityMax.finite"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1350,38961+33]..src/grammarFunctor.ml[1350,38961+34])
                                              Texp_constant Const_int 1
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1352,39074+6]..src/grammarFunctor.ml[1352,39074+32])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1352,39074+10]..src/grammarFunctor.ml[1352,39074+21])
                                  Tpat_var "disjunction/3259"
                                expression (src/grammarFunctor.ml[1352,39074+24]..src/grammarFunctor.ml[1352,39074+32])
                                  Texp_ident "Dune__exe!.NatInfinityMax.max_lazy"
                            ]
                          structure_item (src/grammarFunctor.ml[1354,39186+6]..src/grammarFunctor.ml[1354,39186+34])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1354,39186+10]..src/grammarFunctor.ml[1354,39186+21])
                                  Tpat_var "conjunction/3260"
                                expression (src/grammarFunctor.ml[1354,39186+22]..src/grammarFunctor.ml[1354,39186+34]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1354,39186+22]..src/grammarFunctor.ml[1354,39186+23])
                                        Tpat_any
                                      expression (src/grammarFunctor.ml[1354,39186+26]..src/grammarFunctor.ml[1354,39186+34])
                                        Texp_ident "Dune__exe!.NatInfinityMax.add_lazy"
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1356,39268+6]..src/grammarFunctor.ml[1356,39268+26])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1356,39268+10]..src/grammarFunctor.ml[1356,39268+17])
                                  Tpat_var "epsilon/3263"
                                expression (src/grammarFunctor.ml[1356,39268+20]..src/grammarFunctor.ml[1356,39268+26])
                                  Texp_ident "Dune__exe!.NatInfinityMax.bottom"
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1361,39386+0]..src/grammarFunctor.ml[1387,40583+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1361,39386+4]..src/grammarFunctor.ml[1361,39386+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1362,39395+2]..src/grammarFunctor.ml[1387,40583+5])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1362,39395+5]..src/grammarFunctor.ml[1362,39395+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1362,39395+18]..src/grammarFunctor.ml[1387,40583+5])
                          Texp_sequence
                          expression (src/grammarFunctor.ml[1369,39776+4]..src/grammarFunctor.ml[1379,40223+27])
                            Texp_apply
                            expression (src/grammarFunctor.ml[1369,39776+4]..src/grammarFunctor.ml[1369,39776+18])
                              Texp_ident "Dune__exe!.StringSet.iter"
                            [
                              <arg>
                                Nolabel
                                expression (src/grammarFunctor.ml[1369,39776+19]..src/grammarFunctor.ml[1379,40223+5])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1369,39776+24]..src/grammarFunctor.ml[1369,39776+30])
                                        Tpat_var "symbol/3277"
                                      expression (src/grammarFunctor.ml[1370,39810+6]..src/grammarFunctor.ml[1378,40145+77])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[1370,39810+10]..src/grammarFunctor.ml[1370,39810+12])
                                              Tpat_var "nt/3278"
                                            expression (src/grammarFunctor.ml[1370,39810+15]..src/grammarFunctor.ml[1370,39810+40])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1370,39810+15]..src/grammarFunctor.ml[1370,39810+33])
                                                Texp_ident "Nonterminal/1110.lookup"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1370,39810+34]..src/grammarFunctor.ml[1370,39810+40])
                                                    Texp_ident "symbol/3277"
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[1371,39854+6]..src/grammarFunctor.ml[1378,40145+77])
                                          Texp_sequence
                                          expression (src/grammarFunctor.ml[1371,39854+6]..src/grammarFunctor.ml[1374,39955+73])
                                            Texp_ifthenelse
                                            expression (src/grammarFunctor.ml[1371,39854+9]..src/grammarFunctor.ml[1371,39854+38])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1371,39854+9]..src/grammarFunctor.ml[1371,39854+12])
                                                Texp_ident "Stdlib!.not"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1371,39854+13]..src/grammarFunctor.ml[1371,39854+38])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1371,39854+14]..src/grammarFunctor.ml[1371,39854+34])
                                                      Texp_ident "NONEMPTY/3051.nonterminal"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1371,39854+35]..src/grammarFunctor.ml[1371,39854+37])
                                                          Texp_ident "nt/3278"
                                                    ]
                                              ]
                                            expression (src/grammarFunctor.ml[1372,39898+8]..src/grammarFunctor.ml[1374,39955+73])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1372,39898+8]..src/grammarFunctor.ml[1372,39898+19])
                                                Texp_ident "Dune__exe!.Error.error"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1373,39918+10]..src/grammarFunctor.ml[1373,39918+36])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1373,39918+11]..src/grammarFunctor.ml[1373,39918+32])
                                                      Texp_ident "Nonterminal/1110.positions"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1373,39918+33]..src/grammarFunctor.ml[1373,39918+35])
                                                          Texp_ident "nt/3278"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                                Texp_constant Const_string(" generates the empty language.",(src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost,None)
                                                              expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost
                                                        Texp_constant Const_string("%s generates the empty language.",(src/grammarFunctor.ml[1374,39955+10]..src/grammarFunctor.ml[1374,39955+44]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1374,39955+45]..src/grammarFunctor.ml[1374,39955+73])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1374,39955+46]..src/grammarFunctor.ml[1374,39955+63])
                                                      Texp_ident "Nonterminal/1110.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1374,39955+64]..src/grammarFunctor.ml[1374,39955+69])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1374,39955+70]..src/grammarFunctor.ml[1374,39955+72])
                                                          Texp_ident "nt/3278"
                                                    ]
                                              ]
                                            None
                                          expression (src/grammarFunctor.ml[1375,40030+6]..src/grammarFunctor.ml[1378,40145+77])
                                            Texp_ifthenelse
                                            expression (src/grammarFunctor.ml[1375,40030+9]..src/grammarFunctor.ml[1375,40030+52])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1375,40030+9]..src/grammarFunctor.ml[1375,40030+29])
                                                Texp_ident "TerminalSet/1666.is_empty"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1375,40030+30]..src/grammarFunctor.ml[1375,40030+52])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1375,40030+31]..src/grammarFunctor.ml[1375,40030+48])
                                                      Texp_ident "FIRST/3107.nonterminal"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1375,40030+49]..src/grammarFunctor.ml[1375,40030+51])
                                                          Texp_ident "nt/3278"
                                                    ]
                                              ]
                                            expression (src/grammarFunctor.ml[1376,40088+8]..src/grammarFunctor.ml[1378,40145+77])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1376,40088+8]..src/grammarFunctor.ml[1376,40088+19])
                                                Texp_ident "Dune__exe!.Error.error"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1377,40108+10]..src/grammarFunctor.ml[1377,40108+36])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1377,40108+11]..src/grammarFunctor.ml[1377,40108+32])
                                                      Texp_ident "Nonterminal/1110.positions"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1377,40108+33]..src/grammarFunctor.ml[1377,40108+35])
                                                          Texp_ident "nt/3278"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                                Texp_constant Const_string(" generates the language {epsilon}.",(src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost,None)
                                                              expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                []
                                                            ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost
                                                        Texp_constant Const_string("%s generates the language {epsilon}.",(src/grammarFunctor.ml[1378,40145+10]..src/grammarFunctor.ml[1378,40145+48]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1378,40145+49]..src/grammarFunctor.ml[1378,40145+77])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1378,40145+50]..src/grammarFunctor.ml[1378,40145+67])
                                                      Texp_ident "Nonterminal/1110.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1378,40145+68]..src/grammarFunctor.ml[1378,40145+73])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1378,40145+74]..src/grammarFunctor.ml[1378,40145+76])
                                                          Texp_ident "nt/3278"
                                                    ]
                                              ]
                                            None
                                  ]
                              <arg>
                                Nolabel
                                expression (src/grammarFunctor.ml[1379,40223+6]..src/grammarFunctor.ml[1379,40223+27])
                                  Texp_field
                                  expression (src/grammarFunctor.ml[1379,40223+6]..src/grammarFunctor.ml[1379,40223+13])
                                    Texp_ident "G/488.grammar"
                                  "start_symbols"
                            ]
                          expression (src/grammarFunctor.ml[1381,40333+4]..src/grammarFunctor.ml[1386,40574+8])
                            Texp_for "nt/3279" Up
                            expression (src/grammarFunctor.ml[1381,40333+13]..src/grammarFunctor.ml[1381,40333+30])
                              Texp_ident "Nonterminal/1110.start"
                            expression (src/grammarFunctor.ml[1381,40333+34]..src/grammarFunctor.ml[1381,40333+51])
                              Texp_apply
                              expression (src/grammarFunctor.ml[1381,40333+48]..src/grammarFunctor.ml[1381,40333+49])
                                Texp_ident "Stdlib!.-"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1381,40333+34]..src/grammarFunctor.ml[1381,40333+47])
                                    Texp_ident "Nonterminal/1110.n"
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1381,40333+50]..src/grammarFunctor.ml[1381,40333+51])
                                    Texp_constant Const_int 1
                              ]
                            expression (src/grammarFunctor.ml[1382,40388+6]..src/grammarFunctor.ml[1385,40499+73])
                              Texp_ifthenelse
                              expression (src/grammarFunctor.ml[1382,40388+9]..src/grammarFunctor.ml[1382,40388+38])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1382,40388+9]..src/grammarFunctor.ml[1382,40388+12])
                                  Texp_ident "Stdlib!.not"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1382,40388+13]..src/grammarFunctor.ml[1382,40388+38])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1382,40388+14]..src/grammarFunctor.ml[1382,40388+34])
                                        Texp_ident "NONEMPTY/3051.nonterminal"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1382,40388+35]..src/grammarFunctor.ml[1382,40388+37])
                                            Texp_ident "nt/3279"
                                      ]
                                ]
                              expression (src/grammarFunctor.ml[1383,40432+8]..src/grammarFunctor.ml[1385,40499+73])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1383,40432+8]..src/grammarFunctor.ml[1383,40432+29])
                                  Texp_ident "Dune__exe!.Error.grammar_warning"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1384,40462+10]..src/grammarFunctor.ml[1384,40462+36])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1384,40462+11]..src/grammarFunctor.ml[1384,40462+32])
                                        Texp_ident "Nonterminal/1110.positions"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1384,40462+33]..src/grammarFunctor.ml[1384,40462+35])
                                            Texp_ident "nt/3279"
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44])
                                      Texp_construct "CamlinternalFormatBasics.Format"
                                      [
                                        expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                          Texp_construct "CamlinternalFormatBasics.String"
                                          [
                                            expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                              []
                                            expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                              [
                                                expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                                  Texp_constant Const_string(" generates the empty language.",(src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost,None)
                                                expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                  []
                                              ]
                                          ]
                                        expression (src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost
                                          Texp_constant Const_string("%s generates the empty language.",(src/grammarFunctor.ml[1385,40499+10]..src/grammarFunctor.ml[1385,40499+44]) ghost,None)
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1385,40499+45]..src/grammarFunctor.ml[1385,40499+73])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1385,40499+46]..src/grammarFunctor.ml[1385,40499+63])
                                        Texp_ident "Nonterminal/1110.print"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1385,40499+64]..src/grammarFunctor.ml[1385,40499+69])
                                            Texp_construct "false"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1385,40499+70]..src/grammarFunctor.ml[1385,40499+72])
                                            Texp_ident "nt/3279"
                                      ]
                                ]
                              None
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1392,40703+0]..src/grammarFunctor.ml[1415,41597+3])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1392,40703+4]..src/grammarFunctor.ml[1392,40703+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1393,40712+2]..src/grammarFunctor.ml[1415,41597+3])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1393,40712+5]..src/grammarFunctor.ml[1393,40712+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1394,40730+4]..src/grammarFunctor.ml[1415,41597+3])
                          Texp_apply
                          expression (src/grammarFunctor.ml[1394,40730+4]..src/grammarFunctor.ml[1394,40730+14])
                            Texp_ident "Dune__exe!.Error.logG"
                          [
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1394,40730+15]..src/grammarFunctor.ml[1394,40730+16])
                                Texp_constant Const_int 2
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1394,40730+17]..src/grammarFunctor.ml[1415,41597+3])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1394,40730+22]..src/grammarFunctor.ml[1394,40730+23])
                                      Tpat_var "f/3280"
                                    expression (src/grammarFunctor.ml[1395,40757+6]..src/grammarFunctor.ml[1414,41585+11])
                                      Texp_sequence
                                      expression (src/grammarFunctor.ml[1395,40757+6]..src/grammarFunctor.ml[1399,40936+10])
                                        Texp_for "nt/3281" Up
                                        expression (src/grammarFunctor.ml[1395,40757+15]..src/grammarFunctor.ml[1395,40757+32])
                                          Texp_ident "Nonterminal/1110.start"
                                        expression (src/grammarFunctor.ml[1395,40757+36]..src/grammarFunctor.ml[1395,40757+53])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1395,40757+50]..src/grammarFunctor.ml[1395,40757+51])
                                            Texp_ident "Stdlib!.-"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1395,40757+36]..src/grammarFunctor.ml[1395,40757+49])
                                                Texp_ident "Nonterminal/1110.n"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1395,40757+52]..src/grammarFunctor.ml[1395,40757+53])
                                                Texp_constant Const_int 1
                                          ]
                                        expression (src/grammarFunctor.ml[1396,40814+8]..src/grammarFunctor.ml[1398,40900+35])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1396,40814+8]..src/grammarFunctor.ml[1396,40814+22])
                                            Texp_ident "Stdlib!.Printf.fprintf"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1396,40814+23]..src/grammarFunctor.ml[1396,40814+24])
                                                Texp_ident "f/3280"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46])
                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                [
                                                  expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                                    [
                                                      expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                        Texp_constant Const_string("nullable(",(src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost,None)
                                                      expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                            [
                                                              expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost,None)
                                                              expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.Bool"
                                                                [
                                                                  expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                    []
                                                                  expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                        Texp_constant Const_char 0a
                                                                      expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                        []
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                  expression (src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost
                                                    Texp_constant Const_string("nullable(%s) = %b\n",(src/grammarFunctor.ml[1396,40814+25]..src/grammarFunctor.ml[1396,40814+46]) ghost,None)
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1397,40861+10]..src/grammarFunctor.ml[1397,40861+38])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1397,40861+11]..src/grammarFunctor.ml[1397,40861+28])
                                                  Texp_ident "Nonterminal/1110.print"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1397,40861+29]..src/grammarFunctor.ml[1397,40861+34])
                                                      Texp_construct "false"
                                                      []
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1397,40861+35]..src/grammarFunctor.ml[1397,40861+37])
                                                      Texp_ident "nt/3281"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1398,40900+10]..src/grammarFunctor.ml[1398,40900+35])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1398,40900+11]..src/grammarFunctor.ml[1398,40900+31])
                                                  Texp_ident "NULLABLE/3080.nonterminal"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1398,40900+32]..src/grammarFunctor.ml[1398,40900+34])
                                                      Texp_ident "nt/3281"
                                                ]
                                          ]
                                      expression (src/grammarFunctor.ml[1400,40948+6]..src/grammarFunctor.ml[1414,41585+11])
                                        Texp_sequence
                                        expression (src/grammarFunctor.ml[1400,40948+6]..src/grammarFunctor.ml[1404,41141+10])
                                          Texp_for "nt/3282" Up
                                          expression (src/grammarFunctor.ml[1400,40948+15]..src/grammarFunctor.ml[1400,40948+32])
                                            Texp_ident "Nonterminal/1110.start"
                                          expression (src/grammarFunctor.ml[1400,40948+36]..src/grammarFunctor.ml[1400,40948+53])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1400,40948+50]..src/grammarFunctor.ml[1400,40948+51])
                                              Texp_ident "Stdlib!.-"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1400,40948+36]..src/grammarFunctor.ml[1400,40948+49])
                                                  Texp_ident "Nonterminal/1110.n"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1400,40948+52]..src/grammarFunctor.ml[1400,40948+53])
                                                  Texp_constant Const_int 1
                                            ]
                                          expression (src/grammarFunctor.ml[1401,41005+8]..src/grammarFunctor.ml[1403,41088+52])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1401,41005+8]..src/grammarFunctor.ml[1401,41005+22])
                                              Texp_ident "Stdlib!.Printf.fprintf"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1401,41005+23]..src/grammarFunctor.ml[1401,41005+24])
                                                  Texp_ident "f/3280"
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43])
                                                  Texp_construct "CamlinternalFormatBasics.Format"
                                                  [
                                                    expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                      [
                                                        expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                          Texp_constant Const_string("first(",(src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost,None)
                                                        expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                          [
                                                            expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                              []
                                                            expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                              [
                                                                expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                  Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost,None)
                                                                expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                          Texp_constant Const_char 0a
                                                                        expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                          []
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                    expression (src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost
                                                      Texp_constant Const_string("first(%s) = %s\n",(src/grammarFunctor.ml[1401,41005+25]..src/grammarFunctor.ml[1401,41005+43]) ghost,None)
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1402,41049+10]..src/grammarFunctor.ml[1402,41049+38])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1402,41049+11]..src/grammarFunctor.ml[1402,41049+28])
                                                    Texp_ident "Nonterminal/1110.print"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1402,41049+29]..src/grammarFunctor.ml[1402,41049+34])
                                                        Texp_construct "false"
                                                        []
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1402,41049+35]..src/grammarFunctor.ml[1402,41049+37])
                                                        Texp_ident "nt/3282"
                                                  ]
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1403,41088+10]..src/grammarFunctor.ml[1403,41088+52])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1403,41088+11]..src/grammarFunctor.ml[1403,41088+28])
                                                    Texp_ident "TerminalSet/1666.print"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1403,41088+29]..src/grammarFunctor.ml[1403,41088+51])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1403,41088+30]..src/grammarFunctor.ml[1403,41088+47])
                                                          Texp_ident "FIRST/3107.nonterminal"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1403,41088+48]..src/grammarFunctor.ml[1403,41088+50])
                                                              Texp_ident "nt/3282"
                                                        ]
                                                  ]
                                            ]
                                        expression (src/grammarFunctor.ml[1405,41153+6]..src/grammarFunctor.ml[1414,41585+11])
                                          Texp_sequence
                                          expression (src/grammarFunctor.ml[1405,41153+6]..src/grammarFunctor.ml[1409,41373+10])
                                            Texp_for "nt/3283" Up
                                            expression (src/grammarFunctor.ml[1405,41153+15]..src/grammarFunctor.ml[1405,41153+32])
                                              Texp_ident "Nonterminal/1110.start"
                                            expression (src/grammarFunctor.ml[1405,41153+36]..src/grammarFunctor.ml[1405,41153+53])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1405,41153+50]..src/grammarFunctor.ml[1405,41153+51])
                                                Texp_ident "Stdlib!.-"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1405,41153+36]..src/grammarFunctor.ml[1405,41153+49])
                                                    Texp_ident "Nonterminal/1110.n"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1405,41153+52]..src/grammarFunctor.ml[1405,41153+53])
                                                    Texp_constant Const_int 1
                                              ]
                                            expression (src/grammarFunctor.ml[1406,41210+8]..src/grammarFunctor.ml[1408,41295+77])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1406,41210+8]..src/grammarFunctor.ml[1406,41210+22])
                                                Texp_ident "Stdlib!.Printf.fprintf"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1406,41210+23]..src/grammarFunctor.ml[1406,41210+24])
                                                    Texp_ident "f/3280"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                            Texp_constant Const_string("minimal(",(src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost,None)
                                                          expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                            [
                                                              expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                []
                                                              expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                    Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost,None)
                                                                  expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                            Texp_constant Const_char 0a
                                                                          expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                            []
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost
                                                        Texp_constant Const_string("minimal(%s) = %s\n",(src/grammarFunctor.ml[1406,41210+25]..src/grammarFunctor.ml[1406,41210+45]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1407,41256+10]..src/grammarFunctor.ml[1407,41256+38])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1407,41256+11]..src/grammarFunctor.ml[1407,41256+28])
                                                      Texp_ident "Nonterminal/1110.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1407,41256+29]..src/grammarFunctor.ml[1407,41256+34])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1407,41256+35]..src/grammarFunctor.ml[1407,41256+37])
                                                          Texp_ident "nt/3283"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1408,41295+10]..src/grammarFunctor.ml[1408,41295+77])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1408,41295+11]..src/grammarFunctor.ml[1408,41295+36])
                                                      Texp_ident "Dune__exe!.CompletedNatWitness.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1408,41295+37]..src/grammarFunctor.ml[1408,41295+51])
                                                          Texp_ident "Terminal/1588.print"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1408,41295+52]..src/grammarFunctor.ml[1408,41295+76])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1408,41295+53]..src/grammarFunctor.ml[1408,41295+72])
                                                            Texp_ident "MINIMAL/3174.nonterminal"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1408,41295+73]..src/grammarFunctor.ml[1408,41295+75])
                                                                Texp_ident "nt/3283"
                                                          ]
                                                    ]
                                              ]
                                          expression (src/grammarFunctor.ml[1410,41385+6]..src/grammarFunctor.ml[1414,41585+10])
                                            Texp_for "nt/3284" Up
                                            expression (src/grammarFunctor.ml[1410,41385+15]..src/grammarFunctor.ml[1410,41385+32])
                                              Texp_ident "Nonterminal/1110.start"
                                            expression (src/grammarFunctor.ml[1410,41385+36]..src/grammarFunctor.ml[1410,41385+53])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1410,41385+50]..src/grammarFunctor.ml[1410,41385+51])
                                                Texp_ident "Stdlib!.-"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1410,41385+36]..src/grammarFunctor.ml[1410,41385+49])
                                                    Texp_ident "Nonterminal/1110.n"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1410,41385+52]..src/grammarFunctor.ml[1410,41385+53])
                                                    Texp_constant Const_int 1
                                              ]
                                            expression (src/grammarFunctor.ml[1411,41442+8]..src/grammarFunctor.ml[1413,41527+57])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1411,41442+8]..src/grammarFunctor.ml[1411,41442+22])
                                                Texp_ident "Stdlib!.Printf.fprintf"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1411,41442+23]..src/grammarFunctor.ml[1411,41442+24])
                                                    Texp_ident "f/3280"
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                            Texp_constant Const_string("maximal(",(src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost,None)
                                                          expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                            [
                                                              expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                []
                                                              expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                    Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost,None)
                                                                  expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                        [
                                                                          expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                            Texp_constant Const_char 0a
                                                                          expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                            []
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                      expression (src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost
                                                        Texp_constant Const_string("maximal(%s) = %s\n",(src/grammarFunctor.ml[1411,41442+25]..src/grammarFunctor.ml[1411,41442+45]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1412,41488+10]..src/grammarFunctor.ml[1412,41488+38])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1412,41488+11]..src/grammarFunctor.ml[1412,41488+28])
                                                      Texp_ident "Nonterminal/1110.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1412,41488+29]..src/grammarFunctor.ml[1412,41488+34])
                                                          Texp_construct "false"
                                                          []
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1412,41488+35]..src/grammarFunctor.ml[1412,41488+37])
                                                          Texp_ident "nt/3284"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1413,41527+10]..src/grammarFunctor.ml[1413,41527+57])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1413,41527+11]..src/grammarFunctor.ml[1413,41527+31])
                                                      Texp_ident "Dune__exe!.NatInfinityMax.print"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1413,41527+32]..src/grammarFunctor.ml[1413,41527+56])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1413,41527+33]..src/grammarFunctor.ml[1413,41527+52])
                                                            Texp_ident "MAXIMAL/3276.nonterminal"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1413,41527+53]..src/grammarFunctor.ml[1413,41527+55])
                                                                Texp_ident "nt/3284"
                                                          ]
                                                    ]
                                              ]
                                ]
                          ]
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1417,41602+0]..src/grammarFunctor.ml[1419,41629+39])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1417,41602+4]..src/grammarFunctor.ml[1417,41602+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1418,41611+2]..src/grammarFunctor.ml[1419,41629+39])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1418,41611+5]..src/grammarFunctor.ml[1418,41611+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1419,41629+4]..src/grammarFunctor.ml[1419,41629+39])
                          Texp_apply
                          expression (src/grammarFunctor.ml[1419,41629+4]..src/grammarFunctor.ml[1419,41629+13])
                            Texp_ident "Dune__exe!.Time.tick"
                          [
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1419,41629+14]..src/grammarFunctor.ml[1419,41629+39])
                                Texp_constant Const_string("Analysis of the grammar",(src/grammarFunctor.ml[1419,41629+15]..src/grammarFunctor.ml[1419,41629+38]),None)
                          ]
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1431,42180+0]..src/grammarFunctor.ml[1490,44083+3])
                  Tstr_module
                  FOLLOW/3363
                    module_expr (src/grammarFunctor.ml[1431,42180+14]..src/grammarFunctor.ml[1490,44083+3])
                      Tmod_functor "P/3297"
                      module_type (src/grammarFunctor.ml[1431,42180+19]..src/grammarFunctor.ml[1436,42349+3])
                        Tmty_signature
                        [
                          signature_item (src/grammarFunctor.ml[1432,42203+2]..src/grammarFunctor.ml[1432,42203+34])
                            Tsig_include
                            module_type (src/grammarFunctor.ml[1432,42203+10]..src/grammarFunctor.ml[1432,42203+34])
                              Tmty_ident "Dune__exe!.Fix.MINIMAL_SEMI_LATTICE"
                          signature_item (src/grammarFunctor.ml[1433,42238+2]..src/grammarFunctor.ml[1433,42238+22])
                            Tsig_value
                            value_description bottom/3294 (src/grammarFunctor.ml[1433,42238+2]..src/grammarFunctor.ml[1433,42238+22])
                              core_type (src/grammarFunctor.ml[1433,42238+14]..src/grammarFunctor.ml[1433,42238+22])
                                Ttyp_constr "property/3292"
                                []
                              []
                          signature_item (src/grammarFunctor.ml[1434,42261+2]..src/grammarFunctor.ml[1434,42261+38])
                            Tsig_value
                            value_description terminal/3295 (src/grammarFunctor.ml[1434,42261+2]..src/grammarFunctor.ml[1434,42261+38])
                              core_type (src/grammarFunctor.ml[1434,42261+16]..src/grammarFunctor.ml[1434,42261+38])
                                Ttyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1434,42261+16]..src/grammarFunctor.ml[1434,42261+26])
                                  Ttyp_constr "Terminal/1588.t"
                                  []
                                core_type (src/grammarFunctor.ml[1434,42261+30]..src/grammarFunctor.ml[1434,42261+38])
                                  Ttyp_constr "property/3292"
                                  []
                              []
                          signature_item (src/grammarFunctor.ml[1435,42300+2]..src/grammarFunctor.ml[1435,42300+48])
                            Tsig_value
                            value_description first/3296 (src/grammarFunctor.ml[1435,42300+2]..src/grammarFunctor.ml[1435,42300+48])
                              core_type (src/grammarFunctor.ml[1435,42300+13]..src/grammarFunctor.ml[1435,42300+48])
                                Ttyp_arrow
                                Nolabel
                                core_type (src/grammarFunctor.ml[1435,42300+13]..src/grammarFunctor.ml[1435,42300+29])
                                  Ttyp_constr "Production/2648.index"
                                  []
                                core_type (src/grammarFunctor.ml[1435,42300+33]..src/grammarFunctor.ml[1435,42300+48])
                                  Ttyp_arrow
                                  Nolabel
                                  core_type (src/grammarFunctor.ml[1435,42300+33]..src/grammarFunctor.ml[1435,42300+36])
                                    Ttyp_constr "int/1!"
                                    []
                                  core_type (src/grammarFunctor.ml[1435,42300+40]..src/grammarFunctor.ml[1435,42300+48])
                                    Ttyp_constr "property/3292"
                                    []
                              []
                        ]
                      module_expr (src/grammarFunctor.ml[1436,42349+7]..src/grammarFunctor.ml[1490,44083+3])
                        module_expr (src/grammarFunctor.ml[1436,42349+7]..src/grammarFunctor.ml[1490,44083+3])
                          Tmod_structure
                          [
                            structure_item (src/grammarFunctor.ml[1438,42364+2]..src/grammarFunctor.ml[1439,42377+48])
                              Tstr_module
                              M/3305
                                module_expr (src/grammarFunctor.ml[1439,42377+4]..src/grammarFunctor.ml[1439,42377+48])
                                  Tmod_apply
                                  module_expr (src/grammarFunctor.ml[1439,42377+4]..src/grammarFunctor.ml[1439,42377+35])
                                    module_expr (src/grammarFunctor.ml[1439,42377+4]..src/grammarFunctor.ml[1439,42377+35])
                                      Tmod_ident "Dune__exe!.Fix.Glue.ArraysAsImperativeMaps"
                                  module_expr (src/grammarFunctor.ml[1439,42377+36]..src/grammarFunctor.ml[1439,42377+47])
                                    Tmod_ident "Nonterminal/1110"
                            structure_item (src/grammarFunctor.ml[1441,42427+2]..src/grammarFunctor.ml[1442,42440+24])
                              Tstr_module
                              S/3339
                                module_expr (src/grammarFunctor.ml[1442,42440+4]..src/grammarFunctor.ml[1442,42440+24])
                                  Tmod_apply
                                  module_expr (src/grammarFunctor.ml[1442,42440+4]..src/grammarFunctor.ml[1442,42440+21])
                                    Tmod_apply
                                    module_expr (src/grammarFunctor.ml[1442,42440+4]..src/grammarFunctor.ml[1442,42440+18])
                                      module_expr (src/grammarFunctor.ml[1442,42440+4]..src/grammarFunctor.ml[1442,42440+18])
                                        Tmod_ident "Dune__exe!.FixSolver.Make"
                                    module_expr (src/grammarFunctor.ml[1442,42440+19]..src/grammarFunctor.ml[1442,42440+20])
                                      Tmod_ident "M/3305"
                                  module_expr (src/grammarFunctor.ml[1442,42440+22]..src/grammarFunctor.ml[1442,42440+23])
                                    Tmod_ident "P/3297"
                            structure_item (src/grammarFunctor.ml[1447,42546+2]..src/grammarFunctor.ml[1453,42758+8])
                              Tstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1447,42546+6]..src/grammarFunctor.ml[1447,42546+8])
                                    Tpat_construct "()"
                                    []
                                    None
                                  expression (src/grammarFunctor.ml[1448,42557+4]..src/grammarFunctor.ml[1453,42758+8])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[1448,42557+8]..src/grammarFunctor.ml[1448,42557+13])
                                          Tpat_var "sharp/3340"
                                        expression (src/grammarFunctor.ml[1448,42557+16]..src/grammarFunctor.ml[1448,42557+41])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1448,42557+16]..src/grammarFunctor.ml[1448,42557+26])
                                            Texp_ident "P/3297.terminal"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1448,42557+27]..src/grammarFunctor.ml[1448,42557+41])
                                                Texp_ident "Terminal/1588.sharp"
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[1449,42602+4]..src/grammarFunctor.ml[1453,42758+8])
                                      Texp_for "nt/3341" Up
                                      expression (src/grammarFunctor.ml[1449,42602+13]..src/grammarFunctor.ml[1449,42602+14])
                                        Texp_constant Const_int 0
                                      expression (src/grammarFunctor.ml[1449,42602+18]..src/grammarFunctor.ml[1449,42602+39])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1449,42602+36]..src/grammarFunctor.ml[1449,42602+37])
                                          Texp_ident "Stdlib!.-"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1449,42602+18]..src/grammarFunctor.ml[1449,42602+35])
                                              Texp_ident "Nonterminal/1110.start"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1449,42602+38]..src/grammarFunctor.ml[1449,42602+39])
                                              Texp_constant Const_int 1
                                        ]
                                      expression (src/grammarFunctor.ml[1450,42645+6]..src/grammarFunctor.ml[1452,42727+30])
                                        Texp_sequence
                                        expression (src/grammarFunctor.ml[1450,42645+6]..src/grammarFunctor.ml[1450,42645+47])
                                          Texp_assert                                          expression (src/grammarFunctor.ml[1450,42645+13]..src/grammarFunctor.ml[1450,42645+47])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1450,42645+14]..src/grammarFunctor.ml[1450,42645+43])
                                              Texp_ident "Nonterminal/1110.is_internal_start"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1450,42645+44]..src/grammarFunctor.ml[1450,42645+46])
                                                  Texp_ident "nt/3341"
                                            ]
                                        expression (src/grammarFunctor.ml[1452,42727+6]..src/grammarFunctor.ml[1452,42727+30])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1452,42727+6]..src/grammarFunctor.ml[1452,42727+21])
                                            Texp_ident "S/3339.record_ConVar"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1452,42727+22]..src/grammarFunctor.ml[1452,42727+27])
                                                Texp_ident "sharp/3340"
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1452,42727+28]..src/grammarFunctor.ml[1452,42727+30])
                                                Texp_ident "nt/3341"
                                          ]
                              ]
                            structure_item (src/grammarFunctor.ml[1459,43021+2]..src/grammarFunctor.ml[1477,43752+22])
                              Tstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1459,43021+6]..src/grammarFunctor.ml[1459,43021+8])
                                    Tpat_construct "()"
                                    []
                                    None
                                  expression (src/grammarFunctor.ml[1460,43032+4]..src/grammarFunctor.ml[1477,43752+22])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1460,43032+4]..src/grammarFunctor.ml[1460,43032+15])
                                      Texp_ident "Stdlib!.Array.iteri"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1460,43032+16]..src/grammarFunctor.ml[1477,43752+5])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[1460,43032+21]..src/grammarFunctor.ml[1460,43032+25])
                                                Tpat_var "prod/3342"
                                              expression (src/grammarFunctor.ml[1460,43032+26]..src/grammarFunctor.ml[1476,43740+11]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/grammarFunctor.ml[1460,43032+26]..src/grammarFunctor.ml[1460,43032+36])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[1460,43032+27]..src/grammarFunctor.ml[1460,43032+30])
                                                          Tpat_var "nt1/3343"
                                                        pattern (src/grammarFunctor.ml[1460,43032+32]..src/grammarFunctor.ml[1460,43032+35])
                                                          Tpat_var "rhs/3344"
                                                      ]
                                                    expression (src/grammarFunctor.ml[1462,43151+6]..src/grammarFunctor.ml[1476,43740+11])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1462,43151+6]..src/grammarFunctor.ml[1462,43151+17])
                                                        Texp_ident "Stdlib!.Array.iteri"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1462,43151+18]..src/grammarFunctor.ml[1476,43740+7])
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1462,43151+23]..src/grammarFunctor.ml[1462,43151+24])
                                                                  Tpat_var "i/3345"
                                                                expression (src/grammarFunctor.ml[1462,43151+25]..src/grammarFunctor.ml[1475,43702+37]) ghost
                                                                  Texp_function
                                                                  Nolabel
                                                                  [
                                                                    <case>
                                                                      pattern (src/grammarFunctor.ml[1462,43151+25]..src/grammarFunctor.ml[1462,43151+31])
                                                                        Tpat_var "symbol/3346"
                                                                      expression (src/grammarFunctor.ml[1463,43186+8]..src/grammarFunctor.ml[1475,43702+37])
                                                                        Texp_match
                                                                        expression (src/grammarFunctor.ml[1463,43186+14]..src/grammarFunctor.ml[1463,43186+20])
                                                                          Texp_ident "symbol/3346"
                                                                        [
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[1464,43212+10]..src/grammarFunctor.ml[1464,43212+20])
                                                                              Tpat_value
                                                                              pattern (src/grammarFunctor.ml[1464,43212+10]..src/grammarFunctor.ml[1464,43212+20])
                                                                                Tpat_construct "Symbol.T"
                                                                                [
                                                                                  pattern (src/grammarFunctor.ml[1464,43212+19]..src/grammarFunctor.ml[1464,43212+20])
                                                                                    Tpat_any
                                                                                ]
                                                                                None
                                                                            expression (src/grammarFunctor.ml[1465,43236+12]..src/grammarFunctor.ml[1465,43236+14])
                                                                              Texp_construct "()"
                                                                              []
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[1466,43251+10]..src/grammarFunctor.ml[1466,43251+22])
                                                                              Tpat_value
                                                                              pattern (src/grammarFunctor.ml[1466,43251+10]..src/grammarFunctor.ml[1466,43251+22])
                                                                                Tpat_construct "Symbol.N"
                                                                                [
                                                                                  pattern (src/grammarFunctor.ml[1466,43251+19]..src/grammarFunctor.ml[1466,43251+22])
                                                                                    Tpat_var "nt2/3347"
                                                                                ]
                                                                                None
                                                                            expression (src/grammarFunctor.ml[1467,43277+12]..src/grammarFunctor.ml[1475,43702+37])
                                                                              Texp_let Nonrec
                                                                              [
                                                                                <def>
                                                                                  pattern (src/grammarFunctor.ml[1467,43277+16]..src/grammarFunctor.ml[1467,43277+24])
                                                                                    Tpat_var "nullable/3348"
                                                                                  expression (src/grammarFunctor.ml[1467,43277+27]..src/grammarFunctor.ml[1467,43277+57])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1467,43277+27]..src/grammarFunctor.ml[1467,43277+46])
                                                                                      Texp_ident "NULLABLE/3080.production"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1467,43277+47]..src/grammarFunctor.ml[1467,43277+51])
                                                                                          Texp_ident "prod/3342"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1467,43277+52]..src/grammarFunctor.ml[1467,43277+57])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[1467,43277+54]..src/grammarFunctor.ml[1467,43277+55])
                                                                                            Texp_ident "Stdlib!.+"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1467,43277+53]..src/grammarFunctor.ml[1467,43277+54])
                                                                                                Texp_ident "i/3345"
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1467,43277+55]..src/grammarFunctor.ml[1467,43277+56])
                                                                                                Texp_constant Const_int 1
                                                                                          ]
                                                                                    ]
                                                                                <def>
                                                                                  pattern (src/grammarFunctor.ml[1468,43335+16]..src/grammarFunctor.ml[1468,43335+21])
                                                                                    Tpat_var "first/3349"
                                                                                  expression (src/grammarFunctor.ml[1468,43335+24]..src/grammarFunctor.ml[1468,43335+42])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1468,43335+24]..src/grammarFunctor.ml[1468,43335+31])
                                                                                      Texp_ident "P/3297.first"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1468,43335+32]..src/grammarFunctor.ml[1468,43335+36])
                                                                                          Texp_ident "prod/3342"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1468,43335+37]..src/grammarFunctor.ml[1468,43335+42])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[1468,43335+39]..src/grammarFunctor.ml[1468,43335+40])
                                                                                            Texp_ident "Stdlib!.+"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1468,43335+38]..src/grammarFunctor.ml[1468,43335+39])
                                                                                                Texp_ident "i/3345"
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1468,43335+40]..src/grammarFunctor.ml[1468,43335+41])
                                                                                                Texp_constant Const_int 1
                                                                                          ]
                                                                                    ]
                                                                              ]
                                                                              expression (src/grammarFunctor.ml[1471,43508+12]..src/grammarFunctor.ml[1475,43702+37])
                                                                                Texp_sequence
                                                                                expression (src/grammarFunctor.ml[1471,43508+12]..src/grammarFunctor.ml[1471,43508+37])
                                                                                  Texp_apply
                                                                                  expression (src/grammarFunctor.ml[1471,43508+12]..src/grammarFunctor.ml[1471,43508+27])
                                                                                    Texp_ident "S/3339.record_ConVar"
                                                                                  [
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1471,43508+28]..src/grammarFunctor.ml[1471,43508+33])
                                                                                        Texp_ident "first/3349"
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1471,43508+34]..src/grammarFunctor.ml[1471,43508+37])
                                                                                        Texp_ident "nt2/3347"
                                                                                  ]
                                                                                expression (src/grammarFunctor.ml[1474,43673+12]..src/grammarFunctor.ml[1475,43702+37])
                                                                                  Texp_ifthenelse
                                                                                  expression (src/grammarFunctor.ml[1474,43673+15]..src/grammarFunctor.ml[1474,43673+23])
                                                                                    Texp_ident "nullable/3348"
                                                                                  expression (src/grammarFunctor.ml[1475,43702+14]..src/grammarFunctor.ml[1475,43702+37])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1475,43702+14]..src/grammarFunctor.ml[1475,43702+29])
                                                                                      Texp_ident "S/3339.record_VarVar"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1475,43702+30]..src/grammarFunctor.ml[1475,43702+33])
                                                                                          Texp_ident "nt1/3343"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1475,43702+34]..src/grammarFunctor.ml[1475,43702+37])
                                                                                          Texp_ident "nt2/3347"
                                                                                    ]
                                                                                  None
                                                                        ]
                                                                  ]
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1476,43740+8]..src/grammarFunctor.ml[1476,43740+11])
                                                            Texp_ident "rhs/3344"
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1477,43752+6]..src/grammarFunctor.ml[1477,43752+22])
                                          Texp_ident "Production/2648.table"
                                    ]
                              ]
                            structure_item (src/grammarFunctor.ml[1481,43831+2]..src/grammarFunctor.ml[1485,43993+5])
                              Tstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1481,43831+6]..src/grammarFunctor.ml[1481,43831+12])
                                    extra
                                      Tpat_extra_constraint
                                      core_type (src/grammarFunctor.ml[1481,43831+15]..src/grammarFunctor.ml[1481,43831+51])
                                        Ttyp_constr "Stdlib!.Lazy.t"
                                        [
                                          core_type (src/grammarFunctor.ml[1481,43831+16]..src/grammarFunctor.ml[1481,43831+43])
                                            Ttyp_arrow
                                            Nolabel
                                            core_type (src/grammarFunctor.ml[1481,43831+16]..src/grammarFunctor.ml[1481,43831+29])
                                              Ttyp_constr "Nonterminal/1110.t"
                                              []
                                            core_type (src/grammarFunctor.ml[1481,43831+33]..src/grammarFunctor.ml[1481,43831+43])
                                              Ttyp_constr "P/3297.property"
                                              []
                                        ]
                                    Tpat_alias "follow/3351"
                                    pattern (src/grammarFunctor.ml[1481,43831+6]..src/grammarFunctor.ml[1481,43831+12])
                                      Tpat_any
                                  expression (src/grammarFunctor.ml[1482,43885+4]..src/grammarFunctor.ml[1485,43993+5])
                                    extra
                                      Texp_constraint
                                      core_type (src/grammarFunctor.ml[1481,43831+15]..src/grammarFunctor.ml[1481,43831+51])
                                        Ttyp_constr "Stdlib!.Lazy.t"
                                        [
                                          core_type (src/grammarFunctor.ml[1481,43831+16]..src/grammarFunctor.ml[1481,43831+43])
                                            Ttyp_arrow
                                            Nolabel
                                            core_type (src/grammarFunctor.ml[1481,43831+16]..src/grammarFunctor.ml[1481,43831+29])
                                              Ttyp_constr "Nonterminal/1110.t"
                                              []
                                            core_type (src/grammarFunctor.ml[1481,43831+33]..src/grammarFunctor.ml[1481,43831+43])
                                              Ttyp_constr "P/3297.property"
                                              []
                                        ]
                                    Texp_lazy                                    expression (src/grammarFunctor.ml[1482,43885+9]..src/grammarFunctor.ml[1485,43993+5])
                                      Texp_letmodule "S/3355"
                                      module_expr (src/grammarFunctor.ml[1483,43896+21]..src/grammarFunctor.ml[1483,43896+28])
                                        Tmod_apply_unit
                                        module_expr (src/grammarFunctor.ml[1483,43896+21]..src/grammarFunctor.ml[1483,43896+28])
                                          Tmod_ident "S/3339.Solve"
                                      expression (src/grammarFunctor.ml[1484,43930+6]..src/grammarFunctor.ml[1484,43930+62])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1484,43930+10]..src/grammarFunctor.ml[1484,43930+12])
                                              Tpat_var "nt/3356"
                                            expression (src/grammarFunctor.ml[1484,43930+16]..src/grammarFunctor.ml[1484,43930+62])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1484,43930+16]..src/grammarFunctor.ml[1484,43930+28])
                                                Texp_ident "Dune__exe!.Option.value"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1484,43930+29]..src/grammarFunctor.ml[1484,43930+44])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1484,43930+30]..src/grammarFunctor.ml[1484,43930+40])
                                                      Texp_ident "S/3355.solution"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1484,43930+41]..src/grammarFunctor.ml[1484,43930+43])
                                                          Texp_ident "nt/3356"
                                                    ]
                                                <arg>
                                                  Labelled "default"
                                                  expression (src/grammarFunctor.ml[1484,43930+54]..src/grammarFunctor.ml[1484,43930+62])
                                                    Texp_ident "P/3297.bottom"
                                              ]
                                        ]
                              ]
                            structure_item (src/grammarFunctor.ml[1487,44000+2]..src/grammarFunctor.ml[1488,44045+36])
                              Tstr_value Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1487,44000+6]..src/grammarFunctor.ml[1487,44000+12])
                                    extra
                                      Tpat_extra_constraint
                                      core_type (src/grammarFunctor.ml[1487,44000+15]..src/grammarFunctor.ml[1487,44000+42])
                                        Ttyp_arrow
                                        Nolabel
                                        core_type (src/grammarFunctor.ml[1487,44000+15]..src/grammarFunctor.ml[1487,44000+28])
                                          Ttyp_constr "Nonterminal/1110.t"
                                          []
                                        core_type (src/grammarFunctor.ml[1487,44000+32]..src/grammarFunctor.ml[1487,44000+42])
                                          Ttyp_constr "P/3297.property"
                                          []
                                    Tpat_alias "follow/3357"
                                    pattern (src/grammarFunctor.ml[1487,44000+6]..src/grammarFunctor.ml[1487,44000+12])
                                      Tpat_any
                                  expression (src/grammarFunctor.ml[1488,44045+4]..src/grammarFunctor.ml[1488,44045+36])
                                    extra
                                      Texp_constraint
                                      core_type (src/grammarFunctor.ml[1487,44000+15]..src/grammarFunctor.ml[1487,44000+42])
                                        Ttyp_arrow
                                        Nolabel
                                        core_type (src/grammarFunctor.ml[1487,44000+15]..src/grammarFunctor.ml[1487,44000+28])
                                          Ttyp_constr "Nonterminal/1110.t"
                                          []
                                        core_type (src/grammarFunctor.ml[1487,44000+32]..src/grammarFunctor.ml[1487,44000+42])
                                          Ttyp_constr "P/3297.property"
                                          []
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[1488,44045+8]..src/grammarFunctor.ml[1488,44045+10])
                                          Tpat_var "nt/3358"
                                        expression (src/grammarFunctor.ml[1488,44045+14]..src/grammarFunctor.ml[1488,44045+36])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1488,44045+14]..src/grammarFunctor.ml[1488,44045+33])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1488,44045+15]..src/grammarFunctor.ml[1488,44045+25])
                                              Texp_ident "Stdlib!.Lazy.force"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1488,44045+26]..src/grammarFunctor.ml[1488,44045+32])
                                                  Texp_ident "follow/3351"
                                            ]
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1488,44045+34]..src/grammarFunctor.ml[1488,44045+36])
                                                Texp_ident "nt/3358"
                                          ]
                                    ]
                              ]
                          ]
                structure_item (src/grammarFunctor.ml[1494,44164+0]..src/grammarFunctor.ml[1500,44337+10])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1494,44164+4]..src/grammarFunctor.ml[1494,44164+10])
                        extra
                          Tpat_extra_constraint
                          core_type (src/grammarFunctor.ml[1494,44164+13]..src/grammarFunctor.ml[1494,44164+43])
                            Ttyp_arrow
                            Nolabel
                            core_type (src/grammarFunctor.ml[1494,44164+13]..src/grammarFunctor.ml[1494,44164+26])
                              Ttyp_constr "Nonterminal/1110.t"
                              []
                            core_type (src/grammarFunctor.ml[1494,44164+30]..src/grammarFunctor.ml[1494,44164+43])
                              Ttyp_constr "TerminalSet/1666.t"
                              []
                        Tpat_alias "follow/3364"
                        pattern (src/grammarFunctor.ml[1494,44164+4]..src/grammarFunctor.ml[1494,44164+10])
                          Tpat_any
                      expression (src/grammarFunctor.ml[1495,44210+2]..src/grammarFunctor.ml[1500,44337+10])
                        extra
                          Texp_constraint
                          core_type (src/grammarFunctor.ml[1494,44164+13]..src/grammarFunctor.ml[1494,44164+43])
                            Ttyp_arrow
                            Nolabel
                            core_type (src/grammarFunctor.ml[1494,44164+13]..src/grammarFunctor.ml[1494,44164+26])
                              Ttyp_constr "Nonterminal/1110.t"
                              []
                            core_type (src/grammarFunctor.ml[1494,44164+30]..src/grammarFunctor.ml[1494,44164+43])
                              Ttyp_constr "TerminalSet/1666.t"
                              []
                        Texp_letmodule "F/3433"
                        module_expr (src/grammarFunctor.ml[1495,44210+17]..src/grammarFunctor.ml[1499,44327+6])
                          Tmod_apply
                          module_expr (src/grammarFunctor.ml[1495,44210+17]..src/grammarFunctor.ml[1495,44210+23])
                            Tmod_ident "FOLLOW/3363"
                          module_expr (src/grammarFunctor.ml[1495,44210+24]..src/grammarFunctor.ml[1499,44327+5])
                            Tmod_structure
                            [
                              structure_item (src/grammarFunctor.ml[1496,44241+4]..src/grammarFunctor.ml[1496,44241+23])
                                Tstr_include                                module_expr (src/grammarFunctor.ml[1496,44241+12]..src/grammarFunctor.ml[1496,44241+23])
                                  Tmod_ident "TerminalSet/1666"
                              structure_item (src/grammarFunctor.ml[1497,44265+4]..src/grammarFunctor.ml[1497,44265+28])
                                Tstr_value Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1497,44265+8]..src/grammarFunctor.ml[1497,44265+16])
                                      Tpat_var "terminal/3391"
                                    expression (src/grammarFunctor.ml[1497,44265+19]..src/grammarFunctor.ml[1497,44265+28])
                                      Texp_ident "singleton/3369"
                                ]
                              structure_item (src/grammarFunctor.ml[1498,44294+4]..src/grammarFunctor.ml[1498,44294+32])
                                Tstr_value Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1498,44294+8]..src/grammarFunctor.ml[1498,44294+13])
                                      Tpat_var "first/3392"
                                    expression (src/grammarFunctor.ml[1498,44294+16]..src/grammarFunctor.ml[1498,44294+32])
                                      Texp_ident "FIRST/3107.production"
                                ]
                            ]
                        expression (src/grammarFunctor.ml[1500,44337+2]..src/grammarFunctor.ml[1500,44337+10])
                          Texp_ident "F/3433.follow"
                  ]
                structure_item (src/grammarFunctor.ml[1504,44397+0]..src/grammarFunctor.ml[1512,44645+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1504,44397+4]..src/grammarFunctor.ml[1504,44397+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1505,44406+2]..src/grammarFunctor.ml[1512,44645+5])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1505,44406+5]..src/grammarFunctor.ml[1505,44406+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1506,44424+4]..src/grammarFunctor.ml[1512,44645+5])
                          Texp_apply
                          expression (src/grammarFunctor.ml[1506,44424+4]..src/grammarFunctor.ml[1506,44424+14])
                            Texp_ident "Dune__exe!.Error.logG"
                          [
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1506,44424+15]..src/grammarFunctor.ml[1506,44424+16])
                                Texp_constant Const_int 2
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1506,44424+17]..src/grammarFunctor.ml[1512,44645+5])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1506,44424+22]..src/grammarFunctor.ml[1506,44424+23])
                                      Tpat_var "f/3434"
                                    expression (src/grammarFunctor.ml[1507,44451+6]..src/grammarFunctor.ml[1511,44634+10])
                                      Texp_for "nt/3435" Up
                                      expression (src/grammarFunctor.ml[1507,44451+15]..src/grammarFunctor.ml[1507,44451+32])
                                        Texp_ident "Nonterminal/1110.start"
                                      expression (src/grammarFunctor.ml[1507,44451+36]..src/grammarFunctor.ml[1507,44451+53])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1507,44451+50]..src/grammarFunctor.ml[1507,44451+51])
                                          Texp_ident "Stdlib!.-"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1507,44451+36]..src/grammarFunctor.ml[1507,44451+49])
                                              Texp_ident "Nonterminal/1110.n"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1507,44451+52]..src/grammarFunctor.ml[1507,44451+53])
                                              Texp_constant Const_int 1
                                        ]
                                      expression (src/grammarFunctor.ml[1508,44508+8]..src/grammarFunctor.ml[1510,44592+41])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1508,44508+8]..src/grammarFunctor.ml[1508,44508+22])
                                          Texp_ident "Stdlib!.Printf.fprintf"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1508,44508+23]..src/grammarFunctor.ml[1508,44508+24])
                                              Texp_ident "f/3434"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                      Texp_constant Const_string("follow(",(src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost,None)
                                                    expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                              Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost,None)
                                                            expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                              [
                                                                expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                  []
                                                                expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                                      Texp_constant Const_char 0a
                                                                    expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                expression (src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost
                                                  Texp_constant Const_string("follow(%s) = %s\n",(src/grammarFunctor.ml[1508,44508+25]..src/grammarFunctor.ml[1508,44508+44]) ghost,None)
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1509,44553+10]..src/grammarFunctor.ml[1509,44553+38])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1509,44553+11]..src/grammarFunctor.ml[1509,44553+28])
                                                Texp_ident "Nonterminal/1110.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1509,44553+29]..src/grammarFunctor.ml[1509,44553+34])
                                                    Texp_construct "false"
                                                    []
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1509,44553+35]..src/grammarFunctor.ml[1509,44553+37])
                                                    Texp_ident "nt/3435"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1510,44592+10]..src/grammarFunctor.ml[1510,44592+41])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1510,44592+11]..src/grammarFunctor.ml[1510,44592+28])
                                                Texp_ident "TerminalSet/1666.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1510,44592+29]..src/grammarFunctor.ml[1510,44592+40])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1510,44592+30]..src/grammarFunctor.ml[1510,44592+36])
                                                      Texp_ident "follow/3364"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1510,44592+37]..src/grammarFunctor.ml[1510,44592+39])
                                                          Texp_ident "nt/3435"
                                                    ]
                                              ]
                                        ]
                                ]
                          ]
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1518,44862+0]..src/grammarFunctor.ml[1547,45850+3])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1518,44862+4]..src/grammarFunctor.ml[1518,44862+11])
                        extra
                          Tpat_extra_constraint
                          core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+40])
                            Ttyp_constr "Stdlib!.Lazy.t"
                            [
                              core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+33])
                                Ttyp_constr "array/8!"
                                [
                                  core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+27])
                                    Ttyp_constr "TerminalSet/1666.t"
                                    []
                                ]
                            ]
                        Tpat_alias "tfollow/3436"
                        pattern (src/grammarFunctor.ml[1518,44862+4]..src/grammarFunctor.ml[1518,44862+11])
                          Tpat_any
                      expression (src/grammarFunctor.ml[1519,44905+2]..src/grammarFunctor.ml[1547,45850+3])
                        extra
                          Texp_constraint
                          core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+40])
                            Ttyp_constr "Stdlib!.Lazy.t"
                            [
                              core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+33])
                                Ttyp_constr "array/8!"
                                [
                                  core_type (src/grammarFunctor.ml[1518,44862+14]..src/grammarFunctor.ml[1518,44862+27])
                                    Ttyp_constr "TerminalSet/1666.t"
                                    []
                                ]
                            ]
                        Texp_lazy                        expression (src/grammarFunctor.ml[1519,44905+7]..src/grammarFunctor.ml[1547,45850+3])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1521,44915+8]..src/grammarFunctor.ml[1521,44915+15])
                                Tpat_var "tfollow/3437"
                              expression (src/grammarFunctor.ml[1522,44933+6]..src/grammarFunctor.ml[1522,44933+45])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1522,44933+6]..src/grammarFunctor.ml[1522,44933+16])
                                  Texp_ident "Stdlib!.Array.make"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1522,44933+17]..src/grammarFunctor.ml[1522,44933+27])
                                      Texp_ident "Terminal/1588.n"
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1522,44933+28]..src/grammarFunctor.ml[1522,44933+45])
                                      Texp_ident "TerminalSet/1666.empty"
                                ]
                          ]
                          expression (src/grammarFunctor.ml[1526,45027+4]..src/grammarFunctor.ml[1545,45837+11])
                            Texp_sequence
                            expression (src/grammarFunctor.ml[1526,45027+4]..src/grammarFunctor.ml[1543,45812+22])
                              Texp_apply
                              expression (src/grammarFunctor.ml[1526,45027+4]..src/grammarFunctor.ml[1526,45027+15])
                                Texp_ident "Stdlib!.Array.iteri"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1526,45027+16]..src/grammarFunctor.ml[1543,45812+5])
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[1526,45027+21]..src/grammarFunctor.ml[1526,45027+25])
                                          Tpat_var "prod/3438"
                                        expression (src/grammarFunctor.ml[1526,45027+26]..src/grammarFunctor.ml[1542,45800+11]) ghost
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/grammarFunctor.ml[1526,45027+26]..src/grammarFunctor.ml[1526,45027+36])
                                                Tpat_tuple
                                                [
                                                  pattern (src/grammarFunctor.ml[1526,45027+27]..src/grammarFunctor.ml[1526,45027+30])
                                                    Tpat_var "nt1/3439"
                                                  pattern (src/grammarFunctor.ml[1526,45027+32]..src/grammarFunctor.ml[1526,45027+35])
                                                    Tpat_var "rhs/3440"
                                                ]
                                              expression (src/grammarFunctor.ml[1528,45142+6]..src/grammarFunctor.ml[1542,45800+11])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1528,45142+6]..src/grammarFunctor.ml[1528,45142+17])
                                                  Texp_ident "Stdlib!.Array.iteri"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1528,45142+18]..src/grammarFunctor.ml[1542,45800+7])
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/grammarFunctor.ml[1528,45142+23]..src/grammarFunctor.ml[1528,45142+24])
                                                            Tpat_var "i/3441"
                                                          expression (src/grammarFunctor.ml[1528,45142+25]..src/grammarFunctor.ml[1541,45726+73]) ghost
                                                            Texp_function
                                                            Nolabel
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1528,45142+25]..src/grammarFunctor.ml[1528,45142+31])
                                                                  Tpat_var "symbol/3442"
                                                                expression (src/grammarFunctor.ml[1529,45177+8]..src/grammarFunctor.ml[1541,45726+73])
                                                                  Texp_match
                                                                  expression (src/grammarFunctor.ml[1529,45177+14]..src/grammarFunctor.ml[1529,45177+20])
                                                                    Texp_ident "symbol/3442"
                                                                  [
                                                                    <case>
                                                                      pattern (src/grammarFunctor.ml[1530,45203+10]..src/grammarFunctor.ml[1530,45203+20])
                                                                        Tpat_value
                                                                        pattern (src/grammarFunctor.ml[1530,45203+10]..src/grammarFunctor.ml[1530,45203+20])
                                                                          Tpat_construct "Symbol.N"
                                                                          [
                                                                            pattern (src/grammarFunctor.ml[1530,45203+19]..src/grammarFunctor.ml[1530,45203+20])
                                                                              Tpat_any
                                                                          ]
                                                                          None
                                                                      expression (src/grammarFunctor.ml[1531,45227+12]..src/grammarFunctor.ml[1531,45227+14])
                                                                        Texp_construct "()"
                                                                        []
                                                                    <case>
                                                                      pattern (src/grammarFunctor.ml[1532,45242+10]..src/grammarFunctor.ml[1532,45242+21])
                                                                        Tpat_value
                                                                        pattern (src/grammarFunctor.ml[1532,45242+10]..src/grammarFunctor.ml[1532,45242+21])
                                                                          Tpat_construct "Symbol.T"
                                                                          [
                                                                            pattern (src/grammarFunctor.ml[1532,45242+19]..src/grammarFunctor.ml[1532,45242+21])
                                                                              Tpat_var "t2/3443"
                                                                          ]
                                                                          None
                                                                      expression (src/grammarFunctor.ml[1533,45267+12]..src/grammarFunctor.ml[1541,45726+73])
                                                                        Texp_let Nonrec
                                                                        [
                                                                          <def>
                                                                            pattern (src/grammarFunctor.ml[1533,45267+16]..src/grammarFunctor.ml[1533,45267+24])
                                                                              Tpat_var "nullable/3444"
                                                                            expression (src/grammarFunctor.ml[1533,45267+27]..src/grammarFunctor.ml[1533,45267+57])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1533,45267+27]..src/grammarFunctor.ml[1533,45267+46])
                                                                                Texp_ident "NULLABLE/3080.production"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1533,45267+47]..src/grammarFunctor.ml[1533,45267+51])
                                                                                    Texp_ident "prod/3438"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1533,45267+52]..src/grammarFunctor.ml[1533,45267+57])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1533,45267+54]..src/grammarFunctor.ml[1533,45267+55])
                                                                                      Texp_ident "Stdlib!.+"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1533,45267+53]..src/grammarFunctor.ml[1533,45267+54])
                                                                                          Texp_ident "i/3441"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1533,45267+55]..src/grammarFunctor.ml[1533,45267+56])
                                                                                          Texp_constant Const_int 1
                                                                                    ]
                                                                              ]
                                                                          <def>
                                                                            pattern (src/grammarFunctor.ml[1534,45325+16]..src/grammarFunctor.ml[1534,45325+21])
                                                                              Tpat_var "first/3445"
                                                                            expression (src/grammarFunctor.ml[1534,45325+24]..src/grammarFunctor.ml[1534,45325+51])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1534,45325+24]..src/grammarFunctor.ml[1534,45325+40])
                                                                                Texp_ident "FIRST/3107.production"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1534,45325+41]..src/grammarFunctor.ml[1534,45325+45])
                                                                                    Texp_ident "prod/3438"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1534,45325+46]..src/grammarFunctor.ml[1534,45325+51])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1534,45325+48]..src/grammarFunctor.ml[1534,45325+49])
                                                                                      Texp_ident "Stdlib!.+"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1534,45325+47]..src/grammarFunctor.ml[1534,45325+48])
                                                                                          Texp_ident "i/3441"
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1534,45325+49]..src/grammarFunctor.ml[1534,45325+50])
                                                                                          Texp_constant Const_int 1
                                                                                    ]
                                                                              ]
                                                                        ]
                                                                        expression (src/grammarFunctor.ml[1537,45506+12]..src/grammarFunctor.ml[1541,45726+73])
                                                                          Texp_sequence
                                                                          expression (src/grammarFunctor.ml[1537,45506+12]..src/grammarFunctor.ml[1537,45506+64])
                                                                            Texp_apply
                                                                            expression (src/grammarFunctor.ml[1537,45506+12]..src/grammarFunctor.ml[1537,45506+64]) ghost
                                                                              Texp_ident "Stdlib!.Array.set"
                                                                            [
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1537,45506+12]..src/grammarFunctor.ml[1537,45506+19])
                                                                                  Texp_ident "tfollow/3437"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1537,45506+21]..src/grammarFunctor.ml[1537,45506+23])
                                                                                  Texp_ident "t2/3443"
                                                                              <arg>
                                                                                Nolabel
                                                                                expression (src/grammarFunctor.ml[1537,45506+28]..src/grammarFunctor.ml[1537,45506+64])
                                                                                  Texp_apply
                                                                                  expression (src/grammarFunctor.ml[1537,45506+28]..src/grammarFunctor.ml[1537,45506+45])
                                                                                    Texp_ident "TerminalSet/1666.union"
                                                                                  [
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1537,45506+46]..src/grammarFunctor.ml[1537,45506+51])
                                                                                        Texp_ident "first/3445"
                                                                                    <arg>
                                                                                      Nolabel
                                                                                      expression (src/grammarFunctor.ml[1537,45506+52]..src/grammarFunctor.ml[1537,45506+64])
                                                                                        Texp_apply
                                                                                        expression (src/grammarFunctor.ml[1537,45506+52]..src/grammarFunctor.ml[1537,45506+64]) ghost
                                                                                          Texp_ident "Stdlib!.Array.get"
                                                                                        [
                                                                                          <arg>
                                                                                            Nolabel
                                                                                            expression (src/grammarFunctor.ml[1537,45506+52]..src/grammarFunctor.ml[1537,45506+59])
                                                                                              Texp_ident "tfollow/3437"
                                                                                          <arg>
                                                                                            Nolabel
                                                                                            expression (src/grammarFunctor.ml[1537,45506+61]..src/grammarFunctor.ml[1537,45506+63])
                                                                                              Texp_ident "t2/3443"
                                                                                        ]
                                                                                  ]
                                                                            ]
                                                                          expression (src/grammarFunctor.ml[1540,45697+12]..src/grammarFunctor.ml[1541,45726+73])
                                                                            Texp_ifthenelse
                                                                            expression (src/grammarFunctor.ml[1540,45697+15]..src/grammarFunctor.ml[1540,45697+23])
                                                                              Texp_ident "nullable/3444"
                                                                            expression (src/grammarFunctor.ml[1541,45726+14]..src/grammarFunctor.ml[1541,45726+73])
                                                                              Texp_apply
                                                                              expression (src/grammarFunctor.ml[1541,45726+14]..src/grammarFunctor.ml[1541,45726+73]) ghost
                                                                                Texp_ident "Stdlib!.Array.set"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1541,45726+14]..src/grammarFunctor.ml[1541,45726+21])
                                                                                    Texp_ident "tfollow/3437"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1541,45726+23]..src/grammarFunctor.ml[1541,45726+25])
                                                                                    Texp_ident "t2/3443"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/grammarFunctor.ml[1541,45726+30]..src/grammarFunctor.ml[1541,45726+73])
                                                                                    Texp_apply
                                                                                    expression (src/grammarFunctor.ml[1541,45726+30]..src/grammarFunctor.ml[1541,45726+47])
                                                                                      Texp_ident "TerminalSet/1666.union"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1541,45726+48]..src/grammarFunctor.ml[1541,45726+60])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[1541,45726+49]..src/grammarFunctor.ml[1541,45726+55])
                                                                                            Texp_ident "follow/3364"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1541,45726+56]..src/grammarFunctor.ml[1541,45726+59])
                                                                                                Texp_ident "nt1/3439"
                                                                                          ]
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/grammarFunctor.ml[1541,45726+61]..src/grammarFunctor.ml[1541,45726+73])
                                                                                          Texp_apply
                                                                                          expression (src/grammarFunctor.ml[1541,45726+61]..src/grammarFunctor.ml[1541,45726+73]) ghost
                                                                                            Texp_ident "Stdlib!.Array.get"
                                                                                          [
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1541,45726+61]..src/grammarFunctor.ml[1541,45726+68])
                                                                                                Texp_ident "tfollow/3437"
                                                                                            <arg>
                                                                                              Nolabel
                                                                                              expression (src/grammarFunctor.ml[1541,45726+70]..src/grammarFunctor.ml[1541,45726+72])
                                                                                                Texp_ident "t2/3443"
                                                                                          ]
                                                                                    ]
                                                                              ]
                                                                            None
                                                                  ]
                                                            ]
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1542,45800+8]..src/grammarFunctor.ml[1542,45800+11])
                                                      Texp_ident "rhs/3440"
                                                ]
                                          ]
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1543,45812+6]..src/grammarFunctor.ml[1543,45812+22])
                                    Texp_ident "Production/2648.table"
                              ]
                            expression (src/grammarFunctor.ml[1545,45837+4]..src/grammarFunctor.ml[1545,45837+11])
                              Texp_ident "tfollow/3437"
                  ]
                structure_item (src/grammarFunctor.ml[1551,45887+0]..src/grammarFunctor.ml[1552,45903+26])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1551,45887+4]..src/grammarFunctor.ml[1551,45887+11])
                        Tpat_var "tfollow/3447"
                      expression (src/grammarFunctor.ml[1551,45887+12]..src/grammarFunctor.ml[1552,45903+26]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1551,45887+12]..src/grammarFunctor.ml[1551,45887+13])
                              Tpat_var "t/3448"
                            expression (src/grammarFunctor.ml[1552,45903+2]..src/grammarFunctor.ml[1552,45903+26])
                              Texp_apply
                              expression (src/grammarFunctor.ml[1552,45903+2]..src/grammarFunctor.ml[1552,45903+26]) ghost
                                Texp_ident "Stdlib!.Array.get"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1552,45903+2]..src/grammarFunctor.ml[1552,45903+22])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1552,45903+3]..src/grammarFunctor.ml[1552,45903+13])
                                      Texp_ident "Stdlib!.Lazy.force"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1552,45903+14]..src/grammarFunctor.ml[1552,45903+21])
                                          Texp_ident "tfollow/3436"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1552,45903+24]..src/grammarFunctor.ml[1552,45903+25])
                                    Texp_ident "t/3448"
                              ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1556,46000+0]..src/grammarFunctor.ml[1564,46218+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1556,46000+4]..src/grammarFunctor.ml[1556,46000+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1557,46009+2]..src/grammarFunctor.ml[1564,46218+5])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1557,46009+5]..src/grammarFunctor.ml[1557,46009+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1558,46027+4]..src/grammarFunctor.ml[1564,46218+5])
                          Texp_apply
                          expression (src/grammarFunctor.ml[1558,46027+4]..src/grammarFunctor.ml[1558,46027+14])
                            Texp_ident "Dune__exe!.Error.logG"
                          [
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1558,46027+15]..src/grammarFunctor.ml[1558,46027+16])
                                Texp_constant Const_int 3
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1558,46027+17]..src/grammarFunctor.ml[1564,46218+5])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1558,46027+22]..src/grammarFunctor.ml[1558,46027+23])
                                      Tpat_var "f/3449"
                                    expression (src/grammarFunctor.ml[1559,46054+6]..src/grammarFunctor.ml[1563,46207+10])
                                      Texp_for "t/3450" Up
                                      expression (src/grammarFunctor.ml[1559,46054+14]..src/grammarFunctor.ml[1559,46054+15])
                                        Texp_constant Const_int 0
                                      expression (src/grammarFunctor.ml[1559,46054+19]..src/grammarFunctor.ml[1559,46054+33])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1559,46054+30]..src/grammarFunctor.ml[1559,46054+31])
                                          Texp_ident "Stdlib!.-"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1559,46054+19]..src/grammarFunctor.ml[1559,46054+29])
                                              Texp_ident "Terminal/1588.n"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1559,46054+32]..src/grammarFunctor.ml[1559,46054+33])
                                              Texp_constant Const_int 1
                                        ]
                                      expression (src/grammarFunctor.ml[1560,46091+8]..src/grammarFunctor.ml[1562,46165+41])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1560,46091+8]..src/grammarFunctor.ml[1560,46091+22])
                                          Texp_ident "Stdlib!.Printf.fprintf"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1560,46091+23]..src/grammarFunctor.ml[1560,46091+24])
                                              Texp_ident "f/3449"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                      Texp_constant Const_string("follow(",(src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost,None)
                                                    expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                              Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost,None)
                                                            expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                              [
                                                                expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                  []
                                                                expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                                      Texp_constant Const_char 0a
                                                                    expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                expression (src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost
                                                  Texp_constant Const_string("follow(%s) = %s\n",(src/grammarFunctor.ml[1560,46091+25]..src/grammarFunctor.ml[1560,46091+44]) ghost,None)
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1561,46136+10]..src/grammarFunctor.ml[1561,46136+28])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1561,46136+11]..src/grammarFunctor.ml[1561,46136+25])
                                                Texp_ident "Terminal/1588.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1561,46136+26]..src/grammarFunctor.ml[1561,46136+27])
                                                    Texp_ident "t/3450"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1562,46165+10]..src/grammarFunctor.ml[1562,46165+41])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1562,46165+11]..src/grammarFunctor.ml[1562,46165+28])
                                                Texp_ident "TerminalSet/1666.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1562,46165+29]..src/grammarFunctor.ml[1562,46165+40])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1562,46165+30]..src/grammarFunctor.ml[1562,46165+37])
                                                      Texp_ident "tfollow/3447"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1562,46165+38]..src/grammarFunctor.ml[1562,46165+39])
                                                          Texp_ident "t/3450"
                                                    ]
                                              ]
                                        ]
                                ]
                          ]
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1572,46457+0]..src/grammarFunctor.ml[1589,47104+8])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1572,46457+4]..src/grammarFunctor.ml[1572,46457+10])
                        Tpat_var "sfirst/3451"
                      expression (src/grammarFunctor.ml[1572,46457+11]..src/grammarFunctor.ml[1589,47104+8]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1572,46457+11]..src/grammarFunctor.ml[1572,46457+15])
                              Tpat_var "prod/3453"
                            expression (src/grammarFunctor.ml[1572,46457+16]..src/grammarFunctor.ml[1589,47104+8]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/grammarFunctor.ml[1572,46457+16]..src/grammarFunctor.ml[1572,46457+17])
                                    Tpat_var "i/3454"
                                  expression (src/grammarFunctor.ml[1573,46477+2]..src/grammarFunctor.ml[1589,47104+8])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/grammarFunctor.ml[1573,46477+6]..src/grammarFunctor.ml[1573,46477+9])
                                          Tpat_var "rhs/3455"
                                        expression (src/grammarFunctor.ml[1573,46477+12]..src/grammarFunctor.ml[1573,46477+31])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1573,46477+12]..src/grammarFunctor.ml[1573,46477+26])
                                            Texp_ident "Production/2648.rhs"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1573,46477+27]..src/grammarFunctor.ml[1573,46477+31])
                                                Texp_ident "prod/3453"
                                          ]
                                    ]
                                    expression (src/grammarFunctor.ml[1574,46512+2]..src/grammarFunctor.ml[1589,47104+8])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/grammarFunctor.ml[1574,46512+6]..src/grammarFunctor.ml[1574,46512+7])
                                            Tpat_var "n/3456"
                                          expression (src/grammarFunctor.ml[1574,46512+10]..src/grammarFunctor.ml[1574,46512+26])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1574,46512+10]..src/grammarFunctor.ml[1574,46512+22])
                                              Texp_ident "Stdlib!.Array.length"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1574,46512+23]..src/grammarFunctor.ml[1574,46512+26])
                                                  Texp_ident "rhs/3455"
                                            ]
                                      ]
                                      expression (src/grammarFunctor.ml[1575,46542+2]..src/grammarFunctor.ml[1589,47104+8])
                                        Texp_let Rec
                                        [
                                          <def>
                                            pattern (src/grammarFunctor.ml[1575,46542+10]..src/grammarFunctor.ml[1575,46542+14])
                                              Tpat_var "loop/3457"
                                            expression (src/grammarFunctor.ml[1575,46542+15]..src/grammarFunctor.ml[1587,47027+71]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1575,46542+15]..src/grammarFunctor.ml[1575,46542+16])
                                                    Tpat_var "i/3458"
                                                  expression (src/grammarFunctor.ml[1576,46561+4]..src/grammarFunctor.ml[1587,47027+71])
                                                    Texp_ifthenelse
                                                    expression (src/grammarFunctor.ml[1576,46561+7]..src/grammarFunctor.ml[1576,46561+12])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1576,46561+9]..src/grammarFunctor.ml[1576,46561+10])
                                                        Texp_ident "Stdlib!.="
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1576,46561+7]..src/grammarFunctor.ml[1576,46561+8])
                                                            Texp_ident "i/3458"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1576,46561+11]..src/grammarFunctor.ml[1576,46561+12])
                                                            Texp_ident "n/3456"
                                                      ]
                                                    expression (src/grammarFunctor.ml[1578,46640+6]..src/grammarFunctor.ml[1578,46640+21])
                                                      Texp_ident "SymbolSet/1972.empty"
                                                    Some
                                                      expression (src/grammarFunctor.ml[1580,46671+6]..src/grammarFunctor.ml[1587,47027+71])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/grammarFunctor.ml[1580,46671+10]..src/grammarFunctor.ml[1580,46671+13])
                                                              Tpat_var "sym/3459"
                                                            expression (src/grammarFunctor.ml[1580,46671+16]..src/grammarFunctor.ml[1580,46671+23])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1580,46671+16]..src/grammarFunctor.ml[1580,46671+23]) ghost
                                                                Texp_ident "Stdlib!.Array.get"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1580,46671+16]..src/grammarFunctor.ml[1580,46671+19])
                                                                    Texp_ident "rhs/3455"
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1580,46671+21]..src/grammarFunctor.ml[1580,46671+22])
                                                                    Texp_ident "i/3458"
                                                              ]
                                                        ]
                                                        expression (src/grammarFunctor.ml[1583,46838+6]..src/grammarFunctor.ml[1587,47027+71])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1583,46838+6]..src/grammarFunctor.ml[1583,46838+21])
                                                            Texp_ident "SymbolSet/1972.union"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1584,46860+8]..src/grammarFunctor.ml[1584,46860+33])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1584,46860+9]..src/grammarFunctor.ml[1584,46860+28])
                                                                  Texp_ident "SymbolSet/1972.singleton"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1584,46860+29]..src/grammarFunctor.ml[1584,46860+32])
                                                                      Texp_ident "sym/3459"
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1587,47027+8]..src/grammarFunctor.ml[1587,47027+71])
                                                                Texp_ifthenelse
                                                                expression (src/grammarFunctor.ml[1587,47027+12]..src/grammarFunctor.ml[1587,47027+31])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1587,47027+12]..src/grammarFunctor.ml[1587,47027+27])
                                                                    Texp_ident "NULLABLE/3080.symbol"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1587,47027+28]..src/grammarFunctor.ml[1587,47027+31])
                                                                        Texp_ident "sym/3459"
                                                                  ]
                                                                expression (src/grammarFunctor.ml[1587,47027+37]..src/grammarFunctor.ml[1587,47027+49])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1587,47027+37]..src/grammarFunctor.ml[1587,47027+41])
                                                                    Texp_ident "loop/3457"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1587,47027+42]..src/grammarFunctor.ml[1587,47027+49])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[1587,47027+45]..src/grammarFunctor.ml[1587,47027+46])
                                                                          Texp_ident "Stdlib!.+"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1587,47027+43]..src/grammarFunctor.ml[1587,47027+44])
                                                                              Texp_ident "i/3458"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1587,47027+47]..src/grammarFunctor.ml[1587,47027+48])
                                                                              Texp_constant Const_int 1
                                                                        ]
                                                                  ]
                                                                Some
                                                                  expression (src/grammarFunctor.ml[1587,47027+55]..src/grammarFunctor.ml[1587,47027+70])
                                                                    Texp_ident "SymbolSet/1972.empty"
                                                          ]
                                              ]
                                        ]
                                        expression (src/grammarFunctor.ml[1589,47104+2]..src/grammarFunctor.ml[1589,47104+8])
                                          Texp_apply
                                          expression (src/grammarFunctor.ml[1589,47104+2]..src/grammarFunctor.ml[1589,47104+6])
                                            Texp_ident "loop/3457"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/grammarFunctor.ml[1589,47104+7]..src/grammarFunctor.ml[1589,47104+8])
                                                Texp_ident "i/3454"
                                          ]
                              ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1595,47260+0]..src/grammarFunctor.ml[1602,47508+10])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1595,47260+4]..src/grammarFunctor.ml[1595,47260+11])
                        extra
                          Tpat_extra_constraint
                          core_type (src/grammarFunctor.ml[1595,47260+14]..src/grammarFunctor.ml[1595,47260+42])
                            Ttyp_arrow
                            Nolabel
                            core_type (src/grammarFunctor.ml[1595,47260+14]..src/grammarFunctor.ml[1595,47260+27])
                              Ttyp_constr "Nonterminal/1110.t"
                              []
                            core_type (src/grammarFunctor.ml[1595,47260+31]..src/grammarFunctor.ml[1595,47260+42])
                              Ttyp_constr "SymbolSet/1972.t"
                              []
                        Tpat_alias "sfollow/3460"
                        pattern (src/grammarFunctor.ml[1595,47260+4]..src/grammarFunctor.ml[1595,47260+11])
                          Tpat_any
                      expression (src/grammarFunctor.ml[1596,47305+2]..src/grammarFunctor.ml[1602,47508+10])
                        extra
                          Texp_constraint
                          core_type (src/grammarFunctor.ml[1595,47260+14]..src/grammarFunctor.ml[1595,47260+42])
                            Ttyp_arrow
                            Nolabel
                            core_type (src/grammarFunctor.ml[1595,47260+14]..src/grammarFunctor.ml[1595,47260+27])
                              Ttyp_constr "Nonterminal/1110.t"
                              []
                            core_type (src/grammarFunctor.ml[1595,47260+31]..src/grammarFunctor.ml[1595,47260+42])
                              Ttyp_constr "SymbolSet/1972.t"
                              []
                        Texp_letmodule "F/3515"
                        module_expr (src/grammarFunctor.ml[1596,47305+17]..src/grammarFunctor.ml[1601,47498+6])
                          Tmod_apply
                          module_expr (src/grammarFunctor.ml[1596,47305+17]..src/grammarFunctor.ml[1596,47305+23])
                            Tmod_ident "FOLLOW/3363"
                          module_expr (src/grammarFunctor.ml[1596,47305+24]..src/grammarFunctor.ml[1601,47498+5])
                            Tmod_structure
                            [
                              structure_item (src/grammarFunctor.ml[1597,47336+4]..src/grammarFunctor.ml[1597,47336+33])
                                Tstr_value Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1597,47336+8]..src/grammarFunctor.ml[1597,47336+14])
                                      Tpat_var "bottom/3461"
                                    expression (src/grammarFunctor.ml[1597,47336+17]..src/grammarFunctor.ml[1597,47336+33])
                                      Texp_ident "SymbolSet/1972.bottom"
                                ]
                              structure_item (src/grammarFunctor.ml[1598,47370+4]..src/grammarFunctor.ml[1598,47370+50])
                                Tstr_include                                module_expr (src/grammarFunctor.ml[1598,47370+12]..src/grammarFunctor.ml[1598,47370+50])
                                  Tmod_apply
                                  module_expr (src/grammarFunctor.ml[1598,47370+12]..src/grammarFunctor.ml[1598,47370+39])
                                    module_expr (src/grammarFunctor.ml[1598,47370+12]..src/grammarFunctor.ml[1598,47370+39])
                                      Tmod_ident "Dune__exe!.Fix.Glue.MinimalSemiLattice"
                                  module_expr (src/grammarFunctor.ml[1598,47370+40]..src/grammarFunctor.ml[1598,47370+49])
                                    Tmod_ident "SymbolSet/1972"
                              structure_item (src/grammarFunctor.ml[1599,47421+4]..src/grammarFunctor.ml[1599,47421+53])
                                Tstr_value Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1599,47421+8]..src/grammarFunctor.ml[1599,47421+16])
                                      Tpat_var "terminal/3471"
                                    expression (src/grammarFunctor.ml[1599,47421+17]..src/grammarFunctor.ml[1599,47421+53]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1599,47421+17]..src/grammarFunctor.ml[1599,47421+18])
                                            Tpat_var "t/3473"
                                          expression (src/grammarFunctor.ml[1599,47421+21]..src/grammarFunctor.ml[1599,47421+53])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1599,47421+21]..src/grammarFunctor.ml[1599,47421+40])
                                              Texp_ident "SymbolSet/1972.singleton"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1599,47421+41]..src/grammarFunctor.ml[1599,47421+53])
                                                  Texp_construct "Symbol.T"
                                                  [
                                                    expression (src/grammarFunctor.ml[1599,47421+51]..src/grammarFunctor.ml[1599,47421+52])
                                                      Texp_ident "t/3473"
                                                  ]
                                            ]
                                      ]
                                ]
                              structure_item (src/grammarFunctor.ml[1600,47475+4]..src/grammarFunctor.ml[1600,47475+22])
                                Tstr_value Nonrec
                                [
                                  <def>
                                    pattern (src/grammarFunctor.ml[1600,47475+8]..src/grammarFunctor.ml[1600,47475+13])
                                      Tpat_var "first/3474"
                                    expression (src/grammarFunctor.ml[1600,47475+16]..src/grammarFunctor.ml[1600,47475+22])
                                      Texp_ident "sfirst/3451"
                                ]
                            ]
                        expression (src/grammarFunctor.ml[1602,47508+2]..src/grammarFunctor.ml[1602,47508+10])
                          Texp_ident "F/3515.follow"
                  ]
                structure_item (src/grammarFunctor.ml[1606,47577+0]..src/grammarFunctor.ml[1614,47825+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1606,47577+4]..src/grammarFunctor.ml[1606,47577+6])
                        Tpat_construct "()"
                        []
                        None
                      expression (src/grammarFunctor.ml[1607,47586+2]..src/grammarFunctor.ml[1614,47825+5])
                        Texp_ifthenelse
                        expression (src/grammarFunctor.ml[1607,47586+5]..src/grammarFunctor.ml[1607,47586+12])
                          Texp_ident "G/488.verbose"
                        expression (src/grammarFunctor.ml[1608,47604+4]..src/grammarFunctor.ml[1614,47825+5])
                          Texp_apply
                          expression (src/grammarFunctor.ml[1608,47604+4]..src/grammarFunctor.ml[1608,47604+14])
                            Texp_ident "Dune__exe!.Error.logG"
                          [
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1608,47604+15]..src/grammarFunctor.ml[1608,47604+16])
                                Texp_constant Const_int 3
                            <arg>
                              Nolabel
                              expression (src/grammarFunctor.ml[1608,47604+17]..src/grammarFunctor.ml[1614,47825+5])
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1608,47604+22]..src/grammarFunctor.ml[1608,47604+23])
                                      Tpat_var "f/3516"
                                    expression (src/grammarFunctor.ml[1609,47631+6]..src/grammarFunctor.ml[1613,47814+10])
                                      Texp_for "nt/3517" Up
                                      expression (src/grammarFunctor.ml[1609,47631+15]..src/grammarFunctor.ml[1609,47631+32])
                                        Texp_ident "Nonterminal/1110.start"
                                      expression (src/grammarFunctor.ml[1609,47631+36]..src/grammarFunctor.ml[1609,47631+53])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1609,47631+50]..src/grammarFunctor.ml[1609,47631+51])
                                          Texp_ident "Stdlib!.-"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1609,47631+36]..src/grammarFunctor.ml[1609,47631+49])
                                              Texp_ident "Nonterminal/1110.n"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1609,47631+52]..src/grammarFunctor.ml[1609,47631+53])
                                              Texp_constant Const_int 1
                                        ]
                                      expression (src/grammarFunctor.ml[1610,47688+8]..src/grammarFunctor.ml[1612,47773+40])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1610,47688+8]..src/grammarFunctor.ml[1610,47688+22])
                                          Texp_ident "Stdlib!.Printf.fprintf"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1610,47688+23]..src/grammarFunctor.ml[1610,47688+24])
                                              Texp_ident "f/3516"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45])
                                              Texp_construct "CamlinternalFormatBasics.Format"
                                              [
                                                expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String_literal"
                                                  [
                                                    expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                      Texp_constant Const_string("sfollow(",(src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost,None)
                                                    expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.String_literal"
                                                          [
                                                            expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                              Texp_constant Const_string(") = ",(src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost,None)
                                                            expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                              [
                                                                expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                  []
                                                                expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                                      Texp_constant Const_char 0a
                                                                    expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                expression (src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost
                                                  Texp_constant Const_string("sfollow(%s) = %s\n",(src/grammarFunctor.ml[1610,47688+25]..src/grammarFunctor.ml[1610,47688+45]) ghost,None)
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1611,47734+10]..src/grammarFunctor.ml[1611,47734+38])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1611,47734+11]..src/grammarFunctor.ml[1611,47734+28])
                                                Texp_ident "Nonterminal/1110.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1611,47734+29]..src/grammarFunctor.ml[1611,47734+34])
                                                    Texp_construct "false"
                                                    []
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1611,47734+35]..src/grammarFunctor.ml[1611,47734+37])
                                                    Texp_ident "nt/3517"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1612,47773+10]..src/grammarFunctor.ml[1612,47773+40])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1612,47773+11]..src/grammarFunctor.ml[1612,47773+26])
                                                Texp_ident "SymbolSet/1972.print"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1612,47773+27]..src/grammarFunctor.ml[1612,47773+39])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1612,47773+28]..src/grammarFunctor.ml[1612,47773+35])
                                                      Texp_ident "sfollow/3460"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1612,47773+36]..src/grammarFunctor.ml[1612,47773+38])
                                                          Texp_ident "nt/3517"
                                                    ]
                                              ]
                                        ]
                                ]
                          ]
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1629,48452+0]..src/grammarFunctor.ml[1632,48671+44])
                  Tstr_type Rec
                  [
                    type_declaration explanation/3518 (src/grammarFunctor.ml[1629,48452+0]..src/grammarFunctor.ml[1632,48671+44])
                      ptype_params =
                        []
                      ptype_cstrs =
                        []
                      ptype_kind =
                        Ttype_variant
                          [
                            (src/grammarFunctor.ml[1630,48471+2]..src/grammarFunctor.ml[1630,48471+12])
                              EObvious/3519
                              []
                              None
                            (src/grammarFunctor.ml[1631,48557+2]..src/grammarFunctor.ml[1631,48557+40])
                              EFirst/3520
                              [
                                core_type (src/grammarFunctor.ml[1631,48557+14]..src/grammarFunctor.ml[1631,48557+24])
                                  Ttyp_constr "Terminal/1588.t"
                                  []
                                core_type (src/grammarFunctor.ml[1631,48557+27]..src/grammarFunctor.ml[1631,48557+40])
                                  Ttyp_constr "Nonterminal/1110.t"
                                  []
                              ]
                              None
                            (src/grammarFunctor.ml[1632,48671+2]..src/grammarFunctor.ml[1632,48671+44])
                              ENullable/3521
                              [
                                core_type (src/grammarFunctor.ml[1632,48671+17]..src/grammarFunctor.ml[1632,48671+30])
                                  Ttyp_constr "list/9!"
                                  [
                                    core_type (src/grammarFunctor.ml[1632,48671+17]..src/grammarFunctor.ml[1632,48671+25])
                                      Ttyp_constr "Symbol/1729.t"
                                      []
                                  ]
                                core_type (src/grammarFunctor.ml[1632,48671+33]..src/grammarFunctor.ml[1632,48671+44])
                                  Ttyp_constr "explanation/3518"
                                  []
                              ]
                              None
                          ]
                      ptype_private = Public
                      ptype_manifest =
                        None
                  ]
                structure_item (src/grammarFunctor.ml[1634,48779+0]..src/grammarFunctor.ml[1655,49419+8])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1634,48779+4]..src/grammarFunctor.ml[1634,48779+11])
                        Tpat_var "explain/3522"
                      expression (src/grammarFunctor.ml[1634,48779+12]..src/grammarFunctor.ml[1655,49419+8]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1634,48779+13]..src/grammarFunctor.ml[1634,48779+16])
                              extra
                                Tpat_extra_constraint
                                core_type (src/grammarFunctor.ml[1634,48779+19]..src/grammarFunctor.ml[1634,48779+29])
                                  Ttyp_constr "Terminal/1588.t"
                                  []
                              Tpat_alias "tok/3524"
                              pattern (src/grammarFunctor.ml[1634,48779+13]..src/grammarFunctor.ml[1634,48779+16])
                                Tpat_any
                            expression (src/grammarFunctor.ml[1634,48779+31]..src/grammarFunctor.ml[1655,49419+8]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/grammarFunctor.ml[1634,48779+32]..src/grammarFunctor.ml[1634,48779+35])
                                    extra
                                      Tpat_extra_constraint
                                      core_type (src/grammarFunctor.ml[1634,48779+38]..src/grammarFunctor.ml[1634,48779+52])
                                        Ttyp_constr "array/8!"
                                        [
                                          core_type (src/grammarFunctor.ml[1634,48779+38]..src/grammarFunctor.ml[1634,48779+46])
                                            Ttyp_constr "Symbol/1729.t"
                                            []
                                        ]
                                    Tpat_alias "rhs/3525"
                                    pattern (src/grammarFunctor.ml[1634,48779+32]..src/grammarFunctor.ml[1634,48779+35])
                                      Tpat_any
                                  expression (src/grammarFunctor.ml[1634,48779+54]..src/grammarFunctor.ml[1655,49419+8]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/grammarFunctor.ml[1634,48779+55]..src/grammarFunctor.ml[1634,48779+56])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (src/grammarFunctor.ml[1634,48779+59]..src/grammarFunctor.ml[1634,48779+62])
                                              Ttyp_constr "int/1!"
                                              []
                                          Tpat_alias "i/3526"
                                          pattern (src/grammarFunctor.ml[1634,48779+55]..src/grammarFunctor.ml[1634,48779+56])
                                            Tpat_any
                                        expression (src/grammarFunctor.ml[1635,48845+2]..src/grammarFunctor.ml[1655,49419+8])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (src/grammarFunctor.ml[1635,48845+6]..src/grammarFunctor.ml[1635,48845+12])
                                                Tpat_var "length/3527"
                                              expression (src/grammarFunctor.ml[1635,48845+15]..src/grammarFunctor.ml[1635,48845+31])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1635,48845+15]..src/grammarFunctor.ml[1635,48845+27])
                                                  Texp_ident "Stdlib!.Array.length"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1635,48845+28]..src/grammarFunctor.ml[1635,48845+31])
                                                      Texp_ident "rhs/3525"
                                                ]
                                          ]
                                          expression (src/grammarFunctor.ml[1636,48880+2]..src/grammarFunctor.ml[1655,49419+8])
                                            Texp_let Rec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1636,48880+10]..src/grammarFunctor.ml[1636,48880+14])
                                                  Tpat_var "loop/3528"
                                                expression (src/grammarFunctor.ml[1636,48880+15]..src/grammarFunctor.ml[1653,49402+11]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1636,48880+15]..src/grammarFunctor.ml[1636,48880+16])
                                                        Tpat_var "i/3529"
                                                      expression (src/grammarFunctor.ml[1637,48899+4]..src/grammarFunctor.ml[1653,49402+11])
                                                        Texp_sequence
                                                        expression (src/grammarFunctor.ml[1637,48899+4]..src/grammarFunctor.ml[1637,48899+23])
                                                          Texp_assert                                                          expression (src/grammarFunctor.ml[1637,48899+11]..src/grammarFunctor.ml[1637,48899+23])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[1637,48899+14]..src/grammarFunctor.ml[1637,48899+15])
                                                              Texp_ident "Stdlib!.<"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1637,48899+12]..src/grammarFunctor.ml[1637,48899+13])
                                                                  Texp_ident "i/3529"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1637,48899+16]..src/grammarFunctor.ml[1637,48899+22])
                                                                  Texp_ident "length/3527"
                                                            ]
                                                        expression (src/grammarFunctor.ml[1638,48924+4]..src/grammarFunctor.ml[1653,49402+11])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/grammarFunctor.ml[1638,48924+8]..src/grammarFunctor.ml[1638,48924+14])
                                                                Tpat_var "symbol/3530"
                                                              expression (src/grammarFunctor.ml[1638,48924+17]..src/grammarFunctor.ml[1638,48924+24])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1638,48924+17]..src/grammarFunctor.ml[1638,48924+24]) ghost
                                                                  Texp_ident "Stdlib!.Array.get"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1638,48924+17]..src/grammarFunctor.ml[1638,48924+20])
                                                                      Texp_ident "rhs/3525"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1638,48924+22]..src/grammarFunctor.ml[1638,48924+23])
                                                                      Texp_ident "i/3529"
                                                                ]
                                                          ]
                                                          expression (src/grammarFunctor.ml[1639,48952+4]..src/grammarFunctor.ml[1653,49402+11])
                                                            Texp_match
                                                            expression (src/grammarFunctor.ml[1639,48952+10]..src/grammarFunctor.ml[1639,48952+16])
                                                              Texp_ident "symbol/3530"
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1640,48974+6]..src/grammarFunctor.ml[1640,48974+19])
                                                                  Tpat_value
                                                                  pattern (src/grammarFunctor.ml[1640,48974+6]..src/grammarFunctor.ml[1640,48974+19])
                                                                    Tpat_construct "Symbol.T"
                                                                    [
                                                                      pattern (src/grammarFunctor.ml[1640,48974+15]..src/grammarFunctor.ml[1640,48974+19])
                                                                        Tpat_var "tok'/3531"
                                                                    ]
                                                                    None
                                                                expression (src/grammarFunctor.ml[1641,48997+8]..src/grammarFunctor.ml[1642,49039+16])
                                                                  Texp_sequence
                                                                  expression (src/grammarFunctor.ml[1641,48997+8]..src/grammarFunctor.ml[1641,48997+40])
                                                                    Texp_assert                                                                    expression (src/grammarFunctor.ml[1641,48997+15]..src/grammarFunctor.ml[1641,48997+40])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[1641,48997+16]..src/grammarFunctor.ml[1641,48997+30])
                                                                        Texp_ident "Terminal/1588.equal"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1641,48997+31]..src/grammarFunctor.ml[1641,48997+34])
                                                                            Texp_ident "tok/3524"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1641,48997+35]..src/grammarFunctor.ml[1641,48997+39])
                                                                            Texp_ident "tok'/3531"
                                                                      ]
                                                                  expression (src/grammarFunctor.ml[1642,49039+8]..src/grammarFunctor.ml[1642,49039+16])
                                                                    Texp_construct "EObvious"
                                                                    []
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1643,49056+6]..src/grammarFunctor.ml[1643,49056+17])
                                                                  Tpat_value
                                                                  pattern (src/grammarFunctor.ml[1643,49056+6]..src/grammarFunctor.ml[1643,49056+17])
                                                                    Tpat_construct "Symbol.N"
                                                                    [
                                                                      pattern (src/grammarFunctor.ml[1643,49056+15]..src/grammarFunctor.ml[1643,49056+17])
                                                                        Tpat_var "nt/3532"
                                                                    ]
                                                                    None
                                                                expression (src/grammarFunctor.ml[1644,49077+8]..src/grammarFunctor.ml[1653,49402+11])
                                                                  Texp_ifthenelse
                                                                  expression (src/grammarFunctor.ml[1644,49077+11]..src/grammarFunctor.ml[1644,49077+53])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[1644,49077+11]..src/grammarFunctor.ml[1644,49077+26])
                                                                      Texp_ident "TerminalSet/1666.mem"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1644,49077+27]..src/grammarFunctor.ml[1644,49077+30])
                                                                          Texp_ident "tok/3524"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1644,49077+31]..src/grammarFunctor.ml[1644,49077+53])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[1644,49077+32]..src/grammarFunctor.ml[1644,49077+49])
                                                                            Texp_ident "FIRST/3107.nonterminal"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[1644,49077+50]..src/grammarFunctor.ml[1644,49077+52])
                                                                                Texp_ident "nt/3532"
                                                                          ]
                                                                    ]
                                                                  expression (src/grammarFunctor.ml[1645,49136+10]..src/grammarFunctor.ml[1645,49136+26])
                                                                    Texp_construct "EFirst"
                                                                    [
                                                                      expression (src/grammarFunctor.ml[1645,49136+18]..src/grammarFunctor.ml[1645,49136+21])
                                                                        Texp_ident "tok/3524"
                                                                      expression (src/grammarFunctor.ml[1645,49136+23]..src/grammarFunctor.ml[1645,49136+25])
                                                                        Texp_ident "nt/3532"
                                                                    ]
                                                                  Some
                                                                    expression (src/grammarFunctor.ml[1646,49163+13]..src/grammarFunctor.ml[1653,49402+11])
                                                                      Texp_sequence
                                                                      expression (src/grammarFunctor.ml[1647,49182+10]..src/grammarFunctor.ml[1647,49182+42])
                                                                        Texp_assert                                                                        expression (src/grammarFunctor.ml[1647,49182+17]..src/grammarFunctor.ml[1647,49182+42])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[1647,49182+18]..src/grammarFunctor.ml[1647,49182+38])
                                                                            Texp_ident "NULLABLE/3080.nonterminal"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[1647,49182+39]..src/grammarFunctor.ml[1647,49182+41])
                                                                                Texp_ident "nt/3532"
                                                                          ]
                                                                      expression (src/grammarFunctor.ml[1648,49226+10]..src/grammarFunctor.ml[1652,49362+39])
                                                                        Texp_match
                                                                        expression (src/grammarFunctor.ml[1648,49226+16]..src/grammarFunctor.ml[1648,49226+28])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[1648,49226+16]..src/grammarFunctor.ml[1648,49226+20])
                                                                            Texp_ident "loop/3528"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[1648,49226+21]..src/grammarFunctor.ml[1648,49226+28])
                                                                                Texp_apply
                                                                                expression (src/grammarFunctor.ml[1648,49226+24]..src/grammarFunctor.ml[1648,49226+25])
                                                                                  Texp_ident "Stdlib!.+"
                                                                                [
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1648,49226+22]..src/grammarFunctor.ml[1648,49226+23])
                                                                                      Texp_ident "i/3529"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/grammarFunctor.ml[1648,49226+26]..src/grammarFunctor.ml[1648,49226+27])
                                                                                      Texp_constant Const_int 1
                                                                                ]
                                                                          ]
                                                                        [
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[1649,49260+12]..src/grammarFunctor.ml[1649,49260+34])
                                                                              Tpat_value
                                                                              pattern (src/grammarFunctor.ml[1649,49260+12]..src/grammarFunctor.ml[1649,49260+34])
                                                                                Tpat_construct "ENullable"
                                                                                [
                                                                                  pattern (src/grammarFunctor.ml[1649,49260+23]..src/grammarFunctor.ml[1649,49260+30])
                                                                                    Tpat_var "symbols/3533"
                                                                                  pattern (src/grammarFunctor.ml[1649,49260+32]..src/grammarFunctor.ml[1649,49260+33])
                                                                                    Tpat_var "e/3534"
                                                                                ]
                                                                                None
                                                                            expression (src/grammarFunctor.ml[1650,49298+14]..src/grammarFunctor.ml[1650,49298+46])
                                                                              Texp_construct "ENullable"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[1650,49298+25]..src/grammarFunctor.ml[1650,49298+42])
                                                                                  Texp_construct "::"
                                                                                  [
                                                                                    expression (src/grammarFunctor.ml[1650,49298+25]..src/grammarFunctor.ml[1650,49298+31])
                                                                                      Texp_ident "symbol/3530"
                                                                                    expression (src/grammarFunctor.ml[1650,49298+35]..src/grammarFunctor.ml[1650,49298+42])
                                                                                      Texp_ident "symbols/3533"
                                                                                  ]
                                                                                expression (src/grammarFunctor.ml[1650,49298+44]..src/grammarFunctor.ml[1650,49298+45])
                                                                                  Texp_ident "e/3534"
                                                                              ]
                                                                          <case>
                                                                            pattern (src/grammarFunctor.ml[1651,49345+12]..src/grammarFunctor.ml[1651,49345+13])
                                                                              Tpat_value
                                                                              pattern (src/grammarFunctor.ml[1651,49345+12]..src/grammarFunctor.ml[1651,49345+13])
                                                                                Tpat_var "e/3535"
                                                                            expression (src/grammarFunctor.ml[1652,49362+14]..src/grammarFunctor.ml[1652,49362+39])
                                                                              Texp_construct "ENullable"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[1652,49362+25]..src/grammarFunctor.ml[1652,49362+35])
                                                                                  Texp_construct "::"
                                                                                  [
                                                                                    expression (src/grammarFunctor.ml[1652,49362+27]..src/grammarFunctor.ml[1652,49362+33])
                                                                                      Texp_ident "symbol/3530"
                                                                                    expression (src/grammarFunctor.ml[1652,49362+34]..src/grammarFunctor.ml[1652,49362+35]) ghost
                                                                                      Texp_construct "[]"
                                                                                      []
                                                                                  ]
                                                                                expression (src/grammarFunctor.ml[1652,49362+37]..src/grammarFunctor.ml[1652,49362+38])
                                                                                  Texp_ident "e/3535"
                                                                              ]
                                                                        ]
                                                            ]
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1655,49419+2]..src/grammarFunctor.ml[1655,49419+8])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1655,49419+2]..src/grammarFunctor.ml[1655,49419+6])
                                                Texp_ident "loop/3528"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1655,49419+7]..src/grammarFunctor.ml[1655,49419+8])
                                                    Texp_ident "i/3526"
                                              ]
                                    ]
                              ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1657,49429+0]..src/grammarFunctor.ml[1669,49786+9])
                  Tstr_value Rec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1657,49429+8]..src/grammarFunctor.ml[1657,49429+15])
                        Tpat_var "convert/3536"
                      expression (src/grammarFunctor.ml[1657,49429+18]..src/grammarFunctor.ml[1669,49786+9])
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1658,49456+4]..src/grammarFunctor.ml[1658,49456+12])
                              Tpat_construct "EObvious"
                              []
                              None
                            expression (src/grammarFunctor.ml[1659,49472+6]..src/grammarFunctor.ml[1659,49472+8])
                              Texp_constant Const_string("",(src/grammarFunctor.ml[1659,49472+7]..src/grammarFunctor.ml[1659,49472+7]),None)
                          <case>
                            pattern (src/grammarFunctor.ml[1660,49481+4]..src/grammarFunctor.ml[1660,49481+20])
                              Tpat_construct "EFirst"
                              [
                                pattern (src/grammarFunctor.ml[1660,49481+12]..src/grammarFunctor.ml[1660,49481+15])
                                  Tpat_var "tok/3537"
                                pattern (src/grammarFunctor.ml[1660,49481+17]..src/grammarFunctor.ml[1660,49481+19])
                                  Tpat_var "nt/3538"
                              ]
                              None
                            expression (src/grammarFunctor.ml[1661,49505+6]..src/grammarFunctor.ml[1663,49586+28])
                              Texp_apply
                              expression (src/grammarFunctor.ml[1661,49505+6]..src/grammarFunctor.ml[1661,49505+20])
                                Texp_ident "Stdlib!.Printf.sprintf"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43])
                                    Texp_construct "CamlinternalFormatBasics.Format"
                                    [
                                      expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                        Texp_construct "CamlinternalFormatBasics.String"
                                        [
                                          expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                            []
                                          expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                            [
                                              expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                                Texp_constant Const_string(" can begin with ",(src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost,None)
                                              expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String"
                                                [
                                                  expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                    []
                                                  expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                    []
                                                ]
                                            ]
                                        ]
                                      expression (src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost
                                        Texp_constant Const_string("%s can begin with %s",(src/grammarFunctor.ml[1661,49505+21]..src/grammarFunctor.ml[1661,49505+43]) ghost,None)
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1662,49549+8]..src/grammarFunctor.ml[1662,49549+36])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1662,49549+9]..src/grammarFunctor.ml[1662,49549+26])
                                      Texp_ident "Nonterminal/1110.print"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1662,49549+27]..src/grammarFunctor.ml[1662,49549+32])
                                          Texp_construct "false"
                                          []
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1662,49549+33]..src/grammarFunctor.ml[1662,49549+35])
                                          Texp_ident "nt/3538"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/grammarFunctor.ml[1663,49586+8]..src/grammarFunctor.ml[1663,49586+28])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1663,49586+9]..src/grammarFunctor.ml[1663,49586+23])
                                      Texp_ident "Terminal/1588.print"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1663,49586+24]..src/grammarFunctor.ml[1663,49586+27])
                                          Texp_ident "tok/3537"
                                    ]
                              ]
                          <case>
                            pattern (src/grammarFunctor.ml[1664,49615+4]..src/grammarFunctor.ml[1664,49615+26])
                              Tpat_construct "ENullable"
                              [
                                pattern (src/grammarFunctor.ml[1664,49615+15]..src/grammarFunctor.ml[1664,49615+22])
                                  Tpat_var "symbols/3539"
                                pattern (src/grammarFunctor.ml[1664,49615+24]..src/grammarFunctor.ml[1664,49615+25])
                                  Tpat_var "e/3540"
                              ]
                              None
                            expression (src/grammarFunctor.ml[1665,49645+6]..src/grammarFunctor.ml[1669,49786+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/grammarFunctor.ml[1665,49645+10]..src/grammarFunctor.ml[1665,49645+11])
                                    Tpat_var "e/3541"
                                  expression (src/grammarFunctor.ml[1665,49645+14]..src/grammarFunctor.ml[1665,49645+23])
                                    Texp_apply
                                    expression (src/grammarFunctor.ml[1665,49645+14]..src/grammarFunctor.ml[1665,49645+21])
                                      Texp_ident "convert/3536"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/grammarFunctor.ml[1665,49645+22]..src/grammarFunctor.ml[1665,49645+23])
                                          Texp_ident "e/3540"
                                    ]
                              ]
                              expression (src/grammarFunctor.ml[1666,49672+6]..src/grammarFunctor.ml[1669,49786+9])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1666,49672+6]..src/grammarFunctor.ml[1666,49672+20])
                                  Texp_ident "Stdlib!.Printf.sprintf"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40])
                                      Texp_construct "CamlinternalFormatBasics.Format"
                                      [
                                        expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                          Texp_construct "CamlinternalFormatBasics.String"
                                          [
                                            expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                              []
                                            expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                              [
                                                expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                  Texp_constant Const_string(" can vanish",(src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost,None)
                                                expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                  [
                                                    expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                      []
                                                    expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                          []
                                                      ]
                                                  ]
                                              ]
                                          ]
                                        expression (src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost
                                          Texp_constant Const_string("%s can vanish%s%s",(src/grammarFunctor.ml[1666,49672+21]..src/grammarFunctor.ml[1666,49672+40]) ghost,None)
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1667,49713+8]..src/grammarFunctor.ml[1667,49713+31])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1667,49713+9]..src/grammarFunctor.ml[1667,49713+22])
                                        Texp_ident "Symbol/1729.printl"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1667,49713+23]..src/grammarFunctor.ml[1667,49713+30])
                                            Texp_ident "symbols/3539"
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1668,49745+8]..src/grammarFunctor.ml[1668,49745+40])
                                      Texp_ifthenelse
                                      expression (src/grammarFunctor.ml[1668,49745+12]..src/grammarFunctor.ml[1668,49745+18])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1668,49745+14]..src/grammarFunctor.ml[1668,49745+15])
                                          Texp_ident "Stdlib!.="
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1668,49745+12]..src/grammarFunctor.ml[1668,49745+13])
                                              Texp_ident "e/3541"
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1668,49745+16]..src/grammarFunctor.ml[1668,49745+18])
                                              Texp_constant Const_string("",(src/grammarFunctor.ml[1668,49745+17]..src/grammarFunctor.ml[1668,49745+17]),None)
                                        ]
                                      expression (src/grammarFunctor.ml[1668,49745+24]..src/grammarFunctor.ml[1668,49745+26])
                                        Texp_constant Const_string("",(src/grammarFunctor.ml[1668,49745+25]..src/grammarFunctor.ml[1668,49745+25]),None)
                                      Some
                                        expression (src/grammarFunctor.ml[1668,49745+32]..src/grammarFunctor.ml[1668,49745+39])
                                          Texp_constant Const_string(" and ",(src/grammarFunctor.ml[1668,49745+33]..src/grammarFunctor.ml[1668,49745+38]),None)
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1669,49786+8]..src/grammarFunctor.ml[1669,49786+9])
                                      Texp_ident "e/3541"
                                ]
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1674,49913+0]..src/grammarFunctor.ml[1729,51289+3])
                  Tstr_module
                  Analysis/3582
                    module_expr (src/grammarFunctor.ml[1674,49913+18]..src/grammarFunctor.ml[1729,51289+3])
                      module_expr (src/grammarFunctor.ml[1674,49913+18]..src/grammarFunctor.ml[1729,51289+3])
                        Tmod_structure
                        [
                          structure_item (src/grammarFunctor.ml[1676,49939+2]..src/grammarFunctor.ml[1676,49939+37])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1676,49939+6]..src/grammarFunctor.ml[1676,49939+14])
                                  Tpat_var "nullable/3543"
                                expression (src/grammarFunctor.ml[1676,49939+17]..src/grammarFunctor.ml[1676,49939+37])
                                  Texp_ident "NULLABLE/3080.nonterminal"
                            ]
                          structure_item (src/grammarFunctor.ml[1678,49978+2]..src/grammarFunctor.ml[1678,49978+39])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1678,49978+6]..src/grammarFunctor.ml[1678,49978+21])
                                  Tpat_var "nullable_symbol/3544"
                                expression (src/grammarFunctor.ml[1678,49978+24]..src/grammarFunctor.ml[1678,49978+39])
                                  Texp_ident "NULLABLE/3080.symbol"
                            ]
                          structure_item (src/grammarFunctor.ml[1680,50019+2]..src/grammarFunctor.ml[1680,50019+31])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1680,50019+6]..src/grammarFunctor.ml[1680,50019+11])
                                  Tpat_var "first/3545"
                                expression (src/grammarFunctor.ml[1680,50019+14]..src/grammarFunctor.ml[1680,50019+31])
                                  Texp_ident "FIRST/3107.nonterminal"
                            ]
                          structure_item (src/grammarFunctor.ml[1682,50052+2]..src/grammarFunctor.ml[1682,50052+33])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1682,50052+6]..src/grammarFunctor.ml[1682,50052+18])
                                  Tpat_var "first_symbol/3546"
                                expression (src/grammarFunctor.ml[1682,50052+21]..src/grammarFunctor.ml[1682,50052+33])
                                  Texp_ident "FIRST/3107.symbol"
                            ]
                          structure_item (src/grammarFunctor.ml[1686,50144+2]..src/grammarFunctor.ml[1688,50211+27])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1686,50144+6]..src/grammarFunctor.ml[1686,50144+25])
                                  Tpat_var "nullable_first_prod/3547"
                                expression (src/grammarFunctor.ml[1686,50144+26]..src/grammarFunctor.ml[1688,50211+27]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1686,50144+26]..src/grammarFunctor.ml[1686,50144+30])
                                        Tpat_var "prod/3549"
                                      expression (src/grammarFunctor.ml[1686,50144+31]..src/grammarFunctor.ml[1688,50211+27]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1686,50144+31]..src/grammarFunctor.ml[1686,50144+32])
                                              Tpat_var "i/3550"
                                            expression (src/grammarFunctor.ml[1687,50179+4]..src/grammarFunctor.ml[1688,50211+27])
                                              Texp_tuple
                                              [
                                                expression (src/grammarFunctor.ml[1687,50179+4]..src/grammarFunctor.ml[1687,50179+30])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1687,50179+4]..src/grammarFunctor.ml[1687,50179+23])
                                                    Texp_ident "NULLABLE/3080.production"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1687,50179+24]..src/grammarFunctor.ml[1687,50179+28])
                                                        Texp_ident "prod/3549"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1687,50179+29]..src/grammarFunctor.ml[1687,50179+30])
                                                        Texp_ident "i/3550"
                                                  ]
                                                expression (src/grammarFunctor.ml[1688,50211+4]..src/grammarFunctor.ml[1688,50211+27])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1688,50211+4]..src/grammarFunctor.ml[1688,50211+20])
                                                    Texp_ident "FIRST/3107.production"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1688,50211+21]..src/grammarFunctor.ml[1688,50211+25])
                                                        Texp_ident "prod/3549"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1688,50211+26]..src/grammarFunctor.ml[1688,50211+27])
                                                        Texp_ident "i/3550"
                                                  ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1693,50339+2]..src/grammarFunctor.ml[1698,50513+5])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1693,50339+6]..src/grammarFunctor.ml[1693,50339+25])
                                  Tpat_var "nullable_first_prod/3551"
                                expression (src/grammarFunctor.ml[1694,50367+4]..src/grammarFunctor.ml[1698,50513+5])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[1694,50367+4]..src/grammarFunctor.ml[1694,50367+17])
                                    Texp_ident "Dune__exe!.Misc.tabulate"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[1694,50367+18]..src/grammarFunctor.ml[1694,50367+30])
                                        Texp_ident "Production/2648.n"
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[1694,50367+31]..src/grammarFunctor.ml[1698,50513+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1694,50367+36]..src/grammarFunctor.ml[1694,50367+40])
                                              Tpat_var "prod/3552"
                                            expression (src/grammarFunctor.ml[1695,50411+6]..src/grammarFunctor.ml[1697,50505+7])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1695,50411+6]..src/grammarFunctor.ml[1695,50411+19])
                                                Texp_ident "Dune__exe!.Misc.tabulate"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1695,50411+20]..src/grammarFunctor.ml[1695,50411+48])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1695,50411+44]..src/grammarFunctor.ml[1695,50411+45])
                                                      Texp_ident "Stdlib!.+"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1695,50411+21]..src/grammarFunctor.ml[1695,50411+43])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1695,50411+21]..src/grammarFunctor.ml[1695,50411+38])
                                                            Texp_ident "Production/2648.length"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1695,50411+39]..src/grammarFunctor.ml[1695,50411+43])
                                                                Texp_ident "prod/3552"
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1695,50411+46]..src/grammarFunctor.ml[1695,50411+47])
                                                          Texp_constant Const_int 1
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1695,50411+49]..src/grammarFunctor.ml[1697,50505+7])
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/grammarFunctor.ml[1695,50411+54]..src/grammarFunctor.ml[1695,50411+55])
                                                          Tpat_var "i/3553"
                                                        expression (src/grammarFunctor.ml[1696,50470+8]..src/grammarFunctor.ml[1696,50470+34])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1696,50470+8]..src/grammarFunctor.ml[1696,50470+27])
                                                            Texp_ident "nullable_first_prod/3547"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1696,50470+28]..src/grammarFunctor.ml[1696,50470+32])
                                                                Texp_ident "prod/3552"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1696,50470+33]..src/grammarFunctor.ml[1696,50470+34])
                                                                Texp_ident "i/3553"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1700,50520+2]..src/grammarFunctor.ml[1705,50674+11])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1700,50520+6]..src/grammarFunctor.ml[1700,50520+26])
                                  Tpat_var "first_prod_lookahead/3554"
                                expression (src/grammarFunctor.ml[1700,50520+27]..src/grammarFunctor.ml[1705,50674+11]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1700,50520+27]..src/grammarFunctor.ml[1700,50520+31])
                                        Tpat_var "prod/3556"
                                      expression (src/grammarFunctor.ml[1700,50520+32]..src/grammarFunctor.ml[1705,50674+11]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1700,50520+32]..src/grammarFunctor.ml[1700,50520+33])
                                              Tpat_var "i/3557"
                                            expression (src/grammarFunctor.ml[1700,50520+34]..src/grammarFunctor.ml[1705,50674+11]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1700,50520+34]..src/grammarFunctor.ml[1700,50520+35])
                                                    Tpat_var "z/3558"
                                                  expression (src/grammarFunctor.ml[1701,50558+4]..src/grammarFunctor.ml[1705,50674+11])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[1701,50558+8]..src/grammarFunctor.ml[1701,50558+23])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/grammarFunctor.ml[1701,50558+8]..src/grammarFunctor.ml[1701,50558+16])
                                                              Tpat_var "nullable/3559"
                                                            pattern (src/grammarFunctor.ml[1701,50558+18]..src/grammarFunctor.ml[1701,50558+23])
                                                              Tpat_var "first/3560"
                                                          ]
                                                        expression (src/grammarFunctor.ml[1701,50558+26]..src/grammarFunctor.ml[1701,50558+52])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1701,50558+26]..src/grammarFunctor.ml[1701,50558+45])
                                                            Texp_ident "nullable_first_prod/3551"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1701,50558+46]..src/grammarFunctor.ml[1701,50558+50])
                                                                Texp_ident "prod/3556"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1701,50558+51]..src/grammarFunctor.ml[1701,50558+52])
                                                                Texp_ident "i/3557"
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[1702,50614+4]..src/grammarFunctor.ml[1705,50674+11])
                                                      Texp_ifthenelse
                                                      expression (src/grammarFunctor.ml[1702,50614+7]..src/grammarFunctor.ml[1702,50614+15])
                                                        Texp_ident "nullable/3559"
                                                      expression (src/grammarFunctor.ml[1703,50635+6]..src/grammarFunctor.ml[1703,50635+29])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1703,50635+6]..src/grammarFunctor.ml[1703,50635+21])
                                                          Texp_ident "TerminalSet/1666.add"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1703,50635+22]..src/grammarFunctor.ml[1703,50635+23])
                                                              Texp_ident "z/3558"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1703,50635+24]..src/grammarFunctor.ml[1703,50635+29])
                                                              Texp_ident "first/3560"
                                                        ]
                                                      Some
                                                        expression (src/grammarFunctor.ml[1705,50674+6]..src/grammarFunctor.ml[1705,50674+11])
                                                          Texp_ident "first/3560"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1707,50687+2]..src/grammarFunctor.ml[1708,50765+31])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1707,50687+6]..src/grammarFunctor.ml[1707,50687+23])
                                  Tpat_var "explain_first_rhs/3561"
                                expression (src/grammarFunctor.ml[1707,50687+24]..src/grammarFunctor.ml[1708,50765+31]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1707,50687+25]..src/grammarFunctor.ml[1707,50687+28])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/grammarFunctor.ml[1707,50687+31]..src/grammarFunctor.ml[1707,50687+41])
                                            Ttyp_constr "Terminal/1588.t"
                                            []
                                        Tpat_alias "tok/3563"
                                        pattern (src/grammarFunctor.ml[1707,50687+25]..src/grammarFunctor.ml[1707,50687+28])
                                          Tpat_any
                                      expression (src/grammarFunctor.ml[1707,50687+43]..src/grammarFunctor.ml[1708,50765+31]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1707,50687+44]..src/grammarFunctor.ml[1707,50687+47])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (src/grammarFunctor.ml[1707,50687+50]..src/grammarFunctor.ml[1707,50687+64])
                                                  Ttyp_constr "array/8!"
                                                  [
                                                    core_type (src/grammarFunctor.ml[1707,50687+50]..src/grammarFunctor.ml[1707,50687+58])
                                                      Ttyp_constr "Symbol/1729.t"
                                                      []
                                                  ]
                                              Tpat_alias "rhs/3564"
                                              pattern (src/grammarFunctor.ml[1707,50687+44]..src/grammarFunctor.ml[1707,50687+47])
                                                Tpat_any
                                            expression (src/grammarFunctor.ml[1707,50687+66]..src/grammarFunctor.ml[1708,50765+31]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1707,50687+67]..src/grammarFunctor.ml[1707,50687+68])
                                                    extra
                                                      Tpat_extra_constraint
                                                      core_type (src/grammarFunctor.ml[1707,50687+71]..src/grammarFunctor.ml[1707,50687+74])
                                                        Ttyp_constr "int/1!"
                                                        []
                                                    Tpat_alias "i/3565"
                                                    pattern (src/grammarFunctor.ml[1707,50687+67]..src/grammarFunctor.ml[1707,50687+68])
                                                      Tpat_any
                                                  expression (src/grammarFunctor.ml[1708,50765+4]..src/grammarFunctor.ml[1708,50765+31])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1708,50765+4]..src/grammarFunctor.ml[1708,50765+11])
                                                      Texp_ident "convert/3536"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1708,50765+12]..src/grammarFunctor.ml[1708,50765+31])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1708,50765+13]..src/grammarFunctor.ml[1708,50765+20])
                                                            Texp_ident "explain/3522"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1708,50765+21]..src/grammarFunctor.ml[1708,50765+24])
                                                                Texp_ident "tok/3563"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1708,50765+25]..src/grammarFunctor.ml[1708,50765+28])
                                                                Texp_ident "rhs/3564"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1708,50765+29]..src/grammarFunctor.ml[1708,50765+30])
                                                                Texp_ident "i/3565"
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1710,50798+2]..src/grammarFunctor.ml[1710,50798+21])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1710,50798+6]..src/grammarFunctor.ml[1710,50798+12])
                                  Tpat_var "follow/3566"
                                expression (src/grammarFunctor.ml[1710,50798+15]..src/grammarFunctor.ml[1710,50798+21])
                                  Texp_ident "follow/3364"
                            ]
                          structure_item (src/grammarFunctor.ml[1712,50821+2]..src/grammarFunctor.ml[1713,50840+25])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1712,50821+6]..src/grammarFunctor.ml[1712,50821+16])
                                  Tpat_var "attributes/3567"
                                expression (src/grammarFunctor.ml[1713,50840+4]..src/grammarFunctor.ml[1713,50840+25])
                                  Texp_field
                                  expression (src/grammarFunctor.ml[1713,50840+4]..src/grammarFunctor.ml[1713,50840+11])
                                    Texp_ident "G/488.grammar"
                                  "gr_attributes"
                            ]
                          structure_item (src/grammarFunctor.ml[1715,50867+2]..src/grammarFunctor.ml[1716,50886+55])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1715,50867+6]..src/grammarFunctor.ml[1715,50867+13])
                                  Tpat_var "minimal/3568"
                                expression (src/grammarFunctor.ml[1715,50867+14]..src/grammarFunctor.ml[1716,50886+55]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1715,50867+14]..src/grammarFunctor.ml[1715,50867+16])
                                        Tpat_var "nt/3570"
                                      expression (src/grammarFunctor.ml[1716,50886+4]..src/grammarFunctor.ml[1716,50886+55])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1716,50886+4]..src/grammarFunctor.ml[1716,50886+30])
                                          Texp_ident "Dune__exe!.CompletedNatWitness.to_int"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1716,50886+31]..src/grammarFunctor.ml[1716,50886+55])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1716,50886+32]..src/grammarFunctor.ml[1716,50886+51])
                                                Texp_ident "MINIMAL/3174.nonterminal"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1716,50886+52]..src/grammarFunctor.ml[1716,50886+54])
                                                    Texp_ident "nt/3570"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1718,50943+2]..src/grammarFunctor.ml[1720,51023+58])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1718,50943+6]..src/grammarFunctor.ml[1718,50943+18])
                                  Tpat_var "minimal_prod/3571"
                                expression (src/grammarFunctor.ml[1718,50943+19]..src/grammarFunctor.ml[1720,51023+58]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1718,50943+19]..src/grammarFunctor.ml[1718,50943+23])
                                        Tpat_var "prod/3573"
                                      expression (src/grammarFunctor.ml[1718,50943+24]..src/grammarFunctor.ml[1720,51023+58]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1718,50943+24]..src/grammarFunctor.ml[1718,50943+25])
                                              Tpat_var "i/3574"
                                            expression (src/grammarFunctor.ml[1719,50971+4]..src/grammarFunctor.ml[1720,51023+58])
                                              Texp_sequence
                                              expression (src/grammarFunctor.ml[1719,50971+4]..src/grammarFunctor.ml[1719,50971+50])
                                                Texp_assert                                                expression (src/grammarFunctor.ml[1719,50971+11]..src/grammarFunctor.ml[1719,50971+50])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1719,50971+19]..src/grammarFunctor.ml[1719,50971+21])
                                                    Texp_ident "Stdlib!.&&"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1719,50971+12]..src/grammarFunctor.ml[1719,50971+18])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1719,50971+14]..src/grammarFunctor.ml[1719,50971+16])
                                                          Texp_ident "Stdlib!.<="
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1719,50971+12]..src/grammarFunctor.ml[1719,50971+13])
                                                              Texp_constant Const_int 0
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1719,50971+17]..src/grammarFunctor.ml[1719,50971+18])
                                                              Texp_ident "i/3574"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1719,50971+22]..src/grammarFunctor.ml[1719,50971+49])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1719,50971+24]..src/grammarFunctor.ml[1719,50971+26])
                                                          Texp_ident "Stdlib!.<="
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1719,50971+22]..src/grammarFunctor.ml[1719,50971+23])
                                                              Texp_ident "i/3574"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1719,50971+27]..src/grammarFunctor.ml[1719,50971+49])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1719,50971+27]..src/grammarFunctor.ml[1719,50971+44])
                                                                Texp_ident "Production/2648.length"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1719,50971+45]..src/grammarFunctor.ml[1719,50971+49])
                                                                    Texp_ident "prod/3573"
                                                              ]
                                                        ]
                                                  ]
                                              expression (src/grammarFunctor.ml[1720,51023+4]..src/grammarFunctor.ml[1720,51023+58])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1720,51023+4]..src/grammarFunctor.ml[1720,51023+30])
                                                  Texp_ident "Dune__exe!.CompletedNatWitness.to_int"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1720,51023+31]..src/grammarFunctor.ml[1720,51023+58])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1720,51023+32]..src/grammarFunctor.ml[1720,51023+50])
                                                        Texp_ident "MINIMAL/3174.production"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1720,51023+51]..src/grammarFunctor.ml[1720,51023+55])
                                                            Texp_ident "prod/3573"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1720,51023+56]..src/grammarFunctor.ml[1720,51023+57])
                                                            Texp_ident "i/3574"
                                                      ]
                                                ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1722,51083+2]..src/grammarFunctor.ml[1723,51102+50])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1722,51083+6]..src/grammarFunctor.ml[1722,51083+13])
                                  Tpat_var "maximal/3575"
                                expression (src/grammarFunctor.ml[1722,51083+14]..src/grammarFunctor.ml[1723,51102+50]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1722,51083+14]..src/grammarFunctor.ml[1722,51083+16])
                                        Tpat_var "nt/3577"
                                      expression (src/grammarFunctor.ml[1723,51102+4]..src/grammarFunctor.ml[1723,51102+50])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1723,51102+4]..src/grammarFunctor.ml[1723,51102+25])
                                          Texp_ident "Dune__exe!.NatInfinityMax.to_int"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1723,51102+26]..src/grammarFunctor.ml[1723,51102+50])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1723,51102+27]..src/grammarFunctor.ml[1723,51102+46])
                                                Texp_ident "MAXIMAL/3276.nonterminal"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1723,51102+47]..src/grammarFunctor.ml[1723,51102+49])
                                                    Texp_ident "nt/3577"
                                              ]
                                        ]
                                  ]
                            ]
                          structure_item (src/grammarFunctor.ml[1725,51154+2]..src/grammarFunctor.ml[1727,51234+53])
                            Tstr_value Nonrec
                            [
                              <def>
                                pattern (src/grammarFunctor.ml[1725,51154+6]..src/grammarFunctor.ml[1725,51154+18])
                                  Tpat_var "maximal_prod/3578"
                                expression (src/grammarFunctor.ml[1725,51154+19]..src/grammarFunctor.ml[1727,51234+53]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/grammarFunctor.ml[1725,51154+19]..src/grammarFunctor.ml[1725,51154+23])
                                        Tpat_var "prod/3580"
                                      expression (src/grammarFunctor.ml[1725,51154+24]..src/grammarFunctor.ml[1727,51234+53]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/grammarFunctor.ml[1725,51154+24]..src/grammarFunctor.ml[1725,51154+25])
                                              Tpat_var "i/3581"
                                            expression (src/grammarFunctor.ml[1726,51182+4]..src/grammarFunctor.ml[1727,51234+53])
                                              Texp_sequence
                                              expression (src/grammarFunctor.ml[1726,51182+4]..src/grammarFunctor.ml[1726,51182+50])
                                                Texp_assert                                                expression (src/grammarFunctor.ml[1726,51182+11]..src/grammarFunctor.ml[1726,51182+50])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1726,51182+19]..src/grammarFunctor.ml[1726,51182+21])
                                                    Texp_ident "Stdlib!.&&"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1726,51182+12]..src/grammarFunctor.ml[1726,51182+18])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1726,51182+14]..src/grammarFunctor.ml[1726,51182+16])
                                                          Texp_ident "Stdlib!.<="
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1726,51182+12]..src/grammarFunctor.ml[1726,51182+13])
                                                              Texp_constant Const_int 0
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1726,51182+17]..src/grammarFunctor.ml[1726,51182+18])
                                                              Texp_ident "i/3581"
                                                        ]
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1726,51182+22]..src/grammarFunctor.ml[1726,51182+49])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1726,51182+24]..src/grammarFunctor.ml[1726,51182+26])
                                                          Texp_ident "Stdlib!.<="
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1726,51182+22]..src/grammarFunctor.ml[1726,51182+23])
                                                              Texp_ident "i/3581"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1726,51182+27]..src/grammarFunctor.ml[1726,51182+49])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1726,51182+27]..src/grammarFunctor.ml[1726,51182+44])
                                                                Texp_ident "Production/2648.length"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1726,51182+45]..src/grammarFunctor.ml[1726,51182+49])
                                                                    Texp_ident "prod/3580"
                                                              ]
                                                        ]
                                                  ]
                                              expression (src/grammarFunctor.ml[1727,51234+4]..src/grammarFunctor.ml[1727,51234+53])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1727,51234+4]..src/grammarFunctor.ml[1727,51234+25])
                                                  Texp_ident "Dune__exe!.NatInfinityMax.to_int"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1727,51234+26]..src/grammarFunctor.ml[1727,51234+53])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1727,51234+27]..src/grammarFunctor.ml[1727,51234+45])
                                                        Texp_ident "MAXIMAL/3276.production"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1727,51234+46]..src/grammarFunctor.ml[1727,51234+50])
                                                            Texp_ident "prod/3580"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1727,51234+51]..src/grammarFunctor.ml[1727,51234+52])
                                                            Texp_ident "i/3581"
                                                      ]
                                                ]
                                        ]
                                  ]
                            ]
                        ]
                structure_item (src/grammarFunctor.ml[1734,51417+0]..src/grammarFunctor.ml[1830,54038+3])
                  Tstr_module
                  Precedence/3624
                    module_expr (src/grammarFunctor.ml[1734,51417+20]..src/grammarFunctor.ml[1830,54038+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1736,51445+2]..src/grammarFunctor.ml[1740,51518+14])
                          Tstr_type Rec
                          [
                            type_declaration choice/3583 (src/grammarFunctor.ml[1736,51445+2]..src/grammarFunctor.ml[1740,51518+14])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_variant
                                  [
                                    (src/grammarFunctor.ml[1737,51461+4]..src/grammarFunctor.ml[1737,51461+17])
                                      ChooseShift/3584
                                      []
                                      None
                                    (src/grammarFunctor.ml[1738,51479+4]..src/grammarFunctor.ml[1738,51479+18])
                                      ChooseReduce/3585
                                      []
                                      None
                                    (src/grammarFunctor.ml[1739,51498+4]..src/grammarFunctor.ml[1739,51498+19])
                                      ChooseNeither/3586
                                      []
                                      None
                                    (src/grammarFunctor.ml[1740,51518+4]..src/grammarFunctor.ml[1740,51518+14])
                                      DontKnow/3587
                                      []
                                      None
                                  ]
                              ptype_private = Public
                              ptype_manifest =
                                None
                          ]
                        structure_item (src/grammarFunctor.ml[1742,51534+2]..src/grammarFunctor.ml[1742,51534+32])
                          Tstr_type Rec
                          [
                            type_declaration order/3588 (src/grammarFunctor.ml[1742,51534+2]..src/grammarFunctor.ml[1742,51534+32])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_variant
                                  [
                                    (src/grammarFunctor.ml[1742,51534+15]..src/grammarFunctor.ml[1742,51534+17])
                                      Lt/3589
                                      []
                                      None
                                    (src/grammarFunctor.ml[1742,51534+18]..src/grammarFunctor.ml[1742,51534+22])
                                      Gt/3590
                                      []
                                      None
                                    (src/grammarFunctor.ml[1742,51534+23]..src/grammarFunctor.ml[1742,51534+27])
                                      Eq/3591
                                      []
                                      None
                                    (src/grammarFunctor.ml[1742,51534+28]..src/grammarFunctor.ml[1742,51534+32])
                                      Ic/3592
                                      []
                                      None
                                  ]
                              ptype_private = Public
                              ptype_manifest =
                                None
                          ]
                        structure_item (src/grammarFunctor.ml[1744,51568+2]..src/grammarFunctor.ml[1758,51971+16])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1744,51568+6]..src/grammarFunctor.ml[1744,51568+22])
                                Tpat_var "precedence_order/3593"
                              expression (src/grammarFunctor.ml[1744,51568+23]..src/grammarFunctor.ml[1758,51971+16]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1744,51568+23]..src/grammarFunctor.ml[1744,51568+25])
                                      Tpat_var "p1/3595"
                                    expression (src/grammarFunctor.ml[1744,51568+26]..src/grammarFunctor.ml[1758,51971+16]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1744,51568+26]..src/grammarFunctor.ml[1744,51568+28])
                                            Tpat_var "p2/3596"
                                          expression (src/grammarFunctor.ml[1745,51599+4]..src/grammarFunctor.ml[1758,51971+16])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[1745,51599+10]..src/grammarFunctor.ml[1745,51599+16])
                                              Texp_tuple
                                              [
                                                expression (src/grammarFunctor.ml[1745,51599+10]..src/grammarFunctor.ml[1745,51599+12])
                                                  Texp_ident "p1/3595"
                                                expression (src/grammarFunctor.ml[1745,51599+14]..src/grammarFunctor.ml[1745,51599+16])
                                                  Texp_ident "p2/3596"
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1746,51621+8]..src/grammarFunctor.ml[1747,51652+30])
                                                  Tpat_or
                                                  pattern (src/grammarFunctor.ml[1746,51621+8]..src/grammarFunctor.ml[1746,51621+30])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1746,51621+8]..src/grammarFunctor.ml[1746,51621+30])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[1746,51621+8]..src/grammarFunctor.ml[1746,51621+27])
                                                          Tpat_construct "UndefinedPrecedence"
                                                          []
                                                          None
                                                        pattern (src/grammarFunctor.ml[1746,51621+29]..src/grammarFunctor.ml[1746,51621+30])
                                                          Tpat_any
                                                      ]
                                                  pattern (src/grammarFunctor.ml[1747,51652+8]..src/grammarFunctor.ml[1747,51652+30])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1747,51652+8]..src/grammarFunctor.ml[1747,51652+30])
                                                      Tpat_tuple
                                                      [
                                                        pattern (src/grammarFunctor.ml[1747,51652+8]..src/grammarFunctor.ml[1747,51652+9])
                                                          Tpat_any
                                                        pattern (src/grammarFunctor.ml[1747,51652+11]..src/grammarFunctor.ml[1747,51652+30])
                                                          Tpat_construct "UndefinedPrecedence"
                                                          []
                                                          None
                                                      ]
                                                expression (src/grammarFunctor.ml[1748,51686+10]..src/grammarFunctor.ml[1748,51686+12])
                                                  Texp_construct "Ic"
                                                  []
                                              <case>
                                                pattern (src/grammarFunctor.ml[1749,51699+8]..src/grammarFunctor.ml[1749,51699+70])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[1749,51699+8]..src/grammarFunctor.ml[1749,51699+70])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[1749,51699+8]..src/grammarFunctor.ml[1749,51699+38])
                                                        Tpat_construct "PrecedenceLevel"
                                                        [
                                                          pattern (src/grammarFunctor.ml[1749,51699+25]..src/grammarFunctor.ml[1749,51699+27])
                                                            Tpat_var "m1/3597"
                                                          pattern (src/grammarFunctor.ml[1749,51699+29]..src/grammarFunctor.ml[1749,51699+31])
                                                            Tpat_var "l1/3598"
                                                          pattern (src/grammarFunctor.ml[1749,51699+33]..src/grammarFunctor.ml[1749,51699+34])
                                                            Tpat_any
                                                          pattern (src/grammarFunctor.ml[1749,51699+36]..src/grammarFunctor.ml[1749,51699+37])
                                                            Tpat_any
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[1749,51699+40]..src/grammarFunctor.ml[1749,51699+70])
                                                        Tpat_construct "PrecedenceLevel"
                                                        [
                                                          pattern (src/grammarFunctor.ml[1749,51699+57]..src/grammarFunctor.ml[1749,51699+59])
                                                            Tpat_var "m2/3599"
                                                          pattern (src/grammarFunctor.ml[1749,51699+61]..src/grammarFunctor.ml[1749,51699+63])
                                                            Tpat_var "l2/3600"
                                                          pattern (src/grammarFunctor.ml[1749,51699+65]..src/grammarFunctor.ml[1749,51699+66])
                                                            Tpat_any
                                                          pattern (src/grammarFunctor.ml[1749,51699+68]..src/grammarFunctor.ml[1749,51699+69])
                                                            Tpat_any
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[1750,51773+10]..src/grammarFunctor.ml[1758,51971+16])
                                                  Texp_ifthenelse
                                                  expression (src/grammarFunctor.ml[1750,51773+13]..src/grammarFunctor.ml[1750,51773+50])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1750,51773+13]..src/grammarFunctor.ml[1750,51773+16])
                                                      Texp_ident "Stdlib!.not"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1750,51773+17]..src/grammarFunctor.ml[1750,51773+50])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1750,51773+18]..src/grammarFunctor.ml[1750,51773+43])
                                                            Texp_ident "Dune__exe!.InputFile.same_input_file"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1750,51773+44]..src/grammarFunctor.ml[1750,51773+46])
                                                                Texp_ident "m1/3597"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1750,51773+47]..src/grammarFunctor.ml[1750,51773+49])
                                                                Texp_ident "m2/3599"
                                                          ]
                                                    ]
                                                  expression (src/grammarFunctor.ml[1751,51829+12]..src/grammarFunctor.ml[1751,51829+14])
                                                    Texp_construct "Ic"
                                                    []
                                                  Some
                                                    expression (src/grammarFunctor.ml[1753,51859+12]..src/grammarFunctor.ml[1758,51971+16])
                                                      Texp_ifthenelse
                                                      expression (src/grammarFunctor.ml[1753,51859+15]..src/grammarFunctor.ml[1753,51859+22])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1753,51859+18]..src/grammarFunctor.ml[1753,51859+19])
                                                          Texp_ident "Stdlib!.>"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1753,51859+15]..src/grammarFunctor.ml[1753,51859+17])
                                                              Texp_ident "l1/3598"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1753,51859+20]..src/grammarFunctor.ml[1753,51859+22])
                                                              Texp_ident "l2/3600"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1754,51887+14]..src/grammarFunctor.ml[1754,51887+16])
                                                        Texp_construct "Gt"
                                                        []
                                                      Some
                                                        expression (src/grammarFunctor.ml[1755,51904+17]..src/grammarFunctor.ml[1758,51971+16])
                                                          Texp_ifthenelse
                                                          expression (src/grammarFunctor.ml[1755,51904+20]..src/grammarFunctor.ml[1755,51904+27])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[1755,51904+23]..src/grammarFunctor.ml[1755,51904+24])
                                                              Texp_ident "Stdlib!.<"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1755,51904+20]..src/grammarFunctor.ml[1755,51904+22])
                                                                  Texp_ident "l1/3598"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1755,51904+25]..src/grammarFunctor.ml[1755,51904+27])
                                                                  Texp_ident "l2/3600"
                                                            ]
                                                          expression (src/grammarFunctor.ml[1756,51937+14]..src/grammarFunctor.ml[1756,51937+16])
                                                            Texp_construct "Lt"
                                                            []
                                                          Some
                                                            expression (src/grammarFunctor.ml[1758,51971+14]..src/grammarFunctor.ml[1758,51971+16])
                                                              Texp_construct "Eq"
                                                              []
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1760,51989+2]..src/grammarFunctor.ml[1771,52302+16])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1760,51989+6]..src/grammarFunctor.ml[1760,51989+22])
                                Tpat_var "production_order/3601"
                              expression (src/grammarFunctor.ml[1760,51989+23]..src/grammarFunctor.ml[1771,52302+16]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1760,51989+23]..src/grammarFunctor.ml[1760,51989+25])
                                      Tpat_var "p1/3603"
                                    expression (src/grammarFunctor.ml[1760,51989+26]..src/grammarFunctor.ml[1771,52302+16]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1760,51989+26]..src/grammarFunctor.ml[1760,51989+28])
                                            Tpat_var "p2/3604"
                                          expression (src/grammarFunctor.ml[1761,52020+4]..src/grammarFunctor.ml[1771,52302+16])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[1761,52020+10]..src/grammarFunctor.ml[1761,52020+16])
                                              Texp_tuple
                                              [
                                                expression (src/grammarFunctor.ml[1761,52020+10]..src/grammarFunctor.ml[1761,52020+12])
                                                  Texp_ident "p1/3603"
                                                expression (src/grammarFunctor.ml[1761,52020+14]..src/grammarFunctor.ml[1761,52020+16])
                                                  Texp_ident "p2/3604"
                                              ]
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1762,52042+8]..src/grammarFunctor.ml[1762,52042+58])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[1762,52042+8]..src/grammarFunctor.ml[1762,52042+58])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/grammarFunctor.ml[1762,52042+8]..src/grammarFunctor.ml[1762,52042+32])
                                                        Tpat_construct "ProductionLevel"
                                                        [
                                                          pattern (src/grammarFunctor.ml[1762,52042+25]..src/grammarFunctor.ml[1762,52042+27])
                                                            Tpat_var "m1/3605"
                                                          pattern (src/grammarFunctor.ml[1762,52042+29]..src/grammarFunctor.ml[1762,52042+31])
                                                            Tpat_var "l1/3606"
                                                        ]
                                                        None
                                                      pattern (src/grammarFunctor.ml[1762,52042+34]..src/grammarFunctor.ml[1762,52042+58])
                                                        Tpat_construct "ProductionLevel"
                                                        [
                                                          pattern (src/grammarFunctor.ml[1762,52042+51]..src/grammarFunctor.ml[1762,52042+53])
                                                            Tpat_var "m2/3607"
                                                          pattern (src/grammarFunctor.ml[1762,52042+55]..src/grammarFunctor.ml[1762,52042+57])
                                                            Tpat_var "l2/3608"
                                                        ]
                                                        None
                                                    ]
                                                expression (src/grammarFunctor.ml[1763,52104+10]..src/grammarFunctor.ml[1771,52302+16])
                                                  Texp_ifthenelse
                                                  expression (src/grammarFunctor.ml[1763,52104+13]..src/grammarFunctor.ml[1763,52104+50])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1763,52104+13]..src/grammarFunctor.ml[1763,52104+16])
                                                      Texp_ident "Stdlib!.not"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1763,52104+17]..src/grammarFunctor.ml[1763,52104+50])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1763,52104+18]..src/grammarFunctor.ml[1763,52104+43])
                                                            Texp_ident "Dune__exe!.InputFile.same_input_file"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1763,52104+44]..src/grammarFunctor.ml[1763,52104+46])
                                                                Texp_ident "m1/3605"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1763,52104+47]..src/grammarFunctor.ml[1763,52104+49])
                                                                Texp_ident "m2/3607"
                                                          ]
                                                    ]
                                                  expression (src/grammarFunctor.ml[1764,52160+12]..src/grammarFunctor.ml[1764,52160+14])
                                                    Texp_construct "Ic"
                                                    []
                                                  Some
                                                    expression (src/grammarFunctor.ml[1766,52190+12]..src/grammarFunctor.ml[1771,52302+16])
                                                      Texp_ifthenelse
                                                      expression (src/grammarFunctor.ml[1766,52190+15]..src/grammarFunctor.ml[1766,52190+22])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1766,52190+18]..src/grammarFunctor.ml[1766,52190+19])
                                                          Texp_ident "Stdlib!.>"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1766,52190+15]..src/grammarFunctor.ml[1766,52190+17])
                                                              Texp_ident "l1/3606"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1766,52190+20]..src/grammarFunctor.ml[1766,52190+22])
                                                              Texp_ident "l2/3608"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1767,52218+14]..src/grammarFunctor.ml[1767,52218+16])
                                                        Texp_construct "Gt"
                                                        []
                                                      Some
                                                        expression (src/grammarFunctor.ml[1768,52235+17]..src/grammarFunctor.ml[1771,52302+16])
                                                          Texp_ifthenelse
                                                          expression (src/grammarFunctor.ml[1768,52235+20]..src/grammarFunctor.ml[1768,52235+27])
                                                            Texp_apply
                                                            expression (src/grammarFunctor.ml[1768,52235+23]..src/grammarFunctor.ml[1768,52235+24])
                                                              Texp_ident "Stdlib!.<"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1768,52235+20]..src/grammarFunctor.ml[1768,52235+22])
                                                                  Texp_ident "l1/3606"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/grammarFunctor.ml[1768,52235+25]..src/grammarFunctor.ml[1768,52235+27])
                                                                  Texp_ident "l2/3608"
                                                            ]
                                                          expression (src/grammarFunctor.ml[1769,52268+14]..src/grammarFunctor.ml[1769,52268+16])
                                                            Texp_construct "Lt"
                                                            []
                                                          Some
                                                            expression (src/grammarFunctor.ml[1771,52302+14]..src/grammarFunctor.ml[1771,52302+16])
                                                              Texp_construct "Eq"
                                                              []
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1773,52320+2]..src/grammarFunctor.ml[1810,53429+23])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1773,52320+6]..src/grammarFunctor.ml[1773,52320+18])
                                Tpat_var "shift_reduce/3609"
                              expression (src/grammarFunctor.ml[1773,52320+19]..src/grammarFunctor.ml[1810,53429+23]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1773,52320+19]..src/grammarFunctor.ml[1773,52320+22])
                                      Tpat_var "tok/3611"
                                    expression (src/grammarFunctor.ml[1773,52320+23]..src/grammarFunctor.ml[1810,53429+23]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1773,52320+23]..src/grammarFunctor.ml[1773,52320+27])
                                            Tpat_var "prod/3612"
                                          expression (src/grammarFunctor.ml[1774,52350+4]..src/grammarFunctor.ml[1810,53429+23])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1774,52350+8]..src/grammarFunctor.ml[1774,52350+19])
                                                  Tpat_tuple
                                                  [
                                                    pattern (src/grammarFunctor.ml[1774,52350+8]..src/grammarFunctor.ml[1774,52350+13])
                                                      Tpat_var "fact1/3613"
                                                    pattern (src/grammarFunctor.ml[1774,52350+15]..src/grammarFunctor.ml[1774,52350+19])
                                                      Tpat_var "tokp/3614"
                                                  ]
                                                expression (src/grammarFunctor.ml[1774,52350+23]..src/grammarFunctor.ml[1774,52350+52])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1774,52350+23]..src/grammarFunctor.ml[1774,52350+48])
                                                    Texp_ident "Terminal/1588.precedence_level"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1774,52350+49]..src/grammarFunctor.ml[1774,52350+52])
                                                        Texp_ident "tok/3611"
                                                  ]
                                              <def>
                                                pattern (src/grammarFunctor.ml[1775,52403+8]..src/grammarFunctor.ml[1775,52403+20])
                                                  Tpat_tuple
                                                  [
                                                    pattern (src/grammarFunctor.ml[1775,52403+8]..src/grammarFunctor.ml[1775,52403+13])
                                                      Tpat_var "fact2/3615"
                                                    pattern (src/grammarFunctor.ml[1775,52403+15]..src/grammarFunctor.ml[1775,52403+20])
                                                      Tpat_var "prodp/3616"
                                                  ]
                                                expression (src/grammarFunctor.ml[1775,52403+23]..src/grammarFunctor.ml[1775,52403+49])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1775,52403+23]..src/grammarFunctor.ml[1775,52403+44])
                                                    Texp_ident "Production/2648.precedence"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1775,52403+45]..src/grammarFunctor.ml[1775,52403+49])
                                                        Texp_ident "prod/3612"
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1776,52456+4]..src/grammarFunctor.ml[1810,53429+23])
                                              Texp_match
                                              expression (src/grammarFunctor.ml[1776,52456+10]..src/grammarFunctor.ml[1776,52456+37])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1776,52456+10]..src/grammarFunctor.ml[1776,52456+26])
                                                  Texp_ident "precedence_order/3593"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1776,52456+27]..src/grammarFunctor.ml[1776,52456+31])
                                                      Texp_ident "tokp/3614"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1776,52456+32]..src/grammarFunctor.ml[1776,52456+37])
                                                      Texp_ident "prodp/3616"
                                                ]
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1781,52638+6]..src/grammarFunctor.ml[1781,52638+8])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1781,52638+6]..src/grammarFunctor.ml[1781,52638+8])
                                                      Tpat_construct "Ic"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[1782,52650+8]..src/grammarFunctor.ml[1782,52650+16])
                                                    Texp_construct "DontKnow"
                                                    []
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1787,52769+6]..src/grammarFunctor.ml[1787,52769+25])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1787,52769+6]..src/grammarFunctor.ml[1787,52769+25])
                                                      Tpat_alias "c/3617"
                                                      pattern (src/grammarFunctor.ml[1787,52769+6]..src/grammarFunctor.ml[1787,52769+20])
                                                        Tpat_or
                                                        pattern (src/grammarFunctor.ml[1787,52769+7]..src/grammarFunctor.ml[1787,52769+14])
                                                          Tpat_or
                                                          pattern (src/grammarFunctor.ml[1787,52769+7]..src/grammarFunctor.ml[1787,52769+9])
                                                            Tpat_construct "Eq"
                                                            []
                                                            None
                                                          pattern (src/grammarFunctor.ml[1787,52769+12]..src/grammarFunctor.ml[1787,52769+14])
                                                            Tpat_construct "Lt"
                                                            []
                                                            None
                                                        pattern (src/grammarFunctor.ml[1787,52769+17]..src/grammarFunctor.ml[1787,52769+19])
                                                          Tpat_construct "Gt"
                                                          []
                                                          None
                                                  expression (src/grammarFunctor.ml[1788,52798+8]..src/grammarFunctor.ml[1810,53429+23])
                                                    Texp_sequence
                                                    expression (src/grammarFunctor.ml[1788,52798+8]..src/grammarFunctor.ml[1788,52798+24])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1788,52798+8]..src/grammarFunctor.ml[1788,52798+18])
                                                        Texp_ident "Stdlib!.Lazy.force"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1788,52798+19]..src/grammarFunctor.ml[1788,52798+24])
                                                            Texp_ident "fact1/3613"
                                                      ]
                                                    expression (src/grammarFunctor.ml[1789,52824+8]..src/grammarFunctor.ml[1810,53429+23])
                                                      Texp_sequence
                                                      expression (src/grammarFunctor.ml[1789,52824+8]..src/grammarFunctor.ml[1789,52824+24])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1789,52824+8]..src/grammarFunctor.ml[1789,52824+18])
                                                          Texp_ident "Stdlib!.Lazy.force"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1789,52824+19]..src/grammarFunctor.ml[1789,52824+24])
                                                              Texp_ident "fact2/3615"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1790,52850+8]..src/grammarFunctor.ml[1810,53429+23])
                                                        Texp_match
                                                        expression (src/grammarFunctor.ml[1790,52850+14]..src/grammarFunctor.ml[1790,52850+15])
                                                          Texp_ident "c/3617"
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1792,52872+10]..src/grammarFunctor.ml[1792,52872+12])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1792,52872+10]..src/grammarFunctor.ml[1792,52872+12])
                                                                Tpat_construct "Ic"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1793,52888+12]..src/grammarFunctor.ml[1793,52888+24])
                                                              Texp_assert                                                              expression (src/grammarFunctor.ml[1793,52888+19]..src/grammarFunctor.ml[1793,52888+24])
                                                                Texp_construct "false"
                                                                []
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1795,52939+10]..src/grammarFunctor.ml[1795,52939+12])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1795,52939+10]..src/grammarFunctor.ml[1795,52939+12])
                                                                Tpat_construct "Eq"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1796,52955+12]..src/grammarFunctor.ml[1804,53354+15])
                                                              Texp_match
                                                              expression (src/grammarFunctor.ml[1797,52973+20]..src/grammarFunctor.ml[1797,52973+46])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1797,52973+20]..src/grammarFunctor.ml[1797,52973+42])
                                                                  Texp_ident "Terminal/1588.associativity"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1797,52973+43]..src/grammarFunctor.ml[1797,52973+46])
                                                                      Texp_ident "tok/3611"
                                                                ]
                                                              [
                                                                <case>
                                                                  pattern (src/grammarFunctor.ml[1798,53025+16]..src/grammarFunctor.ml[1798,53025+25])
                                                                    Tpat_value
                                                                    pattern (src/grammarFunctor.ml[1798,53025+16]..src/grammarFunctor.ml[1798,53025+25])
                                                                      Tpat_construct "LeftAssoc"
                                                                      []
                                                                      None
                                                                  expression (src/grammarFunctor.ml[1798,53025+30]..src/grammarFunctor.ml[1798,53025+42])
                                                                    Texp_construct "ChooseReduce"
                                                                    []
                                                                <case>
                                                                  pattern (src/grammarFunctor.ml[1799,53068+16]..src/grammarFunctor.ml[1799,53068+26])
                                                                    Tpat_value
                                                                    pattern (src/grammarFunctor.ml[1799,53068+16]..src/grammarFunctor.ml[1799,53068+26])
                                                                      Tpat_construct "RightAssoc"
                                                                      []
                                                                      None
                                                                  expression (src/grammarFunctor.ml[1799,53068+30]..src/grammarFunctor.ml[1799,53068+41])
                                                                    Texp_construct "ChooseShift"
                                                                    []
                                                                <case>
                                                                  pattern (src/grammarFunctor.ml[1800,53110+16]..src/grammarFunctor.ml[1800,53110+24])
                                                                    Tpat_value
                                                                    pattern (src/grammarFunctor.ml[1800,53110+16]..src/grammarFunctor.ml[1800,53110+24])
                                                                      Tpat_construct "NonAssoc"
                                                                      []
                                                                      None
                                                                  expression (src/grammarFunctor.ml[1800,53110+30]..src/grammarFunctor.ml[1800,53110+43])
                                                                    Texp_construct "ChooseNeither"
                                                                    []
                                                                <case>
                                                                  pattern (src/grammarFunctor.ml[1801,53154+16]..src/grammarFunctor.ml[1801,53154+17])
                                                                    Tpat_value
                                                                    pattern (src/grammarFunctor.ml[1801,53154+16]..src/grammarFunctor.ml[1801,53154+17])
                                                                      Tpat_any
                                                                  expression (src/grammarFunctor.ml[1801,53154+30]..src/grammarFunctor.ml[1801,53154+42])
                                                                    Texp_assert                                                                    expression (src/grammarFunctor.ml[1801,53154+37]..src/grammarFunctor.ml[1801,53154+42])
                                                                      Texp_construct "false"
                                                                      []
                                                              ]
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1806,53371+10]..src/grammarFunctor.ml[1806,53371+12])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1806,53371+10]..src/grammarFunctor.ml[1806,53371+12])
                                                                Tpat_construct "Lt"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1807,53387+12]..src/grammarFunctor.ml[1807,53387+24])
                                                              Texp_construct "ChooseReduce"
                                                              []
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1809,53413+10]..src/grammarFunctor.ml[1809,53413+12])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1809,53413+10]..src/grammarFunctor.ml[1809,53413+12])
                                                                Tpat_construct "Gt"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1810,53429+12]..src/grammarFunctor.ml[1810,53429+23])
                                                              Texp_construct "ChooseShift"
                                                              []
                                                        ]
                                              ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1813,53455+2]..src/grammarFunctor.ml[1828,54024+12])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1813,53455+6]..src/grammarFunctor.ml[1813,53455+19])
                                Tpat_var "reduce_reduce/3618"
                              expression (src/grammarFunctor.ml[1813,53455+20]..src/grammarFunctor.ml[1828,54024+12]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1813,53455+20]..src/grammarFunctor.ml[1813,53455+25])
                                      Tpat_var "prod1/3620"
                                    expression (src/grammarFunctor.ml[1813,53455+26]..src/grammarFunctor.ml[1828,54024+12]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1813,53455+26]..src/grammarFunctor.ml[1813,53455+31])
                                            Tpat_var "prod2/3621"
                                          expression (src/grammarFunctor.ml[1814,53489+4]..src/grammarFunctor.ml[1828,54024+12])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (src/grammarFunctor.ml[1814,53489+8]..src/grammarFunctor.ml[1814,53489+11])
                                                  Tpat_var "pl1/3622"
                                                expression (src/grammarFunctor.ml[1814,53489+14]..src/grammarFunctor.ml[1814,53489+49])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1814,53489+14]..src/grammarFunctor.ml[1814,53489+49]) ghost
                                                    Texp_ident "Stdlib!.Array.get"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1814,53489+14]..src/grammarFunctor.ml[1814,53489+41])
                                                        Texp_ident "Production/2648.production_level"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1814,53489+43]..src/grammarFunctor.ml[1814,53489+48])
                                                        Texp_ident "prod1/3620"
                                                  ]
                                              <def>
                                                pattern (src/grammarFunctor.ml[1815,53539+8]..src/grammarFunctor.ml[1815,53539+11])
                                                  Tpat_var "pl2/3623"
                                                expression (src/grammarFunctor.ml[1815,53539+14]..src/grammarFunctor.ml[1815,53539+49])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1815,53539+14]..src/grammarFunctor.ml[1815,53539+49]) ghost
                                                    Texp_ident "Stdlib!.Array.get"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1815,53539+14]..src/grammarFunctor.ml[1815,53539+41])
                                                        Texp_ident "Production/2648.production_level"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1815,53539+43]..src/grammarFunctor.ml[1815,53539+48])
                                                        Texp_ident "prod2/3621"
                                                  ]
                                            ]
                                            expression (src/grammarFunctor.ml[1816,53592+4]..src/grammarFunctor.ml[1828,54024+12])
                                              Texp_match
                                              expression (src/grammarFunctor.ml[1816,53592+10]..src/grammarFunctor.ml[1816,53592+34])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1816,53592+10]..src/grammarFunctor.ml[1816,53592+26])
                                                  Texp_ident "production_order/3601"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1816,53592+27]..src/grammarFunctor.ml[1816,53592+30])
                                                      Texp_ident "pl1/3622"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1816,53592+31]..src/grammarFunctor.ml[1816,53592+34])
                                                      Texp_ident "pl2/3623"
                                                ]
                                              [
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1817,53632+6]..src/grammarFunctor.ml[1817,53632+8])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1817,53632+6]..src/grammarFunctor.ml[1817,53632+8])
                                                      Tpat_construct "Lt"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[1818,53644+8]..src/grammarFunctor.ml[1818,53644+18])
                                                    Texp_construct "Some"
                                                    [
                                                      expression (src/grammarFunctor.ml[1818,53644+13]..src/grammarFunctor.ml[1818,53644+18])
                                                        Texp_ident "prod1/3620"
                                                    ]
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1819,53663+6]..src/grammarFunctor.ml[1819,53663+8])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1819,53663+6]..src/grammarFunctor.ml[1819,53663+8])
                                                      Tpat_construct "Gt"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[1820,53675+8]..src/grammarFunctor.ml[1820,53675+18])
                                                    Texp_construct "Some"
                                                    [
                                                      expression (src/grammarFunctor.ml[1820,53675+13]..src/grammarFunctor.ml[1820,53675+18])
                                                        Texp_ident "prod2/3621"
                                                    ]
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1821,53694+6]..src/grammarFunctor.ml[1821,53694+8])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1821,53694+6]..src/grammarFunctor.ml[1821,53694+8])
                                                      Tpat_construct "Eq"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[1826,53999+8]..src/grammarFunctor.ml[1826,53999+12])
                                                    Texp_construct "None"
                                                    []
                                                <case>
                                                  pattern (src/grammarFunctor.ml[1827,54012+6]..src/grammarFunctor.ml[1827,54012+8])
                                                    Tpat_value
                                                    pattern (src/grammarFunctor.ml[1827,54012+6]..src/grammarFunctor.ml[1827,54012+8])
                                                      Tpat_construct "Ic"
                                                      []
                                                      None
                                                  expression (src/grammarFunctor.ml[1828,54024+8]..src/grammarFunctor.ml[1828,54024+12])
                                                    Texp_construct "None"
                                                    []
                                              ]
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[1836,54265+0]..src/grammarFunctor.ml[1840,54413+5])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (src/grammarFunctor.ml[1836,54265+4]..src/grammarFunctor.ml[1836,54265+15])
                        Tpat_var "diagnostics/3625"
                      expression (src/grammarFunctor.ml[1836,54265+16]..src/grammarFunctor.ml[1840,54413+5]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (src/grammarFunctor.ml[1836,54265+16]..src/grammarFunctor.ml[1836,54265+18])
                              Tpat_construct "()"
                              []
                              None
                            expression (src/grammarFunctor.ml[1837,54286+2]..src/grammarFunctor.ml[1840,54413+5])
                              Texp_ifthenelse
                              expression (src/grammarFunctor.ml[1837,54286+5]..src/grammarFunctor.ml[1837,54286+53])
                                Texp_apply
                                expression (src/grammarFunctor.ml[1837,54286+5]..src/grammarFunctor.ml[1837,54286+8])
                                  Texp_ident "Stdlib!.not"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/grammarFunctor.ml[1837,54286+9]..src/grammarFunctor.ml[1837,54286+53])
                                      Texp_ident "Dune__exe!.Settings.ignore_all_unused_precedence_levels"
                                ]
                              expression (src/grammarFunctor.ml[1837,54286+59]..src/grammarFunctor.ml[1840,54413+5])
                                Texp_sequence
                                expression (src/grammarFunctor.ml[1838,54351+4]..src/grammarFunctor.ml[1838,54351+31])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[1838,54351+4]..src/grammarFunctor.ml[1838,54351+29])
                                    Texp_ident "TokPrecedence/990.diagnostics"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[1838,54351+29]..src/grammarFunctor.ml[1838,54351+31])
                                        Texp_construct "()"
                                        []
                                  ]
                                expression (src/grammarFunctor.ml[1839,54384+4]..src/grammarFunctor.ml[1839,54384+28])
                                  Texp_apply
                                  expression (src/grammarFunctor.ml[1839,54384+4]..src/grammarFunctor.ml[1839,54384+26])
                                    Texp_ident "Production/2648.diagnostics"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/grammarFunctor.ml[1839,54384+26]..src/grammarFunctor.ml[1839,54384+28])
                                        Texp_construct "()"
                                        []
                                  ]
                              None
                        ]
                  ]
                structure_item (src/grammarFunctor.ml[1845,54537+0]..src/grammarFunctor.ml[1908,56535+3])
                  Tstr_module
                  OnErrorReduce/3650
                    module_expr (src/grammarFunctor.ml[1845,54537+23]..src/grammarFunctor.ml[1908,56535+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1851,54778+2]..src/grammarFunctor.ml[1852,54842+27])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1851,54778+6]..src/grammarFunctor.ml[1851,54778+18])
                                extra
                                  Tpat_extra_constraint
                                  core_type (src/grammarFunctor.ml[1851,54778+21]..src/grammarFunctor.ml[1851,54778+61])
                                    Ttyp_constr "Dune__exe!.StringMap.t"
                                    [
                                      core_type (src/grammarFunctor.ml[1851,54778+21]..src/grammarFunctor.ml[1851,54778+49])
                                        Ttyp_constr "Dune__exe!.Syntax.on_error_reduce_level"
                                        []
                                    ]
                                Tpat_alias "declarations/3628"
                                pattern (src/grammarFunctor.ml[1851,54778+6]..src/grammarFunctor.ml[1851,54778+18])
                                  Tpat_any
                              expression (src/grammarFunctor.ml[1852,54842+4]..src/grammarFunctor.ml[1852,54842+27])
                                extra
                                  Texp_constraint
                                  core_type (src/grammarFunctor.ml[1851,54778+21]..src/grammarFunctor.ml[1851,54778+61])
                                    Ttyp_constr "Dune__exe!.StringMap.t"
                                    [
                                      core_type (src/grammarFunctor.ml[1851,54778+21]..src/grammarFunctor.ml[1851,54778+49])
                                        Ttyp_constr "Dune__exe!.Syntax.on_error_reduce_level"
                                        []
                                    ]
                                Texp_field
                                expression (src/grammarFunctor.ml[1852,54842+4]..src/grammarFunctor.ml[1852,54842+11])
                                  Texp_ident "G/488.grammar"
                                "on_error_reduce"
                          ]
                        structure_item (src/grammarFunctor.ml[1854,54871+2]..src/grammarFunctor.ml[1855,54915+30])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1854,54871+6]..src/grammarFunctor.ml[1854,54871+11])
                                Tpat_var "print/3629"
                              expression (src/grammarFunctor.ml[1854,54871+12]..src/grammarFunctor.ml[1855,54915+30]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1854,54871+13]..src/grammarFunctor.ml[1854,54871+15])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[1854,54871+18]..src/grammarFunctor.ml[1854,54871+31])
                                          Ttyp_constr "Nonterminal/1110.t"
                                          []
                                      Tpat_alias "nt/3630"
                                      pattern (src/grammarFunctor.ml[1854,54871+13]..src/grammarFunctor.ml[1854,54871+15])
                                        Tpat_any
                                    expression (src/grammarFunctor.ml[1855,54915+4]..src/grammarFunctor.ml[1855,54915+30])
                                      extra
                                        Texp_constraint
                                        core_type (src/grammarFunctor.ml[1854,54871+35]..src/grammarFunctor.ml[1854,54871+41])
                                          Ttyp_constr "string/15!"
                                          []
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1855,54915+4]..src/grammarFunctor.ml[1855,54915+21])
                                        Texp_ident "Nonterminal/1110.print"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1855,54915+22]..src/grammarFunctor.ml[1855,54915+27])
                                            Texp_construct "false"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1855,54915+28]..src/grammarFunctor.ml[1855,54915+30])
                                            Texp_ident "nt/3630"
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1857,54947+2]..src/grammarFunctor.ml[1863,55156+18])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1857,54947+6]..src/grammarFunctor.ml[1857,54947+12])
                                Tpat_var "lookup/3631"
                              expression (src/grammarFunctor.ml[1857,54947+13]..src/grammarFunctor.ml[1863,55156+18]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1857,54947+14]..src/grammarFunctor.ml[1857,54947+16])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (src/grammarFunctor.ml[1857,54947+19]..src/grammarFunctor.ml[1857,54947+25])
                                          Ttyp_constr "string/15!"
                                          []
                                      Tpat_alias "nt/3633"
                                      pattern (src/grammarFunctor.ml[1857,54947+14]..src/grammarFunctor.ml[1857,54947+16])
                                        Tpat_any
                                    expression (src/grammarFunctor.ml[1858,54992+4]..src/grammarFunctor.ml[1863,55156+18])
                                      extra
                                        Texp_constraint
                                        core_type (src/grammarFunctor.ml[1857,54947+29]..src/grammarFunctor.ml[1857,54947+42])
                                          Ttyp_constr "Nonterminal/1110.t"
                                          []
                                      Texp_try
                                      expression (src/grammarFunctor.ml[1859,55000+6]..src/grammarFunctor.ml[1859,55000+27])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1859,55000+6]..src/grammarFunctor.ml[1859,55000+24])
                                          Texp_ident "Nonterminal/1110.lookup"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1859,55000+25]..src/grammarFunctor.ml[1859,55000+27])
                                              Texp_ident "nt/3633"
                                        ]
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1860,55028+9]..src/grammarFunctor.ml[1860,55028+18])
                                            Tpat_construct "Not_found"
                                            []
                                            None
                                          expression (src/grammarFunctor.ml[1863,55156+6]..src/grammarFunctor.ml[1863,55156+18])
                                            Texp_assert                                            expression (src/grammarFunctor.ml[1863,55156+13]..src/grammarFunctor.ml[1863,55156+18])
                                              Texp_construct "false"
                                              []
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1865,55176+2]..src/grammarFunctor.ml[1867,55231+41])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1865,55176+6]..src/grammarFunctor.ml[1865,55176+12])
                                Tpat_var "reduce/3634"
                              expression (src/grammarFunctor.ml[1865,55176+13]..src/grammarFunctor.ml[1867,55231+41]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1865,55176+13]..src/grammarFunctor.ml[1865,55176+17])
                                      Tpat_var "prod/3636"
                                    expression (src/grammarFunctor.ml[1866,55196+4]..src/grammarFunctor.ml[1867,55231+41])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/grammarFunctor.ml[1866,55196+8]..src/grammarFunctor.ml[1866,55196+10])
                                            Tpat_var "nt/3637"
                                          expression (src/grammarFunctor.ml[1866,55196+13]..src/grammarFunctor.ml[1866,55196+31])
                                            Texp_apply
                                            expression (src/grammarFunctor.ml[1866,55196+13]..src/grammarFunctor.ml[1866,55196+26])
                                              Texp_ident "Production/2648.nt"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/grammarFunctor.ml[1866,55196+27]..src/grammarFunctor.ml[1866,55196+31])
                                                  Texp_ident "prod/3636"
                                            ]
                                      ]
                                      expression (src/grammarFunctor.ml[1867,55231+4]..src/grammarFunctor.ml[1867,55231+41])
                                        Texp_apply
                                        expression (src/grammarFunctor.ml[1867,55231+4]..src/grammarFunctor.ml[1867,55231+17])
                                          Texp_ident "Dune__exe!.StringMap.mem"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1867,55231+18]..src/grammarFunctor.ml[1867,55231+28])
                                              Texp_apply
                                              expression (src/grammarFunctor.ml[1867,55231+19]..src/grammarFunctor.ml[1867,55231+24])
                                                Texp_ident "print/3629"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/grammarFunctor.ml[1867,55231+25]..src/grammarFunctor.ml[1867,55231+27])
                                                    Texp_ident "nt/3637"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (src/grammarFunctor.ml[1867,55231+29]..src/grammarFunctor.ml[1867,55231+41])
                                              Texp_ident "declarations/3628"
                                        ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1869,55274+2]..src/grammarFunctor.ml[1872,55345+18])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1869,55274+6]..src/grammarFunctor.ml[1869,55274+10])
                                Tpat_var "iter/3638"
                              expression (src/grammarFunctor.ml[1869,55274+11]..src/grammarFunctor.ml[1872,55345+18]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1869,55274+11]..src/grammarFunctor.ml[1869,55274+12])
                                      Tpat_var "f/3639"
                                    expression (src/grammarFunctor.ml[1870,55289+4]..src/grammarFunctor.ml[1872,55345+18])
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1870,55289+4]..src/grammarFunctor.ml[1870,55289+18])
                                        Texp_ident "Dune__exe!.StringMap.iter"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1870,55289+19]..src/grammarFunctor.ml[1872,55345+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1870,55289+24]..src/grammarFunctor.ml[1870,55289+26])
                                                  Tpat_var "nt/3640"
                                                expression (src/grammarFunctor.ml[1870,55289+27]..src/grammarFunctor.ml[1871,55325+19]) ghost
                                                  Texp_function
                                                  Nolabel
                                                  [
                                                    <case>
                                                      pattern (src/grammarFunctor.ml[1870,55289+27]..src/grammarFunctor.ml[1870,55289+32])
                                                        Tpat_var "_prec/3641"
                                                      expression (src/grammarFunctor.ml[1871,55325+6]..src/grammarFunctor.ml[1871,55325+19])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1871,55325+6]..src/grammarFunctor.ml[1871,55325+7])
                                                          Texp_ident "f/3639"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1871,55325+8]..src/grammarFunctor.ml[1871,55325+19])
                                                              Texp_apply
                                                              expression (src/grammarFunctor.ml[1871,55325+9]..src/grammarFunctor.ml[1871,55325+15])
                                                                Texp_ident "lookup/3631"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (src/grammarFunctor.ml[1871,55325+16]..src/grammarFunctor.ml[1871,55325+18])
                                                                    Texp_ident "nt/3640"
                                                              ]
                                                        ]
                                                  ]
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1872,55345+6]..src/grammarFunctor.ml[1872,55345+18])
                                            Texp_ident "declarations/3628"
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1874,55365+2]..src/grammarFunctor.ml[1874,55365+17])
                          Tstr_open Fresh
                          module_expr (src/grammarFunctor.ml[1874,55365+7]..src/grammarFunctor.ml[1874,55365+17])
                            Tmod_ident "Precedence/3624"
                        structure_item (src/grammarFunctor.ml[1876,55384+2]..src/grammarFunctor.ml[1906,56520+13])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1876,55384+6]..src/grammarFunctor.ml[1876,55384+16])
                                Tpat_var "preferable/3642"
                              expression (src/grammarFunctor.ml[1876,55384+17]..src/grammarFunctor.ml[1906,56520+13]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1876,55384+17]..src/grammarFunctor.ml[1876,55384+22])
                                      Tpat_var "prod1/3644"
                                    expression (src/grammarFunctor.ml[1876,55384+23]..src/grammarFunctor.ml[1906,56520+13]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1876,55384+23]..src/grammarFunctor.ml[1876,55384+28])
                                            Tpat_var "prod2/3645"
                                          expression (src/grammarFunctor.ml[1878,55485+4]..src/grammarFunctor.ml[1906,56520+13])
                                            Texp_sequence
                                            expression (src/grammarFunctor.ml[1878,55485+4]..src/grammarFunctor.ml[1878,55485+27])
                                              Texp_assert                                              expression (src/grammarFunctor.ml[1878,55485+11]..src/grammarFunctor.ml[1878,55485+27])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1878,55485+18]..src/grammarFunctor.ml[1878,55485+20])
                                                  Texp_ident "Stdlib!.<>"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1878,55485+12]..src/grammarFunctor.ml[1878,55485+17])
                                                      Texp_ident "prod1/3644"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1878,55485+21]..src/grammarFunctor.ml[1878,55485+26])
                                                      Texp_ident "prod2/3645"
                                                ]
                                            expression (src/grammarFunctor.ml[1879,55514+4]..src/grammarFunctor.ml[1906,56520+13])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (src/grammarFunctor.ml[1879,55514+8]..src/grammarFunctor.ml[1879,55514+11])
                                                    Tpat_var "nt1/3646"
                                                  expression (src/grammarFunctor.ml[1879,55514+14]..src/grammarFunctor.ml[1879,55514+33])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1879,55514+14]..src/grammarFunctor.ml[1879,55514+27])
                                                      Texp_ident "Production/2648.nt"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1879,55514+28]..src/grammarFunctor.ml[1879,55514+33])
                                                          Texp_ident "prod1/3644"
                                                    ]
                                                <def>
                                                  pattern (src/grammarFunctor.ml[1880,55548+8]..src/grammarFunctor.ml[1880,55548+11])
                                                    Tpat_var "nt2/3647"
                                                  expression (src/grammarFunctor.ml[1880,55548+14]..src/grammarFunctor.ml[1880,55548+33])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1880,55548+14]..src/grammarFunctor.ml[1880,55548+27])
                                                      Texp_ident "Production/2648.nt"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1880,55548+28]..src/grammarFunctor.ml[1880,55548+33])
                                                          Texp_ident "prod2/3645"
                                                    ]
                                              ]
                                              expression (src/grammarFunctor.ml[1883,55698+4]..src/grammarFunctor.ml[1906,56520+13])
                                                Texp_apply
                                                expression (src/grammarFunctor.ml[1883,55698+15]..src/grammarFunctor.ml[1883,55698+17])
                                                  Texp_ident "Stdlib!.&&"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1883,55698+4]..src/grammarFunctor.ml[1883,55698+14])
                                                      Texp_apply
                                                      expression (src/grammarFunctor.ml[1883,55698+8]..src/grammarFunctor.ml[1883,55698+10])
                                                        Texp_ident "Stdlib!.<>"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1883,55698+4]..src/grammarFunctor.ml[1883,55698+7])
                                                            Texp_ident "nt1/3646"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/grammarFunctor.ml[1883,55698+11]..src/grammarFunctor.ml[1883,55698+14])
                                                            Texp_ident "nt2/3647"
                                                      ]
                                                  <arg>
                                                    Nolabel
                                                    expression (src/grammarFunctor.ml[1886,55813+4]..src/grammarFunctor.ml[1906,56520+13])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/grammarFunctor.ml[1886,55813+8]..src/grammarFunctor.ml[1886,55813+20])
                                                            Tpat_tuple
                                                            [
                                                              pattern (src/grammarFunctor.ml[1886,55813+8]..src/grammarFunctor.ml[1886,55813+13])
                                                                Tpat_var "prec1/3648"
                                                              pattern (src/grammarFunctor.ml[1886,55813+15]..src/grammarFunctor.ml[1886,55813+20])
                                                                Tpat_var "prec2/3649"
                                                            ]
                                                          expression (src/grammarFunctor.ml[1887,55836+6]..src/grammarFunctor.ml[1893,56098+20])
                                                            Texp_try
                                                            expression (src/grammarFunctor.ml[1888,55846+8]..src/grammarFunctor.ml[1889,55895+47])
                                                              Texp_tuple
                                                              [
                                                                expression (src/grammarFunctor.ml[1888,55846+8]..src/grammarFunctor.ml[1888,55846+47])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1888,55846+8]..src/grammarFunctor.ml[1888,55846+22])
                                                                    Texp_ident "Dune__exe!.StringMap.find"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1888,55846+23]..src/grammarFunctor.ml[1888,55846+34])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[1888,55846+24]..src/grammarFunctor.ml[1888,55846+29])
                                                                          Texp_ident "print/3629"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1888,55846+30]..src/grammarFunctor.ml[1888,55846+33])
                                                                              Texp_ident "nt1/3646"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1888,55846+35]..src/grammarFunctor.ml[1888,55846+47])
                                                                        Texp_ident "declarations/3628"
                                                                  ]
                                                                expression (src/grammarFunctor.ml[1889,55895+8]..src/grammarFunctor.ml[1889,55895+47])
                                                                  Texp_apply
                                                                  expression (src/grammarFunctor.ml[1889,55895+8]..src/grammarFunctor.ml[1889,55895+22])
                                                                    Texp_ident "Dune__exe!.StringMap.find"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1889,55895+23]..src/grammarFunctor.ml[1889,55895+34])
                                                                        Texp_apply
                                                                        expression (src/grammarFunctor.ml[1889,55895+24]..src/grammarFunctor.ml[1889,55895+29])
                                                                          Texp_ident "print/3629"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/grammarFunctor.ml[1889,55895+30]..src/grammarFunctor.ml[1889,55895+33])
                                                                              Texp_ident "nt2/3647"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/grammarFunctor.ml[1889,55895+35]..src/grammarFunctor.ml[1889,55895+47])
                                                                        Texp_ident "declarations/3628"
                                                                  ]
                                                              ]
                                                            [
                                                              <case>
                                                                pattern (src/grammarFunctor.ml[1890,55943+11]..src/grammarFunctor.ml[1890,55943+20])
                                                                  Tpat_construct "Not_found"
                                                                  []
                                                                  None
                                                                expression (src/grammarFunctor.ml[1893,56098+8]..src/grammarFunctor.ml[1893,56098+20])
                                                                  Texp_assert                                                                  expression (src/grammarFunctor.ml[1893,56098+15]..src/grammarFunctor.ml[1893,56098+20])
                                                                    Texp_construct "false"
                                                                    []
                                                            ]
                                                      ]
                                                      expression (src/grammarFunctor.ml[1895,56126+4]..src/grammarFunctor.ml[1906,56520+13])
                                                        Texp_match
                                                        expression (src/grammarFunctor.ml[1895,56126+10]..src/grammarFunctor.ml[1895,56126+38])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1895,56126+10]..src/grammarFunctor.ml[1895,56126+26])
                                                            Texp_ident "Precedence/3624.production_order"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1895,56126+27]..src/grammarFunctor.ml[1895,56126+32])
                                                                Texp_ident "prec1/3648"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1895,56126+33]..src/grammarFunctor.ml[1895,56126+38])
                                                                Texp_ident "prec2/3649"
                                                          ]
                                                        [
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1896,56170+6]..src/grammarFunctor.ml[1896,56170+8])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1896,56170+6]..src/grammarFunctor.ml[1896,56170+8])
                                                                Tpat_construct "Gt"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1900,56379+8]..src/grammarFunctor.ml[1900,56379+12])
                                                              Texp_construct "true"
                                                              []
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1901,56392+6]..src/grammarFunctor.ml[1901,56392+8])
                                                              Tpat_value
                                                              pattern (src/grammarFunctor.ml[1901,56392+6]..src/grammarFunctor.ml[1901,56392+8])
                                                                Tpat_construct "Lt"
                                                                []
                                                                None
                                                            expression (src/grammarFunctor.ml[1902,56404+8]..src/grammarFunctor.ml[1902,56404+13])
                                                              Texp_construct "false"
                                                              []
                                                          <case>
                                                            pattern (src/grammarFunctor.ml[1903,56418+6]..src/grammarFunctor.ml[1904,56427+8])
                                                              Tpat_or
                                                              pattern (src/grammarFunctor.ml[1903,56418+6]..src/grammarFunctor.ml[1903,56418+8])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[1903,56418+6]..src/grammarFunctor.ml[1903,56418+8])
                                                                  Tpat_construct "Eq"
                                                                  []
                                                                  None
                                                              pattern (src/grammarFunctor.ml[1904,56427+6]..src/grammarFunctor.ml[1904,56427+8])
                                                                Tpat_value
                                                                pattern (src/grammarFunctor.ml[1904,56427+6]..src/grammarFunctor.ml[1904,56427+8])
                                                                  Tpat_construct "Ic"
                                                                  []
                                                                  None
                                                            expression (src/grammarFunctor.ml[1906,56520+8]..src/grammarFunctor.ml[1906,56520+13])
                                                              Texp_construct "false"
                                                              []
                                                        ]
                                                ]
                                      ]
                                ]
                          ]
                      ]
                structure_item (src/grammarFunctor.ml[1913,56661+0]..src/grammarFunctor.ml[1947,57516+3])
                  Tstr_module
                  Sentence/3672
                    module_expr (src/grammarFunctor.ml[1913,56661+18]..src/grammarFunctor.ml[1947,57516+3])
                      Tmod_structure
                      [
                        structure_item (src/grammarFunctor.ml[1915,56687+2]..src/grammarFunctor.ml[1916,56705+42])
                          Tstr_type Rec
                          [
                            type_declaration sentence/3651 (src/grammarFunctor.ml[1915,56687+2]..src/grammarFunctor.ml[1916,56705+42])
                              ptype_params =
                                []
                              ptype_cstrs =
                                []
                              ptype_kind =
                                Ttype_abstract
                              ptype_private = Public
                              ptype_manifest =
                                Some
                                  core_type (src/grammarFunctor.ml[1916,56705+4]..src/grammarFunctor.ml[1916,56705+42])
                                    Ttyp_tuple
                                    [
                                      core_type (src/grammarFunctor.ml[1916,56705+4]..src/grammarFunctor.ml[1916,56705+24])
                                        Ttyp_constr "option/10!"
                                        [
                                          core_type (src/grammarFunctor.ml[1916,56705+4]..src/grammarFunctor.ml[1916,56705+17])
                                            Ttyp_constr "Nonterminal/1110.t"
                                            []
                                        ]
                                      core_type (src/grammarFunctor.ml[1916,56705+27]..src/grammarFunctor.ml[1916,56705+42])
                                        Ttyp_constr "list/9!"
                                        [
                                          core_type (src/grammarFunctor.ml[1916,56705+27]..src/grammarFunctor.ml[1916,56705+37])
                                            Ttyp_constr "Terminal/1588.t"
                                            []
                                        ]
                                    ]
                          ]
                        structure_item (src/grammarFunctor.ml[1918,56749+2]..src/grammarFunctor.ml[1918,56749+13])
                          Tstr_open Fresh
                          module_expr (src/grammarFunctor.ml[1918,56749+7]..src/grammarFunctor.ml[1918,56749+13])
                            Tmod_ident "Stdlib!.Printf"
                        structure_item (src/grammarFunctor.ml[1920,56764+2]..src/grammarFunctor.ml[1930,57111+5])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1920,56764+6]..src/grammarFunctor.ml[1920,56764+20])
                                Tpat_var "print_abstract/3652"
                              expression (src/grammarFunctor.ml[1920,56764+21]..src/grammarFunctor.ml[1930,57111+5]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1920,56764+21]..src/grammarFunctor.ml[1920,56764+37])
                                      Tpat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[1920,56764+22]..src/grammarFunctor.ml[1920,56764+25])
                                          Tpat_var "nto/3654"
                                        pattern (src/grammarFunctor.ml[1920,56764+27]..src/grammarFunctor.ml[1920,56764+36])
                                          Tpat_var "terminals/3655"
                                      ]
                                    expression (src/grammarFunctor.ml[1921,56813+4]..src/grammarFunctor.ml[1930,57111+5])
                                      extra
                                        Texp_constraint
                                        core_type (src/grammarFunctor.ml[1920,56764+40]..src/grammarFunctor.ml[1920,56764+46])
                                          Ttyp_constr "string/15!"
                                          []
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1921,56813+4]..src/grammarFunctor.ml[1921,56813+20])
                                        Texp_ident "Dune__exe!.Misc.with_buffer"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1921,56813+21]..src/grammarFunctor.ml[1921,56813+24])
                                            Texp_constant Const_int 128
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1921,56813+25]..src/grammarFunctor.ml[1930,57111+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1921,56813+30]..src/grammarFunctor.ml[1921,56813+31])
                                                  Tpat_var "b/3656"
                                                expression (src/grammarFunctor.ml[1922,56848+6]..src/grammarFunctor.ml[1929,57089+21])
                                                  Texp_sequence
                                                  expression (src/grammarFunctor.ml[1922,56848+6]..src/grammarFunctor.ml[1924,56931+11])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1922,56848+6]..src/grammarFunctor.ml[1922,56848+17])
                                                      Texp_ident "Dune__exe!.Option.iter"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1922,56848+18]..src/grammarFunctor.ml[1924,56931+7])
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[1922,56848+23]..src/grammarFunctor.ml[1922,56848+25])
                                                                Tpat_var "nt/3657"
                                                              expression (src/grammarFunctor.ml[1923,56877+8]..src/grammarFunctor.ml[1923,56877+53])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1923,56877+8]..src/grammarFunctor.ml[1923,56877+15])
                                                                  Texp_ident "Stdlib!.Printf.bprintf"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1923,56877+16]..src/grammarFunctor.ml[1923,56877+17])
                                                                      Texp_ident "b/3656"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24])
                                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                                          [
                                                                            expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                              []
                                                                            expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                                  Texp_constant Const_string(": ",(src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost,None)
                                                                                expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                  []
                                                                              ]
                                                                          ]
                                                                        expression (src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost
                                                                          Texp_constant Const_string("%s: ",(src/grammarFunctor.ml[1923,56877+18]..src/grammarFunctor.ml[1923,56877+24]) ghost,None)
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1923,56877+25]..src/grammarFunctor.ml[1923,56877+53])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[1923,56877+26]..src/grammarFunctor.ml[1923,56877+43])
                                                                        Texp_ident "Nonterminal/1110.print"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1923,56877+44]..src/grammarFunctor.ml[1923,56877+49])
                                                                            Texp_construct "false"
                                                                            []
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1923,56877+50]..src/grammarFunctor.ml[1923,56877+52])
                                                                            Texp_ident "nt/3657"
                                                                      ]
                                                                ]
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1924,56931+8]..src/grammarFunctor.ml[1924,56931+11])
                                                          Texp_ident "nto/3654"
                                                    ]
                                                  expression (src/grammarFunctor.ml[1925,56944+6]..src/grammarFunctor.ml[1929,57089+21])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/grammarFunctor.ml[1925,56944+10]..src/grammarFunctor.ml[1925,56944+19])
                                                          Tpat_var "separator/3658"
                                                        expression (src/grammarFunctor.ml[1925,56944+22]..src/grammarFunctor.ml[1925,56944+38])
                                                          Texp_apply
                                                          expression (src/grammarFunctor.ml[1925,56944+22]..src/grammarFunctor.ml[1925,56944+31])
                                                            Texp_ident "Dune__exe!.Misc.once"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1925,56944+32]..src/grammarFunctor.ml[1925,56944+34])
                                                                Texp_constant Const_string("",(src/grammarFunctor.ml[1925,56944+33]..src/grammarFunctor.ml[1925,56944+33]),None)
                                                            <arg>
                                                              Nolabel
                                                              expression (src/grammarFunctor.ml[1925,56944+35]..src/grammarFunctor.ml[1925,56944+38])
                                                                Texp_constant Const_string(" ",(src/grammarFunctor.ml[1925,56944+36]..src/grammarFunctor.ml[1925,56944+37]),None)
                                                          ]
                                                    ]
                                                    expression (src/grammarFunctor.ml[1926,56986+6]..src/grammarFunctor.ml[1929,57089+21])
                                                      Texp_sequence
                                                      expression (src/grammarFunctor.ml[1926,56986+6]..src/grammarFunctor.ml[1928,57070+17])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1926,56986+6]..src/grammarFunctor.ml[1926,56986+15])
                                                          Texp_ident "Stdlib!.List.iter"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1926,56986+16]..src/grammarFunctor.ml[1928,57070+7])
                                                              Texp_function
                                                              Nolabel
                                                              [
                                                                <case>
                                                                  pattern (src/grammarFunctor.ml[1926,56986+21]..src/grammarFunctor.ml[1926,56986+22])
                                                                    Tpat_var "t/3659"
                                                                  expression (src/grammarFunctor.ml[1927,57012+8]..src/grammarFunctor.ml[1927,57012+57])
                                                                    Texp_apply
                                                                    expression (src/grammarFunctor.ml[1927,57012+8]..src/grammarFunctor.ml[1927,57012+15])
                                                                      Texp_ident "Stdlib!.Printf.bprintf"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1927,57012+16]..src/grammarFunctor.ml[1927,57012+17])
                                                                          Texp_ident "b/3656"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24])
                                                                          Texp_construct "CamlinternalFormatBasics.Format"
                                                                          [
                                                                            expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                  []
                                                                                expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                                  [
                                                                                    expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                      []
                                                                                    expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                      []
                                                                                  ]
                                                                              ]
                                                                            expression (src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost
                                                                              Texp_constant Const_string("%s%s",(src/grammarFunctor.ml[1927,57012+18]..src/grammarFunctor.ml[1927,57012+24]) ghost,None)
                                                                          ]
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1927,57012+25]..src/grammarFunctor.ml[1927,57012+38])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[1927,57012+26]..src/grammarFunctor.ml[1927,57012+35])
                                                                            Texp_ident "separator/3658"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[1927,57012+35]..src/grammarFunctor.ml[1927,57012+37])
                                                                                Texp_construct "()"
                                                                                []
                                                                          ]
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/grammarFunctor.ml[1927,57012+39]..src/grammarFunctor.ml[1927,57012+57])
                                                                          Texp_apply
                                                                          expression (src/grammarFunctor.ml[1927,57012+40]..src/grammarFunctor.ml[1927,57012+54])
                                                                            Texp_ident "Terminal/1588.print"
                                                                          [
                                                                            <arg>
                                                                              Nolabel
                                                                              expression (src/grammarFunctor.ml[1927,57012+55]..src/grammarFunctor.ml[1927,57012+56])
                                                                                Texp_ident "t/3659"
                                                                          ]
                                                                    ]
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1928,57070+8]..src/grammarFunctor.ml[1928,57070+17])
                                                              Texp_ident "terminals/3655"
                                                        ]
                                                      expression (src/grammarFunctor.ml[1929,57089+6]..src/grammarFunctor.ml[1929,57089+20])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1929,57089+6]..src/grammarFunctor.ml[1929,57089+13])
                                                          Texp_ident "Stdlib!.Printf.bprintf"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1929,57089+14]..src/grammarFunctor.ml[1929,57089+15])
                                                              Texp_ident "b/3656"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20])
                                                              Texp_construct "CamlinternalFormatBasics.Format"
                                                              [
                                                                expression (src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                  [
                                                                    expression (src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20]) ghost
                                                                      Texp_constant Const_char 0a
                                                                    expression (src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                      []
                                                                  ]
                                                                expression (src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20]) ghost
                                                                  Texp_constant Const_string("\n",(src/grammarFunctor.ml[1929,57089+16]..src/grammarFunctor.ml[1929,57089+20]) ghost,None)
                                                              ]
                                                        ]
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1932,57118+2]..src/grammarFunctor.ml[1938,57356+5])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1932,57118+6]..src/grammarFunctor.ml[1932,57118+20])
                                Tpat_var "print_concrete/3661"
                              expression (src/grammarFunctor.ml[1932,57118+21]..src/grammarFunctor.ml[1938,57356+5]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1932,57118+21]..src/grammarFunctor.ml[1932,57118+38])
                                      Tpat_tuple
                                      [
                                        pattern (src/grammarFunctor.ml[1932,57118+22]..src/grammarFunctor.ml[1932,57118+26])
                                          Tpat_var "_nto/3663"
                                        pattern (src/grammarFunctor.ml[1932,57118+28]..src/grammarFunctor.ml[1932,57118+37])
                                          Tpat_var "terminals/3664"
                                      ]
                                    expression (src/grammarFunctor.ml[1933,57168+4]..src/grammarFunctor.ml[1938,57356+5])
                                      extra
                                        Texp_constraint
                                        core_type (src/grammarFunctor.ml[1932,57118+41]..src/grammarFunctor.ml[1932,57118+47])
                                          Ttyp_constr "string/15!"
                                          []
                                      Texp_apply
                                      expression (src/grammarFunctor.ml[1933,57168+4]..src/grammarFunctor.ml[1933,57168+20])
                                        Texp_ident "Dune__exe!.Misc.with_buffer"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1933,57168+21]..src/grammarFunctor.ml[1933,57168+24])
                                            Texp_constant Const_int 128
                                        <arg>
                                          Nolabel
                                          expression (src/grammarFunctor.ml[1933,57168+25]..src/grammarFunctor.ml[1938,57356+5])
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1933,57168+30]..src/grammarFunctor.ml[1933,57168+31])
                                                  Tpat_var "b/3665"
                                                expression (src/grammarFunctor.ml[1934,57203+6]..src/grammarFunctor.ml[1937,57338+17])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/grammarFunctor.ml[1934,57203+10]..src/grammarFunctor.ml[1934,57203+19])
                                                        Tpat_var "separator/3666"
                                                      expression (src/grammarFunctor.ml[1934,57203+22]..src/grammarFunctor.ml[1934,57203+38])
                                                        Texp_apply
                                                        expression (src/grammarFunctor.ml[1934,57203+22]..src/grammarFunctor.ml[1934,57203+31])
                                                          Texp_ident "Dune__exe!.Misc.once"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1934,57203+32]..src/grammarFunctor.ml[1934,57203+34])
                                                              Texp_constant Const_string("",(src/grammarFunctor.ml[1934,57203+33]..src/grammarFunctor.ml[1934,57203+33]),None)
                                                          <arg>
                                                            Nolabel
                                                            expression (src/grammarFunctor.ml[1934,57203+35]..src/grammarFunctor.ml[1934,57203+38])
                                                              Texp_constant Const_string(" ",(src/grammarFunctor.ml[1934,57203+36]..src/grammarFunctor.ml[1934,57203+37]),None)
                                                        ]
                                                  ]
                                                  expression (src/grammarFunctor.ml[1935,57245+6]..src/grammarFunctor.ml[1937,57338+17])
                                                    Texp_apply
                                                    expression (src/grammarFunctor.ml[1935,57245+6]..src/grammarFunctor.ml[1935,57245+15])
                                                      Texp_ident "Stdlib!.List.iter"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1935,57245+16]..src/grammarFunctor.ml[1937,57338+7])
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/grammarFunctor.ml[1935,57245+21]..src/grammarFunctor.ml[1935,57245+22])
                                                                Tpat_var "t/3667"
                                                              expression (src/grammarFunctor.ml[1936,57271+8]..src/grammarFunctor.ml[1936,57271+66])
                                                                Texp_apply
                                                                expression (src/grammarFunctor.ml[1936,57271+8]..src/grammarFunctor.ml[1936,57271+15])
                                                                  Texp_ident "Stdlib!.Printf.bprintf"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1936,57271+16]..src/grammarFunctor.ml[1936,57271+17])
                                                                      Texp_ident "b/3665"
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24])
                                                                      Texp_construct "CamlinternalFormatBasics.Format"
                                                                      [
                                                                        expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                                          [
                                                                            expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                              []
                                                                            expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String"
                                                                              [
                                                                                expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                  []
                                                                                expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                  []
                                                                              ]
                                                                          ]
                                                                        expression (src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost
                                                                          Texp_constant Const_string("%s%s",(src/grammarFunctor.ml[1936,57271+18]..src/grammarFunctor.ml[1936,57271+24]) ghost,None)
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1936,57271+25]..src/grammarFunctor.ml[1936,57271+38])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[1936,57271+26]..src/grammarFunctor.ml[1936,57271+35])
                                                                        Texp_ident "separator/3666"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1936,57271+35]..src/grammarFunctor.ml[1936,57271+37])
                                                                            Texp_construct "()"
                                                                            []
                                                                      ]
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/grammarFunctor.ml[1936,57271+39]..src/grammarFunctor.ml[1936,57271+66])
                                                                      Texp_apply
                                                                      expression (src/grammarFunctor.ml[1936,57271+40]..src/grammarFunctor.ml[1936,57271+63])
                                                                        Texp_ident "Terminal/1588.print_concrete"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/grammarFunctor.ml[1936,57271+64]..src/grammarFunctor.ml[1936,57271+65])
                                                                            Texp_ident "t/3667"
                                                                      ]
                                                                ]
                                                          ]
                                                      <arg>
                                                        Nolabel
                                                        expression (src/grammarFunctor.ml[1937,57338+8]..src/grammarFunctor.ml[1937,57338+17])
                                                          Texp_ident "terminals/3664"
                                                    ]
                                            ]
                                      ]
                                ]
                          ]
                        structure_item (src/grammarFunctor.ml[1940,57363+2]..src/grammarFunctor.ml[1945,57483+31])
                          Tstr_value Nonrec
                          [
                            <def>
                              pattern (src/grammarFunctor.ml[1940,57363+6]..src/grammarFunctor.ml[1940,57363+11])
                                Tpat_var "print/3669"
                              expression (src/grammarFunctor.ml[1940,57363+12]..src/grammarFunctor.ml[1945,57483+31]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (src/grammarFunctor.ml[1940,57363+12]..src/grammarFunctor.ml[1940,57363+17])
                                      Tpat_var "style/3670"
                                    expression (src/grammarFunctor.ml[1940,57363+18]..src/grammarFunctor.ml[1945,57483+31]) ghost
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/grammarFunctor.ml[1940,57363+18]..src/grammarFunctor.ml[1940,57363+26])
                                            Tpat_var "sentence/3671"
                                          expression (src/grammarFunctor.ml[1941,57392+4]..src/grammarFunctor.ml[1945,57483+31])
                                            Texp_match
                                            expression (src/grammarFunctor.ml[1941,57392+10]..src/grammarFunctor.ml[1941,57392+15])
                                              Texp_ident "style/3670"
                                            [
                                              <case>
                                                pattern (src/grammarFunctor.ml[1942,57413+6]..src/grammarFunctor.ml[1942,57413+15])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[1942,57413+6]..src/grammarFunctor.ml[1942,57413+15])
                                                    Tpat_variant "Abstract"
                                                    None
                                                expression (src/grammarFunctor.ml[1943,57432+8]..src/grammarFunctor.ml[1943,57432+31])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1943,57432+8]..src/grammarFunctor.ml[1943,57432+22])
                                                    Texp_ident "print_abstract/3652"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1943,57432+23]..src/grammarFunctor.ml[1943,57432+31])
                                                        Texp_ident "sentence/3671"
                                                  ]
                                              <case>
                                                pattern (src/grammarFunctor.ml[1944,57464+6]..src/grammarFunctor.ml[1944,57464+15])
                                                  Tpat_value
                                                  pattern (src/grammarFunctor.ml[1944,57464+6]..src/grammarFunctor.ml[1944,57464+15])
                                                    Tpat_variant "Concrete"
                                                    None
                                                expression (src/grammarFunctor.ml[1945,57483+8]..src/grammarFunctor.ml[1945,57483+31])
                                                  Texp_apply
                                                  expression (src/grammarFunctor.ml[1945,57483+8]..src/grammarFunctor.ml[1945,57483+22])
                                                    Texp_ident "print_concrete/3661"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/grammarFunctor.ml[1945,57483+23]..src/grammarFunctor.ml[1945,57483+31])
                                                        Texp_ident "sentence/3671"
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                      ]
              ]
]

{<Dune__exe__GrammarFunctor>
 "Make"[module] ->
   Abs<Dune__exe__GrammarFunctor.760>
      (G/488, ()/1,
       {
        "Analysis"[module] ->
          {<Dune__exe__GrammarFunctor.682>
           "attributes"[value] -> <Dune__exe__GrammarFunctor.671>;
           "explain_first_rhs"[value] -> <Dune__exe__GrammarFunctor.666>;
           "first"[value] -> <Dune__exe__GrammarFunctor.652>;
           "first_prod_lookahead"[value] -> <Dune__exe__GrammarFunctor.660>;
           "first_symbol"[value] -> <Dune__exe__GrammarFunctor.653>;
           "follow"[value] -> <Dune__exe__GrammarFunctor.670>;
           "maximal"[value] -> <Dune__exe__GrammarFunctor.677>;
           "maximal_prod"[value] -> <Dune__exe__GrammarFunctor.679>;
           "minimal"[value] -> <Dune__exe__GrammarFunctor.672>;
           "minimal_prod"[value] -> <Dune__exe__GrammarFunctor.674>;
           "nullable"[value] -> <Dune__exe__GrammarFunctor.650>;
           "nullable_first_prod"[value] -> <Dune__exe__GrammarFunctor.657>;
           "nullable_symbol"[value] -> <Dune__exe__GrammarFunctor.651>;
           };
        "Nonterminal"[module] ->
          {<Dune__exe__GrammarFunctor.81>
           "attributes"[value] -> <Dune__exe__GrammarFunctor.79>;
           "compare"[value] -> <Dune__exe__GrammarFunctor.32>;
           "equal"[value] -> <Dune__exe__GrammarFunctor.29>;
           "fold"[value] -> <Dune__exe__GrammarFunctor.57>;
           "foldx"[value] -> <Dune__exe__GrammarFunctor.65>;
           "init"[value] -> <Dune__exe__GrammarFunctor.53>;
           "is_internal_start"[value] -> <Dune__exe__GrammarFunctor.42>;
           "is_user_start"[value] -> <Dune__exe__GrammarFunctor.44>;
           "iter"[value] -> <Dune__exe__GrammarFunctor.55>;
           "iterx"[value] -> <Dune__exe__GrammarFunctor.62>;
           "lookup"[value] -> <Dune__exe__GrammarFunctor.49>;
           "map"[value] -> <Dune__exe__GrammarFunctor.60>;
           "n"[value] -> <Dune__exe__GrammarFunctor.38>;
           "n2i"[value] -> <Dune__exe__GrammarFunctor.27>;
           "ocamltype"[value] -> <Dune__exe__GrammarFunctor.68>;
           "ocamltype_of_start_symbol"[value] ->
             <Dune__exe__GrammarFunctor.70>;
           "positions"[value] -> <Dune__exe__GrammarFunctor.51>;
           "print"[value] -> <Dune__exe__GrammarFunctor.46>;
           "t"[type] -> <Dune__exe__GrammarFunctor.26>;
           "tabulate"[value] -> <Dune__exe__GrammarFunctor.73>;
           };
        "NonterminalMap"[module] ->
          (CU Dune__exe . "Patricia"[module] .
          "Big"[module])<Dune__exe__GrammarFunctor.82>;
        "NonterminalSet"[module] ->
          (CU Dune__exe . "Patricia"[module] . "Big"[module] .
          "Domain"[module])<Dune__exe__GrammarFunctor.83>;
        "OnErrorReduce"[module] ->
          {<Dune__exe__GrammarFunctor.741>
           "iter"[value] -> <Dune__exe__GrammarFunctor.730>;
           "preferable"[value] -> <Dune__exe__GrammarFunctor.734>;
           "reduce"[value] -> <Dune__exe__GrammarFunctor.727>;
           };
        "Precedence"[module] ->
          {<Dune__exe__GrammarFunctor.720>
           "choice"[type] -> <Dune__exe__GrammarFunctor.683>;
           "reduce_reduce"[value] -> <Dune__exe__GrammarFunctor.715>;
           "shift_reduce"[value] -> <Dune__exe__GrammarFunctor.707>;
           };
        "Production"[module] ->
          {<Dune__exe__GrammarFunctor.433>
           "action"[value] -> <Dune__exe__GrammarFunctor.352>;
           "amap"[value] -> <Dune__exe__GrammarFunctor.374>;
           "classify"[value] -> <Dune__exe__GrammarFunctor.349>;
           "compare"[value] -> <Dune__exe__GrammarFunctor.275>;
           "def"[value] -> <Dune__exe__GrammarFunctor.335>;
           "describe"[value] -> <Dune__exe__GrammarFunctor.388>;
           "error_free"[value] -> <Dune__exe__GrammarFunctor.363>;
           "fold"[value] -> <Dune__exe__GrammarFunctor.369>;
           "foldnt"[value] -> <Dune__exe__GrammarFunctor.318>;
           "foldx"[value] -> <Dune__exe__GrammarFunctor.379>;
           "i2p"[value] -> <Dune__exe__GrammarFunctor.283>;
           "identifiers"[value] -> <Dune__exe__GrammarFunctor.345>;
           "index"[type] -> <Dune__exe__GrammarFunctor.274>;
           "init"[value] -> <Dune__exe__GrammarFunctor.365>;
           "is_start"[value] -> <Dune__exe__GrammarFunctor.347>;
           "iter"[value] -> <Dune__exe__GrammarFunctor.367>;
           "iternt"[value] -> <Dune__exe__GrammarFunctor.313>;
           "iterx"[value] -> <Dune__exe__GrammarFunctor.376>;
           "length"[value] -> <Dune__exe__GrammarFunctor.343>;
           "lhs_attributes"[value] -> <Dune__exe__GrammarFunctor.357>;
           "map"[value] -> <Dune__exe__GrammarFunctor.372>;
           "mapnt"[value] -> <Dune__exe__GrammarFunctor.324>;
           "mapx"[value] -> <Dune__exe__GrammarFunctor.382>;
           "n"[value] -> <Dune__exe__GrammarFunctor.276>;
           "nt"[value] -> <Dune__exe__GrammarFunctor.337>;
           "p2i"[value] -> <Dune__exe__GrammarFunctor.281>;
           "positions"[value] -> <Dune__exe__GrammarFunctor.355>;
           "print"[value] -> <Dune__exe__GrammarFunctor.384>;
           "rhs"[value] -> <Dune__exe__GrammarFunctor.340>;
           "rhs_attributes"[value] -> <Dune__exe__GrammarFunctor.359>;
           "start"[value] -> <Dune__exe__GrammarFunctor.295>;
           "startsymbol2startprod"[value] -> <Dune__exe__GrammarFunctor.361>;
           "sum"[value] -> <Dune__exe__GrammarFunctor.396>;
           "tabulate"[value] -> <Dune__exe__GrammarFunctor.394>;
           };
        "ProductionMap"[module] ->
          {<Dune__exe__GrammarFunctor.439>
           "Domain"[module] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "Domain"[module];
           "Unchanged"[extension constructor] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "Unchanged"[extension constructor];
           "add"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] . "add"[value];
           "cardinal"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "cardinal"[value];
           "choose"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "choose"[value];
           "compare"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "compare"[value];
           "corestrict"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "corestrict"[value];
           "decision"[type] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "decision"[type];
           "domain"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "domain"[value];
           "empty"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "empty"[value];
           "endo_map"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "endo_map"[value];
           "filter"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "filter"[value];
           "find"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "find"[value];
           "find_and_remove"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "find_and_remove"[value];
           "fine_add"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "fine_add"[value];
           "fine_union"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "fine_union"[value];
           "fold"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "fold"[value];
           "fold_rev"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "fold_rev"[value];
           "is_empty"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "is_empty"[value];
           "is_singleton"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "is_singleton"[value];
           "iter"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "iter"[value];
           "iter2"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "iter2"[value];
           "key"[type] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] . "key"[type];
           "lift"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "lift"[value];
           "lookup"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "lookup"[value];
           "lookup_and_remove"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "lookup_and_remove"[value];
           "map"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] . "map"[value];
           "mem"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] . "mem"[value];
           "remove"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "remove"[value];
           "singleton"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "singleton"[value];
           "start"[value] -> <Dune__exe__GrammarFunctor.435>;
           "strict_add"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "strict_add"[value];
           "t"[type] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] . "t"[type];
           "union"[value] ->
             CU Dune__exe . "Patricia"[module] . "Big"[module] .
             "union"[value];
           };
        "Sentence"[module] ->
          {<Dune__exe__GrammarFunctor.759>
           "print"[value] -> <Dune__exe__GrammarFunctor.756>;
           "sentence"[type] -> <Dune__exe__GrammarFunctor.742>;
           };
        "Symbol"[module] ->
          {<Dune__exe__GrammarFunctor.252>
           "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
           "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
           "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
           "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
           "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
           "print"[value] -> <Dune__exe__GrammarFunctor.229>;
           "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
           "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
           "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
           "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
           "t"[type] -> <Dune__exe__GrammarFunctor.204>;
           };
        "SymbolMap"[module] ->
          {<Dune__exe__GrammarFunctor.273>
           "add"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "add"[value];
           "add_seq"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "add_seq"[value];
           "add_to_list"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "add_to_list"[value];
           "bindings"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "bindings"[value];
           "cardinal"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "cardinal"[value];
           "choose"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "choose"[value];
           "choose_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "choose_opt"[value];
           "compare"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "compare"[value];
           "domain"[value] -> <Dune__exe__GrammarFunctor.260>;
           "empty"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "empty"[value];
           "equal"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "equal"[value];
           "exists"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "exists"[value];
           "filter"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "filter"[value];
           "filter_map"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "filter_map"[value];
           "find"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find"[value];
           "find_first"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_first"[value];
           "find_first_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_first_opt"[value];
           "find_last"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_last"[value];
           "find_last_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_last_opt"[value];
           "find_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_opt"[value];
           "fold"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "fold"[value];
           "for_all"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "for_all"[value];
           "init"[value] -> <Dune__exe__GrammarFunctor.264>;
           "is_empty"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "is_empty"[value];
           "iter"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "iter"[value];
           "key"[type] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "key"[type];
           "map"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "map"[value];
           "mapi"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "mapi"[value];
           "max_binding"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "max_binding"[value];
           "max_binding_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "max_binding_opt"[value];
           "mem"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "mem"[value];
           "merge"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "merge"[value];
           "min_binding"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "min_binding"[value];
           "min_binding_opt"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "min_binding_opt"[value];
           "of_list"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "of_list"[value];
           "of_seq"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "of_seq"[value];
           "partition"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "partition"[value];
           "purelynonterminal"[value] -> <Dune__exe__GrammarFunctor.269>;
           "remove"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "remove"[value];
           "singleton"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "singleton"[value];
           "split"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "split"[value];
           "t"[type] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "t"[type];
           "to_list"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_list"[value];
           "to_rev_seq"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_rev_seq"[value];
           "to_seq"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_seq"[value];
           "to_seq_from"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_seq_from"[value];
           "union"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "union"[value];
           "update"[value] ->
             CU Stdlib . "Map"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "update"[value];
           };
        "SymbolSet"[module] ->
          {<Dune__exe__GrammarFunctor.259>
           "add"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "add"[value];
           "add_seq"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "add_seq"[value];
           "cardinal"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "cardinal"[value];
           "choose"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "choose"[value];
           "choose_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "choose_opt"[value];
           "compare"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "compare"[value];
           "diff"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "diff"[value];
           "disjoint"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "disjoint"[value];
           "elements"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "elements"[value];
           "elt"[type] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "elt"[type];
           "empty"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "empty"[value];
           "equal"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "equal"[value];
           "exists"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "exists"[value];
           "filter"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "filter"[value];
           "filter_map"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "filter_map"[value];
           "find"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find"[value];
           "find_first"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_first"[value];
           "find_first_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_first_opt"[value];
           "find_last"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_last"[value];
           "find_last_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_last_opt"[value];
           "find_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "find_opt"[value];
           "fold"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "fold"[value];
           "for_all"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "for_all"[value];
           "inter"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "inter"[value];
           "is_empty"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "is_empty"[value];
           "iter"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "iter"[value];
           "map"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "map"[value];
           "max_elt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "max_elt"[value];
           "max_elt_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "max_elt_opt"[value];
           "mem"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "mem"[value];
           "min_elt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "min_elt"[value];
           "min_elt_opt"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "min_elt_opt"[value];
           "of_list"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "of_list"[value];
           "of_seq"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "of_seq"[value];
           "partition"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "partition"[value];
           "remove"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "remove"[value];
           "singleton"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "singleton"[value];
           "split"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "split"[value];
           "subset"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "subset"[value];
           "t"[type] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "t"[type];
           "to_list"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_list"[value];
           "to_rev_seq"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_rev_seq"[value];
           "to_seq"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_seq"[value];
           "to_seq_from"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "to_seq_from"[value];
           "union"[value] ->
             CU Stdlib . "Set"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.252>
              "buffer"[value] -> <Dune__exe__GrammarFunctor.233>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.209>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.216>;
              "is_terminal"[value] -> <Dune__exe__GrammarFunctor.207>;
              "lequal"[value] -> <Dune__exe__GrammarFunctor.219>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.250>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.226>;
              "nonterminal"[value] -> <Dune__exe__GrammarFunctor.232>;
              "print"[value] -> <Dune__exe__GrammarFunctor.229>;
              "printa"[value] -> <Dune__exe__GrammarFunctor.246>;
              "printao"[value] -> <Dune__exe__GrammarFunctor.243>;
              "printaod"[value] -> <Dune__exe__GrammarFunctor.234>;
              "printl"[value] -> <Dune__exe__GrammarFunctor.248>;
              "t"[type] -> <Dune__exe__GrammarFunctor.204>;
              })
             . "union"[value];
           };
        "Terminal"[module] ->
          {<Dune__exe__GrammarFunctor.193>
           "Word"[module] ->
             Abs<Dune__exe__GrammarFunctor.192>
                (X/1537,
                 {
                  "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                  "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                  "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                  "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                  "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                  "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                  "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                  "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                  "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                  "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                  });
           "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
           "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
           "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
           "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
           "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
           "error"[value] -> <Dune__exe__GrammarFunctor.102>;
           "every_token_has_an_alias"[value] ->
             <Dune__exe__GrammarFunctor.143>;
           "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
           "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
           "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
           "init"[value] -> <Dune__exe__GrammarFunctor.119>;
           "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
           "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
           "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
           "map"[value] -> <Dune__exe__GrammarFunctor.126>;
           "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
           "n"[value] -> <Dune__exe__GrammarFunctor.93>;
           "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
           "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
           "print"[value] -> <Dune__exe__GrammarFunctor.97>;
           "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
           "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
           "real"[value] -> <Dune__exe__GrammarFunctor.105>;
           "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
           "t"[type] -> <Dune__exe__GrammarFunctor.84>;
           "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
           "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
           };
        "TerminalMap"[module] ->
          (CU Dune__exe . "Patricia"[module] .
          "Big"[module])<Dune__exe__GrammarFunctor.203>;
        "TerminalSet"[module] ->
          {<Dune__exe__GrammarFunctor.202>
           "add"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "add"[value];
           "cardinal"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "cardinal"[value];
           "choose"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "choose"[value];
           "compare"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "compare"[value];
           "disjoint"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "disjoint"[value];
           "element"[type] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "element"[type];
           "elements"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "elements"[value];
           "empty"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "empty"[value];
           "equal"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "equal"[value];
           "fold"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "fold"[value];
           "inter"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "inter"[value];
           "is_empty"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "is_empty"[value];
           "is_singleton"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "is_singleton"[value];
           "iter"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "iter"[value];
           "mem"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "mem"[value];
           "print"[value] -> <Dune__exe__GrammarFunctor.194>;
           "remove"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "remove"[value];
           "singleton"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "singleton"[value];
           "subset"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "subset"[value];
           "t"[type] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "t"[type];
           "union"[value] ->
             CU Dune__exe . "BoundedBitSet"[module] . "Make"[module](
             {<Dune__exe__GrammarFunctor.193>
              "Word"[module] ->
                Abs<Dune__exe__GrammarFunctor.192>
                   (X/1537,
                    {
                     "append"[value] -> <Dune__exe__GrammarFunctor.166>;
                     "compare"[value] -> <Dune__exe__GrammarFunctor.189>;
                     "decode"[value] -> <Dune__exe__GrammarFunctor.160>;
                     "elements"[value] -> <Dune__exe__GrammarFunctor.181>;
                     "encode"[value] -> <Dune__exe__GrammarFunctor.159>;
                     "epsilon"[value] -> <Dune__exe__GrammarFunctor.163>;
                     "first"[value] -> <Dune__exe__GrammarFunctor.173>;
                     "length"[value] -> <Dune__exe__GrammarFunctor.171>;
                     "print"[value] -> <Dune__exe__GrammarFunctor.184>;
                     "singleton"[value] -> <Dune__exe__GrammarFunctor.164>;
                     "verbose"[value] -> <Dune__exe__GrammarFunctor.161>;
                     "word"[type] -> <Dune__exe__GrammarFunctor.162>;
                     });
              "alias"[value] -> <Dune__exe__GrammarFunctor.144>;
              "associativity"[value] -> <Dune__exe__GrammarFunctor.115>;
              "attributes"[value] -> <Dune__exe__GrammarFunctor.156>;
              "compare"[value] -> <Dune__exe__GrammarFunctor.89>;
              "eof"[value] -> <Dune__exe__GrammarFunctor.155>;
              "equal"[value] -> <Dune__exe__GrammarFunctor.90>;
              "error"[value] -> <Dune__exe__GrammarFunctor.102>;
              "every_token_has_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.143>;
              "fold"[value] -> <Dune__exe__GrammarFunctor.123>;
              "foldx"[value] -> <Dune__exe__GrammarFunctor.128>;
              "i2t"[value] -> <Dune__exe__GrammarFunctor.87>;
              "init"[value] -> <Dune__exe__GrammarFunctor.119>;
              "iter"[value] -> <Dune__exe__GrammarFunctor.121>;
              "iter_real"[value] -> <Dune__exe__GrammarFunctor.133>;
              "lookup"[value] -> <Dune__exe__GrammarFunctor.99>;
              "map"[value] -> <Dune__exe__GrammarFunctor.126>;
              "mapx"[value] -> <Dune__exe__GrammarFunctor.131>;
              "n"[value] -> <Dune__exe__GrammarFunctor.93>;
              "name"[value] -> <Dune__exe__GrammarFunctor.94>;
              "non_error"[value] -> <Dune__exe__GrammarFunctor.107>;
              "ocamltype"[value] -> <Dune__exe__GrammarFunctor.117>;
              "precedence_level"[value] -> <Dune__exe__GrammarFunctor.113>;
              "print"[value] -> <Dune__exe__GrammarFunctor.97>;
              "print_concrete"[value] -> <Dune__exe__GrammarFunctor.152>;
              "pseudo"[value] -> <Dune__exe__GrammarFunctor.103>;
              "real"[value] -> <Dune__exe__GrammarFunctor.105>;
              "sharp"[value] -> <Dune__exe__GrammarFunctor.101>;
              "t"[type] -> <Dune__exe__GrammarFunctor.84>;
              "t2i"[value] -> <Dune__exe__GrammarFunctor.85>;
              "token_properties"[value] -> <Dune__exe__GrammarFunctor.109>;
              "tokens_without_an_alias"[value] ->
                <Dune__exe__GrammarFunctor.136>;
              "unquoted_alias"[value] -> <Dune__exe__GrammarFunctor.146>;
              })(
             {
              })
             . "union"[value];
           "universe"[value] -> <Dune__exe__GrammarFunctor.197>;
           };
        "diagnostics"[value] -> <Dune__exe__GrammarFunctor.721>;
        "grammar_uses_error_token"[value] -> <Dune__exe__GrammarFunctor.434>;
        });
 }

(let
  (Make/3822 =
     (function G/15356 */15355 is_a_functor
       (let
         (G/488 =a G/15356
          */15097 =a */15355
          index/489 =
            (function strings/491
              (let
                (name/540 =
                   (apply (field_imm 9 (global Stdlib__Array!)) strings/491)
                 *match*/15101 =
                   (apply (field_imm 25 (global Stdlib__List!))
                     (function param/708 s/659
                       (let
                         (map/658 =a (field_imm 1 param/708)
                          n/657 =a (field_imm 0 param/708))
                         (makeblock 0 (int,*) (+ n/657 1)
                           (apply
                             (field_imm 1 (global Dune__exe__StringMap!))
                             s/659 n/657 map/658))))
                     (makeblock 0 (int,*) 0
                       (field_imm 0 (global Dune__exe__StringMap!)))
                     strings/491)
                 map/542 =a (field_imm 1 *match*/15101)
                 n/541 =a (field_imm 0 *match*/15101))
                (makeblock 0 (int,*,*) n/541 name/540 map/542)))
          TokPrecedence/990 =
            (let
              (ever_useful/755 =
                 (makemutable 0 (field_imm 0 (global Dune__exe__StringSet!)))
               use/756 =
                 (function id/758 : int
                   (setfield_ptr 0 ever_useful/755
                     (apply (field_imm 1 (global Dune__exe__StringSet!))
                       id/758 (field_mut 0 ever_useful/755))))
               levelip/805 =
                 (function id/807 properties/808
                   (makeblock 0
                     (makemutable 246
                       (function param/15102 (apply use/756 id/807)))
                     (field_mut 6 properties/808)))
               leveli/809 =
                 (function id/811
                   (let
                     (properties/812 =
                        (try
                          (apply
                            (field_imm 15 (global Dune__exe__StringMap!))
                            id/811 (field_imm 5 (field_imm 0 G/488)))
                         with exn/15103
                          (catch
                            (if (== exn/15103 (field_imm 7 (global Stdlib!)))
                              (raise
                                (makeblock 0 (global Assert_failure/28!)
                                  [0: "src/grammarFunctor.ml" 76 8]))
                              (exit 4))
                           with (4) (reraise exn/15103))))
                     (apply levelip/805 id/811 properties/812)))
               diagnostics/868 =
                 (function param/989[int] : int
                   (apply (field_imm 21 (global Dune__exe__StringMap!))
                     (function id/870 properties/871 : int
                       (if
                         (not
                           (apply
                             (field_imm 29 (global Dune__exe__StringSet!))
                             id/870 (field_mut 0 ever_useful/755)))
                         (let (*match*/15104 = (field_mut 6 properties/871))
                           (if (isint *match*/15104) 0
                             (let
                               (pos2/873 =a (field_imm 3 *match*/15104)
                                pos1/872 =a (field_imm 2 *match*/15104)
                                *match*/15106 =a (field_imm 1 *match*/15104)
                                *match*/15105 =a (field_imm 0 *match*/15104))
                               (apply
                                 (field_imm 13 (global Dune__exe__Error!))
                                 (makeblock 0
                                   (apply
                                     (field_imm 19
                                       (global Dune__exe__Positions!))
                                     (makeblock 0 pos1/872 pos2/873))
                                   0)
                                 [0:
                                  [11:
                                   "the precedence level assigned to "
                                   [2: 0 [11: " is never useful." 0]]]
                                  "the precedence level assigned to %s is never useful."]
                                 id/870))))
                         0))
                     (field_imm 5 (field_imm 0 G/488)))))
              (makeblock 0 ever_useful/755 use/756 levelip/805 leveli/809
                diagnostics/868))
          Nonterminal/1110 =
            (let
              (n2i/992 = (function i/994 i/994)
               equal/995 =
                 (function nt1/997[int] nt2/998[int] : int
                   (== nt1/997 nt2/998))
               compare/999 =
                 (function prim/15109 prim/15108 stub
                   (- prim/15109 prim/15108))
               new_start_nonterminals/1000 =
                 (apply (field_imm 23 (global Dune__exe__StringSet!))
                   (function symbol/1001 ss/1002
                     (makeblock 0
                       (apply (field_imm 27 (global Stdlib!)) symbol/1001
                         "'")
                       ss/1002))
                   (field_imm 3 (field_imm 0 G/488)) 0)
               original_nonterminals/1003 =
                 (apply (field_imm 8 (global Dune__exe__BasicSyntax!))
                   (field_imm 0 G/488))
               start/1004 =[int]
                 (apply (field_imm 0 (global Stdlib__List!))
                   new_start_nonterminals/1000)
               *match*/15127 =
                 (apply index/489
                   (apply (field_imm 36 (global Stdlib!))
                     new_start_nonterminals/1000 original_nonterminals/1003))
               map/1007 =a (field_imm 2 *match*/15127)
               name/1006 =a (field_imm 1 *match*/15127)
               n/1005 =a (field_imm 0 *match*/15127)
               *match*/15122 =
                 (if (field_imm 1 G/488)
                   (apply (field_imm 2 (global Dune__exe__Error!)) 1
                     (function f/1008 : int
                       (apply (field_imm 0 (global Stdlib__Printf!)) f/1008
                         [0:
                          [11:
                           "Grammar has "
                           [4:
                            0 0 0
                            [11:
                             " nonterminal symbols, among which "
                             [4: 0 0 0 [11: " start symbols.\n" 0]]]]]
                          "Grammar has %d nonterminal symbols, among which %d start symbols.\n"]
                         (- n/1005 start/1004) start/1004)))
                   0)
               is_internal_start/1022 =
                 (function nt/1024[int] : int (< nt/1024 start/1004))
               is_user_start/1025 =
                 (function nt/1027[int] : int
                   (apply (field_imm 29 (global Dune__exe__StringSet!))
                     (array.get[addr] name/1006 nt/1027)
                     (field_imm 3 (field_imm 0 G/488))))
               print/1028 =
                 (function normalize/1029[int] nt/1030[int]
                   (if normalize/1029
                     (apply (field_imm 21 (global Dune__exe__Misc!))
                       (array.get[addr] name/1006 nt/1030))
                     (array.get[addr] name/1006 nt/1030)))
               lookup/1067 =
                 (function name/1069 : int
                   (apply (field_imm 15 (global Dune__exe__StringMap!))
                     name/1069 map/1007))
               positions/1070 =
                 (function nt/1072[int]
                   (field_imm 1
                     (apply (field_imm 15 (global Dune__exe__StringMap!))
                       (apply print/1028 0 nt/1072)
                       (field_imm 8 (field_imm 0 G/488)))))
               init/1073 =
                 (function f/1075
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1005
                     f/1075))
               iter/1076 =
                 (function f/1077 : int
                   (apply (field_imm 10 (global Dune__exe__Misc!)) n/1005
                     f/1077))
               fold/1078 =
                 (function f/1080 accu/1081
                   (apply (field_imm 12 (global Dune__exe__Misc!)) n/1005
                     f/1080 accu/1081))
               map/1082 =
                 (function f/1083
                   (apply (field_imm 16 (global Dune__exe__Misc!)) n/1005
                     f/1083))
               iterx/1084 =
                 (function f/1086 : int
                   (for nt/1087 start/1004 to (- n/1005 1)
                     (apply f/1086 nt/1087)))
               foldx/1088 =
                 (function f/1090 accu/1091
                   (apply (field_imm 13 (global Dune__exe__Misc!)) start/1004
                     n/1005 f/1090 accu/1091))
               ocamltype/1092 =
                 (function nt/1094[int]
                   (seq
                     (if (not (apply is_internal_start/1022 nt/1094)) 0
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 174 4])))
                     (try
                       (makeblock 0
                         (apply (field_imm 15 (global Dune__exe__StringMap!))
                           (apply print/1028 0 nt/1094)
                           (field_imm 4 (field_imm 0 G/488))))
                      with exn/15110
                       (catch
                         (if (== exn/15110 (field_imm 7 (global Stdlib!))) 0
                           (exit 8))
                        with (8) (reraise exn/15110)))))
               ocamltype_of_start_symbol/1095 =
                 (function nt/1096[int]
                   (let (*match*/15111 = (apply ocamltype/1092 nt/1096))
                     (if (isint *match*/15111)
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 186 8]))
                       (let (typ/1097 =a (field_imm 0 *match*/15111))
                         typ/1097))))
               tabulate/1100 =
                 (function f/1102
                   (apply
                     (function prim/15113 prim/15112 stub
                       (array.get[gen] prim/15113 prim/15112))
                     (apply (field_imm 0 (global Stdlib__Array!)) n/1005
                       f/1102)))
               attributes/1103 = (caml_make_vect n/1005 0)
               *match*/15118 =
                 (apply (field_imm 21 (global Dune__exe__StringMap!))
                   (function nonterminal/1104 param/1107 : int
                     (let
                       (attrs/1105 =a (field_imm 3 param/1107)
                        *match*/15116 =a (field_int 2 param/1107)
                        *match*/15115 =a (field_imm 1 param/1107)
                        *match*/15114 =a (field_imm 0 param/1107)
                        nt/1106 =[int] (apply lookup/1067 nonterminal/1104))
                       (array.set[addr] attributes/1103 nt/1106 attrs/1105)))
                   (field_imm 8 (field_imm 0 G/488)))
               attributes/1108 =
                 (function nt/1109[int]
                   (array.get[addr] attributes/1103 nt/1109)))
              (makeblock 0 n2i/992 equal/995 compare/999
                new_start_nonterminals/1000 original_nonterminals/1003
                start/1004 n/1005 name/1006 is_internal_start/1022
                is_user_start/1025 print/1028 lookup/1067 positions/1070
                init/1073 iter/1076 fold/1078 map/1082 iterx/1084 foldx/1088
                ocamltype/1092 ocamltype_of_start_symbol/1095 tabulate/1100
                attributes/1108))
          Terminal/1588 =
            (let
              (t2i/1151 = (function i/1153 i/1153)
               i2t/1154 = (function i/1156 i/1156)
               compare/1157 =
                 (function prim/15129 prim/15128 stub
                   (- prim/15129 prim/15128))
               equal/1158 =
                 (function tok1/1160[int] tok2/1161[int] : int
                   (== tok1/1160 tok2/1161))
               *match*/15160 =
                 (let
                   (tokens/1165 =
                      (apply (field_imm 6 (global Dune__exe__BasicSyntax!))
                        (field_imm 0 G/488)))
                   (catch
                     (if (isint tokens/1165)
                       (if (field_imm 1 G/488)
                         (apply (field_imm 5 (global Dune__exe__Error!)) 0
                           [0:
                            [11: "no tokens have been declared." 0]
                            "no tokens have been declared."])
                         (exit 22))
                       (exit 22))
                    with (22)
                     (apply index/489
                       (apply (field_imm 36 (global Stdlib!))
                         (makeblock 0 "error" tokens/1165) [0: "#" 0]))))
               map/1164 =a (field_imm 2 *match*/15160)
               name/1163 =a (field_imm 1 *match*/15160)
               n/1162 =a (field_imm 0 *match*/15160)
               print/1166 =
                 (function tok/1167[int]
                   (array.get[addr] name/1163 tok/1167))
               lookup/1168 =
                 (function name/1170 : int
                   (apply (field_imm 15 (global Dune__exe__StringMap!))
                     name/1170 map/1164))
               sharp/1171 =[int] (apply lookup/1168 "#")
               error/1172 =[int] (apply lookup/1168 "error")
               pseudo/1173 =
                 (function tok/1175[int] : int
                   (|| (== tok/1175 sharp/1171) (== tok/1175 error/1172)))
               real/1176 =
                 (function t/1178[int] : int
                   (&& (!= error/1172 t/1178) (!= t/1178 sharp/1171)))
               non_error/1179 =
                 (function tok/1181[int] : int (!= tok/1181 error/1172))
               token_properties/1182 =
                 (let
                   (not_so_dummy_properties/1183 =
                      (makemutable 0 (*,*,*,*,*,int,*,int) "__primitives__" 0
                        (field_imm 11 (global Dune__exe__Positions!)) 0 0 3 0
                        1))
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1162
                     (function tok/1184[int]
                       (try
                         (apply (field_imm 15 (global Dune__exe__StringMap!))
                           (array.get[addr] name/1163 tok/1184)
                           (field_imm 5 (field_imm 0 G/488)))
                        with exn/15130
                         (catch
                           (if (== exn/15130 (field_imm 7 (global Stdlib!)))
                             (seq
                               (if
                                 (|| (== tok/1184 sharp/1171)
                                   (== tok/1184 error/1172))
                                 0
                                 (raise
                                   (makeblock 0 (global Assert_failure/28!)
                                     [0: "src/grammarFunctor.ml" 285 9])))
                               not_so_dummy_properties/1183)
                             (exit 23))
                          with (23) (reraise exn/15130))))))
               *match*/15151 =
                 (if (field_imm 1 G/488)
                   (apply (field_imm 2 (global Dune__exe__Error!)) 1
                     (function f/1185 : int
                       (apply (field_imm 0 (global Stdlib__Printf!)) f/1185
                         [0:
                          [11:
                           "Grammar has "
                           [4: 0 0 0 [11: " terminal symbols.\n" 0]]]
                          "Grammar has %d terminal symbols.\n"]
                         (- n/1162 2))))
                   0)
               precedence_level/1186 =
                 (function tok/1188[int]
                   (apply (field_imm 2 TokPrecedence/990)
                     (apply print/1166 tok/1188)
                     (array.get[addr] token_properties/1182 tok/1188)))
               associativity/1189 =
                 (function tok/1191[int] : int
                   (field_int 5
                     (array.get[addr] token_properties/1182 tok/1191)))
               ocamltype/1192 =
                 (function tok/1194[int]
                   (field_imm 1
                     (array.get[addr] token_properties/1182 tok/1194)))
               init/1195 =
                 (function f/1197
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1162
                     f/1197))
               iter/1198 =
                 (function f/1199 : int
                   (apply (field_imm 10 (global Dune__exe__Misc!)) n/1162
                     f/1199))
               fold/1200 =
                 (function f/1202 accu/1203
                   (apply (field_imm 12 (global Dune__exe__Misc!)) n/1162
                     f/1202 accu/1203))
               map/1204 =
                 (function f/1205
                   (apply (field_imm 16 (global Dune__exe__Misc!)) n/1162
                     f/1205))
               *match*/15148 =
                 (if (== sharp/1171 (- n/1162 1)) 0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/grammarFunctor.ml" 317 4])))
               foldx/1206 =
                 (function f/1208 accu/1209
                   (apply (field_imm 12 (global Dune__exe__Misc!)) sharp/1171
                     f/1208 accu/1209))
               mapx/1210 =
                 (function f/1212
                   (apply (field_imm 16 (global Dune__exe__Misc!)) sharp/1171
                     f/1212))
               *match*/15146 =
                 (if (== error/1172 0) 0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/grammarFunctor.ml" 324 4])))
               iter_real/1213 =
                 (function f/1215 : int
                   (for i/1216 1 to (- n/1162 2) (apply f/1215 i/1216)))
               tokens_without_an_alias/1217 =
                 (let (accu/1218 = (makemutable 0 0))
                   (seq
                     (apply iter_real/1213
                       (function tok/1219[int] : int
                         (let
                           (properties/1220 =
                              (array.get[addr] token_properties/1182
                                tok/1219))
                           (if (== (field_imm 3 properties/1220) 0)
                             (setfield_ptr 0 accu/1218
                               (makeblock 0 (int,*) tok/1219
                                 (field_mut 0 accu/1218)))
                             0))))
                     (apply (field_imm 9 (global Stdlib__List!))
                       (field_mut 0 accu/1218))))
               *match*/15144 =
                 (if
                   (&& (field_imm 1 G/488)
                     (field_imm 51 (global Dune__exe__Settings!)))
                   (apply (field_imm 17 (global Stdlib__List!))
                     (function tok/1281[int] : int
                       (let
                         (properties/1282 =
                            (array.get[addr] token_properties/1182 tok/1281)
                          pos/1283 = (field_imm 2 properties/1282))
                         (apply (field_imm 13 (global Dune__exe__Error!))
                           (makeblock 0 pos/1283 0)
                           [0:
                            [11:
                             "no alias has been defined for the token "
                             [2: 0 [12: '.' 0]]]
                            "no alias has been defined for the token %s."]
                           (apply print/1166 tok/1281))))
                     tokens_without_an_alias/1217)
                   0)
               every_token_has_an_alias/1284 =[int]
                 (== tokens_without_an_alias/1217 0)
               alias/1285 =
                 (function tok/1287[int]
                   (field_imm 3
                     (array.get[addr] token_properties/1182 tok/1287)))
               unquoted_alias/1288 =
                 (function tok/1290[int]
                   (apply (field_imm 1 (global Dune__exe__Option!))
                     (function qid/1302
                       (seq
                         (if (== (string.get qid/1302 0) '"') 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 357 6])))
                         (let
                           (qid/1372 =
                              (apply (field_imm 15 (global Stdlib__String!))
                                qid/1302 1 (- (string.length qid/1302) 1))
                            lexbuf/1373 =
                              (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                                qid/1372))
                           (apply (field_imm 4 (global Dune__exe__Misc!)) 8
                             (function b/1398 : int
                               (apply
                                 (field_imm 40 (global Dune__exe__Lexer!))
                                 b/1398 lexbuf/1373))))))
                     (apply alias/1285 tok/1290)))
               print_concrete/1529 =
                 (function t/1531[int]
                   (let (*match*/15132 = (apply unquoted_alias/1288 t/1531))
                     (if (isint *match*/15132) (apply print/1166 t/1531)
                       (let (alias/1532 =a (field_imm 0 *match*/15132))
                         alias/1532))))
               eof/1533 =
                 (try (makeblock 0 (int) (apply lookup/1168 "EOF"))
                  with exn/15133
                   (catch
                     (if (== exn/15133 (field_imm 7 (global Stdlib!))) 0
                       (exit 24))
                    with (24) (reraise exn/15133)))
               attributes/1534 =
                 (function tok/1536[int]
                   (field_imm 4
                     (array.get[addr] token_properties/1182 tok/1536)))
               Word/1587 =
                 (function X/15141 is_a_functor
                   (let
                     (X/1537 =a X/15141
                      *match*/15140 =
                        (if (<= n/1162 256) 0
                          (raise
                            (makeblock 0 (global Assert_failure/28!)
                              [0: "src/grammarFunctor.ml" 406 6])))
                      *match*/15138 =
                        (apply (field_imm 24 (global Dune__exe__Misc!)) 1024)
                      verbose/1540 =a (field_imm 2 *match*/15138)
                      decode/1539 =a (field_imm 1 *match*/15138)
                      encode/1538 =a (field_imm 0 *match*/15138)
                      epsilon/1542 =[int] (apply encode/1538 "")
                      singleton/1543 =
                        (function t/1545[int] : int
                          (apply encode/1538
                            (apply (field_imm 0 (global Stdlib__String!)) 1
                              (apply (field_imm 0 (global Stdlib__Char!))
                                t/1545))))
                      append/1557 =
                        (function i1/1559[int] i2/1560[int] : int
                          (let
                            (w1/1561 = (apply decode/1539 i1/1559)
                             w2/1562 = (apply decode/1539 i2/1560))
                            (if (== (string.length w1/1561) 0) i2/1560
                              (if (== (string.length w2/1562) 0) i1/1559
                                (apply encode/1538
                                  (apply (field_imm 27 (global Stdlib!))
                                    w1/1561 w2/1562))))))
                      length/1563 =
                        (function i/1565[int] : int
                          (string.length (apply decode/1539 i/1565)))
                      first/1566 =
                        (function i/1568[int] z/1569[int] : int
                          (let (w/1570 = (apply decode/1539 i/1568))
                            (if (> (string.length w/1570) 0)
                              (string.get w/1570 0) z/1569))))
                     (letrec
                       (elements/1571
                          (function i/1572[int] n/1573[int] w/1574
                            (if (== i/1572 n/1573) 0
                              (makeblock 0 (int,*) (string.get w/1574 i/1572)
                                (apply elements/1571 (+ i/1572 1) n/1573
                                  w/1574)))))
                       (let
                         (elements/1575 =
                            (function i/1576[int]
                              (let (w/1577 = (apply decode/1539 i/1576))
                                (apply elements/1571 0 (string.length w/1577)
                                  w/1577)))
                          print/1578 =
                            (function i/1579[int]
                              (let (w/1580 = (apply decode/1539 i/1579))
                                (apply
                                  (field_imm 5 (global Dune__exe__Misc!))
                                  (function c/1581[int]
                                    (apply print/1166 c/1581))
                                  " "
                                  (function f/1582 : int
                                    (apply
                                      (field_imm 29 (global Stdlib__String!))
                                      f/1582 w/1580)))))
                          compare/1583 =
                            (function i1/1584[int] i2/1585[int] : int
                              (apply
                                (field_imm 0 (global Dune__exe__Generic!))
                                (apply decode/1539 i1/1584)
                                (apply decode/1539 i2/1585))))
                         (makeblock 0 encode/1538 decode/1539 verbose/1540
                           epsilon/1542 singleton/1543 append/1557
                           length/1563 first/1566 elements/1575 print/1578
                           compare/1583))))))
              (makeblock 0 t2i/1151 i2t/1154 compare/1157 equal/1158 n/1162
                name/1163 print/1166 lookup/1168 sharp/1171 error/1172
                pseudo/1173 real/1176 non_error/1179 token_properties/1182
                precedence_level/1186 associativity/1189 ocamltype/1192
                init/1195 iter/1198 fold/1200 map/1204 foldx/1206 mapx/1210
                iter_real/1213 tokens_without_an_alias/1217
                every_token_has_an_alias/1284 alias/1285 unquoted_alias/1288
                print_concrete/1529 eof/1533 attributes/1534 Word/1587))
          TerminalSet/1666 =
            (let
              (include/15161 =
                 (apply
                   (apply
                     (let
                       (let/15162 =
                          (field_imm 0 (global Dune__exe__BoundedBitSet!)))
                       (field_imm 0 (global Dune__exe__BoundedBitSet!)))
                     (makeblock 0 (field_mut 4 Terminal/1588)))
                   0)
               empty/1637 =a (field_mut 0 include/15161)
               is_empty/1638 =a (field_mut 1 include/15161)
               singleton/1639 =a (field_mut 2 include/15161)
               is_singleton/1640 =a (field_mut 3 include/15161)
               cardinal/1641 =a (field_mut 4 include/15161)
               choose/1642 =a (field_mut 5 include/15161)
               mem/1643 =a (field_mut 6 include/15161)
               add/1644 =a (field_mut 7 include/15161)
               remove/1645 =a (field_mut 8 include/15161)
               union/1646 =a (field_mut 9 include/15161)
               inter/1647 =a (field_mut 10 include/15161)
               disjoint/1648 =a (field_mut 11 include/15161)
               iter/1649 =a (field_mut 12 include/15161)
               fold/1650 =a (field_mut 13 include/15161)
               elements/1651 =a (field_mut 14 include/15161)
               compare/1652 =a (field_mut 15 include/15161)
               equal/1653 =a (field_mut 16 include/15161)
               subset/1654 =a (field_mut 17 include/15161)
               print/1655 =
                 (function toks/1656
                   (apply (field_imm 5 (global Dune__exe__Misc!))
                     (field_imm 6 Terminal/1588) " "
                     (function f/1658 : int
                       (apply iter/1649 f/1658 toks/1656))))
               universe/1659 =
                 (apply remove/1645 (field_imm 8 Terminal/1588)
                   (apply remove/1645 (field_imm 9 Terminal/1588)
                     (apply (field_imm 19 Terminal/1588) add/1644 empty/1637)))
               bottom/1661 = empty/1637
               is_maximal/1662 = (function param/1664 : int 0)
               leq_join/1665 = union/1646)
              (makeblock 0 empty/1637 is_empty/1638 singleton/1639
                is_singleton/1640 cardinal/1641 choose/1642 mem/1643 add/1644
                remove/1645 union/1646 inter/1647 disjoint/1648 iter/1649
                fold/1650 elements/1651 compare/1652 equal/1653 subset/1654
                print/1655 universe/1659 bottom/1661 is_maximal/1662
                leq_join/1665))
          Symbol/1729 =
            (let
              (is_terminal/1671 =
                 (function sym/1673 : int
                   (switch* sym/1673
                    case tag 0:
                     (let (*match*/15163 =a (field_imm 0 sym/1673)) 0)
                    case tag 1:
                     (let (*match*/15164 =a (field_imm 0 sym/1673)) 1)))
               compare/1674 =
                 (function sym1/1675 sym2/1676 : int
                   (switch* sym1/1675
                    case tag 0:
                     (let (nt1/1677 =a (field_imm 0 sym1/1675))
                       (switch* sym2/1676
                        case tag 0:
                         (let (nt2/1678 =a (field_imm 0 sym2/1676))
                           (apply (field_imm 2 Nonterminal/1110) nt1/1677
                             nt2/1678))
                        case tag 1:
                         (let (*match*/15165 =a (field_imm 0 sym2/1676)) 1)))
                    case tag 1:
                     (let (tok1/1679 =a (field_imm 0 sym1/1675))
                       (switch* sym2/1676
                        case tag 0:
                         (let (*match*/15166 =a (field_imm 0 sym2/1676)) -1)
                        case tag 1:
                         (let (tok2/1680 =a (field_imm 0 sym2/1676))
                           (apply (field_imm 2 Terminal/1588) tok1/1679
                             tok2/1680))))))
               equal/1681 =
                 (function sym1/1683 sym2/1684 : int
                   (== (apply compare/1674 sym1/1683 sym2/1684) 0)))
              (letrec
                (lequal/1685
                   (function syms1/1686 syms2/1687 : int
                     (catch
                       (if (isint syms1/1686)
                         (if (isint syms2/1687) 1
                           (let
                             (*match*/15168 =a (field_imm 1 syms2/1687)
                              *match*/15167 =a (field_imm 0 syms2/1687))
                             (exit 49)))
                         (if (isint syms2/1687) (exit 49)
                           (let
                             (syms2/1691 =a (field_imm 1 syms2/1687)
                              sym2/1690 =a (field_imm 0 syms2/1687)
                              syms1/1689 =a (field_imm 1 syms1/1686)
                              sym1/1688 =a (field_imm 0 syms1/1686))
                             (&& (apply equal/1681 sym1/1688 sym2/1690)
                               (apply lequal/1685 syms1/1689 syms2/1691)))))
                      with (49) 0)))
                (let
                  (non_error/1692 =
                     (function sym/1694 : int
                       (switch* sym/1694
                        case tag 0:
                         (let (*match*/15169 =a (field_imm 0 sym/1694)) 1)
                        case tag 1:
                         (let (tok/1695 =a (field_imm 0 sym/1694))
                           (apply (field_imm 12 Terminal/1588) tok/1695))))
                   print/1696 =
                     (function param/1699
                       (switch* param/1699
                        case tag 0:
                         (let (nt/1697 =a (field_imm 0 param/1699))
                           (apply (field_imm 10 Nonterminal/1110) 0 nt/1697))
                        case tag 1:
                         (let (tok/1698 =a (field_imm 0 param/1699))
                           (apply (field_imm 6 Terminal/1588) tok/1698))))
                   nonterminal/1700 =
                     (function param/1702 : int
                       (switch* param/1702
                        case tag 0:
                         (let (*match*/15171 =a (field_imm 0 param/1702)) 1)
                        case tag 1:
                         (let (*match*/15170 =a (field_imm 0 param/1702)) 0)))
                   buffer/1703 =
                     (apply (field_imm 0 (global Stdlib__Buffer!)) 1024)
                   printaod/1704 =
                     (function offset/1706[int] dot/1707[int] symbols/1708
                       (let
                         (length/1709 =[int]
                            (array.length[addr] symbols/1708)
                          first/1710 = (makemutable 0 (int) 1)
                          separate/1711 =
                            (function param/1713[int] : int
                              (seq
                                (if (not (field_int 0 first/1710))
                                  (apply
                                    (field_imm 4 (global Stdlib__Printf!))
                                    buffer/1703 [0: [12: ' ' 0] " "])
                                  0)
                                (setfield_imm 0 first/1710 0))))
                         (seq
                           (for i/1714 offset/1706 to length/1709
                             (seq
                               (if (== i/1714 dot/1707)
                                 (seq (apply separate/1711 0)
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     buffer/1703 [0: [12: '.' 0] "."]))
                                 0)
                               (if (< i/1714 length/1709)
                                 (seq (apply separate/1711 0)
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     buffer/1703 [0: [2: 0 0] "%s"]
                                     (apply print/1696
                                       (array.get[addr] symbols/1708 i/1714))))
                                 0)))
                           (let
                             (s/1715 =
                                (apply (field_imm 1 (global Stdlib__Buffer!))
                                  buffer/1703))
                             (seq
                               (apply (field_imm 7 (global Stdlib__Buffer!))
                                 buffer/1703)
                               s/1715)))))
                   printao/1716 =
                     (function offset/1718[int] symbols/1719
                       (apply printaod/1704 offset/1718 -1 symbols/1719))
                   printa/1720 =
                     (function symbols/1722
                       (apply printao/1716 0 symbols/1722))
                   printl/1723 =
                     (function symbols/1725
                       (apply printa/1720
                         (apply (field_imm 9 (global Stdlib__Array!))
                           symbols/1725)))
                   lookup/1726 =
                     (function name/1728
                       (try
                         (makeblock 1 (int)
                           (apply (field_imm 7 Terminal/1588) name/1728))
                        with exn/15172
                         (catch
                           (if (== exn/15172 (field_imm 7 (global Stdlib!)))
                             (try
                               (makeblock 0 (int)
                                 (apply (field_imm 11 Nonterminal/1110)
                                   name/1728))
                              with exn/15173
                               (catch
                                 (if
                                   (== exn/15173
                                     (field_imm 7 (global Stdlib!)))
                                   (raise
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "src/grammarFunctor.ml" 609 8]))
                                   (exit 50))
                                with (50) (reraise exn/15173)))
                             (exit 51))
                          with (51) (reraise exn/15172)))))
                  (makeblock 0 is_terminal/1671 compare/1674 equal/1681
                    lequal/1685 non_error/1692 print/1696 nonterminal/1700
                    buffer/1703 printaod/1704 printao/1716 printa/1720
                    printl/1723 lookup/1726))))
          SymbolSet/1972 =
            (let
              (include/15174 =
                 (apply
                   (let (let/15175 = (field_imm 0 (global Stdlib__Set!)))
                     (field_imm 0 (global Stdlib__Set!)))
                   (makeblock 0 (field_mut 1 Symbol/1729)))
               empty/1833 =a (field_mut 0 include/15174)
               add/1834 =a (field_mut 1 include/15174)
               singleton/1835 =a (field_mut 2 include/15174)
               remove/1836 =a (field_mut 3 include/15174)
               union/1837 =a (field_mut 4 include/15174)
               inter/1838 =a (field_mut 5 include/15174)
               disjoint/1839 =a (field_mut 6 include/15174)
               diff/1840 =a (field_mut 7 include/15174)
               cardinal/1841 =a (field_mut 8 include/15174)
               elements/1842 =a (field_mut 9 include/15174)
               min_elt/1843 =a (field_mut 10 include/15174)
               min_elt_opt/1844 =a (field_mut 11 include/15174)
               max_elt/1845 =a (field_mut 12 include/15174)
               max_elt_opt/1846 =a (field_mut 13 include/15174)
               choose/1847 =a (field_mut 14 include/15174)
               choose_opt/1848 =a (field_mut 15 include/15174)
               find/1849 =a (field_mut 16 include/15174)
               find_opt/1850 =a (field_mut 17 include/15174)
               find_first/1851 =a (field_mut 18 include/15174)
               find_first_opt/1852 =a (field_mut 19 include/15174)
               find_last/1853 =a (field_mut 20 include/15174)
               find_last_opt/1854 =a (field_mut 21 include/15174)
               iter/1855 =a (field_mut 22 include/15174)
               fold/1856 =a (field_mut 23 include/15174)
               map/1857 =a (field_mut 24 include/15174)
               filter/1858 =a (field_mut 25 include/15174)
               filter_map/1859 =a (field_mut 26 include/15174)
               partition/1860 =a (field_mut 27 include/15174)
               split/1861 =a (field_mut 28 include/15174)
               is_empty/1862 =a (field_mut 29 include/15174)
               mem/1863 =a (field_mut 30 include/15174)
               equal/1864 =a (field_mut 31 include/15174)
               compare/1865 =a (field_mut 32 include/15174)
               subset/1866 =a (field_mut 33 include/15174)
               for_all/1867 =a (field_mut 34 include/15174)
               exists/1868 =a (field_mut 35 include/15174)
               to_list/1869 =a (field_mut 36 include/15174)
               of_list/1870 =a (field_mut 37 include/15174)
               to_seq_from/1871 =a (field_mut 38 include/15174)
               to_seq/1872 =a (field_mut 39 include/15174)
               to_rev_seq/1873 =a (field_mut 40 include/15174)
               add_seq/1874 =a (field_mut 41 include/15174)
               of_seq/1875 =a (field_mut 42 include/15174)
               print/1876 =
                 (function symbols/1877
                   (apply (field_imm 11 Symbol/1729)
                     (apply elements/1842 symbols/1877)))
               bottom/1969 = empty/1833
               leq/1970 = subset/1866
               join/1971 = union/1837)
              (makeblock 0 empty/1833 add/1834 singleton/1835 remove/1836
                union/1837 inter/1838 disjoint/1839 diff/1840 cardinal/1841
                elements/1842 min_elt/1843 min_elt_opt/1844 max_elt/1845
                max_elt_opt/1846 choose/1847 choose_opt/1848 find/1849
                find_opt/1850 find_first/1851 find_first_opt/1852
                find_last/1853 find_last_opt/1854 iter/1855 fold/1856
                map/1857 filter/1858 filter_map/1859 partition/1860
                split/1861 is_empty/1862 mem/1863 equal/1864 compare/1865
                subset/1866 for_all/1867 exists/1868 to_list/1869
                of_list/1870 to_seq_from/1871 to_seq/1872 to_rev_seq/1873
                add_seq/1874 of_seq/1875 print/1876 bottom/1969 leq/1970
                join/1971))
          SymbolMap/2227 =
            (let
              (include/15176 =
                 (apply
                   (let (let/15177 = (field_imm 0 (global Stdlib__Map!)))
                     (field_imm 0 (global Stdlib__Map!)))
                   (makeblock 0 (field_mut 1 Symbol/1729)))
               empty/2076 =a (field_mut 0 include/15176)
               add/2077 =a (field_mut 1 include/15176)
               add_to_list/2078 =a (field_mut 2 include/15176)
               update/2079 =a (field_mut 3 include/15176)
               singleton/2080 =a (field_mut 4 include/15176)
               remove/2081 =a (field_mut 5 include/15176)
               merge/2082 =a (field_mut 6 include/15176)
               union/2083 =a (field_mut 7 include/15176)
               cardinal/2084 =a (field_mut 8 include/15176)
               bindings/2085 =a (field_mut 9 include/15176)
               min_binding/2086 =a (field_mut 10 include/15176)
               min_binding_opt/2087 =a (field_mut 11 include/15176)
               max_binding/2088 =a (field_mut 12 include/15176)
               max_binding_opt/2089 =a (field_mut 13 include/15176)
               choose/2090 =a (field_mut 14 include/15176)
               choose_opt/2091 =a (field_mut 15 include/15176)
               find/2092 =a (field_mut 16 include/15176)
               find_opt/2093 =a (field_mut 17 include/15176)
               find_first/2094 =a (field_mut 18 include/15176)
               find_first_opt/2095 =a (field_mut 19 include/15176)
               find_last/2096 =a (field_mut 20 include/15176)
               find_last_opt/2097 =a (field_mut 21 include/15176)
               iter/2098 =a (field_mut 22 include/15176)
               fold/2099 =a (field_mut 23 include/15176)
               map/2100 =a (field_mut 24 include/15176)
               mapi/2101 =a (field_mut 25 include/15176)
               filter/2102 =a (field_mut 26 include/15176)
               filter_map/2103 =a (field_mut 27 include/15176)
               partition/2104 =a (field_mut 28 include/15176)
               split/2105 =a (field_mut 29 include/15176)
               is_empty/2106 =a (field_mut 30 include/15176)
               mem/2107 =a (field_mut 31 include/15176)
               equal/2108 =a (field_mut 32 include/15176)
               compare/2109 =a (field_mut 33 include/15176)
               for_all/2110 =a (field_mut 34 include/15176)
               exists/2111 =a (field_mut 35 include/15176)
               to_list/2112 =a (field_mut 36 include/15176)
               of_list/2113 =a (field_mut 37 include/15176)
               to_seq/2114 =a (field_mut 38 include/15176)
               to_rev_seq/2115 =a (field_mut 39 include/15176)
               to_seq_from/2116 =a (field_mut 40 include/15176)
               add_seq/2117 =a (field_mut 41 include/15176)
               of_seq/2118 =a (field_mut 42 include/15176)
               domain/2119 =
                 (function m/2121
                   (apply fold/2099
                     (function symbol/2122 param/2124 accu/2123
                       (makeblock 0 symbol/2122 accu/2123))
                     m/2121 0))
               init/2215 =
                 (function f/2217 xs/2218
                   (apply (field_imm 25 (global Stdlib__List!))
                     (function accu/2219 x/2220
                       (apply add/2077 x/2220 (apply f/2217 x/2220)
                         accu/2219))
                     empty/2076 xs/2218))
               purelynonterminal/2221 =
                 (function m/2223 : int
                   (apply fold/2099
                     (function symbol/2224 param/2226 accu/2225[int] : int
                       (&& accu/2225
                         (apply (field_imm 6 Symbol/1729) symbol/2224)))
                     m/2223 1)))
              (makeblock 0 empty/2076 add/2077 add_to_list/2078 update/2079
                singleton/2080 remove/2081 merge/2082 union/2083
                cardinal/2084 bindings/2085 min_binding/2086
                min_binding_opt/2087 max_binding/2088 max_binding_opt/2089
                choose/2090 choose_opt/2091 find/2092 find_opt/2093
                find_first/2094 find_first_opt/2095 find_last/2096
                find_last_opt/2097 iter/2098 fold/2099 map/2100 mapi/2101
                filter/2102 filter_map/2103 partition/2104 split/2105
                is_empty/2106 mem/2107 equal/2108 compare/2109 for_all/2110
                exists/2111 to_list/2112 of_list/2113 to_seq/2114
                to_rev_seq/2115 to_seq_from/2116 add_seq/2117 of_seq/2118
                domain/2119 init/2215 purelynonterminal/2221))
          Production/2648 =
            (let
              (compare/2229 =
                 (function prim/15179 prim/15178 stub
                   (- prim/15179 prim/15178))
               n/2230 =
                 (let
                   (n/2231 =[int]
                      (apply (field_imm 22 (global Dune__exe__StringMap!))
                        (function param/2235 param/2234 n/2233[int] : int
                          (let
                            (*match*/15182 =a (field_imm 3 param/2234)
                             *match*/15181 =a (field_int 2 param/2234)
                             *match*/15180 =a (field_imm 1 param/2234)
                             branches/2232 =a (field_imm 0 param/2234))
                            (+ n/2233
                              (apply (field_imm 0 (global Stdlib__List!))
                                branches/2232))))
                        (field_imm 8 (field_imm 0 G/488)) 0))
                   (seq
                     (if (field_imm 1 G/488)
                       (apply (field_imm 2 (global Dune__exe__Error!)) 1
                         (function f/2236 : int
                           (apply (field_imm 0 (global Stdlib__Printf!))
                             f/2236
                             [0:
                              [11:
                               "Grammar has "
                               [4: 0 0 0 [11: " productions.\n" 0]]]
                              "Grammar has %d productions.\n"]
                             n/2231)))
                       0)
                     (+ n/2231
                       (apply (field_imm 8 (global Dune__exe__StringSet!))
                         (field_imm 3 (field_imm 0 G/488))))))
               p2i/2237 = (function prod/2239 prod/2239)
               i2p/2240 =
                 (function prod/2242[int] : int
                   (seq
                     (if (&& (>= prod/2242 0) (< prod/2242 n/2230)) 0
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 691 4])))
                     prod/2242))
               table/2243 =
                 (caml_make_vect n/2230
                   (makeblock 0 (int,*) -1 (makearray[addr])))
               identifiers/2244 = (caml_make_vect n/2230 (makearray[addr]))
               actions/2245 = (caml_make_vect n/2230 0)
               positions/2246 = (caml_make_vect n/2230 0)
               rhs_attributes/2247 =
                 (caml_make_vect n/2230 (makearray[addr]))
               prec_decl/2248 = (caml_make_vect n/2230 0)
               production_level/2249 =
                 (let
                   (dummy/2250 =
                      (makeblock 0 (*,int)
                        (field_imm 3 (global Dune__exe__InputFile!)) 0))
                   (caml_make_vect n/2230 dummy/2250))
               ntprods/2251 =
                 (caml_make_vect (field_imm 6 Nonterminal/1110) [0: -1 -1])
               grammar_uses_error_token/2252 = (makemutable 0 (int) 0)
               *match*/15244 =
                 (apply (field_imm 23 (global Dune__exe__StringSet!))
                   (function nonterminal/2255 param/2293
                     (let
                       (startprods/2257 =a (field_imm 1 param/2293)
                        k/2256 =a (field_imm 0 param/2293)
                        nt/2258 =[int]
                          (apply (field_imm 11 Nonterminal/1110)
                            nonterminal/2255)
                        nt'/2259 =[int]
                          (apply (field_imm 11 Nonterminal/1110)
                            (apply (field_imm 27 (global Stdlib!))
                              nonterminal/2255 "'")))
                       (seq
                         (array.set[addr] table/2243 k/2256
                           (makeblock 0 (int,*) nt'/2259
                             (makearray[addr] (makeblock 0 (int) nt/2258))))
                         (array.set[addr] identifiers/2244 k/2256
                           (makearray[addr] "_1"))
                         (array.set[addr] ntprods/2251 nt'/2259
                           (makeblock 0 (int,int) k/2256 (+ k/2256 1)))
                         (array.set[addr] positions/2246 k/2256
                           (apply (field_imm 12 Nonterminal/1110) nt/2258))
                         (makeblock 0 (int,*) (+ k/2256 1)
                           (apply
                             (field_imm 3
                               (field_imm 1 (global Dune__exe__Patricia!)))
                             nt/2258 k/2256 startprods/2257)))))
                   (field_imm 3 (field_imm 0 G/488))
                   (makeblock 0 (int,*) 0
                     (field_imm 0
                       (field_imm 1 (global Dune__exe__Patricia!)))))
               startprods/2254 =a (field_imm 1 *match*/15244)
               start/2253 =a (field_imm 0 *match*/15244)
               producer_symbol/2294 =
                 (function producer/2295
                   (apply (field_imm 12 Symbol/1729)
                     (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
                       producer/2295))))
              (seq
                (apply (field_imm 22 (global Dune__exe__StringMap!))
                  (function nonterminal/2296 param/2405 k/2298[int] : int
                    (let
                      (*match*/15185 =a (field_imm 3 param/2405)
                       *match*/15184 =a (field_int 2 param/2405)
                       *match*/15183 =a (field_imm 1 param/2405)
                       branches/2297 =a (field_imm 0 param/2405)
                       nt/2299 =[int]
                         (apply (field_imm 11 Nonterminal/1110)
                           nonterminal/2296)
                       k'/2300 =[int]
                         (apply (field_imm 25 (global Stdlib__List!))
                           (function k/2301[int] branch/2302 : int
                             (let
                               (producers/2303 =
                                  (apply
                                    (field_imm 9 (global Stdlib__Array!))
                                    (field_imm 1 branch/2302))
                                rhs/2304 =
                                  (apply
                                    (field_imm 12 (global Stdlib__Array!))
                                    producer_symbol/2294 producers/2303))
                               (seq
                                 (array.set[addr] table/2243 k/2301
                                   (makeblock 0 (int,*) nt/2299 rhs/2304))
                                 (array.set[addr] identifiers/2244 k/2301
                                   (apply
                                     (field_imm 12 (global Stdlib__Array!))
                                     (field_imm 0
                                       (global Dune__exe__BasicSyntax!))
                                     producers/2303))
                                 (array.set[addr] actions/2245 k/2301
                                   (makeblock 0 (field_imm 2 branch/2302)))
                                 (array.set[addr] rhs_attributes/2247 k/2301
                                   (apply
                                     (field_imm 12 (global Stdlib__Array!))
                                     (field_imm 3
                                       (global Dune__exe__BasicSyntax!))
                                     producers/2303))
                                 (array.set[addr] production_level/2249
                                   k/2301 (field_imm 4 branch/2302))
                                 (array.set[addr] prec_decl/2248 k/2301
                                   (field_imm 3 branch/2302))
                                 (array.set[addr] positions/2246 k/2301
                                   (makeblock 0 (field_imm 0 branch/2302) 0))
                                 (if
                                   (not
                                     (apply
                                       (field_imm 51
                                         (global Dune__exe__MArray!))
                                       (field_imm 4 Symbol/1729) rhs/2304))
                                   (setfield_imm 0
                                     grammar_uses_error_token/2252 1)
                                   0)
                                 (+ k/2301 1))))
                           k/2298 branches/2297))
                      (seq
                        (array.set[addr] ntprods/2251 nt/2299
                          (makeblock 0 (int,int) k/2298 k'/2300))
                        k'/2300)))
                  (field_imm 8 (field_imm 0 G/488)) start/2253)
                (let
                  (iternt/2406 =
                     (function nt/2408[int] f/2409 : int
                       (let
                         (*match*/15189 =
                            (array.get[addr] ntprods/2251 nt/2408)
                          k'/2411 =a (field_imm 1 *match*/15189)
                          k/2410 =a (field_imm 0 *match*/15189))
                         (apply (field_imm 11 (global Dune__exe__Misc!))
                           k/2410 k'/2411 f/2409)))
                   foldnt/2412 =
                     (function nt/2414[int] f/2415 accu/2416
                       (let
                         (*match*/15193 =
                            (array.get[addr] ntprods/2251 nt/2414)
                          k'/2418 =a (field_imm 1 *match*/15193)
                          k/2417 =a (field_imm 0 *match*/15193))
                         (apply (field_imm 13 (global Dune__exe__Misc!))
                           k/2417 k'/2418 f/2415 accu/2416)))
                   mapnt/2419 =
                     (function nt/2421[int] f/2422
                       (let
                         (*match*/15197 =
                            (array.get[addr] ntprods/2251 nt/2421)
                          k'/2424 =a (field_imm 1 *match*/15197)
                          k/2423 =a (field_imm 0 *match*/15197))
                         (apply (field_imm 15 (global Dune__exe__Misc!))
                           k/2423 k'/2424 f/2422)))
                   foldnt_lazy/2425 =
                     (function nt/2427[int] f/2428 accu/2429
                       (let
                         (*match*/15201 =
                            (array.get[addr] ntprods/2251 nt/2427)
                          k'/2431 =a (field_imm 1 *match*/15201)
                          k/2430 =a (field_imm 0 *match*/15201))
                         (apply (field_imm 14 (global Dune__exe__Misc!))
                           k/2430 k'/2431 f/2428 accu/2429)))
                   def/2432 =
                     (function prod/2434[int]
                       (array.get[addr] table/2243 prod/2434))
                   nt/2435 =
                     (function prod/2437[int] : int
                       (let
                         (*match*/15205 =
                            (array.get[addr] table/2243 prod/2437)
                          *match*/15206 =a (field_imm 1 *match*/15205)
                          nt/2438 =a (field_imm 0 *match*/15205))
                         nt/2438))
                   rhs/2439 =
                     (function prod/2441[int]
                       (let
                         (*match*/15210 =
                            (array.get[addr] table/2243 prod/2441)
                          rhs/2442 =a (field_imm 1 *match*/15210)
                          *match*/15211 =a (field_imm 0 *match*/15210))
                         rhs/2442))
                   length/2443 =
                     (function prod/2445[int] : int
                       (array.length[addr] (apply rhs/2439 prod/2445)))
                   identifiers/2446 =
                     (function prod/2447[int]
                       (array.get[addr] identifiers/2244 prod/2447))
                   is_start/2448 =
                     (function prod/2450[int] : int (< prod/2450 start/2253))
                   classify/2451 =
                     (function prod/2453[int]
                       (if (apply is_start/2448 prod/2453)
                         (let
                           (*match*/15212 =
                              (array.get[addr] (apply rhs/2439 prod/2453) 0))
                           (switch* *match*/15212
                            case tag 0:
                             (let (nt/2454 =a (field_imm 0 *match*/15212))
                               (makeblock 0 (int) nt/2454))
                            case tag 1:
                             (let
                               (*match*/15213 =a (field_imm 0 *match*/15212))
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 832 10])))))
                         0))
                   action/2455 =
                     (function prod/2457[int]
                       (let
                         (*match*/15214 =
                            (array.get[addr] actions/2245 prod/2457))
                         (if (isint *match*/15214)
                           (seq
                             (if (apply is_start/2448 prod/2457) 0
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 842 8])))
                             (raise
                               (makeblock 0 (global Assert_failure/28!)
                                 [0: "src/grammarFunctor.ml" 843 8])))
                           (let (action/2458 =a (field_imm 0 *match*/15214))
                             action/2458))))
                   positions/2459 =
                     (function prod/2460[int]
                       (array.get[addr] positions/2246 prod/2460))
                   lhs_attributes/2461 =
                     (function prod/2463[int]
                       (apply (field_imm 22 Nonterminal/1110)
                         (apply nt/2435 prod/2463)))
                   rhs_attributes/2464 =
                     (function prod/2465[int]
                       (array.get[addr] rhs_attributes/2247 prod/2465))
                   startsymbol2startprod/2466 =
                     (function nt/2468[int] : int
                       (try
                         (apply
                           (field_imm 2
                             (field_imm 1 (global Dune__exe__Patricia!)))
                           nt/2468 startprods/2254)
                        with exn/15215
                         (catch
                           (if (== exn/15215 (field_imm 7 (global Stdlib!)))
                             (raise
                               (makeblock 0 (global Assert_failure/28!)
                                 [0: "src/grammarFunctor.ml" 858 6]))
                             (exit 70))
                          with (70) (reraise exn/15215))))
                   error_free/2469 =
                     (function prod/2471[int] : int
                       (apply (field_imm 51 (global Dune__exe__MArray!))
                         (field_imm 4 Symbol/1729)
                         (apply rhs/2439 prod/2471)))
                   init/2472 =
                     (function f/2474
                       (apply (field_imm 0 (global Stdlib__Array!)) n/2230
                         f/2474))
                   iter/2475 =
                     (function f/2476 : int
                       (apply (field_imm 10 (global Dune__exe__Misc!)) n/2230
                         f/2476))
                   fold/2477 =
                     (function f/2479 accu/2480
                       (apply (field_imm 12 (global Dune__exe__Misc!)) n/2230
                         f/2479 accu/2480))
                   map/2481 =
                     (function f/2482
                       (apply (field_imm 16 (global Dune__exe__Misc!)) n/2230
                         f/2482))
                   amap/2483 =
                     (function f/2485
                       (apply (field_imm 0 (global Stdlib__Array!)) n/2230
                         f/2485))
                   iterx/2486 =
                     (function f/2488 : int
                       (for prod/2489 start/2253 to (- n/2230 1)
                         (apply f/2488 prod/2489)))
                   foldx/2490 =
                     (function f/2492 accu/2493
                       (apply (field_imm 13 (global Dune__exe__Misc!))
                         start/2253 n/2230 f/2492 accu/2493))
                   mapx/2494 =
                     (function f/2496
                       (apply (field_imm 15 (global Dune__exe__Misc!))
                         start/2253 n/2230 f/2496))
                   print/2497 =
                     (function prod/2498[int]
                       (seq
                         (if (not (apply is_start/2448 prod/2498)) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 894 4])))
                         (let
                           (*match*/15219 =
                              (array.get[addr] table/2243 prod/2498)
                            rhs/2500 =a (field_imm 1 *match*/15219)
                            nt/2499 =a (field_imm 0 *match*/15219))
                           (if (== (array.length[addr] rhs/2500) 0)
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0: [2: 0 [11: " ->" 0]] "%s ->"]
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 nt/2499))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0: [2: 0 [11: " -> " [2: 0 0]]] "%s -> %s"]
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 nt/2499)
                               (apply (field_imm 9 Symbol/1729) 0 rhs/2500))))))
                   describe/2501 =
                     (function gerund/2503[int] prod/2504[int]
                       (let (*match*/15220 = (apply classify/2451 prod/2504))
                         (if (isint *match*/15220)
                           (let (ending/2507 = (if gerund/2503 "ing" "e"))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "reduc" [2: 0 [11: " production " [2: 0 0]]]]
                                "reduc%s production %s"]
                               ending/2507 (apply print/2497 prod/2504)))
                           (let
                             (nt/2505 =a (field_imm 0 *match*/15220)
                              ending/2506 = (if gerund/2503 "ing" ""))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0:
                                [11: "accept" [2: 0 [12: ' ' [2: 0 0]]]]
                                "accept%s %s"]
                               ending/2506
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 nt/2505))))))
                   tabulate/2508 =
                     (function f/2510
                       (apply (field_imm 2 (global Dune__exe__Misc!)) n/2230
                         f/2510))
                   sum/2511 =
                     (function f/2513 : int
                       (apply (field_imm 3 (global Dune__exe__Misc!)) n/2230
                         f/2513))
                   ever_useful/2553 =
                     (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 16)
                   consult_prec_decl/2595 =
                     (function prod/2597[int]
                       (let
                         (osym/2598 =
                            (array.get[addr] prec_decl/2248 prod/2597))
                         (makeblock 0
                           (makemutable 246
                             (function param/15221
                               (apply
                                 (field_imm 2 (global Dune__exe__Option!))
                                 (function sym/2599 : int
                                   (let
                                     (pos/2600 =
                                        (apply
                                          (field_imm 1
                                            (global Dune__exe__Positions!))
                                          sym/2599))
                                     (apply
                                       (field_imm 4
                                         (global Stdlib__Hashtbl!))
                                       ever_useful/2553 pos/2600 0)))
                                 osym/2598)))
                           osym/2598)))
                   diagnostics/2601 =
                     (function param/2607[int] : int
                       (apply iterx/2486
                         (function prod/2603[int] : int
                           (let
                             (osym/2604 =
                                (array.get[addr] prec_decl/2248 prod/2603))
                             (apply (field_imm 2 (global Dune__exe__Option!))
                               (function sym/2605 : int
                                 (let
                                   (pos/2606 =
                                      (apply
                                        (field_imm 1
                                          (global Dune__exe__Positions!))
                                        sym/2605))
                                   (if
                                     (not
                                       (apply
                                         (field_imm 8
                                           (global Stdlib__Hashtbl!))
                                         ever_useful/2553 pos/2606))
                                     (seq
                                       (apply
                                         (field_imm 13
                                           (global Dune__exe__Error!))
                                         (makeblock 0 pos/2606 0)
                                         [0:
                                          [11:
                                           "this "
                                           [12:
                                            '%'
                                            [11:
                                             "prec declaration is never useful."
                                             0]]]
                                          "this %%prec declaration is never useful."])
                                       (apply
                                         (field_imm 4
                                           (global Stdlib__Hashtbl!))
                                         ever_useful/2553 pos/2606 0))
                                     0)))
                               osym/2604)))))
                   rightmost_terminal/2612 =
                     (function prod/2614[int]
                       (apply (field_imm 16 (global Stdlib__Array!))
                         (function accu/2615 symbol/2616
                           (switch* symbol/2616
                            case tag 0:
                             (let
                               (*match*/15222 =a (field_imm 0 symbol/2616))
                               accu/2615)
                            case tag 1:
                             (let (tok/2617 =a (field_imm 0 symbol/2616))
                               (makeblock 0 (int) tok/2617))))
                         0 (apply rhs/2439 prod/2614)))
                   combine/2618 =
                     (function e1/2620 e2/2621
                       (makemutable 246
                         (function param/15225
                           (seq
                             (let (lzarg/15224 = e1/2620)
                               (if (isint lzarg/15224) lzarg/15224
                                 (switch (caml_obj_tag lzarg/15224)
                                  case int 250: (field_mut 0 lzarg/15224)
                                  case int 246:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15224))
                                  case int 244:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15224))
                                  default: lzarg/15224)))
                             (let (lzarg/15223 = e2/2621)
                               (if (isint lzarg/15223) lzarg/15223
                                 (switch (caml_obj_tag lzarg/15223)
                                  case int 250: (field_mut 0 lzarg/15223)
                                  case int 246:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15223))
                                  case int 244:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15223))
                                  default: lzarg/15223)))))))
                   precedence/2635 =
                     (function prod/2637[int]
                       (let
                         (*match*/15239 =
                            (apply consult_prec_decl/2595 prod/2637)
                          prec_decl/2639 =a (field_imm 1 *match*/15239)
                          fact1/2638 =a (field_imm 0 *match*/15239)
                          oterminal/2640 =
                            (if (isint prec_decl/2639)
                              (apply rightmost_terminal/2612 prod/2637)
                              (let
                                (*match*/15234 =a
                                   (field_imm 0 prec_decl/2639)
                                 *match*/15235 =a (field_imm 1 *match*/15234)
                                 terminal/2641 =a (field_imm 0 *match*/15234))
                                (makeblock 1 terminal/2641))))
                         (switch* oterminal/2640
                          case int 0: (makeblock 0 fact1/2638 0)
                          case tag 0:
                           (let
                             (tok/2642 =a (field_imm 0 oterminal/2640)
                              *match*/15229 =
                                (apply (field_imm 14 Terminal/1588) tok/2642)
                              level/2645 =a (field_imm 1 *match*/15229)
                              fact2/2644 =a (field_imm 0 *match*/15229))
                             (makeblock 0
                               (apply combine/2618 fact1/2638 fact2/2644)
                               level/2645))
                          case tag 1:
                           (let
                             (id/2643 =a (field_imm 0 oterminal/2640)
                              *match*/15233 =
                                (apply (field_imm 3 TokPrecedence/990)
                                  id/2643)
                              level/2647 =a (field_imm 1 *match*/15233)
                              fact2/2646 =a (field_imm 0 *match*/15233))
                             (makeblock 0
                               (apply combine/2618 fact1/2638 fact2/2646)
                               level/2647))))))
                  (makeblock 0 compare/2229 n/2230 p2i/2237 i2p/2240
                    table/2243 actions/2245 prec_decl/2248
                    production_level/2249 ntprods/2251
                    grammar_uses_error_token/2252 start/2253 startprods/2254
                    producer_symbol/2294 iternt/2406 foldnt/2412 mapnt/2419
                    foldnt_lazy/2425 def/2432 nt/2435 rhs/2439 length/2443
                    identifiers/2446 is_start/2448 classify/2451 action/2455
                    positions/2459 lhs_attributes/2461 rhs_attributes/2464
                    startsymbol2startprod/2466 error_free/2469 init/2472
                    iter/2475 fold/2477 map/2481 amap/2483 iterx/2486
                    foldx/2490 mapx/2494 print/2497 describe/2501
                    tabulate/2508 sum/2511 ever_useful/2553
                    consult_prec_decl/2595 diagnostics/2601
                    rightmost_terminal/2612 combine/2618 precedence/2635))))
          grammar_uses_error_token/2649 =[int]
            (field_int 0 (field_imm 9 Production/2648))
          ProductionMap/2688 =
            (let
              (include/15254 =a
                 (let
                   (let/15255 = (field_imm 1 (global Dune__exe__Patricia!)))
                   (field_imm 1 (global Dune__exe__Patricia!)))
               empty/2652 =a (field_mut 0 include/15254)
               lookup/2653 =a (field_mut 1 include/15254)
               find/2654 =a (field_mut 2 include/15254)
               add/2655 =a (field_mut 3 include/15254)
               Unchanged/2656 =a (field_mut 4 include/15254)
               strict_add/2657 =a (field_mut 5 include/15254)
               fine_add/2659 =a (field_mut 6 include/15254)
               mem/2660 =a (field_mut 7 include/15254)
               singleton/2661 =a (field_mut 8 include/15254)
               is_empty/2662 =a (field_mut 9 include/15254)
               is_singleton/2663 =a (field_mut 10 include/15254)
               cardinal/2664 =a (field_mut 11 include/15254)
               choose/2665 =a (field_mut 12 include/15254)
               lookup_and_remove/2666 =a (field_mut 13 include/15254)
               find_and_remove/2667 =a (field_mut 14 include/15254)
               remove/2668 =a (field_mut 15 include/15254)
               union/2669 =a (field_mut 16 include/15254)
               fine_union/2670 =a (field_mut 17 include/15254)
               iter/2671 =a (field_mut 18 include/15254)
               fold/2672 =a (field_mut 19 include/15254)
               fold_rev/2673 =a (field_mut 20 include/15254)
               filter/2674 =a (field_mut 21 include/15254)
               iter2/2675 =a (field_mut 22 include/15254)
               map/2676 =a (field_mut 23 include/15254)
               endo_map/2677 =a (field_mut 24 include/15254)
               compare/2678 =a (field_mut 25 include/15254)
               Domain/2679 =a (field_mut 26 include/15254)
               domain/2680 =a (field_mut 27 include/15254)
               lift/2681 =a (field_mut 28 include/15254)
               corestrict/2682 =a (field_mut 29 include/15254)
               start/2683 =
                 (function f/2685
                   (apply (field_imm 12 (global Dune__exe__Misc!))
                     (field_imm 10 Production/2648)
                     (function prod/2686[int] m/2687
                       (apply add/2655 prod/2686 (apply f/2685 prod/2686)
                         m/2687))
                     empty/2652)))
              (makeblock 0 empty/2652 lookup/2653 find/2654 add/2655
                Unchanged/2656 strict_add/2657 fine_add/2659 mem/2660
                singleton/2661 is_empty/2662 is_singleton/2663 cardinal/2664
                choose/2665 lookup_and_remove/2666 find_and_remove/2667
                remove/2668 union/2669 fine_union/2670 iter/2671 fold/2672
                fold_rev/2673 filter/2674 iter2/2675 map/2676 endo_map/2677
                compare/2678 Domain/2679 domain/2680 lift/2681
                corestrict/2682 start/2683))
          GenericAnalysis/3012 =
            (function P/15272 S/15271 is_a_functor
              (let
                (P/2810 =a P/15272
                 S/2816 =a S/15271
                 symbol/2817 =
                   (function sym/2819 get/2820
                     (switch* sym/2819
                      case tag 0:
                       (let (nt/2822 =a (field_imm 0 sym/2819))
                         (apply get/2820 nt/2822))
                      case tag 1:
                       (let (tok/2821 =a (field_imm 0 sym/2819))
                         (apply (field_imm 1 S/2816) tok/2821))))
                 production/2823 =
                   (function prod/2825[int] i/2826[int] get/2827
                     (let
                       (rhs/2828 =
                          (apply (field_imm 19 Production/2648) prod/2825)
                        n/2829 =[int] (array.length[addr] rhs/2828))
                       (letrec
                         (loop/2830
                            (function i/2831[int]
                              (if (== i/2831 n/2829) (field_imm 4 S/2816)
                                (let
                                  (sym/2832 =
                                     (array.get[addr] rhs/2828 i/2831))
                                  (apply (field_imm 3 S/2816) sym/2832
                                    (apply symbol/2817 sym/2832 get/2827)
                                    (function param/2833[int]
                                      (apply loop/2830 (+ i/2831 1))))))))
                         (apply loop/2830 i/2826))))
                 nonterminal/2834 =
                   (function nt/2836[int] get/2837
                     (let
                       (*match*/15256 = (apply (field_imm 0 S/2816) nt/2836))
                       (if (isint *match*/15256)
                         (apply (field_imm 16 Production/2648) nt/2836
                           (function prod/2839[int] rest/2840
                             (apply (field_imm 2 S/2816)
                               (apply production/2823 prod/2839 0 get/2837)
                               rest/2840))
                           (field_imm 0 P/2810))
                         (let (p/2838 =a (field_imm 0 *match*/15256)) p/2838))))
                 F/2987 =
                   (apply
                     (apply
                       (let
                         (let/15270 =
                            (field_imm 0 (global Vendored_fix__Core!)))
                         (field_imm 0 (global Vendored_fix__Core!)))
                       (apply
                         (let
                           (let/15257 =
                              (field_imm 10 (global Vendored_fix__Glue!)))
                           (field_imm 10 (global Vendored_fix__Glue!)))
                         (makeblock 0 (field_mut 6 Nonterminal/1110))))
                     P/2810)
                 nonterminal/2988 =
                   (apply (field_imm 0 F/2987) nonterminal/2834)
                 symbol/3004 =
                   (function sym/3005
                     (apply symbol/2817 sym/3005 nonterminal/2988))
                 production/3006 =
                   (function prod/3007[int] i/3008[int]
                     (apply production/2823 prod/3007 i/3008
                       nonterminal/2988)))
                (makeblock 0 nonterminal/2988 symbol/3004 production/3006)))
          NONEMPTY/3051 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15273 = (global Vendored_fix__Boolean!)
                   let/15274 =a (global Vendored_fix__Boolean!))
                  (makeblock 0 (field_mut 0 let/15274)
                    (field_mut 1 let/15274) (field_mut 2 let/15274))))
              (let
                (shortcut/3013 = (function _nt/3015 0)
                 terminal/3016 = (function param/3018 : int 1)
                 disjunction/3019 =
                   (function p/3021[int] q/3022 : int
                     (|| p/3021 (apply q/3022 0)))
                 conjunction/3023 =
                   (function param/3027 p/3025[int] q/3026 : int
                     (&& p/3025 (apply q/3026 0)))
                 epsilon/3028 =[int] 1)
                (makeblock 0 shortcut/3013 terminal/3016 disjunction/3019
                  conjunction/3023 epsilon/3028)))
          NULLABLE/3080 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15275 = (global Vendored_fix__Boolean!)
                   let/15276 =a (global Vendored_fix__Boolean!))
                  (makeblock 0 (field_mut 0 let/15276)
                    (field_mut 1 let/15276) (field_mut 2 let/15276))))
              (let
                (shortcut/3052 = (function _nt/3054 0)
                 terminal/3055 = (function param/3057 : int 0)
                 disjunction/3058 =
                   (function p/3060[int] q/3061 : int
                     (|| p/3060 (apply q/3061 0)))
                 conjunction/3062 =
                   (function param/3066 p/3064[int] q/3065 : int
                     (&& p/3064 (apply q/3065 0)))
                 epsilon/3067 =[int] 1)
                (makeblock 0 shortcut/3052 terminal/3055 disjunction/3058
                  conjunction/3062 epsilon/3067)))
          FIRST/3107 =
            (apply
              (apply GenericAnalysis/3012
                (makeblock 0 (field_mut 20 TerminalSet/1666)
                  (field_mut 16 TerminalSet/1666)
                  (field_mut 21 TerminalSet/1666)))
              (let
                (shortcut/3081 = (function _nt/3083 0)
                 terminal/3084 = (field_imm 2 TerminalSet/1666)
                 disjunction/3085 =
                   (function p/3087 q/3088
                     (apply (field_imm 9 TerminalSet/1666) p/3087
                       (apply q/3088 0)))
                 conjunction/3089 =
                   (function symbol/3091 p/3092 q/3093
                     (if (apply (field_imm 1 NULLABLE/3080) symbol/3091)
                       (apply (field_imm 9 TerminalSet/1666) p/3092
                         (apply q/3093 0))
                       p/3092))
                 epsilon/3094 = (field_imm 0 TerminalSet/1666))
                (makeblock 0 shortcut/3081 terminal/3084 disjunction/3085
                  conjunction/3089 epsilon/3094)))
          MINIMAL/3174 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (include/15277 =a
                     (let
                       (let/15278 = (global Dune__exe__CompletedNatWitness!))
                       (global Dune__exe__CompletedNatWitness!))
                   bottom/3131 =a (field_mut 0 include/15277)
                   equal/3132 =a (field_mut 1 include/15277)
                   is_maximal/3133 =a (field_mut 2 include/15277)
                   epsilon/3134 =a (field_mut 3 include/15277)
                   singleton/3135 =a (field_mut 4 include/15277)
                   min/3136 =a (field_mut 5 include/15277)
                   add/3137 =a (field_mut 6 include/15277)
                   min_lazy/3138 =a (field_mut 7 include/15277)
                   add_lazy/3139 =a (field_mut 8 include/15277)
                   print/3140 =a (field_mut 9 include/15277)
                   to_int/3141 =a (field_mut 10 include/15277)
                   extract/3142 =a (field_mut 11 include/15277))
                  (makeblock 0 bottom/3131 equal/3132 is_maximal/3133)))
              (let
                (shortcut/3108 = (function _nt/3110 0)
                 terminal/3124 =
                   (field_imm 4 (global Dune__exe__CompletedNatWitness!))
                 disjunction/3125 =
                   (field_imm 7 (global Dune__exe__CompletedNatWitness!))
                 conjunction/3126 =
                   (function param/3128
                     (field_imm 8 (global Dune__exe__CompletedNatWitness!)))
                 epsilon/3129 =
                   (field_imm 3 (global Dune__exe__CompletedNatWitness!)))
                (makeblock 0 shortcut/3108 terminal/3124 disjunction/3125
                  conjunction/3126 epsilon/3129)))
          generates_nonempty_word/3175 =
            (function symbol/3177 : int
              (not
                (apply (field_imm 1 TerminalSet/1666)
                  (apply (field_imm 1 FIRST/3107) symbol/3177))))
          G/3201 =
            (let
              (n/3179 =[int] (field_imm 6 Nonterminal/1110)
               index/3180 = (function nt/3181 nt/3181)
               iter/3182 = (field_imm 14 Nonterminal/1110)
               labeled_successors/3183 =
                 (function yield/3185 nt/3186[int] : int
                   (apply (field_imm 13 Production/2648) nt/3186
                     (function prod/3187[int] : int
                       (let
                         (rhs/3188 =
                            (apply (field_imm 19 Production/2648) prod/3187))
                         (apply (field_imm 11 (global Stdlib__Array!))
                           (function i/3189[int] symbol/3190 : int
                             (switch* symbol/3190
                              case tag 0:
                               (let
                                 (nt'/3191 =a (field_imm 0 symbol/3190)
                                  gnw/3192 =[int]
                                    (apply
                                      (field_imm 49
                                        (global Dune__exe__MArray!))
                                      (function j/3193[int] symbol/3194 : int
                                        (&& (!= i/3189 j/3193)
                                          (apply generates_nonempty_word/3175
                                            symbol/3194)))
                                      rhs/3188))
                                 (apply yield/3185 gnw/3192 nt'/3191))
                              case tag 1:
                               (let
                                 (*match*/15279 =a (field_imm 0 symbol/3190))
                                 0)))
                           rhs/3188)))))
               successors/3195 =
                 (function yield/3197 nt/3198[int] : int
                   (apply labeled_successors/3183
                     (function _gnw/3199[int] nt'/3200[int] : int
                       (apply yield/3197 nt'/3200))
                     nt/3198)))
              (makeblock 0 n/3179 index/3180 iter/3182
                labeled_successors/3183 successors/3195))
          unbounded/3202 =
            (makemutable 246
              (function param/15281
                (let
                  (unbounded/3203 =
                     (caml_make_vect (field_imm 6 Nonterminal/1110) 0)
                   T/3222 =
                     (apply
                       (let
                         (let/15280 =
                            (field_imm 0 (global Dune__exe__Tarjan!)))
                         (field_imm 0 (global Dune__exe__Tarjan!)))
                       (makeblock 0 (field_mut 0 G/3201) (field_mut 1 G/3201)
                         (field_mut 4 G/3201) (field_mut 2 G/3201))))
                  (seq
                    (apply (field_imm 2 G/3201)
                      (function nt/3223[int] : int
                        (apply (field_imm 3 G/3201)
                          (function gnw/3224[int] nt'/3225[int] : int
                            (if
                              (&& gnw/3224
                                (== (apply (field_imm 0 T/3222) nt/3223)
                                  (apply (field_imm 0 T/3222) nt'/3225)))
                              (apply (field_imm 17 (global Stdlib__List!))
                                (function nt/3226[int] : int
                                  (array.set[int] unbounded/3203 nt/3226 1))
                                (apply (field_imm 1 T/3222)
                                  (apply (field_imm 0 T/3222) nt/3223)))
                              0))
                          nt/3223)))
                    unbounded/3203))))
          unbounded/3227 =
            (function nt/3228[int] : int
              (array.get[int]
                (let (lzarg/15282 = unbounded/3202)
                  (if (isint lzarg/15282) lzarg/15282
                    (switch (caml_obj_tag lzarg/15282)
                     case int 250: (field_mut 0 lzarg/15282)
                     case int 246:
                      (apply (field_imm 1 (global CamlinternalLazy!))
                        (opaque lzarg/15282))
                     case int 244:
                      (apply (field_imm 1 (global CamlinternalLazy!))
                        (opaque lzarg/15282))
                     default: lzarg/15282)))
                nt/3228))
          MAXIMAL/3276 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15283 = (global Dune__exe__NatInfinityMax!)
                   let/15284 =a (global Dune__exe__NatInfinityMax!))
                  (makeblock 0 (field_mut 0 let/15284)
                    (field_mut 3 let/15284) (field_mut 4 let/15284))))
              (let
                (shortcut/3241 =
                   (function nt/3243[int]
                     (if (apply unbounded/3227 nt/3243)
                       (makeblock 0
                         (field_imm 1 (global Dune__exe__NatInfinityMax!)))
                       0))
                 terminal/3244 =
                   (function _tok/3246
                     (apply (field_imm 2 (global Dune__exe__NatInfinityMax!))
                       1))
                 disjunction/3259 =
                   (field_imm 7 (global Dune__exe__NatInfinityMax!))
                 conjunction/3260 =
                   (function param/3262
                     (field_imm 8 (global Dune__exe__NatInfinityMax!)))
                 epsilon/3263 =
                   (field_imm 0 (global Dune__exe__NatInfinityMax!)))
                (makeblock 0 shortcut/3241 terminal/3244 disjunction/3259
                  conjunction/3260 epsilon/3263)))
          *match*/15353 =
            (if (field_imm 1 G/488)
              (seq
                (apply (field_imm 22 (global Dune__exe__StringSet!))
                  (function symbol/3277 : int
                    (let
                      (nt/3278 =[int]
                         (apply (field_imm 11 Nonterminal/1110) symbol/3277))
                      (seq
                        (if (not (apply (field_imm 0 NONEMPTY/3051) nt/3278))
                          (apply (field_imm 5 (global Dune__exe__Error!))
                            (apply (field_imm 12 Nonterminal/1110) nt/3278)
                            [0:
                             [2: 0 [11: " generates the empty language." 0]]
                             "%s generates the empty language."]
                            (apply (field_imm 10 Nonterminal/1110) 0 nt/3278))
                          0)
                        (if
                          (apply (field_imm 1 TerminalSet/1666)
                            (apply (field_imm 0 FIRST/3107) nt/3278))
                          (apply (field_imm 5 (global Dune__exe__Error!))
                            (apply (field_imm 12 Nonterminal/1110) nt/3278)
                            [0:
                             [2:
                              0 [11: " generates the language {epsilon}." 0]]
                             "%s generates the language {epsilon}."]
                            (apply (field_imm 10 Nonterminal/1110) 0 nt/3278))
                          0))))
                  (field_imm 3 (field_imm 0 G/488)))
                (for nt/3279 (field_imm 5 Nonterminal/1110) to
                  (- (field_imm 6 Nonterminal/1110) 1)
                  (if (not (apply (field_imm 0 NONEMPTY/3051) nt/3279))
                    (apply (field_imm 13 (global Dune__exe__Error!))
                      (apply (field_imm 12 Nonterminal/1110) nt/3279)
                      [0:
                       [2: 0 [11: " generates the empty language." 0]]
                       "%s generates the empty language."]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3279))
                    0)))
              0)
          *match*/15350 =
            (if (field_imm 1 G/488)
              (apply (field_imm 2 (global Dune__exe__Error!)) 2
                (function f/3280 : int
                  (seq
                    (for nt/3281 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "nullable(" [2: 0 [11: ") = " [9: 0 [12: '\n' 0]]]]]
                         "nullable(%s) = %b\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3281)
                        (apply (field_imm 0 NULLABLE/3080) nt/3281)))
                    (for nt/3282 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "first(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "first(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3282)
                        (apply (field_imm 18 TerminalSet/1666)
                          (apply (field_imm 0 FIRST/3107) nt/3282))))
                    (for nt/3283 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "minimal(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "minimal(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3283)
                        (apply
                          (field_imm 9
                            (global Dune__exe__CompletedNatWitness!))
                          (field_imm 6 Terminal/1588)
                          (apply (field_imm 0 MINIMAL/3174) nt/3283))))
                    (for nt/3284 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "maximal(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "maximal(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3284)
                        (apply
                          (field_imm 9 (global Dune__exe__NatInfinityMax!))
                          (apply (field_imm 0 MAXIMAL/3276) nt/3284)))))))
              0)
          *match*/15347 =
            (if (field_imm 1 G/488)
              (apply (field_imm 0 (global Dune__exe__Time!))
                "Analysis of the grammar")
              0)
          FOLLOW/3363 =
            (function P/15296 is_a_functor
              (let
                (P/3297 =a P/15296
                 M/3305 =
                   (apply
                     (let
                       (let/15285 =
                          (field_imm 10 (global Vendored_fix__Glue!)))
                       (field_imm 10 (global Vendored_fix__Glue!)))
                     (makeblock 0 (field_mut 6 Nonterminal/1110)))
                 S/3339 =
                   (apply
                     (apply
                       (let
                         (let/15286 =
                            (field_imm 0 (global Dune__exe__FixSolver!)))
                         (field_imm 0 (global Dune__exe__FixSolver!)))
                       M/3305)
                     (makeblock 0 (field_mut 0 P/3297)))
                 *match*/15295 =
                   (let
                     (sharp/3340 =
                        (apply (field_imm 2 P/3297)
                          (field_imm 8 Terminal/1588)))
                     (for nt/3341 0 to (- (field_imm 5 Nonterminal/1110) 1)
                       (seq
                         (if (apply (field_imm 8 Nonterminal/1110) nt/3341) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1450 6])))
                         (apply (field_imm 0 S/3339) sharp/3340 nt/3341))))
                 *match*/15293 =
                   (apply (field_imm 11 (global Stdlib__Array!))
                     (function prod/3342[int] param/3350 : int
                       (let
                         (rhs/3344 =a (field_imm 1 param/3350)
                          nt1/3343 =a (field_imm 0 param/3350))
                         (apply (field_imm 11 (global Stdlib__Array!))
                           (function i/3345[int] symbol/3346 : int
                             (switch* symbol/3346
                              case tag 0:
                               (let
                                 (nt2/3347 =a (field_imm 0 symbol/3346)
                                  nullable/3348 =[int]
                                    (apply (field_imm 2 NULLABLE/3080)
                                      prod/3342 (+ i/3345 1))
                                  first/3349 =
                                    (apply (field_imm 3 P/3297) prod/3342
                                      (+ i/3345 1)))
                                 (seq
                                   (apply (field_imm 0 S/3339) first/3349
                                     nt2/3347)
                                   (if nullable/3348
                                     (apply (field_imm 1 S/3339) nt1/3343
                                       nt2/3347)
                                     0)))
                              case tag 1:
                               (let
                                 (*match*/15287 =a (field_imm 0 symbol/3346))
                                 0)))
                           rhs/3344)))
                     (field_imm 4 Production/2648))
                 follow/3351 =
                   (makemutable 246
                     (function param/15288
                       (let (S/3355 = (apply (field_imm 2 S/3339) 0))
                         (function nt/3356[int]
                           (apply (field_imm 8 (global Dune__exe__Option!))
                             (apply (field_imm 0 S/3355) nt/3356)
                             (field_imm 1 P/3297))))))
                 follow/3357 =
                   (function nt/3358[int]
                     (apply
                       (let (lzarg/15289 = follow/3351)
                         (if (isint lzarg/15289) lzarg/15289
                           (switch (caml_obj_tag lzarg/15289)
                            case int 250: (field_mut 0 lzarg/15289)
                            case int 246:
                             (apply (field_imm 1 (global CamlinternalLazy!))
                               (opaque lzarg/15289))
                            case int 244:
                             (apply (field_imm 1 (global CamlinternalLazy!))
                               (opaque lzarg/15289))
                            default: lzarg/15289)))
                       nt/3358)))
                (makeblock 0 M/3305 S/3339 follow/3357)))
          follow/3364 =
            (let
              (F/3433 =
                 (apply FOLLOW/3363
                   (let
                     (include/15297 =a TerminalSet/1666
                      empty/3367 =a (field_mut 0 include/15297)
                      is_empty/3368 =a (field_mut 1 include/15297)
                      singleton/3369 =a (field_mut 2 include/15297)
                      is_singleton/3370 =a (field_mut 3 include/15297)
                      cardinal/3371 =a (field_mut 4 include/15297)
                      choose/3372 =a (field_mut 5 include/15297)
                      mem/3373 =a (field_mut 6 include/15297)
                      add/3374 =a (field_mut 7 include/15297)
                      remove/3375 =a (field_mut 8 include/15297)
                      union/3376 =a (field_mut 9 include/15297)
                      inter/3377 =a (field_mut 10 include/15297)
                      disjoint/3378 =a (field_mut 11 include/15297)
                      iter/3379 =a (field_mut 12 include/15297)
                      fold/3380 =a (field_mut 13 include/15297)
                      elements/3381 =a (field_mut 14 include/15297)
                      compare/3382 =a (field_mut 15 include/15297)
                      equal/3383 =a (field_mut 16 include/15297)
                      subset/3384 =a (field_mut 17 include/15297)
                      print/3385 =a (field_mut 18 include/15297)
                      universe/3386 =a (field_mut 19 include/15297)
                      bottom/3388 =a (field_mut 20 include/15297)
                      is_maximal/3389 =a (field_mut 21 include/15297)
                      leq_join/3390 =a (field_mut 22 include/15297)
                      terminal/3391 = singleton/3369
                      first/3392 = (field_imm 2 FIRST/3107))
                     (makeblock 0 leq_join/3390 bottom/3388 terminal/3391
                       first/3392))))
              (field_imm 2 F/3433))
          *match*/15343 =
            (if (field_imm 1 G/488)
              (apply (field_imm 2 (global Dune__exe__Error!)) 2
                (function f/3434 : int
                  (for nt/3435 (field_imm 5 Nonterminal/1110) to
                    (- (field_imm 6 Nonterminal/1110) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3434
                      [0:
                       [11:
                        "follow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "follow(%s) = %s\n"]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3435)
                      (apply (field_imm 18 TerminalSet/1666)
                        (apply follow/3364 nt/3435))))))
              0)
          tfollow/3436 =
            (makemutable 246
              (function param/15299
                (let
                  (tfollow/3437 =
                     (caml_make_vect (field_imm 4 Terminal/1588)
                       (field_imm 0 TerminalSet/1666)))
                  (seq
                    (apply (field_imm 11 (global Stdlib__Array!))
                      (function prod/3438[int] param/3446 : int
                        (let
                          (rhs/3440 =a (field_imm 1 param/3446)
                           nt1/3439 =a (field_imm 0 param/3446))
                          (apply (field_imm 11 (global Stdlib__Array!))
                            (function i/3441[int] symbol/3442 : int
                              (switch* symbol/3442
                               case tag 0:
                                (let
                                  (*match*/15298 =a (field_imm 0 symbol/3442))
                                  0)
                               case tag 1:
                                (let
                                  (t2/3443 =a (field_imm 0 symbol/3442)
                                   nullable/3444 =[int]
                                     (apply (field_imm 2 NULLABLE/3080)
                                       prod/3438 (+ i/3441 1))
                                   first/3445 =
                                     (apply (field_imm 2 FIRST/3107)
                                       prod/3438 (+ i/3441 1)))
                                  (seq
                                    (array.set[gen] tfollow/3437 t2/3443
                                      (apply (field_imm 9 TerminalSet/1666)
                                        first/3445
                                        (array.get[gen] tfollow/3437 t2/3443)))
                                    (if nullable/3444
                                      (array.set[gen] tfollow/3437 t2/3443
                                        (apply (field_imm 9 TerminalSet/1666)
                                          (apply follow/3364 nt1/3439)
                                          (array.get[gen] tfollow/3437
                                            t2/3443)))
                                      0)))))
                            rhs/3440)))
                      (field_imm 4 Production/2648))
                    tfollow/3437))))
          tfollow/3447 =
            (function t/3448[int]
              (array.get[gen]
                (let (lzarg/15300 = tfollow/3436)
                  (if (isint lzarg/15300) lzarg/15300
                    (switch (caml_obj_tag lzarg/15300)
                     case int 250: (field_mut 0 lzarg/15300)
                     case int 246:
                      (apply (field_imm 1 (global CamlinternalLazy!))
                        (opaque lzarg/15300))
                     case int 244:
                      (apply (field_imm 1 (global CamlinternalLazy!))
                        (opaque lzarg/15300))
                     default: lzarg/15300)))
                t/3448))
          *match*/15339 =
            (if (field_imm 1 G/488)
              (apply (field_imm 2 (global Dune__exe__Error!)) 3
                (function f/3449 : int
                  (for t/3450 0 to (- (field_imm 4 Terminal/1588) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3449
                      [0:
                       [11:
                        "follow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "follow(%s) = %s\n"]
                      (apply (field_imm 6 Terminal/1588) t/3450)
                      (apply (field_imm 18 TerminalSet/1666)
                        (apply tfollow/3447 t/3450))))))
              0)
          sfirst/3451 =
            (function prod/3453[int] i/3454[int]
              (let
                (rhs/3455 = (apply (field_imm 19 Production/2648) prod/3453)
                 n/3456 =[int] (array.length[addr] rhs/3455))
                (letrec
                  (loop/3457
                     (function i/3458[int]
                       (if (== i/3458 n/3456) (field_imm 0 SymbolSet/1972)
                         (let (sym/3459 = (array.get[addr] rhs/3455 i/3458))
                           (apply (field_imm 4 SymbolSet/1972)
                             (apply (field_imm 2 SymbolSet/1972) sym/3459)
                             (if (apply (field_imm 1 NULLABLE/3080) sym/3459)
                               (apply loop/3457 (+ i/3458 1))
                               (field_imm 0 SymbolSet/1972)))))))
                  (apply loop/3457 i/3454))))
          sfollow/3460 =
            (let
              (F/3515 =
                 (apply FOLLOW/3363
                   (let
                     (bottom/3461 = (field_imm 44 SymbolSet/1972)
                      include/15301 =
                        (apply
                          (let
                            (let/15302 =
                               (field_imm 12 (global Vendored_fix__Glue!)))
                            (field_imm 12 (global Vendored_fix__Glue!)))
                          (makeblock 0 (field_mut 45 SymbolSet/1972)
                            (field_mut 46 SymbolSet/1972)))
                      leq_join/3470 =a (field_mut 0 include/15301)
                      terminal/3471 =
                        (function t/3473[int]
                          (apply (field_imm 2 SymbolSet/1972)
                            (makeblock 1 (int) t/3473)))
                      first/3474 = sfirst/3451)
                     (makeblock 0 leq_join/3470 bottom/3461 terminal/3471
                       first/3474))))
              (field_imm 2 F/3515))
          *match*/15335 =
            (if (field_imm 1 G/488)
              (apply (field_imm 2 (global Dune__exe__Error!)) 3
                (function f/3516 : int
                  (for nt/3517 (field_imm 5 Nonterminal/1110) to
                    (- (field_imm 6 Nonterminal/1110) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3516
                      [0:
                       [11:
                        "sfollow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "sfollow(%s) = %s\n"]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3517)
                      (apply (field_imm 43 SymbolSet/1972)
                        (apply sfollow/3460 nt/3517))))))
              0)
          explain/3522 =
            (function tok/3524[int] rhs/3525 i/3526[int]
              (let (length/3527 =[int] (array.length[addr] rhs/3525))
                (letrec
                  (loop/3528
                     (function i/3529[int]
                       (seq
                         (if (< i/3529 length/3527) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1637 4])))
                         (let
                           (symbol/3530 = (array.get[addr] rhs/3525 i/3529))
                           (switch* symbol/3530
                            case tag 0:
                             (let (nt/3532 =a (field_imm 0 symbol/3530))
                               (if
                                 (apply (field_imm 6 TerminalSet/1666)
                                   tok/3524
                                   (apply (field_imm 0 FIRST/3107) nt/3532))
                                 (makeblock 0 (int,int) tok/3524 nt/3532)
                                 (seq
                                   (if
                                     (apply (field_imm 0 NULLABLE/3080)
                                       nt/3532)
                                     0
                                     (raise
                                       (makeblock 0
                                         (global Assert_failure/28!)
                                         [0: "src/grammarFunctor.ml" 1647 10])))
                                   (let
                                     (e/3535 = (apply loop/3528 (+ i/3529 1)))
                                     (catch
                                       (switch* e/3535
                                        case int 0: (exit 128)
                                        case tag 0: (exit 128)
                                        case tag 1:
                                         (let
                                           (e/3534 =a (field_imm 1 e/3535)
                                            symbols/3533 =a
                                              (field_imm 0 e/3535))
                                           (makeblock 1
                                             (makeblock 0 symbol/3530
                                               symbols/3533)
                                             e/3534)))
                                      with (128)
                                       (makeblock 1
                                         (makeblock 0 symbol/3530 0) e/3535))))))
                            case tag 1:
                             (let (tok'/3531 =a (field_imm 0 symbol/3530))
                               (seq
                                 (if
                                   (apply (field_imm 3 Terminal/1588)
                                     tok/3524 tok'/3531)
                                   0
                                   (raise
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "src/grammarFunctor.ml" 1641 8])))
                                 0)))))))
                  (apply loop/3528 i/3526)))))
         (letrec
           (convert/3536
              (function param/3542
                (switch* param/3542
                 case int 0: ""
                 case tag 0:
                  (let
                    (nt/3538 =a (field_imm 1 param/3542)
                     tok/3537 =a (field_imm 0 param/3542))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [2: 0 [11: " can begin with " [2: 0 0]]]
                       "%s can begin with %s"]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3538)
                      (apply (field_imm 6 Terminal/1588) tok/3537)))
                 case tag 1:
                  (let
                    (e/3540 =a (field_imm 1 param/3542)
                     symbols/3539 =a (field_imm 0 param/3542)
                     e/3541 = (apply convert/3536 e/3540))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [2: 0 [11: " can vanish" [2: 0 [2: 0 0]]]]
                       "%s can vanish%s%s"]
                      (apply (field_imm 11 Symbol/1729) symbols/3539)
                      (if (caml_string_equal e/3541 "") "" " and ") e/3541)))))
           (let
             (Analysis/3582 =
                (let
                  (nullable/3543 = (field_imm 0 NULLABLE/3080)
                   nullable_symbol/3544 = (field_imm 1 NULLABLE/3080)
                   first/3545 = (field_imm 0 FIRST/3107)
                   first_symbol/3546 = (field_imm 1 FIRST/3107)
                   nullable_first_prod/3547 =
                     (function prod/3549[int] i/3550[int]
                       (makeblock 0 (int,*)
                         (apply (field_imm 2 NULLABLE/3080) prod/3549 i/3550)
                         (apply (field_imm 2 FIRST/3107) prod/3549 i/3550)))
                   nullable_first_prod/3551 =
                     (apply (field_imm 2 (global Dune__exe__Misc!))
                       (field_imm 1 Production/2648)
                       (function prod/3552[int]
                         (apply (field_imm 2 (global Dune__exe__Misc!))
                           (+
                             (apply (field_imm 20 Production/2648) prod/3552)
                             1)
                           (function i/3553[int]
                             (apply nullable_first_prod/3547 prod/3552
                               i/3553)))))
                   first_prod_lookahead/3554 =
                     (function prod/3556[int] i/3557[int] z/3558[int]
                       (let
                         (*match*/15306 =
                            (apply nullable_first_prod/3551 prod/3556 i/3557)
                          first/3560 =a (field_imm 1 *match*/15306)
                          nullable/3559 =a (field_imm 0 *match*/15306))
                         (if nullable/3559
                           (apply (field_imm 7 TerminalSet/1666) z/3558
                             first/3560)
                           first/3560)))
                   explain_first_rhs/3561 =
                     (function tok/3563[int] rhs/3564 i/3565[int]
                       (apply convert/3536
                         (apply explain/3522 tok/3563 rhs/3564 i/3565)))
                   follow/3566 = follow/3364
                   attributes/3567 = (field_imm 7 (field_imm 0 G/488))
                   minimal/3568 =
                     (function nt/3570[int] : int
                       (apply
                         (field_imm 10
                           (global Dune__exe__CompletedNatWitness!))
                         (apply (field_imm 0 MINIMAL/3174) nt/3570)))
                   minimal_prod/3571 =
                     (function prod/3573[int] i/3574[int] : int
                       (seq
                         (if
                           (&& (<= 0 i/3574)
                             (<= i/3574
                               (apply (field_imm 20 Production/2648)
                                 prod/3573)))
                           0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1719 4])))
                         (apply
                           (field_imm 10
                             (global Dune__exe__CompletedNatWitness!))
                           (apply (field_imm 2 MINIMAL/3174) prod/3573
                             i/3574))))
                   maximal/3575 =
                     (function nt/3577[int] : int
                       (apply
                         (field_imm 10 (global Dune__exe__NatInfinityMax!))
                         (apply (field_imm 0 MAXIMAL/3276) nt/3577)))
                   maximal_prod/3578 =
                     (function prod/3580[int] i/3581[int] : int
                       (seq
                         (if
                           (&& (<= 0 i/3581)
                             (<= i/3581
                               (apply (field_imm 20 Production/2648)
                                 prod/3580)))
                           0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1726 4])))
                         (apply
                           (field_imm 10 (global Dune__exe__NatInfinityMax!))
                           (apply (field_imm 2 MAXIMAL/3276) prod/3580
                             i/3581)))))
                  (makeblock 0 nullable/3543 nullable_symbol/3544 first/3545
                    first_symbol/3546 nullable_first_prod/3551
                    first_prod_lookahead/3554 explain_first_rhs/3561
                    follow/3566 attributes/3567 minimal/3568
                    minimal_prod/3571 maximal/3575 maximal_prod/3578))
              Precedence/3624 =
                (let
                  (precedence_order/3593 =
                     (function p1/3595 p2/3596 : int
                       (catch
                         (catch
                           (if (isint p1/3595) (exit 132)
                             (if (isint p2/3596) (exit 133)
                               (let
                                 (*match*/15310 =a (field_imm 3 p2/3596)
                                  *match*/15309 =a (field_imm 2 p2/3596)
                                  l2/3600 =a (field_imm 1 p2/3596)
                                  m2/3599 =a (field_imm 0 p2/3596)
                                  *match*/15308 =a (field_imm 3 p1/3595)
                                  *match*/15307 =a (field_imm 2 p1/3595)
                                  l1/3598 =a (field_imm 1 p1/3595)
                                  m1/3597 =a (field_imm 0 p1/3595))
                                 (if
                                   (not
                                     (apply
                                       (field_imm 4
                                         (global Dune__exe__InputFile!))
                                       m1/3597 m2/3599))
                                   3
                                   (if (> l1/3598 l2/3600) 1
                                     (if (< l1/3598 l2/3600) 0 2))))))
                          with (133) (exit 132))
                        with (132) 3))
                   production_order/3601 =
                     (function p1/3603 p2/3604 : int
                       (let
                         (l2/3608 =a (field_imm 1 p2/3604)
                          m2/3607 =a (field_imm 0 p2/3604)
                          l1/3606 =a (field_imm 1 p1/3603)
                          m1/3605 =a (field_imm 0 p1/3603))
                         (if
                           (not
                             (apply
                               (field_imm 4 (global Dune__exe__InputFile!))
                               m1/3605 m2/3607))
                           3
                           (if (> l1/3606 l2/3608) 1
                             (if (< l1/3606 l2/3608) 0 2)))))
                   shift_reduce/3609 =
                     (function tok/3611[int] prod/3612[int] : int
                       (let
                         (*match*/15321 =
                            (apply (field_imm 14 Terminal/1588) tok/3611)
                          tokp/3614 =a (field_imm 1 *match*/15321)
                          fact1/3613 =a (field_imm 0 *match*/15321)
                          *match*/15317 =
                            (apply (field_imm 47 Production/2648) prod/3612)
                          prodp/3616 =a (field_imm 1 *match*/15317)
                          fact2/3615 =a (field_imm 0 *match*/15317)
                          c/3617 =
                            (apply precedence_order/3593 tokp/3614
                              prodp/3616))
                         (catch (if (>= c/3617 3) 3 (exit 135)) with (135)
                           (seq
                             (let (lzarg/15313 = fact1/3613)
                               (if (isint lzarg/15313) lzarg/15313
                                 (switch (caml_obj_tag lzarg/15313)
                                  case int 250: (field_mut 0 lzarg/15313)
                                  case int 246:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15313))
                                  case int 244:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15313))
                                  default: lzarg/15313)))
                             (let (lzarg/15312 = fact2/3615)
                               (if (isint lzarg/15312) lzarg/15312
                                 (switch (caml_obj_tag lzarg/15312)
                                  case int 250: (field_mut 0 lzarg/15312)
                                  case int 246:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15312))
                                  case int 244:
                                   (apply
                                     (field_imm 1 (global CamlinternalLazy!))
                                     (opaque lzarg/15312))
                                  default: lzarg/15312)))
                             (switch* c/3617
                              case int 0: 1
                              case int 1: 0
                              case int 2:
                               (let
                                 (*match*/15311 =
                                    (apply (field_imm 15 Terminal/1588)
                                      tok/3611))
                                 (catch
                                   (switch* *match*/15311
                                    case int 0: 1
                                    case int 1: 0
                                    case int 2: 2
                                    case int 3: (exit 134))
                                  with (134)
                                   (raise
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "src/grammarFunctor.ml" 1801 30]))))
                              case int 3:
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 1793 12])))))))
                   reduce_reduce/3618 =
                     (function prod1/3620[int] prod2/3621[int]
                       (let
                         (pl1/3622 =
                            (array.get[addr] (field_imm 7 Production/2648)
                              prod1/3620)
                          pl2/3623 =
                            (array.get[addr] (field_imm 7 Production/2648)
                              prod2/3621)
                          *match*/15322 =
                            (apply production_order/3601 pl1/3622 pl2/3623))
                         (catch
                           (if (!= *match*/15322 1)
                             (if (!= *match*/15322 0) (exit 142)
                               (makeblock 0 (int) prod1/3620))
                             (makeblock 0 (int) prod2/3621))
                          with (142) 0))))
                  (makeblock 0 precedence_order/3593 production_order/3601
                    shift_reduce/3609 reduce_reduce/3618))
              diagnostics/3625 =
                (function param/3627[int] : int
                  (if (not (field_imm 40 (global Dune__exe__Settings!)))
                    (seq (apply (field_imm 4 TokPrecedence/990) 0)
                      (apply (field_imm 44 Production/2648) 0))
                    0))
              OnErrorReduce/3650 =
                (let
                  (declarations/3628 = (field_imm 6 (field_imm 0 G/488))
                   print/3629 =
                     (function nt/3630[int]
                       (apply (field_imm 10 Nonterminal/1110) 0 nt/3630))
                   lookup/3631 =
                     (function nt/3633 : int
                       (try (apply (field_imm 11 Nonterminal/1110) nt/3633)
                        with exn/15323
                         (catch
                           (if (== exn/15323 (field_imm 7 (global Stdlib!)))
                             (raise
                               (makeblock 0 (global Assert_failure/28!)
                                 [0: "src/grammarFunctor.ml" 1863 6]))
                             (exit 143))
                          with (143) (reraise exn/15323))))
                   reduce/3634 =
                     (function prod/3636[int] : int
                       (let
                         (nt/3637 =[int]
                            (apply (field_imm 18 Production/2648) prod/3636))
                         (apply (field_imm 29 (global Dune__exe__StringMap!))
                           (apply print/3629 nt/3637) declarations/3628)))
                   iter/3638 =
                     (function f/3639 : int
                       (apply (field_imm 21 (global Dune__exe__StringMap!))
                         (function nt/3640 _prec/3641 : int
                           (apply f/3639 (apply lookup/3631 nt/3640)))
                         declarations/3628))
                   preferable/3642 =
                     (function prod1/3644[int] prod2/3645[int] : int
                       (seq
                         (if (!= prod1/3644 prod2/3645) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1878 4])))
                         (let
                           (nt1/3646 =[int]
                              (apply (field_imm 18 Production/2648)
                                prod1/3644)
                            nt2/3647 =[int]
                              (apply (field_imm 18 Production/2648)
                                prod2/3645))
                           (&& (!= nt1/3646 nt2/3647)
                             (catch
                               (try
                                 (let
                                   (prec2/15327 =
                                      (apply
                                        (field_imm 15
                                          (global Dune__exe__StringMap!))
                                        (apply print/3629 nt2/3647)
                                        declarations/3628)
                                    prec1/15326 =
                                      (apply
                                        (field_imm 15
                                          (global Dune__exe__StringMap!))
                                        (apply print/3629 nt1/3646)
                                        declarations/3628))
                                   (exit 146 prec1/15326 prec2/15327))
                                with exn/15325
                                 (catch
                                   (if
                                     (== exn/15325
                                       (field_imm 7 (global Stdlib!)))
                                     (raise
                                       (makeblock 0
                                         (global Assert_failure/28!)
                                         [0: "src/grammarFunctor.ml" 1893 8]))
                                     (exit 145))
                                  with (145) (reraise exn/15325)))
                              with (146 prec1/3648 prec2/3649)
                               (let
                                 (*match*/15324 =
                                    (apply (field_imm 1 Precedence/3624)
                                      prec1/3648 prec2/3649))
                                 (catch
                                   (if (!= *match*/15324 1)
                                     (if (!= *match*/15324 0) (exit 144) 0)
                                     1)
                                  with (144) 0))))))))
                  (makeblock 0 declarations/3628 print/3629 lookup/3631
                    reduce/3634 iter/3638 preferable/3642))
              Sentence/3672 =
                (let
                  (print_abstract/3652 =
                     (function (param/15329, param/15330)
                       (let
                         (terminals/3655 =a param/15330
                          nto/3654 =a param/15329)
                         (apply (field_imm 4 (global Dune__exe__Misc!)) 128
                           (function b/3656 : int
                             (seq
                               (apply
                                 (field_imm 2 (global Dune__exe__Option!))
                                 (function nt/3657[int] : int
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     b/3656 [0: [2: 0 [11: ": " 0]] "%s: "]
                                     (apply (field_imm 10 Nonterminal/1110) 0
                                       nt/3657)))
                                 nto/3654)
                               (let
                                 (separator/3658 =
                                    (apply
                                      (field_imm 29
                                        (global Dune__exe__Misc!))
                                      "" " "))
                                 (seq
                                   (apply
                                     (field_imm 17 (global Stdlib__List!))
                                     (function t/3659[int] : int
                                       (apply
                                         (field_imm 4
                                           (global Stdlib__Printf!))
                                         b/3656 [0: [2: 0 [2: 0 0]] "%s%s"]
                                         (apply separator/3658 0)
                                         (apply (field_imm 6 Terminal/1588)
                                           t/3659)))
                                     terminals/3655)
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     b/3656 [0: [12: '\n' 0] "\n"]))))))))
                   print_concrete/3661 =
                     (function (param/15331, param/15332)
                       (let
                         (terminals/3664 =a param/15332
                          _nto/3663 =a param/15331)
                         (apply (field_imm 4 (global Dune__exe__Misc!)) 128
                           (function b/3665 : int
                             (let
                               (separator/3666 =
                                  (apply
                                    (field_imm 29 (global Dune__exe__Misc!))
                                    "" " "))
                               (apply (field_imm 17 (global Stdlib__List!))
                                 (function t/3667[int] : int
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     b/3665 [0: [2: 0 [2: 0 0]] "%s%s"]
                                     (apply separator/3666 0)
                                     (apply (field_imm 28 Terminal/1588)
                                       t/3667)))
                                 terminals/3664))))))
                   print/3669 =
                     (function style/3670[int] sentence/3671
                       (if (>= style/3670 36732162)
                         (apply print_abstract/3652 sentence/3671)
                         (apply print_concrete/3661 sentence/3671))))
                  (makeblock 0 print_abstract/3652 print_concrete/3661
                    print/3669)))
             (makeblock 0 index/489 TokPrecedence/990 Nonterminal/1110
               Terminal/1588 TerminalSet/1666 Symbol/1729 SymbolSet/1972
               SymbolMap/2227 Production/2648 grammar_uses_error_token/2649
               ProductionMap/2688 GenericAnalysis/3012 NONEMPTY/3051
               NULLABLE/3080 FIRST/3107 MINIMAL/3174
               generates_nonempty_word/3175 G/3201 unbounded/3227
               MAXIMAL/3276 FOLLOW/3363 follow/3364 tfollow/3447 sfirst/3451
               sfollow/3460 explain/3522 convert/3536 Analysis/3582
               Precedence/3624 diagnostics/3625 OnErrorReduce/3650
               Sentence/3672))))))
  (seq
    (setfield_ptr(root-init) 0 (global Dune__exe__GrammarFunctor!)
      (function funarg/15357 funarg/15358 is_a_functor stub
        (let (let/15359 = (apply Make/3822 funarg/15357 funarg/15358))
          (makeblock 0
            (let (let/15360 =a (field_mut 2 let/15359))
              (makeblock 0 (field_mut 1 let/15360) (field_mut 2 let/15360)
                (field_mut 6 let/15360) (field_mut 11 let/15360)
                (field_mut 0 let/15360) (field_mut 10 let/15360)
                (field_mut 19 let/15360) (field_mut 20 let/15360)
                (field_mut 13 let/15360) (field_mut 14 let/15360)
                (field_mut 15 let/15360) (field_mut 16 let/15360)
                (field_mut 17 let/15360) (field_mut 18 let/15360)
                (field_mut 21 let/15360) (field_mut 12 let/15360)
                (field_mut 9 let/15360) (field_mut 8 let/15360)
                (field_mut 22 let/15360)))
            (let (let/15361 =a 0)
              (field_imm 1 (global Dune__exe__Patricia!)))
            (let (let/15362 =a (field_mut 3 let/15359))
              (makeblock 0 (field_mut 4 let/15362) (field_mut 3 let/15362)
                (field_mut 2 let/15362) (field_mut 7 let/15362)
                (field_mut 0 let/15362) (field_mut 1 let/15362)
                (field_mut 6 let/15362) (field_mut 28 let/15362)
                (field_mut 16 let/15362) (field_mut 8 let/15362)
                (field_mut 9 let/15362) (field_mut 29 let/15362)
                (field_mut 10 let/15362) (field_mut 11 let/15362)
                (field_mut 12 let/15362) (field_mut 17 let/15362)
                (field_mut 18 let/15362) (field_mut 19 let/15362)
                (field_mut 20 let/15362) (field_mut 21 let/15362)
                (field_mut 22 let/15362) (field_mut 23 let/15362)
                (field_mut 30 let/15362) (field_mut 25 let/15362)
                (field_mut 26 let/15362) (field_mut 27 let/15362)
                (let (let/15364 =a (field_mut 31 let/15362))
                  (function funarg/15363 is_a_functor stub
                    (let (let/15365 = (apply let/15364 funarg/15363))
                      (makeblock 0 (field_mut 3 let/15365)
                        (field_mut 4 let/15365) (field_mut 5 let/15365)
                        (field_mut 6 let/15365) (field_mut 7 let/15365)
                        (field_mut 8 let/15365) (field_mut 9 let/15365)
                        (field_mut 2 let/15365) (field_mut 10 let/15365)))))))
            (let (let/15366 =a (field_mut 4 let/15359))
              (makeblock 0 (field_mut 0 let/15366) (field_mut 1 let/15366)
                (field_mut 2 let/15366) (field_mut 3 let/15366)
                (field_mut 4 let/15366) (field_mut 5 let/15366)
                (field_mut 6 let/15366) (field_mut 7 let/15366)
                (field_mut 8 let/15366) (field_mut 9 let/15366)
                (field_mut 10 let/15366) (field_mut 11 let/15366)
                (field_mut 12 let/15366) (field_mut 13 let/15366)
                (field_mut 14 let/15366) (field_mut 15 let/15366)
                (field_mut 16 let/15366) (field_mut 17 let/15366)
                (field_mut 18 let/15366) (field_mut 19 let/15366)))
            (let (let/15367 =a 0)
              (field_imm 1 (global Dune__exe__Patricia!)))
            (let (let/15368 =a (field_mut 5 let/15359))
              (makeblock 0 (field_mut 0 let/15368) (field_mut 12 let/15368)
                (field_mut 2 let/15368) (field_mut 3 let/15368)
                (field_mut 4 let/15368) (field_mut 5 let/15368)
                (field_mut 11 let/15368) (field_mut 10 let/15368)
                (field_mut 9 let/15368) (field_mut 8 let/15368)))
            (let (let/15369 =a (field_mut 6 let/15359))
              (makeblock 0 (field_mut 0 let/15369) (field_mut 1 let/15369)
                (field_mut 2 let/15369) (field_mut 3 let/15369)
                (field_mut 4 let/15369) (field_mut 5 let/15369)
                (field_mut 6 let/15369) (field_mut 7 let/15369)
                (field_mut 8 let/15369) (field_mut 9 let/15369)
                (field_mut 10 let/15369) (field_mut 11 let/15369)
                (field_mut 12 let/15369) (field_mut 13 let/15369)
                (field_mut 14 let/15369) (field_mut 15 let/15369)
                (field_mut 16 let/15369) (field_mut 17 let/15369)
                (field_mut 18 let/15369) (field_mut 19 let/15369)
                (field_mut 20 let/15369) (field_mut 21 let/15369)
                (field_mut 22 let/15369) (field_mut 23 let/15369)
                (field_mut 24 let/15369) (field_mut 25 let/15369)
                (field_mut 26 let/15369) (field_mut 27 let/15369)
                (field_mut 28 let/15369) (field_mut 29 let/15369)
                (field_mut 30 let/15369) (field_mut 31 let/15369)
                (field_mut 32 let/15369) (field_mut 33 let/15369)
                (field_mut 34 let/15369) (field_mut 35 let/15369)
                (field_mut 36 let/15369) (field_mut 37 let/15369)
                (field_mut 38 let/15369) (field_mut 39 let/15369)
                (field_mut 40 let/15369) (field_mut 41 let/15369)
                (field_mut 42 let/15369)))
            (field_mut 7 let/15359)
            (let (let/15370 =a (field_mut 8 let/15359))
              (makeblock 0 (field_mut 0 let/15370) (field_mut 2 let/15370)
                (field_mut 3 let/15370) (field_mut 1 let/15370)
                (field_mut 17 let/15370) (field_mut 18 let/15370)
                (field_mut 19 let/15370) (field_mut 20 let/15370)
                (field_mut 21 let/15370) (field_mut 24 let/15370)
                (field_mut 25 let/15370) (field_mut 26 let/15370)
                (field_mut 27 let/15370) (field_mut 30 let/15370)
                (field_mut 31 let/15370) (field_mut 32 let/15370)
                (field_mut 33 let/15370) (field_mut 34 let/15370)
                (field_mut 35 let/15370) (field_mut 36 let/15370)
                (field_mut 37 let/15370) (field_mut 28 let/15370)
                (field_mut 13 let/15370) (field_mut 14 let/15370)
                (field_mut 15 let/15370) (field_mut 23 let/15370)
                (field_mut 22 let/15370) (field_mut 10 let/15370)
                (field_mut 29 let/15370) (field_mut 38 let/15370)
                (field_mut 39 let/15370) (field_mut 40 let/15370)
                (field_mut 41 let/15370)))
            (field_mut 10 let/15359) (field_mut 9 let/15359)
            (field_mut 27 let/15359)
            (let (let/15371 =a (field_mut 28 let/15359))
              (makeblock 0 (field_mut 2 let/15371) (field_mut 3 let/15371)))
            (let (let/15372 =a (field_mut 30 let/15359))
              (makeblock 0 (field_mut 3 let/15372) (field_mut 4 let/15372)
                (field_mut 5 let/15372)))
            (let (let/15373 =a (field_mut 31 let/15359))
              (makeblock 0 (field_mut 2 let/15373)))
            (field_mut 29 let/15359)))))
    0))
(let
  (Make/3822 =
     (function G/15356 */15355 is_a_functor
       (let
         (index/489 =
            (function strings/491
              (let
                (name/540 =
                   (apply (field_imm 9 (global Stdlib__Array!)) strings/491)
                 *match*/15101 =
                   (apply (field_imm 25 (global Stdlib__List!))
                     (function param/708 s/659
                       (let (n/657 =a (field_imm 0 param/708))
                         (makeblock 0 (int,*) (+ n/657 1)
                           (apply
                             (field_imm 1 (global Dune__exe__StringMap!))
                             s/659 n/657 (field_imm 1 param/708)))))
                     (makeblock 0 (int,*) 0
                       (field_imm 0 (global Dune__exe__StringMap!)))
                     strings/491))
                (makeblock 0 (int,*,*) (field_imm 0 *match*/15101) name/540
                  (field_imm 1 *match*/15101))))
          TokPrecedence/990 =
            (let
              (ever_useful/755 =
                 (makemutable 0 (field_imm 0 (global Dune__exe__StringSet!)))
               use/756 =
                 (function id/758 : int
                   (setfield_ptr 0 ever_useful/755
                     (apply (field_imm 1 (global Dune__exe__StringSet!))
                       id/758 (field_mut 0 ever_useful/755))))
               levelip/805 =
                 (function id/807 properties/808
                   (makeblock 0
                     (makemutable 246
                       (function param/15102 (apply use/756 id/807)))
                     (field_mut 6 properties/808)))
               leveli/809 =
                 (function id/811
                   (let
                     (properties/812 =
                        (try
                          (apply
                            (field_imm 15 (global Dune__exe__StringMap!))
                            id/811 (field_imm 5 (field_imm 0 G/15356)))
                         with exn/15103
                          (if (== exn/15103 (field_imm 7 (global Stdlib!)))
                            (raise
                              (makeblock 0 (global Assert_failure/28!)
                                [0: "src/grammarFunctor.ml" 76 8]))
                            (reraise exn/15103))))
                     (apply levelip/805 id/811 properties/812)))
               diagnostics/868 =
                 (function param/989[int] : int
                   (apply (field_imm 21 (global Dune__exe__StringMap!))
                     (function id/870 properties/871 : int
                       (if
                         (not
                           (apply
                             (field_imm 29 (global Dune__exe__StringSet!))
                             id/870 (field_mut 0 ever_useful/755)))
                         (let (*match*/15104 = (field_mut 6 properties/871))
                           (if (isint *match*/15104) 0
                             (apply (field_imm 13 (global Dune__exe__Error!))
                               (makeblock 0
                                 (apply
                                   (field_imm 19
                                     (global Dune__exe__Positions!))
                                   (makeblock 0 (field_imm 2 *match*/15104)
                                     (field_imm 3 *match*/15104)))
                                 0)
                               [0:
                                [11:
                                 "the precedence level assigned to "
                                 [2: 0 [11: " is never useful." 0]]]
                                "the precedence level assigned to %s is never useful."]
                               id/870)))
                         0))
                     (field_imm 5 (field_imm 0 G/15356)))))
              (makeblock 0 ever_useful/755 use/756 levelip/805 leveli/809
                diagnostics/868))
          Nonterminal/1110 =
            (let
              (n2i/992 = (function i/994 i/994)
               equal/995 =
                 (function nt1/997[int] nt2/998[int] : int
                   (== nt1/997 nt2/998))
               compare/999 =
                 (function prim/15109 prim/15108 stub
                   (- prim/15109 prim/15108))
               new_start_nonterminals/1000 =
                 (apply (field_imm 23 (global Dune__exe__StringSet!))
                   (function symbol/1001 ss/1002
                     (makeblock 0
                       (apply (field_imm 27 (global Stdlib!)) symbol/1001
                         "'")
                       ss/1002))
                   (field_imm 3 (field_imm 0 G/15356)) 0)
               original_nonterminals/1003 =
                 (apply (field_imm 8 (global Dune__exe__BasicSyntax!))
                   (field_imm 0 G/15356))
               start/1004 =[int]
                 (apply (field_imm 0 (global Stdlib__List!))
                   new_start_nonterminals/1000)
               *match*/15127 =
                 (apply index/489
                   (apply (field_imm 36 (global Stdlib!))
                     new_start_nonterminals/1000 original_nonterminals/1003))
               map/1007 =a (field_imm 2 *match*/15127)
               name/1006 =a (field_imm 1 *match*/15127)
               n/1005 =a (field_imm 0 *match*/15127)
               *match*/15122 =
                 (if (field_imm 1 G/15356)
                   (apply (field_imm 2 (global Dune__exe__Error!)) 1
                     (function f/1008 : int
                       (apply (field_imm 0 (global Stdlib__Printf!)) f/1008
                         [0:
                          [11:
                           "Grammar has "
                           [4:
                            0 0 0
                            [11:
                             " nonterminal symbols, among which "
                             [4: 0 0 0 [11: " start symbols.\n" 0]]]]]
                          "Grammar has %d nonterminal symbols, among which %d start symbols.\n"]
                         (- n/1005 start/1004) start/1004)))
                   0)
               is_internal_start/1022 =
                 (function nt/1024[int] : int (< nt/1024 start/1004))
               is_user_start/1025 =
                 (function nt/1027[int] : int
                   (apply (field_imm 29 (global Dune__exe__StringSet!))
                     (array.get[addr] name/1006 nt/1027)
                     (field_imm 3 (field_imm 0 G/15356))))
               print/1028 =
                 (function normalize/1029[int] nt/1030[int]
                   (if normalize/1029
                     (apply (field_imm 21 (global Dune__exe__Misc!))
                       (array.get[addr] name/1006 nt/1030))
                     (array.get[addr] name/1006 nt/1030)))
               lookup/1067 =
                 (function name/1069 : int
                   (apply (field_imm 15 (global Dune__exe__StringMap!))
                     name/1069 map/1007))
               positions/1070 =
                 (function nt/1072[int]
                   (field_imm 1
                     (apply (field_imm 15 (global Dune__exe__StringMap!))
                       (apply print/1028 0 nt/1072)
                       (field_imm 8 (field_imm 0 G/15356)))))
               init/1073 =
                 (function f/1075
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1005
                     f/1075))
               iter/1076 =
                 (function f/1077 : int
                   (apply (field_imm 10 (global Dune__exe__Misc!)) n/1005
                     f/1077))
               fold/1078 =
                 (function f/1080 accu/1081
                   (apply (field_imm 12 (global Dune__exe__Misc!)) n/1005
                     f/1080 accu/1081))
               map/1082 =
                 (function f/1083
                   (apply (field_imm 16 (global Dune__exe__Misc!)) n/1005
                     f/1083))
               iterx/1084 =
                 (function f/1086 : int
                   (for nt/1087 start/1004 to (- n/1005 1)
                     (apply f/1086 nt/1087)))
               foldx/1088 =
                 (function f/1090 accu/1091
                   (apply (field_imm 13 (global Dune__exe__Misc!)) start/1004
                     n/1005 f/1090 accu/1091))
               ocamltype/1092 =
                 (function nt/1094[int]
                   (seq
                     (if (not (apply is_internal_start/1022 nt/1094)) 0
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 174 4])))
                     (try
                       (makeblock 0
                         (apply (field_imm 15 (global Dune__exe__StringMap!))
                           (apply print/1028 0 nt/1094)
                           (field_imm 4 (field_imm 0 G/15356))))
                      with exn/15110
                       (if (== exn/15110 (field_imm 7 (global Stdlib!))) 0
                         (reraise exn/15110)))))
               ocamltype_of_start_symbol/1095 =
                 (function nt/1096[int]
                   (let (*match*/15111 = (apply ocamltype/1092 nt/1096))
                     (if (isint *match*/15111)
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 186 8]))
                       (field_imm 0 *match*/15111))))
               tabulate/1100 =
                 (function f/1102
                   (apply
                     (function prim/15113 prim/15112 stub
                       (array.get[gen] prim/15113 prim/15112))
                     (apply (field_imm 0 (global Stdlib__Array!)) n/1005
                       f/1102)))
               attributes/1103 = (caml_make_vect n/1005 0)
               *match*/15118 =
                 (apply (field_imm 21 (global Dune__exe__StringMap!))
                   (function nonterminal/1104 param/1107 : int
                     (let
                       (nt/1106 =[int] (apply lookup/1067 nonterminal/1104))
                       (array.set[addr] attributes/1103 nt/1106
                         (field_imm 3 param/1107))))
                   (field_imm 8 (field_imm 0 G/15356)))
               attributes/1108 =
                 (function nt/1109[int]
                   (array.get[addr] attributes/1103 nt/1109)))
              (makeblock 0 n2i/992 equal/995 compare/999
                new_start_nonterminals/1000 original_nonterminals/1003
                start/1004 n/1005 name/1006 is_internal_start/1022
                is_user_start/1025 print/1028 lookup/1067 positions/1070
                init/1073 iter/1076 fold/1078 map/1082 iterx/1084 foldx/1088
                ocamltype/1092 ocamltype_of_start_symbol/1095 tabulate/1100
                attributes/1108))
          Terminal/1588 =
            (let
              (t2i/1151 = (function i/1153 i/1153)
               i2t/1154 = (function i/1156 i/1156)
               compare/1157 =
                 (function prim/15129 prim/15128 stub
                   (- prim/15129 prim/15128))
               equal/1158 =
                 (function tok1/1160[int] tok2/1161[int] : int
                   (== tok1/1160 tok2/1161))
               *match*/15160 =
                 (let
                   (tokens/1165 =
                      (apply (field_imm 6 (global Dune__exe__BasicSyntax!))
                        (field_imm 0 G/15356)))
                   (catch
                     (if (isint tokens/1165)
                       (if (field_imm 1 G/15356)
                         (apply (field_imm 5 (global Dune__exe__Error!)) 0
                           [0:
                            [11: "no tokens have been declared." 0]
                            "no tokens have been declared."])
                         (exit 22))
                       (exit 22))
                    with (22)
                     (apply index/489
                       (apply (field_imm 36 (global Stdlib!))
                         (makeblock 0 "error" tokens/1165) [0: "#" 0]))))
               map/1164 =a (field_imm 2 *match*/15160)
               name/1163 =a (field_imm 1 *match*/15160)
               n/1162 =a (field_imm 0 *match*/15160)
               print/1166 =
                 (function tok/1167[int]
                   (array.get[addr] name/1163 tok/1167))
               lookup/1168 =
                 (function name/1170 : int
                   (apply (field_imm 15 (global Dune__exe__StringMap!))
                     name/1170 map/1164))
               sharp/1171 =[int] (apply lookup/1168 "#")
               error/1172 =[int] (apply lookup/1168 "error")
               pseudo/1173 =
                 (function tok/1175[int] : int
                   (|| (== tok/1175 sharp/1171) (== tok/1175 error/1172)))
               real/1176 =
                 (function t/1178[int] : int
                   (&& (!= error/1172 t/1178) (!= t/1178 sharp/1171)))
               non_error/1179 =
                 (function tok/1181[int] : int (!= tok/1181 error/1172))
               token_properties/1182 =
                 (let
                   (not_so_dummy_properties/1183 =
                      (makemutable 0 (*,*,*,*,*,int,*,int) "__primitives__" 0
                        (field_imm 11 (global Dune__exe__Positions!)) 0 0 3 0
                        1))
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1162
                     (function tok/1184[int]
                       (try
                         (apply (field_imm 15 (global Dune__exe__StringMap!))
                           (array.get[addr] name/1163 tok/1184)
                           (field_imm 5 (field_imm 0 G/15356)))
                        with exn/15130
                         (if (== exn/15130 (field_imm 7 (global Stdlib!)))
                           (seq
                             (if
                               (|| (== tok/1184 sharp/1171)
                                 (== tok/1184 error/1172))
                               0
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 285 9])))
                             not_so_dummy_properties/1183)
                           (reraise exn/15130))))))
               *match*/15151 =
                 (if (field_imm 1 G/15356)
                   (apply (field_imm 2 (global Dune__exe__Error!)) 1
                     (function f/1185 : int
                       (apply (field_imm 0 (global Stdlib__Printf!)) f/1185
                         [0:
                          [11:
                           "Grammar has "
                           [4: 0 0 0 [11: " terminal symbols.\n" 0]]]
                          "Grammar has %d terminal symbols.\n"]
                         (- n/1162 2))))
                   0)
               precedence_level/1186 =
                 (function tok/1188[int]
                   (apply (field_imm 2 TokPrecedence/990)
                     (apply print/1166 tok/1188)
                     (array.get[addr] token_properties/1182 tok/1188)))
               associativity/1189 =
                 (function tok/1191[int] : int
                   (field_int 5
                     (array.get[addr] token_properties/1182 tok/1191)))
               ocamltype/1192 =
                 (function tok/1194[int]
                   (field_imm 1
                     (array.get[addr] token_properties/1182 tok/1194)))
               init/1195 =
                 (function f/1197
                   (apply (field_imm 0 (global Stdlib__Array!)) n/1162
                     f/1197))
               iter/1198 =
                 (function f/1199 : int
                   (apply (field_imm 10 (global Dune__exe__Misc!)) n/1162
                     f/1199))
               fold/1200 =
                 (function f/1202 accu/1203
                   (apply (field_imm 12 (global Dune__exe__Misc!)) n/1162
                     f/1202 accu/1203))
               map/1204 =
                 (function f/1205
                   (apply (field_imm 16 (global Dune__exe__Misc!)) n/1162
                     f/1205))
               *match*/15148 =
                 (if (== sharp/1171 (- n/1162 1)) 0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/grammarFunctor.ml" 317 4])))
               foldx/1206 =
                 (function f/1208 accu/1209
                   (apply (field_imm 12 (global Dune__exe__Misc!)) sharp/1171
                     f/1208 accu/1209))
               mapx/1210 =
                 (function f/1212
                   (apply (field_imm 16 (global Dune__exe__Misc!)) sharp/1171
                     f/1212))
               *match*/15146 =
                 (if (== error/1172 0) 0
                   (raise
                     (makeblock 0 (global Assert_failure/28!)
                       [0: "src/grammarFunctor.ml" 324 4])))
               iter_real/1213 =
                 (function f/1215 : int
                   (for i/1216 1 to (- n/1162 2) (apply f/1215 i/1216)))
               tokens_without_an_alias/1217 =
                 (let (accu/1218 = (makemutable 0 0))
                   (seq
                     (apply iter_real/1213
                       (function tok/1219[int] : int
                         (let
                           (properties/1220 =
                              (array.get[addr] token_properties/1182
                                tok/1219))
                           (if (== (field_imm 3 properties/1220) 0)
                             (setfield_ptr 0 accu/1218
                               (makeblock 0 (int,*) tok/1219
                                 (field_mut 0 accu/1218)))
                             0))))
                     (apply (field_imm 9 (global Stdlib__List!))
                       (field_mut 0 accu/1218))))
               *match*/15144 =
                 (if
                   (&& (field_imm 1 G/15356)
                     (field_imm 51 (global Dune__exe__Settings!)))
                   (apply (field_imm 17 (global Stdlib__List!))
                     (function tok/1281[int] : int
                       (let
                         (properties/1282 =
                            (array.get[addr] token_properties/1182 tok/1281)
                          pos/1283 = (field_imm 2 properties/1282))
                         (apply (field_imm 13 (global Dune__exe__Error!))
                           (makeblock 0 pos/1283 0)
                           [0:
                            [11:
                             "no alias has been defined for the token "
                             [2: 0 [12: '.' 0]]]
                            "no alias has been defined for the token %s."]
                           (apply print/1166 tok/1281))))
                     tokens_without_an_alias/1217)
                   0)
               every_token_has_an_alias/1284 =[int]
                 (== tokens_without_an_alias/1217 0)
               alias/1285 =
                 (function tok/1287[int]
                   (field_imm 3
                     (array.get[addr] token_properties/1182 tok/1287)))
               unquoted_alias/1288 =
                 (function tok/1290[int]
                   (apply (field_imm 1 (global Dune__exe__Option!))
                     (function qid/1302
                       (seq
                         (if (== (string.get qid/1302 0) '"') 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 357 6])))
                         (let
                           (qid/1372 =
                              (apply (field_imm 15 (global Stdlib__String!))
                                qid/1302 1 (- (string.length qid/1302) 1))
                            lexbuf/1373 =
                              (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                                qid/1372))
                           (apply (field_imm 4 (global Dune__exe__Misc!)) 8
                             (function b/1398 : int
                               (apply
                                 (field_imm 40 (global Dune__exe__Lexer!))
                                 b/1398 lexbuf/1373))))))
                     (apply alias/1285 tok/1290)))
               print_concrete/1529 =
                 (function t/1531[int]
                   (let (*match*/15132 = (apply unquoted_alias/1288 t/1531))
                     (if (isint *match*/15132) (apply print/1166 t/1531)
                       (field_imm 0 *match*/15132))))
               eof/1533 =
                 (try (makeblock 0 (int) (apply lookup/1168 "EOF"))
                  with exn/15133
                   (if (== exn/15133 (field_imm 7 (global Stdlib!))) 0
                     (reraise exn/15133)))
               attributes/1534 =
                 (function tok/1536[int]
                   (field_imm 4
                     (array.get[addr] token_properties/1182 tok/1536)))
               Word/1587 =
                 (function X/15141 is_a_functor
                   (let
                     (*match*/15140 =
                        (if (<= n/1162 256) 0
                          (raise
                            (makeblock 0 (global Assert_failure/28!)
                              [0: "src/grammarFunctor.ml" 406 6])))
                      *match*/15138 =
                        (apply (field_imm 24 (global Dune__exe__Misc!)) 1024)
                      decode/1539 =a (field_imm 1 *match*/15138)
                      encode/1538 =a (field_imm 0 *match*/15138)
                      epsilon/1542 =[int] (apply encode/1538 "")
                      singleton/1543 =
                        (function t/1545[int] : int
                          (apply encode/1538
                            (apply (field_imm 0 (global Stdlib__String!)) 1
                              (apply (field_imm 0 (global Stdlib__Char!))
                                t/1545))))
                      append/1557 =
                        (function i1/1559[int] i2/1560[int] : int
                          (let
                            (w1/1561 = (apply decode/1539 i1/1559)
                             w2/1562 = (apply decode/1539 i2/1560))
                            (if (== (string.length w1/1561) 0) i2/1560
                              (if (== (string.length w2/1562) 0) i1/1559
                                (apply encode/1538
                                  (apply (field_imm 27 (global Stdlib!))
                                    w1/1561 w2/1562))))))
                      length/1563 =
                        (function i/1565[int] : int
                          (string.length (apply decode/1539 i/1565)))
                      first/1566 =
                        (function i/1568[int] z/1569[int] : int
                          (let (w/1570 = (apply decode/1539 i/1568))
                            (if (> (string.length w/1570) 0)
                              (string.get w/1570 0) z/1569))))
                     (letrec
                       (elements/1571
                          (function i/1572[int] n/1573[int] w/1574
                            (if (== i/1572 n/1573) 0
                              (makeblock 0 (int,*) (string.get w/1574 i/1572)
                                (apply elements/1571 (+ i/1572 1) n/1573
                                  w/1574)))))
                       (let
                         (elements/1575 =
                            (function i/1576[int]
                              (let (w/1577 = (apply decode/1539 i/1576))
                                (apply elements/1571 0 (string.length w/1577)
                                  w/1577)))
                          print/1578 =
                            (function i/1579[int]
                              (let (w/1580 = (apply decode/1539 i/1579))
                                (apply
                                  (field_imm 5 (global Dune__exe__Misc!))
                                  (function c/1581[int]
                                    (apply print/1166 c/1581))
                                  " "
                                  (function f/1582 : int
                                    (apply
                                      (field_imm 29 (global Stdlib__String!))
                                      f/1582 w/1580)))))
                          compare/1583 =
                            (function i1/1584[int] i2/1585[int] : int
                              (apply
                                (field_imm 0 (global Dune__exe__Generic!))
                                (apply decode/1539 i1/1584)
                                (apply decode/1539 i2/1585))))
                         (makeblock 0 encode/1538 decode/1539
                           (field_imm 2 *match*/15138) epsilon/1542
                           singleton/1543 append/1557 length/1563 first/1566
                           elements/1575 print/1578 compare/1583))))))
              (makeblock 0 t2i/1151 i2t/1154 compare/1157 equal/1158 n/1162
                name/1163 print/1166 lookup/1168 sharp/1171 error/1172
                pseudo/1173 real/1176 non_error/1179 token_properties/1182
                precedence_level/1186 associativity/1189 ocamltype/1192
                init/1195 iter/1198 fold/1200 map/1204 foldx/1206 mapx/1210
                iter_real/1213 tokens_without_an_alias/1217
                every_token_has_an_alias/1284 alias/1285 unquoted_alias/1288
                print_concrete/1529 eof/1533 attributes/1534 Word/1587))
          TerminalSet/1666 =
            (let
              (include/15161 =
                 (apply
                   (apply
                     (let
                       (let/15162 =
                          (field_imm 0 (global Dune__exe__BoundedBitSet!)))
                       (field_imm 0 (global Dune__exe__BoundedBitSet!)))
                     (makeblock 0 (field_mut 4 Terminal/1588)))
                   0)
               empty/1637 =a (field_mut 0 include/15161)
               add/1644 =a (field_mut 7 include/15161)
               remove/1645 =a (field_mut 8 include/15161)
               union/1646 =a (field_mut 9 include/15161)
               iter/1649 =a (field_mut 12 include/15161)
               print/1655 =
                 (function toks/1656
                   (apply (field_imm 5 (global Dune__exe__Misc!))
                     (field_imm 6 Terminal/1588) " "
                     (function f/1658 : int
                       (apply iter/1649 f/1658 toks/1656))))
               universe/1659 =
                 (apply remove/1645 (field_imm 8 Terminal/1588)
                   (apply remove/1645 (field_imm 9 Terminal/1588)
                     (apply (field_imm 19 Terminal/1588) add/1644 empty/1637)))
               is_maximal/1662 = (function param/1664 : int 0))
              (makeblock 0 empty/1637 (field_mut 1 include/15161)
                (field_mut 2 include/15161) (field_mut 3 include/15161)
                (field_mut 4 include/15161) (field_mut 5 include/15161)
                (field_mut 6 include/15161) add/1644 remove/1645 union/1646
                (field_mut 10 include/15161) (field_mut 11 include/15161)
                iter/1649 (field_mut 13 include/15161)
                (field_mut 14 include/15161) (field_mut 15 include/15161)
                (field_mut 16 include/15161) (field_mut 17 include/15161)
                print/1655 universe/1659 empty/1637 is_maximal/1662
                union/1646))
          Symbol/1729 =
            (let
              (is_terminal/1671 =
                 (function sym/1673 : int
                   (switch* sym/1673 case tag 0: 0
                                     case tag 1: 1))
               compare/1674 =
                 (function sym1/1675 sym2/1676 : int
                   (switch* sym1/1675
                    case tag 0:
                     (switch* sym2/1676
                      case tag 0:
                       (apply (field_imm 2 Nonterminal/1110)
                         (field_imm 0 sym1/1675) (field_imm 0 sym2/1676))
                      case tag 1: 1)
                    case tag 1:
                     (switch* sym2/1676
                      case tag 0: -1
                      case tag 1:
                       (apply (field_imm 2 Terminal/1588)
                         (field_imm 0 sym1/1675) (field_imm 0 sym2/1676)))))
               equal/1681 =
                 (function sym1/1683 sym2/1684 : int
                   (== (apply compare/1674 sym1/1683 sym2/1684) 0)))
              (letrec
                (lequal/1685
                   (function syms1/1686 syms2/1687 : int
                     (catch
                       (if (isint syms1/1686)
                         (if (isint syms2/1687) 1 (exit 49))
                         (if (isint syms2/1687) (exit 49)
                           (&&
                             (apply equal/1681 (field_imm 0 syms1/1686)
                               (field_imm 0 syms2/1687))
                             (apply lequal/1685 (field_imm 1 syms1/1686)
                               (field_imm 1 syms2/1687)))))
                      with (49) 0)))
                (let
                  (non_error/1692 =
                     (function sym/1694 : int
                       (switch* sym/1694
                        case tag 0: 1
                        case tag 1:
                         (apply (field_imm 12 Terminal/1588)
                           (field_imm 0 sym/1694))))
                   print/1696 =
                     (function param/1699
                       (switch* param/1699
                        case tag 0:
                         (apply (field_imm 10 Nonterminal/1110) 0
                           (field_imm 0 param/1699))
                        case tag 1:
                         (apply (field_imm 6 Terminal/1588)
                           (field_imm 0 param/1699))))
                   nonterminal/1700 =
                     (function param/1702 : int
                       (switch* param/1702 case tag 0: 1
                                           case tag 1: 0))
                   buffer/1703 =
                     (apply (field_imm 0 (global Stdlib__Buffer!)) 1024)
                   printaod/1704 =
                     (function offset/1706[int] dot/1707[int] symbols/1708
                       (let
                         (length/1709 =[int]
                            (array.length[addr] symbols/1708)
                          first/1710 = (makemutable 0 (int) 1)
                          separate/1711 =
                            (function param/1713[int] : int
                              (seq
                                (if (not (field_int 0 first/1710))
                                  (apply
                                    (field_imm 4 (global Stdlib__Printf!))
                                    buffer/1703 [0: [12: ' ' 0] " "])
                                  0)
                                (setfield_imm 0 first/1710 0))))
                         (seq
                           (for i/1714 offset/1706 to length/1709
                             (seq
                               (if (== i/1714 dot/1707)
                                 (seq (apply separate/1711 0)
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     buffer/1703 [0: [12: '.' 0] "."]))
                                 0)
                               (if (< i/1714 length/1709)
                                 (seq (apply separate/1711 0)
                                   (apply
                                     (field_imm 4 (global Stdlib__Printf!))
                                     buffer/1703 [0: [2: 0 0] "%s"]
                                     (apply print/1696
                                       (array.get[addr] symbols/1708 i/1714))))
                                 0)))
                           (let
                             (s/1715 =
                                (apply (field_imm 1 (global Stdlib__Buffer!))
                                  buffer/1703))
                             (seq
                               (apply (field_imm 7 (global Stdlib__Buffer!))
                                 buffer/1703)
                               s/1715)))))
                   printao/1716 =
                     (function offset/1718[int] symbols/1719
                       (apply printaod/1704 offset/1718 -1 symbols/1719))
                   printa/1720 =
                     (function symbols/1722
                       (apply printao/1716 0 symbols/1722))
                   printl/1723 =
                     (function symbols/1725
                       (apply printa/1720
                         (apply (field_imm 9 (global Stdlib__Array!))
                           symbols/1725)))
                   lookup/1726 =
                     (function name/1728
                       (try
                         (makeblock 1 (int)
                           (apply (field_imm 7 Terminal/1588) name/1728))
                        with exn/15172
                         (if (== exn/15172 (field_imm 7 (global Stdlib!)))
                           (try
                             (makeblock 0 (int)
                               (apply (field_imm 11 Nonterminal/1110)
                                 name/1728))
                            with exn/15173
                             (if
                               (== exn/15173 (field_imm 7 (global Stdlib!)))
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 609 8]))
                               (reraise exn/15173)))
                           (reraise exn/15172)))))
                  (makeblock 0 is_terminal/1671 compare/1674 equal/1681
                    lequal/1685 non_error/1692 print/1696 nonterminal/1700
                    buffer/1703 printaod/1704 printao/1716 printa/1720
                    printl/1723 lookup/1726))))
          SymbolSet/1972 =
            (let
              (include/15174 =
                 (apply
                   (let (let/15175 = (field_imm 0 (global Stdlib__Set!)))
                     (field_imm 0 (global Stdlib__Set!)))
                   (makeblock 0 (field_mut 1 Symbol/1729)))
               empty/1833 =a (field_mut 0 include/15174)
               union/1837 =a (field_mut 4 include/15174)
               elements/1842 =a (field_mut 9 include/15174)
               subset/1866 =a (field_mut 33 include/15174)
               print/1876 =
                 (function symbols/1877
                   (apply (field_imm 11 Symbol/1729)
                     (apply elements/1842 symbols/1877))))
              (makeblock 0 empty/1833 (field_mut 1 include/15174)
                (field_mut 2 include/15174) (field_mut 3 include/15174)
                union/1837 (field_mut 5 include/15174)
                (field_mut 6 include/15174) (field_mut 7 include/15174)
                (field_mut 8 include/15174) elements/1842
                (field_mut 10 include/15174) (field_mut 11 include/15174)
                (field_mut 12 include/15174) (field_mut 13 include/15174)
                (field_mut 14 include/15174) (field_mut 15 include/15174)
                (field_mut 16 include/15174) (field_mut 17 include/15174)
                (field_mut 18 include/15174) (field_mut 19 include/15174)
                (field_mut 20 include/15174) (field_mut 21 include/15174)
                (field_mut 22 include/15174) (field_mut 23 include/15174)
                (field_mut 24 include/15174) (field_mut 25 include/15174)
                (field_mut 26 include/15174) (field_mut 27 include/15174)
                (field_mut 28 include/15174) (field_mut 29 include/15174)
                (field_mut 30 include/15174) (field_mut 31 include/15174)
                (field_mut 32 include/15174) subset/1866
                (field_mut 34 include/15174) (field_mut 35 include/15174)
                (field_mut 36 include/15174) (field_mut 37 include/15174)
                (field_mut 38 include/15174) (field_mut 39 include/15174)
                (field_mut 40 include/15174) (field_mut 41 include/15174)
                (field_mut 42 include/15174) print/1876 empty/1833
                subset/1866 union/1837))
          SymbolMap/2227 =
            (let
              (include/15176 =
                 (apply
                   (let (let/15177 = (field_imm 0 (global Stdlib__Map!)))
                     (field_imm 0 (global Stdlib__Map!)))
                   (makeblock 0 (field_mut 1 Symbol/1729)))
               empty/2076 =a (field_mut 0 include/15176)
               add/2077 =a (field_mut 1 include/15176)
               fold/2099 =a (field_mut 23 include/15176)
               domain/2119 =
                 (function m/2121
                   (apply fold/2099
                     (function symbol/2122 param/2124 accu/2123
                       (makeblock 0 symbol/2122 accu/2123))
                     m/2121 0))
               init/2215 =
                 (function f/2217 xs/2218
                   (apply (field_imm 25 (global Stdlib__List!))
                     (function accu/2219 x/2220
                       (apply add/2077 x/2220 (apply f/2217 x/2220)
                         accu/2219))
                     empty/2076 xs/2218))
               purelynonterminal/2221 =
                 (function m/2223 : int
                   (apply fold/2099
                     (function symbol/2224 param/2226 accu/2225[int] : int
                       (&& accu/2225
                         (apply (field_imm 6 Symbol/1729) symbol/2224)))
                     m/2223 1)))
              (makeblock 0 empty/2076 add/2077 (field_mut 2 include/15176)
                (field_mut 3 include/15176) (field_mut 4 include/15176)
                (field_mut 5 include/15176) (field_mut 6 include/15176)
                (field_mut 7 include/15176) (field_mut 8 include/15176)
                (field_mut 9 include/15176) (field_mut 10 include/15176)
                (field_mut 11 include/15176) (field_mut 12 include/15176)
                (field_mut 13 include/15176) (field_mut 14 include/15176)
                (field_mut 15 include/15176) (field_mut 16 include/15176)
                (field_mut 17 include/15176) (field_mut 18 include/15176)
                (field_mut 19 include/15176) (field_mut 20 include/15176)
                (field_mut 21 include/15176) (field_mut 22 include/15176)
                fold/2099 (field_mut 24 include/15176)
                (field_mut 25 include/15176) (field_mut 26 include/15176)
                (field_mut 27 include/15176) (field_mut 28 include/15176)
                (field_mut 29 include/15176) (field_mut 30 include/15176)
                (field_mut 31 include/15176) (field_mut 32 include/15176)
                (field_mut 33 include/15176) (field_mut 34 include/15176)
                (field_mut 35 include/15176) (field_mut 36 include/15176)
                (field_mut 37 include/15176) (field_mut 38 include/15176)
                (field_mut 39 include/15176) (field_mut 40 include/15176)
                (field_mut 41 include/15176) (field_mut 42 include/15176)
                domain/2119 init/2215 purelynonterminal/2221))
          Production/2648 =
            (let
              (compare/2229 =
                 (function prim/15179 prim/15178 stub
                   (- prim/15179 prim/15178))
               n/2230 =
                 (let
                   (n/2231 =[int]
                      (apply (field_imm 22 (global Dune__exe__StringMap!))
                        (function param/2235 param/2234 n/2233[int] : int
                          (+ n/2233
                            (apply (field_imm 0 (global Stdlib__List!))
                              (field_imm 0 param/2234))))
                        (field_imm 8 (field_imm 0 G/15356)) 0))
                   (seq
                     (if (field_imm 1 G/15356)
                       (apply (field_imm 2 (global Dune__exe__Error!)) 1
                         (function f/2236 : int
                           (apply (field_imm 0 (global Stdlib__Printf!))
                             f/2236
                             [0:
                              [11:
                               "Grammar has "
                               [4: 0 0 0 [11: " productions.\n" 0]]]
                              "Grammar has %d productions.\n"]
                             n/2231)))
                       0)
                     (+ n/2231
                       (apply (field_imm 8 (global Dune__exe__StringSet!))
                         (field_imm 3 (field_imm 0 G/15356))))))
               p2i/2237 = (function prod/2239 prod/2239)
               i2p/2240 =
                 (function prod/2242[int] : int
                   (seq
                     (if (&& (>= prod/2242 0) (< prod/2242 n/2230)) 0
                       (raise
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "src/grammarFunctor.ml" 691 4])))
                     prod/2242))
               table/2243 =
                 (caml_make_vect n/2230
                   (makeblock 0 (int,*) -1 (makearray[addr])))
               identifiers/2244 = (caml_make_vect n/2230 (makearray[addr]))
               actions/2245 = (caml_make_vect n/2230 0)
               positions/2246 = (caml_make_vect n/2230 0)
               rhs_attributes/2247 =
                 (caml_make_vect n/2230 (makearray[addr]))
               prec_decl/2248 = (caml_make_vect n/2230 0)
               production_level/2249 =
                 (let
                   (dummy/2250 =
                      (makeblock 0 (*,int)
                        (field_imm 3 (global Dune__exe__InputFile!)) 0))
                   (caml_make_vect n/2230 dummy/2250))
               ntprods/2251 =
                 (caml_make_vect (field_imm 6 Nonterminal/1110) [0: -1 -1])
               grammar_uses_error_token/2252 = (makemutable 0 (int) 0)
               *match*/15244 =
                 (apply (field_imm 23 (global Dune__exe__StringSet!))
                   (function nonterminal/2255 param/2293
                     (let
                       (k/2256 =a (field_imm 0 param/2293)
                        nt/2258 =[int]
                          (apply (field_imm 11 Nonterminal/1110)
                            nonterminal/2255)
                        nt'/2259 =[int]
                          (apply (field_imm 11 Nonterminal/1110)
                            (apply (field_imm 27 (global Stdlib!))
                              nonterminal/2255 "'")))
                       (seq
                         (array.set[addr] table/2243 k/2256
                           (makeblock 0 (int,*) nt'/2259
                             (makearray[addr] (makeblock 0 (int) nt/2258))))
                         (array.set[addr] identifiers/2244 k/2256
                           (makearray[addr] "_1"))
                         (array.set[addr] ntprods/2251 nt'/2259
                           (makeblock 0 (int,int) k/2256 (+ k/2256 1)))
                         (array.set[addr] positions/2246 k/2256
                           (apply (field_imm 12 Nonterminal/1110) nt/2258))
                         (makeblock 0 (int,*) (+ k/2256 1)
                           (apply
                             (field_imm 3
                               (field_imm 1 (global Dune__exe__Patricia!)))
                             nt/2258 k/2256 (field_imm 1 param/2293))))))
                   (field_imm 3 (field_imm 0 G/15356))
                   (makeblock 0 (int,*) 0
                     (field_imm 0
                       (field_imm 1 (global Dune__exe__Patricia!)))))
               startprods/2254 =a (field_imm 1 *match*/15244)
               start/2253 =a (field_imm 0 *match*/15244)
               producer_symbol/2294 =
                 (function producer/2295
                   (apply (field_imm 12 Symbol/1729)
                     (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
                       producer/2295))))
              (seq
                (apply (field_imm 22 (global Dune__exe__StringMap!))
                  (function nonterminal/2296 param/2405 k/2298[int] : int
                    (let
                      (nt/2299 =[int]
                         (apply (field_imm 11 Nonterminal/1110)
                           nonterminal/2296)
                       k'/2300 =[int]
                         (apply (field_imm 25 (global Stdlib__List!))
                           (function k/2301[int] branch/2302 : int
                             (let
                               (producers/2303 =
                                  (apply
                                    (field_imm 9 (global Stdlib__Array!))
                                    (field_imm 1 branch/2302))
                                rhs/2304 =
                                  (apply
                                    (field_imm 12 (global Stdlib__Array!))
                                    producer_symbol/2294 producers/2303))
                               (seq
                                 (array.set[addr] table/2243 k/2301
                                   (makeblock 0 (int,*) nt/2299 rhs/2304))
                                 (array.set[addr] identifiers/2244 k/2301
                                   (apply
                                     (field_imm 12 (global Stdlib__Array!))
                                     (field_imm 0
                                       (global Dune__exe__BasicSyntax!))
                                     producers/2303))
                                 (array.set[addr] actions/2245 k/2301
                                   (makeblock 0 (field_imm 2 branch/2302)))
                                 (array.set[addr] rhs_attributes/2247 k/2301
                                   (apply
                                     (field_imm 12 (global Stdlib__Array!))
                                     (field_imm 3
                                       (global Dune__exe__BasicSyntax!))
                                     producers/2303))
                                 (array.set[addr] production_level/2249
                                   k/2301 (field_imm 4 branch/2302))
                                 (array.set[addr] prec_decl/2248 k/2301
                                   (field_imm 3 branch/2302))
                                 (array.set[addr] positions/2246 k/2301
                                   (makeblock 0 (field_imm 0 branch/2302) 0))
                                 (if
                                   (not
                                     (apply
                                       (field_imm 51
                                         (global Dune__exe__MArray!))
                                       (field_imm 4 Symbol/1729) rhs/2304))
                                   (setfield_imm 0
                                     grammar_uses_error_token/2252 1)
                                   0)
                                 (+ k/2301 1))))
                           k/2298 (field_imm 0 param/2405)))
                      (seq
                        (array.set[addr] ntprods/2251 nt/2299
                          (makeblock 0 (int,int) k/2298 k'/2300))
                        k'/2300)))
                  (field_imm 8 (field_imm 0 G/15356)) start/2253)
                (let
                  (iternt/2406 =
                     (function nt/2408[int] f/2409 : int
                       (let
                         (*match*/15189 =
                            (array.get[addr] ntprods/2251 nt/2408))
                         (apply (field_imm 11 (global Dune__exe__Misc!))
                           (field_imm 0 *match*/15189)
                           (field_imm 1 *match*/15189) f/2409)))
                   foldnt/2412 =
                     (function nt/2414[int] f/2415 accu/2416
                       (let
                         (*match*/15193 =
                            (array.get[addr] ntprods/2251 nt/2414))
                         (apply (field_imm 13 (global Dune__exe__Misc!))
                           (field_imm 0 *match*/15193)
                           (field_imm 1 *match*/15193) f/2415 accu/2416)))
                   mapnt/2419 =
                     (function nt/2421[int] f/2422
                       (let
                         (*match*/15197 =
                            (array.get[addr] ntprods/2251 nt/2421))
                         (apply (field_imm 15 (global Dune__exe__Misc!))
                           (field_imm 0 *match*/15197)
                           (field_imm 1 *match*/15197) f/2422)))
                   foldnt_lazy/2425 =
                     (function nt/2427[int] f/2428 accu/2429
                       (let
                         (*match*/15201 =
                            (array.get[addr] ntprods/2251 nt/2427))
                         (apply (field_imm 14 (global Dune__exe__Misc!))
                           (field_imm 0 *match*/15201)
                           (field_imm 1 *match*/15201) f/2428 accu/2429)))
                   def/2432 =
                     (function prod/2434[int]
                       (array.get[addr] table/2243 prod/2434))
                   nt/2435 =
                     (function prod/2437[int] : int
                       (let
                         (*match*/15205 =
                            (array.get[addr] table/2243 prod/2437))
                         (field_imm 0 *match*/15205)))
                   rhs/2439 =
                     (function prod/2441[int]
                       (let
                         (*match*/15210 =
                            (array.get[addr] table/2243 prod/2441))
                         (field_imm 1 *match*/15210)))
                   length/2443 =
                     (function prod/2445[int] : int
                       (array.length[addr] (apply rhs/2439 prod/2445)))
                   identifiers/2446 =
                     (function prod/2447[int]
                       (array.get[addr] identifiers/2244 prod/2447))
                   is_start/2448 =
                     (function prod/2450[int] : int (< prod/2450 start/2253))
                   classify/2451 =
                     (function prod/2453[int]
                       (if (apply is_start/2448 prod/2453)
                         (let
                           (*match*/15212 =
                              (array.get[addr] (apply rhs/2439 prod/2453) 0))
                           (switch* *match*/15212
                            case tag 0:
                             (makeblock 0 (int) (field_imm 0 *match*/15212))
                            case tag 1:
                             (raise
                               (makeblock 0 (global Assert_failure/28!)
                                 [0: "src/grammarFunctor.ml" 832 10]))))
                         0))
                   action/2455 =
                     (function prod/2457[int]
                       (let
                         (*match*/15214 =
                            (array.get[addr] actions/2245 prod/2457))
                         (if (isint *match*/15214)
                           (seq
                             (if (apply is_start/2448 prod/2457) 0
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 842 8])))
                             (raise
                               (makeblock 0 (global Assert_failure/28!)
                                 [0: "src/grammarFunctor.ml" 843 8])))
                           (field_imm 0 *match*/15214))))
                   positions/2459 =
                     (function prod/2460[int]
                       (array.get[addr] positions/2246 prod/2460))
                   lhs_attributes/2461 =
                     (function prod/2463[int]
                       (apply (field_imm 22 Nonterminal/1110)
                         (apply nt/2435 prod/2463)))
                   rhs_attributes/2464 =
                     (function prod/2465[int]
                       (array.get[addr] rhs_attributes/2247 prod/2465))
                   startsymbol2startprod/2466 =
                     (function nt/2468[int] : int
                       (try
                         (apply
                           (field_imm 2
                             (field_imm 1 (global Dune__exe__Patricia!)))
                           nt/2468 startprods/2254)
                        with exn/15215
                         (if (== exn/15215 (field_imm 7 (global Stdlib!)))
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 858 6]))
                           (reraise exn/15215))))
                   error_free/2469 =
                     (function prod/2471[int] : int
                       (apply (field_imm 51 (global Dune__exe__MArray!))
                         (field_imm 4 Symbol/1729)
                         (apply rhs/2439 prod/2471)))
                   init/2472 =
                     (function f/2474
                       (apply (field_imm 0 (global Stdlib__Array!)) n/2230
                         f/2474))
                   iter/2475 =
                     (function f/2476 : int
                       (apply (field_imm 10 (global Dune__exe__Misc!)) n/2230
                         f/2476))
                   fold/2477 =
                     (function f/2479 accu/2480
                       (apply (field_imm 12 (global Dune__exe__Misc!)) n/2230
                         f/2479 accu/2480))
                   map/2481 =
                     (function f/2482
                       (apply (field_imm 16 (global Dune__exe__Misc!)) n/2230
                         f/2482))
                   amap/2483 =
                     (function f/2485
                       (apply (field_imm 0 (global Stdlib__Array!)) n/2230
                         f/2485))
                   iterx/2486 =
                     (function f/2488 : int
                       (for prod/2489 start/2253 to (- n/2230 1)
                         (apply f/2488 prod/2489)))
                   foldx/2490 =
                     (function f/2492 accu/2493
                       (apply (field_imm 13 (global Dune__exe__Misc!))
                         start/2253 n/2230 f/2492 accu/2493))
                   mapx/2494 =
                     (function f/2496
                       (apply (field_imm 15 (global Dune__exe__Misc!))
                         start/2253 n/2230 f/2496))
                   print/2497 =
                     (function prod/2498[int]
                       (seq
                         (if (not (apply is_start/2448 prod/2498)) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 894 4])))
                         (let
                           (*match*/15219 =
                              (array.get[addr] table/2243 prod/2498)
                            rhs/2500 =a (field_imm 1 *match*/15219)
                            nt/2499 =a (field_imm 0 *match*/15219))
                           (if (== (array.length[addr] rhs/2500) 0)
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0: [2: 0 [11: " ->" 0]] "%s ->"]
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 nt/2499))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0: [2: 0 [11: " -> " [2: 0 0]]] "%s -> %s"]
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 nt/2499)
                               (apply (field_imm 9 Symbol/1729) 0 rhs/2500))))))
                   describe/2501 =
                     (function gerund/2503[int] prod/2504[int]
                       (let (*match*/15220 = (apply classify/2451 prod/2504))
                         (if (isint *match*/15220)
                           (let (ending/2507 = (if gerund/2503 "ing" "e"))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "reduc" [2: 0 [11: " production " [2: 0 0]]]]
                                "reduc%s production %s"]
                               ending/2507 (apply print/2497 prod/2504)))
                           (let (ending/2506 = (if gerund/2503 "ing" ""))
                             (apply (field_imm 3 (global Stdlib__Printf!))
                               [0:
                                [11: "accept" [2: 0 [12: ' ' [2: 0 0]]]]
                                "accept%s %s"]
                               ending/2506
                               (apply (field_imm 10 Nonterminal/1110) 0
                                 (field_imm 0 *match*/15220)))))))
                   tabulate/2508 =
                     (function f/2510
                       (apply (field_imm 2 (global Dune__exe__Misc!)) n/2230
                         f/2510))
                   sum/2511 =
                     (function f/2513 : int
                       (apply (field_imm 3 (global Dune__exe__Misc!)) n/2230
                         f/2513))
                   ever_useful/2553 =
                     (apply (field_imm 0 (global Stdlib__Hashtbl!)) 0 16)
                   consult_prec_decl/2595 =
                     (function prod/2597[int]
                       (let
                         (osym/2598 =
                            (array.get[addr] prec_decl/2248 prod/2597))
                         (makeblock 0
                           (makemutable 246
                             (function param/15221
                               (apply
                                 (field_imm 2 (global Dune__exe__Option!))
                                 (function sym/2599 : int
                                   (let
                                     (pos/2600 =
                                        (apply
                                          (field_imm 1
                                            (global Dune__exe__Positions!))
                                          sym/2599))
                                     (apply
                                       (field_imm 4
                                         (global Stdlib__Hashtbl!))
                                       ever_useful/2553 pos/2600 0)))
                                 osym/2598)))
                           osym/2598)))
                   diagnostics/2601 =
                     (function param/2607[int] : int
                       (apply iterx/2486
                         (function prod/2603[int] : int
                           (let
                             (osym/2604 =
                                (array.get[addr] prec_decl/2248 prod/2603))
                             (apply (field_imm 2 (global Dune__exe__Option!))
                               (function sym/2605 : int
                                 (let
                                   (pos/2606 =
                                      (apply
                                        (field_imm 1
                                          (global Dune__exe__Positions!))
                                        sym/2605))
                                   (if
                                     (not
                                       (apply
                                         (field_imm 8
                                           (global Stdlib__Hashtbl!))
                                         ever_useful/2553 pos/2606))
                                     (seq
                                       (apply
                                         (field_imm 13
                                           (global Dune__exe__Error!))
                                         (makeblock 0 pos/2606 0)
                                         [0:
                                          [11:
                                           "this "
                                           [12:
                                            '%'
                                            [11:
                                             "prec declaration is never useful."
                                             0]]]
                                          "this %%prec declaration is never useful."])
                                       (apply
                                         (field_imm 4
                                           (global Stdlib__Hashtbl!))
                                         ever_useful/2553 pos/2606 0))
                                     0)))
                               osym/2604)))))
                   rightmost_terminal/2612 =
                     (function prod/2614[int]
                       (apply (field_imm 16 (global Stdlib__Array!))
                         (function accu/2615 symbol/2616
                           (switch* symbol/2616
                            case tag 0: accu/2615
                            case tag 1:
                             (makeblock 0 (int) (field_imm 0 symbol/2616))))
                         0 (apply rhs/2439 prod/2614)))
                   combine/2618 =
                     (function e1/2620 e2/2621
                       (makemutable 246
                         (function param/15225
                           (seq
                             (if (isint e1/2620) e1/2620
                               (switch (caml_obj_tag e1/2620)
                                case int 250: (field_mut 0 e1/2620)
                                case int 246:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque e1/2620))
                                case int 244:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque e1/2620))
                                default: e1/2620))
                             (if (isint e2/2621) e2/2621
                               (switch (caml_obj_tag e2/2621)
                                case int 250: (field_mut 0 e2/2621)
                                case int 246:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque e2/2621))
                                case int 244:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque e2/2621))
                                default: e2/2621))))))
                   precedence/2635 =
                     (function prod/2637[int]
                       (let
                         (*match*/15239 =
                            (apply consult_prec_decl/2595 prod/2637)
                          prec_decl/2639 =a (field_imm 1 *match*/15239)
                          fact1/2638 =a (field_imm 0 *match*/15239)
                          oterminal/2640 =
                            (if (isint prec_decl/2639)
                              (apply rightmost_terminal/2612 prod/2637)
                              (makeblock 1
                                (field_imm 0 (field_imm 0 prec_decl/2639)))))
                         (switch* oterminal/2640
                          case int 0: (makeblock 0 fact1/2638 0)
                          case tag 0:
                           (let
                             (*match*/15229 =
                                (apply (field_imm 14 Terminal/1588)
                                  (field_imm 0 oterminal/2640)))
                             (makeblock 0
                               (apply combine/2618 fact1/2638
                                 (field_imm 0 *match*/15229))
                               (field_imm 1 *match*/15229)))
                          case tag 1:
                           (let
                             (*match*/15233 =
                                (apply (field_imm 3 TokPrecedence/990)
                                  (field_imm 0 oterminal/2640)))
                             (makeblock 0
                               (apply combine/2618 fact1/2638
                                 (field_imm 0 *match*/15233))
                               (field_imm 1 *match*/15233)))))))
                  (makeblock 0 compare/2229 n/2230 p2i/2237 i2p/2240
                    table/2243 actions/2245 prec_decl/2248
                    production_level/2249 ntprods/2251
                    grammar_uses_error_token/2252 start/2253 startprods/2254
                    producer_symbol/2294 iternt/2406 foldnt/2412 mapnt/2419
                    foldnt_lazy/2425 def/2432 nt/2435 rhs/2439 length/2443
                    identifiers/2446 is_start/2448 classify/2451 action/2455
                    positions/2459 lhs_attributes/2461 rhs_attributes/2464
                    startsymbol2startprod/2466 error_free/2469 init/2472
                    iter/2475 fold/2477 map/2481 amap/2483 iterx/2486
                    foldx/2490 mapx/2494 print/2497 describe/2501
                    tabulate/2508 sum/2511 ever_useful/2553
                    consult_prec_decl/2595 diagnostics/2601
                    rightmost_terminal/2612 combine/2618 precedence/2635))))
          grammar_uses_error_token/2649 =[int]
            (field_int 0 (field_imm 9 Production/2648))
          ProductionMap/2688 =
            (let
              (include/15254 =a
                 (let
                   (let/15255 = (field_imm 1 (global Dune__exe__Patricia!)))
                   (field_imm 1 (global Dune__exe__Patricia!)))
               empty/2652 =a (field_mut 0 include/15254)
               add/2655 =a (field_mut 3 include/15254)
               start/2683 =
                 (function f/2685
                   (apply (field_imm 12 (global Dune__exe__Misc!))
                     (field_imm 10 Production/2648)
                     (function prod/2686[int] m/2687
                       (apply add/2655 prod/2686 (apply f/2685 prod/2686)
                         m/2687))
                     empty/2652)))
              (makeblock 0 empty/2652 (field_mut 1 include/15254)
                (field_mut 2 include/15254) add/2655
                (field_mut 4 include/15254) (field_mut 5 include/15254)
                (field_mut 6 include/15254) (field_mut 7 include/15254)
                (field_mut 8 include/15254) (field_mut 9 include/15254)
                (field_mut 10 include/15254) (field_mut 11 include/15254)
                (field_mut 12 include/15254) (field_mut 13 include/15254)
                (field_mut 14 include/15254) (field_mut 15 include/15254)
                (field_mut 16 include/15254) (field_mut 17 include/15254)
                (field_mut 18 include/15254) (field_mut 19 include/15254)
                (field_mut 20 include/15254) (field_mut 21 include/15254)
                (field_mut 22 include/15254) (field_mut 23 include/15254)
                (field_mut 24 include/15254) (field_mut 25 include/15254)
                (field_mut 26 include/15254) (field_mut 27 include/15254)
                (field_mut 28 include/15254) (field_mut 29 include/15254)
                start/2683))
          GenericAnalysis/3012 =
            (function P/15272 S/15271 is_a_functor
              (let
                (symbol/2817 =
                   (function sym/2819 get/2820
                     (switch* sym/2819
                      case tag 0: (apply get/2820 (field_imm 0 sym/2819))
                      case tag 1:
                       (apply (field_imm 1 S/15271) (field_imm 0 sym/2819))))
                 production/2823 =
                   (function prod/2825[int] i/2826[int] get/2827
                     (let
                       (rhs/2828 =
                          (apply (field_imm 19 Production/2648) prod/2825)
                        n/2829 =[int] (array.length[addr] rhs/2828))
                       (letrec
                         (loop/2830
                            (function i/2831[int]
                              (if (== i/2831 n/2829) (field_imm 4 S/15271)
                                (let
                                  (sym/2832 =
                                     (array.get[addr] rhs/2828 i/2831))
                                  (apply (field_imm 3 S/15271) sym/2832
                                    (apply symbol/2817 sym/2832 get/2827)
                                    (function param/2833[int]
                                      (apply loop/2830 (+ i/2831 1))))))))
                         (apply loop/2830 i/2826))))
                 nonterminal/2834 =
                   (function nt/2836[int] get/2837
                     (let
                       (*match*/15256 = (apply (field_imm 0 S/15271) nt/2836))
                       (if (isint *match*/15256)
                         (apply (field_imm 16 Production/2648) nt/2836
                           (function prod/2839[int] rest/2840
                             (apply (field_imm 2 S/15271)
                               (apply production/2823 prod/2839 0 get/2837)
                               rest/2840))
                           (field_imm 0 P/15272))
                         (field_imm 0 *match*/15256))))
                 F/2987 =
                   (apply
                     (apply
                       (let
                         (let/15270 =
                            (field_imm 0 (global Vendored_fix__Core!)))
                         (field_imm 0 (global Vendored_fix__Core!)))
                       (apply
                         (let
                           (let/15257 =
                              (field_imm 10 (global Vendored_fix__Glue!)))
                           (field_imm 10 (global Vendored_fix__Glue!)))
                         (makeblock 0 (field_mut 6 Nonterminal/1110))))
                     P/15272)
                 nonterminal/2988 =
                   (apply (field_imm 0 F/2987) nonterminal/2834)
                 symbol/3004 =
                   (function sym/3005
                     (apply symbol/2817 sym/3005 nonterminal/2988))
                 production/3006 =
                   (function prod/3007[int] i/3008[int]
                     (apply production/2823 prod/3007 i/3008
                       nonterminal/2988)))
                (makeblock 0 nonterminal/2988 symbol/3004 production/3006)))
          NONEMPTY/3051 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15273 = (global Vendored_fix__Boolean!)
                   let/15274 =a (global Vendored_fix__Boolean!))
                  (makeblock 0 (field_mut 0 let/15274)
                    (field_mut 1 let/15274) (field_mut 2 let/15274))))
              (let
                (shortcut/3013 = (function _nt/3015 0)
                 terminal/3016 = (function param/3018 : int 1)
                 disjunction/3019 =
                   (function p/3021[int] q/3022 : int
                     (|| p/3021 (apply q/3022 0)))
                 conjunction/3023 =
                   (function param/3027 p/3025[int] q/3026 : int
                     (&& p/3025 (apply q/3026 0)))
                 epsilon/3028 =[int] 1)
                (makeblock 0 shortcut/3013 terminal/3016 disjunction/3019
                  conjunction/3023 epsilon/3028)))
          NULLABLE/3080 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15275 = (global Vendored_fix__Boolean!)
                   let/15276 =a (global Vendored_fix__Boolean!))
                  (makeblock 0 (field_mut 0 let/15276)
                    (field_mut 1 let/15276) (field_mut 2 let/15276))))
              (let
                (shortcut/3052 = (function _nt/3054 0)
                 terminal/3055 = (function param/3057 : int 0)
                 disjunction/3058 =
                   (function p/3060[int] q/3061 : int
                     (|| p/3060 (apply q/3061 0)))
                 conjunction/3062 =
                   (function param/3066 p/3064[int] q/3065 : int
                     (&& p/3064 (apply q/3065 0)))
                 epsilon/3067 =[int] 1)
                (makeblock 0 shortcut/3052 terminal/3055 disjunction/3058
                  conjunction/3062 epsilon/3067)))
          FIRST/3107 =
            (apply
              (apply GenericAnalysis/3012
                (makeblock 0 (field_mut 20 TerminalSet/1666)
                  (field_mut 16 TerminalSet/1666)
                  (field_mut 21 TerminalSet/1666)))
              (let
                (shortcut/3081 = (function _nt/3083 0)
                 terminal/3084 = (field_imm 2 TerminalSet/1666)
                 disjunction/3085 =
                   (function p/3087 q/3088
                     (apply (field_imm 9 TerminalSet/1666) p/3087
                       (apply q/3088 0)))
                 conjunction/3089 =
                   (function symbol/3091 p/3092 q/3093
                     (if (apply (field_imm 1 NULLABLE/3080) symbol/3091)
                       (apply (field_imm 9 TerminalSet/1666) p/3092
                         (apply q/3093 0))
                       p/3092))
                 epsilon/3094 = (field_imm 0 TerminalSet/1666))
                (makeblock 0 shortcut/3081 terminal/3084 disjunction/3085
                  conjunction/3089 epsilon/3094)))
          MINIMAL/3174 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (include/15277 =a
                     (let
                       (let/15278 = (global Dune__exe__CompletedNatWitness!))
                       (global Dune__exe__CompletedNatWitness!)))
                  (makeblock 0 (field_mut 0 include/15277)
                    (field_mut 1 include/15277) (field_mut 2 include/15277))))
              (let
                (shortcut/3108 = (function _nt/3110 0)
                 terminal/3124 =
                   (field_imm 4 (global Dune__exe__CompletedNatWitness!))
                 disjunction/3125 =
                   (field_imm 7 (global Dune__exe__CompletedNatWitness!))
                 conjunction/3126 =
                   (function param/3128
                     (field_imm 8 (global Dune__exe__CompletedNatWitness!)))
                 epsilon/3129 =
                   (field_imm 3 (global Dune__exe__CompletedNatWitness!)))
                (makeblock 0 shortcut/3108 terminal/3124 disjunction/3125
                  conjunction/3126 epsilon/3129)))
          generates_nonempty_word/3175 =
            (function symbol/3177 : int
              (not
                (apply (field_imm 1 TerminalSet/1666)
                  (apply (field_imm 1 FIRST/3107) symbol/3177))))
          G/3201 =
            (let
              (n/3179 =[int] (field_imm 6 Nonterminal/1110)
               index/3180 = (function nt/3181 nt/3181)
               iter/3182 = (field_imm 14 Nonterminal/1110)
               labeled_successors/3183 =
                 (function yield/3185 nt/3186[int] : int
                   (apply (field_imm 13 Production/2648) nt/3186
                     (function prod/3187[int] : int
                       (let
                         (rhs/3188 =
                            (apply (field_imm 19 Production/2648) prod/3187))
                         (apply (field_imm 11 (global Stdlib__Array!))
                           (function i/3189[int] symbol/3190 : int
                             (switch* symbol/3190
                              case tag 0:
                               (let
                                 (gnw/3192 =[int]
                                    (apply
                                      (field_imm 49
                                        (global Dune__exe__MArray!))
                                      (function j/3193[int] symbol/3194 : int
                                        (&& (!= i/3189 j/3193)
                                          (apply generates_nonempty_word/3175
                                            symbol/3194)))
                                      rhs/3188))
                                 (apply yield/3185 gnw/3192
                                   (field_imm 0 symbol/3190)))
                              case tag 1: 0))
                           rhs/3188)))))
               successors/3195 =
                 (function yield/3197 nt/3198[int] : int
                   (apply labeled_successors/3183
                     (function _gnw/3199[int] nt'/3200[int] : int
                       (apply yield/3197 nt'/3200))
                     nt/3198)))
              (makeblock 0 n/3179 index/3180 iter/3182
                labeled_successors/3183 successors/3195))
          unbounded/3202 =
            (makemutable 246
              (function param/15281
                (let
                  (unbounded/3203 =
                     (caml_make_vect (field_imm 6 Nonterminal/1110) 0)
                   T/3222 =
                     (apply
                       (let
                         (let/15280 =
                            (field_imm 0 (global Dune__exe__Tarjan!)))
                         (field_imm 0 (global Dune__exe__Tarjan!)))
                       (makeblock 0 (field_mut 0 G/3201) (field_mut 1 G/3201)
                         (field_mut 4 G/3201) (field_mut 2 G/3201))))
                  (seq
                    (apply (field_imm 2 G/3201)
                      (function nt/3223[int] : int
                        (apply (field_imm 3 G/3201)
                          (function gnw/3224[int] nt'/3225[int] : int
                            (if
                              (&& gnw/3224
                                (== (apply (field_imm 0 T/3222) nt/3223)
                                  (apply (field_imm 0 T/3222) nt'/3225)))
                              (apply (field_imm 17 (global Stdlib__List!))
                                (function nt/3226[int] : int
                                  (array.set[int] unbounded/3203 nt/3226 1))
                                (apply (field_imm 1 T/3222)
                                  (apply (field_imm 0 T/3222) nt/3223)))
                              0))
                          nt/3223)))
                    unbounded/3203))))
          unbounded/3227 =
            (function nt/3228[int] : int
              (array.get[int]
                (if (isint unbounded/3202) unbounded/3202
                  (switch (caml_obj_tag unbounded/3202)
                   case int 250: (field_mut 0 unbounded/3202)
                   case int 246:
                    (apply (field_imm 1 (global CamlinternalLazy!))
                      (opaque unbounded/3202))
                   case int 244:
                    (apply (field_imm 1 (global CamlinternalLazy!))
                      (opaque unbounded/3202))
                   default: unbounded/3202))
                nt/3228))
          MAXIMAL/3276 =
            (apply
              (apply GenericAnalysis/3012
                (let
                  (let/15283 = (global Dune__exe__NatInfinityMax!)
                   let/15284 =a (global Dune__exe__NatInfinityMax!))
                  (makeblock 0 (field_mut 0 let/15284)
                    (field_mut 3 let/15284) (field_mut 4 let/15284))))
              (let
                (shortcut/3241 =
                   (function nt/3243[int]
                     (if (apply unbounded/3227 nt/3243)
                       (makeblock 0
                         (field_imm 1 (global Dune__exe__NatInfinityMax!)))
                       0))
                 terminal/3244 =
                   (function _tok/3246
                     (apply (field_imm 2 (global Dune__exe__NatInfinityMax!))
                       1))
                 disjunction/3259 =
                   (field_imm 7 (global Dune__exe__NatInfinityMax!))
                 conjunction/3260 =
                   (function param/3262
                     (field_imm 8 (global Dune__exe__NatInfinityMax!)))
                 epsilon/3263 =
                   (field_imm 0 (global Dune__exe__NatInfinityMax!)))
                (makeblock 0 shortcut/3241 terminal/3244 disjunction/3259
                  conjunction/3260 epsilon/3263)))
          *match*/15353 =
            (if (field_imm 1 G/15356)
              (seq
                (apply (field_imm 22 (global Dune__exe__StringSet!))
                  (function symbol/3277 : int
                    (let
                      (nt/3278 =[int]
                         (apply (field_imm 11 Nonterminal/1110) symbol/3277))
                      (seq
                        (if (not (apply (field_imm 0 NONEMPTY/3051) nt/3278))
                          (apply (field_imm 5 (global Dune__exe__Error!))
                            (apply (field_imm 12 Nonterminal/1110) nt/3278)
                            [0:
                             [2: 0 [11: " generates the empty language." 0]]
                             "%s generates the empty language."]
                            (apply (field_imm 10 Nonterminal/1110) 0 nt/3278))
                          0)
                        (if
                          (apply (field_imm 1 TerminalSet/1666)
                            (apply (field_imm 0 FIRST/3107) nt/3278))
                          (apply (field_imm 5 (global Dune__exe__Error!))
                            (apply (field_imm 12 Nonterminal/1110) nt/3278)
                            [0:
                             [2:
                              0 [11: " generates the language {epsilon}." 0]]
                             "%s generates the language {epsilon}."]
                            (apply (field_imm 10 Nonterminal/1110) 0 nt/3278))
                          0))))
                  (field_imm 3 (field_imm 0 G/15356)))
                (for nt/3279 (field_imm 5 Nonterminal/1110) to
                  (- (field_imm 6 Nonterminal/1110) 1)
                  (if (not (apply (field_imm 0 NONEMPTY/3051) nt/3279))
                    (apply (field_imm 13 (global Dune__exe__Error!))
                      (apply (field_imm 12 Nonterminal/1110) nt/3279)
                      [0:
                       [2: 0 [11: " generates the empty language." 0]]
                       "%s generates the empty language."]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3279))
                    0)))
              0)
          *match*/15350 =
            (if (field_imm 1 G/15356)
              (apply (field_imm 2 (global Dune__exe__Error!)) 2
                (function f/3280 : int
                  (seq
                    (for nt/3281 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "nullable(" [2: 0 [11: ") = " [9: 0 [12: '\n' 0]]]]]
                         "nullable(%s) = %b\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3281)
                        (apply (field_imm 0 NULLABLE/3080) nt/3281)))
                    (for nt/3282 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "first(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "first(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3282)
                        (apply (field_imm 18 TerminalSet/1666)
                          (apply (field_imm 0 FIRST/3107) nt/3282))))
                    (for nt/3283 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "minimal(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "minimal(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3283)
                        (apply
                          (field_imm 9
                            (global Dune__exe__CompletedNatWitness!))
                          (field_imm 6 Terminal/1588)
                          (apply (field_imm 0 MINIMAL/3174) nt/3283))))
                    (for nt/3284 (field_imm 5 Nonterminal/1110) to
                      (- (field_imm 6 Nonterminal/1110) 1)
                      (apply (field_imm 0 (global Stdlib__Printf!)) f/3280
                        [0:
                         [11:
                          "maximal(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                         "maximal(%s) = %s\n"]
                        (apply (field_imm 10 Nonterminal/1110) 0 nt/3284)
                        (apply
                          (field_imm 9 (global Dune__exe__NatInfinityMax!))
                          (apply (field_imm 0 MAXIMAL/3276) nt/3284)))))))
              0)
          *match*/15347 =
            (if (field_imm 1 G/15356)
              (apply (field_imm 0 (global Dune__exe__Time!))
                "Analysis of the grammar")
              0)
          FOLLOW/3363 =
            (function P/15296 is_a_functor
              (let
                (M/3305 =
                   (apply
                     (let
                       (let/15285 =
                          (field_imm 10 (global Vendored_fix__Glue!)))
                       (field_imm 10 (global Vendored_fix__Glue!)))
                     (makeblock 0 (field_mut 6 Nonterminal/1110)))
                 S/3339 =
                   (apply
                     (apply
                       (let
                         (let/15286 =
                            (field_imm 0 (global Dune__exe__FixSolver!)))
                         (field_imm 0 (global Dune__exe__FixSolver!)))
                       M/3305)
                     (makeblock 0 (field_mut 0 P/15296)))
                 *match*/15295 =
                   (let
                     (sharp/3340 =
                        (apply (field_imm 2 P/15296)
                          (field_imm 8 Terminal/1588)))
                     (for nt/3341 0 to (- (field_imm 5 Nonterminal/1110) 1)
                       (seq
                         (if (apply (field_imm 8 Nonterminal/1110) nt/3341) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1450 6])))
                         (apply (field_imm 0 S/3339) sharp/3340 nt/3341))))
                 *match*/15293 =
                   (apply (field_imm 11 (global Stdlib__Array!))
                     (function prod/3342[int] param/3350 : int
                       (let (nt1/3343 =a (field_imm 0 param/3350))
                         (apply (field_imm 11 (global Stdlib__Array!))
                           (function i/3345[int] symbol/3346 : int
                             (switch* symbol/3346
                              case tag 0:
                               (let
                                 (nt2/3347 =a (field_imm 0 symbol/3346)
                                  nullable/3348 =[int]
                                    (apply (field_imm 2 NULLABLE/3080)
                                      prod/3342 (+ i/3345 1))
                                  first/3349 =
                                    (apply (field_imm 3 P/15296) prod/3342
                                      (+ i/3345 1)))
                                 (seq
                                   (apply (field_imm 0 S/3339) first/3349
                                     nt2/3347)
                                   (if nullable/3348
                                     (apply (field_imm 1 S/3339) nt1/3343
                                       nt2/3347)
                                     0)))
                              case tag 1: 0))
                           (field_imm 1 param/3350))))
                     (field_imm 4 Production/2648))
                 follow/3351 =
                   (makemutable 246
                     (function param/15288
                       (let (S/3355 = (apply (field_imm 2 S/3339) 0))
                         (function nt/3356[int]
                           (apply (field_imm 8 (global Dune__exe__Option!))
                             (apply (field_imm 0 S/3355) nt/3356)
                             (field_imm 1 P/15296))))))
                 follow/3357 =
                   (function nt/3358[int]
                     (apply
                       (if (isint follow/3351) follow/3351
                         (switch (caml_obj_tag follow/3351)
                          case int 250: (field_mut 0 follow/3351)
                          case int 246:
                           (apply (field_imm 1 (global CamlinternalLazy!))
                             (opaque follow/3351))
                          case int 244:
                           (apply (field_imm 1 (global CamlinternalLazy!))
                             (opaque follow/3351))
                          default: follow/3351))
                       nt/3358)))
                (makeblock 0 M/3305 S/3339 follow/3357)))
          follow/3364 =
            (let
              (F/3433 =
                 (apply FOLLOW/3363
                   (let (first/3392 = (field_imm 2 FIRST/3107))
                     (makeblock 0 (field_mut 22 TerminalSet/1666)
                       (field_mut 20 TerminalSet/1666)
                       (field_mut 2 TerminalSet/1666) first/3392))))
              (field_imm 2 F/3433))
          *match*/15343 =
            (if (field_imm 1 G/15356)
              (apply (field_imm 2 (global Dune__exe__Error!)) 2
                (function f/3434 : int
                  (for nt/3435 (field_imm 5 Nonterminal/1110) to
                    (- (field_imm 6 Nonterminal/1110) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3434
                      [0:
                       [11:
                        "follow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "follow(%s) = %s\n"]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3435)
                      (apply (field_imm 18 TerminalSet/1666)
                        (apply follow/3364 nt/3435))))))
              0)
          tfollow/3436 =
            (makemutable 246
              (function param/15299
                (let
                  (tfollow/3437 =
                     (caml_make_vect (field_imm 4 Terminal/1588)
                       (field_imm 0 TerminalSet/1666)))
                  (seq
                    (apply (field_imm 11 (global Stdlib__Array!))
                      (function prod/3438[int] param/3446 : int
                        (let (nt1/3439 =a (field_imm 0 param/3446))
                          (apply (field_imm 11 (global Stdlib__Array!))
                            (function i/3441[int] symbol/3442 : int
                              (switch* symbol/3442
                               case tag 0: 0
                               case tag 1:
                                (let
                                  (t2/3443 =a (field_imm 0 symbol/3442)
                                   nullable/3444 =[int]
                                     (apply (field_imm 2 NULLABLE/3080)
                                       prod/3438 (+ i/3441 1))
                                   first/3445 =
                                     (apply (field_imm 2 FIRST/3107)
                                       prod/3438 (+ i/3441 1)))
                                  (seq
                                    (array.set[gen] tfollow/3437 t2/3443
                                      (apply (field_imm 9 TerminalSet/1666)
                                        first/3445
                                        (array.get[gen] tfollow/3437 t2/3443)))
                                    (if nullable/3444
                                      (array.set[gen] tfollow/3437 t2/3443
                                        (apply (field_imm 9 TerminalSet/1666)
                                          (apply follow/3364 nt1/3439)
                                          (array.get[gen] tfollow/3437
                                            t2/3443)))
                                      0)))))
                            (field_imm 1 param/3446))))
                      (field_imm 4 Production/2648))
                    tfollow/3437))))
          tfollow/3447 =
            (function t/3448[int]
              (array.get[gen]
                (if (isint tfollow/3436) tfollow/3436
                  (switch (caml_obj_tag tfollow/3436)
                   case int 250: (field_mut 0 tfollow/3436)
                   case int 246:
                    (apply (field_imm 1 (global CamlinternalLazy!))
                      (opaque tfollow/3436))
                   case int 244:
                    (apply (field_imm 1 (global CamlinternalLazy!))
                      (opaque tfollow/3436))
                   default: tfollow/3436))
                t/3448))
          *match*/15339 =
            (if (field_imm 1 G/15356)
              (apply (field_imm 2 (global Dune__exe__Error!)) 3
                (function f/3449 : int
                  (for t/3450 0 to (- (field_imm 4 Terminal/1588) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3449
                      [0:
                       [11:
                        "follow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "follow(%s) = %s\n"]
                      (apply (field_imm 6 Terminal/1588) t/3450)
                      (apply (field_imm 18 TerminalSet/1666)
                        (apply tfollow/3447 t/3450))))))
              0)
          sfirst/3451 =
            (function prod/3453[int] i/3454[int]
              (let
                (rhs/3455 = (apply (field_imm 19 Production/2648) prod/3453)
                 n/3456 =[int] (array.length[addr] rhs/3455))
                (letrec
                  (loop/3457
                     (function i/3458[int]
                       (if (== i/3458 n/3456) (field_imm 0 SymbolSet/1972)
                         (let (sym/3459 = (array.get[addr] rhs/3455 i/3458))
                           (apply (field_imm 4 SymbolSet/1972)
                             (apply (field_imm 2 SymbolSet/1972) sym/3459)
                             (if (apply (field_imm 1 NULLABLE/3080) sym/3459)
                               (apply loop/3457 (+ i/3458 1))
                               (field_imm 0 SymbolSet/1972)))))))
                  (apply loop/3457 i/3454))))
          sfollow/3460 =
            (let
              (F/3515 =
                 (apply FOLLOW/3363
                   (let
                     (bottom/3461 = (field_imm 44 SymbolSet/1972)
                      include/15301 =
                        (apply
                          (let
                            (let/15302 =
                               (field_imm 12 (global Vendored_fix__Glue!)))
                            (field_imm 12 (global Vendored_fix__Glue!)))
                          (makeblock 0 (field_mut 45 SymbolSet/1972)
                            (field_mut 46 SymbolSet/1972)))
                      terminal/3471 =
                        (function t/3473[int]
                          (apply (field_imm 2 SymbolSet/1972)
                            (makeblock 1 (int) t/3473))))
                     (makeblock 0 (field_mut 0 include/15301) bottom/3461
                       terminal/3471 sfirst/3451))))
              (field_imm 2 F/3515))
          *match*/15335 =
            (if (field_imm 1 G/15356)
              (apply (field_imm 2 (global Dune__exe__Error!)) 3
                (function f/3516 : int
                  (for nt/3517 (field_imm 5 Nonterminal/1110) to
                    (- (field_imm 6 Nonterminal/1110) 1)
                    (apply (field_imm 0 (global Stdlib__Printf!)) f/3516
                      [0:
                       [11:
                        "sfollow(" [2: 0 [11: ") = " [2: 0 [12: '\n' 0]]]]]
                       "sfollow(%s) = %s\n"]
                      (apply (field_imm 10 Nonterminal/1110) 0 nt/3517)
                      (apply (field_imm 43 SymbolSet/1972)
                        (apply sfollow/3460 nt/3517))))))
              0)
          explain/3522 =
            (function tok/3524[int] rhs/3525 i/3526[int]
              (let (length/3527 =[int] (array.length[addr] rhs/3525))
                (letrec
                  (loop/3528
                     (function i/3529[int]
                       (seq
                         (if (< i/3529 length/3527) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1637 4])))
                         (let
                           (symbol/3530 = (array.get[addr] rhs/3525 i/3529))
                           (switch* symbol/3530
                            case tag 0:
                             (let (nt/3532 =a (field_imm 0 symbol/3530))
                               (if
                                 (apply (field_imm 6 TerminalSet/1666)
                                   tok/3524
                                   (apply (field_imm 0 FIRST/3107) nt/3532))
                                 (makeblock 0 (int,int) tok/3524 nt/3532)
                                 (seq
                                   (if
                                     (apply (field_imm 0 NULLABLE/3080)
                                       nt/3532)
                                     0
                                     (raise
                                       (makeblock 0
                                         (global Assert_failure/28!)
                                         [0: "src/grammarFunctor.ml" 1647 10])))
                                   (let
                                     (e/3535 = (apply loop/3528 (+ i/3529 1)))
                                     (catch
                                       (switch* e/3535
                                        case int 0: (exit 128)
                                        case tag 0: (exit 128)
                                        case tag 1:
                                         (makeblock 1
                                           (makeblock 0 symbol/3530
                                             (field_imm 0 e/3535))
                                           (field_imm 1 e/3535)))
                                      with (128)
                                       (makeblock 1
                                         (makeblock 0 symbol/3530 0) e/3535))))))
                            case tag 1:
                             (seq
                               (if
                                 (apply (field_imm 3 Terminal/1588) tok/3524
                                   (field_imm 0 symbol/3530))
                                 0
                                 (raise
                                   (makeblock 0 (global Assert_failure/28!)
                                     [0: "src/grammarFunctor.ml" 1641 8])))
                               0))))))
                  (apply loop/3528 i/3526)))))
         (letrec
           (convert/3536
              (function param/3542
                (switch* param/3542
                 case int 0: ""
                 case tag 0:
                  (apply (field_imm 3 (global Stdlib__Printf!))
                    [0:
                     [2: 0 [11: " can begin with " [2: 0 0]]]
                     "%s can begin with %s"]
                    (apply (field_imm 10 Nonterminal/1110) 0
                      (field_imm 1 param/3542))
                    (apply (field_imm 6 Terminal/1588)
                      (field_imm 0 param/3542)))
                 case tag 1:
                  (let
                    (e/3541 = (apply convert/3536 (field_imm 1 param/3542)))
                    (apply (field_imm 3 (global Stdlib__Printf!))
                      [0:
                       [2: 0 [11: " can vanish" [2: 0 [2: 0 0]]]]
                       "%s can vanish%s%s"]
                      (apply (field_imm 11 Symbol/1729)
                        (field_imm 0 param/3542))
                      (if (caml_string_equal e/3541 "") "" " and ") e/3541)))))
           (let
             (Analysis/3582 =
                (let
                  (nullable/3543 = (field_imm 0 NULLABLE/3080)
                   nullable_symbol/3544 = (field_imm 1 NULLABLE/3080)
                   first/3545 = (field_imm 0 FIRST/3107)
                   first_symbol/3546 = (field_imm 1 FIRST/3107)
                   nullable_first_prod/3547 =
                     (function prod/3549[int] i/3550[int]
                       (makeblock 0 (int,*)
                         (apply (field_imm 2 NULLABLE/3080) prod/3549 i/3550)
                         (apply (field_imm 2 FIRST/3107) prod/3549 i/3550)))
                   nullable_first_prod/3551 =
                     (apply (field_imm 2 (global Dune__exe__Misc!))
                       (field_imm 1 Production/2648)
                       (function prod/3552[int]
                         (apply (field_imm 2 (global Dune__exe__Misc!))
                           (+
                             (apply (field_imm 20 Production/2648) prod/3552)
                             1)
                           (function i/3553[int]
                             (apply nullable_first_prod/3547 prod/3552
                               i/3553)))))
                   first_prod_lookahead/3554 =
                     (function prod/3556[int] i/3557[int] z/3558[int]
                       (let
                         (*match*/15306 =
                            (apply nullable_first_prod/3551 prod/3556 i/3557)
                          first/3560 =a (field_imm 1 *match*/15306))
                         (if (field_imm 0 *match*/15306)
                           (apply (field_imm 7 TerminalSet/1666) z/3558
                             first/3560)
                           first/3560)))
                   explain_first_rhs/3561 =
                     (function tok/3563[int] rhs/3564 i/3565[int]
                       (apply convert/3536
                         (apply explain/3522 tok/3563 rhs/3564 i/3565)))
                   attributes/3567 = (field_imm 7 (field_imm 0 G/15356))
                   minimal/3568 =
                     (function nt/3570[int] : int
                       (apply
                         (field_imm 10
                           (global Dune__exe__CompletedNatWitness!))
                         (apply (field_imm 0 MINIMAL/3174) nt/3570)))
                   minimal_prod/3571 =
                     (function prod/3573[int] i/3574[int] : int
                       (seq
                         (if
                           (&& (<= 0 i/3574)
                             (<= i/3574
                               (apply (field_imm 20 Production/2648)
                                 prod/3573)))
                           0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1719 4])))
                         (apply
                           (field_imm 10
                             (global Dune__exe__CompletedNatWitness!))
                           (apply (field_imm 2 MINIMAL/3174) prod/3573
                             i/3574))))
                   maximal/3575 =
                     (function nt/3577[int] : int
                       (apply
                         (field_imm 10 (global Dune__exe__NatInfinityMax!))
                         (apply (field_imm 0 MAXIMAL/3276) nt/3577)))
                   maximal_prod/3578 =
                     (function prod/3580[int] i/3581[int] : int
                       (seq
                         (if
                           (&& (<= 0 i/3581)
                             (<= i/3581
                               (apply (field_imm 20 Production/2648)
                                 prod/3580)))
                           0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1726 4])))
                         (apply
                           (field_imm 10 (global Dune__exe__NatInfinityMax!))
                           (apply (field_imm 2 MAXIMAL/3276) prod/3580
                             i/3581)))))
                  (makeblock 0 nullable/3543 nullable_symbol/3544 first/3545
                    first_symbol/3546 nullable_first_prod/3551
                    first_prod_lookahead/3554 explain_first_rhs/3561
                    follow/3364 attributes/3567 minimal/3568
                    minimal_prod/3571 maximal/3575 maximal_prod/3578))
              Precedence/3624 =
                (let
                  (precedence_order/3593 =
                     (function p1/3595 p2/3596 : int
                       (catch
                         (if (isint p1/3595) (exit 132)
                           (if (isint p2/3596) (exit 132)
                             (let
                               (l2/3600 =a (field_imm 1 p2/3596)
                                l1/3598 =a (field_imm 1 p1/3595))
                               (if
                                 (not
                                   (apply
                                     (field_imm 4
                                       (global Dune__exe__InputFile!))
                                     (field_imm 0 p1/3595)
                                     (field_imm 0 p2/3596)))
                                 3
                                 (if (> l1/3598 l2/3600) 1
                                   (if (< l1/3598 l2/3600) 0 2))))))
                        with (132) 3))
                   production_order/3601 =
                     (function p1/3603 p2/3604 : int
                       (let
                         (l2/3608 =a (field_imm 1 p2/3604)
                          l1/3606 =a (field_imm 1 p1/3603))
                         (if
                           (not
                             (apply
                               (field_imm 4 (global Dune__exe__InputFile!))
                               (field_imm 0 p1/3603) (field_imm 0 p2/3604)))
                           3
                           (if (> l1/3606 l2/3608) 1
                             (if (< l1/3606 l2/3608) 0 2)))))
                   shift_reduce/3609 =
                     (function tok/3611[int] prod/3612[int] : int
                       (let
                         (*match*/15321 =
                            (apply (field_imm 14 Terminal/1588) tok/3611)
                          fact1/3613 =a (field_imm 0 *match*/15321)
                          *match*/15317 =
                            (apply (field_imm 47 Production/2648) prod/3612)
                          fact2/3615 =a (field_imm 0 *match*/15317)
                          c/3617 =
                            (apply precedence_order/3593
                              (field_imm 1 *match*/15321)
                              (field_imm 1 *match*/15317)))
                         (if (>= c/3617 3) 3
                           (seq
                             (if (isint fact1/3613) fact1/3613
                               (switch (caml_obj_tag fact1/3613)
                                case int 250: (field_mut 0 fact1/3613)
                                case int 246:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque fact1/3613))
                                case int 244:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque fact1/3613))
                                default: fact1/3613))
                             (if (isint fact2/3615) fact2/3615
                               (switch (caml_obj_tag fact2/3615)
                                case int 250: (field_mut 0 fact2/3615)
                                case int 246:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque fact2/3615))
                                case int 244:
                                 (apply
                                   (field_imm 1 (global CamlinternalLazy!))
                                   (opaque fact2/3615))
                                default: fact2/3615))
                             (switch* c/3617
                              case int 0: 1
                              case int 1: 0
                              case int 2:
                               (let
                                 (*match*/15311 =
                                    (apply (field_imm 15 Terminal/1588)
                                      tok/3611))
                                 (switch* *match*/15311
                                  case int 0: 1
                                  case int 1: 0
                                  case int 2: 2
                                  case int 3:
                                   (raise
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "src/grammarFunctor.ml" 1801 30]))))
                              case int 3:
                               (raise
                                 (makeblock 0 (global Assert_failure/28!)
                                   [0: "src/grammarFunctor.ml" 1793 12])))))))
                   reduce_reduce/3618 =
                     (function prod1/3620[int] prod2/3621[int]
                       (let
                         (pl1/3622 =
                            (array.get[addr] (field_imm 7 Production/2648)
                              prod1/3620)
                          pl2/3623 =
                            (array.get[addr] (field_imm 7 Production/2648)
                              prod2/3621)
                          *match*/15322 =
                            (apply production_order/3601 pl1/3622 pl2/3623))
                         (if (!= *match*/15322 1)
                           (if (!= *match*/15322 0) 0
                             (makeblock 0 (int) prod1/3620))
                           (makeblock 0 (int) prod2/3621)))))
                  (makeblock 0 precedence_order/3593 production_order/3601
                    shift_reduce/3609 reduce_reduce/3618))
              diagnostics/3625 =
                (function param/3627[int] : int
                  (if (not (field_imm 40 (global Dune__exe__Settings!)))
                    (seq (apply (field_imm 4 TokPrecedence/990) 0)
                      (apply (field_imm 44 Production/2648) 0))
                    0))
              OnErrorReduce/3650 =
                (let
                  (declarations/3628 = (field_imm 6 (field_imm 0 G/15356))
                   print/3629 =
                     (function nt/3630[int]
                       (apply (field_imm 10 Nonterminal/1110) 0 nt/3630))
                   lookup/3631 =
                     (function nt/3633 : int
                       (try (apply (field_imm 11 Nonterminal/1110) nt/3633)
                        with exn/15323
                         (if (== exn/15323 (field_imm 7 (global Stdlib!)))
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1863 6]))
                           (reraise exn/15323))))
                   reduce/3634 =
                     (function prod/3636[int] : int
                       (let
                         (nt/3637 =[int]
                            (apply (field_imm 18 Production/2648) prod/3636))
                         (apply (field_imm 29 (global Dune__exe__StringMap!))
                           (apply print/3629 nt/3637) declarations/3628)))
                   iter/3638 =
                     (function f/3639 : int
                       (apply (field_imm 21 (global Dune__exe__StringMap!))
                         (function nt/3640 _prec/3641 : int
                           (apply f/3639 (apply lookup/3631 nt/3640)))
                         declarations/3628))
                   preferable/3642 =
                     (function prod1/3644[int] prod2/3645[int] : int
                       (seq
                         (if (!= prod1/3644 prod2/3645) 0
                           (raise
                             (makeblock 0 (global Assert_failure/28!)
                               [0: "src/grammarFunctor.ml" 1878 4])))
                         (let
                           (nt1/3646 =[int]
                              (apply (field_imm 18 Production/2648)
                                prod1/3644)
                            nt2/3647 =[int]
                              (apply (field_imm 18 Production/2648)
                                prod2/3645))
                           (&& (!= nt1/3646 nt2/3647)
                             (catch
                               (try
                                 (let
                                   (prec2/15327 =
                                      (apply
                                        (field_imm 15
                                          (global Dune__exe__StringMap!))
                                        (apply print/3629 nt2/3647)
                                        declarations/3628)
                                    prec1/15326 =
                                      (apply
                                        (field_imm 15
                                          (global Dune__exe__StringMap!))
                                        (apply print/3629 nt1/3646)
                                        declarations/3628))
                                   (exit 146 prec1/15326 prec2/15327))
                                with exn/15325
                                 (if
                                   (== exn/15325
                                     (field_imm 7 (global Stdlib!)))
                                   (raise
                                     (makeblock 0 (global Assert_failure/28!)
                                       [0: "src/grammarFunctor.ml" 1893 8]))
                                   (reraise exn/15325)))
                              with (146 prec1/3648 prec2/3649)
                               (let
                                 (*match*/15324 =
                                    (apply (field_imm 1 Precedence/3624)
                                      prec1/3648 prec2/3649))
                                 (if (!= *match*/15324 1)
                                   (if (!= *match*/15324 0) 0 0) 1))))))))
                  (makeblock 0 declarations/3628 print/3629 lookup/3631
                    reduce/3634 iter/3638 preferable/3642))
              Sentence/3672 =
                (let
                  (print_abstract/3652 =
                     (function (param/15329, param/15330)
                       (apply (field_imm 4 (global Dune__exe__Misc!)) 128
                         (function b/3656 : int
                           (seq
                             (apply (field_imm 2 (global Dune__exe__Option!))
                               (function nt/3657[int] : int
                                 (apply
                                   (field_imm 4 (global Stdlib__Printf!))
                                   b/3656 [0: [2: 0 [11: ": " 0]] "%s: "]
                                   (apply (field_imm 10 Nonterminal/1110) 0
                                     nt/3657)))
                               param/15329)
                             (let
                               (separator/3658 =
                                  (apply
                                    (field_imm 29 (global Dune__exe__Misc!))
                                    "" " "))
                               (seq
                                 (apply (field_imm 17 (global Stdlib__List!))
                                   (function t/3659[int] : int
                                     (apply
                                       (field_imm 4 (global Stdlib__Printf!))
                                       b/3656 [0: [2: 0 [2: 0 0]] "%s%s"]
                                       (apply separator/3658 0)
                                       (apply (field_imm 6 Terminal/1588)
                                         t/3659)))
                                   param/15330)
                                 (apply
                                   (field_imm 4 (global Stdlib__Printf!))
                                   b/3656 [0: [12: '\n' 0] "\n"])))))))
                   print_concrete/3661 =
                     (function (param/15331, param/15332)
                       (apply (field_imm 4 (global Dune__exe__Misc!)) 128
                         (function b/3665 : int
                           (let
                             (separator/3666 =
                                (apply
                                  (field_imm 29 (global Dune__exe__Misc!)) ""
                                  " "))
                             (apply (field_imm 17 (global Stdlib__List!))
                               (function t/3667[int] : int
                                 (apply
                                   (field_imm 4 (global Stdlib__Printf!))
                                   b/3665 [0: [2: 0 [2: 0 0]] "%s%s"]
                                   (apply separator/3666 0)
                                   (apply (field_imm 28 Terminal/1588)
                                     t/3667)))
                               param/15332)))))
                   print/3669 =
                     (function style/3670[int] sentence/3671
                       (if (>= style/3670 36732162)
                         (apply print_abstract/3652 sentence/3671)
                         (apply print_concrete/3661 sentence/3671))))
                  (makeblock 0 print_abstract/3652 print_concrete/3661
                    print/3669)))
             (makeblock 0 index/489 TokPrecedence/990 Nonterminal/1110
               Terminal/1588 TerminalSet/1666 Symbol/1729 SymbolSet/1972
               SymbolMap/2227 Production/2648 grammar_uses_error_token/2649
               ProductionMap/2688 GenericAnalysis/3012 NONEMPTY/3051
               NULLABLE/3080 FIRST/3107 MINIMAL/3174
               generates_nonempty_word/3175 G/3201 unbounded/3227
               MAXIMAL/3276 FOLLOW/3363 follow/3364 tfollow/3447 sfirst/3451
               sfollow/3460 explain/3522 convert/3536 Analysis/3582
               Precedence/3624 diagnostics/3625 OnErrorReduce/3650
               Sentence/3672))))))
  (seq
    (setfield_ptr(root-init) 0 (global Dune__exe__GrammarFunctor!)
      (function funarg/15357 funarg/15358 is_a_functor stub
        (let (let/15359 = (apply Make/3822 funarg/15357 funarg/15358))
          (makeblock 0
            (let (let/15360 =a (field_mut 2 let/15359))
              (makeblock 0 (field_mut 1 let/15360) (field_mut 2 let/15360)
                (field_mut 6 let/15360) (field_mut 11 let/15360)
                (field_mut 0 let/15360) (field_mut 10 let/15360)
                (field_mut 19 let/15360) (field_mut 20 let/15360)
                (field_mut 13 let/15360) (field_mut 14 let/15360)
                (field_mut 15 let/15360) (field_mut 16 let/15360)
                (field_mut 17 let/15360) (field_mut 18 let/15360)
                (field_mut 21 let/15360) (field_mut 12 let/15360)
                (field_mut 9 let/15360) (field_mut 8 let/15360)
                (field_mut 22 let/15360)))
            (field_imm 1 (global Dune__exe__Patricia!))
            (let (let/15362 =a (field_mut 3 let/15359))
              (makeblock 0 (field_mut 4 let/15362) (field_mut 3 let/15362)
                (field_mut 2 let/15362) (field_mut 7 let/15362)
                (field_mut 0 let/15362) (field_mut 1 let/15362)
                (field_mut 6 let/15362) (field_mut 28 let/15362)
                (field_mut 16 let/15362) (field_mut 8 let/15362)
                (field_mut 9 let/15362) (field_mut 29 let/15362)
                (field_mut 10 let/15362) (field_mut 11 let/15362)
                (field_mut 12 let/15362) (field_mut 17 let/15362)
                (field_mut 18 let/15362) (field_mut 19 let/15362)
                (field_mut 20 let/15362) (field_mut 21 let/15362)
                (field_mut 22 let/15362) (field_mut 23 let/15362)
                (field_mut 30 let/15362) (field_mut 25 let/15362)
                (field_mut 26 let/15362) (field_mut 27 let/15362)
                (let (let/15364 =a (field_mut 31 let/15362))
                  (function funarg/15363 is_a_functor stub
                    (let (let/15365 = (apply let/15364 funarg/15363))
                      (makeblock 0 (field_mut 3 let/15365)
                        (field_mut 4 let/15365) (field_mut 5 let/15365)
                        (field_mut 6 let/15365) (field_mut 7 let/15365)
                        (field_mut 8 let/15365) (field_mut 9 let/15365)
                        (field_mut 2 let/15365) (field_mut 10 let/15365)))))))
            (let (let/15366 =a (field_mut 4 let/15359))
              (makeblock 0 (field_mut 0 let/15366) (field_mut 1 let/15366)
                (field_mut 2 let/15366) (field_mut 3 let/15366)
                (field_mut 4 let/15366) (field_mut 5 let/15366)
                (field_mut 6 let/15366) (field_mut 7 let/15366)
                (field_mut 8 let/15366) (field_mut 9 let/15366)
                (field_mut 10 let/15366) (field_mut 11 let/15366)
                (field_mut 12 let/15366) (field_mut 13 let/15366)
                (field_mut 14 let/15366) (field_mut 15 let/15366)
                (field_mut 16 let/15366) (field_mut 17 let/15366)
                (field_mut 18 let/15366) (field_mut 19 let/15366)))
            (field_imm 1 (global Dune__exe__Patricia!))
            (let (let/15368 =a (field_mut 5 let/15359))
              (makeblock 0 (field_mut 0 let/15368) (field_mut 12 let/15368)
                (field_mut 2 let/15368) (field_mut 3 let/15368)
                (field_mut 4 let/15368) (field_mut 5 let/15368)
                (field_mut 11 let/15368) (field_mut 10 let/15368)
                (field_mut 9 let/15368) (field_mut 8 let/15368)))
            (let (let/15369 =a (field_mut 6 let/15359))
              (makeblock 0 (field_mut 0 let/15369) (field_mut 1 let/15369)
                (field_mut 2 let/15369) (field_mut 3 let/15369)
                (field_mut 4 let/15369) (field_mut 5 let/15369)
                (field_mut 6 let/15369) (field_mut 7 let/15369)
                (field_mut 8 let/15369) (field_mut 9 let/15369)
                (field_mut 10 let/15369) (field_mut 11 let/15369)
                (field_mut 12 let/15369) (field_mut 13 let/15369)
                (field_mut 14 let/15369) (field_mut 15 let/15369)
                (field_mut 16 let/15369) (field_mut 17 let/15369)
                (field_mut 18 let/15369) (field_mut 19 let/15369)
                (field_mut 20 let/15369) (field_mut 21 let/15369)
                (field_mut 22 let/15369) (field_mut 23 let/15369)
                (field_mut 24 let/15369) (field_mut 25 let/15369)
                (field_mut 26 let/15369) (field_mut 27 let/15369)
                (field_mut 28 let/15369) (field_mut 29 let/15369)
                (field_mut 30 let/15369) (field_mut 31 let/15369)
                (field_mut 32 let/15369) (field_mut 33 let/15369)
                (field_mut 34 let/15369) (field_mut 35 let/15369)
                (field_mut 36 let/15369) (field_mut 37 let/15369)
                (field_mut 38 let/15369) (field_mut 39 let/15369)
                (field_mut 40 let/15369) (field_mut 41 let/15369)
                (field_mut 42 let/15369)))
            (field_mut 7 let/15359)
            (let (let/15370 =a (field_mut 8 let/15359))
              (makeblock 0 (field_mut 0 let/15370) (field_mut 2 let/15370)
                (field_mut 3 let/15370) (field_mut 1 let/15370)
                (field_mut 17 let/15370) (field_mut 18 let/15370)
                (field_mut 19 let/15370) (field_mut 20 let/15370)
                (field_mut 21 let/15370) (field_mut 24 let/15370)
                (field_mut 25 let/15370) (field_mut 26 let/15370)
                (field_mut 27 let/15370) (field_mut 30 let/15370)
                (field_mut 31 let/15370) (field_mut 32 let/15370)
                (field_mut 33 let/15370) (field_mut 34 let/15370)
                (field_mut 35 let/15370) (field_mut 36 let/15370)
                (field_mut 37 let/15370) (field_mut 28 let/15370)
                (field_mut 13 let/15370) (field_mut 14 let/15370)
                (field_mut 15 let/15370) (field_mut 23 let/15370)
                (field_mut 22 let/15370) (field_mut 10 let/15370)
                (field_mut 29 let/15370) (field_mut 38 let/15370)
                (field_mut 39 let/15370) (field_mut 40 let/15370)
                (field_mut 41 let/15370)))
            (field_mut 10 let/15359) (field_mut 9 let/15359)
            (field_mut 27 let/15359)
            (let (let/15371 =a (field_mut 28 let/15359))
              (makeblock 0 (field_mut 2 let/15371) (field_mut 3 let/15371)))
            (let (let/15372 =a (field_mut 30 let/15359))
              (makeblock 0 (field_mut 3 let/15372) (field_mut 4 let/15372)
                (field_mut 5 let/15372)))
            (makeblock 0 (field_mut 2 (field_mut 31 let/15359)))
            (field_mut 29 let/15359)))))
    0))

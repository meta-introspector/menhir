[
  structure_item (src/infer.ml[14,995+0]..[14,995+11])
    Pstr_open Fresh
    module_expr (src/infer.ml[14,995+5]..[14,995+11])
      Pmod_ident "Syntax" (src/infer.ml[14,995+5]..[14,995+11])
  structure_item (src/infer.ml[15,1007+0]..[15,1007+12])
    Pstr_open Fresh
    module_expr (src/infer.ml[15,1007+5]..[15,1007+12])
      Pmod_ident "Stretch" (src/infer.ml[15,1007+5]..[15,1007+12])
  structure_item (src/infer.ml[16,1020+0]..[16,1020+16])
    Pstr_open Fresh
    module_expr (src/infer.ml[16,1020+5]..[16,1020+16])
      Pmod_ident "BasicSyntax" (src/infer.ml[16,1020+5]..[16,1020+16])
  structure_item (src/infer.ml[17,1037+0]..[17,1037+7])
    Pstr_open Fresh
    module_expr (src/infer.ml[17,1037+5]..[17,1037+7])
      Pmod_ident "IL" (src/infer.ml[17,1037+5]..[17,1037+7])
  structure_item (src/infer.ml[18,1045+0]..[18,1045+13])
    Pstr_open Fresh
    module_expr (src/infer.ml[18,1045+5]..[18,1045+13])
      Pmod_ident "CodeBits" (src/infer.ml[18,1045+5]..[18,1045+13])
  structure_item (src/infer.ml[19,1059+0]..[19,1059+14])
    Pstr_open Fresh
    module_expr (src/infer.ml[19,1059+5]..[19,1059+14])
      Pmod_ident "TokenType" (src/infer.ml[19,1059+5]..[19,1059+14])
  structure_item (src/infer.ml[28,1372+0]..[29,1391+57])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[28,1372+4]..[28,1372+9])
          Ppat_var "ntvar" (src/infer.ml[28,1372+4]..[28,1372+9])
        expression (src/infer.ml[28,1372+10]..[29,1391+57]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[28,1372+10]..[28,1372+16])
            Ppat_var "symbol" (src/infer.ml[28,1372+10]..[28,1372+16])
          expression (src/infer.ml[29,1391+2]..[29,1391+57])
            Pexp_construct "TypVar" (src/infer.ml[29,1391+2]..[29,1391+8])
            Some
              expression (src/infer.ml[29,1391+9]..[29,1391+57])
                Pexp_apply
                expression (src/infer.ml[29,1391+10]..[29,1391+24])
                  Pexp_ident "Printf.sprintf" (src/infer.ml[29,1391+10]..[29,1391+24])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[29,1391+25]..[29,1391+32])
                      Pexp_constant PConst_string("tv_%s",(src/infer.ml[29,1391+26]..[29,1391+31]),None)
                  <arg>
                  Nolabel
                    expression (src/infer.ml[29,1391+33]..[29,1391+56])
                      Pexp_apply
                      expression (src/infer.ml[29,1391+34]..[29,1391+48])
                        Pexp_ident "Misc.normalize" (src/infer.ml[29,1391+34]..[29,1391+48])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[29,1391+49]..[29,1391+55])
                            Pexp_ident "symbol" (src/infer.ml[29,1391+49]..[29,1391+55])
                      ]
                ]
    ]
  structure_item (src/infer.ml[35,1640+0]..[36,1660+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[35,1640+4]..[35,1640+10])
          Ppat_var "encode" (src/infer.ml[35,1640+4]..[35,1640+10])
        expression (src/infer.ml[35,1640+11]..[36,1660+48]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[35,1640+11]..[35,1640+17])
            Ppat_var "symbol" (src/infer.ml[35,1640+11]..[35,1640+17])
          expression (src/infer.ml[36,1660+2]..[36,1660+48])
            Pexp_apply
            expression (src/infer.ml[36,1660+2]..[36,1660+16])
              Pexp_ident "Printf.sprintf" (src/infer.ml[36,1660+2]..[36,1660+16])
            [
              <arg>
              Nolabel
                expression (src/infer.ml[36,1660+17]..[36,1660+24])
                  Pexp_constant PConst_string("xv_%s",(src/infer.ml[36,1660+18]..[36,1660+23]),None)
              <arg>
              Nolabel
                expression (src/infer.ml[36,1660+25]..[36,1660+48])
                  Pexp_apply
                  expression (src/infer.ml[36,1660+26]..[36,1660+40])
                    Pexp_ident "Misc.normalize" (src/infer.ml[36,1660+26]..[36,1660+40])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[36,1660+41]..[36,1660+47])
                        Pexp_ident "symbol" (src/infer.ml[36,1660+41]..[36,1660+47])
                  ]
            ]
    ]
  structure_item (src/infer.ml[38,1710+0]..[42,1824+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[38,1710+4]..[38,1710+10])
          Ppat_var "decode" (src/infer.ml[38,1710+4]..[38,1710+10])
        expression (src/infer.ml[38,1710+11]..[42,1824+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[38,1710+11]..[38,1710+12])
            Ppat_var "s" (src/infer.ml[38,1710+11]..[38,1710+12])
          expression (src/infer.ml[39,1725+2]..[42,1824+24])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/infer.ml[39,1725+6]..[39,1725+7])
                  Ppat_var "n" (src/infer.ml[39,1725+6]..[39,1725+7])
                expression (src/infer.ml[39,1725+10]..[39,1725+25])
                  Pexp_apply
                  expression (src/infer.ml[39,1725+10]..[39,1725+23])
                    Pexp_ident "String.length" (src/infer.ml[39,1725+10]..[39,1725+23])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[39,1725+24]..[39,1725+25])
                        Pexp_ident "s" (src/infer.ml[39,1725+24]..[39,1725+25])
                  ]
            ]
            expression (src/infer.ml[40,1754+2]..[42,1824+24])
              Pexp_sequence
              expression (src/infer.ml[40,1754+2]..[41,1805+17])
                Pexp_ifthenelse
                expression (src/infer.ml[40,1754+5]..[40,1754+45])
                  Pexp_apply
                  expression (src/infer.ml[40,1754+5]..[40,1754+8])
                    Pexp_ident "not" (src/infer.ml[40,1754+5]..[40,1754+8])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[40,1754+9]..[40,1754+45])
                        Pexp_apply
                        expression (src/infer.ml[40,1754+17]..[40,1754+19])
                          Pexp_ident "&&" (src/infer.ml[40,1754+17]..[40,1754+19])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[40,1754+10]..[40,1754+16])
                              Pexp_apply
                              expression (src/infer.ml[40,1754+12]..[40,1754+14])
                                Pexp_ident ">=" (src/infer.ml[40,1754+12]..[40,1754+14])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[40,1754+10]..[40,1754+11])
                                    Pexp_ident "n" (src/infer.ml[40,1754+10]..[40,1754+11])
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[40,1754+15]..[40,1754+16])
                                    Pexp_constant PConst_int (3,None)
                              ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[40,1754+20]..[40,1754+44])
                              Pexp_apply
                              expression (src/infer.ml[40,1754+37]..[40,1754+38])
                                Pexp_ident "=" (src/infer.ml[40,1754+37]..[40,1754+38])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[40,1754+20]..[40,1754+36])
                                    Pexp_apply
                                    expression (src/infer.ml[40,1754+20]..[40,1754+30])
                                      Pexp_ident "String.sub" (src/infer.ml[40,1754+20]..[40,1754+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[40,1754+31]..[40,1754+32])
                                          Pexp_ident "s" (src/infer.ml[40,1754+31]..[40,1754+32])
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[40,1754+33]..[40,1754+34])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[40,1754+35]..[40,1754+36])
                                          Pexp_constant PConst_int (3,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[40,1754+39]..[40,1754+44])
                                    Pexp_constant PConst_string("xv_",(src/infer.ml[40,1754+40]..[40,1754+43]),None)
                              ]
                        ]
                  ]
                expression (src/infer.ml[41,1805+4]..[41,1805+17])
                  Pexp_apply
                  expression (src/infer.ml[41,1805+4]..[41,1805+15])
                    Pexp_ident "Lexmli.fail" (src/infer.ml[41,1805+4]..[41,1805+15])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[41,1805+15]..[41,1805+17])
                        Pexp_construct "()" (src/infer.ml[41,1805+15]..[41,1805+17])
                        None
                  ]
                None
              expression (src/infer.ml[42,1824+2]..[42,1824+24])
                Pexp_apply
                expression (src/infer.ml[42,1824+2]..[42,1824+12])
                  Pexp_ident "String.sub" (src/infer.ml[42,1824+2]..[42,1824+12])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[42,1824+13]..[42,1824+14])
                      Pexp_ident "s" (src/infer.ml[42,1824+13]..[42,1824+14])
                  <arg>
                  Nolabel
                    expression (src/infer.ml[42,1824+15]..[42,1824+16])
                      Pexp_constant PConst_int (3,None)
                  <arg>
                  Nolabel
                    expression (src/infer.ml[42,1824+17]..[42,1824+24])
                      Pexp_apply
                      expression (src/infer.ml[42,1824+20]..[42,1824+21])
                        Pexp_ident "-" (src/infer.ml[42,1824+20]..[42,1824+21])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[42,1824+18]..[42,1824+19])
                            Pexp_ident "n" (src/infer.ml[42,1824+18]..[42,1824+19])
                        <arg>
                        Nolabel
                          expression (src/infer.ml[42,1824+22]..[42,1824+23])
                            Pexp_constant PConst_int (3,None)
                      ]
                ]
    ]
  structure_item (src/infer.ml[46,1889+0]..[47,1900+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[46,1889+4]..[46,1889+8])
          Ppat_var "base" (src/infer.ml[46,1889+4]..[46,1889+8])
        expression (src/infer.ml[47,1900+2]..[47,1900+15])
          Pexp_ident "Settings.base" (src/infer.ml[47,1900+2]..[47,1900+15])
    ]
  structure_item (src/infer.ml[49,1917+0]..[50,1930+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[49,1917+4]..[49,1917+10])
          Ppat_var "mlname" (src/infer.ml[49,1917+4]..[49,1917+10])
        expression (src/infer.ml[50,1930+2]..[50,1930+14])
          Pexp_apply
          expression (src/infer.ml[50,1930+7]..[50,1930+8])
            Pexp_ident "^" (src/infer.ml[50,1930+7]..[50,1930+8])
          [
            <arg>
            Nolabel
              expression (src/infer.ml[50,1930+2]..[50,1930+6])
                Pexp_ident "base" (src/infer.ml[50,1930+2]..[50,1930+6])
            <arg>
            Nolabel
              expression (src/infer.ml[50,1930+9]..[50,1930+14])
                Pexp_constant PConst_string(".ml",(src/infer.ml[50,1930+10]..[50,1930+13]),None)
          ]
    ]
  structure_item (src/infer.ml[52,1946+0]..[53,1960+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[52,1946+4]..[52,1946+11])
          Ppat_var "mliname" (src/infer.ml[52,1946+4]..[52,1946+11])
        expression (src/infer.ml[53,1960+2]..[53,1960+15])
          Pexp_apply
          expression (src/infer.ml[53,1960+7]..[53,1960+8])
            Pexp_ident "^" (src/infer.ml[53,1960+7]..[53,1960+8])
          [
            <arg>
            Nolabel
              expression (src/infer.ml[53,1960+2]..[53,1960+6])
                Pexp_ident "base" (src/infer.ml[53,1960+2]..[53,1960+6])
            <arg>
            Nolabel
              expression (src/infer.ml[53,1960+9]..[53,1960+15])
                Pexp_constant PConst_string(".mli",(src/infer.ml[53,1960+10]..[53,1960+14]),None)
          ]
    ]
  structure_item (src/infer.ml[89,3848+0]..[93,3959+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[89,3848+4]..[89,3848+12])
          Ppat_var "usertype" (src/infer.ml[89,3848+4]..[89,3848+12])
        expression (src/infer.ml[89,3848+13]..[93,3959+9]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[89,3848+13]..[89,3848+20])
            Ppat_var "grammar" (src/infer.ml[89,3848+13]..[89,3848+20])
          expression (src/infer.ml[89,3848+21]..[93,3959+9]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[89,3848+21]..[89,3848+23])
              Ppat_var "nt" (src/infer.ml[89,3848+21]..[89,3848+23])
            expression (src/infer.ml[90,3874+3]..[93,3959+9])
              Pexp_try
              expression (src/infer.ml[91,3881+5]..[91,3881+56])
                Pexp_construct "Some" (src/infer.ml[91,3881+5]..[91,3881+9])
                Some
                  expression (src/infer.ml[91,3881+10]..[91,3881+56])
                    Pexp_construct "TypTextual" (src/infer.ml[91,3881+11]..[91,3881+21])
                    Some
                      expression (src/infer.ml[91,3881+22]..[91,3881+55])
                        Pexp_apply
                        expression (src/infer.ml[91,3881+23]..[91,3881+37])
                          Pexp_ident "StringMap.find" (src/infer.ml[91,3881+23]..[91,3881+37])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[91,3881+38]..[91,3881+40])
                              Pexp_ident "nt" (src/infer.ml[91,3881+38]..[91,3881+40])
                          <arg>
                          Nolabel
                            expression (src/infer.ml[91,3881+41]..[91,3881+54])
                              Pexp_field
                              expression (src/infer.ml[91,3881+41]..[91,3881+48])
                                Pexp_ident "grammar" (src/infer.ml[91,3881+41]..[91,3881+48])
                              "types" (src/infer.ml[91,3881+49]..[91,3881+54])
                        ]
              [
                <case>
                  pattern (src/infer.ml[92,3938+8]..[92,3938+17])
                    Ppat_construct "Not_found" (src/infer.ml[92,3938+8]..[92,3938+17])
                    None
                  expression (src/infer.ml[93,3959+5]..[93,3959+9])
                    Pexp_construct "None" (src/infer.ml[93,3959+5]..[93,3959+9])
                    None
              ]
    ]
  structure_item (src/infer.ml[100,4242+0]..[103,4385+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[100,4242+4]..[100,4242+17])
          Ppat_var "annotate_expr" (src/infer.ml[100,4242+4]..[100,4242+17])
        expression (src/infer.ml[100,4242+18]..[103,4385+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[100,4242+18]..[100,4242+25])
            Ppat_var "grammar" (src/infer.ml[100,4242+18]..[100,4242+25])
          expression (src/infer.ml[100,4242+26]..[103,4385+3]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[100,4242+26]..[100,4242+27])
              Ppat_var "e" (src/infer.ml[100,4242+26]..[100,4242+27])
            expression (src/infer.ml[100,4242+28]..[103,4385+3]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/infer.ml[100,4242+28]..[100,4242+30])
                Ppat_var "nt" (src/infer.ml[100,4242+28]..[100,4242+30])
              expression (src/infer.ml[101,4275+2]..[103,4385+3])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[101,4275+6]..[101,4275+7])
                      Ppat_var "e" (src/infer.ml[101,4275+6]..[101,4275+7])
                    expression (src/infer.ml[101,4275+10]..[101,4275+31])
                      Pexp_apply
                      expression (src/infer.ml[101,4275+10]..[101,4275+18])
                        Pexp_ident "annotate" (src/infer.ml[101,4275+10]..[101,4275+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[101,4275+19]..[101,4275+20])
                            Pexp_ident "e" (src/infer.ml[101,4275+19]..[101,4275+20])
                        <arg>
                        Nolabel
                          expression (src/infer.ml[101,4275+21]..[101,4275+31])
                            Pexp_apply
                            expression (src/infer.ml[101,4275+22]..[101,4275+27])
                              Pexp_ident "ntvar" (src/infer.ml[101,4275+22]..[101,4275+27])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[101,4275+28]..[101,4275+30])
                                  Pexp_ident "nt" (src/infer.ml[101,4275+28]..[101,4275+30])
                            ]
                      ]
                ]
                expression (src/infer.ml[102,4310+2]..[103,4385+3])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[102,4310+6]..[102,4310+7])
                        Ppat_var "e" (src/infer.ml[102,4310+6]..[102,4310+7])
                      expression (src/infer.ml[102,4310+10]..[102,4310+71])
                        Pexp_apply
                        expression (src/infer.ml[102,4310+10]..[102,4310+21])
                          Pexp_ident "Option.fold" (src/infer.ml[102,4310+10]..[102,4310+21])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[102,4310+22]..[102,4310+47])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/infer.ml[102,4310+27]..[102,4310+28])
                                Ppat_var "t" (src/infer.ml[102,4310+27]..[102,4310+28])
                              expression (src/infer.ml[102,4310+29]..[102,4310+46]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/infer.ml[102,4310+29]..[102,4310+30])
                                  Ppat_var "e" (src/infer.ml[102,4310+29]..[102,4310+30])
                                expression (src/infer.ml[102,4310+34]..[102,4310+46])
                                  Pexp_apply
                                  expression (src/infer.ml[102,4310+34]..[102,4310+42])
                                    Pexp_ident "annotate" (src/infer.ml[102,4310+34]..[102,4310+42])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/infer.ml[102,4310+43]..[102,4310+44])
                                        Pexp_ident "e" (src/infer.ml[102,4310+43]..[102,4310+44])
                                    <arg>
                                    Nolabel
                                      expression (src/infer.ml[102,4310+45]..[102,4310+46])
                                        Pexp_ident "t" (src/infer.ml[102,4310+45]..[102,4310+46])
                                  ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[102,4310+48]..[102,4310+69])
                              Pexp_apply
                              expression (src/infer.ml[102,4310+49]..[102,4310+57])
                                Pexp_ident "usertype" (src/infer.ml[102,4310+49]..[102,4310+57])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[102,4310+58]..[102,4310+65])
                                    Pexp_ident "grammar" (src/infer.ml[102,4310+58]..[102,4310+65])
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[102,4310+66]..[102,4310+68])
                                    Pexp_ident "nt" (src/infer.ml[102,4310+66]..[102,4310+68])
                              ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[102,4310+70]..[102,4310+71])
                              Pexp_ident "e" (src/infer.ml[102,4310+70]..[102,4310+71])
                        ]
                  ]
                  expression (src/infer.ml[103,4385+2]..[103,4385+3])
                    Pexp_ident "e" (src/infer.ml[103,4385+2]..[103,4385+3])
    ]
  structure_item (src/infer.ml[105,4390+0]..[108,4532+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[105,4390+4]..[105,4390+16])
          Ppat_var "annotate_pat" (src/infer.ml[105,4390+4]..[105,4390+16])
        expression (src/infer.ml[105,4390+17]..[108,4532+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[105,4390+17]..[105,4390+24])
            Ppat_var "grammar" (src/infer.ml[105,4390+17]..[105,4390+24])
          expression (src/infer.ml[105,4390+25]..[108,4532+3]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[105,4390+25]..[105,4390+26])
              Ppat_var "p" (src/infer.ml[105,4390+25]..[105,4390+26])
            expression (src/infer.ml[105,4390+27]..[108,4532+3]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/infer.ml[105,4390+27]..[105,4390+29])
                Ppat_var "nt" (src/infer.ml[105,4390+27]..[105,4390+29])
              expression (src/infer.ml[106,4422+2]..[108,4532+3])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[106,4422+6]..[106,4422+7])
                      Ppat_var "p" (src/infer.ml[106,4422+6]..[106,4422+7])
                    expression (src/infer.ml[106,4422+10]..[106,4422+30])
                      Pexp_construct "PAnnot" (src/infer.ml[106,4422+10]..[106,4422+16])
                      Some
                        expression (src/infer.ml[106,4422+17]..[106,4422+30])
                          Pexp_tuple
                          [
                            expression (src/infer.ml[106,4422+18]..[106,4422+19])
                              Pexp_ident "p" (src/infer.ml[106,4422+18]..[106,4422+19])
                            expression (src/infer.ml[106,4422+21]..[106,4422+29])
                              Pexp_apply
                              expression (src/infer.ml[106,4422+21]..[106,4422+26])
                                Pexp_ident "ntvar" (src/infer.ml[106,4422+21]..[106,4422+26])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[106,4422+27]..[106,4422+29])
                                    Pexp_ident "nt" (src/infer.ml[106,4422+27]..[106,4422+29])
                              ]
                          ]
                ]
                expression (src/infer.ml[107,4456+2]..[108,4532+3])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[107,4456+6]..[107,4456+7])
                        Ppat_var "p" (src/infer.ml[107,4456+6]..[107,4456+7])
                      expression (src/infer.ml[107,4456+10]..[107,4456+72])
                        Pexp_apply
                        expression (src/infer.ml[107,4456+10]..[107,4456+21])
                          Pexp_ident "Option.fold" (src/infer.ml[107,4456+10]..[107,4456+21])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[107,4456+22]..[107,4456+48])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/infer.ml[107,4456+27]..[107,4456+28])
                                Ppat_var "t" (src/infer.ml[107,4456+27]..[107,4456+28])
                              expression (src/infer.ml[107,4456+29]..[107,4456+47]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/infer.ml[107,4456+29]..[107,4456+30])
                                  Ppat_var "p" (src/infer.ml[107,4456+29]..[107,4456+30])
                                expression (src/infer.ml[107,4456+34]..[107,4456+47])
                                  Pexp_construct "PAnnot" (src/infer.ml[107,4456+34]..[107,4456+40])
                                  Some
                                    expression (src/infer.ml[107,4456+41]..[107,4456+47])
                                      Pexp_tuple
                                      [
                                        expression (src/infer.ml[107,4456+42]..[107,4456+43])
                                          Pexp_ident "p" (src/infer.ml[107,4456+42]..[107,4456+43])
                                        expression (src/infer.ml[107,4456+45]..[107,4456+46])
                                          Pexp_ident "t" (src/infer.ml[107,4456+45]..[107,4456+46])
                                      ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[107,4456+49]..[107,4456+70])
                              Pexp_apply
                              expression (src/infer.ml[107,4456+50]..[107,4456+58])
                                Pexp_ident "usertype" (src/infer.ml[107,4456+50]..[107,4456+58])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[107,4456+59]..[107,4456+66])
                                    Pexp_ident "grammar" (src/infer.ml[107,4456+59]..[107,4456+66])
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[107,4456+67]..[107,4456+69])
                                    Pexp_ident "nt" (src/infer.ml[107,4456+67]..[107,4456+69])
                              ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[107,4456+71]..[107,4456+72])
                              Pexp_ident "p" (src/infer.ml[107,4456+71]..[107,4456+72])
                        ]
                  ]
                  expression (src/infer.ml[108,4532+2]..[108,4532+3])
                    Pexp_ident "p" (src/infer.ml[108,4532+2]..[108,4532+3])
    ]
  structure_item (src/infer.ml[117,4806+0]..[123,4969+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[117,4806+4]..[117,4806+13])
          Ppat_var "tokentype" (src/infer.ml[117,4806+4]..[117,4806+13])
        expression (src/infer.ml[117,4806+14]..[123,4969+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[117,4806+14]..[117,4806+21])
            Ppat_var "grammar" (src/infer.ml[117,4806+14]..[117,4806+21])
          expression (src/infer.ml[117,4806+22]..[123,4969+26]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[117,4806+22]..[117,4806+28])
              Ppat_var "symbol" (src/infer.ml[117,4806+22]..[117,4806+28])
            expression (src/infer.ml[118,4837+2]..[123,4969+26])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/infer.ml[118,4837+6]..[118,4837+11])
                    Ppat_var "props" (src/infer.ml[118,4837+6]..[118,4837+11])
                  expression (src/infer.ml[118,4837+14]..[118,4837+50])
                    Pexp_apply
                    expression (src/infer.ml[118,4837+14]..[118,4837+28])
                      Pexp_ident "StringMap.find" (src/infer.ml[118,4837+14]..[118,4837+28])
                    [
                      <arg>
                      Nolabel
                        expression (src/infer.ml[118,4837+29]..[118,4837+35])
                          Pexp_ident "symbol" (src/infer.ml[118,4837+29]..[118,4837+35])
                      <arg>
                      Nolabel
                        expression (src/infer.ml[118,4837+36]..[118,4837+50])
                          Pexp_field
                          expression (src/infer.ml[118,4837+36]..[118,4837+43])
                            Pexp_ident "grammar" (src/infer.ml[118,4837+36]..[118,4837+43])
                          "tokens" (src/infer.ml[118,4837+44]..[118,4837+50])
                    ]
              ]
              expression (src/infer.ml[119,4891+2]..[123,4969+26])
                Pexp_match
                expression (src/infer.ml[119,4891+8]..[119,4891+26])
                  Pexp_field
                  expression (src/infer.ml[119,4891+8]..[119,4891+13])
                    Pexp_ident "props" (src/infer.ml[119,4891+8]..[119,4891+13])
                  "tk_ocamltype" (src/infer.ml[119,4891+14]..[119,4891+26])
                [
                  <case>
                    pattern (src/infer.ml[120,4923+4]..[120,4923+8])
                      Ppat_construct "None" (src/infer.ml[120,4923+4]..[120,4923+8])
                      None
                    expression (src/infer.ml[121,4935+6]..[121,4935+11])
                      Pexp_ident "tunit" (src/infer.ml[121,4935+6]..[121,4935+11])
                  <case>
                    pattern (src/infer.ml[122,4947+4]..[122,4947+18])
                      Ppat_construct "Some" (src/infer.ml[122,4947+4]..[122,4947+8])
                      Some
                        []
                        pattern (src/infer.ml[122,4947+9]..[122,4947+18])
                          Ppat_var "ocamltype" (src/infer.ml[122,4947+9]..[122,4947+18])
                    expression (src/infer.ml[123,4969+6]..[123,4969+26])
                      Pexp_construct "TypTextual" (src/infer.ml[123,4969+6]..[123,4969+16])
                      Some
                        expression (src/infer.ml[123,4969+17]..[123,4969+26])
                          Pexp_ident "ocamltype" (src/infer.ml[123,4969+17]..[123,4969+26])
                ]
    ]
  structure_item (src/infer.ml[132,5327+0]..[205,7646+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[132,5327+4]..[132,5327+13])
          Ppat_var "actiondef" (src/infer.ml[132,5327+4]..[132,5327+13])
        expression (src/infer.ml[132,5327+14]..[205,7646+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[132,5327+14]..[132,5327+21])
            Ppat_var "grammar" (src/infer.ml[132,5327+14]..[132,5327+21])
          expression (src/infer.ml[132,5327+22]..[205,7646+26]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[132,5327+22]..[132,5327+28])
              Ppat_var "symbol" (src/infer.ml[132,5327+22]..[132,5327+28])
            expression (src/infer.ml[132,5327+29]..[205,7646+26]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/infer.ml[132,5327+29]..[132,5327+35])
                Ppat_var "branch" (src/infer.ml[132,5327+29]..[132,5327+35])
              expression (src/infer.ml[137,5489+2]..[205,7646+26])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[137,5489+6]..[137,5489+13])
                      Ppat_var "formals" (src/infer.ml[137,5489+6]..[137,5489+13])
                    expression (src/infer.ml[138,5505+4]..[171,6788+25])
                      Pexp_apply
                      expression (src/infer.ml[138,5505+4]..[138,5505+18])
                        Pexp_ident "List.fold_left" (src/infer.ml[138,5505+4]..[138,5505+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[138,5505+19]..[171,6788+5])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/infer.ml[138,5505+24]..[138,5505+31])
                              Ppat_var "formals" (src/infer.ml[138,5505+24]..[138,5505+31])
                            expression (src/infer.ml[138,5505+32]..[170,6774+13]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/infer.ml[138,5505+32]..[138,5505+40])
                                Ppat_var "producer" (src/infer.ml[138,5505+32]..[138,5505+40])
                              expression (src/infer.ml[139,5549+6]..[170,6774+13])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (src/infer.ml[139,5549+10]..[139,5549+16])
                                      Ppat_var "symbol" (src/infer.ml[139,5549+10]..[139,5549+16])
                                    expression (src/infer.ml[139,5549+19]..[139,5549+43])
                                      Pexp_apply
                                      expression (src/infer.ml[139,5549+19]..[139,5549+34])
                                        Pexp_ident "producer_symbol" (src/infer.ml[139,5549+19]..[139,5549+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[139,5549+35]..[139,5549+43])
                                            Pexp_ident "producer" (src/infer.ml[139,5549+35]..[139,5549+43])
                                      ]
                                  <def>
                                    pattern (src/infer.ml[140,5593+10]..[140,5593+13])
                                      Ppat_var "lid" (src/infer.ml[140,5593+10]..[140,5593+13])
                                    expression (src/infer.ml[140,5593+16]..[140,5593+52])
                                      Pexp_apply
                                      expression (src/infer.ml[140,5593+16]..[140,5593+43])
                                        Pexp_ident "producer_identifier_located" (src/infer.ml[140,5593+16]..[140,5593+43])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[140,5593+44]..[140,5593+52])
                                            Pexp_ident "producer" (src/infer.ml[140,5593+44]..[140,5593+52])
                                      ]
                                ]
                                expression (src/infer.ml[141,5649+6]..[170,6774+13])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/infer.ml[141,5649+10]..[141,5649+12])
                                        Ppat_var "id" (src/infer.ml[141,5649+10]..[141,5649+12])
                                      expression (src/infer.ml[141,5649+15]..[141,5649+34])
                                        Pexp_apply
                                        expression (src/infer.ml[141,5649+15]..[141,5649+30])
                                          Pexp_ident "Positions.value" (src/infer.ml[141,5649+15]..[141,5649+30])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[141,5649+31]..[141,5649+34])
                                              Pexp_ident "lid" (src/infer.ml[141,5649+31]..[141,5649+34])
                                        ]
                                  ]
                                  expression (src/infer.ml[142,5687+6]..[170,6774+13])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (src/infer.ml[142,5687+10]..[142,5687+41])
                                          Ppat_tuple
                                          [
                                            pattern (src/infer.ml[142,5687+10]..[142,5687+16])
                                              Ppat_var "startp" (src/infer.ml[142,5687+10]..[142,5687+16])
                                            pattern (src/infer.ml[142,5687+18]..[142,5687+22])
                                              Ppat_var "endp" (src/infer.ml[142,5687+18]..[142,5687+22])
                                            pattern (src/infer.ml[142,5687+24]..[142,5687+30])
                                              Ppat_var "starto" (src/infer.ml[142,5687+24]..[142,5687+30])
                                            pattern (src/infer.ml[142,5687+32]..[142,5687+36])
                                              Ppat_var "endo" (src/infer.ml[142,5687+32]..[142,5687+36])
                                            pattern (src/infer.ml[142,5687+38]..[142,5687+41])
                                              Ppat_var "loc" (src/infer.ml[142,5687+38]..[142,5687+41])
                                          ]
                                        expression (src/infer.ml[143,5731+8]..[147,5899+36])
                                          Pexp_tuple
                                          [
                                            expression (src/infer.ml[143,5731+8]..[143,5731+41])
                                              Pexp_apply
                                              expression (src/infer.ml[143,5731+8]..[143,5731+22])
                                                Pexp_ident "Printf.sprintf" (src/infer.ml[143,5731+8]..[143,5731+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[143,5731+23]..[143,5731+38])
                                                    Pexp_constant PConst_string("_startpos_%s_",(src/infer.ml[143,5731+24]..[143,5731+37]),None)
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[143,5731+39]..[143,5731+41])
                                                    Pexp_ident "id" (src/infer.ml[143,5731+39]..[143,5731+41])
                                              ]
                                            expression (src/infer.ml[144,5774+8]..[144,5774+39])
                                              Pexp_apply
                                              expression (src/infer.ml[144,5774+8]..[144,5774+22])
                                                Pexp_ident "Printf.sprintf" (src/infer.ml[144,5774+8]..[144,5774+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[144,5774+23]..[144,5774+36])
                                                    Pexp_constant PConst_string("_endpos_%s_",(src/infer.ml[144,5774+24]..[144,5774+35]),None)
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[144,5774+37]..[144,5774+39])
                                                    Pexp_ident "id" (src/infer.ml[144,5774+37]..[144,5774+39])
                                              ]
                                            expression (src/infer.ml[145,5815+8]..[145,5815+41])
                                              Pexp_apply
                                              expression (src/infer.ml[145,5815+8]..[145,5815+22])
                                                Pexp_ident "Printf.sprintf" (src/infer.ml[145,5815+8]..[145,5815+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[145,5815+23]..[145,5815+38])
                                                    Pexp_constant PConst_string("_startofs_%s_",(src/infer.ml[145,5815+24]..[145,5815+37]),None)
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[145,5815+39]..[145,5815+41])
                                                    Pexp_ident "id" (src/infer.ml[145,5815+39]..[145,5815+41])
                                              ]
                                            expression (src/infer.ml[146,5858+8]..[146,5858+39])
                                              Pexp_apply
                                              expression (src/infer.ml[146,5858+8]..[146,5858+22])
                                                Pexp_ident "Printf.sprintf" (src/infer.ml[146,5858+8]..[146,5858+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[146,5858+23]..[146,5858+36])
                                                    Pexp_constant PConst_string("_endofs_%s_",(src/infer.ml[146,5858+24]..[146,5858+35]),None)
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[146,5858+37]..[146,5858+39])
                                                    Pexp_ident "id" (src/infer.ml[146,5858+37]..[146,5858+39])
                                              ]
                                            expression (src/infer.ml[147,5899+8]..[147,5899+36])
                                              Pexp_apply
                                              expression (src/infer.ml[147,5899+8]..[147,5899+22])
                                                Pexp_ident "Printf.sprintf" (src/infer.ml[147,5899+8]..[147,5899+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[147,5899+23]..[147,5899+33])
                                                    Pexp_constant PConst_string("_loc_%s_",(src/infer.ml[147,5899+24]..[147,5899+32]),None)
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[147,5899+34]..[147,5899+36])
                                                    Pexp_ident "id" (src/infer.ml[147,5899+34]..[147,5899+36])
                                              ]
                                          ]
                                    ]
                                    expression (src/infer.ml[149,5945+6]..[170,6774+13])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/infer.ml[149,5945+10]..[149,5945+13])
                                            Ppat_var "pid" (src/infer.ml[149,5945+10]..[149,5945+13])
                                          expression (src/infer.ml[155,6345+8]..[155,6345+23])
                                            Pexp_apply
                                            expression (src/infer.ml[155,6345+8]..[155,6345+19])
                                              Pexp_ident "pvarlocated" (src/infer.ml[155,6345+8]..[155,6345+19])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[155,6345+20]..[155,6345+23])
                                                  Pexp_ident "lid" (src/infer.ml[155,6345+20]..[155,6345+23])
                                            ]
                                      ]
                                      expression (src/infer.ml[157,6378+6]..[170,6774+13])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (src/infer.ml[157,6378+10]..[157,6378+13])
                                              Ppat_var "pid" (src/infer.ml[157,6378+10]..[157,6378+13])
                                            expression (src/infer.ml[158,6394+8]..[162,6522+41])
                                              Pexp_try
                                              expression (src/infer.ml[159,6406+10]..[159,6406+48])
                                                Pexp_construct "PAnnot" (src/infer.ml[159,6406+10]..[159,6406+16])
                                                Some
                                                  expression (src/infer.ml[159,6406+17]..[159,6406+48])
                                                    Pexp_tuple
                                                    [
                                                      expression (src/infer.ml[159,6406+18]..[159,6406+21])
                                                        Pexp_ident "pid" (src/infer.ml[159,6406+18]..[159,6406+21])
                                                      expression (src/infer.ml[159,6406+23]..[159,6406+47])
                                                        Pexp_apply
                                                        expression (src/infer.ml[159,6406+23]..[159,6406+32])
                                                          Pexp_ident "tokentype" (src/infer.ml[159,6406+23]..[159,6406+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (src/infer.ml[159,6406+33]..[159,6406+40])
                                                              Pexp_ident "grammar" (src/infer.ml[159,6406+33]..[159,6406+40])
                                                          <arg>
                                                          Nolabel
                                                            expression (src/infer.ml[159,6406+41]..[159,6406+47])
                                                              Pexp_ident "symbol" (src/infer.ml[159,6406+41]..[159,6406+47])
                                                        ]
                                                    ]
                                              [
                                                <case>
                                                  pattern (src/infer.ml[160,6455+13]..[160,6455+22])
                                                    Ppat_construct "Not_found" (src/infer.ml[160,6455+13]..[160,6455+22])
                                                    None
                                                  expression (src/infer.ml[162,6522+10]..[162,6522+41])
                                                    Pexp_apply
                                                    expression (src/infer.ml[162,6522+10]..[162,6522+22])
                                                      Pexp_ident "annotate_pat" (src/infer.ml[162,6522+10]..[162,6522+22])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[162,6522+23]..[162,6522+30])
                                                          Pexp_ident "grammar" (src/infer.ml[162,6522+23]..[162,6522+30])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[162,6522+31]..[162,6522+34])
                                                          Pexp_ident "pid" (src/infer.ml[162,6522+31]..[162,6522+34])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[162,6522+35]..[162,6522+41])
                                                          Pexp_ident "symbol" (src/infer.ml[162,6522+35]..[162,6522+41])
                                                    ]
                                              ]
                                        ]
                                        expression (src/infer.ml[164,6573+6]..[170,6774+13])
                                          Pexp_construct "::" (src/infer.ml[164,6573+10]..[164,6573+12])
                                          Some
                                            expression (src/infer.ml[164,6573+6]..[170,6774+13]) ghost
                                              Pexp_tuple
                                              [
                                                expression (src/infer.ml[164,6573+6]..[164,6573+9])
                                                  Pexp_ident "pid" (src/infer.ml[164,6573+6]..[164,6573+9])
                                                expression (src/infer.ml[165,6586+6]..[170,6774+13])
                                                  Pexp_construct "::" (src/infer.ml[165,6586+38]..[165,6586+40])
                                                  Some
                                                    expression (src/infer.ml[165,6586+6]..[170,6774+13]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/infer.ml[165,6586+6]..[165,6586+37])
                                                          Pexp_construct "PAnnot" (src/infer.ml[165,6586+6]..[165,6586+12])
                                                          Some
                                                            expression (src/infer.ml[165,6586+13]..[165,6586+37])
                                                              Pexp_tuple
                                                              [
                                                                expression (src/infer.ml[165,6586+14]..[165,6586+25])
                                                                  Pexp_construct "PVar" (src/infer.ml[165,6586+14]..[165,6586+18])
                                                                  Some
                                                                    expression (src/infer.ml[165,6586+19]..[165,6586+25])
                                                                      Pexp_ident "startp" (src/infer.ml[165,6586+19]..[165,6586+25])
                                                                expression (src/infer.ml[165,6586+27]..[165,6586+36])
                                                                  Pexp_ident "tposition" (src/infer.ml[165,6586+27]..[165,6586+36])
                                                              ]
                                                        expression (src/infer.ml[166,6627+6]..[170,6774+13])
                                                          Pexp_construct "::" (src/infer.ml[166,6627+36]..[166,6627+38])
                                                          Some
                                                            expression (src/infer.ml[166,6627+6]..[170,6774+13]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (src/infer.ml[166,6627+6]..[166,6627+35])
                                                                  Pexp_construct "PAnnot" (src/infer.ml[166,6627+6]..[166,6627+12])
                                                                  Some
                                                                    expression (src/infer.ml[166,6627+13]..[166,6627+35])
                                                                      Pexp_tuple
                                                                      [
expression (src/infer.ml[166,6627+14]..[166,6627+23])
  Pexp_construct "PVar" (src/infer.ml[166,6627+14]..[166,6627+18])
  Some
    expression (src/infer.ml[166,6627+19]..[166,6627+23])
      Pexp_ident "endp" (src/infer.ml[166,6627+19]..[166,6627+23])
expression (src/infer.ml[166,6627+25]..[166,6627+34])
  Pexp_ident "tposition" (src/infer.ml[166,6627+25]..[166,6627+34])
                                                                      ]
                                                                expression (src/infer.ml[167,6666+6]..[170,6774+13])
                                                                  Pexp_construct "::" (src/infer.ml[167,6666+33]..[167,6666+35])
                                                                  Some
                                                                    expression (src/infer.ml[167,6666+6]..[170,6774+13]) ghost
                                                                      Pexp_tuple
                                                                      [
expression (src/infer.ml[167,6666+6]..[167,6666+32])
  Pexp_construct "PAnnot" (src/infer.ml[167,6666+6]..[167,6666+12])
  Some
    expression (src/infer.ml[167,6666+13]..[167,6666+32])
      Pexp_tuple
      [
        expression (src/infer.ml[167,6666+14]..[167,6666+25])
          Pexp_construct "PVar" (src/infer.ml[167,6666+14]..[167,6666+18])
          Some
            expression (src/infer.ml[167,6666+19]..[167,6666+25])
              Pexp_ident "starto" (src/infer.ml[167,6666+19]..[167,6666+25])
        expression (src/infer.ml[167,6666+27]..[167,6666+31])
          Pexp_ident "tint" (src/infer.ml[167,6666+27]..[167,6666+31])
      ]
expression (src/infer.ml[168,6702+6]..[170,6774+13])
  Pexp_construct "::" (src/infer.ml[168,6702+31]..[168,6702+33])
  Some
    expression (src/infer.ml[168,6702+6]..[170,6774+13]) ghost
      Pexp_tuple
      [
        expression (src/infer.ml[168,6702+6]..[168,6702+30])
          Pexp_construct "PAnnot" (src/infer.ml[168,6702+6]..[168,6702+12])
          Some
            expression (src/infer.ml[168,6702+13]..[168,6702+30])
              Pexp_tuple
              [
                expression (src/infer.ml[168,6702+14]..[168,6702+23])
                  Pexp_construct "PVar" (src/infer.ml[168,6702+14]..[168,6702+18])
                  Some
                    expression (src/infer.ml[168,6702+19]..[168,6702+23])
                      Pexp_ident "endo" (src/infer.ml[168,6702+19]..[168,6702+23])
                expression (src/infer.ml[168,6702+25]..[168,6702+29])
                  Pexp_ident "tint" (src/infer.ml[168,6702+25]..[168,6702+29])
              ]
        expression (src/infer.ml[169,6736+6]..[170,6774+13])
          Pexp_construct "::" (src/infer.ml[169,6736+35]..[169,6736+37])
          Some
            expression (src/infer.ml[169,6736+6]..[170,6774+13]) ghost
              Pexp_tuple
              [
                expression (src/infer.ml[169,6736+6]..[169,6736+34])
                  Pexp_construct "PAnnot" (src/infer.ml[169,6736+6]..[169,6736+12])
                  Some
                    expression (src/infer.ml[169,6736+13]..[169,6736+34])
                      Pexp_tuple
                      [
                        expression (src/infer.ml[169,6736+14]..[169,6736+22])
                          Pexp_construct "PVar" (src/infer.ml[169,6736+14]..[169,6736+18])
                          Some
                            expression (src/infer.ml[169,6736+19]..[169,6736+22])
                              Pexp_ident "loc" (src/infer.ml[169,6736+19]..[169,6736+22])
                        expression (src/infer.ml[169,6736+24]..[169,6736+33])
                          Pexp_ident "tlocation" (src/infer.ml[169,6736+24]..[169,6736+33])
                      ]
                expression (src/infer.ml[170,6774+6]..[170,6774+13])
                  Pexp_ident "formals" (src/infer.ml[170,6774+6]..[170,6774+13])
              ]
      ]
                                                                      ]
                                                              ]
                                                      ]
                                              ]
                        <arg>
                        Nolabel
                          expression (src/infer.ml[171,6788+6]..[171,6788+8])
                            Pexp_construct "[]" (src/infer.ml[171,6788+6]..[171,6788+8])
                            None
                        <arg>
                        Nolabel
                          expression (src/infer.ml[171,6788+9]..[171,6788+25])
                            Pexp_field
                            expression (src/infer.ml[171,6788+9]..[171,6788+15])
                              Pexp_ident "branch" (src/infer.ml[171,6788+9]..[171,6788+15])
                            "producers" (src/infer.ml[171,6788+16]..[171,6788+25])
                      ]
                ]
                expression (src/infer.ml[177,6909+2]..[205,7646+26])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[177,6909+6]..[177,6909+13])
                        Ppat_var "formals" (src/infer.ml[177,6909+6]..[177,6909+13])
                      expression (src/infer.ml[178,6925+4]..[189,7382+11])
                        Pexp_construct "::" (src/infer.ml[178,6925+31]..[178,6925+33])
                        Some
                          expression (src/infer.ml[178,6925+4]..[189,7382+11]) ghost
                            Pexp_tuple
                            [
                              expression (src/infer.ml[178,6925+4]..[178,6925+30])
                                Pexp_construct "PAnnot" (src/infer.ml[178,6925+4]..[178,6925+10])
                                Some
                                  expression (src/infer.ml[178,6925+11]..[178,6925+30])
                                    Pexp_tuple
                                    [
                                      expression (src/infer.ml[178,6925+12]..[178,6925+23])
                                        Pexp_construct "PVar" (src/infer.ml[178,6925+12]..[178,6925+16])
                                        Some
                                          expression (src/infer.ml[178,6925+17]..[178,6925+23])
                                            Pexp_constant PConst_string("_eRR",(src/infer.ml[178,6925+18]..[178,6925+22]),None)
                                      expression (src/infer.ml[178,6925+25]..[178,6925+29])
                                        Pexp_ident "texn" (src/infer.ml[178,6925+25]..[178,6925+29])
                                    ]
                              expression (src/infer.ml[179,6959+4]..[189,7382+11])
                                Pexp_construct "::" (src/infer.ml[179,6959+41]..[179,6959+43])
                                Some
                                  expression (src/infer.ml[179,6959+4]..[189,7382+11]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/infer.ml[179,6959+4]..[179,6959+40])
                                        Pexp_construct "PAnnot" (src/infer.ml[179,6959+4]..[179,6959+10])
                                        Some
                                          expression (src/infer.ml[179,6959+11]..[179,6959+40])
                                            Pexp_tuple
                                            [
                                              expression (src/infer.ml[179,6959+12]..[179,6959+28])
                                                Pexp_construct "PVar" (src/infer.ml[179,6959+12]..[179,6959+16])
                                                Some
                                                  expression (src/infer.ml[179,6959+17]..[179,6959+28])
                                                    Pexp_constant PConst_string("_startpos",(src/infer.ml[179,6959+18]..[179,6959+27]),None)
                                              expression (src/infer.ml[179,6959+30]..[179,6959+39])
                                                Pexp_ident "tposition" (src/infer.ml[179,6959+30]..[179,6959+39])
                                            ]
                                      expression (src/infer.ml[180,7003+4]..[189,7382+11])
                                        Pexp_construct "::" (src/infer.ml[180,7003+39]..[180,7003+41])
                                        Some
                                          expression (src/infer.ml[180,7003+4]..[189,7382+11]) ghost
                                            Pexp_tuple
                                            [
                                              expression (src/infer.ml[180,7003+4]..[180,7003+38])
                                                Pexp_construct "PAnnot" (src/infer.ml[180,7003+4]..[180,7003+10])
                                                Some
                                                  expression (src/infer.ml[180,7003+11]..[180,7003+38])
                                                    Pexp_tuple
                                                    [
                                                      expression (src/infer.ml[180,7003+12]..[180,7003+26])
                                                        Pexp_construct "PVar" (src/infer.ml[180,7003+12]..[180,7003+16])
                                                        Some
                                                          expression (src/infer.ml[180,7003+17]..[180,7003+26])
                                                            Pexp_constant PConst_string("_endpos",(src/infer.ml[180,7003+18]..[180,7003+25]),None)
                                                      expression (src/infer.ml[180,7003+28]..[180,7003+37])
                                                        Pexp_ident "tposition" (src/infer.ml[180,7003+28]..[180,7003+37])
                                                    ]
                                              expression (src/infer.ml[181,7045+4]..[189,7382+11])
                                                Pexp_construct "::" (src/infer.ml[181,7045+43]..[181,7045+45])
                                                Some
                                                  expression (src/infer.ml[181,7045+4]..[189,7382+11]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/infer.ml[181,7045+4]..[181,7045+42])
                                                        Pexp_construct "PAnnot" (src/infer.ml[181,7045+4]..[181,7045+10])
                                                        Some
                                                          expression (src/infer.ml[181,7045+11]..[181,7045+42])
                                                            Pexp_tuple
                                                            [
                                                              expression (src/infer.ml[181,7045+12]..[181,7045+30])
                                                                Pexp_construct "PVar" (src/infer.ml[181,7045+12]..[181,7045+16])
                                                                Some
                                                                  expression (src/infer.ml[181,7045+17]..[181,7045+30])
                                                                    Pexp_constant PConst_string("_endpos__0_",(src/infer.ml[181,7045+18]..[181,7045+29]),None)
                                                              expression (src/infer.ml[181,7045+32]..[181,7045+41])
                                                                Pexp_ident "tposition" (src/infer.ml[181,7045+32]..[181,7045+41])
                                                            ]
                                                      expression (src/infer.ml[182,7091+4]..[189,7382+11])
                                                        Pexp_construct "::" (src/infer.ml[182,7091+47]..[182,7091+49])
                                                        Some
                                                          expression (src/infer.ml[182,7091+4]..[189,7382+11]) ghost
                                                            Pexp_tuple
                                                            [
                                                              expression (src/infer.ml[182,7091+4]..[182,7091+46])
                                                                Pexp_construct "PAnnot" (src/infer.ml[182,7091+4]..[182,7091+10])
                                                                Some
                                                                  expression (src/infer.ml[182,7091+11]..[182,7091+46])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/infer.ml[182,7091+12]..[182,7091+34])
Pexp_construct "PVar" (src/infer.ml[182,7091+12]..[182,7091+16])
Some
  expression (src/infer.ml[182,7091+17]..[182,7091+34])
    Pexp_constant PConst_string("_symbolstartpos",(src/infer.ml[182,7091+18]..[182,7091+33]),None)
                                                                      expression (src/infer.ml[182,7091+36]..[182,7091+45])
Pexp_ident "tposition" (src/infer.ml[182,7091+36]..[182,7091+45])
                                                                    ]
                                                              expression (src/infer.ml[183,7141+4]..[189,7382+11])
                                                                Pexp_construct "::" (src/infer.ml[183,7141+36]..[183,7141+38])
                                                                Some
                                                                  expression (src/infer.ml[183,7141+4]..[189,7382+11]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (src/infer.ml[183,7141+4]..[183,7141+35])
Pexp_construct "PAnnot" (src/infer.ml[183,7141+4]..[183,7141+10])
Some
  expression (src/infer.ml[183,7141+11]..[183,7141+35])
    Pexp_tuple
    [
      expression (src/infer.ml[183,7141+12]..[183,7141+28])
        Pexp_construct "PVar" (src/infer.ml[183,7141+12]..[183,7141+16])
        Some
          expression (src/infer.ml[183,7141+17]..[183,7141+28])
            Pexp_constant PConst_string("_startofs",(src/infer.ml[183,7141+18]..[183,7141+27]),None)
      expression (src/infer.ml[183,7141+30]..[183,7141+34])
        Pexp_ident "tint" (src/infer.ml[183,7141+30]..[183,7141+34])
    ]
                                                                      expression (src/infer.ml[184,7180+4]..[189,7382+11])
Pexp_construct "::" (src/infer.ml[184,7180+34]..[184,7180+36])
Some
  expression (src/infer.ml[184,7180+4]..[189,7382+11]) ghost
    Pexp_tuple
    [
      expression (src/infer.ml[184,7180+4]..[184,7180+33])
        Pexp_construct "PAnnot" (src/infer.ml[184,7180+4]..[184,7180+10])
        Some
          expression (src/infer.ml[184,7180+11]..[184,7180+33])
            Pexp_tuple
            [
              expression (src/infer.ml[184,7180+12]..[184,7180+26])
                Pexp_construct "PVar" (src/infer.ml[184,7180+12]..[184,7180+16])
                Some
                  expression (src/infer.ml[184,7180+17]..[184,7180+26])
                    Pexp_constant PConst_string("_endofs",(src/infer.ml[184,7180+18]..[184,7180+25]),None)
              expression (src/infer.ml[184,7180+28]..[184,7180+32])
                Pexp_ident "tint" (src/infer.ml[184,7180+28]..[184,7180+32])
            ]
      expression (src/infer.ml[185,7217+4]..[189,7382+11])
        Pexp_construct "::" (src/infer.ml[185,7217+38]..[185,7217+40])
        Some
          expression (src/infer.ml[185,7217+4]..[189,7382+11]) ghost
            Pexp_tuple
            [
              expression (src/infer.ml[185,7217+4]..[185,7217+37])
                Pexp_construct "PAnnot" (src/infer.ml[185,7217+4]..[185,7217+10])
                Some
                  expression (src/infer.ml[185,7217+11]..[185,7217+37])
                    Pexp_tuple
                    [
                      expression (src/infer.ml[185,7217+12]..[185,7217+30])
                        Pexp_construct "PVar" (src/infer.ml[185,7217+12]..[185,7217+16])
                        Some
                          expression (src/infer.ml[185,7217+17]..[185,7217+30])
                            Pexp_constant PConst_string("_endofs__0_",(src/infer.ml[185,7217+18]..[185,7217+29]),None)
                      expression (src/infer.ml[185,7217+32]..[185,7217+36])
                        Pexp_ident "tint" (src/infer.ml[185,7217+32]..[185,7217+36])
                    ]
              expression (src/infer.ml[186,7258+4]..[189,7382+11])
                Pexp_construct "::" (src/infer.ml[186,7258+42]..[186,7258+44])
                Some
                  expression (src/infer.ml[186,7258+4]..[189,7382+11]) ghost
                    Pexp_tuple
                    [
                      expression (src/infer.ml[186,7258+4]..[186,7258+41])
                        Pexp_construct "PAnnot" (src/infer.ml[186,7258+4]..[186,7258+10])
                        Some
                          expression (src/infer.ml[186,7258+11]..[186,7258+41])
                            Pexp_tuple
                            [
                              expression (src/infer.ml[186,7258+12]..[186,7258+34])
                                Pexp_construct "PVar" (src/infer.ml[186,7258+12]..[186,7258+16])
                                Some
                                  expression (src/infer.ml[186,7258+17]..[186,7258+34])
                                    Pexp_constant PConst_string("_symbolstartofs",(src/infer.ml[186,7258+18]..[186,7258+33]),None)
                              expression (src/infer.ml[186,7258+36]..[186,7258+40])
                                Pexp_ident "tint" (src/infer.ml[186,7258+36]..[186,7258+40])
                            ]
                      expression (src/infer.ml[187,7303+4]..[189,7382+11])
                        Pexp_construct "::" (src/infer.ml[187,7303+37]..[187,7303+39])
                        Some
                          expression (src/infer.ml[187,7303+4]..[189,7382+11]) ghost
                            Pexp_tuple
                            [
                              expression (src/infer.ml[187,7303+4]..[187,7303+36])
                                Pexp_construct "PAnnot" (src/infer.ml[187,7303+4]..[187,7303+10])
                                Some
                                  expression (src/infer.ml[187,7303+11]..[187,7303+36])
                                    Pexp_tuple
                                    [
                                      expression (src/infer.ml[187,7303+12]..[187,7303+24])
                                        Pexp_construct "PVar" (src/infer.ml[187,7303+12]..[187,7303+16])
                                        Some
                                          expression (src/infer.ml[187,7303+17]..[187,7303+24])
                                            Pexp_constant PConst_string("_sloc",(src/infer.ml[187,7303+18]..[187,7303+23]),None)
                                      expression (src/infer.ml[187,7303+26]..[187,7303+35])
                                        Pexp_ident "tlocation" (src/infer.ml[187,7303+26]..[187,7303+35])
                                    ]
                              expression (src/infer.ml[188,7343+4]..[189,7382+11])
                                Pexp_construct "::" (src/infer.ml[188,7343+36]..[188,7343+38])
                                Some
                                  expression (src/infer.ml[188,7343+4]..[189,7382+11]) ghost
                                    Pexp_tuple
                                    [
                                      expression (src/infer.ml[188,7343+4]..[188,7343+35])
                                        Pexp_construct "PAnnot" (src/infer.ml[188,7343+4]..[188,7343+10])
                                        Some
                                          expression (src/infer.ml[188,7343+11]..[188,7343+35])
                                            Pexp_tuple
                                            [
                                              expression (src/infer.ml[188,7343+12]..[188,7343+23])
                                                Pexp_construct "PVar" (src/infer.ml[188,7343+12]..[188,7343+16])
                                                Some
                                                  expression (src/infer.ml[188,7343+17]..[188,7343+23])
                                                    Pexp_constant PConst_string("_loc",(src/infer.ml[188,7343+18]..[188,7343+22]),None)
                                              expression (src/infer.ml[188,7343+25]..[188,7343+34])
                                                Pexp_ident "tlocation" (src/infer.ml[188,7343+25]..[188,7343+34])
                                            ]
                                      expression (src/infer.ml[189,7382+4]..[189,7382+11])
                                        Pexp_ident "formals" (src/infer.ml[189,7382+4]..[189,7382+11])
                                    ]
                            ]
                    ]
            ]
    ]
                                                                    ]
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                  ]
                  expression (src/infer.ml[195,7497+2]..[205,7646+26])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/infer.ml[195,7497+6]..[195,7497+10])
                          Ppat_var "body" (src/infer.ml[195,7497+6]..[195,7497+10])
                        expression (src/infer.ml[196,7510+4]..[198,7576+12])
                          Pexp_apply
                          expression (src/infer.ml[196,7510+4]..[196,7510+17])
                            Pexp_ident "annotate_expr" (src/infer.ml[196,7510+4]..[196,7510+17])
                          [
                            <arg>
                            Nolabel
                              expression (src/infer.ml[196,7510+18]..[196,7510+25])
                                Pexp_ident "grammar" (src/infer.ml[196,7510+18]..[196,7510+25])
                            <arg>
                            Nolabel
                              expression (src/infer.ml[197,7536+6]..[197,7536+39])
                                Pexp_apply
                                expression (src/infer.ml[197,7536+7]..[197,7536+24])
                                  Pexp_ident "Action.to_il_expr" (src/infer.ml[197,7536+7]..[197,7536+24])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/infer.ml[197,7536+25]..[197,7536+38])
                                      Pexp_field
                                      expression (src/infer.ml[197,7536+25]..[197,7536+31])
                                        Pexp_ident "branch" (src/infer.ml[197,7536+25]..[197,7536+31])
                                      "action" (src/infer.ml[197,7536+32]..[197,7536+38])
                                ]
                            <arg>
                            Nolabel
                              expression (src/infer.ml[198,7576+6]..[198,7576+12])
                                Pexp_ident "symbol" (src/infer.ml[198,7576+6]..[198,7576+12])
                          ]
                    ]
                    expression (src/infer.ml[201,7595+2]..[205,7646+26])
                      Pexp_match
                      expression (src/infer.ml[201,7595+8]..[201,7595+15])
                        Pexp_ident "formals" (src/infer.ml[201,7595+8]..[201,7595+15])
                      [
                        <case>
                          pattern (src/infer.ml[202,7616+4]..[202,7616+6])
                            Ppat_construct "[]" (src/infer.ml[202,7616+4]..[202,7616+6])
                            None
                          expression (src/infer.ml[203,7626+6]..[203,7626+10])
                            Pexp_ident "body" (src/infer.ml[203,7626+6]..[203,7626+10])
                        <case>
                          pattern (src/infer.ml[204,7637+4]..[204,7637+5])
                            Ppat_any
                          expression (src/infer.ml[205,7646+6]..[205,7646+26])
                            Pexp_construct "EFun" (src/infer.ml[205,7646+6]..[205,7646+10])
                            Some
                              expression (src/infer.ml[205,7646+11]..[205,7646+26])
                                Pexp_tuple
                                [
                                  expression (src/infer.ml[205,7646+12]..[205,7646+19])
                                    Pexp_ident "formals" (src/infer.ml[205,7646+12]..[205,7646+19])
                                  expression (src/infer.ml[205,7646+21]..[205,7646+25])
                                    Pexp_ident "body" (src/infer.ml[205,7646+21]..[205,7646+25])
                                ]
                      ]
    ]
  structure_item (src/infer.ml[209,7736+0]..[268,9713+6])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[209,7736+4]..[209,7736+11])
          Ppat_var "program" (src/infer.ml[209,7736+4]..[209,7736+11])
        expression (src/infer.ml[209,7736+12]..[268,9713+6]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[209,7736+12]..[209,7736+19])
            Ppat_var "grammar" (src/infer.ml[209,7736+12]..[209,7736+19])
          expression (src/infer.ml[215,7958+2]..[268,9713+6])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/infer.ml[215,7958+6]..[215,7958+26])
                  Ppat_tuple
                  [
                    pattern (src/infer.ml[215,7958+6]..[215,7958+15])
                      Ppat_var "bindings1" (src/infer.ml[215,7958+6]..[215,7958+15])
                    pattern (src/infer.ml[215,7958+17]..[215,7958+26])
                      Ppat_var "bindings2" (src/infer.ml[215,7958+17]..[215,7958+26])
                  ]
                expression (src/infer.ml[216,7987+4]..[223,8373+28])
                  Pexp_apply
                  expression (src/infer.ml[216,7987+4]..[216,7987+18])
                    Pexp_ident "StringMap.fold" (src/infer.ml[216,7987+4]..[216,7987+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[216,7987+19]..[223,8373+5])
                        Pexp_fun
                        Nolabel
                        None
                        pattern (src/infer.ml[216,7987+24]..[216,7987+30])
                          Ppat_var "symbol" (src/infer.ml[216,7987+24]..[216,7987+30])
                        expression (src/infer.ml[216,7987+31]..[222,8328+44]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/infer.ml[216,7987+31]..[216,7987+35])
                            Ppat_var "rule" (src/infer.ml[216,7987+31]..[216,7987+35])
                          expression (src/infer.ml[216,7987+36]..[222,8328+44]) ghost
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/infer.ml[216,7987+36]..[216,7987+58])
                              Ppat_tuple
                              [
                                pattern (src/infer.ml[216,7987+37]..[216,7987+46])
                                  Ppat_var "bindings1" (src/infer.ml[216,7987+37]..[216,7987+46])
                                pattern (src/infer.ml[216,7987+48]..[216,7987+57])
                                  Ppat_var "bindings2" (src/infer.ml[216,7987+48]..[216,7987+57])
                              ]
                            expression (src/infer.ml[217,8049+6]..[222,8328+44])
                              Pexp_apply
                              expression (src/infer.ml[217,8049+6]..[217,8049+20])
                                Pexp_ident "List.fold_left" (src/infer.ml[217,8049+6]..[217,8049+20])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[217,8049+21]..[222,8328+7])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/infer.ml[217,8049+26]..[217,8049+48])
                                      Ppat_tuple
                                      [
                                        pattern (src/infer.ml[217,8049+27]..[217,8049+36])
                                          Ppat_var "bindings1" (src/infer.ml[217,8049+27]..[217,8049+36])
                                        pattern (src/infer.ml[217,8049+38]..[217,8049+47])
                                          Ppat_var "bindings2" (src/infer.ml[217,8049+38]..[217,8049+47])
                                      ]
                                    expression (src/infer.ml[217,8049+49]..[221,8249+78]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (src/infer.ml[217,8049+49]..[217,8049+55])
                                        Ppat_var "branch" (src/infer.ml[217,8049+49]..[217,8049+55])
                                      expression (src/infer.ml[218,8108+8]..[221,8249+78])
                                        Pexp_ifthenelse
                                        expression (src/infer.ml[218,8108+11]..[218,8108+43])
                                          Pexp_apply
                                          expression (src/infer.ml[218,8108+11]..[218,8108+29])
                                            Pexp_ident "Action.is_standard" (src/infer.ml[218,8108+11]..[218,8108+29])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/infer.ml[218,8108+30]..[218,8108+43])
                                                Pexp_field
                                                expression (src/infer.ml[218,8108+30]..[218,8108+36])
                                                  Pexp_ident "branch" (src/infer.ml[218,8108+30]..[218,8108+36])
                                                "action" (src/infer.ml[218,8108+37]..[218,8108+43])
                                          ]
                                        expression (src/infer.ml[219,8157+10]..[219,8157+78])
                                          Pexp_tuple
                                          [
                                            expression (src/infer.ml[219,8157+10]..[219,8157+67])
                                              Pexp_construct "::" (src/infer.ml[219,8157+55]..[219,8157+57])
                                              Some
                                                expression (src/infer.ml[219,8157+10]..[219,8157+67]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (src/infer.ml[219,8157+10]..[219,8157+54])
                                                      Pexp_tuple
                                                      [
                                                        expression (src/infer.ml[219,8157+11]..[219,8157+20])
                                                          Pexp_construct "PWildcard" (src/infer.ml[219,8157+11]..[219,8157+20])
                                                          None
                                                        expression (src/infer.ml[219,8157+22]..[219,8157+53])
                                                          Pexp_apply
                                                          expression (src/infer.ml[219,8157+22]..[219,8157+31])
                                                            Pexp_ident "actiondef" (src/infer.ml[219,8157+22]..[219,8157+31])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/infer.ml[219,8157+32]..[219,8157+39])
                                                                Pexp_ident "grammar" (src/infer.ml[219,8157+32]..[219,8157+39])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/infer.ml[219,8157+40]..[219,8157+46])
                                                                Pexp_ident "symbol" (src/infer.ml[219,8157+40]..[219,8157+46])
                                                            <arg>
                                                            Nolabel
                                                              expression (src/infer.ml[219,8157+47]..[219,8157+53])
                                                                Pexp_ident "branch" (src/infer.ml[219,8157+47]..[219,8157+53])
                                                          ]
                                                      ]
                                                    expression (src/infer.ml[219,8157+58]..[219,8157+67])
                                                      Pexp_ident "bindings1" (src/infer.ml[219,8157+58]..[219,8157+67])
                                                  ]
                                            expression (src/infer.ml[219,8157+69]..[219,8157+78])
                                              Pexp_ident "bindings2" (src/infer.ml[219,8157+69]..[219,8157+78])
                                          ]
                                        Some
                                          expression (src/infer.ml[221,8249+10]..[221,8249+78])
                                            Pexp_tuple
                                            [
                                              expression (src/infer.ml[221,8249+10]..[221,8249+19])
                                                Pexp_ident "bindings1" (src/infer.ml[221,8249+10]..[221,8249+19])
                                              expression (src/infer.ml[221,8249+21]..[221,8249+78])
                                                Pexp_construct "::" (src/infer.ml[221,8249+66]..[221,8249+68])
                                                Some
                                                  expression (src/infer.ml[221,8249+21]..[221,8249+78]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (src/infer.ml[221,8249+21]..[221,8249+65])
                                                        Pexp_tuple
                                                        [
                                                          expression (src/infer.ml[221,8249+22]..[221,8249+31])
                                                            Pexp_construct "PWildcard" (src/infer.ml[221,8249+22]..[221,8249+31])
                                                            None
                                                          expression (src/infer.ml[221,8249+33]..[221,8249+64])
                                                            Pexp_apply
                                                            expression (src/infer.ml[221,8249+33]..[221,8249+42])
                                                              Pexp_ident "actiondef" (src/infer.ml[221,8249+33]..[221,8249+42])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/infer.ml[221,8249+43]..[221,8249+50])
                                                                  Pexp_ident "grammar" (src/infer.ml[221,8249+43]..[221,8249+50])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/infer.ml[221,8249+51]..[221,8249+57])
                                                                  Pexp_ident "symbol" (src/infer.ml[221,8249+51]..[221,8249+57])
                                                              <arg>
                                                              Nolabel
                                                                expression (src/infer.ml[221,8249+58]..[221,8249+64])
                                                                  Pexp_ident "branch" (src/infer.ml[221,8249+58]..[221,8249+64])
                                                            ]
                                                        ]
                                                      expression (src/infer.ml[221,8249+69]..[221,8249+78])
                                                        Pexp_ident "bindings2" (src/infer.ml[221,8249+69]..[221,8249+78])
                                                    ]
                                            ]
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[222,8328+8]..[222,8328+30])
                                    Pexp_tuple
                                    [
                                      expression (src/infer.ml[222,8328+9]..[222,8328+18])
                                        Pexp_ident "bindings1" (src/infer.ml[222,8328+9]..[222,8328+18])
                                      expression (src/infer.ml[222,8328+20]..[222,8328+29])
                                        Pexp_ident "bindings2" (src/infer.ml[222,8328+20]..[222,8328+29])
                                    ]
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[222,8328+31]..[222,8328+44])
                                    Pexp_field
                                    expression (src/infer.ml[222,8328+31]..[222,8328+35])
                                      Pexp_ident "rule" (src/infer.ml[222,8328+31]..[222,8328+35])
                                    "branches" (src/infer.ml[222,8328+36]..[222,8328+44])
                              ]
                    <arg>
                    Nolabel
                      expression (src/infer.ml[223,8373+6]..[223,8373+19])
                        Pexp_field
                        expression (src/infer.ml[223,8373+6]..[223,8373+13])
                          Pexp_ident "grammar" (src/infer.ml[223,8373+6]..[223,8373+13])
                        "rules" (src/infer.ml[223,8373+14]..[223,8373+19])
                    <arg>
                    Nolabel
                      expression (src/infer.ml[223,8373+20]..[223,8373+28])
                        Pexp_tuple
                        [
                          expression (src/infer.ml[223,8373+21]..[223,8373+23])
                            Pexp_construct "[]" (src/infer.ml[223,8373+21]..[223,8373+23])
                            None
                          expression (src/infer.ml[223,8373+25]..[223,8373+27])
                            Pexp_construct "[]" (src/infer.ml[223,8373+25]..[223,8373+27])
                            None
                        ]
                  ]
            ]
            expression (src/infer.ml[229,8556+2]..[268,9713+6])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/infer.ml[229,8556+6]..[229,8556+12])
                    Ppat_tuple
                    [
                      pattern (src/infer.ml[229,8556+6]..[229,8556+8])
                        Ppat_var "ps" (src/infer.ml[229,8556+6]..[229,8556+8])
                      pattern (src/infer.ml[229,8556+10]..[229,8556+12])
                        Ppat_var "ts" (src/infer.ml[229,8556+10]..[229,8556+12])
                    ]
                  expression (src/infer.ml[230,8571+4]..[233,8680+28])
                    Pexp_apply
                    expression (src/infer.ml[230,8571+4]..[230,8571+18])
                      Pexp_ident "StringMap.fold" (src/infer.ml[230,8571+4]..[230,8571+18])
                    [
                      <arg>
                      Nolabel
                        expression (src/infer.ml[230,8571+19]..[233,8680+5])
                          Pexp_fun
                          Nolabel
                          None
                          pattern (src/infer.ml[230,8571+24]..[230,8571+26])
                            Ppat_var "nt" (src/infer.ml[230,8571+24]..[230,8571+26])
                          expression (src/infer.ml[230,8571+27]..[232,8659+20]) ghost
                            Pexp_fun
                            Nolabel
                            None
                            pattern (src/infer.ml[230,8571+27]..[230,8571+28])
                              Ppat_any
                            expression (src/infer.ml[230,8571+29]..[232,8659+20]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/infer.ml[230,8571+29]..[230,8571+37])
                                Ppat_tuple
                                [
                                  pattern (src/infer.ml[230,8571+30]..[230,8571+32])
                                    Ppat_var "ps" (src/infer.ml[230,8571+30]..[230,8571+32])
                                  pattern (src/infer.ml[230,8571+34]..[230,8571+36])
                                    Ppat_var "ts" (src/infer.ml[230,8571+34]..[230,8571+36])
                                ]
                              expression (src/infer.ml[231,8612+6]..[232,8659+20])
                                Pexp_tuple
                                [
                                  expression (src/infer.ml[231,8612+6]..[231,8612+45])
                                    Pexp_construct "::" (src/infer.ml[231,8612+40]..[231,8612+42])
                                    Some
                                      expression (src/infer.ml[231,8612+6]..[231,8612+45]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/infer.ml[231,8612+6]..[231,8612+39])
                                            Pexp_construct "PVar" (src/infer.ml[231,8612+6]..[231,8612+10])
                                            Some
                                              expression (src/infer.ml[231,8612+11]..[231,8612+39])
                                                Pexp_apply
                                                expression (src/infer.ml[231,8612+12]..[231,8612+18])
                                                  Pexp_ident "encode" (src/infer.ml[231,8612+12]..[231,8612+18])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/infer.ml[231,8612+19]..[231,8612+38])
                                                      Pexp_apply
                                                      expression (src/infer.ml[231,8612+20]..[231,8612+34])
                                                        Pexp_ident "Misc.normalize" (src/infer.ml[231,8612+20]..[231,8612+34])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/infer.ml[231,8612+35]..[231,8612+37])
                                                            Pexp_ident "nt" (src/infer.ml[231,8612+35]..[231,8612+37])
                                                      ]
                                                ]
                                          expression (src/infer.ml[231,8612+43]..[231,8612+45])
                                            Pexp_ident "ps" (src/infer.ml[231,8612+43]..[231,8612+45])
                                        ]
                                  expression (src/infer.ml[232,8659+6]..[232,8659+20])
                                    Pexp_construct "::" (src/infer.ml[232,8659+15]..[232,8659+17])
                                    Some
                                      expression (src/infer.ml[232,8659+6]..[232,8659+20]) ghost
                                        Pexp_tuple
                                        [
                                          expression (src/infer.ml[232,8659+6]..[232,8659+14])
                                            Pexp_apply
                                            expression (src/infer.ml[232,8659+6]..[232,8659+11])
                                              Pexp_ident "ntvar" (src/infer.ml[232,8659+6]..[232,8659+11])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[232,8659+12]..[232,8659+14])
                                                  Pexp_ident "nt" (src/infer.ml[232,8659+12]..[232,8659+14])
                                            ]
                                          expression (src/infer.ml[232,8659+18]..[232,8659+20])
                                            Pexp_ident "ts" (src/infer.ml[232,8659+18]..[232,8659+20])
                                        ]
                                ]
                      <arg>
                      Nolabel
                        expression (src/infer.ml[233,8680+6]..[233,8680+19])
                          Pexp_field
                          expression (src/infer.ml[233,8680+6]..[233,8680+13])
                            Pexp_ident "grammar" (src/infer.ml[233,8680+6]..[233,8680+13])
                          "rules" (src/infer.ml[233,8680+14]..[233,8680+19])
                      <arg>
                      Nolabel
                        expression (src/infer.ml[233,8680+20]..[233,8680+28])
                          Pexp_tuple
                          [
                            expression (src/infer.ml[233,8680+21]..[233,8680+23])
                              Pexp_construct "[]" (src/infer.ml[233,8680+21]..[233,8680+23])
                              None
                            expression (src/infer.ml[233,8680+25]..[233,8680+27])
                              Pexp_construct "[]" (src/infer.ml[233,8680+25]..[233,8680+27])
                              None
                          ]
                    ]
              ]
              expression (src/infer.ml[236,8715+2]..[268,9713+6])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[236,8715+6]..[236,8715+9])
                      Ppat_var "def" (src/infer.ml[236,8715+6]..[236,8715+9])
                    expression (src/infer.ml[236,8715+12]..[240,8848+3])
                      Pexp_record
                      [
                        "valpublic" (src/infer.ml[237,8729+4]..[237,8729+13])
                          expression (src/infer.ml[237,8729+16]..[237,8729+20])
                            Pexp_construct "true" (src/infer.ml[237,8729+16]..[237,8729+20])
                            None
                        "valpat" (src/infer.ml[238,8751+4]..[238,8751+10])
                          expression (src/infer.ml[238,8751+13]..[238,8751+22])
                            Pexp_construct "PTuple" (src/infer.ml[238,8751+13]..[238,8751+19])
                            Some
                              expression (src/infer.ml[238,8751+20]..[238,8751+22])
                                Pexp_ident "ps" (src/infer.ml[238,8751+20]..[238,8751+22])
                        "valval" (src/infer.ml[239,8775+4]..[239,8775+10])
                          expression (src/infer.ml[239,8775+13]..[239,8775+72])
                            Pexp_construct "ELet" (src/infer.ml[239,8775+13]..[239,8775+17])
                            Some
                              expression (src/infer.ml[239,8775+18]..[239,8775+72])
                                Pexp_tuple
                                [
                                  expression (src/infer.ml[239,8775+19]..[239,8775+40])
                                    Pexp_apply
                                    expression (src/infer.ml[239,8775+29]..[239,8775+30])
                                      Pexp_ident "@" (src/infer.ml[239,8775+29]..[239,8775+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[239,8775+19]..[239,8775+28])
                                          Pexp_ident "bindings1" (src/infer.ml[239,8775+19]..[239,8775+28])
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[239,8775+31]..[239,8775+40])
                                          Pexp_ident "bindings2" (src/infer.ml[239,8775+31]..[239,8775+40])
                                    ]
                                  expression (src/infer.ml[239,8775+42]..[239,8775+71])
                                    Pexp_apply
                                    expression (src/infer.ml[239,8775+42]..[239,8775+50])
                                      Pexp_ident "annotate" (src/infer.ml[239,8775+42]..[239,8775+50])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[239,8775+51]..[239,8775+57])
                                          Pexp_ident "bottom" (src/infer.ml[239,8775+51]..[239,8775+57])
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[239,8775+58]..[239,8775+71])
                                          Pexp_construct "TypTuple" (src/infer.ml[239,8775+59]..[239,8775+67])
                                          Some
                                            expression (src/infer.ml[239,8775+68]..[239,8775+70])
                                              Pexp_ident "ts" (src/infer.ml[239,8775+68]..[239,8775+70])
                                    ]
                                ]
                      ]
                      None
                ]
                expression (src/infer.ml[248,9102+2]..[268,9713+6])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[248,9102+6]..[248,9102+14])
                        Ppat_var "begindef" (src/infer.ml[248,9102+6]..[248,9102+14])
                      expression (src/infer.ml[248,9102+17]..[252,9209+3])
                        Pexp_record
                        [
                          "valpublic" (src/infer.ml[249,9121+4]..[249,9121+13])
                            expression (src/infer.ml[249,9121+16]..[249,9121+20])
                              Pexp_construct "true" (src/infer.ml[249,9121+16]..[249,9121+20])
                              None
                          "valpat" (src/infer.ml[250,9143+4]..[250,9143+10])
                            expression (src/infer.ml[250,9143+13]..[250,9143+39])
                              Pexp_construct "PVar" (src/infer.ml[250,9143+13]..[250,9143+17])
                              Some
                                expression (src/infer.ml[250,9143+18]..[250,9143+39])
                                  Pexp_constant PConst_string("menhir_begin_marker",(src/infer.ml[250,9143+19]..[250,9143+38]),None)
                          "valval" (src/infer.ml[251,9184+4]..[251,9184+10])
                            expression (src/infer.ml[251,9184+13]..[251,9184+24])
                              Pexp_construct "EIntConst" (src/infer.ml[251,9184+13]..[251,9184+22])
                              Some
                                expression (src/infer.ml[251,9184+23]..[251,9184+24])
                                  Pexp_constant PConst_int (0,None)
                        ]
                        None
                    <def>
                      pattern (src/infer.ml[253,9213+6]..[253,9213+12])
                        Ppat_var "enddef" (src/infer.ml[253,9213+6]..[253,9213+12])
                      expression (src/infer.ml[253,9213+15]..[257,9316+3])
                        Pexp_record
                        [
                          "valpublic" (src/infer.ml[254,9230+4]..[254,9230+13])
                            expression (src/infer.ml[254,9230+16]..[254,9230+20])
                              Pexp_construct "true" (src/infer.ml[254,9230+16]..[254,9230+20])
                              None
                          "valpat" (src/infer.ml[255,9252+4]..[255,9252+10])
                            expression (src/infer.ml[255,9252+13]..[255,9252+37])
                              Pexp_construct "PVar" (src/infer.ml[255,9252+13]..[255,9252+17])
                              Some
                                expression (src/infer.ml[255,9252+18]..[255,9252+37])
                                  Pexp_constant PConst_string("menhir_end_marker",(src/infer.ml[255,9252+19]..[255,9252+36]),None)
                          "valval" (src/infer.ml[256,9291+4]..[256,9291+10])
                            expression (src/infer.ml[256,9291+13]..[256,9291+24])
                              Pexp_construct "EIntConst" (src/infer.ml[256,9291+13]..[256,9291+22])
                              Some
                                expression (src/infer.ml[256,9291+23]..[256,9291+24])
                                  Pexp_constant PConst_int (0,None)
                        ]
                        None
                  ]
                  expression (src/infer.ml[263,9505+2]..[268,9713+6])
                    Pexp_construct "::" (src/infer.ml[263,9505+4]..[268,9713+6]) ghost
                    Some
                      expression (src/infer.ml[263,9505+4]..[268,9713+6]) ghost
                        Pexp_tuple
                        [
                          expression (src/infer.ml[263,9505+4]..[268,9713+5])
                            Pexp_construct "SIFunctor" (src/infer.ml[263,9505+4]..[263,9505+13])
                            Some
                              expression (src/infer.ml[263,9505+14]..[268,9713+5])
                                Pexp_tuple
                                [
                                  expression (src/infer.ml[263,9505+15]..[263,9505+33])
                                    Pexp_field
                                    expression (src/infer.ml[263,9505+15]..[263,9505+22])
                                      Pexp_ident "grammar" (src/infer.ml[263,9505+15]..[263,9505+22])
                                    "parameters" (src/infer.ml[263,9505+23]..[263,9505+33])
                                  expression (src/infer.ml[264,9540+4]..[268,9713+4])
                                    Pexp_apply
                                    expression (src/infer.ml[264,9540+50]..[264,9540+51])
                                      Pexp_ident "@" (src/infer.ml[264,9540+50]..[264,9540+51])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[264,9540+4]..[264,9540+49])
                                          Pexp_apply
                                          expression (src/infer.ml[264,9540+4]..[264,9540+26])
                                            Pexp_ident "interface_to_structure" (src/infer.ml[264,9540+4]..[264,9540+26])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/infer.ml[264,9540+27]..[264,9540+49])
                                                Pexp_apply
                                                expression (src/infer.ml[264,9540+28]..[264,9540+40])
                                                  Pexp_ident "tokentypedef" (src/infer.ml[264,9540+28]..[264,9540+40])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/infer.ml[264,9540+41]..[264,9540+48])
                                                      Pexp_ident "grammar" (src/infer.ml[264,9540+41]..[264,9540+48])
                                                ]
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[265,9592+4]..[268,9713+4])
                                          Pexp_construct "::" (src/infer.ml[265,9592+31]..[265,9592+33])
                                          Some
                                            expression (src/infer.ml[265,9592+4]..[268,9713+4]) ghost
                                              Pexp_tuple
                                              [
                                                expression (src/infer.ml[265,9592+4]..[265,9592+30])
                                                  Pexp_construct "SIStretch" (src/infer.ml[265,9592+4]..[265,9592+13])
                                                  Some
                                                    expression (src/infer.ml[265,9592+14]..[265,9592+30])
                                                      Pexp_field
                                                      expression (src/infer.ml[265,9592+14]..[265,9592+21])
                                                        Pexp_ident "grammar" (src/infer.ml[265,9592+14]..[265,9592+21])
                                                      "preludes" (src/infer.ml[265,9592+22]..[265,9592+30])
                                                expression (src/infer.ml[266,9626+4]..[268,9713+4])
                                                  Pexp_construct "::" (src/infer.ml[266,9626+49]..[266,9626+51])
                                                  Some
                                                    expression (src/infer.ml[266,9626+4]..[268,9713+4]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (src/infer.ml[266,9626+4]..[266,9626+48])
                                                          Pexp_construct "SIValDefs" (src/infer.ml[266,9626+4]..[266,9626+13])
                                                          Some
                                                            expression (src/infer.ml[266,9626+14]..[266,9626+48])
                                                              Pexp_tuple
                                                              [
                                                                expression (src/infer.ml[266,9626+15]..[266,9626+20])
                                                                  Pexp_construct "false" (src/infer.ml[266,9626+15]..[266,9626+20])
                                                                  None
                                                                expression (src/infer.ml[266,9626+22]..[266,9626+47])
                                                                  Pexp_construct "::" (src/infer.ml[266,9626+24]..[266,9626+47]) ghost
                                                                  Some
                                                                    expression (src/infer.ml[266,9626+24]..[266,9626+47]) ghost
                                                                      Pexp_tuple
                                                                      [
expression (src/infer.ml[266,9626+24]..[266,9626+32])
  Pexp_ident "begindef" (src/infer.ml[266,9626+24]..[266,9626+32])
expression (src/infer.ml[266,9626+34]..[266,9626+47]) ghost
  Pexp_construct "::" (src/infer.ml[266,9626+34]..[266,9626+47]) ghost
  Some
    expression (src/infer.ml[266,9626+34]..[266,9626+47]) ghost
      Pexp_tuple
      [
        expression (src/infer.ml[266,9626+34]..[266,9626+37])
          Pexp_ident "def" (src/infer.ml[266,9626+34]..[266,9626+37])
        expression (src/infer.ml[266,9626+39]..[266,9626+47]) ghost
          Pexp_construct "::" (src/infer.ml[266,9626+39]..[266,9626+47]) ghost
          Some
            expression (src/infer.ml[266,9626+39]..[266,9626+47]) ghost
              Pexp_tuple
              [
                expression (src/infer.ml[266,9626+39]..[266,9626+45])
                  Pexp_ident "enddef" (src/infer.ml[266,9626+39]..[266,9626+45])
                expression (src/infer.ml[266,9626+46]..[266,9626+47]) ghost
                  Pexp_construct "[]" (src/infer.ml[266,9626+46]..[266,9626+47]) ghost
                  None
              ]
      ]
                                                                      ]
                                                              ]
                                                        expression (src/infer.ml[267,9678+4]..[268,9713+4])
                                                          Pexp_construct "::" (src/infer.ml[267,9678+32]..[267,9678+34])
                                                          Some
                                                            expression (src/infer.ml[267,9678+4]..[268,9713+4]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (src/infer.ml[267,9678+4]..[267,9678+31])
                                                                  Pexp_construct "SIStretch" (src/infer.ml[267,9678+4]..[267,9678+13])
                                                                  Some
                                                                    expression (src/infer.ml[267,9678+14]..[267,9678+31])
                                                                      Pexp_field
                                                                      expression (src/infer.ml[267,9678+14]..[267,9678+21])
Pexp_ident "grammar" (src/infer.ml[267,9678+14]..[267,9678+21])
                                                                      "postludes" (src/infer.ml[267,9678+22]..[267,9678+31])
                                                                expression (src/infer.ml[268,9713+2]..[268,9713+4])
                                                                  Pexp_construct "[]" (src/infer.ml[268,9713+2]..[268,9713+4])
                                                                  None
                                                              ]
                                                      ]
                                              ]
                                    ]
                                ]
                          expression (src/infer.ml[268,9713+5]..[268,9713+6]) ghost
                            Pexp_construct "[]" (src/infer.ml[268,9713+5]..[268,9713+6]) ghost
                            None
                        ]
    ]
  structure_item (src/infer.ml[273,9865+0]..[280,10064+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[273,9865+4]..[273,9865+9])
          Ppat_var "write" (src/infer.ml[273,9865+4]..[273,9865+9])
        expression (src/infer.ml[273,9865+10]..[280,10064+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[273,9865+10]..[273,9865+17])
            Ppat_var "grammar" (src/infer.ml[273,9865+10]..[273,9865+17])
          expression (src/infer.ml[273,9865+18]..[280,10064+14]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[273,9865+18]..[273,9865+26])
              Ppat_var "filename" (src/infer.ml[273,9865+18]..[273,9865+26])
            expression (src/infer.ml[273,9865+27]..[280,10064+14]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/infer.ml[273,9865+27]..[273,9865+29])
                Ppat_construct "()" (src/infer.ml[273,9865+27]..[273,9865+29])
                None
              expression (src/infer.ml[274,9897+2]..[280,10064+14])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[274,9897+6]..[274,9897+8])
                      Ppat_var "ml" (src/infer.ml[274,9897+6]..[274,9897+8])
                    expression (src/infer.ml[274,9897+11]..[274,9897+28])
                      Pexp_apply
                      expression (src/infer.ml[274,9897+11]..[274,9897+19])
                        Pexp_ident "open_out" (src/infer.ml[274,9897+11]..[274,9897+19])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[274,9897+20]..[274,9897+28])
                            Pexp_ident "filename" (src/infer.ml[274,9897+20]..[274,9897+28])
                      ]
                ]
                expression (src/infer.ml[275,9929+2]..[280,10064+14])
                  Pexp_letmodule "P" (src/infer.ml[275,9929+13]..[275,9929+14])
                  module_expr (src/infer.ml[275,9929+17]..[278,10023+6])
                    Pmod_apply
                    module_expr (src/infer.ml[275,9929+17]..[275,9929+29])
                      Pmod_ident "Printer.Make" (src/infer.ml[275,9929+17]..[275,9929+29])
                    module_expr (src/infer.ml[275,9929+31]..[278,10023+5])
                      Pmod_structure
                      [
                        structure_item (src/infer.ml[276,9967+4]..[276,9967+14])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/infer.ml[276,9967+8]..[276,9967+9])
                                Ppat_var "f" (src/infer.ml[276,9967+8]..[276,9967+9])
                              expression (src/infer.ml[276,9967+12]..[276,9967+14])
                                Pexp_ident "ml" (src/infer.ml[276,9967+12]..[276,9967+14])
                          ]
                        structure_item (src/infer.ml[277,9982+4]..[277,9982+40])
                          Pstr_value Nonrec
                          [
                            <def>
                              pattern (src/infer.ml[277,9982+8]..[277,9982+24])
                                Ppat_var "locate_stretches" (src/infer.ml[277,9982+8]..[277,9982+24])
                              expression (src/infer.ml[277,9982+27]..[277,9982+40])
                                Pexp_construct "Some" (src/infer.ml[277,9982+27]..[277,9982+31])
                                Some
                                  expression (src/infer.ml[277,9982+32]..[277,9982+40])
                                    Pexp_ident "filename" (src/infer.ml[277,9982+32]..[277,9982+40])
                          ]
                      ]
                  expression (src/infer.ml[279,10033+2]..[280,10064+14])
                    Pexp_sequence
                    expression (src/infer.ml[279,10033+2]..[279,10033+29])
                      Pexp_apply
                      expression (src/infer.ml[279,10033+2]..[279,10033+11])
                        Pexp_ident "P.program" (src/infer.ml[279,10033+2]..[279,10033+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[279,10033+12]..[279,10033+29])
                            Pexp_apply
                            expression (src/infer.ml[279,10033+13]..[279,10033+20])
                              Pexp_ident "program" (src/infer.ml[279,10033+13]..[279,10033+20])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[279,10033+21]..[279,10033+28])
                                  Pexp_ident "grammar" (src/infer.ml[279,10033+21]..[279,10033+28])
                            ]
                      ]
                    expression (src/infer.ml[280,10064+2]..[280,10064+14])
                      Pexp_apply
                      expression (src/infer.ml[280,10064+2]..[280,10064+11])
                        Pexp_ident "close_out" (src/infer.ml[280,10064+2]..[280,10064+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[280,10064+12]..[280,10064+14])
                            Pexp_ident "ml" (src/infer.ml[280,10064+12]..[280,10064+14])
                      ]
    ]
  structure_item (src/infer.ml[285,10200+0]..[286,10213+34])
    Pstr_type Rec
    [
      type_declaration "entry" (src/infer.ml[285,10200+5]..[285,10200+10]) (src/infer.ml[285,10200+0]..[286,10213+34])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/infer.ml[286,10213+4]..[286,10213+34])
              Ptyp_tuple
              [
                core_type (src/infer.ml[286,10213+4]..[286,10213+10])
                  Ptyp_constr "string" (src/infer.ml[286,10213+4]..[286,10213+10])
                  []
                core_type (src/infer.ml[286,10213+28]..[286,10213+34])
                  Ptyp_constr "string" (src/infer.ml[286,10213+28]..[286,10213+34])
                  []
              ]
    ]
  structure_item (src/infer.ml[288,10264+0]..[289,10276+35])
    Pstr_type Rec
    [
      type_declaration "line" (src/infer.ml[288,10264+5]..[288,10264+9]) (src/infer.ml[288,10264+0]..[289,10276+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/infer.ml[289,10276+4]..[289,10276+35])
              Ptyp_tuple
              [
                core_type (src/infer.ml[289,10276+4]..[289,10276+9])
                  Ptyp_constr "entry" (src/infer.ml[289,10276+4]..[289,10276+9])
                  []
                core_type (src/infer.ml[289,10276+25]..[289,10276+35])
                  Ptyp_constr "list" (src/infer.ml[289,10276+31]..[289,10276+35])
                  [
                    core_type (src/infer.ml[289,10276+25]..[289,10276+30])
                      Ptyp_constr "entry" (src/infer.ml[289,10276+25]..[289,10276+30])
                      []
                  ]
              ]
    ]
  structure_item (src/infer.ml[291,10332+0]..[366,12891+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[291,10332+4]..[291,10332+10])
          Ppat_var "depend" (src/infer.ml[291,10332+4]..[291,10332+10])
        expression (src/infer.ml[291,10332+11]..[366,12891+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[291,10332+11]..[291,10332+22])
            Ppat_var "postprocess" (src/infer.ml[291,10332+11]..[291,10332+22])
          expression (src/infer.ml[291,10332+23]..[366,12891+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[291,10332+23]..[291,10332+30])
              Ppat_var "grammar" (src/infer.ml[291,10332+23]..[291,10332+30])
            expression (src/infer.ml[301,10713+2]..[366,12891+8])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/infer.ml[301,10713+6]..[301,10713+22])
                    Ppat_var "ocamldep_command" (src/infer.ml[301,10713+6]..[301,10713+22])
                  expression (src/infer.ml[302,10738+4]..[303,10768+72])
                    Pexp_apply
                    expression (src/infer.ml[302,10738+4]..[302,10738+18])
                      Pexp_ident "Printf.sprintf" (src/infer.ml[302,10738+4]..[302,10738+18])
                    [
                      <arg>
                      Nolabel
                        expression (src/infer.ml[302,10738+19]..[302,10738+29])
                          Pexp_constant PConst_string("%s %s %s",(src/infer.ml[302,10738+20]..[302,10738+28]),None)
                      <arg>
                      Nolabel
                        expression (src/infer.ml[303,10768+6]..[303,10768+23])
                          Pexp_ident "Settings.ocamldep" (src/infer.ml[303,10768+6]..[303,10768+23])
                      <arg>
                      Nolabel
                        expression (src/infer.ml[303,10768+24]..[303,10768+47])
                          Pexp_apply
                          expression (src/infer.ml[303,10768+25]..[303,10768+39])
                            Pexp_ident "Filename.quote" (src/infer.ml[303,10768+25]..[303,10768+39])
                          [
                            <arg>
                            Nolabel
                              expression (src/infer.ml[303,10768+40]..[303,10768+46])
                                Pexp_ident "mlname" (src/infer.ml[303,10768+40]..[303,10768+46])
                          ]
                      <arg>
                      Nolabel
                        expression (src/infer.ml[303,10768+48]..[303,10768+72])
                          Pexp_apply
                          expression (src/infer.ml[303,10768+49]..[303,10768+63])
                            Pexp_ident "Filename.quote" (src/infer.ml[303,10768+49]..[303,10768+63])
                          [
                            <arg>
                            Nolabel
                              expression (src/infer.ml[303,10768+64]..[303,10768+71])
                                Pexp_ident "mliname" (src/infer.ml[303,10768+64]..[303,10768+71])
                          ]
                    ]
              ]
              expression (src/infer.ml[306,10847+2]..[366,12891+8])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[306,10847+6]..[306,10847+12])
                      Ppat_var "output" (src/infer.ml[306,10847+6]..[306,10847+12])
                    core_type (src/infer.ml[306,10847+15]..[306,10847+21])
                      Ptyp_constr "string" (src/infer.ml[306,10847+15]..[306,10847+21])
                      []
                    expression (src/infer.ml[307,10871+4]..[313,11128+9])
                      Pexp_apply
                      expression (src/infer.ml[307,10871+4]..[307,10871+18])
                        Pexp_ident "Option.project" (src/infer.ml[307,10871+4]..[307,10871+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[307,10871+19]..[313,11128+9])
                            Pexp_apply
                            expression (src/infer.ml[308,10892+6]..[308,10892+20])
                              Pexp_ident "IO.moving_away" (src/infer.ml[308,10892+6]..[308,10892+20])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[308,10892+21]..[308,10892+27])
                                  Pexp_ident "mlname" (src/infer.ml[308,10892+21]..[308,10892+27])
                              <arg>
                              Nolabel
                                expression (src/infer.ml[308,10892+28]..[313,11128+8])
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/infer.ml[308,10892+33]..[308,10892+35])
                                    Ppat_construct "()" (src/infer.ml[308,10892+33]..[308,10892+35])
                                    None
                                  expression (src/infer.ml[309,10931+6]..[313,11128+7])
                                    Pexp_apply
                                    expression (src/infer.ml[309,10931+6]..[309,10931+20])
                                      Pexp_ident "IO.moving_away" (src/infer.ml[309,10931+6]..[309,10931+20])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[309,10931+21]..[309,10931+28])
                                          Pexp_ident "mliname" (src/infer.ml[309,10931+21]..[309,10931+28])
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[309,10931+29]..[313,11128+7])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (src/infer.ml[309,10931+34]..[309,10931+36])
                                            Ppat_construct "()" (src/infer.ml[309,10931+34]..[309,10931+36])
                                            None
                                          expression (src/infer.ml[310,10971+6]..[313,11128+6])
                                            Pexp_apply
                                            expression (src/infer.ml[310,10971+6]..[310,10971+18])
                                              Pexp_ident "IO.with_file" (src/infer.ml[310,10971+6]..[310,10971+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[310,10971+19]..[310,10971+25])
                                                  Pexp_ident "mlname" (src/infer.ml[310,10971+19]..[310,10971+25])
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[310,10971+26]..[310,10971+48])
                                                  Pexp_apply
                                                  expression (src/infer.ml[310,10971+27]..[310,10971+32])
                                                    Pexp_ident "write" (src/infer.ml[310,10971+27]..[310,10971+32])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/infer.ml[310,10971+33]..[310,10971+40])
                                                        Pexp_ident "grammar" (src/infer.ml[310,10971+33]..[310,10971+40])
                                                    <arg>
                                                    Nolabel
                                                      expression (src/infer.ml[310,10971+41]..[310,10971+47])
                                                        Pexp_ident "mlname" (src/infer.ml[310,10971+41]..[310,10971+47])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[310,10971+49]..[313,11128+6])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/infer.ml[310,10971+54]..[310,10971+56])
                                                    Ppat_construct "()" (src/infer.ml[310,10971+54]..[310,10971+56])
                                                    None
                                                  expression (src/infer.ml[311,11031+6]..[313,11128+5])
                                                    Pexp_apply
                                                    expression (src/infer.ml[311,11031+6]..[311,11031+18])
                                                      Pexp_ident "IO.with_file" (src/infer.ml[311,11031+6]..[311,11031+18])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[311,11031+19]..[311,11031+26])
                                                          Pexp_ident "mliname" (src/infer.ml[311,11031+19]..[311,11031+26])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[311,11031+27]..[311,11031+52])
                                                          Pexp_apply
                                                          expression (src/infer.ml[311,11031+28]..[311,11031+43])
                                                            Pexp_ident "Interface.write" (src/infer.ml[311,11031+28]..[311,11031+43])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (src/infer.ml[311,11031+44]..[311,11031+51])
                                                                Pexp_ident "grammar" (src/infer.ml[311,11031+44]..[311,11031+51])
                                                          ]
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[311,11031+53]..[313,11128+5])
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (src/infer.ml[311,11031+58]..[311,11031+60])
                                                            Ppat_construct "()" (src/infer.ml[311,11031+58]..[311,11031+60])
                                                            None
                                                          expression (src/infer.ml[312,11095+6]..[312,11095+32])
                                                            Pexp_apply
                                                            expression (src/infer.ml[312,11095+6]..[312,11095+15])
                                                              Pexp_ident "IO.invoke" (src/infer.ml[312,11095+6]..[312,11095+15])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (src/infer.ml[312,11095+16]..[312,11095+32])
                                                                  Pexp_ident "ocamldep_command" (src/infer.ml[312,11095+16]..[312,11095+32])
                                                            ]
                                                    ]
                                            ]
                                    ]
                            ]
                      ]
                ]
                expression (src/infer.ml[318,11177+2]..[366,12891+8])
                  Pexp_sequence
                  expression (src/infer.ml[318,11177+2]..[318,11177+21])
                    Pexp_apply
                    expression (src/infer.ml[318,11177+2]..[318,11177+14])
                      Pexp_ident "print_string" (src/infer.ml[318,11177+2]..[318,11177+14])
                    [
                      <arg>
                      Nolabel
                        expression (src/infer.ml[318,11177+15]..[318,11177+21])
                          Pexp_ident "output" (src/infer.ml[318,11177+15]..[318,11177+21])
                    ]
                  expression (src/infer.ml[325,11506+2]..[366,12891+8])
                    Pexp_sequence
                    expression (src/infer.ml[325,11506+2]..[362,12868+5])
                      Pexp_ifthenelse
                      expression (src/infer.ml[325,11506+5]..[325,11506+16])
                        Pexp_ident "postprocess" (src/infer.ml[325,11506+5]..[325,11506+16])
                      expression (src/infer.ml[325,11506+22]..[362,12868+5])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (src/infer.ml[329,11583+8]..[329,11583+14])
                              Ppat_var "lexbuf" (src/infer.ml[329,11583+8]..[329,11583+14])
                            expression (src/infer.ml[329,11583+17]..[329,11583+42])
                              Pexp_apply
                              expression (src/infer.ml[329,11583+17]..[329,11583+35])
                                Pexp_ident "Lexing.from_string" (src/infer.ml[329,11583+17]..[329,11583+35])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[329,11583+36]..[329,11583+42])
                                    Pexp_ident "output" (src/infer.ml[329,11583+36]..[329,11583+42])
                              ]
                        ]
                        expression (src/infer.ml[330,11629+4]..[360,12855+11])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (src/infer.ml[330,11629+8]..[330,11629+13])
                                Ppat_var "lines" (src/infer.ml[330,11629+8]..[330,11629+13])
                              core_type (src/infer.ml[330,11629+16]..[330,11629+25])
                                Ptyp_constr "list" (src/infer.ml[330,11629+21]..[330,11629+25])
                                [
                                  core_type (src/infer.ml[330,11629+16]..[330,11629+20])
                                    Ptyp_constr "line" (src/infer.ml[330,11629+16]..[330,11629+20])
                                    []
                                ]
                              expression (src/infer.ml[331,11657+6]..[335,11796+42])
                                Pexp_try
                                expression (src/infer.ml[332,11667+8]..[332,11667+26])
                                  Pexp_apply
                                  expression (src/infer.ml[332,11667+8]..[332,11667+19])
                                    Pexp_ident "Lexdep.main" (src/infer.ml[332,11667+8]..[332,11667+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (src/infer.ml[332,11667+20]..[332,11667+26])
                                        Pexp_ident "lexbuf" (src/infer.ml[332,11667+20]..[332,11667+26])
                                  ]
                                [
                                  <case>
                                    pattern (src/infer.ml[333,11694+11]..[333,11694+27])
                                      Ppat_construct "Lexdep.Error" (src/infer.ml[333,11694+11]..[333,11694+23])
                                      Some
                                        []
                                        pattern (src/infer.ml[333,11694+24]..[333,11694+27])
                                          Ppat_var "msg" (src/infer.ml[333,11694+24]..[333,11694+27])
                                    expression (src/infer.ml[335,11796+8]..[335,11796+42])
                                      Pexp_apply
                                      expression (src/infer.ml[335,11796+8]..[335,11796+19])
                                        Pexp_ident "Error.error" (src/infer.ml[335,11796+8]..[335,11796+19])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[335,11796+20]..[335,11796+22])
                                            Pexp_construct "[]" (src/infer.ml[335,11796+20]..[335,11796+22])
                                            None
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[335,11796+23]..[335,11796+27])
                                            Pexp_constant PConst_string("%s",(src/infer.ml[335,11796+24]..[335,11796+26]),None)
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[335,11796+28]..[335,11796+42])
                                            Pexp_apply
                                            expression (src/infer.ml[335,11796+33]..[335,11796+34])
                                              Pexp_ident "^" (src/infer.ml[335,11796+33]..[335,11796+34])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[335,11796+29]..[335,11796+32])
                                                  Pexp_ident "msg" (src/infer.ml[335,11796+29]..[335,11796+32])
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[335,11796+35]..[335,11796+41])
                                                  Pexp_ident "output" (src/infer.ml[335,11796+35]..[335,11796+41])
                                            ]
                                      ]
                                ]
                          ]
                          expression (src/infer.ml[348,12361+4]..[360,12855+11])
                            Pexp_apply
                            expression (src/infer.ml[348,12361+4]..[348,12361+13])
                              Pexp_ident "List.iter" (src/infer.ml[348,12361+4]..[348,12361+13])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[348,12361+14]..[360,12855+5])
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/infer.ml[348,12361+19]..[348,12361+55])
                                    Ppat_tuple
                                    [
                                      pattern (src/infer.ml[348,12361+20]..[348,12361+40])
                                        Ppat_tuple
                                        [
                                          pattern (src/infer.ml[348,12361+21]..[348,12361+22])
                                            Ppat_any
                                          pattern (src/infer.ml[348,12361+24]..[348,12361+39])
                                            Ppat_var "target_filename" (src/infer.ml[348,12361+24]..[348,12361+39])
                                        ]
                                      pattern (src/infer.ml[348,12361+42]..[348,12361+54])
                                        Ppat_var "dependencies" (src/infer.ml[348,12361+42]..[348,12361+54])
                                    ]
                                  expression (src/infer.ml[349,12420+6]..[359,12843+11])
                                    Pexp_ifthenelse
                                    expression (src/infer.ml[349,12420+9]..[349,12420+53])
                                      Pexp_apply
                                      expression (src/infer.ml[349,12420+9]..[349,12420+30])
                                        Pexp_ident "Filename.check_suffix" (src/infer.ml[349,12420+9]..[349,12420+30])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[349,12420+31]..[349,12420+46])
                                            Pexp_ident "target_filename" (src/infer.ml[349,12420+31]..[349,12420+46])
                                        <arg>
                                        Nolabel
                                          expression (src/infer.ml[349,12420+47]..[349,12420+53])
                                            Pexp_constant PConst_string(".cmo",(src/infer.ml[349,12420+48]..[349,12420+52]),None)
                                      ]
                                    expression (src/infer.ml[350,12479+8]..[359,12843+11])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/infer.ml[350,12479+12]..[350,12479+24])
                                            Ppat_var "dependencies" (src/infer.ml[350,12479+12]..[350,12479+24])
                                          expression (src/infer.ml[350,12479+27]..[352,12567+22])
                                            Pexp_apply
                                            expression (src/infer.ml[350,12479+27]..[350,12479+38])
                                              Pexp_ident "List.filter" (src/infer.ml[350,12479+27]..[350,12479+38])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[350,12479+39]..[352,12567+9])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (src/infer.ml[350,12479+44]..[350,12479+57])
                                                    Ppat_tuple
                                                    [
                                                      pattern (src/infer.ml[350,12479+45]..[350,12479+53])
                                                        Ppat_var "basename" (src/infer.ml[350,12479+45]..[350,12479+53])
                                                      pattern (src/infer.ml[350,12479+55]..[350,12479+56])
                                                        Ppat_any
                                                    ]
                                                  expression (src/infer.ml[351,12540+10]..[351,12540+26])
                                                    Pexp_apply
                                                    expression (src/infer.ml[351,12540+19]..[351,12540+21])
                                                      Pexp_ident "<>" (src/infer.ml[351,12540+19]..[351,12540+21])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[351,12540+10]..[351,12540+18])
                                                          Pexp_ident "basename" (src/infer.ml[351,12540+10]..[351,12540+18])
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[351,12540+22]..[351,12540+26])
                                                          Pexp_ident "base" (src/infer.ml[351,12540+22]..[351,12540+26])
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[352,12567+10]..[352,12567+22])
                                                  Pexp_ident "dependencies" (src/infer.ml[352,12567+10]..[352,12567+22])
                                            ]
                                      ]
                                      expression (src/infer.ml[353,12593+8]..[359,12843+11])
                                        Pexp_ifthenelse
                                        expression (src/infer.ml[353,12593+11]..[353,12593+39])
                                          Pexp_apply
                                          expression (src/infer.ml[353,12593+36]..[353,12593+37])
                                            Pexp_ident ">" (src/infer.ml[353,12593+36]..[353,12593+37])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (src/infer.ml[353,12593+11]..[353,12593+35])
                                                Pexp_apply
                                                expression (src/infer.ml[353,12593+11]..[353,12593+22])
                                                  Pexp_ident "List.length" (src/infer.ml[353,12593+11]..[353,12593+22])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (src/infer.ml[353,12593+23]..[353,12593+35])
                                                      Pexp_ident "dependencies" (src/infer.ml[353,12593+23]..[353,12593+35])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (src/infer.ml[353,12593+38]..[353,12593+39])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                        expression (src/infer.ml[353,12593+45]..[359,12843+11])
                                          Pexp_sequence
                                          expression (src/infer.ml[354,12644+10]..[354,12644+49])
                                            Pexp_apply
                                            expression (src/infer.ml[354,12644+10]..[354,12644+23])
                                              Pexp_ident "Printf.printf" (src/infer.ml[354,12644+10]..[354,12644+23])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[354,12644+24]..[354,12644+39])
                                                  Pexp_constant PConst_string("%s.ml %s.mli:",(src/infer.ml[354,12644+25]..[354,12644+38]),None)
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[354,12644+40]..[354,12644+44])
                                                  Pexp_ident "base" (src/infer.ml[354,12644+40]..[354,12644+44])
                                              <arg>
                                              Nolabel
                                                expression (src/infer.ml[354,12644+45]..[354,12644+49])
                                                  Pexp_ident "base" (src/infer.ml[354,12644+45]..[354,12644+49])
                                            ]
                                          expression (src/infer.ml[355,12695+10]..[358,12812+30])
                                            Pexp_sequence
                                            expression (src/infer.ml[355,12695+10]..[357,12786+24])
                                              Pexp_apply
                                              expression (src/infer.ml[355,12695+10]..[355,12695+19])
                                                Pexp_ident "List.iter" (src/infer.ml[355,12695+10]..[355,12695+19])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[355,12695+20]..[357,12786+11])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (src/infer.ml[355,12695+25]..[355,12695+46])
                                                      Ppat_tuple
                                                      [
                                                        pattern (src/infer.ml[355,12695+26]..[355,12695+35])
                                                          Ppat_var "_basename" (src/infer.ml[355,12695+26]..[355,12695+35])
                                                        pattern (src/infer.ml[355,12695+37]..[355,12695+45])
                                                          Ppat_var "filename" (src/infer.ml[355,12695+37]..[355,12695+45])
                                                      ]
                                                    expression (src/infer.ml[356,12745+12]..[356,12745+40])
                                                      Pexp_apply
                                                      expression (src/infer.ml[356,12745+12]..[356,12745+25])
                                                        Pexp_ident "Printf.printf" (src/infer.ml[356,12745+12]..[356,12745+25])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (src/infer.ml[356,12745+26]..[356,12745+31])
                                                            Pexp_constant PConst_string(" %s",(src/infer.ml[356,12745+27]..[356,12745+30]),None)
                                                        <arg>
                                                        Nolabel
                                                          expression (src/infer.ml[356,12745+32]..[356,12745+40])
                                                            Pexp_ident "filename" (src/infer.ml[356,12745+32]..[356,12745+40])
                                                      ]
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[357,12786+12]..[357,12786+24])
                                                    Pexp_ident "dependencies" (src/infer.ml[357,12786+12]..[357,12786+24])
                                              ]
                                            expression (src/infer.ml[358,12812+10]..[358,12812+30])
                                              Pexp_apply
                                              expression (src/infer.ml[358,12812+10]..[358,12812+23])
                                                Pexp_ident "Printf.printf" (src/infer.ml[358,12812+10]..[358,12812+23])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[358,12812+24]..[358,12812+30])
                                                    Pexp_constant PConst_string("\n%!",(src/infer.ml[358,12812+25]..[358,12812+29]),None)
                                              ]
                                        None
                                    None
                              <arg>
                              Nolabel
                                expression (src/infer.ml[360,12855+6]..[360,12855+11])
                                  Pexp_ident "lines" (src/infer.ml[360,12855+6]..[360,12855+11])
                            ]
                      None
                    expression (src/infer.ml[366,12891+2]..[366,12891+8])
                      Pexp_apply
                      expression (src/infer.ml[366,12891+2]..[366,12891+6])
                        Pexp_ident "exit" (src/infer.ml[366,12891+2]..[366,12891+6])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[366,12891+7]..[366,12891+8])
                            Pexp_constant PConst_int (0,None)
                      ]
    ]
  structure_item (src/infer.ml[373,13121+0]..[407,14193+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[373,13121+4]..[373,13121+14])
          Ppat_var "read_reply" (src/infer.ml[373,13121+4]..[373,13121+14])
        expression (src/infer.ml[373,13121+15]..[407,14193+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[373,13121+15]..[373,13121+32])
            Ppat_constraint
            pattern (src/infer.ml[373,13121+16]..[373,13121+22])
              Ppat_var "output" (src/infer.ml[373,13121+16]..[373,13121+22])
            core_type (src/infer.ml[373,13121+25]..[373,13121+31])
              Ptyp_constr "string" (src/infer.ml[373,13121+25]..[373,13121+31])
              []
          expression (src/infer.ml[373,13121+33]..[407,14193+32]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[373,13121+33]..[373,13121+40])
              Ppat_var "grammar" (src/infer.ml[373,13121+33]..[373,13121+40])
            expression (src/infer.ml[376,13204+2]..[407,14193+32])
              Pexp_sequence
              expression (src/infer.ml[376,13204+2]..[376,13204+16])
                Pexp_apply
                expression (src/infer.ml[376,13204+2]..[376,13204+14])
                  Pexp_ident "Error.enable" (src/infer.ml[376,13204+2]..[376,13204+14])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[376,13204+14]..[376,13204+16])
                      Pexp_construct "()" (src/infer.ml[376,13204+14]..[376,13204+16])
                      None
                ]
              expression (src/infer.ml[378,13223+2]..[407,14193+32])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[378,13223+6]..[378,13223+9])
                      Ppat_var "env" (src/infer.ml[378,13223+6]..[378,13223+9])
                    core_type (src/infer.ml[378,13223+12]..[378,13223+37])
                      Ptyp_constr "list" (src/infer.ml[378,13223+33]..[378,13223+37])
                      [
                        core_type (src/infer.ml[378,13223+13]..[378,13223+31])
                          Ptyp_tuple
                          [
                            core_type (src/infer.ml[378,13223+13]..[378,13223+19])
                              Ptyp_constr "string" (src/infer.ml[378,13223+13]..[378,13223+19])
                              []
                            core_type (src/infer.ml[378,13223+22]..[378,13223+25])
                              Ptyp_constr "int" (src/infer.ml[378,13223+22]..[378,13223+25])
                              []
                            core_type (src/infer.ml[378,13223+28]..[378,13223+31])
                              Ptyp_constr "int" (src/infer.ml[378,13223+28]..[378,13223+31])
                              []
                          ]
                      ]
                    expression (src/infer.ml[379,13263+4]..[379,13263+43])
                      Pexp_apply
                      expression (src/infer.ml[379,13263+4]..[379,13263+15])
                        Pexp_ident "Lexmli.main" (src/infer.ml[379,13263+4]..[379,13263+15])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[379,13263+16]..[379,13263+43])
                            Pexp_apply
                            expression (src/infer.ml[379,13263+17]..[379,13263+35])
                              Pexp_ident "Lexing.from_string" (src/infer.ml[379,13263+17]..[379,13263+35])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[379,13263+36]..[379,13263+42])
                                  Pexp_ident "output" (src/infer.ml[379,13263+36]..[379,13263+42])
                            ]
                      ]
                ]
                expression (src/infer.ml[382,13313+2]..[407,14193+32])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[382,13313+6]..[382,13313+9])
                        Ppat_var "env" (src/infer.ml[382,13313+6]..[382,13313+9])
                      core_type (src/infer.ml[382,13313+12]..[382,13313+37])
                        Ptyp_constr "list" (src/infer.ml[382,13313+33]..[382,13313+37])
                        [
                          core_type (src/infer.ml[382,13313+13]..[382,13313+31])
                            Ptyp_tuple
                            [
                              core_type (src/infer.ml[382,13313+13]..[382,13313+19])
                                Ptyp_constr "string" (src/infer.ml[382,13313+13]..[382,13313+19])
                                []
                              core_type (src/infer.ml[382,13313+22]..[382,13313+31])
                                Ptyp_constr "ocamltype" (src/infer.ml[382,13313+22]..[382,13313+31])
                                []
                            ]
                        ]
                      expression (src/infer.ml[383,13353+4]..[385,13486+9])
                        Pexp_apply
                        expression (src/infer.ml[383,13353+4]..[383,13353+12])
                          Pexp_ident "List.map" (src/infer.ml[383,13353+4]..[383,13353+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[383,13353+13]..[385,13486+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (src/infer.ml[383,13353+18]..[383,13353+46])
                                Ppat_tuple
                                [
                                  pattern (src/infer.ml[383,13353+19]..[383,13353+21])
                                    Ppat_var "id" (src/infer.ml[383,13353+19]..[383,13353+21])
                                  pattern (src/infer.ml[383,13353+23]..[383,13353+33])
                                    Ppat_var "openingofs" (src/infer.ml[383,13353+23]..[383,13353+33])
                                  pattern (src/infer.ml[383,13353+35]..[383,13353+45])
                                    Ppat_var "closingofs" (src/infer.ml[383,13353+35]..[383,13353+45])
                                ]
                              expression (src/infer.ml[384,13403+6]..[384,13403+82])
                                Pexp_tuple
                                [
                                  expression (src/infer.ml[384,13403+6]..[384,13403+15])
                                    Pexp_apply
                                    expression (src/infer.ml[384,13403+6]..[384,13403+12])
                                      Pexp_ident "decode" (src/infer.ml[384,13403+6]..[384,13403+12])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (src/infer.ml[384,13403+13]..[384,13403+15])
                                          Pexp_ident "id" (src/infer.ml[384,13403+13]..[384,13403+15])
                                    ]
                                  expression (src/infer.ml[384,13403+17]..[384,13403+82])
                                    Pexp_construct "Inferred" (src/infer.ml[384,13403+17]..[384,13403+25])
                                    Some
                                      expression (src/infer.ml[384,13403+26]..[384,13403+82])
                                        Pexp_apply
                                        expression (src/infer.ml[384,13403+27]..[384,13403+37])
                                          Pexp_ident "String.sub" (src/infer.ml[384,13403+27]..[384,13403+37])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[384,13403+38]..[384,13403+44])
                                              Pexp_ident "output" (src/infer.ml[384,13403+38]..[384,13403+44])
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[384,13403+45]..[384,13403+55])
                                              Pexp_ident "openingofs" (src/infer.ml[384,13403+45]..[384,13403+55])
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[384,13403+56]..[384,13403+81])
                                              Pexp_apply
                                              expression (src/infer.ml[384,13403+68]..[384,13403+69])
                                                Pexp_ident "-" (src/infer.ml[384,13403+68]..[384,13403+69])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[384,13403+57]..[384,13403+67])
                                                    Pexp_ident "closingofs" (src/infer.ml[384,13403+57]..[384,13403+67])
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[384,13403+70]..[384,13403+80])
                                                    Pexp_ident "openingofs" (src/infer.ml[384,13403+70]..[384,13403+80])
                                              ]
                                        ]
                                ]
                          <arg>
                          Nolabel
                            expression (src/infer.ml[385,13486+6]..[385,13486+9])
                              Pexp_ident "env" (src/infer.ml[385,13486+6]..[385,13486+9])
                        ]
                  ]
                  expression (src/infer.ml[390,13560+2]..[407,14193+32])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (src/infer.ml[390,13560+6]..[390,13560+11])
                          Ppat_var "types" (src/infer.ml[390,13560+6]..[390,13560+11])
                        expression (src/infer.ml[391,13574+4]..[404,14153+33])
                          Pexp_apply
                          expression (src/infer.ml[391,13574+4]..[391,13574+18])
                            Pexp_ident "StringMap.fold" (src/infer.ml[391,13574+4]..[391,13574+18])
                          [
                            <arg>
                            Nolabel
                              expression (src/infer.ml[391,13574+19]..[404,14153+5])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (src/infer.ml[391,13574+24]..[391,13574+30])
                                  Ppat_var "symbol" (src/infer.ml[391,13574+24]..[391,13574+30])
                                expression (src/infer.ml[391,13574+31]..[403,14110+42]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (src/infer.ml[391,13574+31]..[391,13574+32])
                                    Ppat_any
                                  expression (src/infer.ml[391,13574+33]..[403,14110+42]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (src/infer.ml[391,13574+33]..[391,13574+38])
                                      Ppat_var "types" (src/infer.ml[391,13574+33]..[391,13574+38])
                                    expression (src/infer.ml[392,13616+6]..[403,14110+42])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (src/infer.ml[392,13616+10]..[392,13616+19])
                                            Ppat_var "ocamltype" (src/infer.ml[392,13616+10]..[392,13616+19])
                                          expression (src/infer.ml[393,13638+8]..[399,13907+64])
                                            Pexp_try
                                            expression (src/infer.ml[394,13650+10]..[394,13650+48])
                                              Pexp_apply
                                              expression (src/infer.ml[394,13650+10]..[394,13650+20])
                                                Pexp_ident "List.assoc" (src/infer.ml[394,13650+10]..[394,13650+20])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[394,13650+21]..[394,13650+44])
                                                    Pexp_apply
                                                    expression (src/infer.ml[394,13650+22]..[394,13650+36])
                                                      Pexp_ident "Misc.normalize" (src/infer.ml[394,13650+22]..[394,13650+36])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (src/infer.ml[394,13650+37]..[394,13650+43])
                                                          Pexp_ident "symbol" (src/infer.ml[394,13650+37]..[394,13650+43])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (src/infer.ml[394,13650+45]..[394,13650+48])
                                                    Pexp_ident "env" (src/infer.ml[394,13650+45]..[394,13650+48])
                                              ]
                                            [
                                              <case>
                                                pattern (src/infer.ml[395,13699+13]..[395,13699+22])
                                                  Ppat_construct "Not_found" (src/infer.ml[395,13699+13]..[395,13699+22])
                                                  None
                                                expression (src/infer.ml[399,13907+10]..[399,13907+64])
                                                  Pexp_apply
                                                  expression (src/infer.ml[399,13907+10]..[399,13907+21])
                                                    Pexp_ident "Error.error" (src/infer.ml[399,13907+10]..[399,13907+21])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (src/infer.ml[399,13907+22]..[399,13907+24])
                                                        Pexp_construct "[]" (src/infer.ml[399,13907+22]..[399,13907+24])
                                                        None
                                                    <arg>
                                                    Nolabel
                                                      expression (src/infer.ml[399,13907+25]..[399,13907+57])
                                                        Pexp_constant PConst_string("found no inferred type for %s.",(src/infer.ml[399,13907+26]..[399,13907+56]),None)
                                                    <arg>
                                                    Nolabel
                                                      expression (src/infer.ml[399,13907+58]..[399,13907+64])
                                                        Pexp_ident "symbol" (src/infer.ml[399,13907+58]..[399,13907+64])
                                                  ]
                                            ]
                                      ]
                                      expression (src/infer.ml[403,14110+6]..[403,14110+42])
                                        Pexp_apply
                                        expression (src/infer.ml[403,14110+6]..[403,14110+19])
                                          Pexp_ident "StringMap.add" (src/infer.ml[403,14110+6]..[403,14110+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[403,14110+20]..[403,14110+26])
                                              Pexp_ident "symbol" (src/infer.ml[403,14110+20]..[403,14110+26])
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[403,14110+27]..[403,14110+36])
                                              Pexp_ident "ocamltype" (src/infer.ml[403,14110+27]..[403,14110+36])
                                          <arg>
                                          Nolabel
                                            expression (src/infer.ml[403,14110+37]..[403,14110+42])
                                              Pexp_ident "types" (src/infer.ml[403,14110+37]..[403,14110+42])
                                        ]
                            <arg>
                            Nolabel
                              expression (src/infer.ml[404,14153+6]..[404,14153+19])
                                Pexp_field
                                expression (src/infer.ml[404,14153+6]..[404,14153+13])
                                  Pexp_ident "grammar" (src/infer.ml[404,14153+6]..[404,14153+13])
                                "rules" (src/infer.ml[404,14153+14]..[404,14153+19])
                            <arg>
                            Nolabel
                              expression (src/infer.ml[404,14153+20]..[404,14153+33])
                                Pexp_field
                                expression (src/infer.ml[404,14153+20]..[404,14153+27])
                                  Pexp_ident "grammar" (src/infer.ml[404,14153+20]..[404,14153+27])
                                "types" (src/infer.ml[404,14153+28]..[404,14153+33])
                          ]
                    ]
                    expression (src/infer.ml[407,14193+2]..[407,14193+32])
                      Pexp_record
                      [
                        "types" (src/infer.ml[407,14193+17]..[407,14193+22])
                          expression (src/infer.ml[407,14193+25]..[407,14193+30])
                            Pexp_ident "types" (src/infer.ml[407,14193+25]..[407,14193+30])
                      ]
                      Some
                        expression (src/infer.ml[407,14193+4]..[407,14193+11])
                          Pexp_ident "grammar" (src/infer.ml[407,14193+4]..[407,14193+11])
    ]
  structure_item (src/infer.ml[413,14361+0]..[435,14893+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[413,14361+4]..[413,14361+9])
          Ppat_var "infer" (src/infer.ml[413,14361+4]..[413,14361+9])
        expression (src/infer.ml[413,14361+10]..[435,14893+27]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[413,14361+10]..[413,14361+17])
            Ppat_var "grammar" (src/infer.ml[413,14361+10]..[413,14361+17])
          expression (src/infer.ml[417,14434+2]..[435,14893+27])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/infer.ml[417,14434+6]..[417,14434+20])
                  Ppat_var "ocamlc_command" (src/infer.ml[417,14434+6]..[417,14434+20])
                expression (src/infer.ml[418,14457+4]..[418,14457+72])
                  Pexp_apply
                  expression (src/infer.ml[418,14457+4]..[418,14457+18])
                    Pexp_ident "Printf.sprintf" (src/infer.ml[418,14457+4]..[418,14457+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/infer.ml[418,14457+19]..[418,14457+32])
                        Pexp_constant PConst_string("%s -c -i %s",(src/infer.ml[418,14457+20]..[418,14457+31]),None)
                    <arg>
                    Nolabel
                      expression (src/infer.ml[418,14457+33]..[418,14457+48])
                        Pexp_ident "Settings.ocamlc" (src/infer.ml[418,14457+33]..[418,14457+48])
                    <arg>
                    Nolabel
                      expression (src/infer.ml[418,14457+49]..[418,14457+72])
                        Pexp_apply
                        expression (src/infer.ml[418,14457+50]..[418,14457+64])
                          Pexp_ident "Filename.quote" (src/infer.ml[418,14457+50]..[418,14457+64])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[418,14457+65]..[418,14457+71])
                              Pexp_ident "mlname" (src/infer.ml[418,14457+65]..[418,14457+71])
                        ]
                  ]
            ]
            expression (src/infer.ml[421,14536+2]..[435,14893+27])
              Pexp_let Nonrec
              [
                <def>
                  pattern (src/infer.ml[421,14536+6]..[421,14536+12])
                    Ppat_var "output" (src/infer.ml[421,14536+6]..[421,14536+12])
                  expression (src/infer.ml[422,14551+4]..[430,14828+14])
                    Pexp_sequence
                    expression (src/infer.ml[422,14551+4]..[422,14551+27])
                      Pexp_apply
                      expression (src/infer.ml[422,14551+4]..[422,14551+9])
                        Pexp_ident "write" (src/infer.ml[422,14551+4]..[422,14551+9])
                      [
                        <arg>
                        Nolabel
                          expression (src/infer.ml[422,14551+10]..[422,14551+17])
                            Pexp_ident "grammar" (src/infer.ml[422,14551+10]..[422,14551+17])
                        <arg>
                        Nolabel
                          expression (src/infer.ml[422,14551+18]..[422,14551+24])
                            Pexp_ident "mlname" (src/infer.ml[422,14551+18]..[422,14551+24])
                        <arg>
                        Nolabel
                          expression (src/infer.ml[422,14551+25]..[422,14551+27])
                            Pexp_construct "()" (src/infer.ml[422,14551+25]..[422,14551+27])
                            None
                      ]
                    expression (src/infer.ml[423,14580+4]..[430,14828+14])
                      Pexp_match
                      expression (src/infer.ml[423,14580+10]..[423,14580+34])
                        Pexp_apply
                        expression (src/infer.ml[423,14580+10]..[423,14580+19])
                          Pexp_ident "IO.invoke" (src/infer.ml[423,14580+10]..[423,14580+19])
                        [
                          <arg>
                          Nolabel
                            expression (src/infer.ml[423,14580+20]..[423,14580+34])
                              Pexp_ident "ocamlc_command" (src/infer.ml[423,14580+20]..[423,14580+34])
                        ]
                      [
                        <case>
                          pattern (src/infer.ml[424,14620+6]..[424,14620+17])
                            Ppat_construct "Some" (src/infer.ml[424,14620+6]..[424,14620+10])
                            Some
                              []
                              pattern (src/infer.ml[424,14620+11]..[424,14620+17])
                                Ppat_var "result" (src/infer.ml[424,14620+11]..[424,14620+17])
                          expression (src/infer.ml[425,14641+8]..[426,14668+14])
                            Pexp_sequence
                            expression (src/infer.ml[425,14641+8]..[425,14641+25])
                              Pexp_apply
                              expression (src/infer.ml[425,14641+8]..[425,14641+18])
                                Pexp_ident "Sys.remove" (src/infer.ml[425,14641+8]..[425,14641+18])
                              [
                                <arg>
                                Nolabel
                                  expression (src/infer.ml[425,14641+19]..[425,14641+25])
                                    Pexp_ident "mlname" (src/infer.ml[425,14641+19]..[425,14641+25])
                              ]
                            expression (src/infer.ml[426,14668+8]..[426,14668+14])
                              Pexp_ident "result" (src/infer.ml[426,14668+8]..[426,14668+14])
                        <case>
                          pattern (src/infer.ml[427,14683+6]..[427,14683+10])
                            Ppat_construct "None" (src/infer.ml[427,14683+6]..[427,14683+10])
                            None
                          expression (src/infer.ml[430,14828+8]..[430,14828+14])
                            Pexp_apply
                            expression (src/infer.ml[430,14828+8]..[430,14828+12])
                              Pexp_ident "exit" (src/infer.ml[430,14828+8]..[430,14828+12])
                            [
                              <arg>
                              Nolabel
                                expression (src/infer.ml[430,14828+13]..[430,14828+14])
                                  Pexp_constant PConst_int (1,None)
                            ]
                      ]
              ]
              expression (src/infer.ml[435,14893+2]..[435,14893+27])
                Pexp_apply
                expression (src/infer.ml[435,14893+2]..[435,14893+12])
                  Pexp_ident "read_reply" (src/infer.ml[435,14893+2]..[435,14893+12])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[435,14893+13]..[435,14893+19])
                      Pexp_ident "output" (src/infer.ml[435,14893+13]..[435,14893+19])
                  <arg>
                  Nolabel
                    expression (src/infer.ml[435,14893+20]..[435,14893+27])
                      Pexp_ident "grammar" (src/infer.ml[435,14893+20]..[435,14893+27])
                ]
    ]
  structure_item (src/infer.ml[439,15003+0]..[441,15067+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[439,15003+4]..[439,15003+15])
          Ppat_var "write_query" (src/infer.ml[439,15003+4]..[439,15003+15])
        expression (src/infer.ml[439,15003+16]..[441,15067+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[439,15003+16]..[439,15003+24])
            Ppat_var "filename" (src/infer.ml[439,15003+16]..[439,15003+24])
          expression (src/infer.ml[439,15003+25]..[441,15067+8]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[439,15003+25]..[439,15003+32])
              Ppat_var "grammar" (src/infer.ml[439,15003+25]..[439,15003+32])
            expression (src/infer.ml[440,15038+2]..[441,15067+8])
              Pexp_sequence
              expression (src/infer.ml[440,15038+2]..[440,15038+27])
                Pexp_apply
                expression (src/infer.ml[440,15038+2]..[440,15038+7])
                  Pexp_ident "write" (src/infer.ml[440,15038+2]..[440,15038+7])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[440,15038+8]..[440,15038+15])
                      Pexp_ident "grammar" (src/infer.ml[440,15038+8]..[440,15038+15])
                  <arg>
                  Nolabel
                    expression (src/infer.ml[440,15038+16]..[440,15038+24])
                      Pexp_ident "filename" (src/infer.ml[440,15038+16]..[440,15038+24])
                  <arg>
                  Nolabel
                    expression (src/infer.ml[440,15038+25]..[440,15038+27])
                      Pexp_construct "()" (src/infer.ml[440,15038+25]..[440,15038+27])
                      None
                ]
              expression (src/infer.ml[441,15067+2]..[441,15067+8])
                Pexp_apply
                expression (src/infer.ml[441,15067+2]..[441,15067+6])
                  Pexp_ident "exit" (src/infer.ml[441,15067+2]..[441,15067+6])
                [
                  <arg>
                  Nolabel
                    expression (src/infer.ml[441,15067+7]..[441,15067+8])
                      Pexp_constant PConst_int (0,None)
                ]
    ]
  structure_item (src/infer.ml[445,15158+0]..[446,15192+50])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[445,15158+4]..[445,15158+14])
          Ppat_var "read_reply" (src/infer.ml[445,15158+4]..[445,15158+14])
        expression (src/infer.ml[445,15158+15]..[446,15192+50]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/infer.ml[445,15158+15]..[445,15158+23])
            Ppat_var "filename" (src/infer.ml[445,15158+15]..[445,15158+23])
          expression (src/infer.ml[445,15158+24]..[446,15192+50]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/infer.ml[445,15158+24]..[445,15158+31])
              Ppat_var "grammar" (src/infer.ml[445,15158+24]..[445,15158+31])
            expression (src/infer.ml[446,15192+2]..[446,15192+50])
              Pexp_apply
              expression (src/infer.ml[446,15192+2]..[446,15192+12])
                Pexp_ident "read_reply" (src/infer.ml[446,15192+2]..[446,15192+12])
              [
                <arg>
                Nolabel
                  expression (src/infer.ml[446,15192+13]..[446,15192+42])
                    Pexp_apply
                    expression (src/infer.ml[446,15192+14]..[446,15192+32])
                      Pexp_ident "IO.read_whole_file" (src/infer.ml[446,15192+14]..[446,15192+32])
                    [
                      <arg>
                      Nolabel
                        expression (src/infer.ml[446,15192+33]..[446,15192+41])
                          Pexp_ident "filename" (src/infer.ml[446,15192+33]..[446,15192+41])
                    ]
                <arg>
                Nolabel
                  expression (src/infer.ml[446,15192+43]..[446,15192+50])
                    Pexp_ident "grammar" (src/infer.ml[446,15192+43]..[446,15192+50])
              ]
    ]
]

open Syntax
open Stretch
open BasicSyntax
open IL
open CodeBits
open TokenType
let ntvar symbol = TypVar (Printf.sprintf "tv_%s" (Misc.normalize symbol))
let encode symbol = Printf.sprintf "xv_%s" (Misc.normalize symbol)
let decode s =
  let n = String.length s in
  if not ((n >= 3) && ((String.sub s 0 3) = "xv_")) then Lexmli.fail ();
  String.sub s 3 (n - 3)
let base = Settings.base
let mlname = base ^ ".ml"
let mliname = base ^ ".mli"
let usertype grammar nt =
  try Some (TypTextual (StringMap.find nt grammar.types))
  with | Not_found -> None
let annotate_expr grammar e nt =
  let e = annotate e (ntvar nt) in
  let e =
    Option.fold (fun t -> fun e -> annotate e t) (usertype grammar nt) e in
  e
let annotate_pat grammar p nt =
  let p = PAnnot (p, (ntvar nt)) in
  let p =
    Option.fold (fun t -> fun p -> PAnnot (p, t)) (usertype grammar nt) p in
  p
let tokentype grammar symbol =
  let props = StringMap.find symbol grammar.tokens in
  match props.tk_ocamltype with
  | None -> tunit
  | Some ocamltype -> TypTextual ocamltype
let actiondef grammar symbol branch =
  let formals =
    List.fold_left
      (fun formals ->
         fun producer ->
           let symbol = producer_symbol producer
           and lid = producer_identifier_located producer in
           let id = Positions.value lid in
           let (startp, endp, starto, endo, loc) =
             ((Printf.sprintf "_startpos_%s_" id),
               (Printf.sprintf "_endpos_%s_" id),
               (Printf.sprintf "_startofs_%s_" id),
               (Printf.sprintf "_endofs_%s_" id),
               (Printf.sprintf "_loc_%s_" id)) in
           let pid = pvarlocated lid in
           let pid =
             try PAnnot (pid, (tokentype grammar symbol))
             with | Not_found -> annotate_pat grammar pid symbol in
           pid :: (PAnnot ((PVar startp), tposition)) ::
             (PAnnot ((PVar endp), tposition)) ::
             (PAnnot ((PVar starto), tint)) :: (PAnnot ((PVar endo), tint))
             :: (PAnnot ((PVar loc), tlocation)) :: formals) []
      branch.producers in
  let formals = (PAnnot ((PVar "_eRR"), texn)) ::
    (PAnnot ((PVar "_startpos"), tposition)) ::
    (PAnnot ((PVar "_endpos"), tposition)) ::
    (PAnnot ((PVar "_endpos__0_"), tposition)) ::
    (PAnnot ((PVar "_symbolstartpos"), tposition)) ::
    (PAnnot ((PVar "_startofs"), tint)) :: (PAnnot ((PVar "_endofs"), tint))
    :: (PAnnot ((PVar "_endofs__0_"), tint)) ::
    (PAnnot ((PVar "_symbolstartofs"), tint)) ::
    (PAnnot ((PVar "_sloc"), tlocation)) ::
    (PAnnot ((PVar "_loc"), tlocation)) :: formals in
  let body = annotate_expr grammar (Action.to_il_expr branch.action) symbol in
  match formals with | [] -> body | _ -> EFun (formals, body)
let program grammar =
  let (bindings1, bindings2) =
    StringMap.fold
      (fun symbol ->
         fun rule ->
           fun (bindings1, bindings2) ->
             List.fold_left
               (fun (bindings1, bindings2) ->
                  fun branch ->
                    if Action.is_standard branch.action
                    then
                      (((PWildcard, (actiondef grammar symbol branch)) ::
                        bindings1), bindings2)
                    else
                      (bindings1,
                        ((PWildcard, (actiondef grammar symbol branch)) ::
                        bindings2))) (bindings1, bindings2) rule.branches)
      grammar.rules ([], []) in
  let (ps, ts) =
    StringMap.fold
      (fun nt ->
         fun _ ->
           fun (ps, ts) ->
             (((PVar (encode (Misc.normalize nt))) :: ps), ((ntvar nt) ::
               ts))) grammar.rules ([], []) in
  let def =
    {
      valpublic = true;
      valpat = (PTuple ps);
      valval =
        (ELet ((bindings1 @ bindings2), (annotate bottom (TypTuple ts))))
    } in
  let begindef =
    {
      valpublic = true;
      valpat = (PVar "menhir_begin_marker");
      valval = (EIntConst 0)
    }
  and enddef =
    {
      valpublic = true;
      valpat = (PVar "menhir_end_marker");
      valval = (EIntConst 0)
    } in
  [SIFunctor
     ((grammar.parameters),
       ((interface_to_structure (tokentypedef grammar)) @
          [SIStretch (grammar.preludes);
          SIValDefs (false, [begindef; def; enddef]);
          SIStretch (grammar.postludes)]))]
let write grammar filename () =
  let ml = open_out filename in
  let module P =
    (Printer.Make)(struct let f = ml
                          let locate_stretches = Some filename end) in
    P.program (program grammar); close_out ml
type entry = (string * string)
type line = (entry * entry list)
let depend postprocess grammar =
  let ocamldep_command =
    Printf.sprintf "%s %s %s" Settings.ocamldep (Filename.quote mlname)
      (Filename.quote mliname) in
  let output : string =
    Option.project
      (IO.moving_away mlname
         (fun () ->
            IO.moving_away mliname
              (fun () ->
                 IO.with_file mlname (write grammar mlname)
                   (fun () ->
                      IO.with_file mliname (Interface.write grammar)
                        (fun () -> IO.invoke ocamldep_command))))) in
  print_string output;
  if postprocess
  then
    (let lexbuf = Lexing.from_string output in
     let lines : line list =
       try Lexdep.main lexbuf
       with | Lexdep.Error msg -> Error.error [] "%s" (msg ^ output) in
     List.iter
       (fun ((_, target_filename), dependencies) ->
          if Filename.check_suffix target_filename ".cmo"
          then
            let dependencies =
              List.filter (fun (basename, _) -> basename <> base)
                dependencies in
            (if (List.length dependencies) > 0
             then
               (Printf.printf "%s.ml %s.mli:" base base;
                List.iter
                  (fun (_basename, filename) -> Printf.printf " %s" filename)
                  dependencies;
                Printf.printf "\n%!"))) lines);
  exit 0
let read_reply (output : string) grammar =
  Error.enable ();
  (let env : (string * int * int) list =
     Lexmli.main (Lexing.from_string output) in
   let env : (string * ocamltype) list =
     List.map
       (fun (id, openingofs, closingofs) ->
          ((decode id),
            (Inferred
               (String.sub output openingofs (closingofs - openingofs)))))
       env in
   let types =
     StringMap.fold
       (fun symbol ->
          fun _ ->
            fun types ->
              let ocamltype =
                try List.assoc (Misc.normalize symbol) env
                with
                | Not_found ->
                    Error.error [] "found no inferred type for %s." symbol in
              StringMap.add symbol ocamltype types) grammar.rules
       grammar.types in
   { grammar with types })
let infer grammar =
  let ocamlc_command =
    Printf.sprintf "%s -c -i %s" Settings.ocamlc (Filename.quote mlname) in
  let output =
    write grammar mlname ();
    (match IO.invoke ocamlc_command with
     | Some result -> (Sys.remove mlname; result)
     | None -> exit 1) in
  read_reply output grammar
let write_query filename grammar = write grammar filename (); exit 0
let read_reply filename grammar =
  read_reply (IO.read_whole_file filename) grammar
[
  structure_item (src/infer.ml[14,995+0]..src/infer.ml[14,995+11])
    Tstr_open Fresh
    module_expr (src/infer.ml[14,995+5]..src/infer.ml[14,995+11])
      Tmod_ident "Dune__exe!.Syntax"
  structure_item (src/infer.ml[15,1007+0]..src/infer.ml[15,1007+12])
    Tstr_open Fresh
    module_expr (src/infer.ml[15,1007+5]..src/infer.ml[15,1007+12])
      Tmod_ident "Dune__exe!.Stretch"
  structure_item (src/infer.ml[16,1020+0]..src/infer.ml[16,1020+16])
    Tstr_open Fresh
    module_expr (src/infer.ml[16,1020+5]..src/infer.ml[16,1020+16])
      Tmod_ident "Dune__exe!.BasicSyntax"
  structure_item (src/infer.ml[17,1037+0]..src/infer.ml[17,1037+7])
    Tstr_open Fresh
    module_expr (src/infer.ml[17,1037+5]..src/infer.ml[17,1037+7])
      Tmod_ident "Dune__exe!.IL"
  structure_item (src/infer.ml[18,1045+0]..src/infer.ml[18,1045+13])
    Tstr_open Fresh
    module_expr (src/infer.ml[18,1045+5]..src/infer.ml[18,1045+13])
      Tmod_ident "Dune__exe!.CodeBits"
  structure_item (src/infer.ml[19,1059+0]..src/infer.ml[19,1059+14])
    Tstr_open Fresh
    module_expr (src/infer.ml[19,1059+5]..src/infer.ml[19,1059+14])
      Tmod_ident "Dune__exe!.TokenType"
  structure_item (src/infer.ml[28,1372+0]..src/infer.ml[29,1391+57])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[28,1372+4]..src/infer.ml[28,1372+9])
          Tpat_var "ntvar/535"
        expression (src/infer.ml[28,1372+10]..src/infer.ml[29,1391+57]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[28,1372+10]..src/infer.ml[28,1372+16])
                Tpat_var "symbol/537"
              expression (src/infer.ml[29,1391+2]..src/infer.ml[29,1391+57])
                Texp_construct "TypVar"
                [
                  expression (src/infer.ml[29,1391+9]..src/infer.ml[29,1391+57])
                    Texp_apply
                    expression (src/infer.ml[29,1391+10]..src/infer.ml[29,1391+24])
                      Texp_ident "Stdlib!.Printf.sprintf"
                    [
                      <arg>
                        Nolabel
                        expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32])
                          Texp_construct "CamlinternalFormatBasics.Format"
                          [
                            expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                              Texp_construct "CamlinternalFormatBasics.String_literal"
                              [
                                expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                                  Texp_constant Const_string("tv_",(src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost,None)
                                expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                                  Texp_construct "CamlinternalFormatBasics.String"
                                  [
                                    expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                      []
                                    expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                                      Texp_construct "CamlinternalFormatBasics.End_of_format"
                                      []
                                  ]
                              ]
                            expression (src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost
                              Texp_constant Const_string("tv_%s",(src/infer.ml[29,1391+25]..src/infer.ml[29,1391+32]) ghost,None)
                          ]
                      <arg>
                        Nolabel
                        expression (src/infer.ml[29,1391+33]..src/infer.ml[29,1391+56])
                          Texp_apply
                          expression (src/infer.ml[29,1391+34]..src/infer.ml[29,1391+48])
                            Texp_ident "Dune__exe!.Misc.normalize"
                          [
                            <arg>
                              Nolabel
                              expression (src/infer.ml[29,1391+49]..src/infer.ml[29,1391+55])
                                Texp_ident "symbol/537"
                          ]
                    ]
                ]
          ]
    ]
  structure_item (src/infer.ml[35,1640+0]..src/infer.ml[36,1660+48])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[35,1640+4]..src/infer.ml[35,1640+10])
          Tpat_var "encode/610"
        expression (src/infer.ml[35,1640+11]..src/infer.ml[36,1660+48]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[35,1640+11]..src/infer.ml[35,1640+17])
                Tpat_var "symbol/612"
              expression (src/infer.ml[36,1660+2]..src/infer.ml[36,1660+48])
                Texp_apply
                expression (src/infer.ml[36,1660+2]..src/infer.ml[36,1660+16])
                  Texp_ident "Stdlib!.Printf.sprintf"
                [
                  <arg>
                    Nolabel
                    expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24])
                      Texp_construct "CamlinternalFormatBasics.Format"
                      [
                        expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                          Texp_construct "CamlinternalFormatBasics.String_literal"
                          [
                            expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                              Texp_constant Const_string("xv_",(src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost,None)
                            expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                              Texp_construct "CamlinternalFormatBasics.String"
                              [
                                expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                  []
                                expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                  []
                              ]
                          ]
                        expression (src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost
                          Texp_constant Const_string("xv_%s",(src/infer.ml[36,1660+17]..src/infer.ml[36,1660+24]) ghost,None)
                      ]
                  <arg>
                    Nolabel
                    expression (src/infer.ml[36,1660+25]..src/infer.ml[36,1660+48])
                      Texp_apply
                      expression (src/infer.ml[36,1660+26]..src/infer.ml[36,1660+40])
                        Texp_ident "Dune__exe!.Misc.normalize"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[36,1660+41]..src/infer.ml[36,1660+47])
                            Texp_ident "symbol/612"
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[38,1710+0]..src/infer.ml[42,1824+24])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[38,1710+4]..src/infer.ml[38,1710+10])
          Tpat_var "decode/613"
        expression (src/infer.ml[38,1710+11]..src/infer.ml[42,1824+24]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[38,1710+11]..src/infer.ml[38,1710+12])
                Tpat_var "s/615"
              expression (src/infer.ml[39,1725+2]..src/infer.ml[42,1824+24])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[39,1725+6]..src/infer.ml[39,1725+7])
                      Tpat_var "n/616"
                    expression (src/infer.ml[39,1725+10]..src/infer.ml[39,1725+25])
                      Texp_apply
                      expression (src/infer.ml[39,1725+10]..src/infer.ml[39,1725+23])
                        Texp_ident "Stdlib!.String.length"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[39,1725+24]..src/infer.ml[39,1725+25])
                            Texp_ident "s/615"
                      ]
                ]
                expression (src/infer.ml[40,1754+2]..src/infer.ml[42,1824+24])
                  Texp_sequence
                  expression (src/infer.ml[40,1754+2]..src/infer.ml[41,1805+17])
                    Texp_ifthenelse
                    expression (src/infer.ml[40,1754+5]..src/infer.ml[40,1754+45])
                      Texp_apply
                      expression (src/infer.ml[40,1754+5]..src/infer.ml[40,1754+8])
                        Texp_ident "Stdlib!.not"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[40,1754+9]..src/infer.ml[40,1754+45])
                            Texp_apply
                            expression (src/infer.ml[40,1754+17]..src/infer.ml[40,1754+19])
                              Texp_ident "Stdlib!.&&"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[40,1754+10]..src/infer.ml[40,1754+16])
                                  Texp_apply
                                  expression (src/infer.ml[40,1754+12]..src/infer.ml[40,1754+14])
                                    Texp_ident "Stdlib!.>="
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[40,1754+10]..src/infer.ml[40,1754+11])
                                        Texp_ident "n/616"
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[40,1754+15]..src/infer.ml[40,1754+16])
                                        Texp_constant Const_int 3
                                  ]
                              <arg>
                                Nolabel
                                expression (src/infer.ml[40,1754+20]..src/infer.ml[40,1754+44])
                                  Texp_apply
                                  expression (src/infer.ml[40,1754+37]..src/infer.ml[40,1754+38])
                                    Texp_ident "Stdlib!.="
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[40,1754+20]..src/infer.ml[40,1754+36])
                                        Texp_apply
                                        expression (src/infer.ml[40,1754+20]..src/infer.ml[40,1754+30])
                                          Texp_ident "Stdlib!.String.sub"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[40,1754+31]..src/infer.ml[40,1754+32])
                                              Texp_ident "s/615"
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[40,1754+33]..src/infer.ml[40,1754+34])
                                              Texp_constant Const_int 0
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[40,1754+35]..src/infer.ml[40,1754+36])
                                              Texp_constant Const_int 3
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[40,1754+39]..src/infer.ml[40,1754+44])
                                        Texp_constant Const_string("xv_",(src/infer.ml[40,1754+40]..src/infer.ml[40,1754+43]),None)
                                  ]
                            ]
                      ]
                    expression (src/infer.ml[41,1805+4]..src/infer.ml[41,1805+17])
                      Texp_apply
                      expression (src/infer.ml[41,1805+4]..src/infer.ml[41,1805+15])
                        Texp_ident "Dune__exe!.Lexmli.fail"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[41,1805+15]..src/infer.ml[41,1805+17])
                            Texp_construct "()"
                            []
                      ]
                    None
                  expression (src/infer.ml[42,1824+2]..src/infer.ml[42,1824+24])
                    Texp_apply
                    expression (src/infer.ml[42,1824+2]..src/infer.ml[42,1824+12])
                      Texp_ident "Stdlib!.String.sub"
                    [
                      <arg>
                        Nolabel
                        expression (src/infer.ml[42,1824+13]..src/infer.ml[42,1824+14])
                          Texp_ident "s/615"
                      <arg>
                        Nolabel
                        expression (src/infer.ml[42,1824+15]..src/infer.ml[42,1824+16])
                          Texp_constant Const_int 3
                      <arg>
                        Nolabel
                        expression (src/infer.ml[42,1824+17]..src/infer.ml[42,1824+24])
                          Texp_apply
                          expression (src/infer.ml[42,1824+20]..src/infer.ml[42,1824+21])
                            Texp_ident "Stdlib!.-"
                          [
                            <arg>
                              Nolabel
                              expression (src/infer.ml[42,1824+18]..src/infer.ml[42,1824+19])
                                Texp_ident "n/616"
                            <arg>
                              Nolabel
                              expression (src/infer.ml[42,1824+22]..src/infer.ml[42,1824+23])
                                Texp_constant Const_int 3
                          ]
                    ]
          ]
    ]
  structure_item (src/infer.ml[46,1889+0]..src/infer.ml[47,1900+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[46,1889+4]..src/infer.ml[46,1889+8])
          Tpat_var "base/694"
        expression (src/infer.ml[47,1900+2]..src/infer.ml[47,1900+15])
          Texp_ident "Dune__exe!.Settings.base"
    ]
  structure_item (src/infer.ml[49,1917+0]..src/infer.ml[50,1930+14])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[49,1917+4]..src/infer.ml[49,1917+10])
          Tpat_var "mlname/755"
        expression (src/infer.ml[50,1930+2]..src/infer.ml[50,1930+14])
          Texp_apply
          expression (src/infer.ml[50,1930+7]..src/infer.ml[50,1930+8])
            Texp_ident "Stdlib!.^"
          [
            <arg>
              Nolabel
              expression (src/infer.ml[50,1930+2]..src/infer.ml[50,1930+6])
                Texp_ident "base/694"
            <arg>
              Nolabel
              expression (src/infer.ml[50,1930+9]..src/infer.ml[50,1930+14])
                Texp_constant Const_string(".ml",(src/infer.ml[50,1930+10]..src/infer.ml[50,1930+13]),None)
          ]
    ]
  structure_item (src/infer.ml[52,1946+0]..src/infer.ml[53,1960+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[52,1946+4]..src/infer.ml[52,1946+11])
          Tpat_var "mliname/756"
        expression (src/infer.ml[53,1960+2]..src/infer.ml[53,1960+15])
          Texp_apply
          expression (src/infer.ml[53,1960+7]..src/infer.ml[53,1960+8])
            Texp_ident "Stdlib!.^"
          [
            <arg>
              Nolabel
              expression (src/infer.ml[53,1960+2]..src/infer.ml[53,1960+6])
                Texp_ident "base/694"
            <arg>
              Nolabel
              expression (src/infer.ml[53,1960+9]..src/infer.ml[53,1960+15])
                Texp_constant Const_string(".mli",(src/infer.ml[53,1960+10]..src/infer.ml[53,1960+14]),None)
          ]
    ]
  structure_item (src/infer.ml[89,3848+0]..src/infer.ml[93,3959+9])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[89,3848+4]..src/infer.ml[89,3848+12])
          Tpat_var "usertype/757"
        expression (src/infer.ml[89,3848+13]..src/infer.ml[93,3959+9]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[89,3848+13]..src/infer.ml[89,3848+20])
                Tpat_var "grammar/759"
              expression (src/infer.ml[89,3848+21]..src/infer.ml[93,3959+9]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[89,3848+21]..src/infer.ml[89,3848+23])
                      Tpat_var "nt/760"
                    expression (src/infer.ml[90,3874+3]..src/infer.ml[93,3959+9])
                      Texp_try
                      expression (src/infer.ml[91,3881+5]..src/infer.ml[91,3881+56])
                        Texp_construct "Some"
                        [
                          expression (src/infer.ml[91,3881+10]..src/infer.ml[91,3881+56])
                            Texp_construct "TypTextual"
                            [
                              expression (src/infer.ml[91,3881+22]..src/infer.ml[91,3881+55])
                                Texp_apply
                                expression (src/infer.ml[91,3881+23]..src/infer.ml[91,3881+37])
                                  Texp_ident "Dune__exe!.StringMap.find"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[91,3881+38]..src/infer.ml[91,3881+40])
                                      Texp_ident "nt/760"
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[91,3881+41]..src/infer.ml[91,3881+54])
                                      Texp_field
                                      expression (src/infer.ml[91,3881+41]..src/infer.ml[91,3881+48])
                                        Texp_ident "grammar/759"
                                      "types"
                                ]
                            ]
                        ]
                      [
                        <case>
                          pattern (src/infer.ml[92,3938+8]..src/infer.ml[92,3938+17])
                            Tpat_construct "Not_found"
                            []
                            None
                          expression (src/infer.ml[93,3959+5]..src/infer.ml[93,3959+9])
                            Texp_construct "None"
                            []
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[100,4242+0]..src/infer.ml[103,4385+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[100,4242+4]..src/infer.ml[100,4242+17])
          Tpat_var "annotate_expr/859"
        expression (src/infer.ml[100,4242+18]..src/infer.ml[103,4385+3]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[100,4242+18]..src/infer.ml[100,4242+25])
                Tpat_var "grammar/861"
              expression (src/infer.ml[100,4242+26]..src/infer.ml[103,4385+3]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[100,4242+26]..src/infer.ml[100,4242+27])
                      Tpat_var "e/862"
                    expression (src/infer.ml[100,4242+28]..src/infer.ml[103,4385+3]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/infer.ml[100,4242+28]..src/infer.ml[100,4242+30])
                            Tpat_var "nt/863"
                          expression (src/infer.ml[101,4275+2]..src/infer.ml[103,4385+3])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/infer.ml[101,4275+6]..src/infer.ml[101,4275+7])
                                  Tpat_var "e/864"
                                expression (src/infer.ml[101,4275+10]..src/infer.ml[101,4275+31])
                                  Texp_apply
                                  expression (src/infer.ml[101,4275+10]..src/infer.ml[101,4275+18])
                                    Texp_ident "Dune__exe!.CodeBits.annotate"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[101,4275+19]..src/infer.ml[101,4275+20])
                                        Texp_ident "e/862"
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[101,4275+21]..src/infer.ml[101,4275+31])
                                        Texp_apply
                                        expression (src/infer.ml[101,4275+22]..src/infer.ml[101,4275+27])
                                          Texp_ident "ntvar/535"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[101,4275+28]..src/infer.ml[101,4275+30])
                                              Texp_ident "nt/863"
                                        ]
                                  ]
                            ]
                            expression (src/infer.ml[102,4310+2]..src/infer.ml[103,4385+3])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/infer.ml[102,4310+6]..src/infer.ml[102,4310+7])
                                    Tpat_var "e/892"
                                  expression (src/infer.ml[102,4310+10]..src/infer.ml[102,4310+71])
                                    Texp_apply
                                    expression (src/infer.ml[102,4310+10]..src/infer.ml[102,4310+21])
                                      Texp_ident "Dune__exe!.Option.fold"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[102,4310+22]..src/infer.ml[102,4310+47])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/infer.ml[102,4310+27]..src/infer.ml[102,4310+28])
                                                Tpat_var "t/904"
                                              expression (src/infer.ml[102,4310+29]..src/infer.ml[102,4310+46]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/infer.ml[102,4310+29]..src/infer.ml[102,4310+30])
                                                      Tpat_var "e/905"
                                                    expression (src/infer.ml[102,4310+34]..src/infer.ml[102,4310+46])
                                                      Texp_apply
                                                      expression (src/infer.ml[102,4310+34]..src/infer.ml[102,4310+42])
                                                        Texp_ident "Dune__exe!.CodeBits.annotate"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/infer.ml[102,4310+43]..src/infer.ml[102,4310+44])
                                                            Texp_ident "e/905"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/infer.ml[102,4310+45]..src/infer.ml[102,4310+46])
                                                            Texp_ident "t/904"
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[102,4310+48]..src/infer.ml[102,4310+69])
                                          Texp_apply
                                          expression (src/infer.ml[102,4310+49]..src/infer.ml[102,4310+57])
                                            Texp_ident "usertype/757"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/infer.ml[102,4310+58]..src/infer.ml[102,4310+65])
                                                Texp_ident "grammar/861"
                                            <arg>
                                              Nolabel
                                              expression (src/infer.ml[102,4310+66]..src/infer.ml[102,4310+68])
                                                Texp_ident "nt/863"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[102,4310+70]..src/infer.ml[102,4310+71])
                                          Texp_ident "e/864"
                                    ]
                              ]
                              expression (src/infer.ml[103,4385+2]..src/infer.ml[103,4385+3])
                                Texp_ident "e/892"
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[105,4390+0]..src/infer.ml[108,4532+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[105,4390+4]..src/infer.ml[105,4390+16])
          Tpat_var "annotate_pat/926"
        expression (src/infer.ml[105,4390+17]..src/infer.ml[108,4532+3]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[105,4390+17]..src/infer.ml[105,4390+24])
                Tpat_var "grammar/928"
              expression (src/infer.ml[105,4390+25]..src/infer.ml[108,4532+3]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[105,4390+25]..src/infer.ml[105,4390+26])
                      Tpat_var "p/929"
                    expression (src/infer.ml[105,4390+27]..src/infer.ml[108,4532+3]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/infer.ml[105,4390+27]..src/infer.ml[105,4390+29])
                            Tpat_var "nt/930"
                          expression (src/infer.ml[106,4422+2]..src/infer.ml[108,4532+3])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/infer.ml[106,4422+6]..src/infer.ml[106,4422+7])
                                  Tpat_var "p/931"
                                expression (src/infer.ml[106,4422+10]..src/infer.ml[106,4422+30])
                                  Texp_construct "PAnnot"
                                  [
                                    expression (src/infer.ml[106,4422+18]..src/infer.ml[106,4422+19])
                                      Texp_ident "p/929"
                                    expression (src/infer.ml[106,4422+21]..src/infer.ml[106,4422+29])
                                      Texp_apply
                                      expression (src/infer.ml[106,4422+21]..src/infer.ml[106,4422+26])
                                        Texp_ident "ntvar/535"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[106,4422+27]..src/infer.ml[106,4422+29])
                                            Texp_ident "nt/930"
                                      ]
                                  ]
                            ]
                            expression (src/infer.ml[107,4456+2]..src/infer.ml[108,4532+3])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/infer.ml[107,4456+6]..src/infer.ml[107,4456+7])
                                    Tpat_var "p/932"
                                  expression (src/infer.ml[107,4456+10]..src/infer.ml[107,4456+72])
                                    Texp_apply
                                    expression (src/infer.ml[107,4456+10]..src/infer.ml[107,4456+21])
                                      Texp_ident "Dune__exe!.Option.fold"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[107,4456+22]..src/infer.ml[107,4456+48])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/infer.ml[107,4456+27]..src/infer.ml[107,4456+28])
                                                Tpat_var "t/933"
                                              expression (src/infer.ml[107,4456+29]..src/infer.ml[107,4456+47]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (src/infer.ml[107,4456+29]..src/infer.ml[107,4456+30])
                                                      Tpat_var "p/934"
                                                    expression (src/infer.ml[107,4456+34]..src/infer.ml[107,4456+47])
                                                      Texp_construct "PAnnot"
                                                      [
                                                        expression (src/infer.ml[107,4456+42]..src/infer.ml[107,4456+43])
                                                          Texp_ident "p/934"
                                                        expression (src/infer.ml[107,4456+45]..src/infer.ml[107,4456+46])
                                                          Texp_ident "t/933"
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[107,4456+49]..src/infer.ml[107,4456+70])
                                          Texp_apply
                                          expression (src/infer.ml[107,4456+50]..src/infer.ml[107,4456+58])
                                            Texp_ident "usertype/757"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/infer.ml[107,4456+59]..src/infer.ml[107,4456+66])
                                                Texp_ident "grammar/928"
                                            <arg>
                                              Nolabel
                                              expression (src/infer.ml[107,4456+67]..src/infer.ml[107,4456+69])
                                                Texp_ident "nt/930"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[107,4456+71]..src/infer.ml[107,4456+72])
                                          Texp_ident "p/931"
                                    ]
                              ]
                              expression (src/infer.ml[108,4532+2]..src/infer.ml[108,4532+3])
                                Texp_ident "p/932"
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[117,4806+0]..src/infer.ml[123,4969+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[117,4806+4]..src/infer.ml[117,4806+13])
          Tpat_var "tokentype/935"
        expression (src/infer.ml[117,4806+14]..src/infer.ml[123,4969+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[117,4806+14]..src/infer.ml[117,4806+21])
                Tpat_var "grammar/937"
              expression (src/infer.ml[117,4806+22]..src/infer.ml[123,4969+26]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[117,4806+22]..src/infer.ml[117,4806+28])
                      Tpat_var "symbol/938"
                    expression (src/infer.ml[118,4837+2]..src/infer.ml[123,4969+26])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/infer.ml[118,4837+6]..src/infer.ml[118,4837+11])
                            Tpat_var "props/939"
                          expression (src/infer.ml[118,4837+14]..src/infer.ml[118,4837+50])
                            Texp_apply
                            expression (src/infer.ml[118,4837+14]..src/infer.ml[118,4837+28])
                              Texp_ident "Dune__exe!.StringMap.find"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[118,4837+29]..src/infer.ml[118,4837+35])
                                  Texp_ident "symbol/938"
                              <arg>
                                Nolabel
                                expression (src/infer.ml[118,4837+36]..src/infer.ml[118,4837+50])
                                  Texp_field
                                  expression (src/infer.ml[118,4837+36]..src/infer.ml[118,4837+43])
                                    Texp_ident "grammar/937"
                                  "tokens"
                            ]
                      ]
                      expression (src/infer.ml[119,4891+2]..src/infer.ml[123,4969+26])
                        Texp_match
                        expression (src/infer.ml[119,4891+8]..src/infer.ml[119,4891+26])
                          Texp_field
                          expression (src/infer.ml[119,4891+8]..src/infer.ml[119,4891+13])
                            Texp_ident "props/939"
                          "tk_ocamltype"
                        [
                          <case>
                            pattern (src/infer.ml[120,4923+4]..src/infer.ml[120,4923+8])
                              Tpat_value
                              pattern (src/infer.ml[120,4923+4]..src/infer.ml[120,4923+8])
                                Tpat_construct "None"
                                []
                                None
                            expression (src/infer.ml[121,4935+6]..src/infer.ml[121,4935+11])
                              Texp_ident "Dune__exe!.CodeBits.tunit"
                          <case>
                            pattern (src/infer.ml[122,4947+4]..src/infer.ml[122,4947+18])
                              Tpat_value
                              pattern (src/infer.ml[122,4947+4]..src/infer.ml[122,4947+18])
                                Tpat_construct "Some"
                                [
                                  pattern (src/infer.ml[122,4947+9]..src/infer.ml[122,4947+18])
                                    Tpat_var "ocamltype/975"
                                ]
                                None
                            expression (src/infer.ml[123,4969+6]..src/infer.ml[123,4969+26])
                              Texp_construct "TypTextual"
                              [
                                expression (src/infer.ml[123,4969+17]..src/infer.ml[123,4969+26])
                                  Texp_ident "ocamltype/975"
                              ]
                        ]
                ]
          ]
    ]
  structure_item (src/infer.ml[132,5327+0]..src/infer.ml[205,7646+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[132,5327+4]..src/infer.ml[132,5327+13])
          Tpat_var "actiondef/976"
        expression (src/infer.ml[132,5327+14]..src/infer.ml[205,7646+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[132,5327+14]..src/infer.ml[132,5327+21])
                Tpat_var "grammar/978"
              expression (src/infer.ml[132,5327+22]..src/infer.ml[205,7646+26]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[132,5327+22]..src/infer.ml[132,5327+28])
                      Tpat_var "symbol/979"
                    expression (src/infer.ml[132,5327+29]..src/infer.ml[205,7646+26]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/infer.ml[132,5327+29]..src/infer.ml[132,5327+35])
                            Tpat_var "branch/980"
                          expression (src/infer.ml[137,5489+2]..src/infer.ml[205,7646+26])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/infer.ml[137,5489+6]..src/infer.ml[137,5489+13])
                                  Tpat_var "formals/981"
                                expression (src/infer.ml[138,5505+4]..src/infer.ml[171,6788+25])
                                  Texp_apply
                                  expression (src/infer.ml[138,5505+4]..src/infer.ml[138,5505+18])
                                    Texp_ident "Stdlib!.List.fold_left"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[138,5505+19]..src/infer.ml[171,6788+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/infer.ml[138,5505+24]..src/infer.ml[138,5505+31])
                                              Tpat_var "formals/1048"
                                            expression (src/infer.ml[138,5505+32]..src/infer.ml[170,6774+13]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/infer.ml[138,5505+32]..src/infer.ml[138,5505+40])
                                                    Tpat_var "producer/1049"
                                                  expression (src/infer.ml[139,5549+6]..src/infer.ml[170,6774+13])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (src/infer.ml[139,5549+10]..src/infer.ml[139,5549+16])
                                                          Tpat_var "symbol/1050"
                                                        expression (src/infer.ml[139,5549+19]..src/infer.ml[139,5549+43])
                                                          Texp_apply
                                                          expression (src/infer.ml[139,5549+19]..src/infer.ml[139,5549+34])
                                                            Texp_ident "Dune__exe!.BasicSyntax.producer_symbol"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[139,5549+35]..src/infer.ml[139,5549+43])
                                                                Texp_ident "producer/1049"
                                                          ]
                                                      <def>
                                                        pattern (src/infer.ml[140,5593+10]..src/infer.ml[140,5593+13])
                                                          Tpat_var "lid/1051"
                                                        expression (src/infer.ml[140,5593+16]..src/infer.ml[140,5593+52])
                                                          Texp_apply
                                                          expression (src/infer.ml[140,5593+16]..src/infer.ml[140,5593+43])
                                                            Texp_ident "Dune__exe!.BasicSyntax.producer_identifier_located"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[140,5593+44]..src/infer.ml[140,5593+52])
                                                                Texp_ident "producer/1049"
                                                          ]
                                                    ]
                                                    expression (src/infer.ml[141,5649+6]..src/infer.ml[170,6774+13])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (src/infer.ml[141,5649+10]..src/infer.ml[141,5649+12])
                                                            Tpat_var "id/1122"
                                                          expression (src/infer.ml[141,5649+15]..src/infer.ml[141,5649+34])
                                                            Texp_apply
                                                            expression (src/infer.ml[141,5649+15]..src/infer.ml[141,5649+30])
                                                              Texp_ident "Dune__exe!.Positions.value"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[141,5649+31]..src/infer.ml[141,5649+34])
                                                                  Texp_ident "lid/1051"
                                                            ]
                                                      ]
                                                      expression (src/infer.ml[142,5687+6]..src/infer.ml[170,6774+13])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (src/infer.ml[142,5687+10]..src/infer.ml[142,5687+41])
                                                              Tpat_tuple
                                                              [
                                                                pattern (src/infer.ml[142,5687+10]..src/infer.ml[142,5687+16])
                                                                  Tpat_var "startp/1123"
                                                                pattern (src/infer.ml[142,5687+18]..src/infer.ml[142,5687+22])
                                                                  Tpat_var "endp/1124"
                                                                pattern (src/infer.ml[142,5687+24]..src/infer.ml[142,5687+30])
                                                                  Tpat_var "starto/1125"
                                                                pattern (src/infer.ml[142,5687+32]..src/infer.ml[142,5687+36])
                                                                  Tpat_var "endo/1126"
                                                                pattern (src/infer.ml[142,5687+38]..src/infer.ml[142,5687+41])
                                                                  Tpat_var "loc/1127"
                                                              ]
                                                            expression (src/infer.ml[143,5731+8]..src/infer.ml[147,5899+36])
                                                              Texp_tuple
                                                              [
                                                                expression (src/infer.ml[143,5731+8]..src/infer.ml[143,5731+41])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[143,5731+8]..src/infer.ml[143,5731+22])
                                                                    Texp_ident "Stdlib!.Printf.sprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                Texp_constant Const_string("_startpos_",(src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost,None)
                                                                              expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String"
                                                                                [
                                                                                  expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                    []
                                                                                  expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                    [
                                                                                      expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                        Texp_constant Const_char 5f
                                                                                      expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost
                                                                            Texp_constant Const_string("_startpos_%s_",(src/infer.ml[143,5731+23]..src/infer.ml[143,5731+38]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[143,5731+39]..src/infer.ml[143,5731+41])
                                                                        Texp_ident "id/1122"
                                                                  ]
                                                                expression (src/infer.ml[144,5774+8]..src/infer.ml[144,5774+39])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[144,5774+8]..src/infer.ml[144,5774+22])
                                                                    Texp_ident "Stdlib!.Printf.sprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                Texp_constant Const_string("_endpos_",(src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost,None)
                                                                              expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String"
                                                                                [
                                                                                  expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                    []
                                                                                  expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                    [
                                                                                      expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                        Texp_constant Const_char 5f
                                                                                      expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost
                                                                            Texp_constant Const_string("_endpos_%s_",(src/infer.ml[144,5774+23]..src/infer.ml[144,5774+36]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[144,5774+37]..src/infer.ml[144,5774+39])
                                                                        Texp_ident "id/1122"
                                                                  ]
                                                                expression (src/infer.ml[145,5815+8]..src/infer.ml[145,5815+41])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[145,5815+8]..src/infer.ml[145,5815+22])
                                                                    Texp_ident "Stdlib!.Printf.sprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                Texp_constant Const_string("_startofs_",(src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost,None)
                                                                              expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String"
                                                                                [
                                                                                  expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                    []
                                                                                  expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                    [
                                                                                      expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                        Texp_constant Const_char 5f
                                                                                      expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost
                                                                            Texp_constant Const_string("_startofs_%s_",(src/infer.ml[145,5815+23]..src/infer.ml[145,5815+38]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[145,5815+39]..src/infer.ml[145,5815+41])
                                                                        Texp_ident "id/1122"
                                                                  ]
                                                                expression (src/infer.ml[146,5858+8]..src/infer.ml[146,5858+39])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[146,5858+8]..src/infer.ml[146,5858+22])
                                                                    Texp_ident "Stdlib!.Printf.sprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                Texp_constant Const_string("_endofs_",(src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost,None)
                                                                              expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String"
                                                                                [
                                                                                  expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                    []
                                                                                  expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                    [
                                                                                      expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                        Texp_constant Const_char 5f
                                                                                      expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost
                                                                            Texp_constant Const_string("_endofs_%s_",(src/infer.ml[146,5858+23]..src/infer.ml[146,5858+36]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[146,5858+37]..src/infer.ml[146,5858+39])
                                                                        Texp_ident "id/1122"
                                                                  ]
                                                                expression (src/infer.ml[147,5899+8]..src/infer.ml[147,5899+36])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[147,5899+8]..src/infer.ml[147,5899+22])
                                                                    Texp_ident "Stdlib!.Printf.sprintf"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33])
                                                                        Texp_construct "CamlinternalFormatBasics.Format"
                                                                        [
                                                                          expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                            [
                                                                              expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                Texp_constant Const_string("_loc_",(src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost,None)
                                                                              expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String"
                                                                                [
                                                                                  expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                    []
                                                                                  expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                    [
                                                                                      expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                        Texp_constant Const_char 5f
                                                                                      expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost
                                                                            Texp_constant Const_string("_loc_%s_",(src/infer.ml[147,5899+23]..src/infer.ml[147,5899+33]) ghost,None)
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[147,5899+34]..src/infer.ml[147,5899+36])
                                                                        Texp_ident "id/1122"
                                                                  ]
                                                              ]
                                                        ]
                                                        expression (src/infer.ml[149,5945+6]..src/infer.ml[170,6774+13])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/infer.ml[149,5945+10]..src/infer.ml[149,5945+13])
                                                                Tpat_var "pid/1128"
                                                              expression (src/infer.ml[155,6345+8]..src/infer.ml[155,6345+23])
                                                                Texp_apply
                                                                expression (src/infer.ml[155,6345+8]..src/infer.ml[155,6345+19])
                                                                  Texp_ident "Dune__exe!.CodeBits.pvarlocated"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (src/infer.ml[155,6345+20]..src/infer.ml[155,6345+23])
                                                                      Texp_ident "lid/1051"
                                                                ]
                                                          ]
                                                          expression (src/infer.ml[157,6378+6]..src/infer.ml[170,6774+13])
                                                            Texp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (src/infer.ml[157,6378+10]..src/infer.ml[157,6378+13])
                                                                  Tpat_var "pid/1129"
                                                                expression (src/infer.ml[158,6394+8]..src/infer.ml[162,6522+41])
                                                                  Texp_try
                                                                  expression (src/infer.ml[159,6406+10]..src/infer.ml[159,6406+48])
                                                                    Texp_construct "PAnnot"
                                                                    [
                                                                      expression (src/infer.ml[159,6406+18]..src/infer.ml[159,6406+21])
                                                                        Texp_ident "pid/1128"
                                                                      expression (src/infer.ml[159,6406+23]..src/infer.ml[159,6406+47])
                                                                        Texp_apply
                                                                        expression (src/infer.ml[159,6406+23]..src/infer.ml[159,6406+32])
                                                                          Texp_ident "tokentype/935"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[159,6406+33]..src/infer.ml[159,6406+40])
                                                                              Texp_ident "grammar/978"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[159,6406+41]..src/infer.ml[159,6406+47])
                                                                              Texp_ident "symbol/1050"
                                                                        ]
                                                                    ]
                                                                  [
                                                                    <case>
                                                                      pattern (src/infer.ml[160,6455+13]..src/infer.ml[160,6455+22])
                                                                        Tpat_construct "Not_found"
                                                                        []
                                                                        None
                                                                      expression (src/infer.ml[162,6522+10]..src/infer.ml[162,6522+41])
                                                                        Texp_apply
                                                                        expression (src/infer.ml[162,6522+10]..src/infer.ml[162,6522+22])
                                                                          Texp_ident "annotate_pat/926"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[162,6522+23]..src/infer.ml[162,6522+30])
                                                                              Texp_ident "grammar/978"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[162,6522+31]..src/infer.ml[162,6522+34])
                                                                              Texp_ident "pid/1128"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[162,6522+35]..src/infer.ml[162,6522+41])
                                                                              Texp_ident "symbol/1050"
                                                                        ]
                                                                  ]
                                                            ]
                                                            expression (src/infer.ml[164,6573+6]..src/infer.ml[170,6774+13])
                                                              Texp_construct "::"
                                                              [
                                                                expression (src/infer.ml[164,6573+6]..src/infer.ml[164,6573+9])
                                                                  Texp_ident "pid/1129"
                                                                expression (src/infer.ml[165,6586+6]..src/infer.ml[170,6774+13])
                                                                  Texp_construct "::"
                                                                  [
                                                                    expression (src/infer.ml[165,6586+6]..src/infer.ml[165,6586+37])
                                                                      Texp_construct "PAnnot"
                                                                      [
                                                                        expression (src/infer.ml[165,6586+14]..src/infer.ml[165,6586+25])
                                                                          Texp_construct "PVar"
                                                                          [
                                                                            expression (src/infer.ml[165,6586+19]..src/infer.ml[165,6586+25])
                                                                              Texp_ident "startp/1123"
                                                                          ]
                                                                        expression (src/infer.ml[165,6586+27]..src/infer.ml[165,6586+36])
                                                                          Texp_ident "Dune__exe!.CodeBits.tposition"
                                                                      ]
                                                                    expression (src/infer.ml[166,6627+6]..src/infer.ml[170,6774+13])
                                                                      Texp_construct "::"
                                                                      [
                                                                        expression (src/infer.ml[166,6627+6]..src/infer.ml[166,6627+35])
                                                                          Texp_construct "PAnnot"
                                                                          [
                                                                            expression (src/infer.ml[166,6627+14]..src/infer.ml[166,6627+23])
                                                                              Texp_construct "PVar"
                                                                              [
                                                                                expression (src/infer.ml[166,6627+19]..src/infer.ml[166,6627+23])
                                                                                  Texp_ident "endp/1124"
                                                                              ]
                                                                            expression (src/infer.ml[166,6627+25]..src/infer.ml[166,6627+34])
                                                                              Texp_ident "Dune__exe!.CodeBits.tposition"
                                                                          ]
                                                                        expression (src/infer.ml[167,6666+6]..src/infer.ml[170,6774+13])
                                                                          Texp_construct "::"
                                                                          [
                                                                            expression (src/infer.ml[167,6666+6]..src/infer.ml[167,6666+32])
                                                                              Texp_construct "PAnnot"
                                                                              [
                                                                                expression (src/infer.ml[167,6666+14]..src/infer.ml[167,6666+25])
                                                                                  Texp_construct "PVar"
                                                                                  [
                                                                                    expression (src/infer.ml[167,6666+19]..src/infer.ml[167,6666+25])
                                                                                      Texp_ident "starto/1125"
                                                                                  ]
                                                                                expression (src/infer.ml[167,6666+27]..src/infer.ml[167,6666+31])
                                                                                  Texp_ident "Dune__exe!.CodeBits.tint"
                                                                              ]
                                                                            expression (src/infer.ml[168,6702+6]..src/infer.ml[170,6774+13])
                                                                              Texp_construct "::"
                                                                              [
                                                                                expression (src/infer.ml[168,6702+6]..src/infer.ml[168,6702+30])
                                                                                  Texp_construct "PAnnot"
                                                                                  [
                                                                                    expression (src/infer.ml[168,6702+14]..src/infer.ml[168,6702+23])
                                                                                      Texp_construct "PVar"
                                                                                      [
                                                                                        expression (src/infer.ml[168,6702+19]..src/infer.ml[168,6702+23])
                                                                                          Texp_ident "endo/1126"
                                                                                      ]
                                                                                    expression (src/infer.ml[168,6702+25]..src/infer.ml[168,6702+29])
                                                                                      Texp_ident "Dune__exe!.CodeBits.tint"
                                                                                  ]
                                                                                expression (src/infer.ml[169,6736+6]..src/infer.ml[170,6774+13])
                                                                                  Texp_construct "::"
                                                                                  [
                                                                                    expression (src/infer.ml[169,6736+6]..src/infer.ml[169,6736+34])
                                                                                      Texp_construct "PAnnot"
                                                                                      [
                                                                                        expression (src/infer.ml[169,6736+14]..src/infer.ml[169,6736+22])
                                                                                          Texp_construct "PVar"
                                                                                          [
                                                                                            expression (src/infer.ml[169,6736+19]..src/infer.ml[169,6736+22])
                                                                                              Texp_ident "loc/1127"
                                                                                          ]
                                                                                        expression (src/infer.ml[169,6736+24]..src/infer.ml[169,6736+33])
                                                                                          Texp_ident "Dune__exe!.CodeBits.tlocation"
                                                                                      ]
                                                                                    expression (src/infer.ml[170,6774+6]..src/infer.ml[170,6774+13])
                                                                                      Texp_ident "formals/1048"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[171,6788+6]..src/infer.ml[171,6788+8])
                                        Texp_construct "[]"
                                        []
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[171,6788+9]..src/infer.ml[171,6788+25])
                                        Texp_field
                                        expression (src/infer.ml[171,6788+9]..src/infer.ml[171,6788+15])
                                          Texp_ident "branch/980"
                                        "producers"
                                  ]
                            ]
                            expression (src/infer.ml[177,6909+2]..src/infer.ml[205,7646+26])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (src/infer.ml[177,6909+6]..src/infer.ml[177,6909+13])
                                    Tpat_var "formals/1130"
                                  expression (src/infer.ml[178,6925+4]..src/infer.ml[189,7382+11])
                                    Texp_construct "::"
                                    [
                                      expression (src/infer.ml[178,6925+4]..src/infer.ml[178,6925+30])
                                        Texp_construct "PAnnot"
                                        [
                                          expression (src/infer.ml[178,6925+12]..src/infer.ml[178,6925+23])
                                            Texp_construct "PVar"
                                            [
                                              expression (src/infer.ml[178,6925+17]..src/infer.ml[178,6925+23])
                                                Texp_constant Const_string("_eRR",(src/infer.ml[178,6925+18]..src/infer.ml[178,6925+22]),None)
                                            ]
                                          expression (src/infer.ml[178,6925+25]..src/infer.ml[178,6925+29])
                                            Texp_ident "Dune__exe!.CodeBits.texn"
                                        ]
                                      expression (src/infer.ml[179,6959+4]..src/infer.ml[189,7382+11])
                                        Texp_construct "::"
                                        [
                                          expression (src/infer.ml[179,6959+4]..src/infer.ml[179,6959+40])
                                            Texp_construct "PAnnot"
                                            [
                                              expression (src/infer.ml[179,6959+12]..src/infer.ml[179,6959+28])
                                                Texp_construct "PVar"
                                                [
                                                  expression (src/infer.ml[179,6959+17]..src/infer.ml[179,6959+28])
                                                    Texp_constant Const_string("_startpos",(src/infer.ml[179,6959+18]..src/infer.ml[179,6959+27]),None)
                                                ]
                                              expression (src/infer.ml[179,6959+30]..src/infer.ml[179,6959+39])
                                                Texp_ident "Dune__exe!.CodeBits.tposition"
                                            ]
                                          expression (src/infer.ml[180,7003+4]..src/infer.ml[189,7382+11])
                                            Texp_construct "::"
                                            [
                                              expression (src/infer.ml[180,7003+4]..src/infer.ml[180,7003+38])
                                                Texp_construct "PAnnot"
                                                [
                                                  expression (src/infer.ml[180,7003+12]..src/infer.ml[180,7003+26])
                                                    Texp_construct "PVar"
                                                    [
                                                      expression (src/infer.ml[180,7003+17]..src/infer.ml[180,7003+26])
                                                        Texp_constant Const_string("_endpos",(src/infer.ml[180,7003+18]..src/infer.ml[180,7003+25]),None)
                                                    ]
                                                  expression (src/infer.ml[180,7003+28]..src/infer.ml[180,7003+37])
                                                    Texp_ident "Dune__exe!.CodeBits.tposition"
                                                ]
                                              expression (src/infer.ml[181,7045+4]..src/infer.ml[189,7382+11])
                                                Texp_construct "::"
                                                [
                                                  expression (src/infer.ml[181,7045+4]..src/infer.ml[181,7045+42])
                                                    Texp_construct "PAnnot"
                                                    [
                                                      expression (src/infer.ml[181,7045+12]..src/infer.ml[181,7045+30])
                                                        Texp_construct "PVar"
                                                        [
                                                          expression (src/infer.ml[181,7045+17]..src/infer.ml[181,7045+30])
                                                            Texp_constant Const_string("_endpos__0_",(src/infer.ml[181,7045+18]..src/infer.ml[181,7045+29]),None)
                                                        ]
                                                      expression (src/infer.ml[181,7045+32]..src/infer.ml[181,7045+41])
                                                        Texp_ident "Dune__exe!.CodeBits.tposition"
                                                    ]
                                                  expression (src/infer.ml[182,7091+4]..src/infer.ml[189,7382+11])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/infer.ml[182,7091+4]..src/infer.ml[182,7091+46])
                                                        Texp_construct "PAnnot"
                                                        [
                                                          expression (src/infer.ml[182,7091+12]..src/infer.ml[182,7091+34])
                                                            Texp_construct "PVar"
                                                            [
                                                              expression (src/infer.ml[182,7091+17]..src/infer.ml[182,7091+34])
                                                                Texp_constant Const_string("_symbolstartpos",(src/infer.ml[182,7091+18]..src/infer.ml[182,7091+33]),None)
                                                            ]
                                                          expression (src/infer.ml[182,7091+36]..src/infer.ml[182,7091+45])
                                                            Texp_ident "Dune__exe!.CodeBits.tposition"
                                                        ]
                                                      expression (src/infer.ml[183,7141+4]..src/infer.ml[189,7382+11])
                                                        Texp_construct "::"
                                                        [
                                                          expression (src/infer.ml[183,7141+4]..src/infer.ml[183,7141+35])
                                                            Texp_construct "PAnnot"
                                                            [
                                                              expression (src/infer.ml[183,7141+12]..src/infer.ml[183,7141+28])
                                                                Texp_construct "PVar"
                                                                [
                                                                  expression (src/infer.ml[183,7141+17]..src/infer.ml[183,7141+28])
                                                                    Texp_constant Const_string("_startofs",(src/infer.ml[183,7141+18]..src/infer.ml[183,7141+27]),None)
                                                                ]
                                                              expression (src/infer.ml[183,7141+30]..src/infer.ml[183,7141+34])
                                                                Texp_ident "Dune__exe!.CodeBits.tint"
                                                            ]
                                                          expression (src/infer.ml[184,7180+4]..src/infer.ml[189,7382+11])
                                                            Texp_construct "::"
                                                            [
                                                              expression (src/infer.ml[184,7180+4]..src/infer.ml[184,7180+33])
                                                                Texp_construct "PAnnot"
                                                                [
                                                                  expression (src/infer.ml[184,7180+12]..src/infer.ml[184,7180+26])
                                                                    Texp_construct "PVar"
                                                                    [
                                                                      expression (src/infer.ml[184,7180+17]..src/infer.ml[184,7180+26])
                                                                        Texp_constant Const_string("_endofs",(src/infer.ml[184,7180+18]..src/infer.ml[184,7180+25]),None)
                                                                    ]
                                                                  expression (src/infer.ml[184,7180+28]..src/infer.ml[184,7180+32])
                                                                    Texp_ident "Dune__exe!.CodeBits.tint"
                                                                ]
                                                              expression (src/infer.ml[185,7217+4]..src/infer.ml[189,7382+11])
                                                                Texp_construct "::"
                                                                [
                                                                  expression (src/infer.ml[185,7217+4]..src/infer.ml[185,7217+37])
                                                                    Texp_construct "PAnnot"
                                                                    [
                                                                      expression (src/infer.ml[185,7217+12]..src/infer.ml[185,7217+30])
                                                                        Texp_construct "PVar"
                                                                        [
                                                                          expression (src/infer.ml[185,7217+17]..src/infer.ml[185,7217+30])
                                                                            Texp_constant Const_string("_endofs__0_",(src/infer.ml[185,7217+18]..src/infer.ml[185,7217+29]),None)
                                                                        ]
                                                                      expression (src/infer.ml[185,7217+32]..src/infer.ml[185,7217+36])
                                                                        Texp_ident "Dune__exe!.CodeBits.tint"
                                                                    ]
                                                                  expression (src/infer.ml[186,7258+4]..src/infer.ml[189,7382+11])
                                                                    Texp_construct "::"
                                                                    [
                                                                      expression (src/infer.ml[186,7258+4]..src/infer.ml[186,7258+41])
                                                                        Texp_construct "PAnnot"
                                                                        [
                                                                          expression (src/infer.ml[186,7258+12]..src/infer.ml[186,7258+34])
                                                                            Texp_construct "PVar"
                                                                            [
                                                                              expression (src/infer.ml[186,7258+17]..src/infer.ml[186,7258+34])
                                                                                Texp_constant Const_string("_symbolstartofs",(src/infer.ml[186,7258+18]..src/infer.ml[186,7258+33]),None)
                                                                            ]
                                                                          expression (src/infer.ml[186,7258+36]..src/infer.ml[186,7258+40])
                                                                            Texp_ident "Dune__exe!.CodeBits.tint"
                                                                        ]
                                                                      expression (src/infer.ml[187,7303+4]..src/infer.ml[189,7382+11])
                                                                        Texp_construct "::"
                                                                        [
                                                                          expression (src/infer.ml[187,7303+4]..src/infer.ml[187,7303+36])
                                                                            Texp_construct "PAnnot"
                                                                            [
                                                                              expression (src/infer.ml[187,7303+12]..src/infer.ml[187,7303+24])
                                                                                Texp_construct "PVar"
                                                                                [
                                                                                  expression (src/infer.ml[187,7303+17]..src/infer.ml[187,7303+24])
                                                                                    Texp_constant Const_string("_sloc",(src/infer.ml[187,7303+18]..src/infer.ml[187,7303+23]),None)
                                                                                ]
                                                                              expression (src/infer.ml[187,7303+26]..src/infer.ml[187,7303+35])
                                                                                Texp_ident "Dune__exe!.CodeBits.tlocation"
                                                                            ]
                                                                          expression (src/infer.ml[188,7343+4]..src/infer.ml[189,7382+11])
                                                                            Texp_construct "::"
                                                                            [
                                                                              expression (src/infer.ml[188,7343+4]..src/infer.ml[188,7343+35])
                                                                                Texp_construct "PAnnot"
                                                                                [
                                                                                  expression (src/infer.ml[188,7343+12]..src/infer.ml[188,7343+23])
                                                                                    Texp_construct "PVar"
                                                                                    [
                                                                                      expression (src/infer.ml[188,7343+17]..src/infer.ml[188,7343+23])
                                                                                        Texp_constant Const_string("_loc",(src/infer.ml[188,7343+18]..src/infer.ml[188,7343+22]),None)
                                                                                    ]
                                                                                  expression (src/infer.ml[188,7343+25]..src/infer.ml[188,7343+34])
                                                                                    Texp_ident "Dune__exe!.CodeBits.tlocation"
                                                                                ]
                                                                              expression (src/infer.ml[189,7382+4]..src/infer.ml[189,7382+11])
                                                                                Texp_ident "formals/981"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                              ]
                              expression (src/infer.ml[195,7497+2]..src/infer.ml[205,7646+26])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/infer.ml[195,7497+6]..src/infer.ml[195,7497+10])
                                      Tpat_var "body/1131"
                                    expression (src/infer.ml[196,7510+4]..src/infer.ml[198,7576+12])
                                      Texp_apply
                                      expression (src/infer.ml[196,7510+4]..src/infer.ml[196,7510+17])
                                        Texp_ident "annotate_expr/859"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[196,7510+18]..src/infer.ml[196,7510+25])
                                            Texp_ident "grammar/978"
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[197,7536+6]..src/infer.ml[197,7536+39])
                                            Texp_apply
                                            expression (src/infer.ml[197,7536+7]..src/infer.ml[197,7536+24])
                                              Texp_ident "Dune__exe!.Action.to_il_expr"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/infer.ml[197,7536+25]..src/infer.ml[197,7536+38])
                                                  Texp_field
                                                  expression (src/infer.ml[197,7536+25]..src/infer.ml[197,7536+31])
                                                    Texp_ident "branch/980"
                                                  "action"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[198,7576+6]..src/infer.ml[198,7576+12])
                                            Texp_ident "symbol/979"
                                      ]
                                ]
                                expression (src/infer.ml[201,7595+2]..src/infer.ml[205,7646+26])
                                  Texp_match
                                  expression (src/infer.ml[201,7595+8]..src/infer.ml[201,7595+15])
                                    Texp_ident "formals/1130"
                                  [
                                    <case>
                                      pattern (src/infer.ml[202,7616+4]..src/infer.ml[202,7616+6])
                                        Tpat_value
                                        pattern (src/infer.ml[202,7616+4]..src/infer.ml[202,7616+6])
                                          Tpat_construct "[]"
                                          []
                                          None
                                      expression (src/infer.ml[203,7626+6]..src/infer.ml[203,7626+10])
                                        Texp_ident "body/1131"
                                    <case>
                                      pattern (src/infer.ml[204,7637+4]..src/infer.ml[204,7637+5])
                                        Tpat_value
                                        pattern (src/infer.ml[204,7637+4]..src/infer.ml[204,7637+5])
                                          Tpat_any
                                      expression (src/infer.ml[205,7646+6]..src/infer.ml[205,7646+26])
                                        Texp_construct "EFun"
                                        [
                                          expression (src/infer.ml[205,7646+12]..src/infer.ml[205,7646+19])
                                            Texp_ident "formals/1130"
                                          expression (src/infer.ml[205,7646+21]..src/infer.ml[205,7646+25])
                                            Texp_ident "body/1131"
                                        ]
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[209,7736+0]..src/infer.ml[268,9713+6])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[209,7736+4]..src/infer.ml[209,7736+11])
          Tpat_var "program/1168"
        expression (src/infer.ml[209,7736+12]..src/infer.ml[268,9713+6]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[209,7736+12]..src/infer.ml[209,7736+19])
                Tpat_var "grammar/1170"
              expression (src/infer.ml[215,7958+2]..src/infer.ml[268,9713+6])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[215,7958+6]..src/infer.ml[215,7958+26])
                      Tpat_tuple
                      [
                        pattern (src/infer.ml[215,7958+6]..src/infer.ml[215,7958+15])
                          Tpat_var "bindings1/1171"
                        pattern (src/infer.ml[215,7958+17]..src/infer.ml[215,7958+26])
                          Tpat_var "bindings2/1172"
                      ]
                    expression (src/infer.ml[216,7987+4]..src/infer.ml[223,8373+28])
                      Texp_apply
                      expression (src/infer.ml[216,7987+4]..src/infer.ml[216,7987+18])
                        Texp_ident "Dune__exe!.StringMap.fold"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[216,7987+19]..src/infer.ml[223,8373+5])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/infer.ml[216,7987+24]..src/infer.ml[216,7987+30])
                                  Tpat_var "symbol/1173"
                                expression (src/infer.ml[216,7987+31]..src/infer.ml[222,8328+44]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/infer.ml[216,7987+31]..src/infer.ml[216,7987+35])
                                        Tpat_var "rule/1174"
                                      expression (src/infer.ml[216,7987+36]..src/infer.ml[222,8328+44]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/infer.ml[216,7987+36]..src/infer.ml[216,7987+58])
                                              Tpat_tuple
                                              [
                                                pattern (src/infer.ml[216,7987+37]..src/infer.ml[216,7987+46])
                                                  Tpat_var "bindings1/1175"
                                                pattern (src/infer.ml[216,7987+48]..src/infer.ml[216,7987+57])
                                                  Tpat_var "bindings2/1176"
                                              ]
                                            expression (src/infer.ml[217,8049+6]..src/infer.ml[222,8328+44])
                                              Texp_apply
                                              expression (src/infer.ml[217,8049+6]..src/infer.ml[217,8049+20])
                                                Texp_ident "Stdlib!.List.fold_left"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[217,8049+21]..src/infer.ml[222,8328+7])
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/infer.ml[217,8049+26]..src/infer.ml[217,8049+48])
                                                          Tpat_tuple
                                                          [
                                                            pattern (src/infer.ml[217,8049+27]..src/infer.ml[217,8049+36])
                                                              Tpat_var "bindings1/1177"
                                                            pattern (src/infer.ml[217,8049+38]..src/infer.ml[217,8049+47])
                                                              Tpat_var "bindings2/1178"
                                                          ]
                                                        expression (src/infer.ml[217,8049+49]..src/infer.ml[221,8249+78]) ghost
                                                          Texp_function
                                                          Nolabel
                                                          [
                                                            <case>
                                                              pattern (src/infer.ml[217,8049+49]..src/infer.ml[217,8049+55])
                                                                Tpat_var "branch/1179"
                                                              expression (src/infer.ml[218,8108+8]..src/infer.ml[221,8249+78])
                                                                Texp_ifthenelse
                                                                expression (src/infer.ml[218,8108+11]..src/infer.ml[218,8108+43])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[218,8108+11]..src/infer.ml[218,8108+29])
                                                                    Texp_ident "Dune__exe!.Action.is_standard"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[218,8108+30]..src/infer.ml[218,8108+43])
                                                                        Texp_field
                                                                        expression (src/infer.ml[218,8108+30]..src/infer.ml[218,8108+36])
                                                                          Texp_ident "branch/1179"
                                                                        "action"
                                                                  ]
                                                                expression (src/infer.ml[219,8157+10]..src/infer.ml[219,8157+78])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (src/infer.ml[219,8157+10]..src/infer.ml[219,8157+67])
                                                                      Texp_construct "::"
                                                                      [
                                                                        expression (src/infer.ml[219,8157+10]..src/infer.ml[219,8157+54])
                                                                          Texp_tuple
                                                                          [
                                                                            expression (src/infer.ml[219,8157+11]..src/infer.ml[219,8157+20])
                                                                              Texp_construct "PWildcard"
                                                                              []
                                                                            expression (src/infer.ml[219,8157+22]..src/infer.ml[219,8157+53])
                                                                              Texp_apply
                                                                              expression (src/infer.ml[219,8157+22]..src/infer.ml[219,8157+31])
                                                                                Texp_ident "actiondef/976"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/infer.ml[219,8157+32]..src/infer.ml[219,8157+39])
                                                                                    Texp_ident "grammar/1170"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/infer.ml[219,8157+40]..src/infer.ml[219,8157+46])
                                                                                    Texp_ident "symbol/1173"
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/infer.ml[219,8157+47]..src/infer.ml[219,8157+53])
                                                                                    Texp_ident "branch/1179"
                                                                              ]
                                                                          ]
                                                                        expression (src/infer.ml[219,8157+58]..src/infer.ml[219,8157+67])
                                                                          Texp_ident "bindings1/1177"
                                                                      ]
                                                                    expression (src/infer.ml[219,8157+69]..src/infer.ml[219,8157+78])
                                                                      Texp_ident "bindings2/1178"
                                                                  ]
                                                                Some
                                                                  expression (src/infer.ml[221,8249+10]..src/infer.ml[221,8249+78])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (src/infer.ml[221,8249+10]..src/infer.ml[221,8249+19])
                                                                        Texp_ident "bindings1/1177"
                                                                      expression (src/infer.ml[221,8249+21]..src/infer.ml[221,8249+78])
                                                                        Texp_construct "::"
                                                                        [
                                                                          expression (src/infer.ml[221,8249+21]..src/infer.ml[221,8249+65])
                                                                            Texp_tuple
                                                                            [
                                                                              expression (src/infer.ml[221,8249+22]..src/infer.ml[221,8249+31])
                                                                                Texp_construct "PWildcard"
                                                                                []
                                                                              expression (src/infer.ml[221,8249+33]..src/infer.ml[221,8249+64])
                                                                                Texp_apply
                                                                                expression (src/infer.ml[221,8249+33]..src/infer.ml[221,8249+42])
                                                                                  Texp_ident "actiondef/976"
                                                                                [
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/infer.ml[221,8249+43]..src/infer.ml[221,8249+50])
                                                                                      Texp_ident "grammar/1170"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/infer.ml[221,8249+51]..src/infer.ml[221,8249+57])
                                                                                      Texp_ident "symbol/1173"
                                                                                  <arg>
                                                                                    Nolabel
                                                                                    expression (src/infer.ml[221,8249+58]..src/infer.ml[221,8249+64])
                                                                                      Texp_ident "branch/1179"
                                                                                ]
                                                                            ]
                                                                          expression (src/infer.ml[221,8249+69]..src/infer.ml[221,8249+78])
                                                                            Texp_ident "bindings2/1178"
                                                                        ]
                                                                    ]
                                                          ]
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[222,8328+8]..src/infer.ml[222,8328+30])
                                                    Texp_tuple
                                                    [
                                                      expression (src/infer.ml[222,8328+9]..src/infer.ml[222,8328+18])
                                                        Texp_ident "bindings1/1175"
                                                      expression (src/infer.ml[222,8328+20]..src/infer.ml[222,8328+29])
                                                        Texp_ident "bindings2/1176"
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[222,8328+31]..src/infer.ml[222,8328+44])
                                                    Texp_field
                                                    expression (src/infer.ml[222,8328+31]..src/infer.ml[222,8328+35])
                                                      Texp_ident "rule/1174"
                                                    "branches"
                                              ]
                                        ]
                                  ]
                            ]
                        <arg>
                          Nolabel
                          expression (src/infer.ml[223,8373+6]..src/infer.ml[223,8373+19])
                            Texp_field
                            expression (src/infer.ml[223,8373+6]..src/infer.ml[223,8373+13])
                              Texp_ident "grammar/1170"
                            "rules"
                        <arg>
                          Nolabel
                          expression (src/infer.ml[223,8373+20]..src/infer.ml[223,8373+28])
                            Texp_tuple
                            [
                              expression (src/infer.ml[223,8373+21]..src/infer.ml[223,8373+23])
                                Texp_construct "[]"
                                []
                              expression (src/infer.ml[223,8373+25]..src/infer.ml[223,8373+27])
                                Texp_construct "[]"
                                []
                            ]
                      ]
                ]
                expression (src/infer.ml[229,8556+2]..src/infer.ml[268,9713+6])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[229,8556+6]..src/infer.ml[229,8556+12])
                        Tpat_tuple
                        [
                          pattern (src/infer.ml[229,8556+6]..src/infer.ml[229,8556+8])
                            Tpat_var "ps/1182"
                          pattern (src/infer.ml[229,8556+10]..src/infer.ml[229,8556+12])
                            Tpat_var "ts/1183"
                        ]
                      expression (src/infer.ml[230,8571+4]..src/infer.ml[233,8680+28])
                        Texp_apply
                        expression (src/infer.ml[230,8571+4]..src/infer.ml[230,8571+18])
                          Texp_ident "Dune__exe!.StringMap.fold"
                        [
                          <arg>
                            Nolabel
                            expression (src/infer.ml[230,8571+19]..src/infer.ml[233,8680+5])
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (src/infer.ml[230,8571+24]..src/infer.ml[230,8571+26])
                                    Tpat_var "nt/1184"
                                  expression (src/infer.ml[230,8571+27]..src/infer.ml[232,8659+20]) ghost
                                    Texp_function
                                    Nolabel
                                    [
                                      <case>
                                        pattern (src/infer.ml[230,8571+27]..src/infer.ml[230,8571+28])
                                          Tpat_any
                                        expression (src/infer.ml[230,8571+29]..src/infer.ml[232,8659+20]) ghost
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/infer.ml[230,8571+29]..src/infer.ml[230,8571+37])
                                                Tpat_tuple
                                                [
                                                  pattern (src/infer.ml[230,8571+30]..src/infer.ml[230,8571+32])
                                                    Tpat_var "ps/1185"
                                                  pattern (src/infer.ml[230,8571+34]..src/infer.ml[230,8571+36])
                                                    Tpat_var "ts/1186"
                                                ]
                                              expression (src/infer.ml[231,8612+6]..src/infer.ml[232,8659+20])
                                                Texp_tuple
                                                [
                                                  expression (src/infer.ml[231,8612+6]..src/infer.ml[231,8612+45])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/infer.ml[231,8612+6]..src/infer.ml[231,8612+39])
                                                        Texp_construct "PVar"
                                                        [
                                                          expression (src/infer.ml[231,8612+11]..src/infer.ml[231,8612+39])
                                                            Texp_apply
                                                            expression (src/infer.ml[231,8612+12]..src/infer.ml[231,8612+18])
                                                              Texp_ident "encode/610"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[231,8612+19]..src/infer.ml[231,8612+38])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[231,8612+20]..src/infer.ml[231,8612+34])
                                                                    Texp_ident "Dune__exe!.Misc.normalize"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[231,8612+35]..src/infer.ml[231,8612+37])
                                                                        Texp_ident "nt/1184"
                                                                  ]
                                                            ]
                                                        ]
                                                      expression (src/infer.ml[231,8612+43]..src/infer.ml[231,8612+45])
                                                        Texp_ident "ps/1185"
                                                    ]
                                                  expression (src/infer.ml[232,8659+6]..src/infer.ml[232,8659+20])
                                                    Texp_construct "::"
                                                    [
                                                      expression (src/infer.ml[232,8659+6]..src/infer.ml[232,8659+14])
                                                        Texp_apply
                                                        expression (src/infer.ml[232,8659+6]..src/infer.ml[232,8659+11])
                                                          Texp_ident "ntvar/535"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[232,8659+12]..src/infer.ml[232,8659+14])
                                                              Texp_ident "nt/1184"
                                                        ]
                                                      expression (src/infer.ml[232,8659+18]..src/infer.ml[232,8659+20])
                                                        Texp_ident "ts/1186"
                                                    ]
                                                ]
                                          ]
                                    ]
                              ]
                          <arg>
                            Nolabel
                            expression (src/infer.ml[233,8680+6]..src/infer.ml[233,8680+19])
                              Texp_field
                              expression (src/infer.ml[233,8680+6]..src/infer.ml[233,8680+13])
                                Texp_ident "grammar/1170"
                              "rules"
                          <arg>
                            Nolabel
                            expression (src/infer.ml[233,8680+20]..src/infer.ml[233,8680+28])
                              Texp_tuple
                              [
                                expression (src/infer.ml[233,8680+21]..src/infer.ml[233,8680+23])
                                  Texp_construct "[]"
                                  []
                                expression (src/infer.ml[233,8680+25]..src/infer.ml[233,8680+27])
                                  Texp_construct "[]"
                                  []
                              ]
                        ]
                  ]
                  expression (src/infer.ml[236,8715+2]..src/infer.ml[268,9713+6])
                    Texp_let Nonrec
                    [
                      <def>
                        pattern (src/infer.ml[236,8715+6]..src/infer.ml[236,8715+9])
                          Tpat_var "def/1189"
                        expression (src/infer.ml[236,8715+12]..src/infer.ml[240,8848+3])
                          Texp_record
                            fields =
                              [
                                "valpublic"
                                  expression (src/infer.ml[237,8729+16]..src/infer.ml[237,8729+20])
                                    Texp_construct "true"
                                    []
                                "valpat"
                                  expression (src/infer.ml[238,8751+13]..src/infer.ml[238,8751+22])
                                    Texp_construct "PTuple"
                                    [
                                      expression (src/infer.ml[238,8751+20]..src/infer.ml[238,8751+22])
                                        Texp_ident "ps/1182"
                                    ]
                                "valval"
                                  expression (src/infer.ml[239,8775+13]..src/infer.ml[239,8775+72])
                                    Texp_construct "ELet"
                                    [
                                      expression (src/infer.ml[239,8775+19]..src/infer.ml[239,8775+40])
                                        Texp_apply
                                        expression (src/infer.ml[239,8775+29]..src/infer.ml[239,8775+30])
                                          Texp_ident "Stdlib!.@"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[239,8775+19]..src/infer.ml[239,8775+28])
                                              Texp_ident "bindings1/1171"
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[239,8775+31]..src/infer.ml[239,8775+40])
                                              Texp_ident "bindings2/1172"
                                        ]
                                      expression (src/infer.ml[239,8775+42]..src/infer.ml[239,8775+71])
                                        Texp_apply
                                        expression (src/infer.ml[239,8775+42]..src/infer.ml[239,8775+50])
                                          Texp_ident "Dune__exe!.CodeBits.annotate"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[239,8775+51]..src/infer.ml[239,8775+57])
                                              Texp_ident "Dune__exe!.CodeBits.bottom"
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[239,8775+58]..src/infer.ml[239,8775+71])
                                              Texp_construct "TypTuple"
                                              [
                                                expression (src/infer.ml[239,8775+68]..src/infer.ml[239,8775+70])
                                                  Texp_ident "ts/1183"
                                              ]
                                        ]
                                    ]
                              ]
                            representation =
                              Record_regular
                            extended_expression =
                              None
                    ]
                    expression (src/infer.ml[248,9102+2]..src/infer.ml[268,9713+6])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/infer.ml[248,9102+6]..src/infer.ml[248,9102+14])
                            Tpat_var "begindef/1190"
                          expression (src/infer.ml[248,9102+17]..src/infer.ml[252,9209+3])
                            Texp_record
                              fields =
                                [
                                  "valpublic"
                                    expression (src/infer.ml[249,9121+16]..src/infer.ml[249,9121+20])
                                      Texp_construct "true"
                                      []
                                  "valpat"
                                    expression (src/infer.ml[250,9143+13]..src/infer.ml[250,9143+39])
                                      Texp_construct "PVar"
                                      [
                                        expression (src/infer.ml[250,9143+18]..src/infer.ml[250,9143+39])
                                          Texp_constant Const_string("menhir_begin_marker",(src/infer.ml[250,9143+19]..src/infer.ml[250,9143+38]),None)
                                      ]
                                  "valval"
                                    expression (src/infer.ml[251,9184+13]..src/infer.ml[251,9184+24])
                                      Texp_construct "EIntConst"
                                      [
                                        expression (src/infer.ml[251,9184+23]..src/infer.ml[251,9184+24])
                                          Texp_constant Const_int 0
                                      ]
                                ]
                              representation =
                                Record_regular
                              extended_expression =
                                None
                        <def>
                          pattern (src/infer.ml[253,9213+6]..src/infer.ml[253,9213+12])
                            Tpat_var "enddef/1191"
                          expression (src/infer.ml[253,9213+15]..src/infer.ml[257,9316+3])
                            Texp_record
                              fields =
                                [
                                  "valpublic"
                                    expression (src/infer.ml[254,9230+16]..src/infer.ml[254,9230+20])
                                      Texp_construct "true"
                                      []
                                  "valpat"
                                    expression (src/infer.ml[255,9252+13]..src/infer.ml[255,9252+37])
                                      Texp_construct "PVar"
                                      [
                                        expression (src/infer.ml[255,9252+18]..src/infer.ml[255,9252+37])
                                          Texp_constant Const_string("menhir_end_marker",(src/infer.ml[255,9252+19]..src/infer.ml[255,9252+36]),None)
                                      ]
                                  "valval"
                                    expression (src/infer.ml[256,9291+13]..src/infer.ml[256,9291+24])
                                      Texp_construct "EIntConst"
                                      [
                                        expression (src/infer.ml[256,9291+23]..src/infer.ml[256,9291+24])
                                          Texp_constant Const_int 0
                                      ]
                                ]
                              representation =
                                Record_regular
                              extended_expression =
                                None
                      ]
                      expression (src/infer.ml[263,9505+2]..src/infer.ml[268,9713+6])
                        Texp_construct "::"
                        [
                          expression (src/infer.ml[263,9505+4]..src/infer.ml[268,9713+5])
                            Texp_construct "SIFunctor"
                            [
                              expression (src/infer.ml[263,9505+15]..src/infer.ml[263,9505+33])
                                Texp_field
                                expression (src/infer.ml[263,9505+15]..src/infer.ml[263,9505+22])
                                  Texp_ident "grammar/1170"
                                "parameters"
                              expression (src/infer.ml[264,9540+4]..src/infer.ml[268,9713+4])
                                Texp_apply
                                expression (src/infer.ml[264,9540+50]..src/infer.ml[264,9540+51])
                                  Texp_ident "Stdlib!.@"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[264,9540+4]..src/infer.ml[264,9540+49])
                                      Texp_apply
                                      expression (src/infer.ml[264,9540+4]..src/infer.ml[264,9540+26])
                                        Texp_ident "Dune__exe!.CodeBits.interface_to_structure"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[264,9540+27]..src/infer.ml[264,9540+49])
                                            Texp_apply
                                            expression (src/infer.ml[264,9540+28]..src/infer.ml[264,9540+40])
                                              Texp_ident "Dune__exe!.TokenType.tokentypedef"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (src/infer.ml[264,9540+41]..src/infer.ml[264,9540+48])
                                                  Texp_ident "grammar/1170"
                                            ]
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[265,9592+4]..src/infer.ml[268,9713+4])
                                      Texp_construct "::"
                                      [
                                        expression (src/infer.ml[265,9592+4]..src/infer.ml[265,9592+30])
                                          Texp_construct "SIStretch"
                                          [
                                            expression (src/infer.ml[265,9592+14]..src/infer.ml[265,9592+30])
                                              Texp_field
                                              expression (src/infer.ml[265,9592+14]..src/infer.ml[265,9592+21])
                                                Texp_ident "grammar/1170"
                                              "preludes"
                                          ]
                                        expression (src/infer.ml[266,9626+4]..src/infer.ml[268,9713+4])
                                          Texp_construct "::"
                                          [
                                            expression (src/infer.ml[266,9626+4]..src/infer.ml[266,9626+48])
                                              Texp_construct "SIValDefs"
                                              [
                                                expression (src/infer.ml[266,9626+15]..src/infer.ml[266,9626+20])
                                                  Texp_construct "false"
                                                  []
                                                expression (src/infer.ml[266,9626+22]..src/infer.ml[266,9626+47])
                                                  Texp_construct "::"
                                                  [
                                                    expression (src/infer.ml[266,9626+24]..src/infer.ml[266,9626+32])
                                                      Texp_ident "begindef/1190"
                                                    expression (src/infer.ml[266,9626+34]..src/infer.ml[266,9626+47]) ghost
                                                      Texp_construct "::"
                                                      [
                                                        expression (src/infer.ml[266,9626+34]..src/infer.ml[266,9626+37])
                                                          Texp_ident "def/1189"
                                                        expression (src/infer.ml[266,9626+39]..src/infer.ml[266,9626+47]) ghost
                                                          Texp_construct "::"
                                                          [
                                                            expression (src/infer.ml[266,9626+39]..src/infer.ml[266,9626+45])
                                                              Texp_ident "enddef/1191"
                                                            expression (src/infer.ml[266,9626+46]..src/infer.ml[266,9626+47]) ghost
                                                              Texp_construct "[]"
                                                              []
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            expression (src/infer.ml[267,9678+4]..src/infer.ml[268,9713+4])
                                              Texp_construct "::"
                                              [
                                                expression (src/infer.ml[267,9678+4]..src/infer.ml[267,9678+31])
                                                  Texp_construct "SIStretch"
                                                  [
                                                    expression (src/infer.ml[267,9678+14]..src/infer.ml[267,9678+31])
                                                      Texp_field
                                                      expression (src/infer.ml[267,9678+14]..src/infer.ml[267,9678+21])
                                                        Texp_ident "grammar/1170"
                                                      "postludes"
                                                  ]
                                                expression (src/infer.ml[268,9713+2]..src/infer.ml[268,9713+4])
                                                  Texp_construct "[]"
                                                  []
                                              ]
                                          ]
                                      ]
                                ]
                            ]
                          expression (src/infer.ml[268,9713+5]..src/infer.ml[268,9713+6]) ghost
                            Texp_construct "[]"
                            []
                        ]
          ]
    ]
  structure_item (src/infer.ml[273,9865+0]..src/infer.ml[280,10064+14])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[273,9865+4]..src/infer.ml[273,9865+9])
          Tpat_var "write/1192"
        expression (src/infer.ml[273,9865+10]..src/infer.ml[280,10064+14]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[273,9865+10]..src/infer.ml[273,9865+17])
                Tpat_var "grammar/1194"
              expression (src/infer.ml[273,9865+18]..src/infer.ml[280,10064+14]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[273,9865+18]..src/infer.ml[273,9865+26])
                      Tpat_var "filename/1195"
                    expression (src/infer.ml[273,9865+27]..src/infer.ml[280,10064+14]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/infer.ml[273,9865+27]..src/infer.ml[273,9865+29])
                            Tpat_construct "()"
                            []
                            None
                          expression (src/infer.ml[274,9897+2]..src/infer.ml[280,10064+14])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/infer.ml[274,9897+6]..src/infer.ml[274,9897+8])
                                  Tpat_var "ml/1196"
                                expression (src/infer.ml[274,9897+11]..src/infer.ml[274,9897+28])
                                  Texp_apply
                                  expression (src/infer.ml[274,9897+11]..src/infer.ml[274,9897+19])
                                    Texp_ident "Stdlib!.open_out"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[274,9897+20]..src/infer.ml[274,9897+28])
                                        Texp_ident "filename/1195"
                                  ]
                            ]
                            expression (src/infer.ml[275,9929+2]..src/infer.ml[280,10064+14])
                              Texp_letmodule "P/1216"
                              module_expr (src/infer.ml[275,9929+17]..src/infer.ml[278,10023+6])
                                Tmod_apply
                                module_expr (src/infer.ml[275,9929+17]..src/infer.ml[275,9929+29])
                                  module_expr (src/infer.ml[275,9929+17]..src/infer.ml[275,9929+29])
                                    Tmod_ident "Dune__exe!.Printer.Make"
                                module_expr (src/infer.ml[275,9929+31]..src/infer.ml[278,10023+5])
                                  Tmod_structure
                                  [
                                    structure_item (src/infer.ml[276,9967+4]..src/infer.ml[276,9967+14])
                                      Tstr_value Nonrec
                                      [
                                        <def>
                                          pattern (src/infer.ml[276,9967+8]..src/infer.ml[276,9967+9])
                                            Tpat_var "f/1197"
                                          expression (src/infer.ml[276,9967+12]..src/infer.ml[276,9967+14])
                                            Texp_ident "ml/1196"
                                      ]
                                    structure_item (src/infer.ml[277,9982+4]..src/infer.ml[277,9982+40])
                                      Tstr_value Nonrec
                                      [
                                        <def>
                                          pattern (src/infer.ml[277,9982+8]..src/infer.ml[277,9982+24])
                                            Tpat_var "locate_stretches/1198"
                                          expression (src/infer.ml[277,9982+27]..src/infer.ml[277,9982+40])
                                            Texp_construct "Some"
                                            [
                                              expression (src/infer.ml[277,9982+32]..src/infer.ml[277,9982+40])
                                                Texp_ident "filename/1195"
                                            ]
                                      ]
                                  ]
                              expression (src/infer.ml[279,10033+2]..src/infer.ml[280,10064+14])
                                Texp_sequence
                                expression (src/infer.ml[279,10033+2]..src/infer.ml[279,10033+29])
                                  Texp_apply
                                  expression (src/infer.ml[279,10033+2]..src/infer.ml[279,10033+11])
                                    Texp_ident "P/1216.program"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[279,10033+12]..src/infer.ml[279,10033+29])
                                        Texp_apply
                                        expression (src/infer.ml[279,10033+13]..src/infer.ml[279,10033+20])
                                          Texp_ident "program/1168"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/infer.ml[279,10033+21]..src/infer.ml[279,10033+28])
                                              Texp_ident "grammar/1194"
                                        ]
                                  ]
                                expression (src/infer.ml[280,10064+2]..src/infer.ml[280,10064+14])
                                  Texp_apply
                                  expression (src/infer.ml[280,10064+2]..src/infer.ml[280,10064+11])
                                    Texp_ident "Stdlib!.close_out"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[280,10064+12]..src/infer.ml[280,10064+14])
                                        Texp_ident "ml/1196"
                                  ]
                      ]
                ]
          ]
    ]
  structure_item (src/infer.ml[285,10200+0]..src/infer.ml[286,10213+34])
    Tstr_type Rec
    [
      type_declaration entry/1218 (src/infer.ml[285,10200+0]..src/infer.ml[286,10213+34])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/infer.ml[286,10213+4]..src/infer.ml[286,10213+34])
              Ttyp_tuple
              [
                core_type (src/infer.ml[286,10213+4]..src/infer.ml[286,10213+10])
                  Ttyp_constr "string/15!"
                  []
                core_type (src/infer.ml[286,10213+28]..src/infer.ml[286,10213+34])
                  Ttyp_constr "string/15!"
                  []
              ]
    ]
  structure_item (src/infer.ml[288,10264+0]..src/infer.ml[289,10276+35])
    Tstr_type Rec
    [
      type_declaration line/1219 (src/infer.ml[288,10264+0]..src/infer.ml[289,10276+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/infer.ml[289,10276+4]..src/infer.ml[289,10276+35])
              Ttyp_tuple
              [
                core_type (src/infer.ml[289,10276+4]..src/infer.ml[289,10276+9])
                  Ttyp_constr "entry/1218"
                  []
                core_type (src/infer.ml[289,10276+25]..src/infer.ml[289,10276+35])
                  Ttyp_constr "list/9!"
                  [
                    core_type (src/infer.ml[289,10276+25]..src/infer.ml[289,10276+30])
                      Ttyp_constr "entry/1218"
                      []
                  ]
              ]
    ]
  structure_item (src/infer.ml[291,10332+0]..src/infer.ml[366,12891+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[291,10332+4]..src/infer.ml[291,10332+10])
          Tpat_var "depend/1220"
        expression (src/infer.ml[291,10332+11]..src/infer.ml[366,12891+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[291,10332+11]..src/infer.ml[291,10332+22])
                Tpat_var "postprocess/1222"
              expression (src/infer.ml[291,10332+23]..src/infer.ml[366,12891+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[291,10332+23]..src/infer.ml[291,10332+30])
                      Tpat_var "grammar/1223"
                    expression (src/infer.ml[301,10713+2]..src/infer.ml[366,12891+8])
                      Texp_let Nonrec
                      [
                        <def>
                          pattern (src/infer.ml[301,10713+6]..src/infer.ml[301,10713+22])
                            Tpat_var "ocamldep_command/1224"
                          expression (src/infer.ml[302,10738+4]..src/infer.ml[303,10768+72])
                            Texp_apply
                            expression (src/infer.ml[302,10738+4]..src/infer.ml[302,10738+18])
                              Texp_ident "Stdlib!.Printf.sprintf"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29])
                                  Texp_construct "CamlinternalFormatBasics.Format"
                                  [
                                    expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String"
                                      [
                                        expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                          []
                                        expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                          Texp_construct "CamlinternalFormatBasics.Char_literal"
                                          [
                                            expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                              Texp_constant Const_char 20
                                            expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                              Texp_construct "CamlinternalFormatBasics.String"
                                              [
                                                expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.No_padding"
                                                  []
                                                expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                  Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                  [
                                                    expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                      Texp_constant Const_char 20
                                                    expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                      Texp_construct "CamlinternalFormatBasics.String"
                                                      [
                                                        expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.No_padding"
                                                          []
                                                        expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                          []
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                    expression (src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost
                                      Texp_constant Const_string("%s %s %s",(src/infer.ml[302,10738+19]..src/infer.ml[302,10738+29]) ghost,None)
                                  ]
                              <arg>
                                Nolabel
                                expression (src/infer.ml[303,10768+6]..src/infer.ml[303,10768+23])
                                  Texp_ident "Dune__exe!.Settings.ocamldep"
                              <arg>
                                Nolabel
                                expression (src/infer.ml[303,10768+24]..src/infer.ml[303,10768+47])
                                  Texp_apply
                                  expression (src/infer.ml[303,10768+25]..src/infer.ml[303,10768+39])
                                    Texp_ident "Stdlib!.Filename.quote"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[303,10768+40]..src/infer.ml[303,10768+46])
                                        Texp_ident "mlname/755"
                                  ]
                              <arg>
                                Nolabel
                                expression (src/infer.ml[303,10768+48]..src/infer.ml[303,10768+72])
                                  Texp_apply
                                  expression (src/infer.ml[303,10768+49]..src/infer.ml[303,10768+63])
                                    Texp_ident "Stdlib!.Filename.quote"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[303,10768+64]..src/infer.ml[303,10768+71])
                                        Texp_ident "mliname/756"
                                  ]
                            ]
                      ]
                      expression (src/infer.ml[306,10847+2]..src/infer.ml[366,12891+8])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/infer.ml[306,10847+6]..src/infer.ml[306,10847+12])
                              extra
                                Tpat_extra_constraint
                                core_type (src/infer.ml[306,10847+15]..src/infer.ml[306,10847+21])
                                  Ttyp_constr "string/15!"
                                  []
                              Tpat_alias "output/1247"
                              pattern (src/infer.ml[306,10847+6]..src/infer.ml[306,10847+12])
                                Tpat_any
                            expression (src/infer.ml[307,10871+4]..src/infer.ml[313,11128+9])
                              extra
                                Texp_constraint
                                core_type (src/infer.ml[306,10847+15]..src/infer.ml[306,10847+21])
                                  Ttyp_constr "string/15!"
                                  []
                              Texp_apply
                              expression (src/infer.ml[307,10871+4]..src/infer.ml[307,10871+18])
                                Texp_ident "Dune__exe!.Option.project"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/infer.ml[307,10871+19]..src/infer.ml[313,11128+9])
                                    Texp_apply
                                    expression (src/infer.ml[308,10892+6]..src/infer.ml[308,10892+20])
                                      Texp_ident "Dune__exe!.IO.moving_away"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[308,10892+21]..src/infer.ml[308,10892+27])
                                          Texp_ident "mlname/755"
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[308,10892+28]..src/infer.ml[313,11128+8])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/infer.ml[308,10892+33]..src/infer.ml[308,10892+35])
                                                Tpat_construct "()"
                                                []
                                                None
                                              expression (src/infer.ml[309,10931+6]..src/infer.ml[313,11128+7])
                                                Texp_apply
                                                expression (src/infer.ml[309,10931+6]..src/infer.ml[309,10931+20])
                                                  Texp_ident "Dune__exe!.IO.moving_away"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/infer.ml[309,10931+21]..src/infer.ml[309,10931+28])
                                                      Texp_ident "mliname/756"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/infer.ml[309,10931+29]..src/infer.ml[313,11128+7])
                                                      Texp_function
                                                      Nolabel
                                                      [
                                                        <case>
                                                          pattern (src/infer.ml[309,10931+34]..src/infer.ml[309,10931+36])
                                                            Tpat_construct "()"
                                                            []
                                                            None
                                                          expression (src/infer.ml[310,10971+6]..src/infer.ml[313,11128+6])
                                                            Texp_apply
                                                            expression (src/infer.ml[310,10971+6]..src/infer.ml[310,10971+18])
                                                              Texp_ident "Dune__exe!.IO.with_file"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[310,10971+19]..src/infer.ml[310,10971+25])
                                                                  Texp_ident "mlname/755"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[310,10971+26]..src/infer.ml[310,10971+48])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[310,10971+27]..src/infer.ml[310,10971+32])
                                                                    Texp_ident "write/1192"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[310,10971+33]..src/infer.ml[310,10971+40])
                                                                        Texp_ident "grammar/1223"
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[310,10971+41]..src/infer.ml[310,10971+47])
                                                                        Texp_ident "mlname/755"
                                                                  ]
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[310,10971+49]..src/infer.ml[313,11128+6])
                                                                  Texp_function
                                                                  Nolabel
                                                                  [
                                                                    <case>
                                                                      pattern (src/infer.ml[310,10971+54]..src/infer.ml[310,10971+56])
                                                                        Tpat_construct "()"
                                                                        []
                                                                        None
                                                                      expression (src/infer.ml[311,11031+6]..src/infer.ml[313,11128+5])
                                                                        Texp_apply
                                                                        expression (src/infer.ml[311,11031+6]..src/infer.ml[311,11031+18])
                                                                          Texp_ident "Dune__exe!.IO.with_file"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[311,11031+19]..src/infer.ml[311,11031+26])
                                                                              Texp_ident "mliname/756"
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[311,11031+27]..src/infer.ml[311,11031+52])
                                                                              Texp_apply
                                                                              expression (src/infer.ml[311,11031+28]..src/infer.ml[311,11031+43])
                                                                                Texp_ident "Dune__exe!.Interface.write"
                                                                              [
                                                                                <arg>
                                                                                  Nolabel
                                                                                  expression (src/infer.ml[311,11031+44]..src/infer.ml[311,11031+51])
                                                                                    Texp_ident "grammar/1223"
                                                                              ]
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[311,11031+53]..src/infer.ml[313,11128+5])
                                                                              Texp_function
                                                                              Nolabel
                                                                              [
                                                                                <case>
                                                                                  pattern (src/infer.ml[311,11031+58]..src/infer.ml[311,11031+60])
                                                                                    Tpat_construct "()"
                                                                                    []
                                                                                    None
                                                                                  expression (src/infer.ml[312,11095+6]..src/infer.ml[312,11095+32])
                                                                                    Texp_apply
                                                                                    expression (src/infer.ml[312,11095+6]..src/infer.ml[312,11095+15])
                                                                                      Texp_ident "Dune__exe!.IO.invoke"
                                                                                    [
                                                                                      <arg>
                                                                                        Nolabel
                                                                                        expression (src/infer.ml[312,11095+16]..src/infer.ml[312,11095+32])
                                                                                          Texp_ident "ocamldep_command/1224"
                                                                                    ]
                                                                              ]
                                                                        ]
                                                                  ]
                                                            ]
                                                      ]
                                                ]
                                          ]
                                    ]
                              ]
                        ]
                        expression (src/infer.ml[318,11177+2]..src/infer.ml[366,12891+8])
                          Texp_sequence
                          expression (src/infer.ml[318,11177+2]..src/infer.ml[318,11177+21])
                            Texp_apply
                            expression (src/infer.ml[318,11177+2]..src/infer.ml[318,11177+14])
                              Texp_ident "Stdlib!.print_string"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[318,11177+15]..src/infer.ml[318,11177+21])
                                  Texp_ident "output/1247"
                            ]
                          expression (src/infer.ml[325,11506+2]..src/infer.ml[366,12891+8])
                            Texp_sequence
                            expression (src/infer.ml[325,11506+2]..src/infer.ml[362,12868+5])
                              Texp_ifthenelse
                              expression (src/infer.ml[325,11506+5]..src/infer.ml[325,11506+16])
                                Texp_ident "postprocess/1222"
                              expression (src/infer.ml[325,11506+22]..src/infer.ml[362,12868+5])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (src/infer.ml[329,11583+8]..src/infer.ml[329,11583+14])
                                      Tpat_var "lexbuf/1266"
                                    expression (src/infer.ml[329,11583+17]..src/infer.ml[329,11583+42])
                                      Texp_apply
                                      expression (src/infer.ml[329,11583+17]..src/infer.ml[329,11583+35])
                                        Texp_ident "Stdlib!.Lexing.from_string"
                                      [
                                        <arg>
                                          Optional "with_positions"
                                          expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                            Texp_construct "None"
                                            []
                                        <arg>
                                          Nolabel
                                          expression (src/infer.ml[329,11583+36]..src/infer.ml[329,11583+42])
                                            Texp_ident "output/1247"
                                      ]
                                ]
                                expression (src/infer.ml[330,11629+4]..src/infer.ml[360,12855+11])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/infer.ml[330,11629+8]..src/infer.ml[330,11629+13])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (src/infer.ml[330,11629+16]..src/infer.ml[330,11629+25])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (src/infer.ml[330,11629+16]..src/infer.ml[330,11629+20])
                                                Ttyp_constr "line/1219"
                                                []
                                            ]
                                        Tpat_alias "lines/1315"
                                        pattern (src/infer.ml[330,11629+8]..src/infer.ml[330,11629+13])
                                          Tpat_any
                                      expression (src/infer.ml[331,11657+6]..src/infer.ml[335,11796+42])
                                        extra
                                          Texp_constraint
                                          core_type (src/infer.ml[330,11629+16]..src/infer.ml[330,11629+25])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (src/infer.ml[330,11629+16]..src/infer.ml[330,11629+20])
                                                Ttyp_constr "line/1219"
                                                []
                                            ]
                                        Texp_try
                                        expression (src/infer.ml[332,11667+8]..src/infer.ml[332,11667+26])
                                          Texp_apply
                                          expression (src/infer.ml[332,11667+8]..src/infer.ml[332,11667+19])
                                            Texp_ident "Dune__exe!.Lexdep.main"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/infer.ml[332,11667+20]..src/infer.ml[332,11667+26])
                                                Texp_ident "lexbuf/1266"
                                          ]
                                        [
                                          <case>
                                            pattern (src/infer.ml[333,11694+11]..src/infer.ml[333,11694+27])
                                              Tpat_construct "Lexdep.Error"
                                              [
                                                pattern (src/infer.ml[333,11694+24]..src/infer.ml[333,11694+27])
                                                  Tpat_var "msg/1323"
                                              ]
                                              None
                                            expression (src/infer.ml[335,11796+8]..src/infer.ml[335,11796+42])
                                              Texp_apply
                                              expression (src/infer.ml[335,11796+8]..src/infer.ml[335,11796+19])
                                                Texp_ident "Dune__exe!.Error.error"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[335,11796+20]..src/infer.ml[335,11796+22])
                                                    Texp_construct "[]"
                                                    []
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String"
                                                        [
                                                          expression (src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                                            []
                                                          expression (src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                            []
                                                        ]
                                                      expression (src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27]) ghost
                                                        Texp_constant Const_string("%s",(src/infer.ml[335,11796+23]..src/infer.ml[335,11796+27]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (src/infer.ml[335,11796+28]..src/infer.ml[335,11796+42])
                                                    Texp_apply
                                                    expression (src/infer.ml[335,11796+33]..src/infer.ml[335,11796+34])
                                                      Texp_ident "Stdlib!.^"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/infer.ml[335,11796+29]..src/infer.ml[335,11796+32])
                                                          Texp_ident "msg/1323"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/infer.ml[335,11796+35]..src/infer.ml[335,11796+41])
                                                          Texp_ident "output/1247"
                                                    ]
                                              ]
                                        ]
                                  ]
                                  expression (src/infer.ml[348,12361+4]..src/infer.ml[360,12855+11])
                                    Texp_apply
                                    expression (src/infer.ml[348,12361+4]..src/infer.ml[348,12361+13])
                                      Texp_ident "Stdlib!.List.iter"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[348,12361+14]..src/infer.ml[360,12855+5])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (src/infer.ml[348,12361+19]..src/infer.ml[348,12361+55])
                                                Tpat_tuple
                                                [
                                                  pattern (src/infer.ml[348,12361+20]..src/infer.ml[348,12361+40])
                                                    Tpat_tuple
                                                    [
                                                      pattern (src/infer.ml[348,12361+21]..src/infer.ml[348,12361+22])
                                                        Tpat_any
                                                      pattern (src/infer.ml[348,12361+24]..src/infer.ml[348,12361+39])
                                                        Tpat_var "target_filename/1339"
                                                    ]
                                                  pattern (src/infer.ml[348,12361+42]..src/infer.ml[348,12361+54])
                                                    Tpat_var "dependencies/1340"
                                                ]
                                              expression (src/infer.ml[349,12420+6]..src/infer.ml[359,12843+11])
                                                Texp_ifthenelse
                                                expression (src/infer.ml[349,12420+9]..src/infer.ml[349,12420+53])
                                                  Texp_apply
                                                  expression (src/infer.ml[349,12420+9]..src/infer.ml[349,12420+30])
                                                    Texp_ident "Stdlib!.Filename.check_suffix"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (src/infer.ml[349,12420+31]..src/infer.ml[349,12420+46])
                                                        Texp_ident "target_filename/1339"
                                                    <arg>
                                                      Nolabel
                                                      expression (src/infer.ml[349,12420+47]..src/infer.ml[349,12420+53])
                                                        Texp_constant Const_string(".cmo",(src/infer.ml[349,12420+48]..src/infer.ml[349,12420+52]),None)
                                                  ]
                                                expression (src/infer.ml[350,12479+8]..src/infer.ml[359,12843+11])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (src/infer.ml[350,12479+12]..src/infer.ml[350,12479+24])
                                                        Tpat_var "dependencies/1341"
                                                      expression (src/infer.ml[350,12479+27]..src/infer.ml[352,12567+22])
                                                        Texp_apply
                                                        expression (src/infer.ml[350,12479+27]..src/infer.ml[350,12479+38])
                                                          Texp_ident "Stdlib!.List.filter"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[350,12479+39]..src/infer.ml[352,12567+9])
                                                              Texp_function
                                                              Nolabel
                                                              [
                                                                <case>
                                                                  pattern (src/infer.ml[350,12479+44]..src/infer.ml[350,12479+57])
                                                                    Tpat_tuple
                                                                    [
                                                                      pattern (src/infer.ml[350,12479+45]..src/infer.ml[350,12479+53])
                                                                        Tpat_var "basename/1342"
                                                                      pattern (src/infer.ml[350,12479+55]..src/infer.ml[350,12479+56])
                                                                        Tpat_any
                                                                    ]
                                                                  expression (src/infer.ml[351,12540+10]..src/infer.ml[351,12540+26])
                                                                    Texp_apply
                                                                    expression (src/infer.ml[351,12540+19]..src/infer.ml[351,12540+21])
                                                                      Texp_ident "Stdlib!.<>"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/infer.ml[351,12540+10]..src/infer.ml[351,12540+18])
                                                                          Texp_ident "basename/1342"
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (src/infer.ml[351,12540+22]..src/infer.ml[351,12540+26])
                                                                          Texp_ident "base/694"
                                                                    ]
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[352,12567+10]..src/infer.ml[352,12567+22])
                                                              Texp_ident "dependencies/1340"
                                                        ]
                                                  ]
                                                  expression (src/infer.ml[353,12593+8]..src/infer.ml[359,12843+11])
                                                    Texp_ifthenelse
                                                    expression (src/infer.ml[353,12593+11]..src/infer.ml[353,12593+39])
                                                      Texp_apply
                                                      expression (src/infer.ml[353,12593+36]..src/infer.ml[353,12593+37])
                                                        Texp_ident "Stdlib!.>"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/infer.ml[353,12593+11]..src/infer.ml[353,12593+35])
                                                            Texp_apply
                                                            expression (src/infer.ml[353,12593+11]..src/infer.ml[353,12593+22])
                                                              Texp_ident "Stdlib!.List.length"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[353,12593+23]..src/infer.ml[353,12593+35])
                                                                  Texp_ident "dependencies/1341"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (src/infer.ml[353,12593+38]..src/infer.ml[353,12593+39])
                                                            Texp_constant Const_int 0
                                                      ]
                                                    expression (src/infer.ml[353,12593+45]..src/infer.ml[359,12843+11])
                                                      Texp_sequence
                                                      expression (src/infer.ml[354,12644+10]..src/infer.ml[354,12644+49])
                                                        Texp_apply
                                                        expression (src/infer.ml[354,12644+10]..src/infer.ml[354,12644+23])
                                                          Texp_ident "Stdlib!.Printf.printf"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39])
                                                              Texp_construct "CamlinternalFormatBasics.Format"
                                                              [
                                                                expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                  Texp_construct "CamlinternalFormatBasics.String"
                                                                  [
                                                                    expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                      []
                                                                    expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                      [
                                                                        expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                          Texp_constant Const_string(".ml ",(src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost,None)
                                                                        expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                          Texp_construct "CamlinternalFormatBasics.String"
                                                                          [
                                                                            expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                              []
                                                                            expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                              Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                              [
                                                                                expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                                  Texp_constant Const_string(".mli:",(src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost,None)
                                                                                expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                                  Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                  []
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                expression (src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost
                                                                  Texp_constant Const_string("%s.ml %s.mli:",(src/infer.ml[354,12644+24]..src/infer.ml[354,12644+39]) ghost,None)
                                                              ]
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[354,12644+40]..src/infer.ml[354,12644+44])
                                                              Texp_ident "base/694"
                                                          <arg>
                                                            Nolabel
                                                            expression (src/infer.ml[354,12644+45]..src/infer.ml[354,12644+49])
                                                              Texp_ident "base/694"
                                                        ]
                                                      expression (src/infer.ml[355,12695+10]..src/infer.ml[358,12812+30])
                                                        Texp_sequence
                                                        expression (src/infer.ml[355,12695+10]..src/infer.ml[357,12786+24])
                                                          Texp_apply
                                                          expression (src/infer.ml[355,12695+10]..src/infer.ml[355,12695+19])
                                                            Texp_ident "Stdlib!.List.iter"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[355,12695+20]..src/infer.ml[357,12786+11])
                                                                Texp_function
                                                                Nolabel
                                                                [
                                                                  <case>
                                                                    pattern (src/infer.ml[355,12695+25]..src/infer.ml[355,12695+46])
                                                                      Tpat_tuple
                                                                      [
                                                                        pattern (src/infer.ml[355,12695+26]..src/infer.ml[355,12695+35])
                                                                          Tpat_var "_basename/1344"
                                                                        pattern (src/infer.ml[355,12695+37]..src/infer.ml[355,12695+45])
                                                                          Tpat_var "filename/1345"
                                                                      ]
                                                                    expression (src/infer.ml[356,12745+12]..src/infer.ml[356,12745+40])
                                                                      Texp_apply
                                                                      expression (src/infer.ml[356,12745+12]..src/infer.ml[356,12745+25])
                                                                        Texp_ident "Stdlib!.Printf.printf"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31])
                                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                                            [
                                                                              expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                [
                                                                                  expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                    Texp_constant Const_char 20
                                                                                  expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                                    [
                                                                                      expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                        []
                                                                                      expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                        []
                                                                                    ]
                                                                                ]
                                                                              expression (src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost
                                                                                Texp_constant Const_string(" %s",(src/infer.ml[356,12745+26]..src/infer.ml[356,12745+31]) ghost,None)
                                                                            ]
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/infer.ml[356,12745+32]..src/infer.ml[356,12745+40])
                                                                            Texp_ident "filename/1345"
                                                                      ]
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[357,12786+12]..src/infer.ml[357,12786+24])
                                                                Texp_ident "dependencies/1341"
                                                          ]
                                                        expression (src/infer.ml[358,12812+10]..src/infer.ml[358,12812+30])
                                                          Texp_apply
                                                          expression (src/infer.ml[358,12812+10]..src/infer.ml[358,12812+23])
                                                            Texp_ident "Stdlib!.Printf.printf"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30])
                                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                                [
                                                                  expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                    [
                                                                      expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost
                                                                        Texp_constant Const_char 0a
                                                                      expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Flush"
                                                                        [
                                                                          expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                            []
                                                                        ]
                                                                    ]
                                                                  expression (src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost
                                                                    Texp_constant Const_string("\n%!",(src/infer.ml[358,12812+24]..src/infer.ml[358,12812+30]) ghost,None)
                                                                ]
                                                          ]
                                                    None
                                                None
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[360,12855+6]..src/infer.ml[360,12855+11])
                                          Texp_ident "lines/1315"
                                    ]
                              None
                            expression (src/infer.ml[366,12891+2]..src/infer.ml[366,12891+8])
                              Texp_apply
                              expression (src/infer.ml[366,12891+2]..src/infer.ml[366,12891+6])
                                Texp_ident "Stdlib!.exit"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/infer.ml[366,12891+7]..src/infer.ml[366,12891+8])
                                    Texp_constant Const_int 0
                              ]
                ]
          ]
    ]
  structure_item (src/infer.ml[373,13121+0]..src/infer.ml[407,14193+32])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[373,13121+4]..src/infer.ml[373,13121+14])
          Tpat_var "read_reply/1348"
        expression (src/infer.ml[373,13121+15]..src/infer.ml[407,14193+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[373,13121+16]..src/infer.ml[373,13121+22])
                extra
                  Tpat_extra_constraint
                  core_type (src/infer.ml[373,13121+25]..src/infer.ml[373,13121+31])
                    Ttyp_constr "string/15!"
                    []
                Tpat_alias "output/1350"
                pattern (src/infer.ml[373,13121+16]..src/infer.ml[373,13121+22])
                  Tpat_any
              expression (src/infer.ml[373,13121+33]..src/infer.ml[407,14193+32]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[373,13121+33]..src/infer.ml[373,13121+40])
                      Tpat_var "grammar/1351"
                    expression (src/infer.ml[376,13204+2]..src/infer.ml[407,14193+32])
                      Texp_sequence
                      expression (src/infer.ml[376,13204+2]..src/infer.ml[376,13204+16])
                        Texp_apply
                        expression (src/infer.ml[376,13204+2]..src/infer.ml[376,13204+14])
                          Texp_ident "Dune__exe!.Error.enable"
                        [
                          <arg>
                            Nolabel
                            expression (src/infer.ml[376,13204+14]..src/infer.ml[376,13204+16])
                              Texp_construct "()"
                              []
                        ]
                      expression (src/infer.ml[378,13223+2]..src/infer.ml[407,14193+32])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (src/infer.ml[378,13223+6]..src/infer.ml[378,13223+9])
                              extra
                                Tpat_extra_constraint
                                core_type (src/infer.ml[378,13223+12]..src/infer.ml[378,13223+37])
                                  Ttyp_constr "list/9!"
                                  [
                                    core_type (src/infer.ml[378,13223+13]..src/infer.ml[378,13223+31])
                                      Ttyp_tuple
                                      [
                                        core_type (src/infer.ml[378,13223+13]..src/infer.ml[378,13223+19])
                                          Ttyp_constr "string/15!"
                                          []
                                        core_type (src/infer.ml[378,13223+22]..src/infer.ml[378,13223+25])
                                          Ttyp_constr "int/1!"
                                          []
                                        core_type (src/infer.ml[378,13223+28]..src/infer.ml[378,13223+31])
                                          Ttyp_constr "int/1!"
                                          []
                                      ]
                                  ]
                              Tpat_alias "env/1352"
                              pattern (src/infer.ml[378,13223+6]..src/infer.ml[378,13223+9])
                                Tpat_any
                            expression (src/infer.ml[379,13263+4]..src/infer.ml[379,13263+43])
                              extra
                                Texp_constraint
                                core_type (src/infer.ml[378,13223+12]..src/infer.ml[378,13223+37])
                                  Ttyp_constr "list/9!"
                                  [
                                    core_type (src/infer.ml[378,13223+13]..src/infer.ml[378,13223+31])
                                      Ttyp_tuple
                                      [
                                        core_type (src/infer.ml[378,13223+13]..src/infer.ml[378,13223+19])
                                          Ttyp_constr "string/15!"
                                          []
                                        core_type (src/infer.ml[378,13223+22]..src/infer.ml[378,13223+25])
                                          Ttyp_constr "int/1!"
                                          []
                                        core_type (src/infer.ml[378,13223+28]..src/infer.ml[378,13223+31])
                                          Ttyp_constr "int/1!"
                                          []
                                      ]
                                  ]
                              Texp_apply
                              expression (src/infer.ml[379,13263+4]..src/infer.ml[379,13263+15])
                                Texp_ident "Dune__exe!.Lexmli.main"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/infer.ml[379,13263+16]..src/infer.ml[379,13263+43])
                                    Texp_apply
                                    expression (src/infer.ml[379,13263+17]..src/infer.ml[379,13263+35])
                                      Texp_ident "Stdlib!.Lexing.from_string"
                                    [
                                      <arg>
                                        Optional "with_positions"
                                        expression (_none_[0,0+-1].._none_[0,0+-1]) ghost
                                          Texp_construct "None"
                                          []
                                      <arg>
                                        Nolabel
                                        expression (src/infer.ml[379,13263+36]..src/infer.ml[379,13263+42])
                                          Texp_ident "output/1350"
                                    ]
                              ]
                        ]
                        expression (src/infer.ml[382,13313+2]..src/infer.ml[407,14193+32])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (src/infer.ml[382,13313+6]..src/infer.ml[382,13313+9])
                                extra
                                  Tpat_extra_constraint
                                  core_type (src/infer.ml[382,13313+12]..src/infer.ml[382,13313+37])
                                    Ttyp_constr "list/9!"
                                    [
                                      core_type (src/infer.ml[382,13313+13]..src/infer.ml[382,13313+31])
                                        Ttyp_tuple
                                        [
                                          core_type (src/infer.ml[382,13313+13]..src/infer.ml[382,13313+19])
                                            Ttyp_constr "string/15!"
                                            []
                                          core_type (src/infer.ml[382,13313+22]..src/infer.ml[382,13313+31])
                                            Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                                            []
                                        ]
                                    ]
                                Tpat_alias "env/1353"
                                pattern (src/infer.ml[382,13313+6]..src/infer.ml[382,13313+9])
                                  Tpat_any
                              expression (src/infer.ml[383,13353+4]..src/infer.ml[385,13486+9])
                                extra
                                  Texp_constraint
                                  core_type (src/infer.ml[382,13313+12]..src/infer.ml[382,13313+37])
                                    Ttyp_constr "list/9!"
                                    [
                                      core_type (src/infer.ml[382,13313+13]..src/infer.ml[382,13313+31])
                                        Ttyp_tuple
                                        [
                                          core_type (src/infer.ml[382,13313+13]..src/infer.ml[382,13313+19])
                                            Ttyp_constr "string/15!"
                                            []
                                          core_type (src/infer.ml[382,13313+22]..src/infer.ml[382,13313+31])
                                            Ttyp_constr "Dune__exe!.Stretch.ocamltype"
                                            []
                                        ]
                                    ]
                                Texp_apply
                                expression (src/infer.ml[383,13353+4]..src/infer.ml[383,13353+12])
                                  Texp_ident "Stdlib!.List.map"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[383,13353+13]..src/infer.ml[385,13486+5])
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (src/infer.ml[383,13353+18]..src/infer.ml[383,13353+46])
                                            Tpat_tuple
                                            [
                                              pattern (src/infer.ml[383,13353+19]..src/infer.ml[383,13353+21])
                                                Tpat_var "id/1354"
                                              pattern (src/infer.ml[383,13353+23]..src/infer.ml[383,13353+33])
                                                Tpat_var "openingofs/1355"
                                              pattern (src/infer.ml[383,13353+35]..src/infer.ml[383,13353+45])
                                                Tpat_var "closingofs/1356"
                                            ]
                                          expression (src/infer.ml[384,13403+6]..src/infer.ml[384,13403+82])
                                            Texp_tuple
                                            [
                                              expression (src/infer.ml[384,13403+6]..src/infer.ml[384,13403+15])
                                                Texp_apply
                                                expression (src/infer.ml[384,13403+6]..src/infer.ml[384,13403+12])
                                                  Texp_ident "decode/613"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/infer.ml[384,13403+13]..src/infer.ml[384,13403+15])
                                                      Texp_ident "id/1354"
                                                ]
                                              expression (src/infer.ml[384,13403+17]..src/infer.ml[384,13403+82])
                                                Texp_construct "Inferred"
                                                [
                                                  expression (src/infer.ml[384,13403+26]..src/infer.ml[384,13403+82])
                                                    Texp_apply
                                                    expression (src/infer.ml[384,13403+27]..src/infer.ml[384,13403+37])
                                                      Texp_ident "Stdlib!.String.sub"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (src/infer.ml[384,13403+38]..src/infer.ml[384,13403+44])
                                                          Texp_ident "output/1350"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/infer.ml[384,13403+45]..src/infer.ml[384,13403+55])
                                                          Texp_ident "openingofs/1355"
                                                      <arg>
                                                        Nolabel
                                                        expression (src/infer.ml[384,13403+56]..src/infer.ml[384,13403+81])
                                                          Texp_apply
                                                          expression (src/infer.ml[384,13403+68]..src/infer.ml[384,13403+69])
                                                            Texp_ident "Stdlib!.-"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[384,13403+57]..src/infer.ml[384,13403+67])
                                                                Texp_ident "closingofs/1356"
                                                            <arg>
                                                              Nolabel
                                                              expression (src/infer.ml[384,13403+70]..src/infer.ml[384,13403+80])
                                                                Texp_ident "openingofs/1355"
                                                          ]
                                                    ]
                                                ]
                                            ]
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[385,13486+6]..src/infer.ml[385,13486+9])
                                      Texp_ident "env/1352"
                                ]
                          ]
                          expression (src/infer.ml[390,13560+2]..src/infer.ml[407,14193+32])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (src/infer.ml[390,13560+6]..src/infer.ml[390,13560+11])
                                  Tpat_var "types/1358"
                                expression (src/infer.ml[391,13574+4]..src/infer.ml[404,14153+33])
                                  Texp_apply
                                  expression (src/infer.ml[391,13574+4]..src/infer.ml[391,13574+18])
                                    Texp_ident "Dune__exe!.StringMap.fold"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[391,13574+19]..src/infer.ml[404,14153+5])
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (src/infer.ml[391,13574+24]..src/infer.ml[391,13574+30])
                                              Tpat_var "symbol/1359"
                                            expression (src/infer.ml[391,13574+31]..src/infer.ml[403,14110+42]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (src/infer.ml[391,13574+31]..src/infer.ml[391,13574+32])
                                                    Tpat_any
                                                  expression (src/infer.ml[391,13574+33]..src/infer.ml[403,14110+42]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (src/infer.ml[391,13574+33]..src/infer.ml[391,13574+38])
                                                          Tpat_var "types/1360"
                                                        expression (src/infer.ml[392,13616+6]..src/infer.ml[403,14110+42])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (src/infer.ml[392,13616+10]..src/infer.ml[392,13616+19])
                                                                Tpat_var "ocamltype/1361"
                                                              expression (src/infer.ml[393,13638+8]..src/infer.ml[399,13907+64])
                                                                Texp_try
                                                                expression (src/infer.ml[394,13650+10]..src/infer.ml[394,13650+48])
                                                                  Texp_apply
                                                                  expression (src/infer.ml[394,13650+10]..src/infer.ml[394,13650+20])
                                                                    Texp_ident "Stdlib!.List.assoc"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[394,13650+21]..src/infer.ml[394,13650+44])
                                                                        Texp_apply
                                                                        expression (src/infer.ml[394,13650+22]..src/infer.ml[394,13650+36])
                                                                          Texp_ident "Dune__exe!.Misc.normalize"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (src/infer.ml[394,13650+37]..src/infer.ml[394,13650+43])
                                                                              Texp_ident "symbol/1359"
                                                                        ]
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (src/infer.ml[394,13650+45]..src/infer.ml[394,13650+48])
                                                                        Texp_ident "env/1353"
                                                                  ]
                                                                [
                                                                  <case>
                                                                    pattern (src/infer.ml[395,13699+13]..src/infer.ml[395,13699+22])
                                                                      Tpat_construct "Not_found"
                                                                      []
                                                                      None
                                                                    expression (src/infer.ml[399,13907+10]..src/infer.ml[399,13907+64])
                                                                      Texp_apply
                                                                      expression (src/infer.ml[399,13907+10]..src/infer.ml[399,13907+21])
                                                                        Texp_ident "Dune__exe!.Error.error"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/infer.ml[399,13907+22]..src/infer.ml[399,13907+24])
                                                                            Texp_construct "[]"
                                                                            []
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57])
                                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                                            [
                                                                              expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                                [
                                                                                  expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                    Texp_constant Const_string("found no inferred type for ",(src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost,None)
                                                                                  expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.String"
                                                                                    [
                                                                                      expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                        []
                                                                                      expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                        Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                        [
                                                                                          expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                            Texp_constant Const_char 2e
                                                                                          expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                            []
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                              expression (src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost
                                                                                Texp_constant Const_string("found no inferred type for %s.",(src/infer.ml[399,13907+25]..src/infer.ml[399,13907+57]) ghost,None)
                                                                            ]
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (src/infer.ml[399,13907+58]..src/infer.ml[399,13907+64])
                                                                            Texp_ident "symbol/1359"
                                                                      ]
                                                                ]
                                                          ]
                                                          expression (src/infer.ml[403,14110+6]..src/infer.ml[403,14110+42])
                                                            Texp_apply
                                                            expression (src/infer.ml[403,14110+6]..src/infer.ml[403,14110+19])
                                                              Texp_ident "Dune__exe!.StringMap.add"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[403,14110+20]..src/infer.ml[403,14110+26])
                                                                  Texp_ident "symbol/1359"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[403,14110+27]..src/infer.ml[403,14110+36])
                                                                  Texp_ident "ocamltype/1361"
                                                              <arg>
                                                                Nolabel
                                                                expression (src/infer.ml[403,14110+37]..src/infer.ml[403,14110+42])
                                                                  Texp_ident "types/1360"
                                                            ]
                                                    ]
                                              ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[404,14153+6]..src/infer.ml[404,14153+19])
                                        Texp_field
                                        expression (src/infer.ml[404,14153+6]..src/infer.ml[404,14153+13])
                                          Texp_ident "grammar/1351"
                                        "rules"
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[404,14153+20]..src/infer.ml[404,14153+33])
                                        Texp_field
                                        expression (src/infer.ml[404,14153+20]..src/infer.ml[404,14153+27])
                                          Texp_ident "grammar/1351"
                                        "types"
                                  ]
                            ]
                            expression (src/infer.ml[407,14193+2]..src/infer.ml[407,14193+32])
                              Texp_record
                                fields =
                                  [
                                    <kept>                                    <kept>                                    <kept>                                    <kept>                                    "types"
                                      expression (src/infer.ml[407,14193+25]..src/infer.ml[407,14193+30])
                                        Texp_ident "types/1358"
                                    <kept>                                    <kept>                                    <kept>                                    <kept>                                  ]
                                representation =
                                  Record_regular
                                extended_expression =
                                  Some
                                    expression (src/infer.ml[407,14193+4]..src/infer.ml[407,14193+11])
                                      Texp_ident "grammar/1351"
                ]
          ]
    ]
  structure_item (src/infer.ml[413,14361+0]..src/infer.ml[435,14893+27])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[413,14361+4]..src/infer.ml[413,14361+9])
          Tpat_var "infer/1363"
        expression (src/infer.ml[413,14361+10]..src/infer.ml[435,14893+27]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[413,14361+10]..src/infer.ml[413,14361+17])
                Tpat_var "grammar/1365"
              expression (src/infer.ml[417,14434+2]..src/infer.ml[435,14893+27])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/infer.ml[417,14434+6]..src/infer.ml[417,14434+20])
                      Tpat_var "ocamlc_command/1366"
                    expression (src/infer.ml[418,14457+4]..src/infer.ml[418,14457+72])
                      Texp_apply
                      expression (src/infer.ml[418,14457+4]..src/infer.ml[418,14457+18])
                        Texp_ident "Stdlib!.Printf.sprintf"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32])
                            Texp_construct "CamlinternalFormatBasics.Format"
                            [
                              expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                Texp_construct "CamlinternalFormatBasics.String"
                                [
                                  expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                    Texp_construct "CamlinternalFormatBasics.No_padding"
                                    []
                                  expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                    Texp_construct "CamlinternalFormatBasics.String_literal"
                                    [
                                      expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                        Texp_constant Const_string(" -c -i ",(src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost,None)
                                      expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                        Texp_construct "CamlinternalFormatBasics.String"
                                        [
                                          expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                            Texp_construct "CamlinternalFormatBasics.No_padding"
                                            []
                                          expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                            Texp_construct "CamlinternalFormatBasics.End_of_format"
                                            []
                                        ]
                                    ]
                                ]
                              expression (src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost
                                Texp_constant Const_string("%s -c -i %s",(src/infer.ml[418,14457+19]..src/infer.ml[418,14457+32]) ghost,None)
                            ]
                        <arg>
                          Nolabel
                          expression (src/infer.ml[418,14457+33]..src/infer.ml[418,14457+48])
                            Texp_ident "Dune__exe!.Settings.ocamlc"
                        <arg>
                          Nolabel
                          expression (src/infer.ml[418,14457+49]..src/infer.ml[418,14457+72])
                            Texp_apply
                            expression (src/infer.ml[418,14457+50]..src/infer.ml[418,14457+64])
                              Texp_ident "Stdlib!.Filename.quote"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[418,14457+65]..src/infer.ml[418,14457+71])
                                  Texp_ident "mlname/755"
                            ]
                      ]
                ]
                expression (src/infer.ml[421,14536+2]..src/infer.ml[435,14893+27])
                  Texp_let Nonrec
                  [
                    <def>
                      pattern (src/infer.ml[421,14536+6]..src/infer.ml[421,14536+12])
                        Tpat_var "output/1367"
                      expression (src/infer.ml[422,14551+4]..src/infer.ml[430,14828+14])
                        Texp_sequence
                        expression (src/infer.ml[422,14551+4]..src/infer.ml[422,14551+27])
                          Texp_apply
                          expression (src/infer.ml[422,14551+4]..src/infer.ml[422,14551+9])
                            Texp_ident "write/1192"
                          [
                            <arg>
                              Nolabel
                              expression (src/infer.ml[422,14551+10]..src/infer.ml[422,14551+17])
                                Texp_ident "grammar/1365"
                            <arg>
                              Nolabel
                              expression (src/infer.ml[422,14551+18]..src/infer.ml[422,14551+24])
                                Texp_ident "mlname/755"
                            <arg>
                              Nolabel
                              expression (src/infer.ml[422,14551+25]..src/infer.ml[422,14551+27])
                                Texp_construct "()"
                                []
                          ]
                        expression (src/infer.ml[423,14580+4]..src/infer.ml[430,14828+14])
                          Texp_match
                          expression (src/infer.ml[423,14580+10]..src/infer.ml[423,14580+34])
                            Texp_apply
                            expression (src/infer.ml[423,14580+10]..src/infer.ml[423,14580+19])
                              Texp_ident "Dune__exe!.IO.invoke"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[423,14580+20]..src/infer.ml[423,14580+34])
                                  Texp_ident "ocamlc_command/1366"
                            ]
                          [
                            <case>
                              pattern (src/infer.ml[424,14620+6]..src/infer.ml[424,14620+17])
                                Tpat_value
                                pattern (src/infer.ml[424,14620+6]..src/infer.ml[424,14620+17])
                                  Tpat_construct "Some"
                                  [
                                    pattern (src/infer.ml[424,14620+11]..src/infer.ml[424,14620+17])
                                      Tpat_var "result/1368"
                                  ]
                                  None
                              expression (src/infer.ml[425,14641+8]..src/infer.ml[426,14668+14])
                                Texp_sequence
                                expression (src/infer.ml[425,14641+8]..src/infer.ml[425,14641+25])
                                  Texp_apply
                                  expression (src/infer.ml[425,14641+8]..src/infer.ml[425,14641+18])
                                    Texp_ident "Stdlib!.Sys.remove"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/infer.ml[425,14641+19]..src/infer.ml[425,14641+25])
                                        Texp_ident "mlname/755"
                                  ]
                                expression (src/infer.ml[426,14668+8]..src/infer.ml[426,14668+14])
                                  Texp_ident "result/1368"
                            <case>
                              pattern (src/infer.ml[427,14683+6]..src/infer.ml[427,14683+10])
                                Tpat_value
                                pattern (src/infer.ml[427,14683+6]..src/infer.ml[427,14683+10])
                                  Tpat_construct "None"
                                  []
                                  None
                              expression (src/infer.ml[430,14828+8]..src/infer.ml[430,14828+14])
                                Texp_apply
                                expression (src/infer.ml[430,14828+8]..src/infer.ml[430,14828+12])
                                  Texp_ident "Stdlib!.exit"
                                [
                                  <arg>
                                    Nolabel
                                    expression (src/infer.ml[430,14828+13]..src/infer.ml[430,14828+14])
                                      Texp_constant Const_int 1
                                ]
                          ]
                  ]
                  expression (src/infer.ml[435,14893+2]..src/infer.ml[435,14893+27])
                    Texp_apply
                    expression (src/infer.ml[435,14893+2]..src/infer.ml[435,14893+12])
                      Texp_ident "read_reply/1348"
                    [
                      <arg>
                        Nolabel
                        expression (src/infer.ml[435,14893+13]..src/infer.ml[435,14893+19])
                          Texp_ident "output/1367"
                      <arg>
                        Nolabel
                        expression (src/infer.ml[435,14893+20]..src/infer.ml[435,14893+27])
                          Texp_ident "grammar/1365"
                    ]
          ]
    ]
  structure_item (src/infer.ml[439,15003+0]..src/infer.ml[441,15067+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[439,15003+4]..src/infer.ml[439,15003+15])
          Tpat_var "write_query/1443"
        expression (src/infer.ml[439,15003+16]..src/infer.ml[441,15067+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[439,15003+16]..src/infer.ml[439,15003+24])
                Tpat_var "filename/1445"
              expression (src/infer.ml[439,15003+25]..src/infer.ml[441,15067+8]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[439,15003+25]..src/infer.ml[439,15003+32])
                      Tpat_var "grammar/1446"
                    expression (src/infer.ml[440,15038+2]..src/infer.ml[441,15067+8])
                      Texp_sequence
                      expression (src/infer.ml[440,15038+2]..src/infer.ml[440,15038+27])
                        Texp_apply
                        expression (src/infer.ml[440,15038+2]..src/infer.ml[440,15038+7])
                          Texp_ident "write/1192"
                        [
                          <arg>
                            Nolabel
                            expression (src/infer.ml[440,15038+8]..src/infer.ml[440,15038+15])
                              Texp_ident "grammar/1446"
                          <arg>
                            Nolabel
                            expression (src/infer.ml[440,15038+16]..src/infer.ml[440,15038+24])
                              Texp_ident "filename/1445"
                          <arg>
                            Nolabel
                            expression (src/infer.ml[440,15038+25]..src/infer.ml[440,15038+27])
                              Texp_construct "()"
                              []
                        ]
                      expression (src/infer.ml[441,15067+2]..src/infer.ml[441,15067+8])
                        Texp_apply
                        expression (src/infer.ml[441,15067+2]..src/infer.ml[441,15067+6])
                          Texp_ident "Stdlib!.exit"
                        [
                          <arg>
                            Nolabel
                            expression (src/infer.ml[441,15067+7]..src/infer.ml[441,15067+8])
                              Texp_constant Const_int 0
                        ]
                ]
          ]
    ]
  structure_item (src/infer.ml[445,15158+0]..src/infer.ml[446,15192+50])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/infer.ml[445,15158+4]..src/infer.ml[445,15158+14])
          Tpat_var "read_reply/1447"
        expression (src/infer.ml[445,15158+15]..src/infer.ml[446,15192+50]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/infer.ml[445,15158+15]..src/infer.ml[445,15158+23])
                Tpat_var "filename/1448"
              expression (src/infer.ml[445,15158+24]..src/infer.ml[446,15192+50]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/infer.ml[445,15158+24]..src/infer.ml[445,15158+31])
                      Tpat_var "grammar/1449"
                    expression (src/infer.ml[446,15192+2]..src/infer.ml[446,15192+50])
                      Texp_apply
                      expression (src/infer.ml[446,15192+2]..src/infer.ml[446,15192+12])
                        Texp_ident "read_reply/1348"
                      [
                        <arg>
                          Nolabel
                          expression (src/infer.ml[446,15192+13]..src/infer.ml[446,15192+42])
                            Texp_apply
                            expression (src/infer.ml[446,15192+14]..src/infer.ml[446,15192+32])
                              Texp_ident "Dune__exe!.IO.read_whole_file"
                            [
                              <arg>
                                Nolabel
                                expression (src/infer.ml[446,15192+33]..src/infer.ml[446,15192+41])
                                  Texp_ident "filename/1448"
                            ]
                        <arg>
                          Nolabel
                          expression (src/infer.ml[446,15192+43]..src/infer.ml[446,15192+50])
                            Texp_ident "grammar/1449"
                      ]
                ]
          ]
    ]
]

{<Dune__exe__Infer>
 "depend"[value] -> <Dune__exe__Infer.81>;
 "infer"[value] -> <Dune__exe__Infer.107>;
 "ntvar"[value] -> <Dune__exe__Infer.0>;
 "read_reply"[value] -> <Dune__exe__Infer.115>;
 "write_query"[value] -> <Dune__exe__Infer.112>;
 }

(seq
  (let
    (ntvar/535 =
       (function symbol/537
         (makeblock 1
           (apply (field_imm 3 (global Stdlib__Printf!))
             [0: [11: "tv_" [2: 0 0]] "tv_%s"]
             (apply (field_imm 21 (global Dune__exe__Misc!)) symbol/537)))))
    (setfield_ptr(root-init) 0 (global Dune__exe__Infer!) ntvar/535))
  (let
    (encode/610 =
       (function symbol/612
         (apply (field_imm 3 (global Stdlib__Printf!))
           [0: [11: "xv_" [2: 0 0]] "xv_%s"]
           (apply (field_imm 21 (global Dune__exe__Misc!)) symbol/612))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Infer!) encode/610))
  (let
    (decode/613 =
       (function s/615
         (let (n/616 =[int] (string.length s/615))
           (seq
             (if
               (not
                 (&& (>= n/616 3)
                   (caml_string_equal
                     (apply (field_imm 15 (global Stdlib__String!)) s/615 0
                       3)
                     "xv_")))
               (apply (field_imm 0 (global Dune__exe__Lexmli!)) 0) 0)
             (apply (field_imm 15 (global Stdlib__String!)) s/615 3
               (- n/616 3))))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Infer!) decode/613))
  (let (base/694 = (field_imm 24 (global Dune__exe__Settings!)))
    (setfield_ptr(root-init) 7 (global Dune__exe__Infer!) base/694))
  (let
    (mlname/755 =
       (apply (field_imm 27 (global Stdlib!))
         (field_imm 7 (global Dune__exe__Infer!)) ".ml"))
    (setfield_ptr(root-init) 8 (global Dune__exe__Infer!) mlname/755))
  (let
    (mliname/756 =
       (apply (field_imm 27 (global Stdlib!))
         (field_imm 7 (global Dune__exe__Infer!)) ".mli"))
    (setfield_ptr(root-init) 9 (global Dune__exe__Infer!) mliname/756))
  (let
    (usertype/757 =
       (function grammar/759 nt/760
         (try
           (makeblock 0
             (makeblock 0
               (apply (field_imm 15 (global Dune__exe__StringMap!)) nt/760
                 (field_imm 4 grammar/759))))
          with exn/2654
           (catch
             (if (== exn/2654 (field_imm 7 (global Stdlib!))) 0 (exit 1))
            with (1) (reraise exn/2654)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__Infer!) usertype/757))
  (let
    (annotate_expr/859 =
       (function grammar/861 e/862 nt/863
         (let
           (e/864 =
              (apply (field_imm 18 (global Dune__exe__CodeBits!)) e/862
                (apply (field_imm 0 (global Dune__exe__Infer!)) nt/863))
            e/892 =
              (apply (field_imm 3 (global Dune__exe__Option!))
                (function t/904 e/905
                  (apply (field_imm 18 (global Dune__exe__CodeBits!)) e/905
                    t/904))
                (apply (field_imm 10 (global Dune__exe__Infer!)) grammar/861
                  nt/863)
                e/864))
           e/892)))
    (setfield_ptr(root-init) 11 (global Dune__exe__Infer!) annotate_expr/859))
  (let
    (annotate_pat/926 =
       (function grammar/928 p/929 nt/930
         (let
           (p/931 =
              (makeblock 6 p/929
                (apply (field_imm 0 (global Dune__exe__Infer!)) nt/930))
            p/932 =
              (apply (field_imm 3 (global Dune__exe__Option!))
                (function t/933 p/934 (makeblock 6 p/934 t/933))
                (apply (field_imm 10 (global Dune__exe__Infer!)) grammar/928
                  nt/930)
                p/931))
           p/932)))
    (setfield_ptr(root-init) 12 (global Dune__exe__Infer!) annotate_pat/926))
  (let
    (tokentype/935 =
       (function grammar/937 symbol/938
         (let
           (props/939 =
              (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/938
                (field_imm 5 grammar/937))
            *match*/2655 = (field_imm 1 props/939))
           (if (isint *match*/2655)
             (field_imm 6 (global Dune__exe__CodeBits!))
             (let (ocamltype/975 =a (field_imm 0 *match*/2655))
               (makeblock 0 ocamltype/975))))))
    (setfield_ptr(root-init) 13 (global Dune__exe__Infer!) tokentype/935))
  (let
    (actiondef/976 =
       (function grammar/978 symbol/979 branch/980
         (let
           (formals/981 =
              (apply (field_imm 25 (global Stdlib__List!))
                (function formals/1048 producer/1049
                  (let
                    (symbol/1050 =
                       (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
                         producer/1049)
                     lid/1051 =
                       (apply (field_imm 1 (global Dune__exe__BasicSyntax!))
                         producer/1049)
                     id/1122 =
                       (apply (field_imm 0 (global Dune__exe__Positions!))
                         lid/1051))
                    (catch
                      (let
                        (loc/2661 =
                           (apply (field_imm 3 (global Stdlib__Printf!))
                             [0: [11: "_loc_" [2: 0 [12: '_' 0]]] "_loc_%s_"]
                             id/1122)
                         endo/2660 =
                           (apply (field_imm 3 (global Stdlib__Printf!))
                             [0:
                              [11: "_endofs_" [2: 0 [12: '_' 0]]]
                              "_endofs_%s_"]
                             id/1122)
                         starto/2659 =
                           (apply (field_imm 3 (global Stdlib__Printf!))
                             [0:
                              [11: "_startofs_" [2: 0 [12: '_' 0]]]
                              "_startofs_%s_"]
                             id/1122)
                         endp/2658 =
                           (apply (field_imm 3 (global Stdlib__Printf!))
                             [0:
                              [11: "_endpos_" [2: 0 [12: '_' 0]]]
                              "_endpos_%s_"]
                             id/1122)
                         startp/2657 =
                           (apply (field_imm 3 (global Stdlib__Printf!))
                             [0:
                              [11: "_startpos_" [2: 0 [12: '_' 0]]]
                              "_startpos_%s_"]
                             id/1122))
                        (exit 4 startp/2657 endp/2658 starto/2659 endo/2660
                          loc/2661))
                     with (4 startp/1123 endp/1124 starto/1125 endo/1126 loc/1127)
                      (let
                        (pid/1128 =
                           (apply (field_imm 0 (global Dune__exe__CodeBits!))
                             lid/1051)
                         pid/1129 =
                           (try
                             (makeblock 6 pid/1128
                               (apply
                                 (field_imm 13 (global Dune__exe__Infer!))
                                 grammar/978 symbol/1050))
                            with exn/2656
                             (catch
                               (if
                                 (== exn/2656 (field_imm 7 (global Stdlib!)))
                                 (apply
                                   (field_imm 12 (global Dune__exe__Infer!))
                                   grammar/978 pid/1128 symbol/1050)
                                 (exit 3))
                              with (3) (reraise exn/2656))))
                        (makeblock 0 pid/1129
                          (makeblock 0
                            (makeblock 6 (makeblock 0 startp/1123)
                              (field_imm 11 (global Dune__exe__CodeBits!)))
                            (makeblock 0
                              (makeblock 6 (makeblock 0 endp/1124)
                                (field_imm 11 (global Dune__exe__CodeBits!)))
                              (makeblock 0
                                (makeblock 6 (makeblock 0 starto/1125)
                                  (field_imm 8 (global Dune__exe__CodeBits!)))
                                (makeblock 0
                                  (makeblock 6 (makeblock 0 endo/1126)
                                    (field_imm 8
                                      (global Dune__exe__CodeBits!)))
                                  (makeblock 0
                                    (makeblock 6 (makeblock 0 loc/1127)
                                      (field_imm 12
                                        (global Dune__exe__CodeBits!)))
                                    formals/1048))))))))))
                0 (field_imm 1 branch/980))
            formals/1130 =
              (makeblock 0
                (makeblock 6 [0: "_eRR"]
                  (field_imm 10 (global Dune__exe__CodeBits!)))
                (makeblock 0
                  (makeblock 6 [0: "_startpos"]
                    (field_imm 11 (global Dune__exe__CodeBits!)))
                  (makeblock 0
                    (makeblock 6 [0: "_endpos"]
                      (field_imm 11 (global Dune__exe__CodeBits!)))
                    (makeblock 0
                      (makeblock 6 [0: "_endpos__0_"]
                        (field_imm 11 (global Dune__exe__CodeBits!)))
                      (makeblock 0
                        (makeblock 6 [0: "_symbolstartpos"]
                          (field_imm 11 (global Dune__exe__CodeBits!)))
                        (makeblock 0
                          (makeblock 6 [0: "_startofs"]
                            (field_imm 8 (global Dune__exe__CodeBits!)))
                          (makeblock 0
                            (makeblock 6 [0: "_endofs"]
                              (field_imm 8 (global Dune__exe__CodeBits!)))
                            (makeblock 0
                              (makeblock 6 [0: "_endofs__0_"]
                                (field_imm 8 (global Dune__exe__CodeBits!)))
                              (makeblock 0
                                (makeblock 6 [0: "_symbolstartofs"]
                                  (field_imm 8 (global Dune__exe__CodeBits!)))
                                (makeblock 0
                                  (makeblock 6 [0: "_sloc"]
                                    (field_imm 12
                                      (global Dune__exe__CodeBits!)))
                                  (makeblock 0
                                    (makeblock 6 [0: "_loc"]
                                      (field_imm 12
                                        (global Dune__exe__CodeBits!)))
                                    formals/981)))))))))))
            body/1131 =
              (apply (field_imm 11 (global Dune__exe__Infer!)) grammar/978
                (apply (field_imm 4 (global Dune__exe__Action!))
                  (field_imm 2 branch/980))
                symbol/979))
           (catch (if (isint formals/1130) body/1131 (exit 2)) with (2)
             (makeblock 1 formals/1130 body/1131)))))
    (setfield_ptr(root-init) 14 (global Dune__exe__Infer!) actiondef/976))
  (let
    (program/1168 =
       (function grammar/1170
         (let
           (*match*/2672 =
              (apply (field_imm 22 (global Dune__exe__StringMap!))
                (function symbol/1173 rule/1174 param/1181
                  (let
                    (bindings2/1176 =a (field_imm 1 param/1181)
                     bindings1/1175 =a (field_imm 0 param/1181))
                    (apply (field_imm 25 (global Stdlib__List!))
                      (function param/1180 branch/1179
                        (let
                          (bindings2/1178 =a (field_imm 1 param/1180)
                           bindings1/1177 =a (field_imm 0 param/1180))
                          (if
                            (apply (field_imm 5 (global Dune__exe__Action!))
                              (field_imm 2 branch/1179))
                            (makeblock 0
                              (makeblock 0
                                (makeblock 0 0
                                  (apply
                                    (field_imm 14 (global Dune__exe__Infer!))
                                    grammar/1170 symbol/1173 branch/1179))
                                bindings1/1177)
                              bindings2/1178)
                            (makeblock 0 bindings1/1177
                              (makeblock 0
                                (makeblock 0 0
                                  (apply
                                    (field_imm 14 (global Dune__exe__Infer!))
                                    grammar/1170 symbol/1173 branch/1179))
                                bindings2/1178)))))
                      (makeblock 0 bindings1/1175 bindings2/1176)
                      (field_imm 0 rule/1174))))
                (field_imm 8 grammar/1170) [0: 0 0])
            bindings2/1172 =a (field_imm 1 *match*/2672)
            bindings1/1171 =a (field_imm 0 *match*/2672)
            *match*/2668 =
              (apply (field_imm 22 (global Dune__exe__StringMap!))
                (function nt/1184 param/1188 param/1187
                  (let
                    (ts/1186 =a (field_imm 1 param/1187)
                     ps/1185 =a (field_imm 0 param/1187))
                    (makeblock 0
                      (makeblock 0
                        (makeblock 0
                          (apply (field_imm 5 (global Dune__exe__Infer!))
                            (apply (field_imm 21 (global Dune__exe__Misc!))
                              nt/1184)))
                        ps/1185)
                      (makeblock 0
                        (apply (field_imm 0 (global Dune__exe__Infer!))
                          nt/1184)
                        ts/1186))))
                (field_imm 8 grammar/1170) [0: 0 0])
            ts/1183 =a (field_imm 1 *match*/2668)
            ps/1182 =a (field_imm 0 *match*/2668)
            def/1189 =
              (makeblock 0 (int,*,*) 1 (makeblock 3 ps/1182)
                (makeblock 3
                  (apply (field_imm 36 (global Stdlib!)) bindings1/1171
                    bindings2/1172)
                  (apply (field_imm 18 (global Dune__exe__CodeBits!))
                    (field_imm 25 (global Dune__exe__CodeBits!))
                    (makeblock 3 ts/1183))))
            begindef/1190 = [0: 1 [0: "menhir_begin_marker"] [9: 0]]
            enddef/1191 = [0: 1 [0: "menhir_end_marker"] [9: 0]])
           (makeblock 0
             (makeblock 0 (field_imm 2 grammar/1170)
               (apply (field_imm 36 (global Stdlib!))
                 (apply (field_imm 42 (global Dune__exe__CodeBits!))
                   (apply (field_imm 5 (global Dune__exe__TokenType!))
                     grammar/1170))
                 (makeblock 0 (makeblock 4 (field_imm 0 grammar/1170))
                   (makeblock 0
                     (makeblock 3 (int,*) 0
                       (makeblock 0 begindef/1190
                         (makeblock 0 def/1189 (makeblock 0 enddef/1191 0))))
                     (makeblock 0 (makeblock 4 (field_imm 1 grammar/1170)) 0)))))
             0))))
    (setfield_ptr(root-init) 15 (global Dune__exe__Infer!) program/1168))
  (let
    (write/1192 =
       (function grammar/1194 filename/1195 param/1217[int] : int
         (let
           (ml/1196 = (apply (field_imm 59 (global Stdlib!)) filename/1195)
            P/1216 =
              (apply
                (let (let/2673 = (field_imm 0 (global Dune__exe__Printer!)))
                  (field_imm 0 (global Dune__exe__Printer!)))
                (let
                  (f/1197 = ml/1196
                   locate_stretches/1198 = (makeblock 0 filename/1195))
                  (makeblock 0 f/1197 locate_stretches/1198))))
           (seq
             (apply (field_imm 0 P/1216)
               (apply (field_imm 15 (global Dune__exe__Infer!)) grammar/1194))
             (apply (field_imm 75 (global Stdlib!)) ml/1196)))))
    (setfield_ptr(root-init) 16 (global Dune__exe__Infer!) write/1192))
  (let
    (depend/1220 =
       (function postprocess/1222[int] grammar/1223
         (let
           (ocamldep_command/1224 =
              (apply (field_imm 3 (global Stdlib__Printf!))
                [0: [2: 0 [12: ' ' [2: 0 [12: ' ' [2: 0 0]]]]] "%s %s %s"]
                (field_imm 19 (global Dune__exe__Settings!))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 8 (global Dune__exe__Infer!)))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 9 (global Dune__exe__Infer!))))
            output/1247 =
              (apply (field_imm 5 (global Dune__exe__Option!))
                (apply (field_imm 1 (global Dune__exe__IO!))
                  (field_imm 8 (global Dune__exe__Infer!))
                  (function param/1265[int]
                    (apply (field_imm 1 (global Dune__exe__IO!))
                      (field_imm 9 (global Dune__exe__Infer!))
                      (function param/1264[int]
                        (apply (field_imm 2 (global Dune__exe__IO!))
                          (field_imm 8 (global Dune__exe__Infer!))
                          (apply (field_imm 16 (global Dune__exe__Infer!))
                            grammar/1223
                            (field_imm 8 (global Dune__exe__Infer!)))
                          (function param/1263[int]
                            (apply (field_imm 2 (global Dune__exe__IO!))
                              (field_imm 9 (global Dune__exe__Infer!))
                              (apply
                                (field_imm 7 (global Dune__exe__Interface!))
                                grammar/1223)
                              (function param/1262[int]
                                (apply (field_imm 4 (global Dune__exe__IO!))
                                  ocamldep_command/1224)))))))))))
           (seq (apply (field_imm 41 (global Stdlib!)) output/1247)
             (if postprocess/1222
               (let
                 (lexbuf/1266 =
                    (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                      output/1247)
                  lines/1315 =
                    (try
                      (apply (field_imm 3 (global Dune__exe__Lexdep!))
                        lexbuf/1266)
                     with exn/2681
                      (catch
                        (let (tag/2682 =a (field_imm 0 exn/2681))
                          (if
                            (== tag/2682
                              (field_imm 0 (global Dune__exe__Lexdep!)))
                            (let (msg/1323 =a (field_imm 1 exn/2681))
                              (apply (field_imm 5 (global Dune__exe__Error!))
                                0 [0: [2: 0 0] "%s"]
                                (apply (field_imm 27 (global Stdlib!))
                                  msg/1323 output/1247)))
                            (exit 16)))
                       with (16) (reraise exn/2681))))
                 (apply (field_imm 17 (global Stdlib__List!))
                   (function (param/2674, param/2675) : int
                     (let
                       (dependencies/1340 =a param/2675
                        target_filename/1339 =a (field_imm 1 param/2674)
                        *match*/2680 =a (field_imm 0 param/2674))
                       (if
                         (apply (field_imm 6 (global Stdlib__Filename!))
                           target_filename/1339 ".cmo")
                         (let
                           (dependencies/1341 =
                              (apply (field_imm 43 (global Stdlib__List!))
                                (function (param/2678, param/2679) : int
                                  (let (basename/1342 =a param/2678)
                                    (caml_string_notequal basename/1342
                                      (field_imm 7
                                        (global Dune__exe__Infer!)))))
                                dependencies/1340))
                           (if
                             (>
                               (apply (field_imm 0 (global Stdlib__List!))
                                 dependencies/1341)
                               0)
                             (seq
                               (apply (field_imm 1 (global Stdlib__Printf!))
                                 [0:
                                  [2: 0 [11: ".ml " [2: 0 [11: ".mli:" 0]]]]
                                  "%s.ml %s.mli:"]
                                 (field_imm 7 (global Dune__exe__Infer!))
                                 (field_imm 7 (global Dune__exe__Infer!)))
                               (apply (field_imm 17 (global Stdlib__List!))
                                 (function (param/2676, param/2677) : int
                                   (let
                                     (filename/1345 =a param/2677
                                      _basename/1344 =a param/2676)
                                     (apply
                                       (field_imm 1 (global Stdlib__Printf!))
                                       [0: [12: ' ' [2: 0 0]] " %s"]
                                       filename/1345)))
                                 dependencies/1341)
                               (apply (field_imm 1 (global Stdlib__Printf!))
                                 [0: [12: '\n' [10: 0]] "\n%!"]))
                             0))
                         0)))
                   lines/1315))
               0)
             (apply (field_imm 98 (global Stdlib!)) 0)))))
    (setfield_ptr(root-init) 2 (global Dune__exe__Infer!) depend/1220))
  (let
    (read_reply/1348 =
       (function output/1350 grammar/1351
         (seq (apply (field_imm 0 (global Dune__exe__Error!)) 0)
           (let
             (env/1352 =
                (apply (field_imm 6 (global Dune__exe__Lexmli!))
                  (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                    output/1350))
              env/1353 =
                (apply (field_imm 19 (global Stdlib__List!))
                  (function (param/2780, param/2781[int], param/2782[int])
                    (let
                      (closingofs/1356 =a param/2782
                       openingofs/1355 =a param/2781
                       id/1354 =a param/2780)
                      (makeblock 0
                        (apply (field_imm 6 (global Dune__exe__Infer!))
                          id/1354)
                        (makeblock 1
                          (apply (field_imm 15 (global Stdlib__String!))
                            output/1350 openingofs/1355
                            (- closingofs/1356 openingofs/1355))))))
                  env/1352)
              types/1358 =
                (apply (field_imm 22 (global Dune__exe__StringMap!))
                  (function symbol/1359 param/1362 types/1360
                    (let
                      (ocamltype/1361 =
                         (try
                           (apply (field_imm 48 (global Stdlib__List!))
                             (apply (field_imm 21 (global Dune__exe__Misc!))
                               symbol/1359)
                             env/1353)
                          with exn/2779
                           (catch
                             (if (== exn/2779 (field_imm 7 (global Stdlib!)))
                               (apply
                                 (field_imm 5 (global Dune__exe__Error!)) 0
                                 [0:
                                  [11:
                                   "found no inferred type for "
                                   [2: 0 [12: '.' 0]]]
                                  "found no inferred type for %s."]
                                 symbol/1359)
                               (exit 24))
                            with (24) (reraise exn/2779))))
                      (apply (field_imm 1 (global Dune__exe__StringMap!))
                        symbol/1359 ocamltype/1361 types/1360)))
                  (field_imm 8 grammar/1351) (field_imm 4 grammar/1351))
              init/2686 = grammar/1351)
             (makeblock 0 (field_imm 0 init/2686) (field_imm 1 init/2686)
               (field_imm 2 init/2686) (field_imm 3 init/2686) types/1358
               (field_imm 5 init/2686) (field_imm 6 init/2686)
               (field_imm 7 init/2686) (field_imm 8 init/2686))))))
    (setfield_ptr(root-init) 17 (global Dune__exe__Infer!) read_reply/1348))
  (let
    (infer/1363 =
       (function grammar/1365
         (let
           (ocamlc_command/1366 =
              (apply (field_imm 3 (global Stdlib__Printf!))
                [0: [2: 0 [11: " -c -i " [2: 0 0]]] "%s -c -i %s"]
                (field_imm 18 (global Dune__exe__Settings!))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 8 (global Dune__exe__Infer!))))
            output/1367 =
              (seq
                (apply (field_imm 16 (global Dune__exe__Infer!)) grammar/1365
                  (field_imm 8 (global Dune__exe__Infer!)) 0)
                (let
                  (*match*/2785 =
                     (apply (field_imm 4 (global Dune__exe__IO!))
                       ocamlc_command/1366))
                  (if (isint *match*/2785)
                    (apply (field_imm 98 (global Stdlib!)) 1)
                    (let (result/1368 =a (field_imm 0 *match*/2785))
                      (seq
                        (caml_sys_remove
                          (field_imm 8 (global Dune__exe__Infer!)))
                        result/1368))))))
           (apply (field_imm 17 (global Dune__exe__Infer!)) output/1367
             grammar/1365))))
    (setfield_ptr(root-init) 1 (global Dune__exe__Infer!) infer/1363))
  (let
    (write_query/1443 =
       (function filename/1445 grammar/1446
         (seq
           (apply (field_imm 16 (global Dune__exe__Infer!)) grammar/1446
             filename/1445 0)
           (apply (field_imm 98 (global Stdlib!)) 0))))
    (setfield_ptr(root-init) 3 (global Dune__exe__Infer!) write_query/1443))
  (let
    (read_reply/1447 =
       (function filename/1448 grammar/1449
         (apply (field_imm 17 (global Dune__exe__Infer!))
           (apply (field_imm 5 (global Dune__exe__IO!)) filename/1448)
           grammar/1449)))
    (setfield_ptr(root-init) 4 (global Dune__exe__Infer!) read_reply/1447))
  0)
(seq
  (let
    (ntvar/535 =
       (function symbol/537
         (makeblock 1
           (apply (field_imm 3 (global Stdlib__Printf!))
             [0: [11: "tv_" [2: 0 0]] "tv_%s"]
             (apply (field_imm 21 (global Dune__exe__Misc!)) symbol/537)))))
    (setfield_ptr(root-init) 0 (global Dune__exe__Infer!) ntvar/535))
  (let
    (encode/610 =
       (function symbol/612
         (apply (field_imm 3 (global Stdlib__Printf!))
           [0: [11: "xv_" [2: 0 0]] "xv_%s"]
           (apply (field_imm 21 (global Dune__exe__Misc!)) symbol/612))))
    (setfield_ptr(root-init) 5 (global Dune__exe__Infer!) encode/610))
  (let
    (decode/613 =
       (function s/615
         (let (n/616 =[int] (string.length s/615))
           (seq
             (if
               (not
                 (&& (>= n/616 3)
                   (caml_string_equal
                     (apply (field_imm 15 (global Stdlib__String!)) s/615 0
                       3)
                     "xv_")))
               (apply (field_imm 0 (global Dune__exe__Lexmli!)) 0) 0)
             (apply (field_imm 15 (global Stdlib__String!)) s/615 3
               (- n/616 3))))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Infer!) decode/613))
  (let (base/694 = (field_imm 24 (global Dune__exe__Settings!)))
    (setfield_ptr(root-init) 7 (global Dune__exe__Infer!) base/694))
  (let
    (mlname/755 =
       (apply (field_imm 27 (global Stdlib!))
         (field_imm 7 (global Dune__exe__Infer!)) ".ml"))
    (setfield_ptr(root-init) 8 (global Dune__exe__Infer!) mlname/755))
  (let
    (mliname/756 =
       (apply (field_imm 27 (global Stdlib!))
         (field_imm 7 (global Dune__exe__Infer!)) ".mli"))
    (setfield_ptr(root-init) 9 (global Dune__exe__Infer!) mliname/756))
  (let
    (usertype/757 =
       (function grammar/759 nt/760
         (try
           (makeblock 0
             (makeblock 0
               (apply (field_imm 15 (global Dune__exe__StringMap!)) nt/760
                 (field_imm 4 grammar/759))))
          with exn/2654
           (if (== exn/2654 (field_imm 7 (global Stdlib!))) 0
             (reraise exn/2654)))))
    (setfield_ptr(root-init) 10 (global Dune__exe__Infer!) usertype/757))
  (let
    (annotate_expr/859 =
       (function grammar/861 e/862 nt/863
         (let
           (e/864 =
              (apply (field_imm 18 (global Dune__exe__CodeBits!)) e/862
                (apply (field_imm 0 (global Dune__exe__Infer!)) nt/863)))
           (apply (field_imm 3 (global Dune__exe__Option!))
             (function t/904 e/905
               (apply (field_imm 18 (global Dune__exe__CodeBits!)) e/905
                 t/904))
             (apply (field_imm 10 (global Dune__exe__Infer!)) grammar/861
               nt/863)
             e/864))))
    (setfield_ptr(root-init) 11 (global Dune__exe__Infer!) annotate_expr/859))
  (let
    (annotate_pat/926 =
       (function grammar/928 p/929 nt/930
         (let
           (p/931 =
              (makeblock 6 p/929
                (apply (field_imm 0 (global Dune__exe__Infer!)) nt/930)))
           (apply (field_imm 3 (global Dune__exe__Option!))
             (function t/933 p/934 (makeblock 6 p/934 t/933))
             (apply (field_imm 10 (global Dune__exe__Infer!)) grammar/928
               nt/930)
             p/931))))
    (setfield_ptr(root-init) 12 (global Dune__exe__Infer!) annotate_pat/926))
  (let
    (tokentype/935 =
       (function grammar/937 symbol/938
         (let
           (props/939 =
              (apply (field_imm 15 (global Dune__exe__StringMap!)) symbol/938
                (field_imm 5 grammar/937))
            *match*/2655 = (field_imm 1 props/939))
           (if (isint *match*/2655)
             (field_imm 6 (global Dune__exe__CodeBits!))
             (makeblock 0 (field_imm 0 *match*/2655))))))
    (setfield_ptr(root-init) 13 (global Dune__exe__Infer!) tokentype/935))
  (let
    (actiondef/976 =
       (function grammar/978 symbol/979 branch/980
         (let
           (formals/981 =
              (apply (field_imm 25 (global Stdlib__List!))
                (function formals/1048 producer/1049
                  (let
                    (symbol/1050 =
                       (apply (field_imm 2 (global Dune__exe__BasicSyntax!))
                         producer/1049)
                     lid/1051 =
                       (apply (field_imm 1 (global Dune__exe__BasicSyntax!))
                         producer/1049)
                     id/1122 =
                       (apply (field_imm 0 (global Dune__exe__Positions!))
                         lid/1051)
                     loc/2661 =
                       (apply (field_imm 3 (global Stdlib__Printf!))
                         [0: [11: "_loc_" [2: 0 [12: '_' 0]]] "_loc_%s_"]
                         id/1122)
                     endo/2660 =
                       (apply (field_imm 3 (global Stdlib__Printf!))
                         [0:
                          [11: "_endofs_" [2: 0 [12: '_' 0]]] "_endofs_%s_"]
                         id/1122)
                     starto/2659 =
                       (apply (field_imm 3 (global Stdlib__Printf!))
                         [0:
                          [11: "_startofs_" [2: 0 [12: '_' 0]]]
                          "_startofs_%s_"]
                         id/1122)
                     endp/2658 =
                       (apply (field_imm 3 (global Stdlib__Printf!))
                         [0:
                          [11: "_endpos_" [2: 0 [12: '_' 0]]] "_endpos_%s_"]
                         id/1122)
                     startp/2657 =
                       (apply (field_imm 3 (global Stdlib__Printf!))
                         [0:
                          [11: "_startpos_" [2: 0 [12: '_' 0]]]
                          "_startpos_%s_"]
                         id/1122)
                     pid/1128 =
                       (apply (field_imm 0 (global Dune__exe__CodeBits!))
                         lid/1051)
                     pid/1129 =
                       (try
                         (makeblock 6 pid/1128
                           (apply (field_imm 13 (global Dune__exe__Infer!))
                             grammar/978 symbol/1050))
                        with exn/2656
                         (if (== exn/2656 (field_imm 7 (global Stdlib!)))
                           (apply (field_imm 12 (global Dune__exe__Infer!))
                             grammar/978 pid/1128 symbol/1050)
                           (reraise exn/2656))))
                    (makeblock 0 pid/1129
                      (makeblock 0
                        (makeblock 6 (makeblock 0 startp/2657)
                          (field_imm 11 (global Dune__exe__CodeBits!)))
                        (makeblock 0
                          (makeblock 6 (makeblock 0 endp/2658)
                            (field_imm 11 (global Dune__exe__CodeBits!)))
                          (makeblock 0
                            (makeblock 6 (makeblock 0 starto/2659)
                              (field_imm 8 (global Dune__exe__CodeBits!)))
                            (makeblock 0
                              (makeblock 6 (makeblock 0 endo/2660)
                                (field_imm 8 (global Dune__exe__CodeBits!)))
                              (makeblock 0
                                (makeblock 6 (makeblock 0 loc/2661)
                                  (field_imm 12
                                    (global Dune__exe__CodeBits!)))
                                formals/1048))))))))
                0 (field_imm 1 branch/980))
            formals/1130 =
              (makeblock 0
                (makeblock 6 [0: "_eRR"]
                  (field_imm 10 (global Dune__exe__CodeBits!)))
                (makeblock 0
                  (makeblock 6 [0: "_startpos"]
                    (field_imm 11 (global Dune__exe__CodeBits!)))
                  (makeblock 0
                    (makeblock 6 [0: "_endpos"]
                      (field_imm 11 (global Dune__exe__CodeBits!)))
                    (makeblock 0
                      (makeblock 6 [0: "_endpos__0_"]
                        (field_imm 11 (global Dune__exe__CodeBits!)))
                      (makeblock 0
                        (makeblock 6 [0: "_symbolstartpos"]
                          (field_imm 11 (global Dune__exe__CodeBits!)))
                        (makeblock 0
                          (makeblock 6 [0: "_startofs"]
                            (field_imm 8 (global Dune__exe__CodeBits!)))
                          (makeblock 0
                            (makeblock 6 [0: "_endofs"]
                              (field_imm 8 (global Dune__exe__CodeBits!)))
                            (makeblock 0
                              (makeblock 6 [0: "_endofs__0_"]
                                (field_imm 8 (global Dune__exe__CodeBits!)))
                              (makeblock 0
                                (makeblock 6 [0: "_symbolstartofs"]
                                  (field_imm 8 (global Dune__exe__CodeBits!)))
                                (makeblock 0
                                  (makeblock 6 [0: "_sloc"]
                                    (field_imm 12
                                      (global Dune__exe__CodeBits!)))
                                  (makeblock 0
                                    (makeblock 6 [0: "_loc"]
                                      (field_imm 12
                                        (global Dune__exe__CodeBits!)))
                                    formals/981)))))))))))
            body/1131 =
              (apply (field_imm 11 (global Dune__exe__Infer!)) grammar/978
                (apply (field_imm 4 (global Dune__exe__Action!))
                  (field_imm 2 branch/980))
                symbol/979))
           (if (isint formals/1130) body/1131
             (makeblock 1 formals/1130 body/1131)))))
    (setfield_ptr(root-init) 14 (global Dune__exe__Infer!) actiondef/976))
  (let
    (program/1168 =
       (function grammar/1170
         (let
           (*match*/2672 =
              (apply (field_imm 22 (global Dune__exe__StringMap!))
                (function symbol/1173 rule/1174 param/1181
                  (apply (field_imm 25 (global Stdlib__List!))
                    (function param/1180 branch/1179
                      (let
                        (bindings2/1178 =a (field_imm 1 param/1180)
                         bindings1/1177 =a (field_imm 0 param/1180))
                        (if
                          (apply (field_imm 5 (global Dune__exe__Action!))
                            (field_imm 2 branch/1179))
                          (makeblock 0
                            (makeblock 0
                              (makeblock 0 0
                                (apply
                                  (field_imm 14 (global Dune__exe__Infer!))
                                  grammar/1170 symbol/1173 branch/1179))
                              bindings1/1177)
                            bindings2/1178)
                          (makeblock 0 bindings1/1177
                            (makeblock 0
                              (makeblock 0 0
                                (apply
                                  (field_imm 14 (global Dune__exe__Infer!))
                                  grammar/1170 symbol/1173 branch/1179))
                              bindings2/1178)))))
                    (makeblock 0 (field_imm 0 param/1181)
                      (field_imm 1 param/1181))
                    (field_imm 0 rule/1174)))
                (field_imm 8 grammar/1170) [0: 0 0])
            *match*/2668 =
              (apply (field_imm 22 (global Dune__exe__StringMap!))
                (function nt/1184 param/1188 param/1187
                  (makeblock 0
                    (makeblock 0
                      (makeblock 0
                        (apply (field_imm 5 (global Dune__exe__Infer!))
                          (apply (field_imm 21 (global Dune__exe__Misc!))
                            nt/1184)))
                      (field_imm 0 param/1187))
                    (makeblock 0
                      (apply (field_imm 0 (global Dune__exe__Infer!))
                        nt/1184)
                      (field_imm 1 param/1187))))
                (field_imm 8 grammar/1170) [0: 0 0])
            def/1189 =
              (makeblock 0 (int,*,*) 1
                (makeblock 3 (field_imm 0 *match*/2668))
                (makeblock 3
                  (apply (field_imm 36 (global Stdlib!))
                    (field_imm 0 *match*/2672) (field_imm 1 *match*/2672))
                  (apply (field_imm 18 (global Dune__exe__CodeBits!))
                    (field_imm 25 (global Dune__exe__CodeBits!))
                    (makeblock 3 (field_imm 1 *match*/2668)))))
            begindef/1190 = [0: 1 [0: "menhir_begin_marker"] [9: 0]]
            enddef/1191 = [0: 1 [0: "menhir_end_marker"] [9: 0]])
           (makeblock 0
             (makeblock 0 (field_imm 2 grammar/1170)
               (apply (field_imm 36 (global Stdlib!))
                 (apply (field_imm 42 (global Dune__exe__CodeBits!))
                   (apply (field_imm 5 (global Dune__exe__TokenType!))
                     grammar/1170))
                 (makeblock 0 (makeblock 4 (field_imm 0 grammar/1170))
                   (makeblock 0
                     (makeblock 3 (int,*) 0
                       (makeblock 0 begindef/1190
                         (makeblock 0 def/1189 (makeblock 0 enddef/1191 0))))
                     (makeblock 0 (makeblock 4 (field_imm 1 grammar/1170)) 0)))))
             0))))
    (setfield_ptr(root-init) 15 (global Dune__exe__Infer!) program/1168))
  (let
    (write/1192 =
       (function grammar/1194 filename/1195 param/1217[int] : int
         (let
           (ml/1196 = (apply (field_imm 59 (global Stdlib!)) filename/1195)
            P/1216 =
              (apply
                (let (let/2673 = (field_imm 0 (global Dune__exe__Printer!)))
                  (field_imm 0 (global Dune__exe__Printer!)))
                (let (locate_stretches/1198 = (makeblock 0 filename/1195))
                  (makeblock 0 ml/1196 locate_stretches/1198))))
           (seq
             (apply (field_imm 0 P/1216)
               (apply (field_imm 15 (global Dune__exe__Infer!)) grammar/1194))
             (apply (field_imm 75 (global Stdlib!)) ml/1196)))))
    (setfield_ptr(root-init) 16 (global Dune__exe__Infer!) write/1192))
  (let
    (depend/1220 =
       (function postprocess/1222[int] grammar/1223
         (let
           (ocamldep_command/1224 =
              (apply (field_imm 3 (global Stdlib__Printf!))
                [0: [2: 0 [12: ' ' [2: 0 [12: ' ' [2: 0 0]]]]] "%s %s %s"]
                (field_imm 19 (global Dune__exe__Settings!))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 8 (global Dune__exe__Infer!)))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 9 (global Dune__exe__Infer!))))
            output/1247 =
              (apply (field_imm 5 (global Dune__exe__Option!))
                (apply (field_imm 1 (global Dune__exe__IO!))
                  (field_imm 8 (global Dune__exe__Infer!))
                  (function param/1265[int]
                    (apply (field_imm 1 (global Dune__exe__IO!))
                      (field_imm 9 (global Dune__exe__Infer!))
                      (function param/1264[int]
                        (apply (field_imm 2 (global Dune__exe__IO!))
                          (field_imm 8 (global Dune__exe__Infer!))
                          (apply (field_imm 16 (global Dune__exe__Infer!))
                            grammar/1223
                            (field_imm 8 (global Dune__exe__Infer!)))
                          (function param/1263[int]
                            (apply (field_imm 2 (global Dune__exe__IO!))
                              (field_imm 9 (global Dune__exe__Infer!))
                              (apply
                                (field_imm 7 (global Dune__exe__Interface!))
                                grammar/1223)
                              (function param/1262[int]
                                (apply (field_imm 4 (global Dune__exe__IO!))
                                  ocamldep_command/1224)))))))))))
           (seq (apply (field_imm 41 (global Stdlib!)) output/1247)
             (if postprocess/1222
               (let
                 (lexbuf/1266 =
                    (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                      output/1247)
                  lines/1315 =
                    (try
                      (apply (field_imm 3 (global Dune__exe__Lexdep!))
                        lexbuf/1266)
                     with exn/2681
                      (if
                        (== (field_imm 0 exn/2681)
                          (field_imm 0 (global Dune__exe__Lexdep!)))
                        (apply (field_imm 5 (global Dune__exe__Error!)) 0
                          [0: [2: 0 0] "%s"]
                          (apply (field_imm 27 (global Stdlib!))
                            (field_imm 1 exn/2681) output/1247))
                        (reraise exn/2681))))
                 (apply (field_imm 17 (global Stdlib__List!))
                   (function (param/2674, param/2675) : int
                     (if
                       (apply (field_imm 6 (global Stdlib__Filename!))
                         (field_imm 1 param/2674) ".cmo")
                       (let
                         (dependencies/1341 =
                            (apply (field_imm 43 (global Stdlib__List!))
                              (function (param/2678, param/2679) : int
                                (caml_string_notequal param/2678
                                  (field_imm 7 (global Dune__exe__Infer!))))
                              param/2675))
                         (if
                           (>
                             (apply (field_imm 0 (global Stdlib__List!))
                               dependencies/1341)
                             0)
                           (seq
                             (apply (field_imm 1 (global Stdlib__Printf!))
                               [0:
                                [2: 0 [11: ".ml " [2: 0 [11: ".mli:" 0]]]]
                                "%s.ml %s.mli:"]
                               (field_imm 7 (global Dune__exe__Infer!))
                               (field_imm 7 (global Dune__exe__Infer!)))
                             (apply (field_imm 17 (global Stdlib__List!))
                               (function (param/2676, param/2677) : int
                                 (apply
                                   (field_imm 1 (global Stdlib__Printf!))
                                   [0: [12: ' ' [2: 0 0]] " %s"] param/2677))
                               dependencies/1341)
                             (apply (field_imm 1 (global Stdlib__Printf!))
                               [0: [12: '\n' [10: 0]] "\n%!"]))
                           0))
                       0))
                   lines/1315))
               0)
             (apply (field_imm 98 (global Stdlib!)) 0)))))
    (setfield_ptr(root-init) 2 (global Dune__exe__Infer!) depend/1220))
  (let
    (read_reply/1348 =
       (function output/1350 grammar/1351
         (seq (apply (field_imm 0 (global Dune__exe__Error!)) 0)
           (let
             (env/1352 =
                (apply (field_imm 6 (global Dune__exe__Lexmli!))
                  (apply (field_imm 2 (global Stdlib__Lexing!)) 0
                    output/1350))
              env/1353 =
                (apply (field_imm 19 (global Stdlib__List!))
                  (function (param/2780, param/2781[int], param/2782[int])
                    (makeblock 0
                      (apply (field_imm 6 (global Dune__exe__Infer!))
                        param/2780)
                      (makeblock 1
                        (apply (field_imm 15 (global Stdlib__String!))
                          output/1350 param/2781 (- param/2782 param/2781)))))
                  env/1352)
              types/1358 =
                (apply (field_imm 22 (global Dune__exe__StringMap!))
                  (function symbol/1359 param/1362 types/1360
                    (let
                      (ocamltype/1361 =
                         (try
                           (apply (field_imm 48 (global Stdlib__List!))
                             (apply (field_imm 21 (global Dune__exe__Misc!))
                               symbol/1359)
                             env/1353)
                          with exn/2779
                           (if (== exn/2779 (field_imm 7 (global Stdlib!)))
                             (apply (field_imm 5 (global Dune__exe__Error!))
                               0
                               [0:
                                [11:
                                 "found no inferred type for "
                                 [2: 0 [12: '.' 0]]]
                                "found no inferred type for %s."]
                               symbol/1359)
                             (reraise exn/2779))))
                      (apply (field_imm 1 (global Dune__exe__StringMap!))
                        symbol/1359 ocamltype/1361 types/1360)))
                  (field_imm 8 grammar/1351) (field_imm 4 grammar/1351)))
             (makeblock 0 (field_imm 0 grammar/1351)
               (field_imm 1 grammar/1351) (field_imm 2 grammar/1351)
               (field_imm 3 grammar/1351) types/1358
               (field_imm 5 grammar/1351) (field_imm 6 grammar/1351)
               (field_imm 7 grammar/1351) (field_imm 8 grammar/1351))))))
    (setfield_ptr(root-init) 17 (global Dune__exe__Infer!) read_reply/1348))
  (let
    (infer/1363 =
       (function grammar/1365
         (let
           (ocamlc_command/1366 =
              (apply (field_imm 3 (global Stdlib__Printf!))
                [0: [2: 0 [11: " -c -i " [2: 0 0]]] "%s -c -i %s"]
                (field_imm 18 (global Dune__exe__Settings!))
                (apply (field_imm 20 (global Stdlib__Filename!))
                  (field_imm 8 (global Dune__exe__Infer!))))
            output/1367 =
              (seq
                (apply (field_imm 16 (global Dune__exe__Infer!)) grammar/1365
                  (field_imm 8 (global Dune__exe__Infer!)) 0)
                (let
                  (*match*/2785 =
                     (apply (field_imm 4 (global Dune__exe__IO!))
                       ocamlc_command/1366))
                  (if (isint *match*/2785)
                    (apply (field_imm 98 (global Stdlib!)) 1)
                    (seq
                      (caml_sys_remove
                        (field_imm 8 (global Dune__exe__Infer!)))
                      (field_imm 0 *match*/2785))))))
           (apply (field_imm 17 (global Dune__exe__Infer!)) output/1367
             grammar/1365))))
    (setfield_ptr(root-init) 1 (global Dune__exe__Infer!) infer/1363))
  (let
    (write_query/1443 =
       (function filename/1445 grammar/1446
         (seq
           (apply (field_imm 16 (global Dune__exe__Infer!)) grammar/1446
             filename/1445 0)
           (apply (field_imm 98 (global Stdlib!)) 0))))
    (setfield_ptr(root-init) 3 (global Dune__exe__Infer!) write_query/1443))
  (let
    (read_reply/1447 =
       (function filename/1448 grammar/1449
         (apply (field_imm 17 (global Dune__exe__Infer!))
           (apply (field_imm 5 (global Dune__exe__IO!)) filename/1448)
           grammar/1449)))
    (setfield_ptr(root-init) 4 (global Dune__exe__Infer!) read_reply/1447))
  0)

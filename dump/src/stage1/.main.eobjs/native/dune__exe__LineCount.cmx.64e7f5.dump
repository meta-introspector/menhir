[
  structure_item (src/lineCount.ml[1,23+0]..[88,5036+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/lineCount.ml[1,23+4]..[1,23+22])
          Ppat_var "__ocaml_lex_tables" (src/lineCount.ml[1,23+4]..[1,23+22])
        expression (src/lineCount.ml[1,23+25]..[88,5036+1])
          Pexp_record
          [
            "Lexing.lex_base" (src/lineCount.ml[2,50+2]..[2,50+17])
              expression (src/lineCount.ml[3,70+3]..[3,70+45])
                Pexp_constant PConst_string("\000\000\001\000\002\000\254\255\255\255",(src/lineCount.ml[3,70+4]..[3,70+44]),None)
            "Lexing.lex_backtrk" (src/lineCount.ml[4,117+2]..[4,117+20])
              expression (src/lineCount.ml[5,140+3]..[5,140+45])
                Pexp_constant PConst_string("\255\255\002\000\001\000\255\255\255\255",(src/lineCount.ml[5,140+4]..[5,140+44]),None)
            "Lexing.lex_default" (src/lineCount.ml[6,187+2]..[6,187+20])
              expression (src/lineCount.ml[7,210+3]..[7,210+45])
                Pexp_constant PConst_string("\001\000\001\000\255\255\000\000\000\000",(src/lineCount.ml[7,210+4]..[7,210+44]),None)
            "Lexing.lex_trans" (src/lineCount.ml[8,257+2]..[8,257+18])
              expression (src/lineCount.ml[9,278+3]..[41,2518+29])
                Pexp_constant PConst_stringsrc/lineCount.ml[9,278+4]..[41,2518+28]),None)
            "Lexing.lex_check" (src/lineCount.ml[42,2549+2]..[42,2549+18])
              expression (src/lineCount.ml[43,2570+3]..[75,4810+29])
                Pexp_constant PConst_stringsrc/lineCount.ml[43,2570+4]..[75,4810+28]),None)
            "Lexing.lex_base_code" (src/lineCount.ml[76,4841+2]..[76,4841+22])
              expression (src/lineCount.ml[77,4866+3]..[77,4866+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[77,4866+4]..[77,4866+4]),None)
            "Lexing.lex_backtrk_code" (src/lineCount.ml[78,4873+2]..[78,4873+25])
              expression (src/lineCount.ml[79,4901+3]..[79,4901+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[79,4901+4]..[79,4901+4]),None)
            "Lexing.lex_default_code" (src/lineCount.ml[80,4908+2]..[80,4908+25])
              expression (src/lineCount.ml[81,4936+3]..[81,4936+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[81,4936+4]..[81,4936+4]),None)
            "Lexing.lex_trans_code" (src/lineCount.ml[82,4943+2]..[82,4943+23])
              expression (src/lineCount.ml[83,4969+3]..[83,4969+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[83,4969+4]..[83,4969+4]),None)
            "Lexing.lex_check_code" (src/lineCount.ml[84,4976+2]..[84,4976+23])
              expression (src/lineCount.ml[85,5002+3]..[85,5002+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[85,5002+4]..[85,5002+4]),None)
            "Lexing.lex_code" (src/lineCount.ml[86,5009+2]..[86,5009+17])
              expression (src/lineCount.ml[87,5029+3]..[87,5029+5])
                Pexp_constant PConst_string("",(src/lineCount.ml[87,5029+4]..[87,5029+4]),None)
          ]
          None
    ]
  structure_item (src/lineCount.ml[90,5039+0]..[110,5530+54])
    Pstr_value Rec
    [
      <def>
        pattern (src/lineCount.ml[90,5039+8]..[90,5039+13])
          Ppat_var "count" (src/lineCount.ml[90,5039+8]..[90,5039+13])
        expression (src/lineCount.ml[90,5039+14]..[91,5064+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lineCount.ml[90,5039+14]..[90,5039+15])
            Ppat_var "n" (src/lineCount.ml[90,5039+14]..[90,5039+15])
          expression (src/lineCount.ml[90,5039+16]..[91,5064+35]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lineCount.ml[90,5039+16]..[90,5039+22])
              Ppat_var "lexbuf" (src/lineCount.ml[90,5039+16]..[90,5039+22])
            expression (src/lineCount.ml[91,5064+3]..[91,5064+35])
              Pexp_apply
              expression (src/lineCount.ml[91,5064+3]..[91,5064+24])
                Pexp_ident "__ocaml_lex_count_rec" (src/lineCount.ml[91,5064+3]..[91,5064+24])
              [
                <arg>
                Nolabel
                  expression (src/lineCount.ml[91,5064+25]..[91,5064+26])
                    Pexp_ident "n" (src/lineCount.ml[91,5064+25]..[91,5064+26])
                <arg>
                Nolabel
                  expression (src/lineCount.ml[91,5064+27]..[91,5064+33])
                    Pexp_ident "lexbuf" (src/lineCount.ml[91,5064+27]..[91,5064+33])
                <arg>
                Nolabel
                  expression (src/lineCount.ml[91,5064+34]..[91,5064+35])
                    Pexp_constant PConst_int (0,None)
              ]
      <def>
        pattern (src/lineCount.ml[92,5100+4]..[92,5100+25])
          Ppat_var "__ocaml_lex_count_rec" (src/lineCount.ml[92,5100+4]..[92,5100+25])
        expression (src/lineCount.ml[92,5100+26]..[110,5530+54]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/lineCount.ml[92,5100+26]..[92,5100+27])
            Ppat_var "n" (src/lineCount.ml[92,5100+26]..[92,5100+27])
          expression (src/lineCount.ml[92,5100+28]..[110,5530+54]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/lineCount.ml[92,5100+28]..[92,5100+34])
              Ppat_var "lexbuf" (src/lineCount.ml[92,5100+28]..[92,5100+34])
            expression (src/lineCount.ml[92,5100+35]..[110,5530+54]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/lineCount.ml[92,5100+35]..[92,5100+52])
                Ppat_var "__ocaml_lex_state" (src/lineCount.ml[92,5100+35]..[92,5100+52])
              expression (src/lineCount.ml[93,5155+2]..[110,5530+54])
                Pexp_match
                expression (src/lineCount.ml[93,5155+8]..[93,5155+65])
                  Pexp_apply
                  expression (src/lineCount.ml[93,5155+8]..[93,5155+21])
                    Pexp_ident "Lexing.engine" (src/lineCount.ml[93,5155+8]..[93,5155+21])
                  [
                    <arg>
                    Nolabel
                      expression (src/lineCount.ml[93,5155+22]..[93,5155+40])
                        Pexp_ident "__ocaml_lex_tables" (src/lineCount.ml[93,5155+22]..[93,5155+40])
                    <arg>
                    Nolabel
                      expression (src/lineCount.ml[93,5155+41]..[93,5155+58])
                        Pexp_ident "__ocaml_lex_state" (src/lineCount.ml[93,5155+41]..[93,5155+58])
                    <arg>
                    Nolabel
                      expression (src/lineCount.ml[93,5155+59]..[93,5155+65])
                        Pexp_ident "lexbuf" (src/lineCount.ml[93,5155+59]..[93,5155+65])
                  ]
                [
                  <case>
                    pattern (src/lineCount.ml[94,5226+8]..[94,5226+9])
                      Ppat_constant PConst_int (0,None)
                    expression (src/lineCount.mll[23,5264+4]..[23,5264+9])
                      Pexp_ident "n" (src/lineCount.mll[23,5264+6]..[23,5264+7])
                  <case>
                    pattern (src/lineCount.ml[99,5299+4]..[99,5299+5])
                      Ppat_constant PConst_int (1,None)
                    expression (src/lineCount.mll[25,5333+4]..[25,5333+28])
                      Pexp_apply
                      expression (src/lineCount.mll[25,5333+6]..[25,5333+11])
                        Pexp_ident "count" (src/lineCount.mll[25,5333+6]..[25,5333+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/lineCount.mll[25,5333+12]..[25,5333+19])
                            Pexp_apply
                            expression (src/lineCount.mll[25,5333+15]..[25,5333+16])
                              Pexp_ident "+" (src/lineCount.mll[25,5333+15]..[25,5333+16])
                            [
                              <arg>
                              Nolabel
                                expression (src/lineCount.mll[25,5333+13]..[25,5333+14])
                                  Pexp_ident "n" (src/lineCount.mll[25,5333+13]..[25,5333+14])
                              <arg>
                              Nolabel
                                expression (src/lineCount.mll[25,5333+17]..[25,5333+18])
                                  Pexp_constant PConst_int (1,None)
                            ]
                        <arg>
                        Nolabel
                          expression (src/lineCount.mll[25,5333+20]..[25,5333+26])
                            Pexp_ident "lexbuf" (src/lineCount.mll[25,5333+20]..[25,5333+26])
                      ]
                  <case>
                    pattern (src/lineCount.ml[104,5388+4]..[104,5388+5])
                      Ppat_constant PConst_int (2,None)
                    expression (src/lineCount.mll[27,5422+4]..[27,5422+22])
                      Pexp_apply
                      expression (src/lineCount.mll[27,5422+6]..[27,5422+11])
                        Pexp_ident "count" (src/lineCount.mll[27,5422+6]..[27,5422+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/lineCount.mll[27,5422+12]..[27,5422+13])
                            Pexp_ident "n" (src/lineCount.mll[27,5422+12]..[27,5422+13])
                        <arg>
                        Nolabel
                          expression (src/lineCount.mll[27,5422+14]..[27,5422+20])
                            Pexp_ident "lexbuf" (src/lineCount.mll[27,5422+14]..[27,5422+20])
                      ]
                  <case>
                    pattern (src/lineCount.ml[109,5471+4]..[109,5471+21])
                      Ppat_var "__ocaml_lex_state" (src/lineCount.ml[109,5471+4]..[109,5471+21])
                    expression (src/lineCount.ml[109,5471+25]..[110,5530+54])
                      Pexp_sequence
                      expression (src/lineCount.ml[109,5471+25]..[109,5471+57])
                        Pexp_apply
                        expression (src/lineCount.ml[109,5471+25]..[109,5471+50])
                          Pexp_field
                          expression (src/lineCount.ml[109,5471+25]..[109,5471+31])
                            Pexp_ident "lexbuf" (src/lineCount.ml[109,5471+25]..[109,5471+31])
                          "Lexing.refill_buff" (src/lineCount.ml[109,5471+32]..[109,5471+50])
                        [
                          <arg>
                          Nolabel
                            expression (src/lineCount.ml[109,5471+51]..[109,5471+57])
                              Pexp_ident "lexbuf" (src/lineCount.ml[109,5471+51]..[109,5471+57])
                        ]
                      expression (src/lineCount.ml[110,5530+6]..[110,5530+54])
                        Pexp_apply
                        expression (src/lineCount.ml[110,5530+6]..[110,5530+27])
                          Pexp_ident "__ocaml_lex_count_rec" (src/lineCount.ml[110,5530+6]..[110,5530+27])
                        [
                          <arg>
                          Nolabel
                            expression (src/lineCount.ml[110,5530+28]..[110,5530+29])
                              Pexp_ident "n" (src/lineCount.ml[110,5530+28]..[110,5530+29])
                          <arg>
                          Nolabel
                            expression (src/lineCount.ml[110,5530+30]..[110,5530+36])
                              Pexp_ident "lexbuf" (src/lineCount.ml[110,5530+30]..[110,5530+36])
                          <arg>
                          Nolabel
                            expression (src/lineCount.ml[110,5530+37]..[110,5530+54])
                              Pexp_ident "__ocaml_lex_state" (src/lineCount.ml[110,5530+37]..[110,5530+54])
                        ]
                ]
    ]
]

let __ocaml_lex_tables =
  {
    Lexing.lex_base = "\000\000\001\000\002\000\254\255\255\255";
    Lexing.lex_backtrk = "\255\255\002\000\001\000\255\255\255\255";
    Lexing.lex_default = "\001\000\001\000\255\255\000\000\000\000";
    Lexing.lex_trans =

    Lexing.lex_check =

    Lexing.lex_base_code = "";
    Lexing.lex_backtrk_code = "";
    Lexing.lex_default_code = "";
    Lexing.lex_trans_code = "";
    Lexing.lex_check_code = "";
    Lexing.lex_code = ""
  }
let rec count n lexbuf = __ocaml_lex_count_rec n lexbuf 0
and __ocaml_lex_count_rec n lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> n
  | 1 -> count (n + 1) lexbuf
  | 2 -> count n lexbuf
  | __ocaml_lex_state ->
      (lexbuf.Lexing.refill_buff lexbuf;
       __ocaml_lex_count_rec n lexbuf __ocaml_lex_state)
[
  structure_item (src/lineCount.ml[1,23+0]..src/lineCount.ml[88,5036+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/lineCount.ml[1,23+4]..src/lineCount.ml[1,23+22])
          Tpat_var "__ocaml_lex_tables/396"
        expression (src/lineCount.ml[1,23+25]..src/lineCount.ml[88,5036+1])
          Texp_record
            fields =
              [
                "Lexing.lex_base"
                  expression (src/lineCount.ml[3,70+3]..src/lineCount.ml[3,70+45])
                    Texp_constant Const_string("\000\000\001\000\002\000\254\255\255\255",(src/lineCount.ml[3,70+4]..src/lineCount.ml[3,70+44]),None)
                "Lexing.lex_backtrk"
                  expression (src/lineCount.ml[5,140+3]..src/lineCount.ml[5,140+45])
                    Texp_constant Const_string("\255\255\002\000\001\000\255\255\255\255",(src/lineCount.ml[5,140+4]..src/lineCount.ml[5,140+44]),None)
                "Lexing.lex_default"
                  expression (src/lineCount.ml[7,210+3]..src/lineCount.ml[7,210+45])
                    Texp_constant Const_string("\001\000\001\000\255\255\000\000\000\000",(src/lineCount.ml[7,210+4]..src/lineCount.ml[7,210+44]),None)
                "Lexing.lex_trans"
                  expression (src/lineCount.ml[9,278+3]..src/lineCount.ml[41,2518+29])
                    Texp_constant Const_stringsrc/lineCount.ml[9,278+4]..src/lineCount.ml[41,2518+28]),None)
                "Lexing.lex_check"
                  expression (src/lineCount.ml[43,2570+3]..src/lineCount.ml[75,4810+29])
                    Texp_constant Const_stringsrc/lineCount.ml[43,2570+4]..src/lineCount.ml[75,4810+28]),None)
                "Lexing.lex_base_code"
                  expression (src/lineCount.ml[77,4866+3]..src/lineCount.ml[77,4866+5])
                    Texp_constant Const_string("",(src/lineCount.ml[77,4866+4]..src/lineCount.ml[77,4866+4]),None)
                "Lexing.lex_backtrk_code"
                  expression (src/lineCount.ml[79,4901+3]..src/lineCount.ml[79,4901+5])
                    Texp_constant Const_string("",(src/lineCount.ml[79,4901+4]..src/lineCount.ml[79,4901+4]),None)
                "Lexing.lex_default_code"
                  expression (src/lineCount.ml[81,4936+3]..src/lineCount.ml[81,4936+5])
                    Texp_constant Const_string("",(src/lineCount.ml[81,4936+4]..src/lineCount.ml[81,4936+4]),None)
                "Lexing.lex_trans_code"
                  expression (src/lineCount.ml[83,4969+3]..src/lineCount.ml[83,4969+5])
                    Texp_constant Const_string("",(src/lineCount.ml[83,4969+4]..src/lineCount.ml[83,4969+4]),None)
                "Lexing.lex_check_code"
                  expression (src/lineCount.ml[85,5002+3]..src/lineCount.ml[85,5002+5])
                    Texp_constant Const_string("",(src/lineCount.ml[85,5002+4]..src/lineCount.ml[85,5002+4]),None)
                "Lexing.lex_code"
                  expression (src/lineCount.ml[87,5029+3]..src/lineCount.ml[87,5029+5])
                    Texp_constant Const_string("",(src/lineCount.ml[87,5029+4]..src/lineCount.ml[87,5029+4]),None)
              ]
            representation =
              Record_regular
            extended_expression =
              None
    ]
  structure_item (src/lineCount.ml[90,5039+0]..src/lineCount.ml[110,5530+54])
    Tstr_value Rec
    [
      <def>
        pattern (src/lineCount.ml[90,5039+8]..src/lineCount.ml[90,5039+13])
          Tpat_var "count/421"
        expression (src/lineCount.ml[90,5039+14]..src/lineCount.ml[91,5064+35]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lineCount.ml[90,5039+14]..src/lineCount.ml[90,5039+15])
                Tpat_var "n/423"
              expression (src/lineCount.ml[90,5039+16]..src/lineCount.ml[91,5064+35]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lineCount.ml[90,5039+16]..src/lineCount.ml[90,5039+22])
                      Tpat_var "lexbuf/424"
                    expression (src/lineCount.ml[91,5064+3]..src/lineCount.ml[91,5064+35])
                      Texp_apply
                      expression (src/lineCount.ml[91,5064+3]..src/lineCount.ml[91,5064+24])
                        Texp_ident "__ocaml_lex_count_rec/422"
                      [
                        <arg>
                          Nolabel
                          expression (src/lineCount.ml[91,5064+25]..src/lineCount.ml[91,5064+26])
                            Texp_ident "n/423"
                        <arg>
                          Nolabel
                          expression (src/lineCount.ml[91,5064+27]..src/lineCount.ml[91,5064+33])
                            Texp_ident "lexbuf/424"
                        <arg>
                          Nolabel
                          expression (src/lineCount.ml[91,5064+34]..src/lineCount.ml[91,5064+35])
                            Texp_constant Const_int 0
                      ]
                ]
          ]
      <def>
        pattern (src/lineCount.ml[92,5100+4]..src/lineCount.ml[92,5100+25])
          Tpat_var "__ocaml_lex_count_rec/422"
        expression (src/lineCount.ml[92,5100+26]..src/lineCount.ml[110,5530+54]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/lineCount.ml[92,5100+26]..src/lineCount.ml[92,5100+27])
                Tpat_var "n/425"
              expression (src/lineCount.ml[92,5100+28]..src/lineCount.ml[110,5530+54]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/lineCount.ml[92,5100+28]..src/lineCount.ml[92,5100+34])
                      Tpat_var "lexbuf/426"
                    expression (src/lineCount.ml[92,5100+35]..src/lineCount.ml[110,5530+54]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/lineCount.ml[92,5100+35]..src/lineCount.ml[92,5100+52])
                            Tpat_var "__ocaml_lex_state/427"
                          expression (src/lineCount.ml[93,5155+2]..src/lineCount.ml[110,5530+54])
                            Texp_match
                            expression (src/lineCount.ml[93,5155+8]..src/lineCount.ml[93,5155+65])
                              Texp_apply
                              expression (src/lineCount.ml[93,5155+8]..src/lineCount.ml[93,5155+21])
                                Texp_ident "Stdlib!.Lexing.engine"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/lineCount.ml[93,5155+22]..src/lineCount.ml[93,5155+40])
                                    Texp_ident "__ocaml_lex_tables/396"
                                <arg>
                                  Nolabel
                                  expression (src/lineCount.ml[93,5155+41]..src/lineCount.ml[93,5155+58])
                                    Texp_ident "__ocaml_lex_state/427"
                                <arg>
                                  Nolabel
                                  expression (src/lineCount.ml[93,5155+59]..src/lineCount.ml[93,5155+65])
                                    Texp_ident "lexbuf/426"
                              ]
                            [
                              <case>
                                pattern (src/lineCount.ml[94,5226+8]..src/lineCount.ml[94,5226+9])
                                  Tpat_value
                                  pattern (src/lineCount.ml[94,5226+8]..src/lineCount.ml[94,5226+9])
                                    Tpat_constant Const_int 0
                                expression (src/lineCount.mll[23,5264+4]..src/lineCount.mll[23,5264+9])
                                  Texp_ident "n/425"
                              <case>
                                pattern (src/lineCount.ml[99,5299+4]..src/lineCount.ml[99,5299+5])
                                  Tpat_value
                                  pattern (src/lineCount.ml[99,5299+4]..src/lineCount.ml[99,5299+5])
                                    Tpat_constant Const_int 1
                                expression (src/lineCount.mll[25,5333+4]..src/lineCount.mll[25,5333+28])
                                  Texp_apply
                                  expression (src/lineCount.mll[25,5333+6]..src/lineCount.mll[25,5333+11])
                                    Texp_ident "count/421"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lineCount.mll[25,5333+12]..src/lineCount.mll[25,5333+19])
                                        Texp_apply
                                        expression (src/lineCount.mll[25,5333+15]..src/lineCount.mll[25,5333+16])
                                          Texp_ident "Stdlib!.+"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/lineCount.mll[25,5333+13]..src/lineCount.mll[25,5333+14])
                                              Texp_ident "n/425"
                                          <arg>
                                            Nolabel
                                            expression (src/lineCount.mll[25,5333+17]..src/lineCount.mll[25,5333+18])
                                              Texp_constant Const_int 1
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/lineCount.mll[25,5333+20]..src/lineCount.mll[25,5333+26])
                                        Texp_ident "lexbuf/426"
                                  ]
                              <case>
                                pattern (src/lineCount.ml[104,5388+4]..src/lineCount.ml[104,5388+5])
                                  Tpat_value
                                  pattern (src/lineCount.ml[104,5388+4]..src/lineCount.ml[104,5388+5])
                                    Tpat_constant Const_int 2
                                expression (src/lineCount.mll[27,5422+4]..src/lineCount.mll[27,5422+22])
                                  Texp_apply
                                  expression (src/lineCount.mll[27,5422+6]..src/lineCount.mll[27,5422+11])
                                    Texp_ident "count/421"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/lineCount.mll[27,5422+12]..src/lineCount.mll[27,5422+13])
                                        Texp_ident "n/425"
                                    <arg>
                                      Nolabel
                                      expression (src/lineCount.mll[27,5422+14]..src/lineCount.mll[27,5422+20])
                                        Texp_ident "lexbuf/426"
                                  ]
                              <case>
                                pattern (src/lineCount.ml[109,5471+4]..src/lineCount.ml[109,5471+21])
                                  Tpat_value
                                  pattern (src/lineCount.ml[109,5471+4]..src/lineCount.ml[109,5471+21])
                                    Tpat_var "__ocaml_lex_state/452"
                                expression (src/lineCount.ml[109,5471+25]..src/lineCount.ml[110,5530+54])
                                  Texp_sequence
                                  expression (src/lineCount.ml[109,5471+25]..src/lineCount.ml[109,5471+57])
                                    Texp_apply
                                    expression (src/lineCount.ml[109,5471+25]..src/lineCount.ml[109,5471+50])
                                      Texp_field
                                      expression (src/lineCount.ml[109,5471+25]..src/lineCount.ml[109,5471+31])
                                        Texp_ident "lexbuf/426"
                                      "Lexing.refill_buff"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lineCount.ml[109,5471+51]..src/lineCount.ml[109,5471+57])
                                          Texp_ident "lexbuf/426"
                                    ]
                                  expression (src/lineCount.ml[110,5530+6]..src/lineCount.ml[110,5530+54])
                                    Texp_apply
                                    expression (src/lineCount.ml[110,5530+6]..src/lineCount.ml[110,5530+27])
                                      Texp_ident "__ocaml_lex_count_rec/422"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/lineCount.ml[110,5530+28]..src/lineCount.ml[110,5530+29])
                                          Texp_ident "n/425"
                                      <arg>
                                        Nolabel
                                        expression (src/lineCount.ml[110,5530+30]..src/lineCount.ml[110,5530+36])
                                          Texp_ident "lexbuf/426"
                                      <arg>
                                        Nolabel
                                        expression (src/lineCount.ml[110,5530+37]..src/lineCount.ml[110,5530+54])
                                          Texp_ident "__ocaml_lex_state/452"
                                    ]
                            ]
                      ]
                ]
          ]
    ]
]

{<Dune__exe__LineCount>
 "__ocaml_lex_count_rec"[value] -> <Dune__exe__LineCount.2>;
 "__ocaml_lex_tables"[value] -> <Dune__exe__LineCount.0>;
 "count"[value] -> <Dune__exe__LineCount.1>;
 }

(seq
  (let
    (__ocaml_lex_tables/396 =
       [0:
        "\000\000\001\000\002\000\254\255\255\255"
        "\255\255\002\000\001\000\255\255\255\255"
        "\001\000\001\000\255\255\000\000\000\000"
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\255\255\003\000\002\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\255\255\000\000"

        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__LineCount!)
      __ocaml_lex_tables/396))
  (letrec
    (count/421
       (function n/423[int] lexbuf/424 : int
         (apply __ocaml_lex_count_rec/422 n/423 lexbuf/424 0))
      __ocaml_lex_count_rec/422
        (function n/425[int] lexbuf/426 __ocaml_lex_state/427[int] : int
          (let
            (__ocaml_lex_state/452 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__LineCount!))
                 __ocaml_lex_state/427 lexbuf/426))
            (catch
              (if (isout 2 __ocaml_lex_state/452) (exit 1)
                (switch* __ocaml_lex_state/452
                 case int 0: n/425
                 case int 1: (apply count/421 (+ n/425 1) lexbuf/426)
                 case int 2: (apply count/421 n/425 lexbuf/426)))
             with (1)
              (seq (apply (field_imm 0 lexbuf/426) lexbuf/426)
                (apply __ocaml_lex_count_rec/422 n/425 lexbuf/426
                  __ocaml_lex_state/452))))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__LineCount!) count/421)
      (setfield_ptr(root-init) 2 (global Dune__exe__LineCount!)
        __ocaml_lex_count_rec/422)))
  0)
(seq
  (let
    (__ocaml_lex_tables/396 =
       [0:
        "\000\000\001\000\002\000\254\255\255\255"
        "\255\255\002\000\001\000\255\255\255\255"
        "\001\000\001\000\255\255\000\000\000\000"


        "" "" "" "" "" ""])
    (setfield_ptr(root-init) 0 (global Dune__exe__LineCount!)
      __ocaml_lex_tables/396))
  (letrec
    (count/421
       (function n/423[int] lexbuf/424 : int
         (apply __ocaml_lex_count_rec/422 n/423 lexbuf/424 0))
      __ocaml_lex_count_rec/422
        (function n/425[int] lexbuf/426 __ocaml_lex_state/427[int] : int
          (let
            (__ocaml_lex_state/452 =
               (apply (field_imm 19 (global Stdlib__Lexing!))
                 (field_imm 0 (global Dune__exe__LineCount!))
                 __ocaml_lex_state/427 lexbuf/426))
            (if (isout 2 __ocaml_lex_state/452)
              (seq (apply (field_imm 0 lexbuf/426) lexbuf/426)
                (apply __ocaml_lex_count_rec/422 n/425 lexbuf/426
                  __ocaml_lex_state/452))
              (switch* __ocaml_lex_state/452
               case int 0: n/425
               case int 1: (apply count/421 (+ n/425 1) lexbuf/426)
               case int 2: (apply count/421 n/425 lexbuf/426))))))
    (seq (setfield_ptr(root-init) 1 (global Dune__exe__LineCount!) count/421)
      (setfield_ptr(root-init) 2 (global Dune__exe__LineCount!)
        __ocaml_lex_count_rec/422)))
  0)

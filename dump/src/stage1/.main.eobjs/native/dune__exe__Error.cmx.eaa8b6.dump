[
  structure_item (src/error.ml[14,995+0]..[14,995+11])
    Pstr_open Fresh
    module_expr (src/error.ml[14,995+5]..[14,995+11])
      Pmod_ident "Printf" (src/error.ml[14,995+5]..[14,995+11])
  structure_item (src/error.ml[20,1171+0]..[21,1185+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[20,1171+4]..[20,1171+11])
          Ppat_var "enabled" (src/error.ml[20,1171+4]..[20,1171+11])
        expression (src/error.ml[21,1185+2]..[21,1185+10])
          Pexp_apply
          expression (src/error.ml[21,1185+2]..[21,1185+5])
            Pexp_ident "ref" (src/error.ml[21,1185+2]..[21,1185+5])
          [
            <arg>
            Nolabel
              expression (src/error.ml[21,1185+6]..[21,1185+10])
                Pexp_construct "true" (src/error.ml[21,1185+6]..[21,1185+10])
                None
          ]
    ]
  structure_item (src/error.ml[23,1197+0]..[24,1213+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[23,1197+4]..[23,1197+10])
          Ppat_var "enable" (src/error.ml[23,1197+4]..[23,1197+10])
        expression (src/error.ml[23,1197+11]..[24,1213+17]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[23,1197+11]..[23,1197+13])
            Ppat_construct "()" (src/error.ml[23,1197+11]..[23,1197+13])
            None
          expression (src/error.ml[24,1213+2]..[24,1213+17])
            Pexp_apply
            expression (src/error.ml[24,1213+10]..[24,1213+12])
              Pexp_ident ":=" (src/error.ml[24,1213+10]..[24,1213+12])
            [
              <arg>
              Nolabel
                expression (src/error.ml[24,1213+2]..[24,1213+9])
                  Pexp_ident "enabled" (src/error.ml[24,1213+2]..[24,1213+9])
              <arg>
              Nolabel
                expression (src/error.ml[24,1213+13]..[24,1213+17])
                  Pexp_construct "true" (src/error.ml[24,1213+13]..[24,1213+17])
                  None
            ]
    ]
  structure_item (src/error.ml[26,1232+0]..[27,1249+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[26,1232+4]..[26,1232+11])
          Ppat_var "disable" (src/error.ml[26,1232+4]..[26,1232+11])
        expression (src/error.ml[26,1232+12]..[27,1249+18]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[26,1232+12]..[26,1232+14])
            Ppat_construct "()" (src/error.ml[26,1232+12]..[26,1232+14])
            None
          expression (src/error.ml[27,1249+2]..[27,1249+18])
            Pexp_apply
            expression (src/error.ml[27,1249+10]..[27,1249+12])
              Pexp_ident ":=" (src/error.ml[27,1249+10]..[27,1249+12])
            [
              <arg>
              Nolabel
                expression (src/error.ml[27,1249+2]..[27,1249+9])
                  Pexp_ident "enabled" (src/error.ml[27,1249+2]..[27,1249+9])
              <arg>
              Nolabel
                expression (src/error.ml[27,1249+13]..[27,1249+18])
                  Pexp_construct "false" (src/error.ml[27,1249+13]..[27,1249+18])
                  None
            ]
    ]
  structure_item (src/error.ml[41,2001+0]..[47,2094+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[41,2001+4]..[41,2001+6])
          Ppat_construct "()" (src/error.ml[41,2001+4]..[41,2001+6])
          None
        expression (src/error.ml[42,2010+2]..[47,2094+3])
          Pexp_open Fresh
          module_expr (src/error.ml[42,2010+2]..[42,2010+10])
            Pmod_ident "Settings" (src/error.ml[42,2010+2]..[42,2010+10])
          expression (src/error.ml[42,2010+12]..[46,2085+8])
            Pexp_match
            expression (src/error.ml[42,2010+18]..[42,2010+23])
              Pexp_ident "infer" (src/error.ml[42,2010+18]..[42,2010+23])
            [
              <case>
                pattern (src/error.ml[43,2039+4]..[43,2039+17])
                  Ppat_construct "IMReadReply" (src/error.ml[43,2039+4]..[43,2039+15])
                  Some
                    []
                    pattern (src/error.ml[43,2039+16]..[43,2039+17])
                      Ppat_any
                expression (src/error.ml[44,2060+6]..[44,2060+15])
                  Pexp_apply
                  expression (src/error.ml[44,2060+6]..[44,2060+13])
                    Pexp_ident "disable" (src/error.ml[44,2060+6]..[44,2060+13])
                  [
                    <arg>
                    Nolabel
                      expression (src/error.ml[44,2060+13]..[44,2060+15])
                        Pexp_construct "()" (src/error.ml[44,2060+13]..[44,2060+15])
                        None
                  ]
              <case>
                pattern (src/error.ml[45,2076+4]..[45,2076+5])
                  Ppat_any
                expression (src/error.ml[46,2085+6]..[46,2085+8])
                  Pexp_construct "()" (src/error.ml[46,2085+6]..[46,2085+8])
                  None
            ]
    ]
  structure_item (src/error.ml[53,2214+0]..[55,2283+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[53,2214+4]..[53,2214+7])
          Ppat_var "log" (src/error.ml[53,2214+4]..[53,2214+7])
        expression (src/error.ml[53,2214+8]..[55,2283+36]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[53,2214+8]..[53,2214+12])
            Ppat_var "kind" (src/error.ml[53,2214+8]..[53,2214+12])
          expression (src/error.ml[53,2214+13]..[55,2283+36]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[53,2214+13]..[53,2214+22])
              Ppat_var "verbosity" (src/error.ml[53,2214+13]..[53,2214+22])
            expression (src/error.ml[53,2214+23]..[55,2283+36]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/error.ml[53,2214+23]..[53,2214+26])
                Ppat_var "msg" (src/error.ml[53,2214+23]..[53,2214+26])
              expression (src/error.ml[54,2243+2]..[55,2283+36])
                Pexp_ifthenelse
                expression (src/error.ml[54,2243+5]..[54,2243+34])
                  Pexp_apply
                  expression (src/error.ml[54,2243+23]..[54,2243+25])
                    Pexp_ident "&&" (src/error.ml[54,2243+23]..[54,2243+25])
                  [
                    <arg>
                    Nolabel
                      expression (src/error.ml[54,2243+5]..[54,2243+22])
                        Pexp_apply
                        expression (src/error.ml[54,2243+10]..[54,2243+12])
                          Pexp_ident ">=" (src/error.ml[54,2243+10]..[54,2243+12])
                        [
                          <arg>
                          Nolabel
                            expression (src/error.ml[54,2243+5]..[54,2243+9])
                              Pexp_ident "kind" (src/error.ml[54,2243+5]..[54,2243+9])
                          <arg>
                          Nolabel
                            expression (src/error.ml[54,2243+13]..[54,2243+22])
                              Pexp_ident "verbosity" (src/error.ml[54,2243+13]..[54,2243+22])
                        ]
                    <arg>
                    Nolabel
                      expression (src/error.ml[54,2243+26]..[54,2243+34])
                        Pexp_apply
                        expression (src/error.ml[54,2243+26]..[54,2243+27])
                          Pexp_ident "!" (src/error.ml[54,2243+26]..[54,2243+27])
                        [
                          <arg>
                          Nolabel
                            expression (src/error.ml[54,2243+27]..[54,2243+34])
                              Pexp_ident "enabled" (src/error.ml[54,2243+27]..[54,2243+34])
                        ]
                  ]
                expression (src/error.ml[55,2283+4]..[55,2283+36])
                  Pexp_apply
                  expression (src/error.ml[55,2283+4]..[55,2283+18])
                    Pexp_ident "Printf.fprintf" (src/error.ml[55,2283+4]..[55,2283+18])
                  [
                    <arg>
                    Nolabel
                      expression (src/error.ml[55,2283+19]..[55,2283+25])
                        Pexp_ident "stderr" (src/error.ml[55,2283+19]..[55,2283+25])
                    <arg>
                    Nolabel
                      expression (src/error.ml[55,2283+26]..[55,2283+32])
                        Pexp_constant PConst_string("%t%!",(src/error.ml[55,2283+27]..[55,2283+31]),None)
                    <arg>
                    Nolabel
                      expression (src/error.ml[55,2283+33]..[55,2283+36])
                        Pexp_ident "msg" (src/error.ml[55,2283+33]..[55,2283+36])
                  ]
                None
    ]
  structure_item (src/error.ml[57,2321+0]..[58,2332+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[57,2321+4]..[57,2321+8])
          Ppat_var "logG" (src/error.ml[57,2321+4]..[57,2321+8])
        expression (src/error.ml[58,2332+2]..[58,2332+19])
          Pexp_apply
          expression (src/error.ml[58,2332+2]..[58,2332+5])
            Pexp_ident "log" (src/error.ml[58,2332+2]..[58,2332+5])
          [
            <arg>
            Nolabel
              expression (src/error.ml[58,2332+6]..[58,2332+19])
                Pexp_ident "Settings.logG" (src/error.ml[58,2332+6]..[58,2332+19])
          ]
    ]
  structure_item (src/error.ml[60,2353+0]..[61,2364+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[60,2353+4]..[60,2353+8])
          Ppat_var "logA" (src/error.ml[60,2353+4]..[60,2353+8])
        expression (src/error.ml[61,2364+2]..[61,2364+19])
          Pexp_apply
          expression (src/error.ml[61,2364+2]..[61,2364+5])
            Pexp_ident "log" (src/error.ml[61,2364+2]..[61,2364+5])
          [
            <arg>
            Nolabel
              expression (src/error.ml[61,2364+6]..[61,2364+19])
                Pexp_ident "Settings.logA" (src/error.ml[61,2364+6]..[61,2364+19])
          ]
    ]
  structure_item (src/error.ml[63,2385+0]..[64,2396+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[63,2385+4]..[63,2385+8])
          Ppat_var "logC" (src/error.ml[63,2385+4]..[63,2385+8])
        expression (src/error.ml[64,2396+2]..[64,2396+19])
          Pexp_apply
          expression (src/error.ml[64,2396+2]..[64,2396+5])
            Pexp_ident "log" (src/error.ml[64,2396+2]..[64,2396+5])
          [
            <arg>
            Nolabel
              expression (src/error.ml[64,2396+6]..[64,2396+19])
                Pexp_ident "Settings.logC" (src/error.ml[64,2396+6]..[64,2396+19])
          ]
    ]
  structure_item (src/error.ml[70,2529+0]..[73,2649+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[70,2529+4]..[70,2529+19])
          Ppat_var "print_positions" (src/error.ml[70,2529+4]..[70,2529+19])
        expression (src/error.ml[70,2529+20]..[73,2649+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[70,2529+20]..[70,2529+21])
            Ppat_var "f" (src/error.ml[70,2529+20]..[70,2529+21])
          expression (src/error.ml[70,2529+22]..[73,2649+13]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[70,2529+22]..[70,2529+31])
              Ppat_var "positions" (src/error.ml[70,2529+22]..[70,2529+31])
            expression (src/error.ml[71,2563+2]..[73,2649+13])
              Pexp_apply
              expression (src/error.ml[71,2563+2]..[71,2563+11])
                Pexp_ident "List.iter" (src/error.ml[71,2563+2]..[71,2563+11])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[71,2563+12]..[73,2649+3])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/error.ml[71,2563+17]..[71,2563+25])
                      Ppat_var "position" (src/error.ml[71,2563+17]..[71,2563+25])
                    expression (src/error.ml[72,2592+4]..[72,2592+56])
                      Pexp_apply
                      expression (src/error.ml[72,2592+4]..[72,2592+11])
                        Pexp_ident "fprintf" (src/error.ml[72,2592+4]..[72,2592+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/error.ml[72,2592+12]..[72,2592+13])
                            Pexp_ident "f" (src/error.ml[72,2592+12]..[72,2592+13])
                        <arg>
                        Nolabel
                          expression (src/error.ml[72,2592+14]..[72,2592+21])
                            Pexp_constant PConst_string("%s:\n",(src/error.ml[72,2592+15]..[72,2592+20]),None)
                        <arg>
                        Nolabel
                          expression (src/error.ml[72,2592+22]..[72,2592+56])
                            Pexp_apply
                            expression (src/error.ml[72,2592+23]..[72,2592+46])
                              Pexp_ident "Positions.string_of_pos" (src/error.ml[72,2592+23]..[72,2592+46])
                            [
                              <arg>
                              Nolabel
                                expression (src/error.ml[72,2592+47]..[72,2592+55])
                                  Pexp_ident "position" (src/error.ml[72,2592+47]..[72,2592+55])
                            ]
                      ]
                <arg>
                Nolabel
                  expression (src/error.ml[73,2649+4]..[73,2649+13])
                    Pexp_ident "positions" (src/error.ml[73,2649+4]..[73,2649+13])
              ]
    ]
  structure_item (src/error.ml[75,2664+0]..[79,2860+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[75,2664+4]..[75,2664+11])
          Ppat_var "display" (src/error.ml[75,2664+4]..[75,2664+11])
        expression (src/error.ml[75,2664+12]..[79,2860+29]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[75,2664+12]..[75,2664+24])
            Ppat_var "continuation" (src/error.ml[75,2664+12]..[75,2664+24])
          expression (src/error.ml[75,2664+25]..[79,2860+29]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[75,2664+25]..[75,2664+31])
              Ppat_var "header" (src/error.ml[75,2664+25]..[75,2664+31])
            expression (src/error.ml[75,2664+32]..[79,2860+29]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/error.ml[75,2664+32]..[75,2664+41])
                Ppat_var "positions" (src/error.ml[75,2664+32]..[75,2664+41])
              expression (src/error.ml[75,2664+42]..[79,2860+29]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (src/error.ml[75,2664+42]..[75,2664+48])
                  Ppat_var "format" (src/error.ml[75,2664+42]..[75,2664+48])
                expression (src/error.ml[76,2715+2]..[79,2860+29])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (src/error.ml[76,2715+6]..[76,2715+13])
                        Ppat_var "kprintf" (src/error.ml[76,2715+6]..[76,2715+13])
                      expression (src/error.ml[76,2715+16]..[76,2715+70])
                        Pexp_ifthenelse
                        expression (src/error.ml[76,2715+19]..[76,2715+27])
                          Pexp_apply
                          expression (src/error.ml[76,2715+19]..[76,2715+20])
                            Pexp_ident "!" (src/error.ml[76,2715+19]..[76,2715+20])
                          [
                            <arg>
                            Nolabel
                              expression (src/error.ml[76,2715+20]..[76,2715+27])
                                Pexp_ident "enabled" (src/error.ml[76,2715+20]..[76,2715+27])
                          ]
                        expression (src/error.ml[76,2715+33]..[76,2715+48])
                          Pexp_ident "Printf.kfprintf" (src/error.ml[76,2715+33]..[76,2715+48])
                        Some
                          expression (src/error.ml[76,2715+54]..[76,2715+70])
                            Pexp_ident "Printf.ikfprintf" (src/error.ml[76,2715+54]..[76,2715+70])
                  ]
                  expression (src/error.ml[77,2789+2]..[79,2860+29])
                    Pexp_apply
                    expression (src/error.ml[77,2789+2]..[77,2789+9])
                      Pexp_ident "kprintf" (src/error.ml[77,2789+2]..[77,2789+9])
                    [
                      <arg>
                      Nolabel
                        expression (src/error.ml[77,2789+10]..[77,2789+22])
                          Pexp_ident "continuation" (src/error.ml[77,2789+10]..[77,2789+22])
                      <arg>
                      Nolabel
                        expression (src/error.ml[77,2789+23]..[77,2789+29])
                          Pexp_ident "stderr" (src/error.ml[77,2789+23]..[77,2789+29])
                      <arg>
                      Nolabel
                        expression (src/error.ml[78,2819+4]..[78,2819+40])
                          Pexp_apply
                          expression (src/error.ml[78,2819+10]..[78,2819+12])
                            Pexp_ident "^^" (src/error.ml[78,2819+10]..[78,2819+12])
                          [
                            <arg>
                            Nolabel
                              expression (src/error.ml[78,2819+5]..[78,2819+9])
                                Pexp_constant PConst_string("%a",(src/error.ml[78,2819+6]..[78,2819+8]),None)
                            <arg>
                            Nolabel
                              expression (src/error.ml[78,2819+13]..[78,2819+39])
                                Pexp_apply
                                expression (src/error.ml[78,2819+20]..[78,2819+22])
                                  Pexp_ident "^^" (src/error.ml[78,2819+20]..[78,2819+22])
                                [
                                  <arg>
                                  Nolabel
                                    expression (src/error.ml[78,2819+13]..[78,2819+19])
                                      Pexp_ident "header" (src/error.ml[78,2819+13]..[78,2819+19])
                                  <arg>
                                  Nolabel
                                    expression (src/error.ml[78,2819+23]..[78,2819+39])
                                      Pexp_apply
                                      expression (src/error.ml[78,2819+30]..[78,2819+32])
                                        Pexp_ident "^^" (src/error.ml[78,2819+30]..[78,2819+32])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (src/error.ml[78,2819+23]..[78,2819+29])
                                            Pexp_ident "format" (src/error.ml[78,2819+23]..[78,2819+29])
                                        <arg>
                                        Nolabel
                                          expression (src/error.ml[78,2819+33]..[78,2819+39])
                                            Pexp_constant PConst_string("\n%!",(src/error.ml[78,2819+34]..[78,2819+38]),None)
                                      ]
                                ]
                          ]
                      <arg>
                      Nolabel
                        expression (src/error.ml[79,2860+4]..[79,2860+19])
                          Pexp_ident "print_positions" (src/error.ml[79,2860+4]..[79,2860+19])
                      <arg>
                      Nolabel
                        expression (src/error.ml[79,2860+20]..[79,2860+29])
                          Pexp_ident "positions" (src/error.ml[79,2860+20]..[79,2860+29])
                    ]
    ]
  structure_item (src/error.ml[81,2891+0]..[85,2966+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[81,2891+4]..[81,2891+9])
          Ppat_var "error" (src/error.ml[81,2891+4]..[81,2891+9])
        expression (src/error.ml[81,2891+10]..[85,2966+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[81,2891+10]..[81,2891+19])
            Ppat_var "positions" (src/error.ml[81,2891+10]..[81,2891+19])
          expression (src/error.ml[81,2891+20]..[85,2966+20]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[81,2891+20]..[81,2891+26])
              Ppat_var "format" (src/error.ml[81,2891+20]..[81,2891+26])
            expression (src/error.ml[82,2920+2]..[85,2966+20])
              Pexp_apply
              expression (src/error.ml[82,2920+2]..[82,2920+9])
                Pexp_ident "display" (src/error.ml[82,2920+2]..[82,2920+9])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[83,2930+4]..[83,2930+21])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/error.ml[83,2930+9]..[83,2930+10])
                      Ppat_any
                    expression (src/error.ml[83,2930+14]..[83,2930+20])
                      Pexp_apply
                      expression (src/error.ml[83,2930+14]..[83,2930+18])
                        Pexp_ident "exit" (src/error.ml[83,2930+14]..[83,2930+18])
                      [
                        <arg>
                        Nolabel
                          expression (src/error.ml[83,2930+19]..[83,2930+20])
                            Pexp_constant PConst_int (1,None)
                      ]
                <arg>
                Nolabel
                  expression (src/error.ml[84,2952+4]..[84,2952+13])
                    Pexp_constant PConst_string("Error: ",(src/error.ml[84,2952+5]..[84,2952+12]),None)
                <arg>
                Nolabel
                  expression (src/error.ml[85,2966+4]..[85,2966+13])
                    Pexp_ident "positions" (src/error.ml[85,2966+4]..[85,2966+13])
                <arg>
                Nolabel
                  expression (src/error.ml[85,2966+14]..[85,2966+20])
                    Pexp_ident "format" (src/error.ml[85,2966+14]..[85,2966+20])
              ]
    ]
  structure_item (src/error.ml[87,2988+0]..[91,3063+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[87,2988+4]..[87,2988+11])
          Ppat_var "warning" (src/error.ml[87,2988+4]..[87,2988+11])
        expression (src/error.ml[87,2988+12]..[91,3063+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[87,2988+12]..[87,2988+21])
            Ppat_var "positions" (src/error.ml[87,2988+12]..[87,2988+21])
          expression (src/error.ml[87,2988+22]..[91,3063+20]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[87,2988+22]..[87,2988+28])
              Ppat_var "format" (src/error.ml[87,2988+22]..[87,2988+28])
            expression (src/error.ml[88,3019+2]..[91,3063+20])
              Pexp_apply
              expression (src/error.ml[88,3019+2]..[88,3019+9])
                Pexp_ident "display" (src/error.ml[88,3019+2]..[88,3019+9])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[89,3029+4]..[89,3029+17])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (src/error.ml[89,3029+9]..[89,3029+10])
                      Ppat_any
                    expression (src/error.ml[89,3029+14]..[89,3029+16])
                      Pexp_construct "()" (src/error.ml[89,3029+14]..[89,3029+16])
                      None
                <arg>
                Nolabel
                  expression (src/error.ml[90,3047+4]..[90,3047+15])
                    Pexp_constant PConst_string("Warning: ",(src/error.ml[90,3047+5]..[90,3047+14]),None)
                <arg>
                Nolabel
                  expression (src/error.ml[91,3063+4]..[91,3063+13])
                    Pexp_ident "positions" (src/error.ml[91,3063+4]..[91,3063+13])
                <arg>
                Nolabel
                  expression (src/error.ml[91,3063+14]..[91,3063+20])
                    Pexp_ident "format" (src/error.ml[91,3063+14]..[91,3063+20])
              ]
    ]
  structure_item (src/error.ml[93,3085+0]..[94,3100+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[93,3085+4]..[93,3085+10])
          Ppat_var "errorp" (src/error.ml[93,3085+4]..[93,3085+10])
        expression (src/error.ml[93,3085+11]..[94,3100+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[93,3085+11]..[93,3085+12])
            Ppat_var "v" (src/error.ml[93,3085+11]..[93,3085+12])
          expression (src/error.ml[94,3100+2]..[94,3100+32])
            Pexp_apply
            expression (src/error.ml[94,3100+2]..[94,3100+7])
              Pexp_ident "error" (src/error.ml[94,3100+2]..[94,3100+7])
            [
              <arg>
              Nolabel
                expression (src/error.ml[94,3100+8]..[94,3100+32])
                  Pexp_construct "::" (src/error.ml[94,3100+10]..[94,3100+32]) ghost
                  Some
                    expression (src/error.ml[94,3100+10]..[94,3100+32]) ghost
                      Pexp_tuple
                      [
                        expression (src/error.ml[94,3100+10]..[94,3100+30])
                          Pexp_apply
                          expression (src/error.ml[94,3100+10]..[94,3100+28])
                            Pexp_ident "Positions.position" (src/error.ml[94,3100+10]..[94,3100+28])
                          [
                            <arg>
                            Nolabel
                              expression (src/error.ml[94,3100+29]..[94,3100+30])
                                Pexp_ident "v" (src/error.ml[94,3100+29]..[94,3100+30])
                          ]
                        expression (src/error.ml[94,3100+31]..[94,3100+32]) ghost
                          Pexp_construct "[]" (src/error.ml[94,3100+31]..[94,3100+32]) ghost
                          None
                      ]
            ]
    ]
  structure_item (src/error.ml[100,3297+0]..[101,3313+10])
    Pstr_type Rec
    [
      type_declaration "category" (src/error.ml[100,3297+5]..[100,3297+13]) (src/error.ml[100,3297+0]..[101,3313+10])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/error.ml[101,3313+2]..[101,3313+10])
              Ptyp_constr "ref" (src/error.ml[101,3313+7]..[101,3313+10])
              [
                core_type (src/error.ml[101,3313+2]..[101,3313+6])
                  Ptyp_constr "bool" (src/error.ml[101,3313+2]..[101,3313+6])
                  []
              ]
    ]
  structure_item (src/error.ml[103,3325+0]..[104,3347+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[103,3325+4]..[103,3325+16])
          Ppat_var "new_category" (src/error.ml[103,3325+4]..[103,3325+16])
        expression (src/error.ml[103,3325+17]..[104,3347+11]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[103,3325+17]..[103,3325+19])
            Ppat_construct "()" (src/error.ml[103,3325+17]..[103,3325+19])
            None
          expression (src/error.ml[104,3347+2]..[104,3347+11])
            Pexp_apply
            expression (src/error.ml[104,3347+2]..[104,3347+5])
              Pexp_ident "ref" (src/error.ml[104,3347+2]..[104,3347+5])
            [
              <arg>
              Nolabel
                expression (src/error.ml[104,3347+6]..[104,3347+11])
                  Pexp_construct "false" (src/error.ml[104,3347+6]..[104,3347+11])
                  None
            ]
    ]
  structure_item (src/error.ml[106,3360+0]..[110,3455+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[106,3360+4]..[106,3360+10])
          Ppat_var "signal" (src/error.ml[106,3360+4]..[106,3360+10])
        expression (src/error.ml[106,3360+11]..[110,3455+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[106,3360+11]..[106,3360+19])
            Ppat_var "category" (src/error.ml[106,3360+11]..[106,3360+19])
          expression (src/error.ml[106,3360+20]..[110,3455+20]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (src/error.ml[106,3360+20]..[106,3360+29])
              Ppat_var "positions" (src/error.ml[106,3360+20]..[106,3360+29])
            expression (src/error.ml[106,3360+30]..[110,3455+20]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (src/error.ml[106,3360+30]..[106,3360+36])
                Ppat_var "format" (src/error.ml[106,3360+30]..[106,3360+36])
              expression (src/error.ml[107,3399+2]..[110,3455+20])
                Pexp_apply
                expression (src/error.ml[107,3399+2]..[107,3399+9])
                  Pexp_ident "display" (src/error.ml[107,3399+2]..[107,3399+9])
                [
                  <arg>
                  Nolabel
                    expression (src/error.ml[108,3409+4]..[108,3409+31])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (src/error.ml[108,3409+9]..[108,3409+10])
                        Ppat_any
                      expression (src/error.ml[108,3409+14]..[108,3409+30])
                        Pexp_apply
                        expression (src/error.ml[108,3409+23]..[108,3409+25])
                          Pexp_ident ":=" (src/error.ml[108,3409+23]..[108,3409+25])
                        [
                          <arg>
                          Nolabel
                            expression (src/error.ml[108,3409+14]..[108,3409+22])
                              Pexp_ident "category" (src/error.ml[108,3409+14]..[108,3409+22])
                          <arg>
                          Nolabel
                            expression (src/error.ml[108,3409+26]..[108,3409+30])
                              Pexp_construct "true" (src/error.ml[108,3409+26]..[108,3409+30])
                              None
                        ]
                  <arg>
                  Nolabel
                    expression (src/error.ml[109,3441+4]..[109,3441+13])
                      Pexp_constant PConst_string("Error: ",(src/error.ml[109,3441+5]..[109,3441+12]),None)
                  <arg>
                  Nolabel
                    expression (src/error.ml[110,3455+4]..[110,3455+13])
                      Pexp_ident "positions" (src/error.ml[110,3455+4]..[110,3455+13])
                  <arg>
                  Nolabel
                    expression (src/error.ml[110,3455+14]..[110,3455+20])
                      Pexp_ident "format" (src/error.ml[110,3455+14]..[110,3455+20])
                ]
    ]
  structure_item (src/error.ml[112,3477+0]..[114,3520+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[112,3477+4]..[112,3477+11])
          Ppat_var "exit_if" (src/error.ml[112,3477+4]..[112,3477+11])
        expression (src/error.ml[112,3477+12]..[114,3520+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[112,3477+12]..[112,3477+20])
            Ppat_var "category" (src/error.ml[112,3477+12]..[112,3477+20])
          expression (src/error.ml[113,3500+2]..[114,3520+10])
            Pexp_ifthenelse
            expression (src/error.ml[113,3500+5]..[113,3500+14])
              Pexp_apply
              expression (src/error.ml[113,3500+5]..[113,3500+6])
                Pexp_ident "!" (src/error.ml[113,3500+5]..[113,3500+6])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[113,3500+6]..[113,3500+14])
                    Pexp_ident "category" (src/error.ml[113,3500+6]..[113,3500+14])
              ]
            expression (src/error.ml[114,3520+4]..[114,3520+10])
              Pexp_apply
              expression (src/error.ml[114,3520+4]..[114,3520+8])
                Pexp_ident "exit" (src/error.ml[114,3520+4]..[114,3520+8])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[114,3520+9]..[114,3520+10])
                    Pexp_constant PConst_int (1,None)
              ]
            None
    ]
  structure_item (src/error.ml[116,3532+0]..[124,3673+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[116,3532+4]..[116,3532+21])
          Ppat_var "with_new_category" (src/error.ml[116,3532+4]..[116,3532+21])
        expression (src/error.ml[116,3532+22]..[124,3673+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[116,3532+22]..[116,3532+23])
            Ppat_var "f" (src/error.ml[116,3532+22]..[116,3532+23])
          expression (src/error.ml[117,3558+2]..[124,3673+13])
            Pexp_let Nonrec
            [
              <def>
                pattern (src/error.ml[117,3558+6]..[117,3558+7])
                  Ppat_var "c" (src/error.ml[117,3558+6]..[117,3558+7])
                expression (src/error.ml[117,3558+10]..[117,3558+24])
                  Pexp_apply
                  expression (src/error.ml[117,3558+10]..[117,3558+22])
                    Pexp_ident "new_category" (src/error.ml[117,3558+10]..[117,3558+22])
                  [
                    <arg>
                    Nolabel
                      expression (src/error.ml[117,3558+22]..[117,3558+24])
                        Pexp_construct "()" (src/error.ml[117,3558+22]..[117,3558+24])
                        None
                  ]
            ]
            expression (src/error.ml[118,3586+2]..[124,3673+13])
              Pexp_match
              expression (src/error.ml[118,3586+8]..[118,3586+11])
                Pexp_apply
                expression (src/error.ml[118,3586+8]..[118,3586+9])
                  Pexp_ident "f" (src/error.ml[118,3586+8]..[118,3586+9])
                [
                  <arg>
                  Nolabel
                    expression (src/error.ml[118,3586+10]..[118,3586+11])
                      Pexp_ident "c" (src/error.ml[118,3586+10]..[118,3586+11])
                ]
              [
                <case>
                  pattern (src/error.ml[119,3603+4]..[119,3603+5])
                    Ppat_var "y" (src/error.ml[119,3603+4]..[119,3603+5])
                  expression (src/error.ml[120,3612+6]..[121,3629+7])
                    Pexp_sequence
                    expression (src/error.ml[120,3612+6]..[120,3612+15])
                      Pexp_apply
                      expression (src/error.ml[120,3612+6]..[120,3612+13])
                        Pexp_ident "exit_if" (src/error.ml[120,3612+6]..[120,3612+13])
                      [
                        <arg>
                        Nolabel
                          expression (src/error.ml[120,3612+14]..[120,3612+15])
                            Pexp_ident "c" (src/error.ml[120,3612+14]..[120,3612+15])
                      ]
                    expression (src/error.ml[121,3629+6]..[121,3629+7])
                      Pexp_ident "y" (src/error.ml[121,3629+6]..[121,3629+7])
                <case>
                  pattern (src/error.ml[122,3637+4]..[122,3637+15])
                    Ppat_exception
                    pattern (src/error.ml[122,3637+14]..[122,3637+15])
                      Ppat_var "e" (src/error.ml[122,3637+14]..[122,3637+15])
                  expression (src/error.ml[123,3656+6]..[124,3673+13])
                    Pexp_sequence
                    expression (src/error.ml[123,3656+6]..[123,3656+15])
                      Pexp_apply
                      expression (src/error.ml[123,3656+6]..[123,3656+13])
                        Pexp_ident "exit_if" (src/error.ml[123,3656+6]..[123,3656+13])
                      [
                        <arg>
                        Nolabel
                          expression (src/error.ml[123,3656+14]..[123,3656+15])
                            Pexp_ident "c" (src/error.ml[123,3656+14]..[123,3656+15])
                      ]
                    expression (src/error.ml[124,3673+6]..[124,3673+13])
                      Pexp_apply
                      expression (src/error.ml[124,3673+6]..[124,3673+11])
                        Pexp_ident "raise" (src/error.ml[124,3673+6]..[124,3673+11])
                      [
                        <arg>
                        Nolabel
                          expression (src/error.ml[124,3673+12]..[124,3673+13])
                            Pexp_ident "e" (src/error.ml[124,3673+12]..[124,3673+13])
                      ]
              ]
    ]
  structure_item (src/error.ml[130,3851+0]..[131,3875+16])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[130,3851+4]..[130,3851+21])
          Ppat_var "grammatical_error" (src/error.ml[130,3851+4]..[130,3851+21])
        expression (src/error.ml[131,3875+2]..[131,3875+16])
          Pexp_apply
          expression (src/error.ml[131,3875+2]..[131,3875+14])
            Pexp_ident "new_category" (src/error.ml[131,3875+2]..[131,3875+14])
          [
            <arg>
            Nolabel
              expression (src/error.ml[131,3875+14]..[131,3875+16])
                Pexp_construct "()" (src/error.ml[131,3875+14]..[131,3875+16])
                None
          ]
    ]
  structure_item (src/error.ml[133,3893+0]..[134,3919+71])
    Pstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[133,3893+4]..[133,3893+19])
          Ppat_var "grammar_warning" (src/error.ml[133,3893+4]..[133,3893+19])
        expression (src/error.ml[133,3893+20]..[134,3919+71]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (src/error.ml[133,3893+20]..[133,3893+23])
            Ppat_var "pos" (src/error.ml[133,3893+20]..[133,3893+23])
          expression (src/error.ml[134,3919+2]..[134,3919+71])
            Pexp_ifthenelse
            expression (src/error.ml[134,3919+5]..[134,3919+20])
              Pexp_ident "Settings.strict" (src/error.ml[134,3919+5]..[134,3919+20])
            expression (src/error.ml[134,3919+26]..[134,3919+54])
              Pexp_apply
              expression (src/error.ml[134,3919+26]..[134,3919+32])
                Pexp_ident "signal" (src/error.ml[134,3919+26]..[134,3919+32])
              [
                <arg>
                Nolabel
                  expression (src/error.ml[134,3919+33]..[134,3919+50])
                    Pexp_ident "grammatical_error" (src/error.ml[134,3919+33]..[134,3919+50])
                <arg>
                Nolabel
                  expression (src/error.ml[134,3919+51]..[134,3919+54])
                    Pexp_ident "pos" (src/error.ml[134,3919+51]..[134,3919+54])
              ]
            Some
              expression (src/error.ml[134,3919+60]..[134,3919+71])
                Pexp_apply
                expression (src/error.ml[134,3919+60]..[134,3919+67])
                  Pexp_ident "warning" (src/error.ml[134,3919+60]..[134,3919+67])
                [
                  <arg>
                  Nolabel
                    expression (src/error.ml[134,3919+68]..[134,3919+71])
                      Pexp_ident "pos" (src/error.ml[134,3919+68]..[134,3919+71])
                ]
    ]
]

open Printf
let enabled = ref true
let enable () = enabled := true
let disable () = enabled := false
let () =
  let open Settings in
    match infer with | IMReadReply _ -> disable () | _ -> ()
let log kind verbosity msg =
  if (kind >= verbosity) && (!enabled) then Printf.fprintf stderr "%t%!" msg
let logG = log Settings.logG
let logA = log Settings.logA
let logC = log Settings.logC
let print_positions f positions =
  List.iter
    (fun position -> fprintf f "%s:\n" (Positions.string_of_pos position))
    positions
let display continuation header positions format =
  let kprintf = if !enabled then Printf.kfprintf else Printf.ikfprintf in
  kprintf continuation stderr ("%a" ^^ (header ^^ (format ^^ "\n%!")))
    print_positions positions
let error positions format =
  display (fun _ -> exit 1) "Error: " positions format
let warning positions format =
  display (fun _ -> ()) "Warning: " positions format
let errorp v = error [Positions.position v]
type category = bool ref
let new_category () = ref false
let signal category positions format =
  display (fun _ -> category := true) "Error: " positions format
let exit_if category = if !category then exit 1
let with_new_category f =
  let c = new_category () in
  match f c with | y -> (exit_if c; y) | exception e -> (exit_if c; raise e)
let grammatical_error = new_category ()
let grammar_warning pos =
  if Settings.strict then signal grammatical_error pos else warning pos
[
  structure_item (src/error.ml[14,995+0]..src/error.ml[14,995+11])
    Tstr_open Fresh
    module_expr (src/error.ml[14,995+5]..src/error.ml[14,995+11])
      Tmod_ident "Stdlib!.Printf"
  structure_item (src/error.ml[20,1171+0]..src/error.ml[21,1185+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[20,1171+4]..src/error.ml[20,1171+11])
          Tpat_var "enabled/409"
        expression (src/error.ml[21,1185+2]..src/error.ml[21,1185+10])
          Texp_apply
          expression (src/error.ml[21,1185+2]..src/error.ml[21,1185+5])
            Texp_ident "Stdlib!.ref"
          [
            <arg>
              Nolabel
              expression (src/error.ml[21,1185+6]..src/error.ml[21,1185+10])
                Texp_construct "true"
                []
          ]
    ]
  structure_item (src/error.ml[23,1197+0]..src/error.ml[24,1213+17])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[23,1197+4]..src/error.ml[23,1197+10])
          Tpat_var "enable/410"
        expression (src/error.ml[23,1197+11]..src/error.ml[24,1213+17]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[23,1197+11]..src/error.ml[23,1197+13])
                Tpat_construct "()"
                []
                None
              expression (src/error.ml[24,1213+2]..src/error.ml[24,1213+17])
                Texp_apply
                expression (src/error.ml[24,1213+10]..src/error.ml[24,1213+12])
                  Texp_ident "Stdlib!.:="
                [
                  <arg>
                    Nolabel
                    expression (src/error.ml[24,1213+2]..src/error.ml[24,1213+9])
                      Texp_ident "enabled/409"
                  <arg>
                    Nolabel
                    expression (src/error.ml[24,1213+13]..src/error.ml[24,1213+17])
                      Texp_construct "true"
                      []
                ]
          ]
    ]
  structure_item (src/error.ml[26,1232+0]..src/error.ml[27,1249+18])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[26,1232+4]..src/error.ml[26,1232+11])
          Tpat_var "disable/413"
        expression (src/error.ml[26,1232+12]..src/error.ml[27,1249+18]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[26,1232+12]..src/error.ml[26,1232+14])
                Tpat_construct "()"
                []
                None
              expression (src/error.ml[27,1249+2]..src/error.ml[27,1249+18])
                Texp_apply
                expression (src/error.ml[27,1249+10]..src/error.ml[27,1249+12])
                  Texp_ident "Stdlib!.:="
                [
                  <arg>
                    Nolabel
                    expression (src/error.ml[27,1249+2]..src/error.ml[27,1249+9])
                      Texp_ident "enabled/409"
                  <arg>
                    Nolabel
                    expression (src/error.ml[27,1249+13]..src/error.ml[27,1249+18])
                      Texp_construct "false"
                      []
                ]
          ]
    ]
  structure_item (src/error.ml[41,2001+0]..src/error.ml[47,2094+3])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[41,2001+4]..src/error.ml[41,2001+6])
          Tpat_construct "()"
          []
          None
        expression (src/error.ml[42,2010+2]..src/error.ml[47,2094+3])
          Texp_open Fresh
          module_expr (src/error.ml[42,2010+2]..src/error.ml[42,2010+10])
            Tmod_ident "Dune__exe!.Settings"
          expression (src/error.ml[42,2010+12]..src/error.ml[46,2085+8])
            Texp_match
            expression (src/error.ml[42,2010+18]..src/error.ml[42,2010+23])
              Texp_ident "Dune__exe!.Settings.infer"
            [
              <case>
                pattern (src/error.ml[43,2039+4]..src/error.ml[43,2039+17])
                  Tpat_value
                  pattern (src/error.ml[43,2039+4]..src/error.ml[43,2039+17])
                    Tpat_construct "IMReadReply"
                    [
                      pattern (src/error.ml[43,2039+16]..src/error.ml[43,2039+17])
                        Tpat_any
                    ]
                    None
                expression (src/error.ml[44,2060+6]..src/error.ml[44,2060+15])
                  Texp_apply
                  expression (src/error.ml[44,2060+6]..src/error.ml[44,2060+13])
                    Texp_ident "disable/413"
                  [
                    <arg>
                      Nolabel
                      expression (src/error.ml[44,2060+13]..src/error.ml[44,2060+15])
                        Texp_construct "()"
                        []
                  ]
              <case>
                pattern (src/error.ml[45,2076+4]..src/error.ml[45,2076+5])
                  Tpat_value
                  pattern (src/error.ml[45,2076+4]..src/error.ml[45,2076+5])
                    Tpat_any
                expression (src/error.ml[46,2085+6]..src/error.ml[46,2085+8])
                  Texp_construct "()"
                  []
            ]
    ]
  structure_item (src/error.ml[53,2214+0]..src/error.ml[55,2283+36])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[53,2214+4]..src/error.ml[53,2214+7])
          Tpat_var "log/536"
        expression (src/error.ml[53,2214+8]..src/error.ml[55,2283+36]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[53,2214+8]..src/error.ml[53,2214+12])
                Tpat_var "kind/537"
              expression (src/error.ml[53,2214+13]..src/error.ml[55,2283+36]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[53,2214+13]..src/error.ml[53,2214+22])
                      Tpat_var "verbosity/538"
                    expression (src/error.ml[53,2214+23]..src/error.ml[55,2283+36]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/error.ml[53,2214+23]..src/error.ml[53,2214+26])
                            Tpat_var "msg/539"
                          expression (src/error.ml[54,2243+2]..src/error.ml[55,2283+36])
                            Texp_ifthenelse
                            expression (src/error.ml[54,2243+5]..src/error.ml[54,2243+34])
                              Texp_apply
                              expression (src/error.ml[54,2243+23]..src/error.ml[54,2243+25])
                                Texp_ident "Stdlib!.&&"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/error.ml[54,2243+5]..src/error.ml[54,2243+22])
                                    Texp_apply
                                    expression (src/error.ml[54,2243+10]..src/error.ml[54,2243+12])
                                      Texp_ident "Stdlib!.>="
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[54,2243+5]..src/error.ml[54,2243+9])
                                          Texp_ident "kind/537"
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[54,2243+13]..src/error.ml[54,2243+22])
                                          Texp_ident "verbosity/538"
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/error.ml[54,2243+26]..src/error.ml[54,2243+34])
                                    Texp_apply
                                    expression (src/error.ml[54,2243+26]..src/error.ml[54,2243+27])
                                      Texp_ident "Stdlib!.!"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[54,2243+27]..src/error.ml[54,2243+34])
                                          Texp_ident "enabled/409"
                                    ]
                              ]
                            expression (src/error.ml[55,2283+4]..src/error.ml[55,2283+36])
                              Texp_apply
                              expression (src/error.ml[55,2283+4]..src/error.ml[55,2283+18])
                                Texp_ident "Stdlib!.Printf.fprintf"
                              [
                                <arg>
                                  Nolabel
                                  expression (src/error.ml[55,2283+19]..src/error.ml[55,2283+25])
                                    Texp_ident "Stdlib!.stderr"
                                <arg>
                                  Nolabel
                                  expression (src/error.ml[55,2283+26]..src/error.ml[55,2283+32])
                                    Texp_construct "CamlinternalFormatBasics.Format"
                                    [
                                      expression (src/error.ml[55,2283+26]..src/error.ml[55,2283+32]) ghost
                                        Texp_construct "CamlinternalFormatBasics.Theta"
                                        [
                                          expression (src/error.ml[55,2283+26]..src/error.ml[55,2283+32]) ghost
                                            Texp_construct "CamlinternalFormatBasics.Flush"
                                            [
                                              expression (src/error.ml[55,2283+26]..src/error.ml[55,2283+32]) ghost
                                                Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                []
                                            ]
                                        ]
                                      expression (src/error.ml[55,2283+26]..src/error.ml[55,2283+32]) ghost
                                        Texp_constant Const_string("%t%!",(src/error.ml[55,2283+26]..src/error.ml[55,2283+32]) ghost,None)
                                    ]
                                <arg>
                                  Nolabel
                                  expression (src/error.ml[55,2283+33]..src/error.ml[55,2283+36])
                                    Texp_ident "msg/539"
                              ]
                            None
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[57,2321+0]..src/error.ml[58,2332+19])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[57,2321+4]..src/error.ml[57,2321+8])
          Tpat_var "logG/563"
        expression (src/error.ml[58,2332+2]..src/error.ml[58,2332+19])
          Texp_apply
          expression (src/error.ml[58,2332+2]..src/error.ml[58,2332+5])
            Texp_ident "log/536"
          [
            <arg>
              Nolabel
              expression (src/error.ml[58,2332+6]..src/error.ml[58,2332+19])
                Texp_ident "Dune__exe!.Settings.logG"
          ]
    ]
  structure_item (src/error.ml[60,2353+0]..src/error.ml[61,2364+19])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[60,2353+4]..src/error.ml[60,2353+8])
          Tpat_var "logA/564"
        expression (src/error.ml[61,2364+2]..src/error.ml[61,2364+19])
          Texp_apply
          expression (src/error.ml[61,2364+2]..src/error.ml[61,2364+5])
            Texp_ident "log/536"
          [
            <arg>
              Nolabel
              expression (src/error.ml[61,2364+6]..src/error.ml[61,2364+19])
                Texp_ident "Dune__exe!.Settings.logA"
          ]
    ]
  structure_item (src/error.ml[63,2385+0]..src/error.ml[64,2396+19])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[63,2385+4]..src/error.ml[63,2385+8])
          Tpat_var "logC/565"
        expression (src/error.ml[64,2396+2]..src/error.ml[64,2396+19])
          Texp_apply
          expression (src/error.ml[64,2396+2]..src/error.ml[64,2396+5])
            Texp_ident "log/536"
          [
            <arg>
              Nolabel
              expression (src/error.ml[64,2396+6]..src/error.ml[64,2396+19])
                Texp_ident "Dune__exe!.Settings.logC"
          ]
    ]
  structure_item (src/error.ml[70,2529+0]..src/error.ml[73,2649+13])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[70,2529+4]..src/error.ml[70,2529+19])
          Tpat_var "print_positions/566"
        expression (src/error.ml[70,2529+20]..src/error.ml[73,2649+13]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[70,2529+20]..src/error.ml[70,2529+21])
                Tpat_var "f/568"
              expression (src/error.ml[70,2529+22]..src/error.ml[73,2649+13]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[70,2529+22]..src/error.ml[70,2529+31])
                      Tpat_var "positions/569"
                    expression (src/error.ml[71,2563+2]..src/error.ml[73,2649+13])
                      Texp_apply
                      expression (src/error.ml[71,2563+2]..src/error.ml[71,2563+11])
                        Texp_ident "Stdlib!.List.iter"
                      [
                        <arg>
                          Nolabel
                          expression (src/error.ml[71,2563+12]..src/error.ml[73,2649+3])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/error.ml[71,2563+17]..src/error.ml[71,2563+25])
                                  Tpat_var "position/636"
                                expression (src/error.ml[72,2592+4]..src/error.ml[72,2592+56])
                                  Texp_apply
                                  expression (src/error.ml[72,2592+4]..src/error.ml[72,2592+11])
                                    Texp_ident "Stdlib!.Printf.fprintf"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/error.ml[72,2592+12]..src/error.ml[72,2592+13])
                                        Texp_ident "f/568"
                                    <arg>
                                      Nolabel
                                      expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21])
                                        Texp_construct "CamlinternalFormatBasics.Format"
                                        [
                                          expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                            Texp_construct "CamlinternalFormatBasics.String"
                                            [
                                              expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                []
                                              expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                [
                                                  expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                                    Texp_constant Const_string(":\n",(src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost,None)
                                                  expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                    []
                                                ]
                                            ]
                                          expression (src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost
                                            Texp_constant Const_string("%s:\n",(src/error.ml[72,2592+14]..src/error.ml[72,2592+21]) ghost,None)
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (src/error.ml[72,2592+22]..src/error.ml[72,2592+56])
                                        Texp_apply
                                        expression (src/error.ml[72,2592+23]..src/error.ml[72,2592+46])
                                          Texp_ident "Dune__exe!.Positions.string_of_pos"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/error.ml[72,2592+47]..src/error.ml[72,2592+55])
                                              Texp_ident "position/636"
                                        ]
                                  ]
                            ]
                        <arg>
                          Nolabel
                          expression (src/error.ml[73,2649+4]..src/error.ml[73,2649+13])
                            Texp_ident "positions/569"
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[75,2664+0]..src/error.ml[79,2860+29])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[75,2664+4]..src/error.ml[75,2664+11])
          Tpat_var "display/707"
        expression (src/error.ml[75,2664+12]..src/error.ml[79,2860+29]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[75,2664+12]..src/error.ml[75,2664+24])
                Tpat_var "continuation/709"
              expression (src/error.ml[75,2664+25]..src/error.ml[79,2860+29]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[75,2664+25]..src/error.ml[75,2664+31])
                      Tpat_var "header/710"
                    expression (src/error.ml[75,2664+32]..src/error.ml[79,2860+29]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/error.ml[75,2664+32]..src/error.ml[75,2664+41])
                            Tpat_var "positions/711"
                          expression (src/error.ml[75,2664+42]..src/error.ml[79,2860+29]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/error.ml[75,2664+42]..src/error.ml[75,2664+48])
                                  Tpat_var "format/712"
                                expression (src/error.ml[76,2715+2]..src/error.ml[79,2860+29])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (src/error.ml[76,2715+6]..src/error.ml[76,2715+13])
                                        Tpat_var "kprintf/713"
                                      expression (src/error.ml[76,2715+16]..src/error.ml[76,2715+70])
                                        Texp_ifthenelse
                                        expression (src/error.ml[76,2715+19]..src/error.ml[76,2715+27])
                                          Texp_apply
                                          expression (src/error.ml[76,2715+19]..src/error.ml[76,2715+20])
                                            Texp_ident "Stdlib!.!"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/error.ml[76,2715+20]..src/error.ml[76,2715+27])
                                                Texp_ident "enabled/409"
                                          ]
                                        expression (src/error.ml[76,2715+33]..src/error.ml[76,2715+48])
                                          Texp_ident "Stdlib!.Printf.kfprintf"
                                        Some
                                          expression (src/error.ml[76,2715+54]..src/error.ml[76,2715+70])
                                            Texp_ident "Stdlib!.Printf.ikfprintf"
                                  ]
                                  expression (src/error.ml[77,2789+2]..src/error.ml[79,2860+29])
                                    Texp_apply
                                    expression (src/error.ml[77,2789+2]..src/error.ml[77,2789+9])
                                      Texp_ident "kprintf/713"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[77,2789+10]..src/error.ml[77,2789+22])
                                          Texp_ident "continuation/709"
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[77,2789+23]..src/error.ml[77,2789+29])
                                          Texp_ident "Stdlib!.stderr"
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[78,2819+4]..src/error.ml[78,2819+40])
                                          Texp_apply
                                          expression (src/error.ml[78,2819+10]..src/error.ml[78,2819+12])
                                            Texp_ident "Stdlib!.^^"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (src/error.ml[78,2819+5]..src/error.ml[78,2819+9])
                                                Texp_construct "CamlinternalFormatBasics.Format"
                                                [
                                                  expression (src/error.ml[78,2819+5]..src/error.ml[78,2819+9]) ghost
                                                    Texp_construct "CamlinternalFormatBasics.Alpha"
                                                    [
                                                      expression (src/error.ml[78,2819+5]..src/error.ml[78,2819+9]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                        []
                                                    ]
                                                  expression (src/error.ml[78,2819+5]..src/error.ml[78,2819+9]) ghost
                                                    Texp_constant Const_string("%a",(src/error.ml[78,2819+5]..src/error.ml[78,2819+9]) ghost,None)
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (src/error.ml[78,2819+13]..src/error.ml[78,2819+39])
                                                Texp_apply
                                                expression (src/error.ml[78,2819+20]..src/error.ml[78,2819+22])
                                                  Texp_ident "Stdlib!.^^"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (src/error.ml[78,2819+13]..src/error.ml[78,2819+19])
                                                      Texp_ident "header/710"
                                                  <arg>
                                                    Nolabel
                                                    expression (src/error.ml[78,2819+23]..src/error.ml[78,2819+39])
                                                      Texp_apply
                                                      expression (src/error.ml[78,2819+30]..src/error.ml[78,2819+32])
                                                        Texp_ident "Stdlib!.^^"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (src/error.ml[78,2819+23]..src/error.ml[78,2819+29])
                                                            Texp_ident "format/712"
                                                        <arg>
                                                          Nolabel
                                                          expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39])
                                                            Texp_construct "CamlinternalFormatBasics.Format"
                                                            [
                                                              expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                [
                                                                  expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost
                                                                    Texp_constant Const_char 0a
                                                                  expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.Flush"
                                                                    [
                                                                      expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                        []
                                                                    ]
                                                                ]
                                                              expression (src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost
                                                                Texp_constant Const_string("\n%!",(src/error.ml[78,2819+33]..src/error.ml[78,2819+39]) ghost,None)
                                                            ]
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[79,2860+4]..src/error.ml[79,2860+19])
                                          Texp_ident "print_positions/566"
                                      <arg>
                                        Nolabel
                                        expression (src/error.ml[79,2860+20]..src/error.ml[79,2860+29])
                                          Texp_ident "positions/711"
                                    ]
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[81,2891+0]..src/error.ml[85,2966+20])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[81,2891+4]..src/error.ml[81,2891+9])
          Tpat_var "error/714"
        expression (src/error.ml[81,2891+10]..src/error.ml[85,2966+20]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[81,2891+10]..src/error.ml[81,2891+19])
                Tpat_var "positions/716"
              expression (src/error.ml[81,2891+20]..src/error.ml[85,2966+20]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[81,2891+20]..src/error.ml[81,2891+26])
                      Tpat_var "format/717"
                    expression (src/error.ml[82,2920+2]..src/error.ml[85,2966+20])
                      Texp_apply
                      expression (src/error.ml[82,2920+2]..src/error.ml[82,2920+9])
                        Texp_ident "display/707"
                      [
                        <arg>
                          Nolabel
                          expression (src/error.ml[83,2930+4]..src/error.ml[83,2930+21])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/error.ml[83,2930+9]..src/error.ml[83,2930+10])
                                  Tpat_any
                                expression (src/error.ml[83,2930+14]..src/error.ml[83,2930+20])
                                  Texp_apply
                                  expression (src/error.ml[83,2930+14]..src/error.ml[83,2930+18])
                                    Texp_ident "Stdlib!.exit"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (src/error.ml[83,2930+19]..src/error.ml[83,2930+20])
                                        Texp_constant Const_int 1
                                  ]
                            ]
                        <arg>
                          Nolabel
                          expression (src/error.ml[84,2952+4]..src/error.ml[84,2952+13])
                            Texp_construct "CamlinternalFormatBasics.Format"
                            [
                              expression (src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost
                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                [
                                  expression (src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost
                                    Texp_constant Const_string("Error: ",(src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost,None)
                                  expression (src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost
                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                    []
                                ]
                              expression (src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost
                                Texp_constant Const_string("Error: ",(src/error.ml[84,2952+4]..src/error.ml[84,2952+13]) ghost,None)
                            ]
                        <arg>
                          Nolabel
                          expression (src/error.ml[85,2966+4]..src/error.ml[85,2966+13])
                            Texp_ident "positions/716"
                        <arg>
                          Nolabel
                          expression (src/error.ml[85,2966+14]..src/error.ml[85,2966+20])
                            Texp_ident "format/717"
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[87,2988+0]..src/error.ml[91,3063+20])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[87,2988+4]..src/error.ml[87,2988+11])
          Tpat_var "warning/719"
        expression (src/error.ml[87,2988+12]..src/error.ml[91,3063+20]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[87,2988+12]..src/error.ml[87,2988+21])
                Tpat_var "positions/721"
              expression (src/error.ml[87,2988+22]..src/error.ml[91,3063+20]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[87,2988+22]..src/error.ml[87,2988+28])
                      Tpat_var "format/722"
                    expression (src/error.ml[88,3019+2]..src/error.ml[91,3063+20])
                      Texp_apply
                      expression (src/error.ml[88,3019+2]..src/error.ml[88,3019+9])
                        Texp_ident "display/707"
                      [
                        <arg>
                          Nolabel
                          expression (src/error.ml[89,3029+4]..src/error.ml[89,3029+17])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (src/error.ml[89,3029+9]..src/error.ml[89,3029+10])
                                  Tpat_any
                                expression (src/error.ml[89,3029+14]..src/error.ml[89,3029+16])
                                  Texp_construct "()"
                                  []
                            ]
                        <arg>
                          Nolabel
                          expression (src/error.ml[90,3047+4]..src/error.ml[90,3047+15])
                            Texp_construct "CamlinternalFormatBasics.Format"
                            [
                              expression (src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost
                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                [
                                  expression (src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost
                                    Texp_constant Const_string("Warning: ",(src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost,None)
                                  expression (src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost
                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                    []
                                ]
                              expression (src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost
                                Texp_constant Const_string("Warning: ",(src/error.ml[90,3047+4]..src/error.ml[90,3047+15]) ghost,None)
                            ]
                        <arg>
                          Nolabel
                          expression (src/error.ml[91,3063+4]..src/error.ml[91,3063+13])
                            Texp_ident "positions/721"
                        <arg>
                          Nolabel
                          expression (src/error.ml[91,3063+14]..src/error.ml[91,3063+20])
                            Texp_ident "format/722"
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[93,3085+0]..src/error.ml[94,3100+32])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[93,3085+4]..src/error.ml[93,3085+10])
          Tpat_var "errorp/724"
        expression (src/error.ml[93,3085+11]..src/error.ml[94,3100+32]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[93,3085+11]..src/error.ml[93,3085+12])
                Tpat_var "v/726"
              expression (src/error.ml[94,3100+2]..src/error.ml[94,3100+32])
                Texp_apply
                expression (src/error.ml[94,3100+2]..src/error.ml[94,3100+7])
                  Texp_ident "error/714"
                [
                  <arg>
                    Nolabel
                    expression (src/error.ml[94,3100+8]..src/error.ml[94,3100+32])
                      Texp_construct "::"
                      [
                        expression (src/error.ml[94,3100+10]..src/error.ml[94,3100+30])
                          Texp_apply
                          expression (src/error.ml[94,3100+10]..src/error.ml[94,3100+28])
                            Texp_ident "Dune__exe!.Positions.position"
                          [
                            <arg>
                              Nolabel
                              expression (src/error.ml[94,3100+29]..src/error.ml[94,3100+30])
                                Texp_ident "v/726"
                          ]
                        expression (src/error.ml[94,3100+31]..src/error.ml[94,3100+32]) ghost
                          Texp_construct "[]"
                          []
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[100,3297+0]..src/error.ml[101,3313+10])
    Tstr_type Rec
    [
      type_declaration category/727 (src/error.ml[100,3297+0]..src/error.ml[101,3313+10])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (src/error.ml[101,3313+2]..src/error.ml[101,3313+10])
              Ttyp_constr "Stdlib!.ref"
              [
                core_type (src/error.ml[101,3313+2]..src/error.ml[101,3313+6])
                  Ttyp_constr "bool/5!"
                  []
              ]
    ]
  structure_item (src/error.ml[103,3325+0]..src/error.ml[104,3347+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[103,3325+4]..src/error.ml[103,3325+16])
          Tpat_var "new_category/728"
        expression (src/error.ml[103,3325+17]..src/error.ml[104,3347+11]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[103,3325+17]..src/error.ml[103,3325+19])
                Tpat_construct "()"
                []
                None
              expression (src/error.ml[104,3347+2]..src/error.ml[104,3347+11])
                Texp_apply
                expression (src/error.ml[104,3347+2]..src/error.ml[104,3347+5])
                  Texp_ident "Stdlib!.ref"
                [
                  <arg>
                    Nolabel
                    expression (src/error.ml[104,3347+6]..src/error.ml[104,3347+11])
                      Texp_construct "false"
                      []
                ]
          ]
    ]
  structure_item (src/error.ml[106,3360+0]..src/error.ml[110,3455+20])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[106,3360+4]..src/error.ml[106,3360+10])
          Tpat_var "signal/731"
        expression (src/error.ml[106,3360+11]..src/error.ml[110,3455+20]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[106,3360+11]..src/error.ml[106,3360+19])
                Tpat_var "category/733"
              expression (src/error.ml[106,3360+20]..src/error.ml[110,3455+20]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (src/error.ml[106,3360+20]..src/error.ml[106,3360+29])
                      Tpat_var "positions/734"
                    expression (src/error.ml[106,3360+30]..src/error.ml[110,3455+20]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (src/error.ml[106,3360+30]..src/error.ml[106,3360+36])
                            Tpat_var "format/735"
                          expression (src/error.ml[107,3399+2]..src/error.ml[110,3455+20])
                            Texp_apply
                            expression (src/error.ml[107,3399+2]..src/error.ml[107,3399+9])
                              Texp_ident "display/707"
                            [
                              <arg>
                                Nolabel
                                expression (src/error.ml[108,3409+4]..src/error.ml[108,3409+31])
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (src/error.ml[108,3409+9]..src/error.ml[108,3409+10])
                                        Tpat_any
                                      expression (src/error.ml[108,3409+14]..src/error.ml[108,3409+30])
                                        Texp_apply
                                        expression (src/error.ml[108,3409+23]..src/error.ml[108,3409+25])
                                          Texp_ident "Stdlib!.:="
                                        [
                                          <arg>
                                            Nolabel
                                            expression (src/error.ml[108,3409+14]..src/error.ml[108,3409+22])
                                              Texp_ident "category/733"
                                          <arg>
                                            Nolabel
                                            expression (src/error.ml[108,3409+26]..src/error.ml[108,3409+30])
                                              Texp_construct "true"
                                              []
                                        ]
                                  ]
                              <arg>
                                Nolabel
                                expression (src/error.ml[109,3441+4]..src/error.ml[109,3441+13])
                                  Texp_construct "CamlinternalFormatBasics.Format"
                                  [
                                    expression (src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost
                                      Texp_construct "CamlinternalFormatBasics.String_literal"
                                      [
                                        expression (src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost
                                          Texp_constant Const_string("Error: ",(src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost,None)
                                        expression (src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost
                                          Texp_construct "CamlinternalFormatBasics.End_of_format"
                                          []
                                      ]
                                    expression (src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost
                                      Texp_constant Const_string("Error: ",(src/error.ml[109,3441+4]..src/error.ml[109,3441+13]) ghost,None)
                                  ]
                              <arg>
                                Nolabel
                                expression (src/error.ml[110,3455+4]..src/error.ml[110,3455+13])
                                  Texp_ident "positions/734"
                              <arg>
                                Nolabel
                                expression (src/error.ml[110,3455+14]..src/error.ml[110,3455+20])
                                  Texp_ident "format/735"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (src/error.ml[112,3477+0]..src/error.ml[114,3520+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[112,3477+4]..src/error.ml[112,3477+11])
          Tpat_var "exit_if/737"
        expression (src/error.ml[112,3477+12]..src/error.ml[114,3520+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[112,3477+12]..src/error.ml[112,3477+20])
                Tpat_var "category/739"
              expression (src/error.ml[113,3500+2]..src/error.ml[114,3520+10])
                Texp_ifthenelse
                expression (src/error.ml[113,3500+5]..src/error.ml[113,3500+14])
                  Texp_apply
                  expression (src/error.ml[113,3500+5]..src/error.ml[113,3500+6])
                    Texp_ident "Stdlib!.!"
                  [
                    <arg>
                      Nolabel
                      expression (src/error.ml[113,3500+6]..src/error.ml[113,3500+14])
                        Texp_ident "category/739"
                  ]
                expression (src/error.ml[114,3520+4]..src/error.ml[114,3520+10])
                  Texp_apply
                  expression (src/error.ml[114,3520+4]..src/error.ml[114,3520+8])
                    Texp_ident "Stdlib!.exit"
                  [
                    <arg>
                      Nolabel
                      expression (src/error.ml[114,3520+9]..src/error.ml[114,3520+10])
                        Texp_constant Const_int 1
                  ]
                None
          ]
    ]
  structure_item (src/error.ml[116,3532+0]..src/error.ml[124,3673+13])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[116,3532+4]..src/error.ml[116,3532+21])
          Tpat_var "with_new_category/740"
        expression (src/error.ml[116,3532+22]..src/error.ml[124,3673+13]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[116,3532+22]..src/error.ml[116,3532+23])
                Tpat_var "f/742"
              expression (src/error.ml[117,3558+2]..src/error.ml[124,3673+13])
                Texp_let Nonrec
                [
                  <def>
                    pattern (src/error.ml[117,3558+6]..src/error.ml[117,3558+7])
                      Tpat_var "c/743"
                    expression (src/error.ml[117,3558+10]..src/error.ml[117,3558+24])
                      Texp_apply
                      expression (src/error.ml[117,3558+10]..src/error.ml[117,3558+22])
                        Texp_ident "new_category/728"
                      [
                        <arg>
                          Nolabel
                          expression (src/error.ml[117,3558+22]..src/error.ml[117,3558+24])
                            Texp_construct "()"
                            []
                      ]
                ]
                expression (src/error.ml[118,3586+2]..src/error.ml[124,3673+13])
                  Texp_match
                  expression (src/error.ml[118,3586+8]..src/error.ml[118,3586+11])
                    Texp_apply
                    expression (src/error.ml[118,3586+8]..src/error.ml[118,3586+9])
                      Texp_ident "f/742"
                    [
                      <arg>
                        Nolabel
                        expression (src/error.ml[118,3586+10]..src/error.ml[118,3586+11])
                          Texp_ident "c/743"
                    ]
                  [
                    <case>
                      pattern (src/error.ml[119,3603+4]..src/error.ml[119,3603+5])
                        Tpat_value
                        pattern (src/error.ml[119,3603+4]..src/error.ml[119,3603+5])
                          Tpat_var "y/744"
                      expression (src/error.ml[120,3612+6]..src/error.ml[121,3629+7])
                        Texp_sequence
                        expression (src/error.ml[120,3612+6]..src/error.ml[120,3612+15])
                          Texp_apply
                          expression (src/error.ml[120,3612+6]..src/error.ml[120,3612+13])
                            Texp_ident "exit_if/737"
                          [
                            <arg>
                              Nolabel
                              expression (src/error.ml[120,3612+14]..src/error.ml[120,3612+15])
                                Texp_ident "c/743"
                          ]
                        expression (src/error.ml[121,3629+6]..src/error.ml[121,3629+7])
                          Texp_ident "y/744"
                    <case>
                      pattern (src/error.ml[122,3637+4]..src/error.ml[122,3637+15])
                        Tpat_exception
                        pattern (src/error.ml[122,3637+14]..src/error.ml[122,3637+15])
                          Tpat_var "e/745"
                      expression (src/error.ml[123,3656+6]..src/error.ml[124,3673+13])
                        Texp_sequence
                        expression (src/error.ml[123,3656+6]..src/error.ml[123,3656+15])
                          Texp_apply
                          expression (src/error.ml[123,3656+6]..src/error.ml[123,3656+13])
                            Texp_ident "exit_if/737"
                          [
                            <arg>
                              Nolabel
                              expression (src/error.ml[123,3656+14]..src/error.ml[123,3656+15])
                                Texp_ident "c/743"
                          ]
                        expression (src/error.ml[124,3673+6]..src/error.ml[124,3673+13])
                          Texp_apply
                          expression (src/error.ml[124,3673+6]..src/error.ml[124,3673+11])
                            Texp_ident "Stdlib!.raise"
                          [
                            <arg>
                              Nolabel
                              expression (src/error.ml[124,3673+12]..src/error.ml[124,3673+13])
                                Texp_ident "e/745"
                          ]
                  ]
          ]
    ]
  structure_item (src/error.ml[130,3851+0]..src/error.ml[131,3875+16])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[130,3851+4]..src/error.ml[130,3851+21])
          Tpat_var "grammatical_error/746"
        expression (src/error.ml[131,3875+2]..src/error.ml[131,3875+16])
          Texp_apply
          expression (src/error.ml[131,3875+2]..src/error.ml[131,3875+14])
            Texp_ident "new_category/728"
          [
            <arg>
              Nolabel
              expression (src/error.ml[131,3875+14]..src/error.ml[131,3875+16])
                Texp_construct "()"
                []
          ]
    ]
  structure_item (src/error.ml[133,3893+0]..src/error.ml[134,3919+71])
    Tstr_value Nonrec
    [
      <def>
        pattern (src/error.ml[133,3893+4]..src/error.ml[133,3893+19])
          Tpat_var "grammar_warning/747"
        expression (src/error.ml[133,3893+20]..src/error.ml[134,3919+71]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (src/error.ml[133,3893+20]..src/error.ml[133,3893+23])
                Tpat_var "pos/749"
              expression (src/error.ml[134,3919+2]..src/error.ml[134,3919+71])
                Texp_ifthenelse
                expression (src/error.ml[134,3919+5]..src/error.ml[134,3919+20])
                  Texp_ident "Dune__exe!.Settings.strict"
                expression (src/error.ml[134,3919+26]..src/error.ml[134,3919+54])
                  Texp_apply
                  expression (src/error.ml[134,3919+26]..src/error.ml[134,3919+32])
                    Texp_ident "signal/731"
                  [
                    <arg>
                      Nolabel
                      expression (src/error.ml[134,3919+33]..src/error.ml[134,3919+50])
                        Texp_ident "grammatical_error/746"
                    <arg>
                      Nolabel
                      expression (src/error.ml[134,3919+51]..src/error.ml[134,3919+54])
                        Texp_ident "pos/749"
                  ]
                Some
                  expression (src/error.ml[134,3919+60]..src/error.ml[134,3919+71])
                    Texp_apply
                    expression (src/error.ml[134,3919+60]..src/error.ml[134,3919+67])
                      Texp_ident "warning/719"
                    [
                      <arg>
                        Nolabel
                        expression (src/error.ml[134,3919+68]..src/error.ml[134,3919+71])
                          Texp_ident "pos/749"
                    ]
          ]
    ]
]

{<Dune__exe__Error>
 "category"[type] -> <Dune__exe__Error.28>;
 "disable"[value] -> <Dune__exe__Error.2>;
 "enable"[value] -> <Dune__exe__Error.1>;
 "error"[value] -> <Dune__exe__Error.20>;
 "errorp"[value] -> <Dune__exe__Error.26>;
 "exit_if"[value] -> <Dune__exe__Error.34>;
 "grammar_warning"[value] -> <Dune__exe__Error.42>;
 "grammatical_error"[value] -> <Dune__exe__Error.41>;
 "logA"[value] -> <Dune__exe__Error.8>;
 "logC"[value] -> <Dune__exe__Error.9>;
 "logG"[value] -> <Dune__exe__Error.7>;
 "new_category"[value] -> <Dune__exe__Error.29>;
 "signal"[value] -> <Dune__exe__Error.30>;
 "warning"[value] -> <Dune__exe__Error.23>;
 "with_new_category"[value] -> <Dune__exe__Error.36>;
 }

(seq
  (let (enabled/409 = (makemutable 0 (int) 1))
    (setfield_ptr(root-init) 14 (global Dune__exe__Error!) enabled/409))
  (let
    (enable/410 =
       (function param/412[int] : int
         (setfield_imm 0 (field_imm 14 (global Dune__exe__Error!)) 1)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Error!) enable/410))
  (let
    (disable/413 =
       (function param/415[int] : int
         (setfield_imm 0 (field_imm 14 (global Dune__exe__Error!)) 0)))
    (setfield_ptr(root-init) 1 (global Dune__exe__Error!) disable/413))
  (let
    (*match*/1569 =
       (let (*match*/1565 = (field_imm 10 (global Dune__exe__Settings!)))
         (catch
           (switch *match*/1565
            case tag 1:
             (let (*match*/1566 =a (field_imm 0 *match*/1565))
               (apply (field_imm 1 (global Dune__exe__Error!)) 0))
            default: (exit 1))
          with (1) 0)))
    0)
  (let
    (log/536 =
       (function kind/537 verbosity/538 msg/539 : int
         (if
           (&& (caml_greaterequal kind/537 verbosity/538)
             (field_int 0 (field_imm 14 (global Dune__exe__Error!))))
           (apply (field_imm 0 (global Stdlib__Printf!))
             (field_imm 39 (global Stdlib!)) [0: [16: [10: 0]] "%t%!"]
             msg/539)
           0)))
    (setfield_ptr(root-init) 15 (global Dune__exe__Error!) log/536))
  (let
    (logG/563 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 20 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 2 (global Dune__exe__Error!) logG/563))
  (let
    (logA/564 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 21 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 3 (global Dune__exe__Error!) logA/564))
  (let
    (logC/565 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 22 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 4 (global Dune__exe__Error!) logC/565))
  (let
    (print_positions/566 =
       (function f/568 positions/569 : int
         (apply (field_imm 17 (global Stdlib__List!))
           (function position/636 : int
             (apply (field_imm 0 (global Stdlib__Printf!)) f/568
               [0: [2: 0 [11: ":\n" 0]] "%s:\n"]
               (apply (field_imm 25 (global Dune__exe__Positions!))
                 position/636)))
           positions/569)))
    (setfield_ptr(root-init) 16 (global Dune__exe__Error!)
      print_positions/566))
  (let
    (display/707 =
       (function continuation/709 header/710 positions/711 format/712
         (let
           (kprintf/713 =
              (if (field_int 0 (field_imm 14 (global Dune__exe__Error!)))
                (field_imm 7 (global Stdlib__Printf!))
                (field_imm 8 (global Stdlib__Printf!))))
           (apply kprintf/713 continuation/709
             (field_imm 39 (global Stdlib!))
             (apply (field_imm 97 (global Stdlib!)) [0: [15: 0] "%a"]
               (apply (field_imm 97 (global Stdlib!)) header/710
                 (apply (field_imm 97 (global Stdlib!)) format/712
                   [0: [12: '\n' [10: 0]] "\n%!"])))
             (field_imm 16 (global Dune__exe__Error!)) positions/711))))
    (setfield_ptr(root-init) 17 (global Dune__exe__Error!) display/707))
  (let
    (error/714 =
       (function positions/716 format/717
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/718 (apply (field_imm 98 (global Stdlib!)) 1))
           [0: [11: "Error: " 0] "Error: "] positions/716 format/717)))
    (setfield_ptr(root-init) 5 (global Dune__exe__Error!) error/714))
  (let
    (warning/719 =
       (function positions/721 format/722
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/723 : int 0) [0: [11: "Warning: " 0] "Warning: "]
           positions/721 format/722)))
    (setfield_ptr(root-init) 7 (global Dune__exe__Error!) warning/719))
  (let
    (errorp/724 =
       (function v/726
         (apply (field_imm 5 (global Dune__exe__Error!))
           (makeblock 0
             (apply (field_imm 1 (global Dune__exe__Positions!)) v/726) 0))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Error!) errorp/724))
  (let (new_category/728 = (function param/730[int] (makemutable 0 (int) 0)))
    (setfield_ptr(root-init) 8 (global Dune__exe__Error!) new_category/728))
  (let
    (signal/731 =
       (function category/733 positions/734 format/735
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/736 : int (setfield_imm 0 category/733 1))
           [0: [11: "Error: " 0] "Error: "] positions/734 format/735)))
    (setfield_ptr(root-init) 9 (global Dune__exe__Error!) signal/731))
  (let
    (exit_if/737 =
       (function category/739 : int
         (if (field_int 0 category/739)
           (apply (field_imm 98 (global Stdlib!)) 1) 0)))
    (setfield_ptr(root-init) 10 (global Dune__exe__Error!) exit_if/737))
  (let
    (with_new_category/740 =
       (function f/742
         (let (c/743 = (apply (field_imm 8 (global Dune__exe__Error!)) 0))
           (catch
             (try (exit 6 (apply f/742 c/743)) with e/745
               (seq (apply (field_imm 10 (global Dune__exe__Error!)) c/743)
                 (reraise e/745)))
            with (6 y/744)
             (seq (apply (field_imm 10 (global Dune__exe__Error!)) c/743)
               y/744)))))
    (setfield_ptr(root-init) 11 (global Dune__exe__Error!)
      with_new_category/740))
  (let
    (grammatical_error/746 =
       (apply (field_imm 8 (global Dune__exe__Error!)) 0))
    (setfield_ptr(root-init) 12 (global Dune__exe__Error!)
      grammatical_error/746))
  (let
    (grammar_warning/747 =
       (function pos/749
         (if (field_imm 36 (global Dune__exe__Settings!))
           (apply (field_imm 9 (global Dune__exe__Error!))
             (field_imm 12 (global Dune__exe__Error!)) pos/749)
           (apply (field_imm 7 (global Dune__exe__Error!)) pos/749))))
    (setfield_ptr(root-init) 13 (global Dune__exe__Error!)
      grammar_warning/747))
  0)
(seq
  (let (enabled/409 = (makemutable 0 (int) 1))
    (setfield_ptr(root-init) 14 (global Dune__exe__Error!) enabled/409))
  (let
    (enable/410 =
       (function param/412[int] : int
         (setfield_imm 0 (field_imm 14 (global Dune__exe__Error!)) 1)))
    (setfield_ptr(root-init) 0 (global Dune__exe__Error!) enable/410))
  (let
    (disable/413 =
       (function param/415[int] : int
         (setfield_imm 0 (field_imm 14 (global Dune__exe__Error!)) 0)))
    (setfield_ptr(root-init) 1 (global Dune__exe__Error!) disable/413))
  (let
    (*match*/1569 =
       (let (*match*/1565 = (field_imm 10 (global Dune__exe__Settings!)))
         (catch
           (switch *match*/1565
            case tag 1: (apply (field_imm 1 (global Dune__exe__Error!)) 0)
            default: (exit 1))
          with (1) 0)))
    0)
  (let
    (log/536 =
       (function kind/537 verbosity/538 msg/539 : int
         (if
           (&& (caml_greaterequal kind/537 verbosity/538)
             (field_int 0 (field_imm 14 (global Dune__exe__Error!))))
           (apply (field_imm 0 (global Stdlib__Printf!))
             (field_imm 39 (global Stdlib!)) [0: [16: [10: 0]] "%t%!"]
             msg/539)
           0)))
    (setfield_ptr(root-init) 15 (global Dune__exe__Error!) log/536))
  (let
    (logG/563 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 20 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 2 (global Dune__exe__Error!) logG/563))
  (let
    (logA/564 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 21 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 3 (global Dune__exe__Error!) logA/564))
  (let
    (logC/565 =
       (apply (field_imm 15 (global Dune__exe__Error!))
         (field_imm 22 (global Dune__exe__Settings!))))
    (setfield_ptr(root-init) 4 (global Dune__exe__Error!) logC/565))
  (let
    (print_positions/566 =
       (function f/568 positions/569 : int
         (apply (field_imm 17 (global Stdlib__List!))
           (function position/636 : int
             (apply (field_imm 0 (global Stdlib__Printf!)) f/568
               [0: [2: 0 [11: ":\n" 0]] "%s:\n"]
               (apply (field_imm 25 (global Dune__exe__Positions!))
                 position/636)))
           positions/569)))
    (setfield_ptr(root-init) 16 (global Dune__exe__Error!)
      print_positions/566))
  (let
    (display/707 =
       (function continuation/709 header/710 positions/711 format/712
         (let
           (kprintf/713 =
              (if (field_int 0 (field_imm 14 (global Dune__exe__Error!)))
                (field_imm 7 (global Stdlib__Printf!))
                (field_imm 8 (global Stdlib__Printf!))))
           (apply kprintf/713 continuation/709
             (field_imm 39 (global Stdlib!))
             (apply (field_imm 97 (global Stdlib!)) [0: [15: 0] "%a"]
               (apply (field_imm 97 (global Stdlib!)) header/710
                 (apply (field_imm 97 (global Stdlib!)) format/712
                   [0: [12: '\n' [10: 0]] "\n%!"])))
             (field_imm 16 (global Dune__exe__Error!)) positions/711))))
    (setfield_ptr(root-init) 17 (global Dune__exe__Error!) display/707))
  (let
    (error/714 =
       (function positions/716 format/717
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/718 (apply (field_imm 98 (global Stdlib!)) 1))
           [0: [11: "Error: " 0] "Error: "] positions/716 format/717)))
    (setfield_ptr(root-init) 5 (global Dune__exe__Error!) error/714))
  (let
    (warning/719 =
       (function positions/721 format/722
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/723 : int 0) [0: [11: "Warning: " 0] "Warning: "]
           positions/721 format/722)))
    (setfield_ptr(root-init) 7 (global Dune__exe__Error!) warning/719))
  (let
    (errorp/724 =
       (function v/726
         (apply (field_imm 5 (global Dune__exe__Error!))
           (makeblock 0
             (apply (field_imm 1 (global Dune__exe__Positions!)) v/726) 0))))
    (setfield_ptr(root-init) 6 (global Dune__exe__Error!) errorp/724))
  (let (new_category/728 = (function param/730[int] (makemutable 0 (int) 0)))
    (setfield_ptr(root-init) 8 (global Dune__exe__Error!) new_category/728))
  (let
    (signal/731 =
       (function category/733 positions/734 format/735
         (apply (field_imm 17 (global Dune__exe__Error!))
           (function param/736 : int (setfield_imm 0 category/733 1))
           [0: [11: "Error: " 0] "Error: "] positions/734 format/735)))
    (setfield_ptr(root-init) 9 (global Dune__exe__Error!) signal/731))
  (let
    (exit_if/737 =
       (function category/739 : int
         (if (field_int 0 category/739)
           (apply (field_imm 98 (global Stdlib!)) 1) 0)))
    (setfield_ptr(root-init) 10 (global Dune__exe__Error!) exit_if/737))
  (let
    (with_new_category/740 =
       (function f/742
         (let (c/743 = (apply (field_imm 8 (global Dune__exe__Error!)) 0))
           (catch
             (try (exit 6 (apply f/742 c/743)) with e/745
               (seq (apply (field_imm 10 (global Dune__exe__Error!)) c/743)
                 (reraise e/745)))
            with (6 y/744)
             (seq (apply (field_imm 10 (global Dune__exe__Error!)) c/743)
               y/744)))))
    (setfield_ptr(root-init) 11 (global Dune__exe__Error!)
      with_new_category/740))
  (let
    (grammatical_error/746 =
       (apply (field_imm 8 (global Dune__exe__Error!)) 0))
    (setfield_ptr(root-init) 12 (global Dune__exe__Error!)
      grammatical_error/746))
  (let
    (grammar_warning/747 =
       (function pos/749
         (if (field_imm 36 (global Dune__exe__Settings!))
           (apply (field_imm 9 (global Dune__exe__Error!))
             (field_imm 12 (global Dune__exe__Error!)) pos/749)
           (apply (field_imm 7 (global Dune__exe__Error!)) pos/749))))
    (setfield_ptr(root-init) 13 (global Dune__exe__Error!)
      grammar_warning/747))
  0)

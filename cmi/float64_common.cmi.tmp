type t = float
val is_nan : t -> bool
val is_infinity : t -> bool
val is_neg_infinity : t -> bool
val of_string : string -> t
val to_hex_string : t -> string
val to_string : t -> string
val compile : t -> string
val of_float : float -> t
val to_float : t -> float
val sign : t -> bool
val opp : t -> t
val abs : t -> t
type float_comparison = FEq | FLt | FGt | FNotComparable
val eq : t -> t -> bool
val lt : t -> t -> bool
val le : t -> t -> bool
val compare : t -> t -> float_comparison
type float_class =
    PNormal
  | NNormal
  | PSubn
  | NSubn
  | PZero
  | NZero
  | PInf
  | NInf
  | NaN
val classify : t -> float_class
val of_uint63 : Uint63.t -> t
val normfr_mantissa : t -> Uint63.t
val eshift : int
val frshiftexp : t -> t * Uint63.t
val ldshiftexp : t -> Uint63.t -> t
val next_up : t -> t
val next_down : t -> t
val equal : t -> t -> bool
val hash : t -> int
val total_compare : t -> t -> int("DEBUG:rule", [Tag1 (("t", 401), (0, 0, 0, 1, ((Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -100)), 0, 0, 0, 0, (("kernel/float64_common.mli", 15, 841, 841), ("kernel/float64_common.mli", 15, 841, 855), 0), 0, 0, 0, Tag1 ("Float64_common", 0)), 1, 0); (("is_nan", 402), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -99), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("kernel/float64_common.mli", 18, 926, 926), ("kernel/float64_common.mli", 18, 926, 948), 0), 0, Tag1 ("Float64_common", 1)), 0); (("is_infinity", 403), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -96), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("kernel/float64_common.mli", 19, 949, 949), ("kernel/float64_common.mli", 19, 949, 976), 0), 0, Tag1 ("Float64_common", 2)), 0); (("is_neg_infinity", 404), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("kernel/float64_common.mli", 20, 977, 977), ("kernel/float64_common.mli", 20, 977, 1008), 0), 0, Tag1 ("Float64_common", 3)), 0); (("of_string", 405), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("kernel/float64_common.mli", 22, 1010, 1010), ("kernel/float64_common.mli", 22, 1010, 1037), 0), 0, Tag1 ("Float64_common", 4)), 0); (("to_hex_string", 406), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -87), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("kernel/float64_common.mli", 27, 1186, 1186), ("kernel/float64_common.mli", 27, 1186, 1217), 0), 0, Tag1 ("Float64_common", 5)), 0); (("to_string", 407), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("kernel/float64_common.mli", 33, 1464, 1464), ("kernel/float64_common.mli", 33, 1464, 1491), 0), 0, Tag1 ("Float64_common", 6)), 0); (("compile", 408), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -81), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("kernel/float64_common.mli", 35, 1493, 1493), ("kernel/float64_common.mli", 35, 1493, 1518), 0), 0, Tag1 ("Float64_common", 7)), 0); (("of_float", 409), ((Tag1 (0, (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -78), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("kernel/float64_common.mli", 37, 1520, 1520), ("kernel/float64_common.mli", 37, 1520, 1545), 0), 0, Tag1 ("Float64_common", 8)), 0); (("to_float", 410), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -75), (Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("kernel/float64_common.mli", 41, 1611, 1611), ("kernel/float64_common.mli", 41, 1611, 1636), 0), 0, Tag1 ("Float64_common", 9)), 0); (("sign", 411), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("kernel/float64_common.mli", 44, 1685, 1685), ("kernel/float64_common.mli", 44, 1685, 1705), 0), 0, Tag1 ("Float64_common", 10)), 0); (("opp", 412), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -69), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("kernel/float64_common.mli", 46, 1707, 1707), ("kernel/float64_common.mli", 46, 1707, 1723), 0), 0, Tag1 ("Float64_common", 11)), 0); (("abs", 413), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -66), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0, (("kernel/float64_common.mli", 47, 1724, 1724), ("kernel/float64_common.mli", 47, 1724, 1740), 0), 0, Tag1 ("Float64_common", 12)), 0); Tag1 (("float_comparison", 414), (0, 0, Tag1 ([(("FEq", 283), (0), 0, (("kernel/float64_common.mli", 49, 1742, 1766), ("kernel/float64_common.mli", 49, 1742, 1769), 0), 0, Tag1 ("Float64_common", 14)); (("FLt", 284), (0), 0, (("kernel/float64_common.mli", 49, 1742, 1770), ("kernel/float64_common.mli", 49, 1742, 1775), 0), 0, Tag1 ("Float64_common", 15)); (("FGt", 285), (0), 0, (("kernel/float64_common.mli", 49, 1742, 1776), ("kernel/float64_common.mli", 49, 1742, 1781), 0), 0, Tag1 ("Float64_common", 16)); (("FNotComparable", 286), (0), 0, (("kernel/float64_common.mli", 49, 1742, 1782), ("kernel/float64_common.mli", 49, 1742, 1798), 0), 0, Tag1 ("Float64_common", 17))], 0), 1, 0, 0, 0, 0, 0, (("kernel/float64_common.mli", 49, 1742, 1742), ("kernel/float64_common.mli", 49, 1742, 1798), 0), 0, 1, 0, Tag1 ("Float64_common", 13)), 1, 0); (("eq", 415), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -62), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("kernel/float64_common.mli", 51, 1800, 1800), ("kernel/float64_common.mli", 51, 1800, 1823), 0), 0, Tag1 ("Float64_common", 18)), 0); (("lt", 416), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -57), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("kernel/float64_common.mli", 53, 1825, 1825), ("kernel/float64_common.mli", 53, 1825, 1848), 0), 0, Tag1 ("Float64_common", 19)), 0); (("le", 417), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -52), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("kernel/float64_common.mli", 55, 1850, 1850), ("kernel/float64_common.mli", 55, 1850, 1873), 0), 0, Tag1 ("Float64_common", 20)), 0); (("compare", 418), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -47), (Tag3 ((("float_comparison", 414)), 0, (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("kernel/float64_common.mli", 59, 1977, 1977), ("kernel/float64_common.mli", 60, 2018, 2041), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 60, 2018, 2021), ("kernel/float64_common.mli", 60, 2018, 2033), 0)), ([([(((("always"), (("kernel/float64_common.mli", 60, 2018, 2034), ("kernel/float64_common.mli", 60, 2018, 2040), 0))), (("kernel/float64_common.mli", 60, 2018, 2034), ("kernel/float64_common.mli", 60, 2018, 2040), 0), 0, 0)], (("kernel/float64_common.mli", 60, 2018, 2034), ("kernel/float64_common.mli", 60, 2018, 2040), 0))]), (("kernel/float64_common.mli", 60, 2018, 2018), ("kernel/float64_common.mli", 60, 2018, 2041), 0))], Tag1 ("Float64_common", 21)), 0); Tag1 (("float_class", 419), (0, 0, Tag1 ([(("PNormal", 292), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2064), ("kernel/float64_common.mli", 63, 2062, 2073), 0), 0, Tag1 ("Float64_common", 23)); (("NNormal", 293), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2074), ("kernel/float64_common.mli", 63, 2062, 2083), 0), 0, Tag1 ("Float64_common", 24)); (("PSubn", 294), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2084), ("kernel/float64_common.mli", 63, 2062, 2091), 0), 0, Tag1 ("Float64_common", 25)); (("NSubn", 295), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2092), ("kernel/float64_common.mli", 63, 2062, 2099), 0), 0, Tag1 ("Float64_common", 26)); (("PZero", 296), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2100), ("kernel/float64_common.mli", 63, 2062, 2107), 0), 0, Tag1 ("Float64_common", 27)); (("NZero", 297), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2108), ("kernel/float64_common.mli", 63, 2062, 2115), 0), 0, Tag1 ("Float64_common", 28)); (("PInf", 298), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2116), ("kernel/float64_common.mli", 63, 2062, 2122), 0), 0, Tag1 ("Float64_common", 29)); (("NInf", 299), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2123), ("kernel/float64_common.mli", 63, 2062, 2129), 0), 0, Tag1 ("Float64_common", 30)); (("NaN", 300), (0), 0, (("kernel/float64_common.mli", 63, 2062, 2130), ("kernel/float64_common.mli", 63, 2062, 2135), 0), 0, Tag1 ("Float64_common", 31))], 0), 1, 0, 0, 0, 0, 0, (("kernel/float64_common.mli", 62, 2043, 2043), ("kernel/float64_common.mli", 63, 2062, 2135), 0), 0, 1, 0, Tag1 ("Float64_common", 22)), 1, 0); (("classify", 420), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -43), (Tag3 ((("float_class", 419)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("kernel/float64_common.mli", 65, 2137, 2137), ("kernel/float64_common.mli", 66, 2169, 2192), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 66, 2169, 2172), ("kernel/float64_common.mli", 66, 2169, 2184), 0)), ([([(((("always"), (("kernel/float64_common.mli", 66, 2169, 2185), ("kernel/float64_common.mli", 66, 2169, 2191), 0))), (("kernel/float64_common.mli", 66, 2169, 2185), ("kernel/float64_common.mli", 66, 2169, 2191), 0), 0, 0)], (("kernel/float64_common.mli", 66, 2169, 2185), ("kernel/float64_common.mli", 66, 2169, 2191), 0))]), (("kernel/float64_common.mli", 66, 2169, 2169), ("kernel/float64_common.mli", 66, 2169, 2192), 0))], Tag1 ("Float64_common", 32)), 0); (("of_uint63", 421), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -40), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("kernel/float64_common.mli", 69, 2220, 2220), ("kernel/float64_common.mli", 70, 2250, 2273), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 70, 2250, 2253), ("kernel/float64_common.mli", 70, 2250, 2265), 0)), ([([(((("always"), (("kernel/float64_common.mli", 70, 2250, 2266), ("kernel/float64_common.mli", 70, 2250, 2272), 0))), (("kernel/float64_common.mli", 70, 2250, 2266), ("kernel/float64_common.mli", 70, 2250, 2272), 0), 0, 0)], (("kernel/float64_common.mli", 70, 2250, 2266), ("kernel/float64_common.mli", 70, 2250, 2272), 0))]), (("kernel/float64_common.mli", 70, 2250, 2250), ("kernel/float64_common.mli", 70, 2250, 2273), 0))], Tag1 ("Float64_common", 33)), 0); (("normfr_mantissa", 422), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("kernel/float64_common.mli", 72, 2275, 2275), ("kernel/float64_common.mli", 73, 2311, 2334), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 73, 2311, 2314), ("kernel/float64_common.mli", 73, 2311, 2326), 0)), ([([(((("always"), (("kernel/float64_common.mli", 73, 2311, 2327), ("kernel/float64_common.mli", 73, 2311, 2333), 0))), (("kernel/float64_common.mli", 73, 2311, 2327), ("kernel/float64_common.mli", 73, 2311, 2333), 0), 0, 0)], (("kernel/float64_common.mli", 73, 2311, 2327), ("kernel/float64_common.mli", 73, 2311, 2333), 0))]), (("kernel/float64_common.mli", 73, 2311, 2311), ("kernel/float64_common.mli", 73, 2311, 2334), 0))], Tag1 ("Float64_common", 34)), 0); (("eshift", 423), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0, (("kernel/float64_common.mli", 76, 2371, 2371), ("kernel/float64_common.mli", 76, 2371, 2387), 0), 0, Tag1 ("Float64_common", 35)), 0); (("frshiftexp", 424), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -33), (Tag2 ([(Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -31); (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -32)]), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("kernel/float64_common.mli", 78, 2389, 2389), ("kernel/float64_common.mli", 79, 2464, 2487), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 79, 2464, 2467), ("kernel/float64_common.mli", 79, 2464, 2479), 0)), ([([(((("always"), (("kernel/float64_common.mli", 79, 2464, 2480), ("kernel/float64_common.mli", 79, 2464, 2486), 0))), (("kernel/float64_common.mli", 79, 2464, 2480), ("kernel/float64_common.mli", 79, 2464, 2486), 0), 0, 0)], (("kernel/float64_common.mli", 79, 2464, 2480), ("kernel/float64_common.mli", 79, 2464, 2486), 0))]), (("kernel/float64_common.mli", 79, 2464, 2464), ("kernel/float64_common.mli", 79, 2464, 2487), 0))], Tag1 ("Float64_common", 36)), 0); (("ldshiftexp", 425), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Uint63")), "t"), 0, (0)), 100000000, 0, -27), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("kernel/float64_common.mli", 81, 2489, 2489), ("kernel/float64_common.mli", 82, 2525, 2548), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 82, 2525, 2528), ("kernel/float64_common.mli", 82, 2525, 2540), 0)), ([([(((("always"), (("kernel/float64_common.mli", 82, 2525, 2541), ("kernel/float64_common.mli", 82, 2525, 2547), 0))), (("kernel/float64_common.mli", 82, 2525, 2541), ("kernel/float64_common.mli", 82, 2525, 2547), 0), 0, 0)], (("kernel/float64_common.mli", 82, 2525, 2541), ("kernel/float64_common.mli", 82, 2525, 2547), 0))]), (("kernel/float64_common.mli", 82, 2525, 2525), ("kernel/float64_common.mli", 82, 2525, 2548), 0))], Tag1 ("Float64_common", 37)), 0); (("next_up", 426), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -23), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("kernel/float64_common.mli", 84, 2550, 2550), ("kernel/float64_common.mli", 84, 2550, 2570), 0), 0, Tag1 ("Float64_common", 38)), 0); (("next_down", 427), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -20), (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("kernel/float64_common.mli", 86, 2572, 2572), ("kernel/float64_common.mli", 86, 2572, 2594), 0), 0, Tag1 ("Float64_common", 39)), 0); (("equal", 428), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("kernel/float64_common.mli", 90, 2680, 2680), ("kernel/float64_common.mli", 91, 2707, 2730), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 91, 2707, 2710), ("kernel/float64_common.mli", 91, 2707, 2722), 0)), ([([(((("always"), (("kernel/float64_common.mli", 91, 2707, 2723), ("kernel/float64_common.mli", 91, 2707, 2729), 0))), (("kernel/float64_common.mli", 91, 2707, 2723), ("kernel/float64_common.mli", 91, 2707, 2729), 0), 0, 0)], (("kernel/float64_common.mli", 91, 2707, 2723), ("kernel/float64_common.mli", 91, 2707, 2729), 0))]), (("kernel/float64_common.mli", 91, 2707, 2707), ("kernel/float64_common.mli", 91, 2707, 2730), 0))], Tag1 ("Float64_common", 40)), 0); (("hash", 429), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -12), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("kernel/float64_common.mli", 93, 2732, 2732), ("kernel/float64_common.mli", 93, 2732, 2751), 0), 0, Tag1 ("Float64_common", 41)), 0); (("total_compare", 430), ((Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((("t", 401)), 0, (0)), 100000000, 0, -8), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/float64_common.mli", 96, 2834, 2834), ("kernel/float64_common.mli", 96, 2834, 2867), 0), 0, Tag1 ("Float64_common", 42)), 0); (("is_float64", 431), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Obj"), "t"), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/float64_common.mli", 98, 2869, 2869), ("kernel/float64_common.mli", 99, 2900, 2923), 0), [(("ocaml.inline", (("kernel/float64_common.mli", 99, 2900, 2903), ("kernel/float64_common.mli", 99, 2900, 2915), 0)), ([([(((("always"), (("kernel/float64_common.mli", 99, 2900, 2916), ("kernel/float64_common.mli", 99, 2900, 2922), 0))), (("kernel/float64_common.mli", 99, 2900, 2916), ("kernel/float64_common.mli", 99, 2900, 2922), 0), 0, 0)], (("kernel/float64_common.mli", 99, 2900, 2916), ("kernel/float64_common.mli", 99, 2900, 2922), 0))]), (("kernel/float64_common.mli", 99, 2900, 2900), ("kernel/float64_common.mli", 99, 2900, 2923), 0))], Tag1 ("Float64_common", 43)), 0)], "Float64_common", [("Float64_common", ("o\1660\254S\r\194c6\179w\026\209\200\151\234")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val is_float64 : Obj.t -> bool

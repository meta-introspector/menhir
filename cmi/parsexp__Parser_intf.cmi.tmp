module type State =
  sig
    type t
    val create : ?pos:Parsexp__.Positions.pos -> unit -> t
    val reset : ?pos:Parsexp__.Positions.pos -> t -> unit
    val offset : t -> int
    val line : t -> int
    val column : t -> int
    val position : t -> Parsexp__.Positions.pos
    val stop : t -> unit
  end
module type Stack = sig type t val empty : t end
module type S =
  sig
    type parsed_value
    module State : State
    module Stack : Stack
    val feed : State.t -> char -> Stack.t -> Stack.t
    val feed_eoi : State.t -> Stack.t -> parsed_value
    val feed_string : State.t -> string -> Stack.t -> Stack.t
    val feed_substring :
      State.t -> string -> pos:int -> len:int -> Stack.t -> Stack.t
    val feed_bytes : State.t -> bytes -> Stack.t -> Stack.t
    val feed_subbytes :
      State.t -> bytes -> pos:int -> len:int -> Stack.t -> Stack.t
    val parse_string :
      string -> (parsed_value, Parsexp__.Parse_error.t) result
    val parse_string_exn : string -> parsed_value
  end
module type S_eager =
  sig
    type parsed_value
    module State :
      sig
        type t
        val reset : ?pos:Parsexp__.Positions.pos -> t -> unit
        val offset : t -> int
        val line : t -> int
        val column : t -> int
        val position : t -> Parsexp__.Positions.pos
        val stop : t -> unit
        module Read_only :
          sig
            type t
            val offset : t -> int
            val line : t -> int
            val column : t -> int
            val position : t -> Parsexp__.Positions.pos
          end
        val create :
          ?pos:Parsexp__.Positions.pos ->
          ?no_sexp_is_error:bool ->
          (Read_only.t -> parsed_value -> unit) -> t
        val old_parser_cont_state : t -> Parsexp__.Old_parser_cont_state.t
      end
    module Stack : Stack
    val feed : State.t -> char -> Stack.t -> Stack.t
    val feed_eoi : State.t -> Stack.t -> unit
    val feed_string : State.t -> string -> Stack.t -> Stack.t
    val feed_substring :
      State.t -> string -> pos:int -> len:int -> Stack.t -> Stack.t
    val feed_bytes : State.t -> bytes -> Stack.t -> Stack.t
    val feed_subbytes :
      State.t -> bytes -> pos:int -> len:int -> Stack.t -> Stack.t
    module Lexbuf_consumer :
      sig
        type t
        val create : unit -> t
        val parse : t -> Lexing.lexbuf -> parsed_value
        val parse_opt : t -> Lexing.lexbuf -> parsed_value option
      end
  end
module type Parser =
  sig
    module type S = S
    module type S_eager = S_eager
    module type Stack = Stack
    val make :
      ('state, 'stack) Parsexp__.Automaton_state.Kind.t ->
      ('state, 'stack) Parsexp__.Automaton_state.Mode.t ->
      (('state, 'stack) Parsexp__.Automaton_state.t -> 'stack -> 'a) ->
      (module S with type parsed_value = 'a and type Stack.t = 'stack and type State.t = 
       ('state, 'stack) Parsexp__.Automaton_state.t)
    val make_eager :
      ('state, 'stack) Parsexp__.Automaton_state.Kind.t ->
      (('state, 'stack) Parsexp__.Automaton_state.t -> 'stack -> 'a) ->
      (module S_eager with type parsed_value = 'a and type Stack.t = 'stack and type State.t = 
       ('state, 'stack) Parsexp__.Automaton_state.t)("DEBUG:rule", [Tag4 (("State", 751), ((Tag1 ([Tag1 (("t", 756), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 5, 67, 69), ("src/parser_intf.ml", 5, 67, 75), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 0)), 1, 0); (("create", 757), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -26), (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/parser_intf.ml", 9, 192, 194), ("src/parser_intf.ml", 9, 192, 238), 0), 0, Tag1 ("Parsexp__Parser_intf", 1)), 0); (("reset", 758), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -20), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("src/parser_intf.ml", 18, 389, 391), ("src/parser_intf.ml", 18, 389, 434), 0), 0, Tag1 ("Parsexp__Parser_intf", 2)), 0); (("offset", 759), ((Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -16), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("src/parser_intf.ml", 21, 484, 486), ("src/parser_intf.ml", 21, 484, 507), 0), 0, Tag1 ("Parsexp__Parser_intf", 3)), 0); (("line", 760), ((Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -13), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -12), 0), 100000000, 0, -11), 0, (("src/parser_intf.ml", 25, 540, 542), ("src/parser_intf.ml", 25, 540, 561), 0), 0, Tag1 ("Parsexp__Parser_intf", 4)), 0); (("column", 761), ((Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/parser_intf.ml", 26, 562, 564), ("src/parser_intf.ml", 26, 562, 585), 0), 0, Tag1 ("Parsexp__Parser_intf", 5)), 0); (("position", 762), ((Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -7), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/parser_intf.ml", 27, 586, 588), ("src/parser_intf.ml", 27, 586, 621), 0), 0, Tag1 ("Parsexp__Parser_intf", 6)), 0); (("stop", 763), ((Tag1 (0, (Tag3 ((("t", 756)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/parser_intf.ml", 31, 779, 781), ("src/parser_intf.ml", 31, 779, 801), 0), 0, Tag1 ("Parsexp__Parser_intf", 7)), 0)])), 0, (("src/parser_intf.ml", 3, 14, 14), ("src/parser_intf.ml", 32, 802, 805), 0), Tag1 ("Parsexp__Parser_intf", 8)), 0); Tag4 (("Stack", 752), ((Tag1 ([Tag1 (("t", 764), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 36, 909, 911), ("src/parser_intf.ml", 36, 909, 917), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 9)), 1, 0); (("empty", 765), ((Tag3 ((("t", 764)), 0, (0)), 100000000, 0, -29), 0, (("src/parser_intf.ml", 38, 919, 921), ("src/parser_intf.ml", 38, 919, 934), 0), 0, Tag1 ("Parsexp__Parser_intf", 10)), 0)])), 0, (("src/parser_intf.ml", 34, 807, 807), ("src/parser_intf.ml", 39, 935, 938), 0), Tag1 ("Parsexp__Parser_intf", 11)), 0); Tag4 (("S", 753), ((Tag1 ([Tag1 (("parsed_value", 766), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 43, 999, 1001), ("src/parser_intf.ml", 43, 999, 1018), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 12)), 1, 0); Tag3 (("State", 767), 0, (((("State", 751))), 0, (("src/parser_intf.ml", 45, 1020, 1022), ("src/parser_intf.ml", 45, 1020, 1042), 0), Tag1 ("Parsexp__Parser_intf", 13)), 0, 0); Tag3 (("Stack", 768), 0, (((("Stack", 752))), 0, (("src/parser_intf.ml", 46, 1043, 1045), ("src/parser_intf.ml", 46, 1043, 1065), 0), Tag1 ("Parsexp__Parser_intf", 14)), 0, 0); (("feed", 769), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -85), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -84), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -83), (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("src/parser_intf.ml", 49, 1152, 1154), ("src/parser_intf.ml", 49, 1152, 1202), 0), 0, Tag1 ("Parsexp__Parser_intf", 15)), 0); (("feed_eoi", 770), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -78), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((("parsed_value", 766)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("src/parser_intf.ml", 53, 1316, 1318), ("src/parser_intf.ml", 53, 1316, 1367), 0), 0, Tag1 ("Parsexp__Parser_intf", 16)), 0); (("feed_string", 771), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -73), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -72), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -71), (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/parser_intf.ml", 57, 1405, 1407), ("src/parser_intf.ml", 57, 1405, 1464), 0), 0, Tag1 ("Parsexp__Parser_intf", 17)), 0); (("feed_substring", 772), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -62), (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("src/parser_intf.ml", 58, 1465, 1467), ("src/parser_intf.ml", 58, 1465, 1549), 0), 0, Tag1 ("Parsexp__Parser_intf", 18)), 0); (("feed_bytes", 773), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -54), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -53), (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/parser_intf.ml", 59, 1550, 1552), ("src/parser_intf.ml", 59, 1550, 1607), 0), 0, Tag1 ("Parsexp__Parser_intf", 19)), 0); (("feed_subbytes", 774), ((Tag1 (0, (Tag3 (Tag1 ((("State", 767)), "t"), 0, (0)), 100000000, 0, -48), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -47), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -46), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((("Stack", 768)), "t"), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/parser_intf.ml", 60, 1608, 1610), ("src/parser_intf.ml", 60, 1608, 1690), 0), 0, Tag1 ("Parsexp__Parser_intf", 20)), 0); (("parse_string", 775), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), (Tag3 (Tag1 ((Tag2 ("Stdlib")), "result"), [(Tag3 ((("parsed_value", 766)), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Parse_error"), "t"), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("src/parser_intf.ml", 64, 1727, 1729), ("src/parser_intf.ml", 64, 1727, 1794), 0), 0, Tag1 ("Parsexp__Parser_intf", 21)), 0); (("parse_string_exn", 776), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32), (Tag3 ((("parsed_value", 766)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/parser_intf.ml", 65, 1795, 1797), ("src/parser_intf.ml", 65, 1795, 1842), 0), 0, Tag1 ("Parsexp__Parser_intf", 22)), 0)])), 0, (("src/parser_intf.ml", 41, 940, 940), ("src/parser_intf.ml", 66, 1843, 1846), 0), Tag1 ("Parsexp__Parser_intf", 23)), 0); Tag4 (("S_eager", 754), ((Tag1 ([Tag1 (("parsed_value", 777), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 104, 3140, 3142), ("src/parser_intf.ml", 104, 3140, 3159), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 24)), 1, 0); Tag3 (("State", 778), 0, (Tag1 ([Tag1 (("t", 787), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 5, 67, 69), ("src/parser_intf.ml", 5, 67, 75), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 0)), 1, 0); (("reset", 788), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -170)], (0)), 100000000, 0, -169), (Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -168), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -167), 0), 100000000, 0, -166), 0), 100000000, 0, -165), 0, (("src/parser_intf.ml", 18, 389, 391), ("src/parser_intf.ml", 18, 389, 434), 0), 0, Tag1 ("Parsexp__Parser_intf", 2)), 0); (("offset", 789), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -164), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -163), 0), 100000000, 0, -162), 0, (("src/parser_intf.ml", 21, 484, 486), ("src/parser_intf.ml", 21, 484, 507), 0), 0, Tag1 ("Parsexp__Parser_intf", 3)), 0); (("line", 790), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/parser_intf.ml", 25, 540, 542), ("src/parser_intf.ml", 25, 540, 561), 0), 0, Tag1 ("Parsexp__Parser_intf", 4)), 0); (("column", 791), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -158), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0, (("src/parser_intf.ml", 26, 562, 564), ("src/parser_intf.ml", 26, 562, 585), 0), 0, Tag1 ("Parsexp__Parser_intf", 5)), 0); (("position", 792), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -155), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("src/parser_intf.ml", 27, 586, 588), ("src/parser_intf.ml", 27, 586, 621), 0), 0, Tag1 ("Parsexp__Parser_intf", 6)), 0); (("stop", 793), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -152), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -151), 0), 100000000, 0, -150), 0, (("src/parser_intf.ml", 31, 779, 781), ("src/parser_intf.ml", 31, 779, 801), 0), 0, Tag1 ("Parsexp__Parser_intf", 7)), 0); Tag3 (("Read_only", 794), 0, (Tag1 ([Tag1 (("t", 797), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 111, 3276, 3282), ("src/parser_intf.ml", 111, 3276, 3288), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 25)), 1, 0); (("offset", 798), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -182), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -181), 0), 100000000, 0, -180), 0, (("src/parser_intf.ml", 113, 3290, 3296), ("src/parser_intf.ml", 113, 3290, 3317), 0), 0, Tag1 ("Parsexp__Parser_intf", 26)), 0); (("line", 799), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -179), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -178), 0), 100000000, 0, -177), 0, (("src/parser_intf.ml", 114, 3318, 3324), ("src/parser_intf.ml", 114, 3318, 3343), 0), 0, Tag1 ("Parsexp__Parser_intf", 27)), 0); (("column", 800), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -176), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/parser_intf.ml", 115, 3344, 3350), ("src/parser_intf.ml", 115, 3344, 3371), 0), 0, Tag1 ("Parsexp__Parser_intf", 28)), 0); (("position", 801), ((Tag1 (0, (Tag3 ((("t", 797)), 0, (0)), 100000000, 0, -173), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("src/parser_intf.ml", 116, 3372, 3378), ("src/parser_intf.ml", 116, 3372, 3411), 0), 0, Tag1 ("Parsexp__Parser_intf", 29)), 0)]), 0, (("src/parser_intf.ml", 109, 3201, 3205), ("src/parser_intf.ml", 117, 3412, 3419), 0), Tag1 ("Parsexp__Parser_intf", 30)), 0, 0); (("create", 795), ((Tag1 (Tag1 ("pos"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Positions"), "pos"), 0, (0)), 100000000, 0, -149)], (0)), 100000000, 0, -148), (Tag1 (Tag1 ("no_sexp_is_error"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -147)], (0)), 100000000, 0, -146), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((("Read_only", 794)), "t"), 0, (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 ((("parsed_value", 777)), 0, (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("src/parser_intf.ml", 131, 4172, 4176), ("src/parser_intf.ml", 135, 4316, 4326), 0), 0, Tag1 ("Parsexp__Parser_intf", 31)), 0); (("old_parser_cont_state", 796), ((Tag1 (0, (Tag3 ((("t", 787)), 0, (0)), 100000000, 0, -136), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Old_parser_cont_state"), "t"), 0, (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("src/parser_intf.ml", 139, 4341, 4345), ("src/parser_intf.ml", 139, 4341, 4401), 0), 0, Tag1 ("Parsexp__Parser_intf", 32)), 0)]), 0, (("src/parser_intf.ml", 106, 3161, 3163), ("src/parser_intf.ml", 142, 4415, 4420), 0), Tag1 ("Parsexp__Parser_intf", 33)), 0, 0); Tag3 (("Stack", 779), 0, (((("Stack", 752))), 0, (("src/parser_intf.ml", 144, 4422, 4424), ("src/parser_intf.ml", 144, 4422, 4444), 0), Tag1 ("Parsexp__Parser_intf", 34)), 0, 0); (("feed", 780), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 ((Tag3 ("char", 2)), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -131), (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("src/parser_intf.ml", 146, 4446, 4448), ("src/parser_intf.ml", 146, 4446, 4496), 0), 0, Tag1 ("Parsexp__Parser_intf", 35)), 0); (("feed_eoi", 781), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -126), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -125), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("src/parser_intf.ml", 147, 4497, 4499), ("src/parser_intf.ml", 147, 4497, 4540), 0), 0, Tag1 ("Parsexp__Parser_intf", 36)), 0); (("feed_string", 782), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -119), (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -118), 0), 100000000, 0, -117), 0), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("src/parser_intf.ml", 148, 4541, 4543), ("src/parser_intf.ml", 148, 4541, 4600), 0), 0, Tag1 ("Parsexp__Parser_intf", 37)), 0); (("feed_substring", 783), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -114), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -113), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -110), (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -109), 0), 100000000, 0, -108), 0), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("src/parser_intf.ml", 149, 4601, 4603), ("src/parser_intf.ml", 149, 4601, 4685), 0), 0, Tag1 ("Parsexp__Parser_intf", 38)), 0); (("feed_bytes", 784), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -101), (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("src/parser_intf.ml", 150, 4686, 4688), ("src/parser_intf.ml", 150, 4686, 4743), 0), 0, Tag1 ("Parsexp__Parser_intf", 39)), 0); (("feed_subbytes", 785), ((Tag1 (0, (Tag3 (Tag1 ((("State", 778)), "t"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 ((Tag3 ("bytes", 3)), 0, (0)), 100000000, 0, -95), (Tag1 (("pos"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -94), (Tag1 (("len"), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 ((("Stack", 779)), "t"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("src/parser_intf.ml", 151, 4744, 4746), ("src/parser_intf.ml", 151, 4744, 4826), 0), 0, Tag1 ("Parsexp__Parser_intf", 40)), 0); Tag3 (("Lexbuf_consumer", 786), 0, (Tag1 ([Tag1 (("t", 802), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/parser_intf.ml", 154, 4859, 4863), ("src/parser_intf.ml", 154, 4859, 4869), 0), 0, 0, 0, Tag1 ("Parsexp__Parser_intf", 41)), 1, 0); (("create", 803), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -196), (Tag3 ((("t", 802)), 0, (0)), 100000000, 0, -195), 0), 100000000, 0, -194), 0, (("src/parser_intf.ml", 156, 4871, 4875), ("src/parser_intf.ml", 156, 4871, 4897), 0), 0, Tag1 ("Parsexp__Parser_intf", 42)), 0); (("parse", 804), ((Tag1 (0, (Tag3 ((("t", 802)), 0, (0)), 100000000, 0, -193), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -192), (Tag3 ((("parsed_value", 777)), 0, (0)), 100000000, 0, -191), 0), 100000000, 0, -190), 0), 100000000, 0, -189), 0, (("src/parser_intf.ml", 159, 4972, 4976), ("src/parser_intf.ml", 159, 4972, 5022), 0), 0, Tag1 ("Parsexp__Parser_intf", 43)), 0); (("parse_opt", 805), ((Tag1 (0, (Tag3 ((("t", 802)), 0, (0)), 100000000, 0, -188), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -187), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("parsed_value", 777)), 0, (0)), 100000000, 0, -186)], (0)), 100000000, 0, -185), 0), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("src/parser_intf.ml", 163, 5184, 5188), ("src/parser_intf.ml", 163, 5184, 5245), 0), 0, Tag1 ("Parsexp__Parser_intf", 44)), 0)]), 0, (("src/parser_intf.ml", 153, 4828, 4830), ("src/parser_intf.ml", 164, 5246, 5251), 0), Tag1 ("Parsexp__Parser_intf", 45)), 0, 0)])), 0, (("src/parser_intf.ml", 68, 1848, 1848), ("src/parser_intf.ml", 165, 5252, 5255), 0), Tag1 ("Parsexp__Parser_intf", 46)), 0); Tag4 (("Parser", 755), ((Tag1 ([Tag4 (("S", 806), ((((("S", 753)))), 0, (("src/parser_intf.ml", 168, 5282, 5284), ("src/parser_intf.ml", 168, 5282, 5301), 0), Tag1 ("Parsexp__Parser_intf", 47)), 0); Tag4 (("S_eager", 807), ((((("S_eager", 754)))), 0, (("src/parser_intf.ml", 169, 5302, 5304), ("src/parser_intf.ml", 169, 5302, 5333), 0), Tag1 ("Parsexp__Parser_intf", 48)), 0); Tag4 (("Stack", 808), ((((("Stack", 752)))), 0, (("src/parser_intf.ml", 170, 5334, 5336), ("src/parser_intf.ml", 170, 5334, 5361), 0), Tag1 ("Parsexp__Parser_intf", 49)), 0); (("make", 809), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "Kind"), "t"), [((("state")), 100000000, 0, -215); ((("stack")), 100000000, 0, -213)], (0)), 100000000, 0, -220), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "Mode"), "t"), [((("state")), 100000000, 0, -215); ((("stack")), 100000000, 0, -213)], (0)), 100000000, 0, -219), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "t"), [((("state")), 100000000, 0, -215); ((("stack")), 100000000, 0, -213)], (0)), 100000000, 0, -218), (Tag1 (0, ((("stack")), 100000000, 0, -213), ((("a")), 100000000, 0, -212), 0), 100000000, 0, -217), 0), 100000000, 0, -216), (Tag11 ((("S", 806)), [(("parsed_value"), ((("a")), 100000000, 0, -212)); (Tag1 (("Stack"), "t"), ((("stack")), 100000000, 0, -213)); (Tag1 (("State"), "t"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "t"), [((("state")), 100000000, 0, -215); ((("stack")), 100000000, 0, -213)], (0)), 100000000, 0, -214))]), 100000000, 0, -211), 0), 100000000, 0, -210), 0), 100000000, 0, -209), 0), 100000000, 0, -208), 0, (("src/parser_intf.ml", 172, 5363, 5365), ("src/parser_intf.ml", 179, 5646, 5682), 0), 0, Tag1 ("Parsexp__Parser_intf", 54)), 0); (("make_eager", 810), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "Kind"), "t"), [((("state")), 100000000, 0, -203); ((("stack")), 100000000, 0, -201)], (0)), 100000000, 0, -207), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "t"), [((("state")), 100000000, 0, -203); ((("stack")), 100000000, 0, -201)], (0)), 100000000, 0, -206), (Tag1 (0, ((("stack")), 100000000, 0, -201), ((("a")), 100000000, 0, -200), 0), 100000000, 0, -205), 0), 100000000, 0, -204), (Tag11 ((("S_eager", 807)), [(("parsed_value"), ((("a")), 100000000, 0, -200)); (Tag1 (("Stack"), "t"), ((("stack")), 100000000, 0, -201)); (Tag1 (("State"), "t"), (Tag3 (Tag1 (Tag1 ((Tag2 ("Parsexp__")), "Automaton_state"), "t"), [((("state")), 100000000, 0, -203); ((("stack")), 100000000, 0, -201)], (0)), 100000000, 0, -202))]), 100000000, 0, -199), 0), 100000000, 0, -198), 0), 100000000, 0, -197), 0, (("src/parser_intf.ml", 181, 5684, 5686), ("src/parser_intf.ml", 187, 5932, 5968), 0), 0, Tag1 ("Parsexp__Parser_intf", 58)), 0)])), 0, (("src/parser_intf.ml", 167, 5257, 5257), ("src/parser_intf.ml", 188, 5969, 5972), 0), Tag1 ("Parsexp__Parser_intf", 59)), 0)], "Parsexp__Parser_intf", [("Parsexp__Parser_intf", ("\154\197J\002\004\252i\162\190\241\151\210\157\024\167e")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Parsexp__Positions", ("BE\135\222xW\224\233\184\004o\169\248\bH\230")); ("Parsexp__Parse_error_intf", ("\011\229\182\179W\161\176\160P\249\165\214ef\011\229")); ("Parsexp__Parse_error", ("*\031\166\142M\171\026\030\\K7\157Y\232\208\234")); ("Parsexp__Old_parser_cont_state", ("\2535&90\136_\154\027}Oc0\138%X")); ("Parsexp__Import", ("\017\029\157\225\239\135p*0\207\146\197\020\128\195!")); ("Parsexp__Cst", (")\228;6o~\227\000pRf\153\216\244sD")); ("Parsexp__Automaton_state_intf", ("\196\146]2\143u|+%\027\185v2\225\r\229")); ("Parsexp__Automaton_state", ("L#\030=\218R\022 \228<\188-\r\211\157_")); ("Parsexp__Automaton_stack_intf", ("\235\204\0296]\2449F\029\b:\006\217\162f\024")); ("Parsexp__Automaton_stack", ("\246/\135\251\031)\015r\003\237\254S$\181\243\201")); ("Parsexp__", ("\182\180\203\030\218\020\246\196\221\171_\030GE\171\192")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

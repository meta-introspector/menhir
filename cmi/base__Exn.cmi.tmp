type t = exn
val sexp_of_t : t -> Sexplib0.Sexp.t
val pp : Base__.Formatter.t -> t -> unit
exception Finally of t * t
exception Reraised of string * t
val create_s : Base__.Sexp.t -> t
val raise_without_backtrace : t -> 'a
val raise_with_original_backtrace :
  t -> Base__.Import.Stdlib.Printexc.raw_backtrace -> 'a
val reraise : t -> string -> 'a
val reraisef : t -> ('a, unit, string, unit -> 'b) format4 -> 'a
val to_string : t -> string
val to_string_mach : t -> string
val protectx : f:('a -> 'b) -> 'a -> finally:('a -> unit) -> 'b
val protect : f:(unit -> 'a) -> finally:(unit -> unit) -> 'a
val handle_uncaught : exit:bool -> (unit -> unit) -> unit
val handle_uncaught_and_exit : (unit -> 'a) -> 'a
val reraise_uncaught : string -> (unit -> 'a) -> 'a
val does_raise : (unit -> 'a) -> bool
val is_phys_equal_most_recent : t -> bool
val initialize_module : unit -> unit
("DEBUG:rule", [Tag1 (("t", 1444), (0, 0, 0, 1, ((Tag3 ((Tag3 ("exn", 7)), 0, (0)), 100000000, 0, -90)), 0, 0, 0, 0, (("src/exn.mli", 10, 313, 313), ("src/exn.mli", 10, 313, 353), 0), [(("deriving_inline", (("src/exn.mli", 10, 313, 329), ("src/exn.mli", 10, 313, 344), 0)), ([([(((("sexp_of"), (("src/exn.mli", 10, 313, 345), ("src/exn.mli", 10, 313, 352), 0))), (("src/exn.mli", 10, 313, 345), ("src/exn.mli", 10, 313, 352), 0), 0, 0)], (("src/exn.mli", 10, 313, 345), ("src/exn.mli", 10, 313, 352), 0))]), (("src/exn.mli", 10, 313, 326), ("src/exn.mli", 10, 313, 353), 0))], 0, 0, Tag1 ("Base__Exn", 0)), 1, 0); (("sexp_of_t", 1445), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -89), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -88), 0), 100000000, 0, -87), 0, (("src/exn.mli", 12, 355, 355), ("src/exn.mli", 12, 355, 391), 0), 0, Tag1 ("Base__Exn", 1)), 0); (("pp", 1446), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Formatter"), "t"), 0, (0)), 100000000, 0, -86), (Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -85), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("src/exn.mli", 16, 403, 411), ("src/exn.mli", 16, 403, 444), 0), 0, Tag1 ("Base__Pretty_printer", 2)), 0); Tag2 (("Finally", 1447), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -80); (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -81)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Base__Exn", 3)), 2, 0); Tag2 (("Reraised", 1448), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -78); (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -79)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Base__Exn", 4)), 2, 0); (("create_s", 1449), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -77), (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("src/exn.mli", 28, 934, 934), ("src/exn.mli", 28, 934, 960), 0), 0, Tag1 ("Base__Exn", 5)), 0); (("raise_without_backtrace", 1450), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -74), ((0), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("src/exn.mli", 31, 1029, 1029), ("src/exn.mli", 31, 1029, 1065), 0), 0, Tag1 ("Base__Exn", 6)), 0); (("raise_with_original_backtrace", 1451), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -71), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 (Tag1 ((Tag2 ("Base__")), "Import"), "Stdlib"), "Printexc"), "raw_backtrace"), 0, (0)), 100000000, 0, -70), ((0), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0, (("src/exn.mli", 36, 1280, 1280), ("src/exn.mli", 36, 1280, 1355), 0), 0, Tag1 ("Base__Exn", 7)), 0); (("reraise", 1452), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -66), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -65), ((0), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/exn.mli", 38, 1357, 1357), ("src/exn.mli", 38, 1357, 1387), 0), 0, Tag1 ("Base__Exn", 8)), 0); (("reraisef", 1453), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "format4"), [((("a")), 100000000, 0, -54); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -56); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -57); (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -60), ((0), 100000000, 0, -59), 0), 100000000, 0, -58)], (0)), 100000000, 0, -55), ((("a")), 100000000, 0, -54), 0), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("src/exn.mli", 49, 1600, 1600), ("src/exn.mli", 49, 1600, 1663), 0), 0, Tag1 ("Base__Exn", 9)), 0); (("to_string", 1454), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -51), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/exn.mli", 53, 1701, 1701), ("src/exn.mli", 53, 1701, 1728), 0), 0, Tag1 ("Base__Exn", 10)), 0); (("to_string_mach", 1455), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("src/exn.mli", 56, 1766, 1766), ("src/exn.mli", 56, 1766, 1798), 0), 0, Tag1 ("Base__Exn", 11)), 0); (("protectx", 1456), ((Tag1 (("f"), (Tag1 (0, ((("a")), 100000000, 0, -44), ((("b")), 100000000, 0, -41), 0), 100000000, 0, -45), (Tag1 (0, ((("a")), 100000000, 0, -44), (Tag1 (("finally"), (Tag1 (0, ((("a")), 100000000, 0, -44), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), 0), 100000000, 0, -42), ((("b")), 100000000, 0, -41), 0), 100000000, 0, -40), 0), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("src/exn.mli", 60, 1899, 1899), ("src/exn.mli", 60, 1899, 1982), 0), 0, Tag1 ("Base__Exn", 12)), 0); (("protect", 1457), ((Tag1 (("f"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -37), ((("a")), 100000000, 0, -32), 0), 100000000, 0, -36), (Tag1 (("finally"), (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), ((("a")), 100000000, 0, -32), 0), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("src/exn.mli", 62, 1984, 1984), ("src/exn.mli", 62, 1984, 2064), 0), 0, Tag1 ("Base__Exn", 13)), 0); (("handle_uncaught", 1458), ((Tag1 (("exit"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("src/exn.mli", 71, 2414, 2414), ("src/exn.mli", 71, 2414, 2481), 0), 0, Tag1 ("Base__Exn", 14)), 0); (("handle_uncaught_and_exit", 1459), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -22), ((("a")), 100000000, 0, -20), 0), 100000000, 0, -21), ((("a")), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("src/exn.mli", 75, 2616, 2616), ("src/exn.mli", 75, 2616, 2675), 0), 0, Tag1 ("Base__Exn", 15)), 0); (("reraise_uncaught", 1460), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -17), ((("a")), 100000000, 0, -15), 0), 100000000, 0, -16), ((("a")), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/exn.mli", 87, 3102, 3102), ("src/exn.mli", 87, 3102, 3163), 0), 0, Tag1 ("Base__Exn", 16)), 0); (("does_raise", 1461), ((Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -12), ((0), 100000000, 0, -11), 0), 100000000, 0, -10), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("src/exn.mli", 92, 3263, 3263), ("src/exn.mli", 92, 3263, 3309), 0), 0, Tag1 ("Base__Exn", 17)), 0); (("is_phys_equal_most_recent", 1462), ((Tag1 (0, (Tag3 ((("t", 1444)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("src/exn.mli", 102, 3738, 3738), ("src/exn.mli", 102, 3738, 3779), 0), 0, Tag1 ("Base__Exn", 18)), 0); (("initialize_module", 1463), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/exn.mli", 107, 3957, 3957), ("src/exn.mli", 107, 3957, 3993), 0), 0, Tag1 ("Base__Exn", 19)), 0); Tag3 (("Private", 1464), 0, (Tag1 ([(("clear_backtrace", 1465), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("src/exn.mli", 115, 4175, 4177), ("src/exn.mli", 115, 4175, 4211), 0), 0, Tag1 ("Base__Exn", 20)), 0)]), 0, (("src/exn.mli", 114, 4154, 4154), ("src/exn.mli", 116, 4212, 4215), 0), Tag1 ("Base__Exn", 21)), 0, 0)], "Base__Exn", [("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])
module Private : sig val clear_backtrace : unit -> unit end

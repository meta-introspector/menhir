val is_functor : ('ty, 'a) Declarations.functorize -> bool
val destr_functor :
  ('ty, 'a) Declarations.functorize ->
  Names.MBId.t * 'ty * ('ty, 'a) Declarations.functorize
val destr_nofunctor :
  Names.ModPath.t -> ('ty, 'a) Declarations.functorize -> 'a
val module_type_of_module :
  Declarations.module_body -> Declarations.module_type_body
val module_body_of_type :
  Names.ModPath.t ->
  Declarations.module_type_body -> Declarations.module_body
val check_modpath_equiv :
  Environ.env -> Names.ModPath.t -> Names.ModPath.t -> unit
val implem_smart_map :
  (Declarations.structure_body -> Declarations.structure_body) ->
  (Declarations.module_expression -> Declarations.module_expression) ->
  Declarations.module_implementation -> Declarations.module_implementation
val annotate_module_expression :
  Declarations.module_expression ->
  Declarations.module_signature ->
  (Declarations.module_type_body,
   (Constr.constr * Univ.AbstractContext.t option)
   Declarations.module_alg_expr)
  Declarations.functorize
val annotate_struct_body :
  Declarations.structure_body ->
  Declarations.module_signature -> Declarations.module_signature
val subst_signature :
  Mod_subst.substitution ->
  Declarations.module_signature -> Declarations.module_signature
val subst_structure :
  Mod_subst.substitution ->
  Declarations.structure_body -> Declarations.structure_body
val add_structure :
  Names.ModPath.t ->
  Declarations.structure_body ->
  Mod_subst.delta_resolver -> Environ.env -> Environ.env
val add_module : Declarations.module_body -> Environ.env -> Environ.env
val add_linked_module :
  Declarations.module_body -> Environ.link_info -> Environ.env -> Environ.env
val add_module_type :
  Names.ModPath.t ->
  Declarations.module_type_body -> Environ.env -> Environ.env
val add_retroknowledge :
  Declarations.module_implementation Declarations.module_retroknowledge ->
  Environ.env -> Environ.env
val strengthen :
  Declarations.module_type_body ->
  Names.ModPath.t -> Declarations.module_type_body
val strengthen_and_subst_module_body :
  Declarations.module_body ->
  Names.ModPath.t -> bool -> Declarations.module_body
val subst_modtype_signature_and_resolver :
  Names.ModPath.t ->
  Names.ModPath.t ->
  Declarations.module_signature ->
  Mod_subst.delta_resolver ->
  Declarations.module_signature * Mod_subst.delta_resolver
val inline_delta_resolver :
  Environ.env ->
  Entries.inline ->
  Names.ModPath.t ->
  Names.MBId.t ->
  Declarations.module_type_body ->
  Mod_subst.delta_resolver -> Mod_subst.delta_resolver
val clean_bounded_mod_expr :
  Declarations.module_signature -> Declarations.module_signature
type signature_mismatch_error =
    InductiveFieldExpected of Declarations.mutual_inductive_body
  | DefinitionFieldExpected
  | ModuleFieldExpected
  | ModuleTypeFieldExpected
  | NotConvertibleInductiveField of Names.Id.t
  | NotConvertibleConstructorField of Names.Id.t
  | NotConvertibleBodyField
  | NotConvertibleTypeField of Environ.env * Constr.types * Constr.types
  | CumulativeStatusExpected of bool
  | PolymorphicStatusExpected of bool
  | NotSameConstructorNamesField
  | NotSameInductiveNameInBlockField
  | FiniteInductiveFieldExpected of bool
  | InductiveNumbersFieldExpected of int
  | InductiveParamsNumberField of int
  | RecordFieldExpected of bool
  | RecordProjectionsExpected of Names.Name.t list
  | NotEqualInductiveAliases
  | IncompatibleUniverses of UGraph.univ_inconsistency
  | IncompatiblePolymorphism of Environ.env * Constr.types * Constr.types
  | IncompatibleConstraints of { got : Univ.AbstractContext.t;
      expect : Univ.AbstractContext.t;
    }
  | IncompatibleVariance
type subtyping_trace_elt =
    Submodule of Names.Label.t
  | FunctorArgument of int
type module_typing_error =
    SignatureMismatch of subtyping_trace_elt list * Names.Label.t *
      signature_mismatch_error
  | LabelAlreadyDeclared of Names.Label.t
  | NotAFunctor
  | IsAFunctor of Names.ModPath.t
  | IncompatibleModuleTypes of Declarations.module_type_body *
      Declarations.module_type_body
  | NotEqualModulePaths of Names.ModPath.t * Names.ModPath.t
  | NoSuchLabel of Names.Label.t * Names.ModPath.t
  | NotAModuleLabel of Names.Label.t
  | NotAConstant of Names.Label.t
  | IncorrectWithConstraint of Names.Label.t
  | GenerativeModuleExpected of Names.Label.t
  | LabelMissing of Names.Label.t * string
  | IncludeRestrictedFunctor of Names.ModPath.t
exception ModuleTypingError of module_typing_error
val error_existing_label : Names.Label.t -> 'a
val error_incompatible_modtypes :
  Declarations.module_type_body -> Declarations.module_type_body -> 'a
val error_signature_mismatch :
  subtyping_trace_elt list -> Names.Label.t -> signature_mismatch_error -> 'a
val error_no_such_label : Names.Label.t -> Names.ModPath.t -> 'a
val error_not_a_module_label : Names.Label.t -> 'a
val error_not_a_constant : Names.Label.t -> 'a
val error_incorrect_with_constraint : Names.Label.t -> 'a
val error_generative_module_expected : Names.Label.t -> 'a
val error_no_such_label_sub : Names.Label.t -> string -> 'a
("DEBUG:rule", [(("is_functor", 1018), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "functorize"), [((("ty")), 100000000, 0, -226); ((("a")), 100000000, 0, -227)], (0)), 100000000, 0, -225), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("kernel/modops.mli", 22, 836, 836), ("kernel/modops.mli", 22, 836, 880), 0), 0, Tag1 ("Modops", 1)), 0); (("destr_functor", 1019), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "functorize"), [((("ty")), 100000000, 0, -219); ((("a")), 100000000, 0, -221)], (0)), 100000000, 0, -222), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -218); ((("ty")), 100000000, 0, -219); (Tag3 (Tag1 ((Tag2 ("Declarations")), "functorize"), [((("ty")), 100000000, 0, -219); ((("a")), 100000000, 0, -221)], (0)), 100000000, 0, -220)]), 100000000, 0, -217), 0), 100000000, 0, -216), 0, (("kernel/modops.mli", 24, 882, 882), ("kernel/modops.mli", 24, 882, 959), 0), 0, Tag1 ("Modops", 2)), 0); (("destr_nofunctor", 1020), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -215), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "functorize"), [((("ty")), 100000000, 0, -214); ((("a")), 100000000, 0, -212)], (0)), 100000000, 0, -213), ((("a")), 100000000, 0, -212), 0), 100000000, 0, -211), 0), 100000000, 0, -210), 0, (("kernel/modops.mli", 26, 961, 961), ("kernel/modops.mli", 26, 961, 1021), 0), 0, Tag1 ("Modops", 3)), 0); (("module_type_of_module", 1021), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -209), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -208), 0), 100000000, 0, -207), 0, (("kernel/modops.mli", 30, 1088, 1088), ("kernel/modops.mli", 30, 1088, 1147), 0), 0, Tag1 ("Modops", 4)), 0); (("module_body_of_type", 1022), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -206), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -205), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("kernel/modops.mli", 31, 1148, 1148), ("kernel/modops.mli", 31, 1148, 1218), 0), 0, Tag1 ("Modops", 5)), 0); (("check_modpath_equiv", 1023), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -199), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -198), 0), 100000000, 0, -197), 0), 100000000, 0, -196), 0), 100000000, 0, -195), 0, (("kernel/modops.mli", 33, 1220, 1220), ("kernel/modops.mli", 33, 1220, 1283), 0), 0, Tag1 ("Modops", 6)), 0); (("implem_smart_map", 1024), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -194), (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -193), 0), 100000000, 0, -192), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_expression"), 0, (0)), 100000000, 0, -191), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_expression"), 0, (0)), 100000000, 0, -190), 0), 100000000, 0, -189), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_implementation"), 0, (0)), 100000000, 0, -188), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_implementation"), 0, (0)), 100000000, 0, -187), 0), 100000000, 0, -186), 0), 100000000, 0, -185), 0), 100000000, 0, -184), 0, (("kernel/modops.mli", 35, 1285, 1285), ("kernel/modops.mli", 38, 1394, 1444), 0), 0, Tag1 ("Modops", 7)), 0); (("annotate_module_expression", 1025), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_expression"), 0, (0)), 100000000, 0, -183), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -182), (Tag3 (Tag1 ((Tag2 ("Declarations")), "functorize"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -176); (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_alg_expr"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -179); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180)]), 100000000, 0, -178)], (0)), 100000000, 0, -177)], (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("kernel/modops.mli", 40, 1446, 1446), ("kernel/modops.mli", 41, 1520, 1609), 0), 0, Tag1 ("Modops", 8)), 0); (("annotate_struct_body", 1026), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -172), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -171), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("kernel/modops.mli", 43, 1611, 1611), ("kernel/modops.mli", 43, 1611, 1692), 0), 0, Tag1 ("Modops", 9)), 0); (("subst_signature", 1027), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -166), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("kernel/modops.mli", 47, 1721, 1721), ("kernel/modops.mli", 47, 1721, 1795), 0), 0, Tag1 ("Modops", 10)), 0); (("subst_structure", 1028), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "substitution"), 0, (0)), 100000000, 0, -162), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -161), (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("kernel/modops.mli", 48, 1796, 1796), ("kernel/modops.mli", 48, 1796, 1866), 0), 0, Tag1 ("Modops", 11)), 0); (("add_structure", 1029), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "structure_body"), 0, (0)), 100000000, 0, -156), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -154), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -153), 0), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0, (("kernel/modops.mli", 52, 1906, 1906), ("kernel/modops.mli", 53, 1926, 1987), 0), 0, Tag1 ("Modops", 12)), 0); (("add_module", 1030), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -148), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -147), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), 0), 100000000, 0, -144), 0, (("kernel/modops.mli", 56, 2054, 2054), ("kernel/modops.mli", 56, 2054, 2096), 0), 0, Tag1 ("Modops", 13)), 0); (("add_linked_module", 1031), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -143), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "link_info"), 0, (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -141), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -140), 0), 100000000, 0, -139), 0), 100000000, 0, -138), 0), 100000000, 0, -137), 0, (("kernel/modops.mli", 60, 2236, 2236), ("kernel/modops.mli", 60, 2236, 2298), 0), 0, Tag1 ("Modops", 14)), 0); (("add_module_type", 1032), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -136), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -135), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -134), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("kernel/modops.mli", 63, 2331, 2331), ("kernel/modops.mli", 63, 2331, 2396), 0), 0, Tag1 ("Modops", 15)), 0); (("add_retroknowledge", 1033), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_retroknowledge"), [(Tag3 (Tag1 ((Tag2 ("Declarations")), "module_implementation"), 0, (0)), 100000000, 0, -129)], (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("kernel/modops.mli", 65, 2398, 2398), ("kernel/modops.mli", 65, 2398, 2480), 0), 0, Tag1 ("Modops", 16)), 0); (("strengthen", 1034), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("kernel/modops.mli", 69, 2509, 2509), ("kernel/modops.mli", 69, 2509, 2575), 0), 0, Tag1 ("Modops", 17)), 0); (("strengthen_and_subst_module_body", 1035), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_body"), 0, (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("kernel/modops.mli", 71, 2577, 2577), ("kernel/modops.mli", 71, 2577, 2663), 0), 0, Tag1 ("Modops", 18)), 0); (("subst_modtype_signature_and_resolver", 1036), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -111), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -110), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -109), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -108), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -106); (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -107)]), 100000000, 0, -105), 0), 100000000, 0, -104), 0), 100000000, 0, -103), 0), 100000000, 0, -102), 0), 100000000, 0, -101), 0, (("kernel/modops.mli", 73, 2665, 2665), ("kernel/modops.mli", 74, 2734, 2807), 0), 0, Tag1 ("Modops", 19)), 0); (("inline_delta_resolver", 1037), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -100), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Entries")), "inline"), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "MBId"), "t"), 0, (0)), 100000000, 0, -97), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -96), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -95), (Tag3 (Tag1 ((Tag2 ("Mod_subst")), "delta_resolver"), 0, (0)), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("kernel/modops.mli", 78, 2858, 2858), ("kernel/modops.mli", 80, 2948, 2982), 0), 0, Tag1 ("Modops", 20)), 0); (("clean_bounded_mod_expr", 1038), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -87), (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_signature"), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("kernel/modops.mli", 90, 3182, 3182), ("kernel/modops.mli", 90, 3182, 3247), 0), 0, Tag1 ("Modops", 21)), 0); Tag1 (("signature_mismatch_error", 1039), (0, 0, Tag1 ([(("InductiveFieldExpected", 855), ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -65)]), 0, (("kernel/modops.mli", 95, 3301, 3303), ("kernel/modops.mli", 95, 3301, 3352), 0), 0, Tag1 ("Modops", 23)); (("DefinitionFieldExpected", 856), (0), 0, (("kernel/modops.mli", 96, 3353, 3355), ("kernel/modops.mli", 96, 3353, 3380), 0), 0, Tag1 ("Modops", 24)); (("ModuleFieldExpected", 857), (0), 0, (("kernel/modops.mli", 97, 3381, 3383), ("kernel/modops.mli", 97, 3381, 3404), 0), 0, Tag1 ("Modops", 25)); (("ModuleTypeFieldExpected", 858), (0), 0, (("kernel/modops.mli", 98, 3405, 3407), ("kernel/modops.mli", 98, 3405, 3432), 0), 0, Tag1 ("Modops", 26)); (("NotConvertibleInductiveField", 859), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -66)]), 0, (("kernel/modops.mli", 99, 3433, 3435), ("kernel/modops.mli", 99, 3433, 3473), 0), 0, Tag1 ("Modops", 27)); (("NotConvertibleConstructorField", 876), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -67)]), 0, (("kernel/modops.mli", 100, 3474, 3476), ("kernel/modops.mli", 100, 3474, 3516), 0), 0, Tag1 ("Modops", 28)); (("NotConvertibleBodyField", 877), (0), 0, (("kernel/modops.mli", 101, 3517, 3519), ("kernel/modops.mli", 101, 3517, 3544), 0), 0, Tag1 ("Modops", 29)); (("NotConvertibleTypeField", 878), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -68); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -69); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -70)]), 0, (("kernel/modops.mli", 102, 3545, 3547), ("kernel/modops.mli", 102, 3545, 3595), 0), 0, Tag1 ("Modops", 30)); (("CumulativeStatusExpected", 879), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -71)]), 0, (("kernel/modops.mli", 103, 3596, 3598), ("kernel/modops.mli", 103, 3596, 3632), 0), 0, Tag1 ("Modops", 31)); (("PolymorphicStatusExpected", 880), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -72)]), 0, (("kernel/modops.mli", 104, 3633, 3635), ("kernel/modops.mli", 104, 3633, 3670), 0), 0, Tag1 ("Modops", 32)); (("NotSameConstructorNamesField", 881), (0), 0, (("kernel/modops.mli", 105, 3671, 3673), ("kernel/modops.mli", 105, 3671, 3703), 0), 0, Tag1 ("Modops", 33)); (("NotSameInductiveNameInBlockField", 882), (0), 0, (("kernel/modops.mli", 106, 3704, 3706), ("kernel/modops.mli", 106, 3704, 3740), 0), 0, Tag1 ("Modops", 34)); (("FiniteInductiveFieldExpected", 883), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -73)]), 0, (("kernel/modops.mli", 107, 3741, 3743), ("kernel/modops.mli", 107, 3741, 3781), 0), 0, Tag1 ("Modops", 35)); (("InductiveNumbersFieldExpected", 884), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -74)]), 0, (("kernel/modops.mli", 108, 3782, 3784), ("kernel/modops.mli", 108, 3782, 3822), 0), 0, Tag1 ("Modops", 36)); (("InductiveParamsNumberField", 885), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -75)]), 0, (("kernel/modops.mli", 109, 3823, 3825), ("kernel/modops.mli", 109, 3823, 3860), 0), 0, Tag1 ("Modops", 37)); (("RecordFieldExpected", 886), ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -76)]), 0, (("kernel/modops.mli", 110, 3861, 3863), ("kernel/modops.mli", 110, 3861, 3892), 0), 0, Tag1 ("Modops", 38)); (("RecordProjectionsExpected", 887), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -78)], (0)), 100000000, 0, -77)]), 0, (("kernel/modops.mli", 111, 3893, 3895), ("kernel/modops.mli", 111, 3893, 3937), 0), 0, Tag1 ("Modops", 39)); (("NotEqualInductiveAliases", 897), (0), 0, (("kernel/modops.mli", 112, 3938, 3940), ("kernel/modops.mli", 112, 3938, 3966), 0), 0, Tag1 ("Modops", 40)); (("IncompatibleUniverses", 898), ([(Tag3 (Tag1 ((Tag2 ("UGraph")), "univ_inconsistency"), 0, (0)), 100000000, 0, -79)]), 0, (("kernel/modops.mli", 113, 3967, 3969), ("kernel/modops.mli", 113, 3967, 4021), 0), 0, Tag1 ("Modops", 41)); (("IncompatiblePolymorphism", 936), ([(Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -80); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -81); (Tag3 (Tag1 ((Tag2 ("Constr")), "types"), 0, (0)), 100000000, 0, -82)]), 0, (("kernel/modops.mli", 114, 4022, 4024), ("kernel/modops.mli", 114, 4022, 4073), 0), 0, Tag1 ("Modops", 42)); (("IncompatibleConstraints", 937), Tag1 ([(("got", 938), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -83), (("kernel/modops.mli", 115, 4074, 4107), ("kernel/modops.mli", 115, 4074, 4136), 0), 0, Tag1 ("Modops", 43)); (("expect", 939), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "AbstractContext"), "t"), 0, (0)), 100000000, 0, -84), (("kernel/modops.mli", 115, 4074, 4137), ("kernel/modops.mli", 115, 4074, 4168), 0), 0, Tag1 ("Modops", 44))]), 0, (("kernel/modops.mli", 115, 4074, 4076), ("kernel/modops.mli", 115, 4074, 4170), 0), 0, Tag1 ("Modops", 45)); (("IncompatibleVariance", 940), (0), 0, (("kernel/modops.mli", 116, 4171, 4173), ("kernel/modops.mli", 116, 4171, 4195), 0), 0, Tag1 ("Modops", 46))], 0), 1, 0, 0, 0, 0, 0, (("kernel/modops.mli", 94, 3269, 3269), ("kernel/modops.mli", 116, 4171, 4195), 0), 0, 0, 0, Tag1 ("Modops", 22)), 1, 0); Tag1 (("subtyping_trace_elt", 1040), (0, 0, Tag1 ([(("Submodule", 979), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -63)]), 0, (("kernel/modops.mli", 119, 4224, 4226), ("kernel/modops.mli", 119, 4224, 4248), 0), 0, Tag1 ("Modops", 53)); (("FunctorArgument", 992), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -64)]), 0, (("kernel/modops.mli", 120, 4249, 4251), ("kernel/modops.mli", 120, 4249, 4275), 0), 0, Tag1 ("Modops", 54))], 0), 1, 0, 0, 0, 0, 0, (("kernel/modops.mli", 118, 4197, 4197), ("kernel/modops.mli", 120, 4249, 4275), 0), 0, 0, 0, Tag1 ("Modops", 52)), 1, 0); Tag1 (("module_typing_error", 1041), (0, 0, Tag1 ([(("SignatureMismatch", 994), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("subtyping_trace_elt", 1040)), 0, (0)), 100000000, 0, -45)], (0)), 100000000, 0, -44); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -46); (Tag3 ((("signature_mismatch_error", 1039)), 0, (0)), 100000000, 0, -47)]), 0, (("kernel/modops.mli", 123, 4304, 4306), ("kernel/modops.mli", 123, 4304, 4390), 0), 0, Tag1 ("Modops", 56)); (("LabelAlreadyDeclared", 995), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -48)]), 0, (("kernel/modops.mli", 124, 4391, 4393), ("kernel/modops.mli", 124, 4391, 4426), 0), 0, Tag1 ("Modops", 57)); (("NotAFunctor", 996), (0), 0, (("kernel/modops.mli", 125, 4427, 4429), ("kernel/modops.mli", 125, 4427, 4442), 0), 0, Tag1 ("Modops", 58)); (("IsAFunctor", 997), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -49)]), 0, (("kernel/modops.mli", 126, 4443, 4445), ("kernel/modops.mli", 126, 4443, 4470), 0), 0, Tag1 ("Modops", 59)); (("IncompatibleModuleTypes", 998), ([(Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -50); (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -51)]), 0, (("kernel/modops.mli", 127, 4471, 4473), ("kernel/modops.mli", 127, 4471, 4537), 0), 0, Tag1 ("Modops", 60)); (("NotEqualModulePaths", 999), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -53)]), 0, (("kernel/modops.mli", 128, 4538, 4540), ("kernel/modops.mli", 128, 4538, 4586), 0), 0, Tag1 ("Modops", 61)); (("NoSuchLabel", 1000), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -54); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -55)]), 0, (("kernel/modops.mli", 129, 4587, 4589), ("kernel/modops.mli", 129, 4587, 4625), 0), 0, Tag1 ("Modops", 62)); (("NotAModuleLabel", 1001), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -56)]), 0, (("kernel/modops.mli", 130, 4626, 4628), ("kernel/modops.mli", 130, 4626, 4656), 0), 0, Tag1 ("Modops", 63)); (("NotAConstant", 1002), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -57)]), 0, (("kernel/modops.mli", 131, 4657, 4659), ("kernel/modops.mli", 131, 4657, 4684), 0), 0, Tag1 ("Modops", 64)); (("IncorrectWithConstraint", 1003), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -58)]), 0, (("kernel/modops.mli", 132, 4685, 4687), ("kernel/modops.mli", 132, 4685, 4723), 0), 0, Tag1 ("Modops", 65)); (("GenerativeModuleExpected", 1004), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -59)]), 0, (("kernel/modops.mli", 133, 4724, 4726), ("kernel/modops.mli", 133, 4724, 4763), 0), 0, Tag1 ("Modops", 66)); (("LabelMissing", 1005), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -60); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -61)]), 0, (("kernel/modops.mli", 134, 4764, 4766), ("kernel/modops.mli", 134, 4764, 4800), 0), 0, Tag1 ("Modops", 67)); (("IncludeRestrictedFunctor", 1006), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -62)]), 0, (("kernel/modops.mli", 135, 4801, 4803), ("kernel/modops.mli", 135, 4801, 4842), 0), 0, Tag1 ("Modops", 68))], 0), 1, 0, 0, 0, 0, 0, (("kernel/modops.mli", 122, 4277, 4277), ("kernel/modops.mli", 135, 4801, 4842), 0), 0, 0, 0, Tag1 ("Modops", 55)), 1, 0); Tag2 (("ModuleTypingError", 1042), ((Tag3 ("exn", 7)), 0, ([(Tag3 ((("module_typing_error", 1041)), 0, (0)), 100000000, 0, -43)]), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Modops", 69)), 2, 0); (("error_existing_label", 1043), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -42), ((("a")), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("kernel/modops.mli", 139, 4896, 4896), ("kernel/modops.mli", 139, 4896, 4936), 0), 0, Tag1 ("Modops", 70)), 0); (("error_incompatible_modtypes", 1044), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "module_type_body"), 0, (0)), 100000000, 0, -38), ((("a")), 100000000, 0, -37), 0), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("kernel/modops.mli", 141, 4938, 4938), ("kernel/modops.mli", 142, 4972, 5016), 0), 0, Tag1 ("Modops", 71)), 0); (("error_signature_mismatch", 1045), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("subtyping_trace_elt", 1040)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -32), (Tag1 (0, (Tag3 ((("signature_mismatch_error", 1039)), 0, (0)), 100000000, 0, -31), ((("a")), 100000000, 0, -30), 0), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("kernel/modops.mli", 144, 5018, 5018), ("kernel/modops.mli", 145, 5049, 5120), 0), 0, Tag1 ("Modops", 72)), 0); (("error_no_such_label", 1046), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -25), ((("a")), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("kernel/modops.mli", 147, 5122, 5122), ("kernel/modops.mli", 147, 5122, 5174), 0), 0, Tag1 ("Modops", 73)), 0); (("error_not_a_module_label", 1047), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -21), ((("a")), 100000000, 0, -20), 0), 100000000, 0, -19), 0, (("kernel/modops.mli", 149, 5176, 5176), ("kernel/modops.mli", 149, 5176, 5220), 0), 0, Tag1 ("Modops", 74)), 0); (("error_not_a_constant", 1048), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -18), ((("a")), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("kernel/modops.mli", 151, 5222, 5222), ("kernel/modops.mli", 151, 5222, 5262), 0), 0, Tag1 ("Modops", 75)), 0); (("error_incorrect_with_constraint", 1049), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -15), ((("a")), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("kernel/modops.mli", 153, 5264, 5264), ("kernel/modops.mli", 153, 5264, 5315), 0), 0, Tag1 ("Modops", 76)), 0); (("error_generative_module_expected", 1050), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -12), ((("a")), 100000000, 0, -11), 0), 100000000, 0, -10), 0, (("kernel/modops.mli", 155, 5317, 5317), ("kernel/modops.mli", 155, 5317, 5369), 0), 0, Tag1 ("Modops", 77)), 0); (("error_no_such_label_sub", 1051), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -8), ((("a")), 100000000, 0, -7), 0), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("kernel/modops.mli", 157, 5371, 5371), ("kernel/modops.mli", 157, 5371, 5420), 0), 0, Tag1 ("Modops", 78)), 0); (("error_include_restricted_functor", 1052), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -4), ((("a")), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/modops.mli", 159, 5422, 5422), ("kernel/modops.mli", 159, 5422, 5476), 0), 0, Tag1 ("Modops", 79)), 0)], "Modops", [("Modops", ("\132\215\127X\136|\211\131\192\190\243\197l\224d\131")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val error_include_restricted_functor : Names.ModPath.t -> 'a

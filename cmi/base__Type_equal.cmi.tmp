type ('a, 'b) t = T : ('a, 'a) t
val sexp_of_t :
  ('a -> Sexplib0.Sexp.t) ->
  ('b -> Sexplib0.Sexp.t) -> ('a, 'b) t -> Sexplib0.Sexp.t
type ('a, 'b) equal = ('a, 'b) t
val refl : ('a, 'a) t
val sym : ('a, 'b) t -> ('b, 'a) t
val trans : ('a, 'b) t -> ('b, 'c) t -> ('a, 'c) t
val conv : ('a, 'b) t -> 'a -> 'b
module Lift :
  functor (X : Base__.T.T1) ->
    sig val lift : ('a, 'b) t -> ('a X.t, 'b X.t) t end
module Lift2 :
  functor (X : Base__.T.T2) ->
    sig
      val lift :
        ('a1, 'b1) t -> ('a2, 'b2) t -> (('a1, 'a2) X.t, ('b1, 'b2) X.t) t
    end
module Lift3 :
  functor (X : Base__.T.T3) ->
    sig
      val lift :
        ('a1, 'b1) t ->
        ('a2, 'b2) t ->
        ('a3, 'b3) t -> (('a1, 'a2, 'a3) X.t, ('b1, 'b2, 'b3) X.t) t
    end
val detuple2 : ('a1 * 'a2, 'b1 * 'b2) t -> ('a1, 'b1) t * ('a2, 'b2) t
val tuple2 : ('a1, 'b1) t -> ('a2, 'b2) t -> ('a1 * 'a2, 'b1 * 'b2) t
module type Injective =
  sig type 'a t val strip : ('a t, 'b t) equal -> ('a, 'b) equal end
module type Injective2 =
  sig
    type ('a1, 'a2) t
    val strip :
      (('a1, 'a2) t, ('b1, 'b2) t) equal ->
      ('a1, 'b1) equal * ('a2, 'b2) equal
  end
module Composition_preserves_injectivity :
  functor (M1 : Injective) (M2 : Injective) ->
    sig
      type 'a t = 'a M1.t M2.t
      val strip : ('a t, 'b t) equal -> ('a, 'b) equal
    end
module Id :
  sig
    type 'a t
    val sexp_of_t : ('a -> Sexplib0.Sexp.t) -> 'a t -> Sexplib0.Sexp.t
    module Uid : Base__.Identifiable.S
    val uid : 'a t -> Uid.t
    val create : name:string -> ('a -> Base__.Sexp.t) -> 'a t
    val hash : 'a t -> int
    val name : 'a t -> string
    val to_sexp : 'a t -> 'a -> Base__.Sexp.t
    val hash_fold_t : Base__.Hash.state -> 'a t -> Base__.Hash.state
    val same : 'a t -> 'b t -> bool
    val same_witness : 'a t -> 'b t -> ('a, 'b) equal option
    val same_witness_exn : 'a t -> 'b t -> ('a, 'b) equal("DEBUG:rule", [Tag1 (("t", 969), ([((("a")), 100000000, 0, -60); ((("b")), 100000000, 0, -61)], 2, Tag1 ([(("T", 787), (0), ((Tag3 ((("t", 969)), [((("a")), 100000000, 0, -59); ((("a")), 100000000, 0, -59)], (0)), 100000000, 0, -58)), (("src/type_equal.mli", 35, 1708, 1726), ("src/type_equal.mli", 35, 1708, 1740), 0), 0, Tag1 ("Base__Type_equal", 1))], 0), 1, 0, [15; 15], [0; 0], 0, 0, (("src/type_equal.mli", 35, 1708, 1708), ("src/type_equal.mli", 35, 1708, 1768), 0), [(("deriving_inline", (("src/type_equal.mli", 35, 1708, 1744), ("src/type_equal.mli", 35, 1708, 1759), 0)), ([([(((("sexp_of"), (("src/type_equal.mli", 35, 1708, 1760), ("src/type_equal.mli", 35, 1708, 1767), 0))), (("src/type_equal.mli", 35, 1708, 1760), ("src/type_equal.mli", 35, 1708, 1767), 0), 0, 0)], (("src/type_equal.mli", 35, 1708, 1760), ("src/type_equal.mli", 35, 1708, 1767), 0))]), (("src/type_equal.mli", 35, 1708, 1741), ("src/type_equal.mli", 35, 1708, 1768), 0))], 1, 0, Tag1 ("Base__Type_equal", 0)), 1, 0); (("sexp_of_t", 970), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), (Tag1 (0, (Tag1 (0, ((("b")), 100000000, 0, -53), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -55), 0), 100000000, 0, -54), (Tag1 (0, (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -52); ((("b")), 100000000, 0, -53)], (0)), 100000000, 0, -51), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("src/type_equal.mli", 37, 1770, 1770), ("src/type_equal.mli", 41, 1858, 1878), 0), 0, Tag1 ("Base__Type_equal", 2)), 0); Tag1 (("equal", 971), ([((("a")), 100000000, 0, -45); ((("b")), 100000000, 0, -46)], 2, 0, 1, ((Tag3 ((("t", 969)), [((("a")), 100000000, 0, -45); ((("b")), 100000000, 0, -46)], (0)), 100000000, 0, -44)), [15; 15], [0; 0], 0, 0, (("src/type_equal.mli", 46, 1948, 1948), ("src/type_equal.mli", 46, 1948, 1980), 0), 0, 1, 0, Tag1 ("Base__Type_equal", 3)), 1, 0); (("refl", 972), ((Tag3 ((("t", 969)), [((("a")), 100000000, 0, -43); ((("a")), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0, (("src/type_equal.mli", 51, 2098, 2098), ("src/type_equal.mli", 51, 2098, 2119), 0), 0, Tag1 ("Base__Type_equal", 4)), 0); (("sym", 973), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -40); ((("b")), 100000000, 0, -39)], (0)), 100000000, 0, -41), (Tag3 ((("t", 969)), [((("b")), 100000000, 0, -39); ((("a")), 100000000, 0, -40)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0, (("src/type_equal.mli", 52, 2120, 2120), ("src/type_equal.mli", 52, 2120, 2154), 0), 0, Tag1 ("Base__Type_equal", 5)), 0); (("trans", 974), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -32); ((("b")), 100000000, 0, -35)], (0)), 100000000, 0, -36), (Tag1 (0, (Tag3 ((("t", 969)), [((("b")), 100000000, 0, -35); ((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -34), (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -32); ((("c")), 100000000, 0, -33)], (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0), 100000000, 0, -29), 0, (("src/type_equal.mli", 53, 2155, 2155), ("src/type_equal.mli", 53, 2155, 2205), 0), 0, Tag1 ("Base__Type_equal", 6)), 0); (("conv", 975), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -27); ((("b")), 100000000, 0, -26)], (0)), 100000000, 0, -28), (Tag1 (0, ((("a")), 100000000, 0, -27), ((("b")), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("src/type_equal.mli", 79, 3122, 3122), ("src/type_equal.mli", 79, 3122, 3155), 0), 0, Tag1 ("Base__Type_equal", 7)), 0); Tag3 (("Lift", 976), 0, (Tag2 (((("X", 989)), (Tag1 (Tag1 ((Tag2 ("Base__")), "T"), "T1"))), Tag1 ([(("lift", 990), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a")), 100000000, 0, -65); ((("b")), 100000000, 0, -67)], (0)), 100000000, 0, -68), (Tag3 ((("t", 969)), [(Tag3 (Tag1 ((("X", 989)), "t"), [((("a")), 100000000, 0, -65)], (0)), 100000000, 0, -64); (Tag3 (Tag1 ((("X", 989)), "t"), [((("b")), 100000000, 0, -67)], (0)), 100000000, 0, -66)], (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("src/type_equal.mli", 87, 3525, 3527), ("src/type_equal.mli", 87, 3525, 3570), 0), 0, Tag1 ("Base__Type_equal", 9)), 0)])), 0, (("src/type_equal.mli", 86, 3498, 3498), ("src/type_equal.mli", 88, 3571, 3574), 0), Tag1 ("Base__Type_equal", 10)), 0, 0); Tag3 (("Lift2", 977), 0, (Tag2 (((("X", 988)), (Tag1 (Tag1 ((Tag2 ("Base__")), "T"), "T2"))), Tag1 ([(("lift", 991), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a1")), 100000000, 0, -73); ((("b1")), 100000000, 0, -76)], (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 ((("t", 969)), [((("a2")), 100000000, 0, -74); ((("b2")), 100000000, 0, -77)], (0)), 100000000, 0, -78), (Tag3 ((("t", 969)), [(Tag3 (Tag1 ((("X", 988)), "t"), [((("a1")), 100000000, 0, -73); ((("a2")), 100000000, 0, -74)], (0)), 100000000, 0, -72); (Tag3 (Tag1 ((("X", 988)), "t"), [((("b1")), 100000000, 0, -76); ((("b2")), 100000000, 0, -77)], (0)), 100000000, 0, -75)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("src/type_equal.mli", 91, 3604, 3606), ("src/type_equal.mli", 91, 3604, 3683), 0), 0, Tag1 ("Base__Type_equal", 12)), 0)])), 0, (("src/type_equal.mli", 90, 3576, 3576), ("src/type_equal.mli", 92, 3684, 3687), 0), Tag1 ("Base__Type_equal", 13)), 0, 0); Tag3 (("Lift3", 978), 0, (Tag2 (((("X", 987)), (Tag1 (Tag1 ((Tag2 ("Base__")), "T"), "T3"))), Tag1 ([(("lift", 992), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a1")), 100000000, 0, -85); ((("b1")), 100000000, 0, -89)], (0)), 100000000, 0, -94), (Tag1 (0, (Tag3 ((("t", 969)), [((("a2")), 100000000, 0, -86); ((("b2")), 100000000, 0, -90)], (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((("t", 969)), [((("a3")), 100000000, 0, -87); ((("b3")), 100000000, 0, -91)], (0)), 100000000, 0, -92), (Tag3 ((("t", 969)), [(Tag3 (Tag1 ((("X", 987)), "t"), [((("a1")), 100000000, 0, -85); ((("a2")), 100000000, 0, -86); ((("a3")), 100000000, 0, -87)], (0)), 100000000, 0, -84); (Tag3 (Tag1 ((("X", 987)), "t"), [((("b1")), 100000000, 0, -89); ((("b2")), 100000000, 0, -90); ((("b3")), 100000000, 0, -91)], (0)), 100000000, 0, -88)], (0)), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0), 100000000, 0, -80), 0, (("src/type_equal.mli", 95, 3717, 3719), ("src/type_equal.mli", 99, 3788, 3839), 0), 0, Tag1 ("Base__Type_equal", 15)), 0)])), 0, (("src/type_equal.mli", 94, 3689, 3689), ("src/type_equal.mli", 100, 3840, 3843), 0), Tag1 ("Base__Type_equal", 16)), 0, 0); (("detuple2", 979), ((Tag1 (0, (Tag3 ((("t", 969)), [(Tag2 ([((("a1")), 100000000, 0, -16); ((("a2")), 100000000, 0, -19)]), 100000000, 0, -22); (Tag2 ([((("b1")), 100000000, 0, -17); ((("b2")), 100000000, 0, -20)]), 100000000, 0, -23)], (0)), 100000000, 0, -21), (Tag2 ([(Tag3 ((("t", 969)), [((("a1")), 100000000, 0, -16); ((("b1")), 100000000, 0, -17)], (0)), 100000000, 0, -15); (Tag3 ((("t", 969)), [((("a2")), 100000000, 0, -19); ((("b2")), 100000000, 0, -20)], (0)), 100000000, 0, -18)]), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/type_equal.mli", 104, 3935, 3935), ("src/type_equal.mli", 104, 3935, 4005), 0), 0, Tag1 ("Base__Type_equal", 17)), 0); (("tuple2", 980), ((Tag1 (0, (Tag3 ((("t", 969)), [((("a1")), 100000000, 0, -6); ((("b1")), 100000000, 0, -9)], (0)), 100000000, 0, -12), (Tag1 (0, (Tag3 ((("t", 969)), [((("a2")), 100000000, 0, -7); ((("b2")), 100000000, 0, -10)], (0)), 100000000, 0, -11), (Tag3 ((("t", 969)), [(Tag2 ([((("a1")), 100000000, 0, -6); ((("a2")), 100000000, 0, -7)]), 100000000, 0, -5); (Tag2 ([((("b1")), 100000000, 0, -9); ((("b2")), 100000000, 0, -10)]), 100000000, 0, -8)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/type_equal.mli", 105, 4006, 4006), ("src/type_equal.mli", 105, 4006, 4075), 0), 0, Tag1 ("Base__Type_equal", 18)), 0); Tag4 (("Injective", 981), ((Tag1 ([Tag1 (("t", 993), ([((("a")), 100000000, 0, -102)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/type_equal.mli", 162, 6299, 6301), ("src/type_equal.mli", 162, 6299, 6310), 0), 0, 0, 0, Tag1 ("Base__Type_equal", 19)), 1, 0); (("strip", 994), ((Tag1 (0, (Tag3 ((("equal", 971)), [(Tag3 ((("t", 993)), [((("a")), 100000000, 0, -97)], (0)), 100000000, 0, -100); (Tag3 ((("t", 993)), [((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -101)], (0)), 100000000, 0, -99), (Tag3 ((("equal", 971)), [((("a")), 100000000, 0, -97); ((("b")), 100000000, 0, -98)], (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0, (("src/type_equal.mli", 164, 6312, 6314), ("src/type_equal.mli", 164, 6312, 6362), 0), 0, Tag1 ("Base__Type_equal", 20)), 0)])), 0, (("src/type_equal.mli", 161, 6271, 6271), ("src/type_equal.mli", 165, 6363, 6366), 0), Tag1 ("Base__Type_equal", 21)), 0); Tag4 (("Injective2", 982), ((Tag1 ([Tag1 (("t", 995), ([((("a1")), 100000000, 0, -114); ((("a2")), 100000000, 0, -115)], 2, 0, 1, 0, [7; 7], [2; 2], 0, 0, (("src/type_equal.mli", 169, 6480, 6482), ("src/type_equal.mli", 169, 6480, 6499), 0), 0, 0, 0, Tag1 ("Base__Type_equal", 22)), 1, 0); (("strip", 996), ((Tag1 (0, (Tag3 ((("equal", 971)), [(Tag3 ((("t", 995)), [((("a1")), 100000000, 0, -106); ((("a2")), 100000000, 0, -109)], (0)), 100000000, 0, -112); (Tag3 ((("t", 995)), [((("b1")), 100000000, 0, -107); ((("b2")), 100000000, 0, -110)], (0)), 100000000, 0, -113)], (0)), 100000000, 0, -111), (Tag2 ([(Tag3 ((("equal", 971)), [((("a1")), 100000000, 0, -106); ((("b1")), 100000000, 0, -107)], (0)), 100000000, 0, -105); (Tag3 ((("equal", 971)), [((("a2")), 100000000, 0, -109); ((("b2")), 100000000, 0, -110)], (0)), 100000000, 0, -108)]), 100000000, 0, -104), 0), 100000000, 0, -103), 0, (("src/type_equal.mli", 171, 6501, 6503), ("src/type_equal.mli", 171, 6501, 6588), 0), 0, Tag1 ("Base__Type_equal", 23)), 0)])), 0, (("src/type_equal.mli", 168, 6451, 6451), ("src/type_equal.mli", 172, 6589, 6592), 0), Tag1 ("Base__Type_equal", 24)), 0); Tag3 (("Composition_preserves_injectivity", 983), 0, (Tag2 (((("M1", 985)), ((("Injective", 981)))), Tag2 (((("M2", 986)), ((("Injective", 981)))), Tag1 ([Tag1 (("t", 997), ([((("a")), 100000000, 0, -125)], 1, 0, 1, ((Tag3 (Tag1 ((("M2", 986)), "t"), [(Tag3 (Tag1 ((("M1", 985)), "t"), [((("a")), 100000000, 0, -125)], (0)), 100000000, 0, -124)], (0)), 100000000, 0, -123)), [7], [2], 0, 0, (("src/type_equal.mli", 177, 6793, 6810), ("src/type_equal.mli", 177, 6793, 6834), 0), 0, 0, 0, Tag1 ("Base__Type_equal", 27)), 1, 0); (("strip", 998), ((Tag1 (0, (Tag3 ((("equal", 971)), [(Tag3 ((("t", 997)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -121); (Tag3 ((("t", 997)), [((("b")), 100000000, 0, -119)], (0)), 100000000, 0, -122)], (0)), 100000000, 0, -120), (Tag3 ((("equal", 971)), [((("a")), 100000000, 0, -118); ((("b")), 100000000, 0, -119)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("src/type_equal.mli", 164, 6312, 6314), ("src/type_equal.mli", 164, 6312, 6362), 0), 0, Tag1 ("Base__Type_equal", 20)), 0)]))), 0, (("src/type_equal.mli", 176, 6716, 6716), ("src/type_equal.mli", 177, 6793, 6834), 0), Tag1 ("Base__Type_equal", 28)), 0, 0); Tag3 (("Id", 984), 0, (Tag1 ([Tag1 (("t", 999), ([((("a")), 100000000, 0, -185)], 1, 0, 1, 0, [7], [2], 0, 0, (("src/type_equal.mli", 184, 7179, 7181), ("src/type_equal.mli", 184, 7179, 7218), 0), [(("deriving_inline", (("src/type_equal.mli", 184, 7179, 7194), ("src/type_equal.mli", 184, 7179, 7209), 0)), ([([(((("sexp_of"), (("src/type_equal.mli", 184, 7179, 7210), ("src/type_equal.mli", 184, 7179, 7217), 0))), (("src/type_equal.mli", 184, 7179, 7210), ("src/type_equal.mli", 184, 7179, 7217), 0), 0, 0)], (("src/type_equal.mli", 184, 7179, 7210), ("src/type_equal.mli", 184, 7179, 7217), 0))]), (("src/type_equal.mli", 184, 7179, 7191), ("src/type_equal.mli", 184, 7179, 7218), 0))], 0, 0, Tag1 ("Base__Type_equal", 29)), 1, 0); (("sexp_of_t", 1000), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -182), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), (Tag1 (0, (Tag3 ((("t", 999)), [((("a")), 100000000, 0, -182)], (0)), 100000000, 0, -181), (Tag3 (Tag1 (Tag1 ((Tag2 ("Sexplib0")), "Sexp"), "t"), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0), 100000000, 0, -178), 0, (("src/type_equal.mli", 186, 7220, 7222), ("src/type_equal.mli", 186, 7220, 7288), 0), 0, Tag1 ("Base__Type_equal", 30)), 0); Tag3 (("Uid", 1001), 0, ((Tag1 (Tag1 ((Tag2 ("Base__")), "Identifiable"), "S")), 0, (("src/type_equal.mli", 192, 7406, 7408), ("src/type_equal.mli", 192, 7406, 7435), 0), Tag1 ("Base__Type_equal", 31)), 0, 0); (("uid", 1002), ((Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -177)], (0)), 100000000, 0, -176), (Tag3 (Tag1 ((("Uid", 1001)), "t"), 0, (0)), 100000000, 0, -175), 0), 100000000, 0, -174), 0, (("src/type_equal.mli", 194, 7437, 7439), ("src/type_equal.mli", 194, 7437, 7461), 0), 0, Tag1 ("Base__Type_equal", 32)), 0); (("create", 1003), ((Tag1 (("name"), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -173), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -170), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), (Tag3 ((("t", 999)), [((("a")), 100000000, 0, -170)], (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0), 100000000, 0, -167), 0, (("src/type_equal.mli", 200, 7814, 7816), ("src/type_equal.mli", 200, 7814, 7866), 0), 0, Tag1 ("Base__Type_equal", 33)), 0); (("hash", 1004), ((Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -166)], (0)), 100000000, 0, -165), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("src/type_equal.mli", 204, 7888, 7890), ("src/type_equal.mli", 204, 7888, 7911), 0), 0, Tag1 ("Base__Type_equal", 34)), 0); (("name", 1005), ((Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -162)], (0)), 100000000, 0, -161), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -160), 0), 100000000, 0, -159), 0, (("src/type_equal.mli", 205, 7912, 7914), ("src/type_equal.mli", 205, 7912, 7938), 0), 0, Tag1 ("Base__Type_equal", 35)), 0); (("to_sexp", 1006), ((Tag1 (0, (Tag3 ((("t", 999)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -158), (Tag1 (0, ((("a")), 100000000, 0, -157), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Sexp"), "t"), 0, (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("src/type_equal.mli", 206, 7939, 7941), ("src/type_equal.mli", 206, 7939, 7975), 0), 0, Tag1 ("Base__Type_equal", 36)), 0); (("hash_fold_t", 1007), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -153), (Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -152)], (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Base__")), "Hash"), "state"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("src/type_equal.mli", 207, 7976, 7978), ("src/type_equal.mli", 207, 7976, 8027), 0), 0, Tag1 ("Base__Type_equal", 37)), 0); (("same", 1008), ((Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -147)], (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((("t", 999)), [((0), 100000000, 0, -145)], (0)), 100000000, 0, -144), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("src/type_equal.mli", 217, 8421, 8423), ("src/type_equal.mli", 217, 8421, 8452), 0), 0, Tag1 ("Base__Type_equal", 38)), 0); (("same_witness", 1009), ((Tag1 (0, (Tag3 ((("t", 999)), [((("a")), 100000000, 0, -137)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 999)), [((("b")), 100000000, 0, -138)], (0)), 100000000, 0, -139), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("equal", 971)), [((("a")), 100000000, 0, -137); ((("b")), 100000000, 0, -138)], (0)), 100000000, 0, -136)], (0)), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("src/type_equal.mli", 218, 8453, 8455), ("src/type_equal.mli", 218, 8453, 8511), 0), 0, Tag1 ("Base__Type_equal", 39)), 0); (("same_witness_exn", 1010), ((Tag1 (0, (Tag3 ((("t", 999)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 ((("t", 999)), [((("b")), 100000000, 0, -130)], (0)), 100000000, 0, -131), (Tag3 ((("equal", 971)), [((("a")), 100000000, 0, -129); ((("b")), 100000000, 0, -130)], (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0), 100000000, 0, -126), 0, (("src/type_equal.mli", 219, 8512, 8514), ("src/type_equal.mli", 219, 8512, 8567), 0), 0, Tag1 ("Base__Type_equal", 40)), 0)]), 0, (("src/type_equal.mli", 183, 7163, 7163), ("src/type_equal.mli", 220, 8568, 8571), 0), Tag1 ("Base__Type_equal", 41)), 0, 0)], "Base__Type_equal", [("Base__Type_equal", ("\208W\011\248\188\237\232\136 \157\216I\136\231\172\254")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158"))], [(0)])

  end

type 'a gen = unit -> 'a option
module type MONAD =
  sig
    type +'a t
    val return : 'a -> 'a t
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t
  end
module type S =
  sig
    module M : MONAD
    type 'a t = unit -> 'a option M.t
    val return : 'a -> 'a t
    val sequence_m : 'a M.t gen -> 'a t
    val map : ('a -> 'b) -> 'a t -> 'b t
    val flat_map : ('a -> 'b t) -> 'a t -> 'b t
    val fold : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a M.t
    val fold_m : ('a -> 'b -> 'a M.t) -> 'a -> 'b t -> 'a M.t
    val iter : ('a -> unit) -> 'a t -> unit M.t
    val iter_s : ('a -> unit M.t) -> 'a t -> unit M.t
    val iter_p : ('a -> unit M.t) -> 'a t -> unit M.t
    module Infix :
      sig
        val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
        val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t
      end
    val ( >>= ) : 'a t -> ('a -> 'b t) -> 'b t
    val ( >|= ) : 'a t -> ('a -> 'b) -> 'b t("DEBUG:rule", [Tag1 (("gen", 312), ([((("a")), 100000000, 0, -4)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2)), [25], [0], 0, 0, (("src/genM_intf.ml", 4, 86, 86), ("src/genM_intf.ml", 4, 86, 117), 0), 0, 0, 0, Tag1 ("GenM_intf", 0)), 1, 0); Tag4 (("MONAD", 313), ((Tag1 ([Tag1 (("t", 315), ([((("a")), 100000000, 0, -24)], 1, 0, 1, 0, [1], [2], 0, 0, (("src/genM_intf.ml", 7, 143, 145), ("src/genM_intf.ml", 7, 143, 155), 0), 0, 0, 0, Tag1 ("GenM_intf", 1)), 1, 0); (("return", 316), ((Tag1 (0, ((("a")), 100000000, 0, -23), (Tag3 ((("t", 315)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/genM_intf.ml", 9, 157, 159), ("src/genM_intf.ml", 9, 157, 182), 0), 0, Tag1 ("GenM_intf", 2)), 0); ((">>=", 317), ((Tag1 (0, (Tag3 ((("t", 315)), [((("a")), 100000000, 0, -19)], (0)), 100000000, 0, -20), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -19), (Tag3 ((("t", 315)), [((("b")), 100000000, 0, -16)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), (Tag3 ((("t", 315)), [((("b")), 100000000, 0, -16)], (0)), 100000000, 0, -15), 0), 100000000, 0, -14), 0), 100000000, 0, -13), 0, (("src/genM_intf.ml", 10, 183, 185), ("src/genM_intf.ml", 10, 183, 225), 0), 0, Tag1 ("GenM_intf", 3)), 0); ((">|=", 318), ((Tag1 (0, (Tag3 ((("t", 315)), [((("a")), 100000000, 0, -11)], (0)), 100000000, 0, -12), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -11), ((("b")), 100000000, 0, -9), 0), 100000000, 0, -10), (Tag3 ((("t", 315)), [((("b")), 100000000, 0, -9)], (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/genM_intf.ml", 11, 226, 228), ("src/genM_intf.ml", 11, 226, 266), 0), 0, Tag1 ("GenM_intf", 4)), 0)])), 0, (("src/genM_intf.ml", 6, 119, 119), ("src/genM_intf.ml", 12, 267, 270), 0), Tag1 ("GenM_intf", 5)), 0); Tag4 (("S", 314), ((Tag1 ([Tag3 (("M", 319), 0, (((("MONAD", 313))), 0, (("src/genM_intf.ml", 15, 292, 294), ("src/genM_intf.ml", 15, 292, 310), 0), Tag1 ("GenM_intf", 6)), 0, 0); Tag1 (("t", 320), ([((("a")), 100000000, 0, -111)], 1, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -112), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("option", 10)), [((("a")), 100000000, 0, -111)], (0)), 100000000, 0, -110)], (0)), 100000000, 0, -109), 0), 100000000, 0, -108)), [1], [0], 0, 0, (("src/genM_intf.ml", 17, 312, 314), ("src/genM_intf.ml", 17, 312, 348), 0), 0, 0, 0, Tag1 ("GenM_intf", 7)), 1, 0); (("return", 321), ((Tag1 (0, ((("a")), 100000000, 0, -107), (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("src/genM_intf.ml", 22, 573, 575), ("src/genM_intf.ml", 22, 573, 598), 0), 0, Tag1 ("GenM_intf", 8)), 0); (("sequence_m", 322), ((Tag1 (0, (Tag3 ((("gen", 312)), [(Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -104)], (0)), 100000000, 0, -103), (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -102)], (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("src/genM_intf.ml", 24, 600, 602), ("src/genM_intf.ml", 24, 600, 637), 0), 0, Tag1 ("GenM_intf", 9)), 0); (("map", 323), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -98), ((("b")), 100000000, 0, -96), 0), 100000000, 0, -99), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -98)], (0)), 100000000, 0, -97), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0, (("src/genM_intf.ml", 27, 707, 709), ("src/genM_intf.ml", 27, 707, 745), 0), 0, Tag1 ("GenM_intf", 10)), 0); (("flat_map", 324), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -90), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -88)], (0)), 100000000, 0, -92), 0), 100000000, 0, -91), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -90)], (0)), 100000000, 0, -89), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -88)], (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("src/genM_intf.ml", 29, 747, 749), ("src/genM_intf.ml", 29, 747, 792), 0), 0, Tag1 ("GenM_intf", 11)), 0); (("fold", 325), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -80), (Tag1 (0, ((("b")), 100000000, 0, -82), ((("a")), 100000000, 0, -80), 0), 100000000, 0, -84), 0), 100000000, 0, -83), (Tag1 (0, ((("a")), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0, (("src/genM_intf.ml", 31, 794, 796), ("src/genM_intf.ml", 31, 794, 847), 0), 0, Tag1 ("GenM_intf", 12)), 0); (("fold_m", 326), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -70), (Tag1 (0, ((("b")), 100000000, 0, -72), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -70)], (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), (Tag1 (0, ((("a")), 100000000, 0, -70), (Tag1 (0, (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -72)], (0)), 100000000, 0, -71), (Tag3 (Tag1 ((("M", 319)), "t"), [((("a")), 100000000, 0, -70)], (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("src/genM_intf.ml", 33, 849, 851), ("src/genM_intf.ml", 33, 849, 908), 0), 0, Tag1 ("GenM_intf", 13)), 0); (("iter", 327), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -63), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -65), 0), 100000000, 0, -64), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -63)], (0)), 100000000, 0, -62), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61)], (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("src/genM_intf.ml", 35, 910, 912), ("src/genM_intf.ml", 35, 910, 955), 0), 0, Tag1 ("GenM_intf", 14)), 0); (("iter_s", 328), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -54), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -57)], (0)), 100000000, 0, -56), 0), 100000000, 0, -55), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -52)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0, (("src/genM_intf.ml", 37, 957, 959), ("src/genM_intf.ml", 37, 957, 1008), 0), 0, Tag1 ("GenM_intf", 15)), 0); (("iter_p", 329), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -45), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0), 100000000, 0, -46), (Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag3 (Tag1 ((("M", 319)), "t"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("src/genM_intf.ml", 39, 1010, 1012), ("src/genM_intf.ml", 39, 1010, 1061), 0), 0, Tag1 ("GenM_intf", 16)), 0); Tag3 (("Infix", 330), 0, (Tag1 ([((">>=", 333), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -126)], (0)), 100000000, 0, -127), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -126), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -123)], (0)), 100000000, 0, -125), 0), 100000000, 0, -124), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -123)], (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0), 100000000, 0, -120), 0, (("src/genM_intf.ml", 42, 1084, 1088), ("src/genM_intf.ml", 42, 1084, 1128), 0), 0, Tag1 ("GenM_intf", 17)), 0); ((">|=", 334), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -118)], (0)), 100000000, 0, -119), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -118), ((("b")), 100000000, 0, -116), 0), 100000000, 0, -117), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -116)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("src/genM_intf.ml", 43, 1129, 1133), ("src/genM_intf.ml", 43, 1129, 1171), 0), 0, Tag1 ("GenM_intf", 18)), 0)]), 0, (("src/genM_intf.ml", 41, 1063, 1065), ("src/genM_intf.ml", 44, 1172, 1177), 0), Tag1 ("GenM_intf", 19)), 0, 0); ((">>=", 331), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -39), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -38), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -35)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("src/genM_intf.ml", 42, 1084, 1088), ("src/genM_intf.ml", 42, 1084, 1128), 0), 0, Tag1 ("GenM_intf", 17)), 0); ((">|=", 332), ((Tag1 (0, (Tag3 ((("t", 320)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -31), (Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -30), ((("b")), 100000000, 0, -28), 0), 100000000, 0, -29), (Tag3 ((("t", 320)), [((("b")), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("src/genM_intf.ml", 43, 1129, 1133), ("src/genM_intf.ml", 43, 1129, 1171), 0), 0, Tag1 ("GenM_intf", 18)), 0)])), 0, (("src/genM_intf.ml", 14, 272, 272), ("src/genM_intf.ml", 47, 1210, 1213), 0), Tag1 ("GenM_intf", 20)), 0)], "GenM_intf", [("GenM_intf", ("\011R\031K\203\151f\237I>\159\177\199\005\217-")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

  end

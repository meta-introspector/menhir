type 'data cell = private { id : int; data : 'data; }
val id : 'data cell -> int
val data : 'data cell -> 'data
val equal : 'data cell -> 'data cell -> bool
val compare : 'data cell -> 'data cell -> int
val hash : 'data cell -> int
module type SERVICE = sig type data val make : data -> data cell end
module Make :
  functor (M : Fix__.Sigs.MEMOIZER) ->
    sig type data = M.key val make : data -> data cell end
module ForHashedType :
  functor (T : Fix__.Sigs.HashedType) ->
    sig type data = T.t val make : data -> data cell end
module ForHashedTypeWeak :
  functor (T : Fix__.Sigs.HashedType) ->
    ("DEBUG:rule", [Tag1 (("cell", 454), ([((("data")), 100000000, 0, -26)], 1, [[(("id", 311), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25), (("src/HashCons.mli", 27, 1506, 1510), ("src/HashCons.mli", 27, 1506, 1518), 0), 0, Tag1 ("Fix__HashCons", 1)); (("data", 312), 0, ((("data")), 100000000, 0, -26), (("src/HashCons.mli", 27, 1506, 1519), ("src/HashCons.mli", 27, 1506, 1530), 0), 0, Tag1 ("Fix__HashCons", 2))]], 0, 0, [31], [0], 0, 0, (("src/HashCons.mli", 26, 1480, 1480), ("src/HashCons.mli", 27, 1506, 1532), 0), 0, 0, 0, Tag1 ("Fix__HashCons", 0)), 1, 0); (("id", 455), ((Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -24)], (0)), 100000000, 0, -23), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("src/HashCons.mli", 30, 1601, 1601), ("src/HashCons.mli", 30, 1601, 1628), 0), 0, Tag1 ("Fix__HashCons", 3)), 0); (("data", 456), ((Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -19)], (0)), 100000000, 0, -20), ((("data")), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("src/HashCons.mli", 33, 1688, 1688), ("src/HashCons.mli", 33, 1688, 1717), 0), 0, Tag1 ("Fix__HashCons", 4)), 0); (("equal", 457), ((Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -16)], (0)), 100000000, 0, -17), (Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -16)], (0)), 100000000, 0, -15), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("src/HashCons.mli", 45, 2218, 2218), ("src/HashCons.mli", 45, 2218, 2261), 0), 0, Tag1 ("Fix__HashCons", 5)), 0); (("compare", 458), ((Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -10)], (0)), 100000000, 0, -11), (Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -10)], (0)), 100000000, 0, -9), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -8), 0), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("src/HashCons.mli", 49, 2364, 2364), ("src/HashCons.mli", 49, 2364, 2408), 0), 0, Tag1 ("Fix__HashCons", 6)), 0); (("hash", 459), ((Tag1 (0, (Tag3 ((("cell", 454)), [((("data")), 100000000, 0, -5)], (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("src/HashCons.mli", 53, 2502, 2502), ("src/HashCons.mli", 53, 2502, 2530), 0), 0, Tag1 ("Fix__HashCons", 7)), 0); Tag4 (("SERVICE", 460), ((Tag1 ([Tag1 (("data", 467), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("src/HashCons.mli", 59, 2741, 2743), ("src/HashCons.mli", 59, 2741, 2752), 0), 0, 0, 0, Tag1 ("Fix__HashCons", 8)), 1, 0); (("make", 468), ((Tag1 (0, (Tag3 ((("data", 467)), 0, (0)), 100000000, 0, -30), (Tag3 ((("cell", 454)), [(Tag3 ((("data", 467)), 0, (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("src/HashCons.mli", 60, 2753, 2755), ("src/HashCons.mli", 60, 2753, 2782), 0), 0, Tag1 ("Fix__HashCons", 9)), 0)])), 0, (("src/HashCons.mli", 58, 2715, 2715), ("src/HashCons.mli", 61, 2783, 2786), 0), Tag1 ("Fix__HashCons", 10)), 0); Tag3 (("Make", 461), 0, (Tag2 (((("M", 466)), (Tag1 (Tag1 ((Tag2 ("Fix__")), "Sigs"), "MEMOIZER"))), Tag1 ([Tag1 (("data", 469), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 466)), "key"), 0, (0)), 100000000, 0, -35)), 0, 0, 0, 0, (("src/HashCons.mli", 67, 2941, 2961), ("src/HashCons.mli", 67, 2941, 2978), 0), 0, 0, 0, Tag1 ("Fix__HashCons", 12)), 1, 0); (("make", 470), ((Tag1 (0, (Tag3 ((("data", 469)), 0, (0)), 100000000, 0, -34), (Tag3 ((("cell", 454)), [(Tag3 ((("data", 469)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("src/HashCons.mli", 60, 2753, 2755), ("src/HashCons.mli", 60, 2753, 2782), 0), 0, Tag1 ("Fix__HashCons", 9)), 0)])), 0, (("src/HashCons.mli", 65, 2912, 2912), ("src/HashCons.mli", 67, 2941, 2978), 0), Tag1 ("Fix__HashCons", 13)), 0, 0); Tag3 (("ForHashedType", 462), 0, (Tag2 (((("T", 465)), (Tag1 (Tag1 ((Tag2 ("Fix__")), "Sigs"), "HashedType"))), Tag1 ([Tag1 (("data", 471), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 465)), "t"), 0, (0)), 100000000, 0, -40)), 0, 0, 0, 0, (("src/HashCons.mli", 74, 3190, 3210), ("src/HashCons.mli", 74, 3190, 3225), 0), 0, 0, 0, Tag1 ("Fix__HashCons", 15)), 1, 0); (("make", 472), ((Tag1 (0, (Tag3 ((("data", 471)), 0, (0)), 100000000, 0, -39), (Tag3 ((("cell", 454)), [(Tag3 ((("data", 471)), 0, (0)), 100000000, 0, -38)], (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("src/HashCons.mli", 60, 2753, 2755), ("src/HashCons.mli", 60, 2753, 2782), 0), 0, Tag1 ("Fix__HashCons", 9)), 0)])), 0, (("src/HashCons.mli", 72, 3150, 3150), ("src/HashCons.mli", 74, 3190, 3225), 0), Tag1 ("Fix__HashCons", 16)), 0, 0); Tag3 (("ForHashedTypeWeak", 463), 0, (Tag2 (((("T", 464)), (Tag1 (Tag1 ((Tag2 ("Fix__")), "Sigs"), "HashedType"))), Tag1 ([Tag1 (("data", 473), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 464)), "t"), 0, (0)), 100000000, 0, -45)), 0, 0, 0, 0, (("src/HashCons.mli", 81, 3450, 3470), ("src/HashCons.mli", 81, 3450, 3485), 0), 0, 0, 0, Tag1 ("Fix__HashCons", 18)), 1, 0); (("make", 474), ((Tag1 (0, (Tag3 ((("data", 473)), 0, (0)), 100000000, 0, -44), (Tag3 ((("cell", 454)), [(Tag3 ((("data", 473)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("src/HashCons.mli", 60, 2753, 2755), ("src/HashCons.mli", 60, 2753, 2782), 0), 0, Tag1 ("Fix__HashCons", 9)), 0)])), 0, (("src/HashCons.mli", 79, 3406, 3406), ("src/HashCons.mli", 81, 3450, 3485), 0), Tag1 ("Fix__HashCons", 19)), 0, 0)], "Fix__HashCons", [("Fix__HashCons", ("\196K\244vr|\227/\187\020\204\127\212\012|S")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Fix__Sigs", (")\t\216|\023F\223*n\133c\172iG\005\154")); ("Fix__", ("\229-\006A\166\175\208\201Y\246\249k\r\n\155i")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
sig type data = T.t val make : data -> data cell end

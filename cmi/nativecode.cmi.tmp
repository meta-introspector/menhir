type mllambda
type global
val debug_native_compiler : CDebug.t
val keep_debug_files : unit -> bool
val pp_global : Format.formatter -> global -> unit
val mk_open : string -> global
val clear_symbols : unit -> unit
val get_value : Nativevalues.symbols -> int -> Nativevalues.t
val get_sort : Nativevalues.symbols -> int -> Sorts.t
val get_name : Nativevalues.symbols -> int -> Names.Name.t
val get_const : Nativevalues.symbols -> int -> Names.Constant.t
val get_match : Nativevalues.symbols -> int -> Nativevalues.annot_sw
val get_ind : Nativevalues.symbols -> int -> Names.inductive
val get_evar : Nativevalues.symbols -> int -> Evar.t
val get_level : Nativevalues.symbols -> int -> Univ.Level.t
val get_proj : Nativevalues.symbols -> int -> Names.inductive * int
val get_symbols : unit -> Nativevalues.symbols
type code_location_updates
type linkable_code = global list * code_location_updates
val clear_global_tbl : unit -> unit
val empty_updates : code_location_updates
val register_native_file : string -> unit
val is_loaded_native_file : string -> bool
val compile_constant_field :
  Environ.env ->
  Names.Constant.t ->
  global list -> 'a Declarations.pconstant_body -> global list
val compile_mind_field :
  Names.ModPath.t ->
  Names.Label.t ->
  global list -> Declarations.mutual_inductive_body -> global list
val mk_conv_code :
  Environ.env ->
  Genlambda.evars ->
  string -> Constr.constr -> Constr.constr -> linkable_code
val mk_norm_code :
  Environ.env -> Genlambda.evars -> string -> Constr.constr -> linkable_code
val mk_library_header : Nativevalues.symbols -> global list
val mod_uid_of_dirpath : Names.DirPath.t -> string
val link_info_of_dirpath : Names.DirPath.t -> Environ.link_info
val update_locations : code_location_updates -> unit
("DEBUG:rule", [Tag1 (("mllambda", 1258), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/nativecode.mli", 20, 912, 912), ("kernel/nativecode.mli", 20, 912, 925), 0), 0, 0, 0, Tag1 ("Nativecode", 1)), 1, 0); Tag1 (("global", 1259), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/nativecode.mli", 21, 926, 926), ("kernel/nativecode.mli", 21, 926, 937), 0), 0, 0, 0, Tag1 ("Nativecode", 2)), 1, 0); (("debug_native_compiler", 1260), ((Tag3 (Tag1 ((Tag2 ("CDebug")), "t"), 0, (0)), 100000000, 0, -143), 0, (("kernel/nativecode.mli", 23, 939, 939), ("kernel/nativecode.mli", 23, 939, 975), 0), 0, Tag1 ("Nativecode", 3)), 0); (("keep_debug_files", 1261), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -142), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -141), 0), 100000000, 0, -140), 0, (("kernel/nativecode.mli", 25, 977, 977), ("kernel/nativecode.mli", 25, 977, 1012), 0), 0, Tag1 ("Nativecode", 4)), 0); (("pp_global", 1262), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Format"), "formatter"), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -138), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("kernel/nativecode.mli", 27, 1014, 1014), ("kernel/nativecode.mli", 27, 1014, 1064), 0), 0, Tag1 ("Nativecode", 5)), 0); (("mk_open", 1263), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -134), (Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -133), 0), 100000000, 0, -132), 0, (("kernel/nativecode.mli", 29, 1066, 1066), ("kernel/nativecode.mli", 29, 1066, 1096), 0), 0, Tag1 ("Nativecode", 6)), 0); (("clear_symbols", 1264), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -131), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("kernel/nativecode.mli", 32, 1146, 1146), ("kernel/nativecode.mli", 32, 1146, 1178), 0), 0, Tag1 ("Nativecode", 7)), 0); (("get_value", 1265), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -128), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "t"), 0, (0)), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("kernel/nativecode.mli", 34, 1180, 1180), ("kernel/nativecode.mli", 34, 1180, 1228), 0), 0, Tag1 ("Nativecode", 8)), 0); (("get_sort", 1266), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -123), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -122), (Tag3 (Tag1 ((Tag2 ("Sorts")), "t"), 0, (0)), 100000000, 0, -121), 0), 100000000, 0, -120), 0), 100000000, 0, -119), 0, (("kernel/nativecode.mli", 36, 1230, 1230), ("kernel/nativecode.mli", 36, 1230, 1270), 0), 0, Tag1 ("Nativecode", 9)), 0); (("get_name", 1267), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -118), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0), 100000000, 0, -114), 0, (("kernel/nativecode.mli", 38, 1272, 1272), ("kernel/nativecode.mli", 38, 1272, 1311), 0), 0, Tag1 ("Nativecode", 10)), 0); (("get_const", 1268), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -113), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -112), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("kernel/nativecode.mli", 40, 1313, 1313), ("kernel/nativecode.mli", 40, 1313, 1357), 0), 0, Tag1 ("Nativecode", 11)), 0); (("get_match", 1269), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -108), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -107), (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "annot_sw"), 0, (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("kernel/nativecode.mli", 42, 1359, 1359), ("kernel/nativecode.mli", 42, 1359, 1414), 0), 0, Tag1 ("Nativecode", 12)), 0); (("get_ind", 1270), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -102), (Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -101), 0), 100000000, 0, -100), 0), 100000000, 0, -99), 0, (("kernel/nativecode.mli", 44, 1416, 1416), ("kernel/nativecode.mli", 44, 1416, 1457), 0), 0, Tag1 ("Nativecode", 13)), 0); (("get_evar", 1271), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Evar")), "t"), 0, (0)), 100000000, 0, -96), 0), 100000000, 0, -95), 0), 100000000, 0, -94), 0, (("kernel/nativecode.mli", 46, 1459, 1459), ("kernel/nativecode.mli", 46, 1459, 1498), 0), 0, Tag1 ("Nativecode", 14)), 0); (("get_level", 1272), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -93), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -92), (Tag3 (Tag1 (Tag1 ((Tag2 ("Univ")), "Level"), "t"), 0, (0)), 100000000, 0, -91), 0), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("kernel/nativecode.mli", 48, 1500, 1500), ("kernel/nativecode.mli", 48, 1500, 1546), 0), 0, Tag1 ("Nativecode", 15)), 0); (("get_proj", 1273), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -88), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -87), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Names")), "inductive"), 0, (0)), 100000000, 0, -85); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -86)]), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0, (("kernel/nativecode.mli", 50, 1548, 1548), ("kernel/nativecode.mli", 50, 1548, 1596), 0), 0, Tag1 ("Nativecode", 16)), 0); (("get_symbols", 1274), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -81), (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -80), 0), 100000000, 0, -79), 0, (("kernel/nativecode.mli", 52, 1598, 1598), ("kernel/nativecode.mli", 52, 1598, 1631), 0), 0, Tag1 ("Nativecode", 17)), 0); Tag1 (("code_location_updates", 1275), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("kernel/nativecode.mli", 54, 1633, 1633), ("kernel/nativecode.mli", 54, 1633, 1659), 0), 0, 0, 0, Tag1 ("Nativecode", 18)), 1, 0); Tag1 (("linkable_code", 1276), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76); (Tag3 ((("code_location_updates", 1275)), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -75)), 0, 0, 0, 0, (("kernel/nativecode.mli", 55, 1660, 1660), ("kernel/nativecode.mli", 55, 1660, 1716), 0), 0, 0, 0, Tag1 ("Nativecode", 19)), 1, 0); (("clear_global_tbl", 1277), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -74), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -73), 0), 100000000, 0, -72), 0, (("kernel/nativecode.mli", 57, 1718, 1718), ("kernel/nativecode.mli", 57, 1718, 1753), 0), 0, Tag1 ("Nativecode", 20)), 0); (("empty_updates", 1278), ((Tag3 ((("code_location_updates", 1275)), 0, (0)), 100000000, 0, -71), 0, (("kernel/nativecode.mli", 59, 1755, 1755), ("kernel/nativecode.mli", 59, 1755, 1796), 0), 0, Tag1 ("Nativecode", 21)), 0); (("register_native_file", 1279), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -70), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -69), 0), 100000000, 0, -68), 0, (("kernel/nativecode.mli", 61, 1798, 1798), ("kernel/nativecode.mli", 61, 1798, 1839), 0), 0, Tag1 ("Nativecode", 22)), 0); (("is_loaded_native_file", 1280), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0, (("kernel/nativecode.mli", 63, 1841, 1841), ("kernel/nativecode.mli", 63, 1841, 1883), 0), 0, Tag1 ("Nativecode", 23)), 0); (("compile_constant_field", 1281), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -64), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -63), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "pconstant_body"), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0), 100000000, 0, -53), 0, (("kernel/nativecode.mli", 65, 1885, 1885), ("kernel/nativecode.mli", 66, 1935, 1984), 0), 0, Tag1 ("Nativecode", 24)), 0); (("compile_mind_field", 1282), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "ModPath"), "t"), 0, (0)), 100000000, 0, -52), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Label"), "t"), 0, (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Declarations")), "mutual_inductive_body"), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -47)], (0)), 100000000, 0, -46), 0), 100000000, 0, -45), 0), 100000000, 0, -44), 0), 100000000, 0, -43), 0), 100000000, 0, -42), 0, (("kernel/nativecode.mli", 68, 1986, 1986), ("kernel/nativecode.mli", 69, 2035, 2088), 0), 0, Tag1 ("Nativecode", 25)), 0); (("mk_conv_code", 1283), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -41), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genlambda")), "evars"), 0, (0)), 100000000, 0, -40), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -39), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -38), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -37), (Tag3 ((("linkable_code", 1276)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0), 100000000, 0, -34), 0), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("kernel/nativecode.mli", 71, 2090, 2090), ("kernel/nativecode.mli", 71, 2090, 2178), 0), 0, Tag1 ("Nativecode", 26)), 0); (("mk_norm_code", 1284), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -30), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Genlambda")), "evars"), 0, (0)), 100000000, 0, -29), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -28), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "constr"), 0, (0)), 100000000, 0, -27), (Tag3 ((("linkable_code", 1276)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0), 100000000, 0, -22), 0, (("kernel/nativecode.mli", 72, 2179, 2179), ("kernel/nativecode.mli", 72, 2179, 2257), 0), 0, Tag1 ("Nativecode", 27)), 0); (("mk_library_header", 1285), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Nativevalues")), "symbols"), 0, (0)), 100000000, 0, -21), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0, (("kernel/nativecode.mli", 74, 2259, 2259), ("kernel/nativecode.mli", 74, 2259, 2318), 0), 0, Tag1 ("Nativecode", 28)), 0); (("mod_uid_of_dirpath", 1286), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("kernel/nativecode.mli", 76, 2320, 2320), ("kernel/nativecode.mli", 76, 2320, 2364), 0), 0, Tag1 ("Nativecode", 29)), 0); (("link_info_of_dirpath", 1287), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "DirPath"), "t"), 0, (0)), 100000000, 0, -14), (Tag3 (Tag1 ((Tag2 ("Environ")), "link_info"), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("kernel/nativecode.mli", 78, 2366, 2366), ("kernel/nativecode.mli", 78, 2366, 2415), 0), 0, Tag1 ("Nativecode", 30)), 0); (("update_locations", 1288), ((Tag1 (0, (Tag3 ((("code_location_updates", 1275)), 0, (0)), 100000000, 0, -11), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("kernel/nativecode.mli", 80, 2417, 2417), ("kernel/nativecode.mli", 80, 2417, 2469), 0), 0, Tag1 ("Nativecode", 31)), 0); (("add_header_comment", 1289), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -8)], (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6), (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("global", 1259)), 0, (0)), 100000000, 0, -5)], (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("kernel/nativecode.mli", 82, 2471, 2471), ("kernel/nativecode.mli", 82, 2471, 2532), 0), 0, Tag1 ("Nativecode", 32)), 0)], "Nativecode", [("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val add_header_comment : global list -> string -> global list

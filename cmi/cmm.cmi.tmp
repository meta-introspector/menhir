type machtype_component = Val | Addr | Int | Float
type machtype = machtype_component array
val typ_void : machtype
val typ_val : machtype
val typ_addr : machtype
val typ_int : machtype
val typ_float : machtype
val lub_component :
  machtype_component -> machtype_component -> machtype_component
val ge_component : machtype_component -> machtype_component -> bool
type exttype = XInt | XInt32 | XInt64 | XFloat
val machtype_of_exttype : exttype -> machtype
val machtype_of_exttype_list : exttype list -> machtype
type integer_comparison =
  Lambda.integer_comparison =
    Ceq
  | Cne
  | Clt
  | Cgt
  | Cle
  | Cge
val negate_integer_comparison : integer_comparison -> integer_comparison
val swap_integer_comparison : integer_comparison -> integer_comparison
type float_comparison =
  Lambda.float_comparison =
    CFeq
  | CFneq
  | CFlt
  | CFnlt
  | CFgt
  | CFngt
  | CFle
  | CFnle
  | CFge
  | CFnge
val negate_float_comparison : float_comparison -> float_comparison
val swap_float_comparison : float_comparison -> float_comparison
type label = int
val new_label : unit -> label
val set_label : label -> unit
val cur_label : unit -> label
type rec_flag = Nonrecursive | Recursive
type phantom_defining_expr =
    Cphantom_const_int of Targetint.t
  | Cphantom_const_symbol of string
  | Cphantom_var of Backend_var.t
  | Cphantom_offset_var of { var : Backend_var.t; offset_in_words : int; }
  | Cphantom_read_field of { var : Backend_var.t; field : int; }
  | Cphantom_read_symbol_field of { sym : string; field : int; }
  | Cphantom_block of { tag : int; fields : Backend_var.t list; }
type memory_chunk =
    Byte_unsigned
  | Byte_signed
  | Sixteen_unsigned
  | Sixteen_signed
  | Thirtytwo_unsigned
  | Thirtytwo_signed
  | Word_int
  | Word_val
  | Single
  | Double
and operation =
    Capply of machtype
  | Cextcall of string * machtype * exttype list * bool
  | Cload of { memory_chunk : memory_chunk;
      mutability : Asttypes.mutable_flag; is_atomic : bool;
    }
  | Calloc
  | Cstore of memory_chunk * Lambda.initialization_or_assignment
  | Caddi
  | Csubi
  | Cmuli
  | Cmulhi
  | Cdivi
  | Cmodi
  | Cand
  | Cor
  | Cxor
  | Clsl
  | Clsr
  | Casr
  | Ccmpi of integer_comparison
  | Caddv
  | Cadda
  | Ccmpa of integer_comparison
  | Cnegf
  | Cabsf
  | Caddf
  | Csubf
  | Cmulf
  | Cdivf
  | Cfloatofint
  | Cintoffloat
  | Ccmpf of float_comparison
  | Craise of Lambda.raise_kind
  | Ccheckbound
  | Copaque
  | Cdls_get
and expression =
    Cconst_int of int * Debuginfo.t
  | Cconst_natint of nativeint * Debuginfo.t
  | Cconst_float of float * Debuginfo.t
  | Cconst_symbol of string * Debuginfo.t
  | Cvar of Backend_var.t
  | Clet of Backend_var.With_provenance.t * expression * expression
  | Clet_mut of Backend_var.With_provenance.t * machtype * expression *
      expression
  | Cphantom_let of Backend_var.With_provenance.t *
      phantom_defining_expr option * expression
  | Cassign of Backend_var.t * expression
  | Ctuple of expression list
  | Cop of operation * expression list * Debuginfo.t
  | Csequence of expression * expression
  | Cifthenelse of expression * Debuginfo.t * expression * Debuginfo.t *
      expression * Debuginfo.t
  | Cswitch of expression * int array * (expression * Debuginfo.t) array *
      Debuginfo.t
  | Ccatch of rec_flag *
      (int * (Backend_var.With_provenance.t * machtype) list * expression *
       Debuginfo.t)
      list * expression
  | Cexit of int * expression list
  | Ctrywith of expression * Backend_var.With_provenance.t * expression *
      Debuginfo.t
type codegen_option = Reduce_code_size | No_CSE
type fundecl = {
  fun_name : string;
  fun_args : (Backend_var.With_provenance.t * machtype) list;
  fun_body : expression;
  fun_codegen_options : codegen_option list;
  fun_poll : Lambda.poll_attribute;
  fun_dbg : Debuginfo.t;
}
type data_item =
    Cdefine_symbol of string
  | Cglobal_symbol of string
  | Cint8 of int
  | Cint16 of int
  | Cint32 of nativeint
  | Cint of nativeint
  | Csingle of float
  | Cdouble of float
  | Csymbol_address of string
  | Cstring of string
  | Cskip of int
  | Calign of int
type phrase = Cfunction of fundecl | Cdata of data_item list
val ccatch :
  int * (Backend_var.With_provenance.t * machtype) list * expression *
  expression * Debuginfo.t -> expression
val reset : unit -> unit
val iter_shallow_tail : (expression -> unit) -> expression -> bool
val map_tail : (expression -> expression) -> expression -> expression
("DEBUG:rule", [Tag1 (("machtype_component", 667), (0, 0, Tag1 ([(("Val", 270), (0), 0, (("asmcomp/cmm.mli", 19, 1163, 1165), ("asmcomp/cmm.mli", 19, 1163, 1170), 0), 0, Tag1 ("Cmm", 1)); (("Addr", 271), (0), 0, (("asmcomp/cmm.mli", 20, 1171, 1173), ("asmcomp/cmm.mli", 20, 1171, 1179), 0), 0, Tag1 ("Cmm", 2)); (("Int", 272), (0), 0, (("asmcomp/cmm.mli", 21, 1180, 1182), ("asmcomp/cmm.mli", 21, 1180, 1187), 0), 0, Tag1 ("Cmm", 3)); (("Float", 273), (0), 0, (("asmcomp/cmm.mli", 22, 1188, 1190), ("asmcomp/cmm.mli", 22, 1188, 1197), 0), 0, Tag1 ("Cmm", 4))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 18, 1137, 1137), ("asmcomp/cmm.mli", 22, 1188, 1197), 0), 0, 1, 0, Tag1 ("Cmm", 0)), 1, 0); Tag1 (("machtype", 668), (0, 0, 0, 1, ((Tag3 ((Tag3 ("array", 8)), [(Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -198)], (0)), 100000000, 0, -197)), 0, 0, 0, 0, (("asmcomp/cmm.mli", 50, 2608, 2608), ("asmcomp/cmm.mli", 50, 2608, 2648), 0), 0, 0, 0, Tag1 ("Cmm", 5)), 1, 0); (("typ_void", 669), ((Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -196), 0, (("asmcomp/cmm.mli", 52, 2650, 2650), ("asmcomp/cmm.mli", 52, 2650, 2672), 0), 0, Tag1 ("Cmm", 6)), 0); (("typ_val", 670), ((Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -195), 0, (("asmcomp/cmm.mli", 53, 2673, 2673), ("asmcomp/cmm.mli", 53, 2673, 2694), 0), 0, Tag1 ("Cmm", 7)), 0); (("typ_addr", 671), ((Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -194), 0, (("asmcomp/cmm.mli", 54, 2695, 2695), ("asmcomp/cmm.mli", 54, 2695, 2717), 0), 0, Tag1 ("Cmm", 8)), 0); (("typ_int", 672), ((Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -193), 0, (("asmcomp/cmm.mli", 55, 2718, 2718), ("asmcomp/cmm.mli", 55, 2718, 2739), 0), 0, Tag1 ("Cmm", 9)), 0); (("typ_float", 673), ((Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -192), 0, (("asmcomp/cmm.mli", 56, 2740, 2740), ("asmcomp/cmm.mli", 56, 2740, 2763), 0), 0, Tag1 ("Cmm", 10)), 0); (("lub_component", 674), ((Tag1 (0, (Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -191), (Tag1 (0, (Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -190), (Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("asmcomp/cmm.mli", 59, 2820, 2820), ("asmcomp/cmm.mli", 62, 2886, 2909), 0), 0, Tag1 ("Cmm", 11)), 0); (("ge_component", 675), ((Tag1 (0, (Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((("machtype_component", 667)), 0, (0)), 100000000, 0, -185), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("asmcomp/cmm.mli", 66, 3064, 3064), ("asmcomp/cmm.mli", 69, 3129, 3138), 0), 0, Tag1 ("Cmm", 12)), 0); Tag1 (("exttype", 676), (0, 0, Tag1 ([(("XInt", 283), (0), 0, (("asmcomp/cmm.mli", 72, 3155, 3157), ("asmcomp/cmm.mli", 72, 3155, 3163), 0), 0, Tag1 ("Cmm", 14)); (("XInt32", 284), (0), 0, (("asmcomp/cmm.mli", 73, 3235, 3237), ("asmcomp/cmm.mli", 73, 3235, 3245), 0), 0, Tag1 ("Cmm", 15)); (("XInt64", 285), (0), 0, (("asmcomp/cmm.mli", 74, 3298, 3300), ("asmcomp/cmm.mli", 74, 3298, 3308), 0), 0, Tag1 ("Cmm", 16)); (("XFloat", 286), (0), 0, (("asmcomp/cmm.mli", 75, 3362, 3364), ("asmcomp/cmm.mli", 75, 3362, 3372), 0), 0, Tag1 ("Cmm", 17))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 71, 3140, 3140), ("asmcomp/cmm.mli", 75, 3362, 3372), 0), 0, 1, 0, Tag1 ("Cmm", 13)), 1, 0); (("machtype_of_exttype", 677), ((Tag1 (0, (Tag3 ((("exttype", 676)), 0, (0)), 100000000, 0, -181), (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -180), 0), 100000000, 0, -179), 0, (("asmcomp/cmm.mli", 79, 3525, 3525), ("asmcomp/cmm.mli", 79, 3525, 3569), 0), 0, Tag1 ("Cmm", 18)), 0); (("machtype_of_exttype_list", 678), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("exttype", 676)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -176), 0), 100000000, 0, -175), 0, (("asmcomp/cmm.mli", 80, 3570, 3570), ("asmcomp/cmm.mli", 80, 3570, 3624), 0), 0, Tag1 ("Cmm", 19)), 0); Tag1 (("integer_comparison", 679), (0, 0, Tag1 ([(("Ceq", 290), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3682), ("asmcomp/cmm.mli", 83, 3680, 3687), 0), 0, Tag1 ("Cmm", 21)); (("Cne", 291), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3688), ("asmcomp/cmm.mli", 83, 3680, 3693), 0), 0, Tag1 ("Cmm", 22)); (("Clt", 292), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3694), ("asmcomp/cmm.mli", 83, 3680, 3699), 0), 0, Tag1 ("Cmm", 23)); (("Cgt", 293), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3700), ("asmcomp/cmm.mli", 83, 3680, 3705), 0), 0, Tag1 ("Cmm", 24)); (("Cle", 294), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3706), ("asmcomp/cmm.mli", 83, 3680, 3711), 0), 0, Tag1 ("Cmm", 25)); (("Cge", 295), (0), 0, (("asmcomp/cmm.mli", 83, 3680, 3712), ("asmcomp/cmm.mli", 83, 3680, 3717), 0), 0, Tag1 ("Cmm", 26))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Lambda")), "integer_comparison"), 0, (0)), 100000000, 0, -174)), 0, 0, 0, 0, (("asmcomp/cmm.mli", 82, 3626, 3626), ("asmcomp/cmm.mli", 83, 3680, 3717), 0), 0, 1, 0, Tag1 ("Cmm", 20)), 1, 0); (("negate_integer_comparison", 680), ((Tag1 (0, (Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -173), (Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -172), 0), 100000000, 0, -171), 0, (("asmcomp/cmm.mli", 85, 3719, 3719), ("asmcomp/cmm.mli", 85, 3719, 3790), 0), 0, Tag1 ("Cmm", 30)), 0); (("swap_integer_comparison", 681), ((Tag1 (0, (Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -170), (Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -169), 0), 100000000, 0, -168), 0, (("asmcomp/cmm.mli", 86, 3791, 3791), ("asmcomp/cmm.mli", 86, 3791, 3860), 0), 0, Tag1 ("Cmm", 31)), 0); Tag1 (("float_comparison", 682), (0, 0, Tag1 ([(("CFeq", 377), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3914), ("asmcomp/cmm.mli", 89, 3912, 3920), 0), 0, Tag1 ("Cmm", 33)); (("CFneq", 378), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3921), ("asmcomp/cmm.mli", 89, 3912, 3928), 0), 0, Tag1 ("Cmm", 34)); (("CFlt", 379), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3929), ("asmcomp/cmm.mli", 89, 3912, 3935), 0), 0, Tag1 ("Cmm", 35)); (("CFnlt", 380), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3936), ("asmcomp/cmm.mli", 89, 3912, 3943), 0), 0, Tag1 ("Cmm", 36)); (("CFgt", 381), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3944), ("asmcomp/cmm.mli", 89, 3912, 3950), 0), 0, Tag1 ("Cmm", 37)); (("CFngt", 382), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3951), ("asmcomp/cmm.mli", 89, 3912, 3958), 0), 0, Tag1 ("Cmm", 38)); (("CFle", 383), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3959), ("asmcomp/cmm.mli", 89, 3912, 3965), 0), 0, Tag1 ("Cmm", 39)); (("CFnle", 384), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3966), ("asmcomp/cmm.mli", 89, 3912, 3973), 0), 0, Tag1 ("Cmm", 40)); (("CFge", 385), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3974), ("asmcomp/cmm.mli", 89, 3912, 3980), 0), 0, Tag1 ("Cmm", 41)); (("CFnge", 386), (0), 0, (("asmcomp/cmm.mli", 89, 3912, 3981), ("asmcomp/cmm.mli", 89, 3912, 3988), 0), 0, Tag1 ("Cmm", 42))], 0), 1, ((Tag3 (Tag1 ((Tag2 ("Lambda")), "float_comparison"), 0, (0)), 100000000, 0, -167)), 0, 0, 0, 0, (("asmcomp/cmm.mli", 88, 3862, 3862), ("asmcomp/cmm.mli", 89, 3912, 3988), 0), 0, 1, 0, Tag1 ("Cmm", 32)), 1, 0); (("negate_float_comparison", 683), ((Tag1 (0, (Tag3 ((("float_comparison", 682)), 0, (0)), 100000000, 0, -166), (Tag3 ((("float_comparison", 682)), 0, (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("asmcomp/cmm.mli", 91, 3990, 3990), ("asmcomp/cmm.mli", 91, 3990, 4055), 0), 0, Tag1 ("Cmm", 43)), 0); (("swap_float_comparison", 684), ((Tag1 (0, (Tag3 ((("float_comparison", 682)), 0, (0)), 100000000, 0, -163), (Tag3 ((("float_comparison", 682)), 0, (0)), 100000000, 0, -162), 0), 100000000, 0, -161), 0, (("asmcomp/cmm.mli", 92, 4056, 4056), ("asmcomp/cmm.mli", 92, 4056, 4119), 0), 0, Tag1 ("Cmm", 44)), 0); Tag1 (("label", 685), (0, 0, 0, 1, ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -160)), 0, 0, 0, 0, (("asmcomp/cmm.mli", 94, 4121, 4121), ("asmcomp/cmm.mli", 94, 4121, 4137), 0), 0, 1, 0, Tag1 ("Cmm", 45)), 1, 0); (("new_label", 686), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -159), (Tag3 ((("label", 685)), 0, (0)), 100000000, 0, -158), 0), 100000000, 0, -157), 0, (("asmcomp/cmm.mli", 95, 4138, 4138), ("asmcomp/cmm.mli", 95, 4138, 4166), 0), 0, Tag1 ("Cmm", 46)), 0); (("set_label", 687), ((Tag1 (0, (Tag3 ((("label", 685)), 0, (0)), 100000000, 0, -156), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("asmcomp/cmm.mli", 96, 4167, 4167), ("asmcomp/cmm.mli", 96, 4167, 4195), 0), 0, Tag1 ("Cmm", 47)), 0); (("cur_label", 688), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -153), (Tag3 ((("label", 685)), 0, (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0, (("asmcomp/cmm.mli", 97, 4196, 4196), ("asmcomp/cmm.mli", 97, 4196, 4224), 0), 0, Tag1 ("Cmm", 48)), 0); Tag1 (("rec_flag", 689), (0, 0, Tag1 ([(("Nonrecursive", 394), (0), 0, (("asmcomp/cmm.mli", 99, 4226, 4242), ("asmcomp/cmm.mli", 99, 4226, 4254), 0), 0, Tag1 ("Cmm", 50)); (("Recursive", 395), (0), 0, (("asmcomp/cmm.mli", 99, 4226, 4255), ("asmcomp/cmm.mli", 99, 4226, 4266), 0), 0, Tag1 ("Cmm", 51))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 99, 4226, 4226), ("asmcomp/cmm.mli", 99, 4226, 4266), 0), 0, 1, 0, Tag1 ("Cmm", 49)), 1, 0); Tag1 (("phantom_defining_expr", 690), (0, 0, Tag1 ([(("Cphantom_const_int", 397), ([(Tag3 (Tag1 ((Tag2 ("Targetint")), "t"), 0, (0)), 100000000, 0, -139)]), 0, (("asmcomp/cmm.mli", 105, 4471, 4473), ("asmcomp/cmm.mli", 105, 4471, 4508), 0), 0, Tag1 ("Cmm", 53)); (("Cphantom_const_symbol", 440), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -140)]), 0, (("asmcomp/cmm.mli", 109, 4723, 4725), ("asmcomp/cmm.mli", 109, 4723, 4758), 0), 0, Tag1 ("Cmm", 54)); (("Cphantom_var", 441), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -141)]), 0, (("asmcomp/cmm.mli", 111, 4825, 4827), ("asmcomp/cmm.mli", 111, 4825, 4858), 0), 0, Tag1 ("Cmm", 55)); (("Cphantom_offset_var", 484), Tag1 ([(("var", 485), 0, (Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -142), (("asmcomp/cmm.mli", 114, 4999, 5028), ("asmcomp/cmm.mli", 114, 4999, 5048), 0), 0, Tag1 ("Cmm", 56)); (("offset_in_words", 486), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -143), (("asmcomp/cmm.mli", 114, 4999, 5049), ("asmcomp/cmm.mli", 114, 4999, 5071), 0), 0, Tag1 ("Cmm", 57))]), 0, (("asmcomp/cmm.mli", 114, 4999, 5001), ("asmcomp/cmm.mli", 114, 4999, 5073), 0), 0, Tag1 ("Cmm", 58)); (("Cphantom_read_field", 487), Tag1 ([(("var", 488), 0, (Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -144), (("asmcomp/cmm.mli", 117, 5225, 5254), ("asmcomp/cmm.mli", 117, 5225, 5274), 0), 0, Tag1 ("Cmm", 59)); (("field", 489), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -145), (("asmcomp/cmm.mli", 117, 5225, 5275), ("asmcomp/cmm.mli", 117, 5225, 5287), 0), 0, Tag1 ("Cmm", 60))]), 0, (("asmcomp/cmm.mli", 117, 5225, 5227), ("asmcomp/cmm.mli", 117, 5225, 5289), 0), 0, Tag1 ("Cmm", 61)); (("Cphantom_read_symbol_field", 490), Tag1 ([(("sym", 491), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -146), (("asmcomp/cmm.mli", 121, 5465, 5501), ("asmcomp/cmm.mli", 121, 5465, 5514), 0), 0, Tag1 ("Cmm", 62)); (("field", 492), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -147), (("asmcomp/cmm.mli", 121, 5465, 5515), ("asmcomp/cmm.mli", 121, 5465, 5527), 0), 0, Tag1 ("Cmm", 63))]), 0, (("asmcomp/cmm.mli", 121, 5465, 5467), ("asmcomp/cmm.mli", 121, 5465, 5529), 0), 0, Tag1 ("Cmm", 64)); (("Cphantom_block", 493), Tag1 ([(("tag", 494), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -148), (("asmcomp/cmm.mli", 124, 5623, 5647), ("asmcomp/cmm.mli", 124, 5623, 5657), 0), 0, Tag1 ("Cmm", 65)); (("fields", 495), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -150)], (0)), 100000000, 0, -149), (("asmcomp/cmm.mli", 124, 5623, 5658), ("asmcomp/cmm.mli", 124, 5623, 5686), 0), 0, Tag1 ("Cmm", 66))]), 0, (("asmcomp/cmm.mli", 124, 5623, 5625), ("asmcomp/cmm.mli", 124, 5623, 5688), 0), 0, Tag1 ("Cmm", 67))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 101, 4268, 4268), ("asmcomp/cmm.mli", 124, 5623, 5688), 0), 0, 0, 0, Tag1 ("Cmm", 52)), 1, 0); Tag1 (("memory_chunk", 691), (0, 0, Tag1 ([(("Byte_unsigned", 538), (0), 0, (("asmcomp/cmm.mli", 129, 5800, 5804), ("asmcomp/cmm.mli", 129, 5800, 5817), 0), 0, Tag1 ("Cmm", 91)); (("Byte_signed", 539), (0), 0, (("asmcomp/cmm.mli", 130, 5818, 5820), ("asmcomp/cmm.mli", 130, 5818, 5833), 0), 0, Tag1 ("Cmm", 92)); (("Sixteen_unsigned", 540), (0), 0, (("asmcomp/cmm.mli", 131, 5834, 5836), ("asmcomp/cmm.mli", 131, 5834, 5854), 0), 0, Tag1 ("Cmm", 93)); (("Sixteen_signed", 541), (0), 0, (("asmcomp/cmm.mli", 132, 5855, 5857), ("asmcomp/cmm.mli", 132, 5855, 5873), 0), 0, Tag1 ("Cmm", 94)); (("Thirtytwo_unsigned", 542), (0), 0, (("asmcomp/cmm.mli", 133, 5874, 5876), ("asmcomp/cmm.mli", 133, 5874, 5896), 0), 0, Tag1 ("Cmm", 95)); (("Thirtytwo_signed", 543), (0), 0, (("asmcomp/cmm.mli", 134, 5897, 5899), ("asmcomp/cmm.mli", 134, 5897, 5917), 0), 0, Tag1 ("Cmm", 96)); (("Word_int", 544), (0), 0, (("asmcomp/cmm.mli", 135, 5918, 5920), ("asmcomp/cmm.mli", 135, 5918, 5930), 0), 0, Tag1 ("Cmm", 97)); (("Word_val", 545), (0), 0, (("asmcomp/cmm.mli", 136, 5995, 5997), ("asmcomp/cmm.mli", 136, 5995, 6007), 0), 0, Tag1 ("Cmm", 98)); (("Single", 546), (0), 0, (("asmcomp/cmm.mli", 137, 6075, 6077), ("asmcomp/cmm.mli", 137, 6075, 6085), 0), 0, Tag1 ("Cmm", 99)); (("Double", 547), (0), 0, (("asmcomp/cmm.mli", 138, 6086, 6088), ("asmcomp/cmm.mli", 138, 6086, 6096), 0), 0, Tag1 ("Cmm", 100))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 128, 5780, 5780), ("asmcomp/cmm.mli", 138, 6086, 6096), 0), 0, 1, 0, Tag1 ("Cmm", 88)), 1, 0); Tag1 (("operation", 692), (0, 0, Tag1 ([(("Capply", 548), ([(Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -124)]), 0, (("asmcomp/cmm.mli", 142, 6229, 6233), ("asmcomp/cmm.mli", 142, 6229, 6251), 0), 0, Tag1 ("Cmm", 101)); (("Cextcall", 549), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -125); (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -126); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("exttype", 676)), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -129)]), 0, (("asmcomp/cmm.mli", 143, 6252, 6254), ("asmcomp/cmm.mli", 143, 6252, 6307), 0), 0, Tag1 ("Cmm", 102)); (("Cload", 550), Tag1 ([(("memory_chunk", 551), 0, (Tag3 ((("memory_chunk", 691)), 0, (0)), 100000000, 0, -130), (("asmcomp/cmm.mli", 149, 6599, 6607), ("asmcomp/cmm.mli", 150, 6634, 6641), 0), 0, Tag1 ("Cmm", 103)); (("mutability", 565), 0, (Tag3 (Tag1 ((Tag2 ("Asttypes")), "mutable_flag"), 0, (0)), 100000000, 0, -131), (("asmcomp/cmm.mli", 150, 6634, 6642), ("asmcomp/cmm.mli", 151, 6676, 6683), 0), 0, Tag1 ("Cmm", 104)); (("is_atomic", 566), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -132), (("asmcomp/cmm.mli", 151, 6676, 6684), ("asmcomp/cmm.mli", 151, 6676, 6699), 0), 0, Tag1 ("Cmm", 105))]), 0, (("asmcomp/cmm.mli", 148, 6586, 6588), ("asmcomp/cmm.mli", 151, 6676, 6701), 0), 0, Tag1 ("Cmm", 106)); (("Calloc", 567), (0), 0, (("asmcomp/cmm.mli", 152, 6702, 6704), ("asmcomp/cmm.mli", 152, 6702, 6712), 0), 0, Tag1 ("Cmm", 107)); (("Cstore", 568), ([(Tag3 ((("memory_chunk", 691)), 0, (0)), 100000000, 0, -133); (Tag3 (Tag1 ((Tag2 ("Lambda")), "initialization_or_assignment"), 0, (0)), 100000000, 0, -134)]), 0, (("asmcomp/cmm.mli", 153, 6713, 6715), ("asmcomp/cmm.mli", 153, 6713, 6777), 0), 0, Tag1 ("Cmm", 108)); (("Caddi", 569), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6780), ("asmcomp/cmm.mli", 154, 6778, 6787), 0), 0, Tag1 ("Cmm", 109)); (("Csubi", 570), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6788), ("asmcomp/cmm.mli", 154, 6778, 6795), 0), 0, Tag1 ("Cmm", 110)); (("Cmuli", 571), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6796), ("asmcomp/cmm.mli", 154, 6778, 6803), 0), 0, Tag1 ("Cmm", 111)); (("Cmulhi", 572), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6804), ("asmcomp/cmm.mli", 154, 6778, 6812), 0), 0, Tag1 ("Cmm", 112)); (("Cdivi", 573), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6813), ("asmcomp/cmm.mli", 154, 6778, 6820), 0), 0, Tag1 ("Cmm", 113)); (("Cmodi", 574), (0), 0, (("asmcomp/cmm.mli", 154, 6778, 6821), ("asmcomp/cmm.mli", 154, 6778, 6828), 0), 0, Tag1 ("Cmm", 114)); (("Cand", 575), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6831), ("asmcomp/cmm.mli", 155, 6829, 6837), 0), 0, Tag1 ("Cmm", 115)); (("Cor", 576), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6838), ("asmcomp/cmm.mli", 155, 6829, 6843), 0), 0, Tag1 ("Cmm", 116)); (("Cxor", 577), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6844), ("asmcomp/cmm.mli", 155, 6829, 6850), 0), 0, Tag1 ("Cmm", 117)); (("Clsl", 578), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6851), ("asmcomp/cmm.mli", 155, 6829, 6857), 0), 0, Tag1 ("Cmm", 118)); (("Clsr", 579), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6858), ("asmcomp/cmm.mli", 155, 6829, 6864), 0), 0, Tag1 ("Cmm", 119)); (("Casr", 580), (0), 0, (("asmcomp/cmm.mli", 155, 6829, 6865), ("asmcomp/cmm.mli", 155, 6829, 6871), 0), 0, Tag1 ("Cmm", 120)); (("Ccmpi", 581), ([(Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -135)]), 0, (("asmcomp/cmm.mli", 156, 6872, 6874), ("asmcomp/cmm.mli", 156, 6872, 6903), 0), 0, Tag1 ("Cmm", 121)); (("Caddv", 582), (0), 0, (("asmcomp/cmm.mli", 157, 6904, 6906), ("asmcomp/cmm.mli", 157, 6904, 6913), 0), 0, Tag1 ("Cmm", 122)); (("Cadda", 583), (0), 0, (("asmcomp/cmm.mli", 158, 6984, 6986), ("asmcomp/cmm.mli", 158, 6984, 6993), 0), 0, Tag1 ("Cmm", 123)); (("Ccmpa", 584), ([(Tag3 ((("integer_comparison", 679)), 0, (0)), 100000000, 0, -136)]), 0, (("asmcomp/cmm.mli", 159, 7063, 7065), ("asmcomp/cmm.mli", 159, 7063, 7094), 0), 0, Tag1 ("Cmm", 124)); (("Cnegf", 585), (0), 0, (("asmcomp/cmm.mli", 160, 7095, 7097), ("asmcomp/cmm.mli", 160, 7095, 7104), 0), 0, Tag1 ("Cmm", 125)); (("Cabsf", 586), (0), 0, (("asmcomp/cmm.mli", 160, 7095, 7105), ("asmcomp/cmm.mli", 160, 7095, 7112), 0), 0, Tag1 ("Cmm", 126)); (("Caddf", 587), (0), 0, (("asmcomp/cmm.mli", 161, 7113, 7115), ("asmcomp/cmm.mli", 161, 7113, 7122), 0), 0, Tag1 ("Cmm", 127)); (("Csubf", 588), (0), 0, (("asmcomp/cmm.mli", 161, 7113, 7123), ("asmcomp/cmm.mli", 161, 7113, 7130), 0), 0, Tag1 ("Cmm", 128)); (("Cmulf", 589), (0), 0, (("asmcomp/cmm.mli", 161, 7113, 7131), ("asmcomp/cmm.mli", 161, 7113, 7138), 0), 0, Tag1 ("Cmm", 129)); (("Cdivf", 590), (0), 0, (("asmcomp/cmm.mli", 161, 7113, 7139), ("asmcomp/cmm.mli", 161, 7113, 7146), 0), 0, Tag1 ("Cmm", 130)); (("Cfloatofint", 591), (0), 0, (("asmcomp/cmm.mli", 162, 7147, 7149), ("asmcomp/cmm.mli", 162, 7147, 7162), 0), 0, Tag1 ("Cmm", 131)); (("Cintoffloat", 592), (0), 0, (("asmcomp/cmm.mli", 162, 7147, 7163), ("asmcomp/cmm.mli", 162, 7147, 7176), 0), 0, Tag1 ("Cmm", 132)); (("Ccmpf", 593), ([(Tag3 ((("float_comparison", 682)), 0, (0)), 100000000, 0, -137)]), 0, (("asmcomp/cmm.mli", 163, 7177, 7179), ("asmcomp/cmm.mli", 163, 7177, 7206), 0), 0, Tag1 ("Cmm", 133)); (("Craise", 594), ([(Tag3 (Tag1 ((Tag2 ("Lambda")), "raise_kind"), 0, (0)), 100000000, 0, -138)]), 0, (("asmcomp/cmm.mli", 164, 7207, 7209), ("asmcomp/cmm.mli", 164, 7207, 7238), 0), 0, Tag1 ("Cmm", 134)); (("Ccheckbound", 595), (0), 0, (("asmcomp/cmm.mli", 165, 7239, 7241), ("asmcomp/cmm.mli", 165, 7239, 7254), 0), 0, Tag1 ("Cmm", 135)); (("Copaque", 596), (0), 0, (("asmcomp/cmm.mli", 169, 7471, 7473), ("asmcomp/cmm.mli", 169, 7471, 7482), 0), 0, Tag1 ("Cmm", 136)); (("Cdls_get", 597), (0), 0, (("asmcomp/cmm.mli", 170, 7509, 7511), ("asmcomp/cmm.mli", 170, 7509, 7521), 0), 0, Tag1 ("Cmm", 137))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 141, 6213, 6213), ("asmcomp/cmm.mli", 170, 7509, 7521), 0), 0, 0, 0, Tag1 ("Cmm", 89)), 2, 0); Tag1 (("expression", 693), (0, 0, Tag1 ([(("Cconst_int", 598), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -63)]), 0, (("asmcomp/cmm.mli", 175, 7630, 7634), ("asmcomp/cmm.mli", 175, 7630, 7665), 0), 0, Tag1 ("Cmm", 138)); (("Cconst_natint", 613), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -64); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -65)]), 0, (("asmcomp/cmm.mli", 176, 7666, 7668), ("asmcomp/cmm.mli", 176, 7666, 7710), 0), 0, Tag1 ("Cmm", 139)); (("Cconst_float", 614), ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -66); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -67)]), 0, (("asmcomp/cmm.mli", 177, 7711, 7713), ("asmcomp/cmm.mli", 177, 7711, 7750), 0), 0, Tag1 ("Cmm", 140)); (("Cconst_symbol", 615), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -69)]), 0, (("asmcomp/cmm.mli", 178, 7751, 7753), ("asmcomp/cmm.mli", 178, 7751, 7792), 0), 0, Tag1 ("Cmm", 141)); (("Cvar", 616), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -70)]), 0, (("asmcomp/cmm.mli", 179, 7793, 7795), ("asmcomp/cmm.mli", 179, 7793, 7818), 0), 0, Tag1 ("Cmm", 142)); (("Clet", 617), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -71); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -72); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -73)]), 0, (("asmcomp/cmm.mli", 180, 7819, 7821), ("asmcomp/cmm.mli", 180, 7819, 7886), 0), 0, Tag1 ("Cmm", 143)); (("Clet_mut", 625), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -74); (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -75); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -76); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -77)]), 0, (("asmcomp/cmm.mli", 181, 7887, 7889), ("asmcomp/cmm.mli", 182, 7944, 7985), 0), 0, Tag1 ("Cmm", 144)); (("Cphantom_let", 626), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -78); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("phantom_defining_expr", 690)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -81)]), 0, (("asmcomp/cmm.mli", 183, 7986, 7988), ("asmcomp/cmm.mli", 184, 8036, 8085), 0), 0, Tag1 ("Cmm", 145)); (("Cassign", 627), ([(Tag3 (Tag1 ((Tag2 ("Backend_var")), "t"), 0, (0)), 100000000, 0, -82); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -83)]), 0, (("asmcomp/cmm.mli", 186, 8145, 8147), ("asmcomp/cmm.mli", 186, 8145, 8186), 0), 0, Tag1 ("Cmm", 146)); (("Ctuple", 628), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -85)], (0)), 100000000, 0, -84)]), 0, (("asmcomp/cmm.mli", 187, 8187, 8189), ("asmcomp/cmm.mli", 187, 8187, 8216), 0), 0, Tag1 ("Cmm", 147)); (("Cop", 629), ([(Tag3 ((("operation", 692)), 0, (0)), 100000000, 0, -86); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -89)]), 0, (("asmcomp/cmm.mli", 188, 8217, 8219), ("asmcomp/cmm.mli", 188, 8217, 8269), 0), 0, Tag1 ("Cmm", 148)); (("Csequence", 630), ([(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -90); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -91)]), 0, (("asmcomp/cmm.mli", 189, 8270, 8272), ("asmcomp/cmm.mli", 189, 8270, 8310), 0), 0, Tag1 ("Cmm", 149)); (("Cifthenelse", 631), ([(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -92); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -93); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -94); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -95); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -96); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -97)]), 0, (("asmcomp/cmm.mli", 190, 8311, 8313), ("asmcomp/cmm.mli", 191, 8368, 8414), 0), 0, Tag1 ("Cmm", 150)); (("Cswitch", 632), ([(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -98); (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -100)], (0)), 100000000, 0, -99); (Tag3 ((Tag3 ("array", 8)), [(Tag2 ([(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -103); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -104)]), 100000000, 0, -102)], (0)), 100000000, 0, -101); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -105)]), 0, (("asmcomp/cmm.mli", 192, 8415, 8417), ("asmcomp/cmm.mli", 193, 8488, 8507), 0), 0, Tag1 ("Cmm", 151)); (("Ccatch", 633), ([(Tag3 ((("rec_flag", 689)), 0, (0)), 100000000, 0, -106); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -109); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -112); (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -113)]), 100000000, 0, -111)], (0)), 100000000, 0, -110); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -114); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -115)]), 100000000, 0, -108)], (0)), 100000000, 0, -107); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -116)]), 0, (("asmcomp/cmm.mli", 194, 8508, 8510), ("asmcomp/cmm.mli", 198, 8645, 8665), 0), 0, Tag1 ("Cmm", 152)); (("Cexit", 634), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -117); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -119)], (0)), 100000000, 0, -118)]), 0, (("asmcomp/cmm.mli", 199, 8666, 8668), ("asmcomp/cmm.mli", 199, 8666, 8700), 0), 0, Tag1 ("Cmm", 153)); (("Ctrywith", 635), ([(Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -120); (Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -121); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -122); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -123)]), 0, (("asmcomp/cmm.mli", 200, 8701, 8703), ("asmcomp/cmm.mli", 201, 8773, 8792), 0), 0, Tag1 ("Cmm", 154))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 174, 7613, 7613), ("asmcomp/cmm.mli", 201, 8773, 8792), 0), 0, 0, 0, Tag1 ("Cmm", 90)), 2, 0); Tag1 (("codegen_option", 694), (0, 0, Tag1 ([(("Reduce_code_size", 637), (0), 0, (("asmcomp/cmm.mli", 204, 8816, 8818), ("asmcomp/cmm.mli", 204, 8816, 8836), 0), 0, Tag1 ("Cmm", 162)); (("No_CSE", 638), (0), 0, (("asmcomp/cmm.mli", 205, 8837, 8839), ("asmcomp/cmm.mli", 205, 8837, 8847), 0), 0, Tag1 ("Cmm", 163))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 203, 8794, 8794), ("asmcomp/cmm.mli", 205, 8837, 8847), 0), 0, 1, 0, Tag1 ("Cmm", 161)), 1, 0); Tag1 (("fundecl", 695), (0, 0, [[(("fun_name", 640), 0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52), (("asmcomp/cmm.mli", 208, 8864, 8868), ("asmcomp/cmm.mli", 208, 8864, 8885), 0), 0, Tag1 ("Cmm", 165)); (("fun_args", 641), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -55); (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -56)]), 100000000, 0, -54)], (0)), 100000000, 0, -53), (("asmcomp/cmm.mli", 209, 8886, 8890), ("asmcomp/cmm.mli", 209, 8886, 8948), 0), 0, Tag1 ("Cmm", 166)); (("fun_body", 642), 0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -57), (("asmcomp/cmm.mli", 210, 8949, 8953), ("asmcomp/cmm.mli", 210, 8949, 8974), 0), 0, Tag1 ("Cmm", 167)); (("fun_codegen_options", 643), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("codegen_option", 694)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), (("asmcomp/cmm.mli", 211, 8975, 8979), ("asmcomp/cmm.mli", 211, 8975, 9021), 0), 0, Tag1 ("Cmm", 168)); (("fun_poll", 644), 0, (Tag3 (Tag1 ((Tag2 ("Lambda")), "poll_attribute"), 0, (0)), 100000000, 0, -60), (("asmcomp/cmm.mli", 212, 9022, 9026), ("asmcomp/cmm.mli", 212, 9022, 9058), 0), 0, Tag1 ("Cmm", 169)); (("fun_dbg", 645), 0, (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -61), (("asmcomp/cmm.mli", 213, 9059, 9063), ("asmcomp/cmm.mli", 213, 9059, 9085), 0), 0, Tag1 ("Cmm", 170))]], 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 207, 8849, 8849), ("asmcomp/cmm.mli", 214, 9086, 9089), 0), 0, 0, 0, Tag1 ("Cmm", 164)), 1, 0); Tag1 (("data_item", 696), (0, 0, Tag1 ([(("Cdefine_symbol", 647), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -40)]), 0, (("asmcomp/cmm.mli", 217, 9108, 9112), ("asmcomp/cmm.mli", 217, 9108, 9136), 0), 0, Tag1 ("Cmm", 172)); (("Cglobal_symbol", 648), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -41)]), 0, (("asmcomp/cmm.mli", 218, 9137, 9139), ("asmcomp/cmm.mli", 218, 9137, 9165), 0), 0, Tag1 ("Cmm", 173)); (("Cint8", 649), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42)]), 0, (("asmcomp/cmm.mli", 219, 9166, 9168), ("asmcomp/cmm.mli", 219, 9166, 9182), 0), 0, Tag1 ("Cmm", 174)); (("Cint16", 650), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -43)]), 0, (("asmcomp/cmm.mli", 220, 9183, 9185), ("asmcomp/cmm.mli", 220, 9183, 9200), 0), 0, Tag1 ("Cmm", 175)); (("Cint32", 651), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -44)]), 0, (("asmcomp/cmm.mli", 221, 9201, 9203), ("asmcomp/cmm.mli", 221, 9201, 9224), 0), 0, Tag1 ("Cmm", 176)); (("Cint", 652), ([(Tag3 ((Tag3 ("nativeint", 11)), 0, (0)), 100000000, 0, -45)]), 0, (("asmcomp/cmm.mli", 222, 9225, 9227), ("asmcomp/cmm.mli", 222, 9225, 9246), 0), 0, Tag1 ("Cmm", 177)); (("Csingle", 653), ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -46)]), 0, (("asmcomp/cmm.mli", 223, 9247, 9249), ("asmcomp/cmm.mli", 223, 9247, 9267), 0), 0, Tag1 ("Cmm", 178)); (("Cdouble", 654), ([(Tag3 ((Tag3 ("float", 4)), 0, (0)), 100000000, 0, -47)]), 0, (("asmcomp/cmm.mli", 224, 9268, 9270), ("asmcomp/cmm.mli", 224, 9268, 9288), 0), 0, Tag1 ("Cmm", 179)); (("Csymbol_address", 655), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48)]), 0, (("asmcomp/cmm.mli", 225, 9289, 9291), ("asmcomp/cmm.mli", 225, 9289, 9318), 0), 0, Tag1 ("Cmm", 180)); (("Cstring", 656), ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -49)]), 0, (("asmcomp/cmm.mli", 226, 9319, 9321), ("asmcomp/cmm.mli", 226, 9319, 9340), 0), 0, Tag1 ("Cmm", 181)); (("Cskip", 657), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50)]), 0, (("asmcomp/cmm.mli", 227, 9341, 9343), ("asmcomp/cmm.mli", 227, 9341, 9357), 0), 0, Tag1 ("Cmm", 182)); (("Calign", 658), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -51)]), 0, (("asmcomp/cmm.mli", 228, 9358, 9360), ("asmcomp/cmm.mli", 228, 9358, 9375), 0), 0, Tag1 ("Cmm", 183))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 216, 9091, 9091), ("asmcomp/cmm.mli", 228, 9358, 9375), 0), 0, 0, 0, Tag1 ("Cmm", 171)), 1, 0); Tag1 (("phrase", 697), (0, 0, Tag1 ([(("Cfunction", 660), ([(Tag3 ((("fundecl", 695)), 0, (0)), 100000000, 0, -37)]), 0, (("asmcomp/cmm.mli", 231, 9391, 9395), ("asmcomp/cmm.mli", 231, 9391, 9415), 0), 0, Tag1 ("Cmm", 185)); (("Cdata", 661), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("data_item", 696)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38)]), 0, (("asmcomp/cmm.mli", 232, 9416, 9418), ("asmcomp/cmm.mli", 232, 9416, 9443), 0), 0, Tag1 ("Cmm", 186))], 0), 1, 0, 0, 0, 0, 0, (("asmcomp/cmm.mli", 230, 9377, 9377), ("asmcomp/cmm.mli", 232, 9416, 9443), 0), 0, 0, 0, Tag1 ("Cmm", 184)), 1, 0); (("ccatch", 698), ((Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29); (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Backend_var")), "With_provenance"), "t"), 0, (0)), 100000000, 0, -32); (Tag3 ((("machtype", 668)), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -34); (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("Debuginfo")), "t"), 0, (0)), 100000000, 0, -36)]), 100000000, 0, -28), (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("asmcomp/cmm.mli", 234, 9445, 9445), ("asmcomp/cmm.mli", 237, 9564, 9579), 0), 0, Tag1 ("Cmm", 187)), 0); (("reset", 699), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("asmcomp/cmm.mli", 239, 9581, 9581), ("asmcomp/cmm.mli", 239, 9581, 9605), 0), 0, Tag1 ("Cmm", 188)), 0); (("iter_shallow_tail", 700), ((Tag1 (0, (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -19), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("asmcomp/cmm.mli", 241, 9607, 9607), ("asmcomp/cmm.mli", 241, 9607, 9672), 0), 0, Tag1 ("Cmm", 189)), 0); (("map_tail", 701), ((Tag1 (0, (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -15), (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -12), (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("asmcomp/cmm.mli", 250, 10133, 10133), ("asmcomp/cmm.mli", 250, 10133, 10201), 0), 0, Tag1 ("Cmm", 190)), 0); (("map_shallow", 702), ((Tag1 (0, (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -8), (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -5), (Tag3 ((("expression", 693)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("asmcomp/cmm.mli", 256, 10441, 10441), ("asmcomp/cmm.mli", 256, 10441, 10512), 0), 0, Tag1 ("Cmm", 191)), 0)], "Cmm", [("Cmm", ("\245\177\229\137\140&\252'xF\207\167\160\025\167\223")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Types", ("\177\238\029.\220\006\163!\230\015\006\182\133\155\194\166")); ("Type_immediacy", ("\"\127k\011Q\241\211\138\193;8\142\129\141#\251")); ("Targetint", ("\246d\193-\187\015a_\181+\n \019\246;\150")); ("Subst", ("\021\031\148\223\127\186\189\135\027}\145r\216\143\177\156")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shape", ("\235\127Y\213\025\137=\244\218\181\248N\189\188\216p")); ("Primitive", ("}Shh\162\015|\220A\203\249\232\245G\213\019")); ("Path", ("\012\183\178\025\1298\228*\021r\185\160Y\252\n\026")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Outcometree", ("9\021%\234\211\206\210\004H\165\208\2014\234Q\142")); ("Misc", ("*\026\026\234c\191\131\161\\\203\183\012O\252\153\198")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Load_path", ("\012@\228l\230\164S\172h\1726X\020\252o}")); ("Lambda", ("\180\1419\236'\146K$\128\006\135q\135V\029\180")); ("Identifiable", ("\004F\207\014\158GU\001\184\214\187%/#;\211")); ("Ident", ("\b9;!\187.\220\163(x\b\174\\\223\020\004")); ("Env", ("\021\n\181\142x\b\169j\227\"\017\248*\178\245\223")); ("Debuginfo", ("\131\251\175\217P\194M\163\022\151\002\005\006\185:\185")); ("Cmi_format", ("6\177\bU\139\"\023\152=\249\135\174\b\011Cg")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Build_path_prefix_map", ("y\028\167\207D\220\198\216\011\208\172\149\2416\bc")); ("Backend_var", ("\182\144C\215j:\241\151\214\131?\204\253\002\029\151")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
val map_shallow : (expression -> expression) -> expression -> expression

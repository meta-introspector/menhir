exception Incompatible
val selection :
  ([ `Succ of 'index_a ], 'sequence, 'head_a, 'tail_a) Refl__.Desc.selection ->
  ([ `Succ of 'index_b ], 'sequence, 'head_b, 'tail_b) Refl__.Desc.selection ->
  ('head_a, 'head_b) Refl__.Desc.eq
val convert_eqs :
  ('a_eqs, 'structure_eqs_a, 'kinds_a, 'gadt) Refl__.Desc.constructor_eqs ->
  ('b_eqs, 'structure_eqs_b, 'kinds_b, 'gadt) Refl__.Desc.constructor_eqs ->
  'a_eqs -> 'b_eqs
val convert_presence :
  ('global_a, 'local_a) Refl__.Desc.presence ->
  ('global_b, 'local_b) Refl__.Desc.presence ->
  ('local_a, 'local_b) Refl__.Desc.eq
val convert_presences :
  ('global, 'local_a) Refl__.Desc.presences ->
  ('global, 'local_b) Refl__.Desc.presences ->
  ('local_a, 'local_b) Refl__.Desc.eq
module Converter : sig type ('a, 'b) t = 'a -> 'b end
module Converters :
  sig
    type ('a, 'b) item = ('a, 'b) Converter.t * ('b, 'a) Converter.t
    type ('a, 'b) t =
        [] : (unit, unit) t
      | (::) : ('a, 'b) item * ('at, 'bt) t -> ('a * 'at, 'b * 'bt) t
    val get :
      ('index, 'arity_a, 'a, 'positive_a, 'direct_a) Refl__.Desc.variable ->
      ('index, 'arity_b, 'b, 'positive_b, 'direct_b) Refl__.Desc.variable ->
      ('arity_a, 'arity_b) t -> 'a -> 'b
    val reverse : ('arity_a, 'arity_b) t -> ('arity_b, 'arity_a) t
  end
type ('arity_a, 'arity_b) converters =
    SameArity of ('arity_a, 'arity_b) Refl__.Desc.eq
  | Converters of ('arity_a, 'arity_b) Converters.t
type ('forall, 'arity_a, 'arity_b) make_variables =
    MakeVariables : {
      subarity_a : ('forall, 'arity_a, 'subarity_a) Refl__.Desc.append;
      subarity_b : ('forall, 'arity_b, 'subarity_b) Refl__.Desc.append;
      converters : ('subarity_a, 'subarity_b) converters;
    } -> ('forall, 'arity_a, 'arity_b) make_variables
val reverse :
  ('arity_a, 'arity_b) converters -> ('arity_b, 'arity_a) converters
val make_variables :
  ('count, 'forall) Refl__.Desc.length ->
  ('arity_a, 'arity_b) converters ->
  ('forall, 'arity_a, 'arity_b) make_variables
val convert :
  ('a_struct, 'structure_a, 'arity_a, 'rec_group_a, 'kinds_a, 'positive_a,
   'negative_a, 'direct_a, 'gadt_a)
  Refl__.Desc.desc ->
  ('b_struct, 'structure_b, 'arity_b, 'rec_group_b, 'kinds_b, 'positive_b,
   'negative_b, 'direct_b, 'gadt_b)
  Refl__.Desc.desc ->
  ('arity_a, 'arity_b) converters ->
  ('gadt_a, 'gadt_b) Refl__.Desc.eq option ->
  ('a_struct, 'b_struct) Converter.t
val transfer :
  ('a, 'structures_a, 'arity_a, 'rec_group_a, 'kinds_a, 'variables_a,
   'gadt_a)
  Refl__.Desc.vector ->
  ('b, 'structures_b, 'arity_b, 'rec_group_b, 'kinds_b, 'variables_b,
   'gadt_b)
  Refl__.Desc.vector ->
  ('arity_a, 'arity_b) converters ->
  ('gadt_a, 'gadt_b) Refl__.Desc.eq option -> ('a, 'b) Converters.t
val cast :
  ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i) Refl__.Desc.desc ->
  ("DEBUG:rule", [Tag2 (("Incompatible", 1766), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Refl__Convert", 37)), 2, 0); (("selection", 1767), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "selection"), [(Tag8 (([("Succ", ((((("index_a")), 100000000, 0, -148))))], (0, 100000000, 0, -147), 1, 0, 0)), 100000000, 0, -146); ((("sequence")), 100000000, 0, -143); ((("head_a")), 100000000, 0, -137); ((("tail_a")), 100000000, 0, -149)], (0)), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "selection"), [(Tag8 (([("Succ", ((((("index_b")), 100000000, 0, -142))))], (0, 100000000, 0, -141), 1, 0, 0)), 100000000, 0, -140); ((("sequence")), 100000000, 0, -143); ((("head_b")), 100000000, 0, -138); ((("tail_b")), 100000000, 0, -144)], (0)), 100000000, 0, -139), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("head_a")), 100000000, 0, -137); ((("head_b")), 100000000, 0, -138)], (0)), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("runtime/convert.ml", 7, 47, 51), ("runtime/convert.ml", 7, 47, 60), 0), 0, Tag1 ("Refl__Convert", 38)), 0); (("convert_eqs", 1768), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructor_eqs"), [((("a_eqs")), 100000000, 0, -126); ((("structure_eqs_a")), 100000000, 0, -132); ((("kinds_a")), 100000000, 0, -133); ((("gadt")), 100000000, 0, -130)], (0)), 100000000, 0, -131), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "constructor_eqs"), [((("b_eqs")), 100000000, 0, -125); ((("structure_eqs_b")), 100000000, 0, -128); ((("kinds_b")), 100000000, 0, -129); ((("gadt")), 100000000, 0, -130)], (0)), 100000000, 0, -127), (Tag1 (0, ((("a_eqs")), 100000000, 0, -126), ((("b_eqs")), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("runtime/convert.ml", 19, 510, 518), ("runtime/convert.ml", 19, 510, 529), 0), 0, Tag1 ("Refl__Convert", 87)), 0); (("convert_presence", 1769), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presence"), [((("global_a")), 100000000, 0, -121); ((("local_a")), 100000000, 0, -116)], (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presence"), [((("global_b")), 100000000, 0, -119); ((("local_b")), 100000000, 0, -117)], (0)), 100000000, 0, -118), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("local_a")), 100000000, 0, -116); ((("local_b")), 100000000, 0, -117)], (0)), 100000000, 0, -115), 0), 100000000, 0, -114), 0), 100000000, 0, -113), 0, (("runtime/convert.ml", 34, 1049, 1053), ("runtime/convert.ml", 34, 1049, 1069), 0), 0, Tag1 ("Refl__Convert", 126)), 0); (("convert_presences", 1770), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("global")), 100000000, 0, -111); ((("local_a")), 100000000, 0, -108)], (0)), 100000000, 0, -112), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "presences"), [((("global")), 100000000, 0, -111); ((("local_b")), 100000000, 0, -109)], (0)), 100000000, 0, -110), (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("local_a")), 100000000, 0, -108); ((("local_b")), 100000000, 0, -109)], (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("runtime/convert.ml", 45, 1355, 1363), ("runtime/convert.ml", 45, 1355, 1380), 0), 0, Tag1 ("Refl__Convert", 141)), 0); Tag3 (("Converter", 1771), 0, (Tag1 ([Tag1 (("t", 1780), ([((("a")), 100000000, 0, -152); ((("b")), 100000000, 0, -151)], 2, 0, 1, ((Tag1 (0, ((("a")), 100000000, 0, -152), ((("b")), 100000000, 0, -151), 0), 100000000, 0, -150)), [46; 25], [0; 0], 0, 0, (("runtime/convert.ml", 62, 1906, 1908), ("runtime/convert.ml", 62, 1906, 1934), 0), 0, 0, 0, Tag1 ("Refl__Convert", 165)), 1, 0)]), 0, (("runtime/convert.ml", 61, 1880, 1880), ("runtime/convert.ml", 63, 1935, 1938), 0), Tag1 ("Refl__Convert", 166)), 0, 0); Tag3 (("Converters", 1772), 0, (Tag1 ([Tag1 (("item", 1781), ([((("a")), 100000000, 0, -190); ((("b")), 100000000, 0, -191)], 2, 0, 1, ((Tag2 ([(Tag3 (Tag1 ((("Converter", 1771)), "t"), [((("a")), 100000000, 0, -190); ((("b")), 100000000, 0, -191)], (0)), 100000000, 0, -189); (Tag3 (Tag1 ((("Converter", 1771)), "t"), [((("b")), 100000000, 0, -191); ((("a")), 100000000, 0, -190)], (0)), 100000000, 0, -192)]), 100000000, 0, -188)), [63; 63], [0; 0], 0, 0, (("runtime/convert.ml", 66, 1967, 1969), ("runtime/convert.ml", 66, 1967, 2033), 0), 0, 0, 0, Tag1 ("Refl__Convert", 167)), 1, 0); Tag1 (("t", 1782), ([((("a")), 100000000, 0, -186); ((("b")), 100000000, 0, -187)], 2, Tag1 ([(("[]", 556), (0), ((Tag3 ((("t", 1782)), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -175); (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -176)], (0)), 100000000, 0, -174)), (("runtime/convert.ml", 69, 2055, 2059), ("runtime/convert.ml", 69, 2055, 2080), 0), 0, Tag1 ("Refl__Convert", 169)); (("::", 557), ([(Tag3 ((("item", 1781)), [((("a")), 100000000, 0, -179); ((("b")), 100000000, 0, -182)], (0)), 100000000, 0, -184); (Tag3 ((("t", 1782)), [((("at")), 100000000, 0, -180); ((("bt")), 100000000, 0, -183)], (0)), 100000000, 0, -185)]), ((Tag3 ((("t", 1782)), [(Tag2 ([((("a")), 100000000, 0, -179); ((("at")), 100000000, 0, -180)]), 100000000, 0, -178); (Tag2 ([((("b")), 100000000, 0, -182); ((("bt")), 100000000, 0, -183)]), 100000000, 0, -181)], (0)), 100000000, 0, -177)), (("runtime/convert.ml", 70, 2081, 2085), ("runtime/convert.ml", 70, 2081, 2148), 0), 0, Tag1 ("Refl__Convert", 170))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("runtime/convert.ml", 68, 2035, 2037), ("runtime/convert.ml", 70, 2081, 2148), 0), 0, 0, 0, Tag1 ("Refl__Convert", 168)), 1, 0); (("get", 1783), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -168); ((("arity_a")), 100000000, 0, -165); ((("a")), 100000000, 0, -163); ((("positive_a")), 100000000, 0, -172); ((("direct_a")), 100000000, 0, -173)], (0)), 100000000, 0, -171), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "variable"), [((("index")), 100000000, 0, -168); ((("arity_b")), 100000000, 0, -166); ((("b")), 100000000, 0, -162); ((("positive_b")), 100000000, 0, -169); ((("direct_b")), 100000000, 0, -170)], (0)), 100000000, 0, -167), (Tag1 (0, (Tag3 ((("t", 1782)), [((("arity_a")), 100000000, 0, -165); ((("arity_b")), 100000000, 0, -166)], (0)), 100000000, 0, -164), (Tag1 (0, ((("a")), 100000000, 0, -163), ((("b")), 100000000, 0, -162), 0), 100000000, 0, -161), 0), 100000000, 0, -160), 0), 100000000, 0, -159), 0), 100000000, 0, -158), 0, (("runtime/convert.ml", 72, 2150, 2160), ("runtime/convert.ml", 72, 2150, 2163), 0), 0, Tag1 ("Refl__Convert", 171)), 0); (("reverse", 1784), ((Tag1 (0, (Tag3 ((("t", 1782)), [((("arity_a")), 100000000, 0, -156); ((("arity_b")), 100000000, 0, -155)], (0)), 100000000, 0, -157), (Tag3 ((("t", 1782)), [((("arity_b")), 100000000, 0, -155); ((("arity_a")), 100000000, 0, -156)], (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("runtime/convert.ml", 82, 2606, 2616), ("runtime/convert.ml", 82, 2606, 2623), 0), 0, Tag1 ("Refl__Convert", 283)), 0)]), 0, (("runtime/convert.ml", 65, 1940, 1940), ("runtime/convert.ml", 88, 2804, 2807), 0), Tag1 ("Refl__Convert", 298)), 0, 0); Tag1 (("converters", 1773), ([((("arity_a")), 100000000, 0, -102); ((("arity_b")), 100000000, 0, -103)], 2, Tag1 ([(("SameArity", 642), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("arity_a")), 100000000, 0, -102); ((("arity_b")), 100000000, 0, -103)], (0)), 100000000, 0, -101)]), 0, (("runtime/convert.ml", 91, 2848, 2850), ("runtime/convert.ml", 91, 2848, 2888), 0), 0, Tag1 ("Refl__Convert", 300)); (("Converters", 643), ([(Tag3 (Tag1 ((("Converters", 1772)), "t"), [((("arity_a")), 100000000, 0, -102); ((("arity_b")), 100000000, 0, -103)], (0)), 100000000, 0, -104)]), 0, (("runtime/convert.ml", 92, 2889, 2891), ("runtime/convert.ml", 92, 2889, 2940), 0), 0, Tag1 ("Refl__Convert", 301))], 0), 1, 0, [63; 63], [0; 0], 0, 0, (("runtime/convert.ml", 90, 2809, 2809), ("runtime/convert.ml", 92, 2889, 2940), 0), 0, 0, 0, Tag1 ("Refl__Convert", 299)), 1, 0); Tag1 (("make_variables", 1774), ([((("forall")), 100000000, 0, -98); ((("arity_a")), 100000000, 0, -99); ((("arity_b")), 100000000, 0, -100)], 3, Tag1 ([(("MakeVariables", 645), Tag1 ([(("subarity_a", 646), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("forall")), 100000000, 0, -90); ((("arity_a")), 100000000, 0, -91); ((("subarity_a")), 100000000, 0, -94)], (0)), 100000000, 0, -93), (("runtime/convert.ml", 96, 3016, 3024), ("runtime/convert.ml", 96, 3016, 3077), 0), 0, Tag1 ("Refl__Convert", 303)); (("subarity_b", 647), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "append"), [((("forall")), 100000000, 0, -90); ((("arity_b")), 100000000, 0, -92); ((("subarity_b")), 100000000, 0, -96)], (0)), 100000000, 0, -95), (("runtime/convert.ml", 97, 3078, 3086), ("runtime/convert.ml", 97, 3078, 3139), 0), 0, Tag1 ("Refl__Convert", 304)); (("converters", 648), 0, (Tag3 ((("converters", 1773)), [((("subarity_a")), 100000000, 0, -94); ((("subarity_b")), 100000000, 0, -96)], (0)), 100000000, 0, -97), (("runtime/convert.ml", 98, 3140, 3148), ("runtime/convert.ml", 98, 3140, 3198), 0), 0, Tag1 ("Refl__Convert", 305))]), ((Tag3 ((("make_variables", 1774)), [((("forall")), 100000000, 0, -90); ((("arity_a")), 100000000, 0, -91); ((("arity_b")), 100000000, 0, -92)], (0)), 100000000, 0, -89)), (("runtime/convert.ml", 95, 2994, 2996), ("runtime/convert.ml", 99, 3199, 3254), 0), 0, Tag1 ("Refl__Convert", 306))], 0), 1, 0, [63; 15; 15], [0; 0; 0], 0, 0, (("runtime/convert.ml", 94, 2942, 2942), ("runtime/convert.ml", 99, 3199, 3254), 0), 0, 0, 0, Tag1 ("Refl__Convert", 302)), 1, 0); (("reverse", 1775), ((Tag1 (0, (Tag3 ((("converters", 1773)), [((("arity_a")), 100000000, 0, -87); ((("arity_b")), 100000000, 0, -86)], (0)), 100000000, 0, -88), (Tag3 ((("converters", 1773)), [((("arity_b")), 100000000, 0, -86); ((("arity_a")), 100000000, 0, -87)], (0)), 100000000, 0, -85), 0), 100000000, 0, -84), 0, (("runtime/convert.ml", 101, 3256, 3260), ("runtime/convert.ml", 101, 3256, 3267), 0), 0, Tag1 ("Refl__Convert", 313)), 0); (("make_variables", 1776), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "length"), [((("count")), 100000000, 0, -83); ((("forall")), 100000000, 0, -78)], (0)), 100000000, 0, -82), (Tag1 (0, (Tag3 ((("converters", 1773)), [((("arity_a")), 100000000, 0, -79); ((("arity_b")), 100000000, 0, -80)], (0)), 100000000, 0, -81), (Tag3 ((("make_variables", 1774)), [((("forall")), 100000000, 0, -78); ((("arity_a")), 100000000, 0, -79); ((("arity_b")), 100000000, 0, -80)], (0)), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("runtime/convert.ml", 110, 3512, 3520), ("runtime/convert.ml", 110, 3512, 3534), 0), 0, Tag1 ("Refl__Convert", 319)), 0); (("convert", 1777), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("a_struct")), 100000000, 0, -52); ((("structure_a")), 100000000, 0, -69); ((("arity_a")), 100000000, 0, -59); ((("rec_group_a")), 100000000, 0, -70); ((("kinds_a")), 100000000, 0, -71); ((("positive_a")), 100000000, 0, -72); ((("negative_a")), 100000000, 0, -73); ((("direct_a")), 100000000, 0, -74); ((("gadt_a")), 100000000, 0, -56)], (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((("b_struct")), 100000000, 0, -53); ((("structure_b")), 100000000, 0, -62); ((("arity_b")), 100000000, 0, -60); ((("rec_group_b")), 100000000, 0, -63); ((("kinds_b")), 100000000, 0, -64); ((("positive_b")), 100000000, 0, -65); ((("negative_b")), 100000000, 0, -66); ((("direct_b")), 100000000, 0, -67); ((("gadt_b")), 100000000, 0, -57)], (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("converters", 1773)), [((("arity_a")), 100000000, 0, -59); ((("arity_b")), 100000000, 0, -60)], (0)), 100000000, 0, -58), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("gadt_a")), 100000000, 0, -56); ((("gadt_b")), 100000000, 0, -57)], (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 (Tag1 ((("Converter", 1771)), "t"), [((("a_struct")), 100000000, 0, -52); ((("b_struct")), 100000000, 0, -53)], (0)), 100000000, 0, -51), 0), 100000000, 0, -50), 0), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0, (("runtime/convert.ml", 131, 4244, 4252), ("runtime/convert.ml", 131, 4244, 4259), 0), 0, Tag1 ("Refl__Convert", 341)), 0); (("transfer", 1778), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("a")), 100000000, 0, -28); ((("structures_a")), 100000000, 0, -43); ((("arity_a")), 100000000, 0, -35); ((("rec_group_a")), 100000000, 0, -44); ((("kinds_a")), 100000000, 0, -45); ((("variables_a")), 100000000, 0, -46); ((("gadt_a")), 100000000, 0, -32)], (0)), 100000000, 0, -42), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "vector"), [((("b")), 100000000, 0, -29); ((("structures_b")), 100000000, 0, -38); ((("arity_b")), 100000000, 0, -36); ((("rec_group_b")), 100000000, 0, -39); ((("kinds_b")), 100000000, 0, -40); ((("variables_b")), 100000000, 0, -41); ((("gadt_b")), 100000000, 0, -33)], (0)), 100000000, 0, -37), (Tag1 (0, (Tag3 ((("converters", 1773)), [((("arity_a")), 100000000, 0, -35); ((("arity_b")), 100000000, 0, -36)], (0)), 100000000, 0, -34), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "eq"), [((("gadt_a")), 100000000, 0, -32); ((("gadt_b")), 100000000, 0, -33)], (0)), 100000000, 0, -31)], (0)), 100000000, 0, -30), (Tag3 (Tag1 ((("Converters", 1772)), "t"), [((("a")), 100000000, 0, -28); ((("b")), 100000000, 0, -29)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0), 100000000, 0, -25), 0), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("runtime/convert.ml", 462, 18108, 18112), ("runtime/convert.ml", 462, 18108, 18120), 0), 0, Tag1 ("Refl__Convert", 342)), 0); (("cast", 1779), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -6); ((0), 100000000, 0, -17); ((0), 100000000, 0, -9); ((0), 100000000, 0, -18); ((0), 100000000, 0, -19); ((0), 100000000, 0, -20); ((0), 100000000, 0, -21); ((0), 100000000, 0, -22); ((0), 100000000, 0, -15)], (0)), 100000000, 0, -16), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Refl__")), "Desc"), "desc"), [((0), 100000000, 0, -5); ((0), 100000000, 0, -8); ((0), 100000000, 0, -9); ((0), 100000000, 0, -10); ((0), 100000000, 0, -11); ((0), 100000000, 0, -12); ((0), 100000000, 0, -13); ((0), 100000000, 0, -14); ((0), 100000000, 0, -15)], (0)), 100000000, 0, -7), (Tag1 (0, ((0), 100000000, 0, -6), ((0), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("runtime/convert.ml", 484, 18950, 18954), ("runtime/convert.ml", 484, 18950, 18958), 0), 0, Tag1 ("Refl__Convert", 1237)), 0)], "Refl__Convert", [("Refl__Convert", ("\1441\157\139\143\018\003\200:\012kp\r\163\135\250")); ("Traverse__Values", ("}\239\001\023\024&\227\167Sl\002\148\026\190\180\025")); ("Traverse__Modules", ("=\175q\026#\242\139\b\202\252\139\207\195\170\254\202")); ("Traverse__Interface", ("\252\146\219\195\199\167\234\143+\145l\200\254\244s}")); ("Traverse__", ("y\220\011\221C%Ob7%t,\252N21")); ("Traverse", ("\019\209\190\177II\1552 \b\174\006\b\1643\152")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Stdcompat__stdlib_s", ("?\143\027\238\145\138\139e`\216P\248\156\178=\206")); ("Stdcompat__init", ("r\254q\255\217]\232\239'\192d\165\222\016\157\133")); ("Stdcompat", ("\139\1989\181:\137\230\132\240\223\206\210Y\135S\\")); ("Refl__Tools", ("i\215\207\166d\225\190DU\241\194\224\137P\158e")); ("Refl__Desc", ("\221\150mt\149.2\132\189\244\007\164&\203\225\172")); ("Refl__", ("i\003\196\150\161\159\229g\157\181\149\015g%\221\240")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])
('j, 'k, 'c, 'l, 'm, 'n, 'o, 'p, 'i) Refl__.Desc.desc -> 'a -> 'j

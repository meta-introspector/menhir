type token = Js_of_ocaml_compiler.Js_token.token
exception Error
val standalone_expression :
  (Lexing.lexbuf -> token) -> Lexing.lexbuf -> 'tv_standalone_expression
val program : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> 'tv_program
module MenhirInterpreter :
  sig
    type token = token/2
    type production
    type 'a env
    type 'a checkpoint = private
        InputNeeded of 'a env
      | Shifting of 'a env * 'a env * bool
      | AboutToReduce of 'a env * production
      | HandlingError of 'a env
      | Accepted of 'a
      | Rejected
    val offer :
      'a checkpoint ->
      token * MenhirLib.IncrementalEngine.position *
      MenhirLib.IncrementalEngine.position -> 'a checkpoint
    type strategy = [ `Legacy | `Simplified ]
    val resume : ?strategy:strategy -> 'a checkpoint -> 'a checkpoint
    type supplier =
        unit ->
        token * MenhirLib.IncrementalEngine.position *
        MenhirLib.IncrementalEngine.position
    val lexer_lexbuf_to_supplier :
      (Lexing.lexbuf -> token) -> Lexing.lexbuf -> supplier
    val loop : ?strategy:strategy -> supplier -> 'a checkpoint -> 'a
    val loop_handle :
      ('a -> 'answer) ->
      ('a checkpoint -> 'answer) -> supplier -> 'a checkpoint -> 'answer
    val loop_handle_undo :
      ('a -> 'answer) ->
      ('a checkpoint -> 'a checkpoint -> 'answer) ->
      supplier -> 'a checkpoint -> 'answer
    val shifts : 'a checkpoint -> 'a env option
    val acceptable :
      'a checkpoint -> token -> MenhirLib.IncrementalEngine.position -> bool
    type 'a lr1state
    val number : 'a lr1state -> int
    val production_index : production -> int
    val find_production : int -> production
    type element =
        Element : 'a lr1state * 'a * MenhirLib.IncrementalEngine.position *
          MenhirLib.IncrementalEngine.position -> element
    type stack = element MenhirLib.General.stream
    val stack : 'a env -> stack
    val top : 'a env -> element option
    val pop_many : int -> 'a env -> 'a env option
    val get : int -> 'a env -> element option
    val current_state_number : 'a env -> int
    val equal : 'a env -> 'a env -> bool
    val positions :
      'a env ->
      MenhirLib.IncrementalEngine.position *
      MenhirLib.IncrementalEngine.position
    val env_has_default_reduction : 'a env -> bool
    val state_has_default_reduction : 'a lr1state -> bool
    val pop : 'a env -> 'a env option
    val force_reduction : production -> 'a env -> 'a env
    val input_needed : 'a env -> 'a checkpoint
  end
module Incremental :
  sig
    val standalone_expression :
      Lexing.position ->
      'tv_standalone_expression MenhirInterpreter.checkpoint
    val program : Lexing.position -> 'tv_program MenhirInterpreter.checkpoint
  end("DEBUG:rule", [Tag1 (("token", 524), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Js_of_ocaml_compiler")), "Js_token"), "token"), 0, (0)), 100000000, 0, -16)), 0, 0, 0, 0, (("compiler/lib/js_parser.mli", 4, 28, 28), ("compiler/lib/js_parser.mli", 4, 28, 55), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 0)), 1, 0); Tag2 (("Error", 525), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 1)), 2, 0); (("standalone_expression", 526), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -15), (Tag3 ((("token", 524)), 0, (0)), 100000000, 0, -14), 0), 100000000, 0, -13), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -12), ((("tv_standalone_expression")), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("compiler/lib/js_parser.mli", 12, 166, 166), ("compiler/lib/js_parser.mli", 12, 166, 265), 0), 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 2)), 0); (("program", 527), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 ((("token", 524)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -5), ((("tv_program")), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/js_parser.mli", 14, 267, 267), ("compiler/lib/js_parser.mli", 14, 267, 338), 0), 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 3)), 0); Tag3 (("MenhirInterpreter", 528), 0, (Tag1 ([Tag1 (("token", 530), (0, 0, 0, 1, ((Tag3 ((("token", 524)), 0, (0)), 100000000, 0, -182)), 0, 0, 0, 0, (("compiler/lib/js_parser.mli", 21, 463, 472), ("compiler/lib/js_parser.mli", 21, 463, 490), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 4)), 1, 0); Tag1 (("production", 531), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 175, 7388, 7390), ("lib/pack/menhirLib.mli", 175, 7388, 7405), 0), 0, 0, 0, Tag1 ("MenhirLib", 21)), 1, 0); Tag1 (("env", 532), ([((("a")), 100000000, 0, -181)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/pack/menhirLib.mli", 214, 9397, 9399), ("lib/pack/menhirLib.mli", 214, 9397, 9410), 0), 0, 0, 0, Tag1 ("MenhirLib", 22)), 1, 0); Tag1 (("checkpoint", 533), ([((("a")), 100000000, 0, -174)], 1, Tag1 ([(("InputNeeded", 354), ([(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -173)]), 0, (("lib/pack/menhirLib.mli", 217, 9443, 9447), ("lib/pack/menhirLib.mli", 217, 9443, 9470), 0), 0, Tag1 ("MenhirLib", 24)); (("Shifting", 355), ([(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -175); (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -176); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -177)]), 0, (("lib/pack/menhirLib.mli", 218, 9471, 9475), ("lib/pack/menhirLib.mli", 218, 9471, 9511), 0), 0, Tag1 ("MenhirLib", 25)); (("AboutToReduce", 356), ([(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -178); (Tag3 ((("production", 531)), 0, (0)), 100000000, 0, -179)]), 0, (("lib/pack/menhirLib.mli", 219, 9512, 9516), ("lib/pack/menhirLib.mli", 219, 9512, 9554), 0), 0, Tag1 ("MenhirLib", 26)); (("HandlingError", 357), ([(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -174)], (0)), 100000000, 0, -180)]), 0, (("lib/pack/menhirLib.mli", 220, 9555, 9559), ("lib/pack/menhirLib.mli", 220, 9555, 9584), 0), 0, Tag1 ("MenhirLib", 27)); (("Accepted", 358), ([((("a")), 100000000, 0, -174)]), 0, (("lib/pack/menhirLib.mli", 221, 9585, 9589), ("lib/pack/menhirLib.mli", 221, 9585, 9605), 0), 0, Tag1 ("MenhirLib", 28)); (("Rejected", 359), (0), 0, (("lib/pack/menhirLib.mli", 222, 9606, 9610), ("lib/pack/menhirLib.mli", 222, 9606, 9620), 0), 0, Tag1 ("MenhirLib", 29))], 0), 0, 0, [31], [0], 0, 0, (("lib/pack/menhirLib.mli", 216, 9412, 9414), ("lib/pack/menhirLib.mli", 222, 9606, 9620), 0), 0, 0, 0, Tag1 ("MenhirLib", 23)), 1, 0); (("offer", 534), ((Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -167)], (0)), 100000000, 0, -172), (Tag1 (0, (Tag2 ([(Tag3 ((("token", 530)), 0, (0)), 100000000, 0, -169); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -170); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -171)]), 100000000, 0, -168), (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -167)], (0)), 100000000, 0, -166), 0), 100000000, 0, -165), 0), 100000000, 0, -164), 0, (("lib/pack/menhirLib.mli", 229, 9892, 9894), ("lib/pack/menhirLib.mli", 232, 9961, 9978), 0), 0, Tag1 ("MenhirLib", 30)), 0); Tag1 (("strategy", 535), (0, 0, 0, 1, ((Tag8 (([("Legacy", (0)); ("Simplified", (0))], (0, 100000000, 0, -163), 1, 0, 0)), 100000000, 0, -162)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 255, 11059, 11061), ("lib/pack/menhirLib.mli", 256, 11077, 11106), 0), 0, 1, 0, Tag1 ("MenhirLib", 31)), 1, 0); (("resume", 536), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 535)), 0, (0)), 100000000, 0, -161)], (0)), 100000000, 0, -160), (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -159), (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -158)], (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("lib/pack/menhirLib.mli", 258, 11108, 11110), ("lib/pack/menhirLib.mli", 261, 11169, 11186), 0), 0, Tag1 ("MenhirLib", 32)), 0); Tag1 (("supplier", 537), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -154), (Tag2 ([(Tag3 ((("token", 530)), 0, (0)), 100000000, 0, -151); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -152); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -153)]), 100000000, 0, -150), 0), 100000000, 0, -149)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 266, 11345, 11347), ("lib/pack/menhirLib.mli", 267, 11363, 11402), 0), 0, 0, 0, Tag1 ("MenhirLib", 33)), 1, 0); (("lexer_lexbuf_to_supplier", 538), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -148), (Tag3 ((("token", 530)), 0, (0)), 100000000, 0, -147), 0), 100000000, 0, -146), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -145), (Tag3 ((("supplier", 537)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0, (("lib/pack/menhirLib.mli", 272, 11494, 11496), ("lib/pack/menhirLib.mli", 275, 11579, 11591), 0), 0, Tag1 ("MenhirLib", 34)), 0); (("loop", 539), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 535)), 0, (0)), 100000000, 0, -141)], (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("supplier", 537)), 0, (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -137)], (0)), 100000000, 0, -138), ((("a")), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0, (("lib/pack/menhirLib.mli", 289, 12291, 12293), ("lib/pack/menhirLib.mli", 289, 12291, 12356), 0), 0, Tag1 ("MenhirLib", 35)), 0); (("loop_handle", 540), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -129), ((("answer")), 100000000, 0, -127), 0), 100000000, 0, -133), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -132), ((("answer")), 100000000, 0, -127), 0), 100000000, 0, -131), (Tag1 (0, (Tag3 ((("supplier", 537)), 0, (0)), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -129)], (0)), 100000000, 0, -128), ((("answer")), 100000000, 0, -127), 0), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0, (("lib/pack/menhirLib.mli", 303, 13060, 13062), ("lib/pack/menhirLib.mli", 306, 13136, 13176), 0), 0, Tag1 ("MenhirLib", 36)), 0); (("loop_handle_undo", 541), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -116), ((("answer")), 100000000, 0, -114), 0), 100000000, 0, -122), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -121), (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -120), ((("answer")), 100000000, 0, -114), 0), 100000000, 0, -119), 0), 100000000, 0, -118), (Tag1 (0, (Tag3 ((("supplier", 537)), 0, (0)), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -116)], (0)), 100000000, 0, -115), ((("answer")), 100000000, 0, -114), 0), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0, (("lib/pack/menhirLib.mli", 321, 13904, 13906), ("lib/pack/menhirLib.mli", 324, 14002, 14042), 0), 0, Tag1 ("MenhirLib", 37)), 0); (("shifts", 542), ((Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -109), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -108)], (0)), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0), 100000000, 0, -105), 0, (("lib/pack/menhirLib.mli", 337, 14641, 14643), ("lib/pack/menhirLib.mli", 337, 14641, 14685), 0), 0, Tag1 ("MenhirLib", 38)), 0); (("acceptable", 543), ((Tag1 (0, (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -104)], (0)), 100000000, 0, -103), (Tag1 (0, (Tag3 ((("token", 530)), 0, (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -101), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0, (("lib/pack/menhirLib.mli", 355, 15526, 15528), ("lib/pack/menhirLib.mli", 355, 15526, 15586), 0), 0, Tag1 ("MenhirLib", 39)), 0); Tag1 (("lr1state", 544), ([((("a")), 100000000, 0, -96)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/pack/menhirLib.mli", 361, 15799, 15801), ("lib/pack/menhirLib.mli", 361, 15799, 15817), 0), 0, 0, 0, Tag1 ("MenhirLib", 40)), 1, 0); (("number", 545), ((Tag1 (0, (Tag3 ((("lr1state", 544)), [((0), 100000000, 0, -95)], (0)), 100000000, 0, -94), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("lib/pack/menhirLib.mli", 365, 15892, 15894), ("lib/pack/menhirLib.mli", 365, 15892, 15923), 0), 0, Tag1 ("MenhirLib", 41)), 0); (("production_index", 546), ((Tag1 (0, (Tag3 ((("production", 531)), 0, (0)), 100000000, 0, -91), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89), 0, (("lib/pack/menhirLib.mli", 371, 16040, 16042), ("lib/pack/menhirLib.mli", 371, 16040, 16081), 0), 0, Tag1 ("MenhirLib", 42)), 0); (("find_production", 547), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -88), (Tag3 ((("production", 531)), 0, (0)), 100000000, 0, -87), 0), 100000000, 0, -86), 0, (("lib/pack/menhirLib.mli", 372, 16082, 16084), ("lib/pack/menhirLib.mli", 372, 16082, 16122), 0), 0, Tag1 ("MenhirLib", 43)), 0); Tag1 (("element", 548), (0, 0, Tag1 ([(("Element", 375), ([(Tag3 ((("lr1state", 544)), [((("a")), 100000000, 0, -83)], (0)), 100000000, 0, -82); ((("a")), 100000000, 0, -83); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -84); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -85)]), ((Tag3 ((("element", 548)), 0, (0)), 100000000, 0, -81)), (("lib/pack/menhirLib.mli", 381, 16541, 16545), ("lib/pack/menhirLib.mli", 381, 16541, 16605), 0), 0, Tag1 ("MenhirLib", 45))], 0), 1, 0, 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 380, 16524, 16526), ("lib/pack/menhirLib.mli", 381, 16541, 16605), 0), 0, 0, 0, Tag1 ("MenhirLib", 44)), 1, 0); Tag1 (("stack", 549), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "General"), "stream"), [(Tag3 ((("element", 548)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 390, 16985, 16987), ("lib/pack/menhirLib.mli", 391, 17017, 17035), 0), 0, 0, 0, Tag1 ("MenhirLib", 46)), 1, 0); (("stack", 550), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -78)], (0)), 100000000, 0, -77), (Tag3 ((("stack", 549)), 0, (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("lib/pack/menhirLib.mli", 398, 17285, 17287), ("lib/pack/menhirLib.mli", 398, 17285, 17313), 0), 0, Tag1 ("MenhirLib", 47)), 0); (("top", 551), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -74)], (0)), 100000000, 0, -73), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 548)), 0, (0)), 100000000, 0, -72)], (0)), 100000000, 0, -71), 0), 100000000, 0, -70), 0, (("lib/pack/menhirLib.mli", 405, 17605, 17607), ("lib/pack/menhirLib.mli", 405, 17605, 17640), 0), 0, Tag1 ("MenhirLib", 48)), 0); (("pop_many", 552), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -69), (Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -68), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -67)], (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("lib/pack/menhirLib.mli", 411, 17867, 17869), ("lib/pack/menhirLib.mli", 411, 17867, 17913), 0), 0, Tag1 ("MenhirLib", 49)), 0); (("get", 553), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -62), (Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -61)], (0)), 100000000, 0, -60), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 548)), 0, (0)), 100000000, 0, -59)], (0)), 100000000, 0, -58), 0), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("lib/pack/menhirLib.mli", 418, 18165, 18167), ("lib/pack/menhirLib.mli", 418, 18165, 18207), 0), 0, Tag1 ("MenhirLib", 50)), 0); (("current_state_number", 554), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -55)], (0)), 100000000, 0, -54), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -53), 0), 100000000, 0, -52), 0, (("lib/pack/menhirLib.mli", 426, 18532, 18534), ("lib/pack/menhirLib.mli", 426, 18532, 18573), 0), 0, Tag1 ("MenhirLib", 51)), 0); (("equal", 555), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -51), (Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -50)], (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("lib/pack/menhirLib.mli", 437, 19158, 19160), ("lib/pack/menhirLib.mli", 437, 19158, 19195), 0), 0, Tag1 ("MenhirLib", 52)), 0); (("positions", 556), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -45)], (0)), 100000000, 0, -44), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -42); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -43)]), 100000000, 0, -41), 0), 100000000, 0, -40), 0, (("lib/pack/menhirLib.mli", 443, 19378, 19380), ("lib/pack/menhirLib.mli", 443, 19378, 19424), 0), 0, Tag1 ("MenhirLib", 53)), 0); (("env_has_default_reduction", 557), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -39)], (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("lib/pack/menhirLib.mli", 450, 19667, 19669), ("lib/pack/menhirLib.mli", 450, 19667, 19714), 0), 0, Tag1 ("MenhirLib", 54)), 0); (("state_has_default_reduction", 558), ((Tag1 (0, (Tag3 ((("lr1state", 544)), [((0), 100000000, 0, -35)], (0)), 100000000, 0, -34), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0, (("lib/pack/menhirLib.mli", 455, 19871, 19873), ("lib/pack/menhirLib.mli", 455, 19871, 19924), 0), 0, Tag1 ("MenhirLib", 55)), 0); (("pop", 559), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -31), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 532)), [((("a")), 100000000, 0, -30)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28), 0), 100000000, 0, -27), 0, (("lib/pack/menhirLib.mli", 462, 20211, 20213), ("lib/pack/menhirLib.mli", 462, 20211, 20245), 0), 0, Tag1 ("MenhirLib", 56)), 0); (("force_reduction", 560), ((Tag1 (0, (Tag3 ((("production", 531)), 0, (0)), 100000000, 0, -26), (Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -25), (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -24)], (0)), 100000000, 0, -23), 0), 100000000, 0, -22), 0), 100000000, 0, -21), 0, (("lib/pack/menhirLib.mli", 471, 20678, 20680), ("lib/pack/menhirLib.mli", 471, 20678, 20731), 0), 0, Tag1 ("MenhirLib", 57)), 0); (("input_needed", 561), ((Tag1 (0, (Tag3 ((("env", 532)), [((("a")), 100000000, 0, -19)], (0)), 100000000, 0, -20), (Tag3 ((("checkpoint", 533)), [((("a")), 100000000, 0, -19)], (0)), 100000000, 0, -18), 0), 100000000, 0, -17), 0, (("lib/pack/menhirLib.mli", 487, 21595, 21597), ("lib/pack/menhirLib.mli", 487, 21595, 21638), 0), 0, Tag1 ("MenhirLib", 58)), 0)]), 0, (("compiler/lib/js_parser.mli", 16, 340, 340), ("compiler/lib/js_parser.mli", 23, 494, 497), 0), Tag1 ("Js_of_ocaml_compiler__Js_parser", 5)), 0, 0); Tag3 (("Incremental", 529), 0, (Tag1 ([(("standalone_expression", 562), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -190), (Tag3 (Tag1 ((("MenhirInterpreter", 528)), "checkpoint"), [((("tv_standalone_expression")), 100000000, 0, -189)], (0)), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("compiler/lib/js_parser.mli", 29, 577, 579), ("compiler/lib/js_parser.mli", 29, 577, 681), 0), 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 6)), 0); (("program", 563), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -186), (Tag3 (Tag1 ((("MenhirInterpreter", 528)), "checkpoint"), [((("tv_program")), 100000000, 0, -185)], (0)), 100000000, 0, -184), 0), 100000000, 0, -183), 0, (("compiler/lib/js_parser.mli", 31, 685, 687), ("compiler/lib/js_parser.mli", 31, 685, 761), 0), 0, Tag1 ("Js_of_ocaml_compiler__Js_parser", 7)), 0)]), 0, (("compiler/lib/js_parser.mli", 27, 549, 549), ("compiler/lib/js_parser.mli", 33, 765, 768), 0), Tag1 ("Js_of_ocaml_compiler__Js_parser", 8)), 0, 0)], "Js_of_ocaml_compiler__Js_parser", [("Js_of_ocaml_compiler__Js_parser", ("\2492Q\168\143\142\018JCw+L{\174\236\210")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Fun", ("\234t\181\000iQ\251,\b\020$\224\233\160\142\210")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Filename", ("z\163\210n\195\247\255\129\029SI\180\152\141h ")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Char", ("\1794\1468\190\138\150g\231\240\140d\191.\212e")); ("Stdlib__BytesLabels", ("\145\128\000\239\186Z.\0310^\247\201\174\\\137R")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__ArrayLabels", ("\029\143d\025\218v\003\007\212jC\235/\205\006\198")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("MenhirLib", ("A#\208S1j\151sK\211\012r3\r\022\150")); ("Js_of_ocaml_compiler__Stdlib", ("\162;P\232\137\003\012\252\217E\227\201\001\204\163j")); ("Js_of_ocaml_compiler__Primitive", ("\131\186\144\175\240\170t#\016p\219\012\\\020\211b")); ("Js_of_ocaml_compiler__Js_token", ("x\209\213\210\201\210\166u\150\014\024\249Q\184\161\216")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])


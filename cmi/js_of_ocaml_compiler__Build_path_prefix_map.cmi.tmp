type path = string
type path_prefix = string
type error_message = string
type ('a, 'b) result = Ok of 'a | Error of 'b
val encode_prefix : path_prefix -> string
val decode_prefix : string -> (path_prefix, error_message) result
type pair = { target : path_prefix; source : path_prefix; }
val encode_pair : pair -> string
val decode_pair : string -> (pair, error_message) result
type map = pair option list
val encode_map : map -> string
val decode_map : string -> (map, error_message) result
val rewrite_opt : map -> path -> path option
val rewrite : map -> path -> path
val flip : map -> map("DEBUG:rule", [Tag1 (("path", 356), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -53)), 0, 0, 0, 0, (("compiler/lib/build_path_prefix_map.mli", 23, 1213, 1213), ("compiler/lib/build_path_prefix_map.mli", 23, 1213, 1231), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 0)), 1, 0); Tag1 (("path_prefix", 357), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -52)), 0, 0, 0, 0, (("compiler/lib/build_path_prefix_map.mli", 25, 1233, 1233), ("compiler/lib/build_path_prefix_map.mli", 25, 1233, 1258), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 1)), 1, 0); Tag1 (("error_message", 358), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -51)), 0, 0, 0, 0, (("compiler/lib/build_path_prefix_map.mli", 27, 1260, 1260), ("compiler/lib/build_path_prefix_map.mli", 27, 1260, 1287), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 2)), 1, 0); Tag1 (("result", 359), ([((("a")), 100000000, 0, -49); ((("b")), 100000000, 0, -50)], 2, Tag1 ([(("Ok", 340), ([((("a")), 100000000, 0, -49)]), 0, (("compiler/lib/build_path_prefix_map.mli", 30, 1312, 1314), ("compiler/lib/build_path_prefix_map.mli", 30, 1312, 1324), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 4)); (("Error", 341), ([((("b")), 100000000, 0, -50)]), 0, (("compiler/lib/build_path_prefix_map.mli", 31, 1325, 1327), ("compiler/lib/build_path_prefix_map.mli", 31, 1325, 1340), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 5))], 0), 1, 0, [25; 25], [0; 0], 0, 0, (("compiler/lib/build_path_prefix_map.mli", 29, 1289, 1289), ("compiler/lib/build_path_prefix_map.mli", 31, 1325, 1340), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 3)), 1, 0); (("encode_prefix", 360), ((Tag1 (0, (Tag3 ((("path_prefix", 357)), 0, (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0, (("compiler/lib/build_path_prefix_map.mli", 33, 1342, 1342), ("compiler/lib/build_path_prefix_map.mli", 33, 1342, 1383), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 6)), 0); (("decode_prefix", 361), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -45), (Tag3 ((("result", 359)), [(Tag3 ((("path_prefix", 357)), 0, (0)), 100000000, 0, -43); (Tag3 ((("error_message", 358)), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("compiler/lib/build_path_prefix_map.mli", 35, 1385, 1385), ("compiler/lib/build_path_prefix_map.mli", 35, 1385, 1450), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 7)), 0); Tag1 (("pair", 362), (0, 0, [[(("target", 345), 0, (Tag3 ((("path_prefix", 357)), 0, (0)), 100000000, 0, -39), (("compiler/lib/build_path_prefix_map.mli", 38, 1464, 1468), ("compiler/lib/build_path_prefix_map.mli", 39, 1489, 1492), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 9)); (("source", 346), 0, (Tag3 ((("path_prefix", 357)), 0, (0)), 100000000, 0, -40), (("compiler/lib/build_path_prefix_map.mli", 39, 1489, 1493), ("compiler/lib/build_path_prefix_map.mli", 39, 1489, 1513), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 10))]], 1, 0, 0, 0, 0, 0, (("compiler/lib/build_path_prefix_map.mli", 37, 1452, 1452), ("compiler/lib/build_path_prefix_map.mli", 40, 1514, 1517), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 8)), 1, 0); (("encode_pair", 363), ((Tag1 (0, (Tag3 ((("pair", 362)), 0, (0)), 100000000, 0, -38), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("compiler/lib/build_path_prefix_map.mli", 42, 1519, 1519), ("compiler/lib/build_path_prefix_map.mli", 42, 1519, 1551), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 11)), 0); (("decode_pair", 364), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -35), (Tag3 ((("result", 359)), [(Tag3 ((("pair", 362)), 0, (0)), 100000000, 0, -33); (Tag3 ((("error_message", 358)), 0, (0)), 100000000, 0, -34)], (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("compiler/lib/build_path_prefix_map.mli", 44, 1553, 1553), ("compiler/lib/build_path_prefix_map.mli", 44, 1553, 1609), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 12)), 0); Tag1 (("map", 365), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("pair", 362)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29)], (0)), 100000000, 0, -28)), 0, 0, 0, 0, (("compiler/lib/build_path_prefix_map.mli", 46, 1611, 1611), ("compiler/lib/build_path_prefix_map.mli", 46, 1611, 1638), 0), 0, 0, 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 13)), 1, 0); (("encode_map", 366), ((Tag1 (0, (Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -27), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -26), 0), 100000000, 0, -25), 0, (("compiler/lib/build_path_prefix_map.mli", 48, 1640, 1640), ("compiler/lib/build_path_prefix_map.mli", 48, 1640, 1670), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 14)), 0); (("decode_map", 367), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -24), (Tag3 ((("result", 359)), [(Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -22); (Tag3 ((("error_message", 358)), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("compiler/lib/build_path_prefix_map.mli", 50, 1672, 1672), ("compiler/lib/build_path_prefix_map.mli", 50, 1672, 1726), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 15)), 0); (("rewrite_opt", 368), ((Tag1 (0, (Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 ((("path", 356)), 0, (0)), 100000000, 0, -18), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("path", 356)), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("compiler/lib/build_path_prefix_map.mli", 52, 1728, 1728), ("compiler/lib/build_path_prefix_map.mli", 52, 1728, 1772), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 16)), 0); (("rewrite", 369), ((Tag1 (0, (Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag3 ((("path", 356)), 0, (0)), 100000000, 0, -12), (Tag3 ((("path", 356)), 0, (0)), 100000000, 0, -11), 0), 100000000, 0, -10), 0), 100000000, 0, -9), 0, (("compiler/lib/build_path_prefix_map.mli", 58, 1994, 1994), ("compiler/lib/build_path_prefix_map.mli", 58, 1994, 2027), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 17)), 0); (("flip", 370), ((Tag1 (0, (Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -8), (Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), 0, (("compiler/lib/build_path_prefix_map.mli", 60, 2029, 2029), ("compiler/lib/build_path_prefix_map.mli", 60, 2029, 2050), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 18)), 0); (("get_build_path_prefix_map", 371), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -5), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("map", 365)), 0, (0)), 100000000, 0, -4)], (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("compiler/lib/build_path_prefix_map.mli", 62, 2052, 2052), ("compiler/lib/build_path_prefix_map.mli", 62, 2052, 2102), 0), 0, Tag1 ("Js_of_ocaml_compiler__Build_path_prefix_map", 19)), 0)], "Js_of_ocaml_compiler__Build_path_prefix_map", [("Js_of_ocaml_compiler__Build_path_prefix_map", ("\142\011\162\169\143\154\255\207\182\248\030\232\185\1557-")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Js_of_ocaml_compiler", ("\140\150\022\231\129$!^\139\156\170\236r\184~q")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

val get_build_path_prefix_map : unit -> map option

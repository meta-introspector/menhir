module Make :
  functor (M : Vendored_fix__.Sigs.IMPERATIVE_MAPS) ->
    sig
      type t = M.key
      val encode : t -> int
      val current : unit -> int
      val has_been_encoded : t -> bool
      module Done :
        functor () ->
          sig
            type t = t/2
            val n : int
            val encode : t -> int
            val decode : int -> t
          end
    end
module ForOrderedType :
  functor (T : Vendored_fix__.Sigs.OrderedType) ->
    sig
      type t = T.t
      val encode : t -> int
      val current : unit -> int
      val has_been_encoded : t -> bool
      module Done :
        functor () ->
          sig
            type t = t/2
            val n : int
            val encode : t -> int
            val decode : int -> t
          end
    end
module ForHashedType :
  functor (T : Vendored_fix__.Sigs.HashedType) ->
    sig
      type t = T.t
      val encode : t -> int
      val current : unit -> int
      val has_been_encoded : t -> bool
      module Done :
        functor () ->
          sig
            type t = t/2
            val n : int
            val encode : t -> int
            val decode : int -> t
          end
    end
module ForType :
  functor (T : Vendored_fix__.Sigs.TYPE) ->
    sig
      type t = T.t
      val encode : t -> int
      val current : unit -> int
      val has_been_encoded : t -> bool
      module Done :
        functor () ->
          sig
            type t = t/2
            val n : int
            val encode : t -> int
            val decode : int -> t
          end("DEBUG:rule", [Tag3 (("Make", 508), 0, (Tag2 (((("M", 515)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "IMPERATIVE_MAPS"))), Tag1 ([Tag1 (("t", 516), (0, 0, 0, 1, ((Tag3 (Tag1 ((("M", 515)), "key"), 0, (0)), 100000000, 0, -11)), 0, 0, 0, 0, (("fix/src/Numbering.mli", 27, 1480, 1512), ("fix/src/Numbering.mli", 27, 1480, 1526), 0), 0, 0, 0, Tag1 ("Vendored_fix__Numbering", 1)), 1, 0); (("encode", 517), ((Tag1 (0, (Tag3 ((("t", 516)), 0, (0)), 100000000, 0, -10), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9), 0), 100000000, 0, -8), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 518), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 519), ((Tag1 (0, (Tag3 ((("t", 516)), 0, (0)), 100000000, 0, -4), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0); Tag3 (("Done", 520), 0, (Tag2 (0, Tag1 ([Tag1 (("t", 521), (0, 0, 0, 1, ((Tag3 ((("t", 516)), 0, (0)), 100000000, 0, -19)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 321, 11625, 11659), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 78)), 1, 0); (("n", 522), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -18), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 523), ((Tag1 (0, (Tag3 ((("t", 521)), 0, (0)), 100000000, 0, -17), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 524), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -14), (Tag3 ((("t", 521)), 0, (0)), 100000000, 0, -13), 0), 100000000, 0, -12), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 321, 11625, 11627), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), Tag1 ("Vendored_fix__Sigs", 79)), 0, 0)])), 0, (("fix/src/Numbering.mli", 25, 1444, 1444), ("fix/src/Numbering.mli", 27, 1480, 1526), 0), Tag1 ("Vendored_fix__Numbering", 2)), 0, 0); Tag3 (("ForOrderedType", 509), 0, (Tag2 (((("T", 514)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "OrderedType"))), Tag1 ([Tag1 (("t", 525), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 514)), "t"), 0, (0)), 100000000, 0, -29)), 0, 0, 0, 0, (("fix/src/Numbering.mli", 34, 1667, 1699), ("fix/src/Numbering.mli", 34, 1667, 1711), 0), 0, 0, 0, Tag1 ("Vendored_fix__Numbering", 4)), 1, 0); (("encode", 526), ((Tag1 (0, (Tag3 ((("t", 525)), 0, (0)), 100000000, 0, -28), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 527), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24), 0), 100000000, 0, -23), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 528), ((Tag1 (0, (Tag3 ((("t", 525)), 0, (0)), 100000000, 0, -22), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0); Tag3 (("Done", 529), 0, (Tag2 (0, Tag1 ([Tag1 (("t", 530), (0, 0, 0, 1, ((Tag3 ((("t", 525)), 0, (0)), 100000000, 0, -37)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 321, 11625, 11659), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 78)), 1, 0); (("n", 531), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -36), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 532), ((Tag1 (0, (Tag3 ((("t", 530)), 0, (0)), 100000000, 0, -35), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -34), 0), 100000000, 0, -33), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 533), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -32), (Tag3 ((("t", 530)), 0, (0)), 100000000, 0, -31), 0), 100000000, 0, -30), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 321, 11625, 11627), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), Tag1 ("Vendored_fix__Sigs", 79)), 0, 0)])), 0, (("fix/src/Numbering.mli", 32, 1625, 1625), ("fix/src/Numbering.mli", 34, 1667, 1711), 0), Tag1 ("Vendored_fix__Numbering", 5)), 0, 0); Tag3 (("ForHashedType", 510), 0, (Tag2 (((("T", 513)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "HashedType"))), Tag1 ([Tag1 (("t", 534), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 513)), "t"), 0, (0)), 100000000, 0, -47)), 0, 0, 0, 0, (("fix/src/Numbering.mli", 41, 1848, 1880), ("fix/src/Numbering.mli", 41, 1848, 1892), 0), 0, 0, 0, Tag1 ("Vendored_fix__Numbering", 7)), 1, 0); (("encode", 535), ((Tag1 (0, (Tag3 ((("t", 534)), 0, (0)), 100000000, 0, -46), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 536), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -42), 0), 100000000, 0, -41), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 537), ((Tag1 (0, (Tag3 ((("t", 534)), 0, (0)), 100000000, 0, -40), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -39), 0), 100000000, 0, -38), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0); Tag3 (("Done", 538), 0, (Tag2 (0, Tag1 ([Tag1 (("t", 539), (0, 0, 0, 1, ((Tag3 ((("t", 534)), 0, (0)), 100000000, 0, -55)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 321, 11625, 11659), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 78)), 1, 0); (("n", 540), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -54), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 541), ((Tag1 (0, (Tag3 ((("t", 539)), 0, (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 542), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -50), (Tag3 ((("t", 539)), 0, (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 321, 11625, 11627), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), Tag1 ("Vendored_fix__Sigs", 79)), 0, 0)])), 0, (("fix/src/Numbering.mli", 39, 1808, 1808), ("fix/src/Numbering.mli", 41, 1848, 1892), 0), Tag1 ("Vendored_fix__Numbering", 8)), 0, 0); Tag3 (("ForType", 511), 0, (Tag2 (((("T", 512)), (Tag1 (Tag1 ((Tag2 ("Vendored_fix__")), "Sigs"), "TYPE"))), Tag1 ([Tag1 (("t", 543), (0, 0, 0, 1, ((Tag3 (Tag1 ((("T", 512)), "t"), 0, (0)), 100000000, 0, -65)), 0, 0, 0, 0, (("fix/src/Numbering.mli", 48, 2069, 2101), ("fix/src/Numbering.mli", 48, 2069, 2113), 0), 0, 0, 0, Tag1 ("Vendored_fix__Numbering", 10)), 1, 0); (("encode", 544), ((Tag1 (0, (Tag3 ((("t", 543)), 0, (0)), 100000000, 0, -64), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("fix/src/Sigs.ml", 296, 10733, 10735), ("fix/src/Sigs.ml", 296, 10733, 10755), 0), 0, Tag1 ("Vendored_fix__Sigs", 69)), 0); (("current", 545), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -61), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -60), 0), 100000000, 0, -59), 0, (("fix/src/Sigs.ml", 297, 10756, 10758), ("fix/src/Sigs.ml", 297, 10756, 10782), 0), 0, Tag1 ("Vendored_fix__Sigs", 70)), 0); (("has_been_encoded", 546), ((Tag1 (0, (Tag3 ((("t", 543)), 0, (0)), 100000000, 0, -58), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0, (("fix/src/Sigs.ml", 298, 10783, 10785), ("fix/src/Sigs.ml", 298, 10783, 10816), 0), 0, Tag1 ("Vendored_fix__Sigs", 71)), 0); Tag3 (("Done", 547), 0, (Tag2 (0, Tag1 ([Tag1 (("t", 548), (0, 0, 0, 1, ((Tag3 ((("t", 543)), 0, (0)), 100000000, 0, -73)), 0, 0, 0, 0, (("fix/src/Sigs.ml", 321, 11625, 11659), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), 0, 0, 0, Tag1 ("Vendored_fix__Sigs", 78)), 1, 0); (("n", 549), ((Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -72), 0, (("fix/src/Sigs.ml", 307, 11068, 11070), ("fix/src/Sigs.ml", 307, 11068, 11080), 0), 0, Tag1 ("Vendored_fix__Sigs", 74)), 0); (("encode", 550), ((Tag1 (0, (Tag3 ((("t", 548)), 0, (0)), 100000000, 0, -71), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("fix/src/Sigs.ml", 308, 11081, 11083), ("fix/src/Sigs.ml", 308, 11081, 11103), 0), 0, Tag1 ("Vendored_fix__Sigs", 75)), 0); (("decode", 551), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (Tag3 ((("t", 548)), 0, (0)), 100000000, 0, -67), 0), 100000000, 0, -66), 0, (("fix/src/Sigs.ml", 309, 11104, 11106), ("fix/src/Sigs.ml", 309, 11104, 11126), 0), 0, Tag1 ("Vendored_fix__Sigs", 76)), 0)])), 0, (("fix/src/Sigs.ml", 321, 11625, 11627), ("fix/src/Sigs.ml", 321, 11625, 11669), 0), Tag1 ("Vendored_fix__Sigs", 79)), 0, 0)])), 0, (("fix/src/Numbering.mli", 46, 2041, 2041), ("fix/src/Numbering.mli", 48, 2069, 2113), 0), Tag1 ("Vendored_fix__Numbering", 11)), 0, 0)], "Vendored_fix__Numbering", [("Vendored_fix__Numbering", ("\199Q\188\248\233?a\193-\018\206\026\139#\029\214")); ("Vendored_fix__Sigs", ("a{\193\210\184\138\163\252\132\135.\2156meu")); ("Vendored_fix__", ("\r\196g\002\180\221\139\252\200\240t\184\171.K\020")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174"))], [(0)])

    end

val is_quantified_hypothesis : Names.Id.t -> Proofview.Goal.t -> bool
val introduction : Names.Id.t -> unit Proofview.tactic
val convert_concl :
  cast:bool ->
  check:bool -> EConstr.types -> Constr.cast_kind -> unit Proofview.tactic
val convert_hyp :
  check:bool ->
  reorder:bool -> EConstr.named_declaration -> unit Proofview.tactic
val mutual_fix :
  Names.Id.t ->
  int ->
  (Names.Id.t * int * EConstr.constr) list -> int -> unit Proofview.tactic
val fix : Names.Id.t -> int -> unit Proofview.tactic
val mutual_cofix :
  Names.Id.t ->
  (Names.Id.t * EConstr.constr) list -> int -> unit Proofview.tactic
val cofix : Names.Id.t -> unit Proofview.tactic
val convert : EConstr.constr -> EConstr.constr -> unit Proofview.tactic
val convert_leq : EConstr.constr -> EConstr.constr -> unit Proofview.tactic
val fresh_id_in_env :
  Names.Id.Set.t -> Names.Id.t -> Environ.env -> Names.Id.t
val find_intro_names :
  Environ.env -> Evd.evar_map -> EConstr.rel_context -> Names.Id.t list
val intro : unit Proofview.tactic
val introf : unit Proofview.tactic
val intro_move :
  Names.Id.t option ->
  Names.Id.t Logic.move_location -> unit Proofview.tactic
val intro_move_avoid :
  Names.Id.t option ->
  Names.Id.Set.t -> Names.Id.t Logic.move_location -> unit Proofview.tactic
val intro_avoiding : Names.Id.Set.t -> unit Proofview.tactic
val intro_replacing : Names.Id.t -> unit Proofview.tactic
val intro_using : Names.Id.t -> unit Proofview.tactic
val intro_using_then :
  Names.Id.t ->
  (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val intro_mustbe_force : Names.Id.t -> unit Proofview.tactic
val intros_mustbe_force : Names.Id.t list -> unit Proofview.tactic
val intro_then :
  (Names.Id.t -> unit Proofview.tactic) -> unit Proofview.tactic
val intros_using : Names.Id.t list -> unit Proofview.tactic
val intros_using_then :
  Names.Id.t list ->
  (Names.Id.t list -> unit Proofview.tactic) -> unit Proofview.tactic
val intros_replacing : Names.Id.t list -> unit Proofview.tactic
val intros_possibly_replacing : Names.Id.t list -> unit Proofview.tactic
val auto_intros_tac : Names.Name.t list -> unit Proofview.tactic
val intros : unit Proofview.tactic
val intros_until : Tactypes.quantified_hypothesis -> unit Proofview.tactic
val intros_clearing : bool list -> unit Proofview.tactic
val try_intros_until :
  (Names.Id.t -> unit Proofview.tactic) ->
  Tactypes.quantified_hypothesis -> unit Proofview.tactic
type evars_flag = bool
type rec_flag = bool
type advanced_flag = bool
type clear_flag = bool option
type 'a core_destruction_arg =
    ElimOnConstr of 'a
  | ElimOnIdent of Names.lident
  | ElimOnAnonHyp of int
type 'a destruction_arg = clear_flag * 'a core_destruction_arg
val onInductionArg :
  (clear_flag ->
   EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic) ->
  EConstr.constr Tactypes.with_bindings destruction_arg ->
  unit Proofview.tactic
val force_destruction_arg :
  evars_flag ->
  Environ.env ->
  Evd.evar_map ->
  Tactypes.delayed_open_constr_with_bindings destruction_arg ->
  Evd.evar_map * EConstr.constr Tactypes.with_bindings destruction_arg
val finish_evar_resolution :
  ?flags:Pretyping.inference_flags ->
  Environ.env ->
  Evd.evar_map ->
  Evd.evar_map option * EConstr.constr -> Evd.evar_map * EConstr.constr
val use_clear_hyp_by_default : unit -> bool
val intro_patterns :
  evars_flag -> Tactypes.intro_patterns -> unit Proofview.tactic
val intro_patterns_to :
  evars_flag ->
  Names.Id.t Logic.move_location ->
  Tactypes.intro_patterns -> unit Proofview.tactic
val intro_patterns_bound_to :
  evars_flag ->
  int ->
  Names.Id.t Logic.move_location ->
  Tactypes.intro_patterns -> unit Proofview.tactic
val intro_pattern_to :
  evars_flag ->
  Names.Id.t Logic.move_location ->
  Tactypes.delayed_open_constr Tactypes.intro_pattern_expr ->
  unit Proofview.tactic
val intros_patterns :
  evars_flag -> Tactypes.intro_patterns -> unit Proofview.tactic
val assumption : unit Proofview.tactic
val exact_no_check : EConstr.constr -> unit Proofview.tactic
val vm_cast_no_check : EConstr.constr -> unit Proofview.tactic
val native_cast_no_check : EConstr.constr -> unit Proofview.tactic
val exact_check : EConstr.constr -> unit Proofview.tactic
val exact_proof : Constrexpr.constr_expr -> unit Proofview.tactic
type tactic_reduction = Reductionops.reduction_function
type e_tactic_reduction = Reductionops.e_reduction_function
type change_arg =
    Ltac_pretype.patvar_map ->
    Environ.env -> Evd.evar_map -> Evd.evar_map * EConstr.constr
val make_change_arg : EConstr.constr -> change_arg
val reduct_in_hyp :
  check:bool ->
  reorder:bool ->
  tactic_reduction -> Locus.hyp_location -> unit Proofview.tactic
val reduct_option :
  check:bool ->
  tactic_reduction * Constr.cast_kind ->
  Locus.goal_location -> unit Proofview.tactic
val reduct_in_concl :
  cast:bool ->
  check:bool -> tactic_reduction * Constr.cast_kind -> unit Proofview.tactic
val e_reduct_in_concl :
  cast:bool ->
  check:bool ->
  e_tactic_reduction * Constr.cast_kind -> unit Proofview.tactic
val change_in_concl :
  check:bool ->
  (Locus.occurrences * Pattern.constr_pattern) option ->
  change_arg -> unit Proofview.tactic
val change_concl : EConstr.constr -> unit Proofview.tactic
val change_in_hyp :
  check:bool ->
  (Locus.occurrences * Pattern.constr_pattern) option ->
  change_arg -> Locus.hyp_location -> unit Proofview.tactic
val red_in_concl : unit Proofview.tactic
val red_in_hyp : Locus.hyp_location -> unit Proofview.tactic
val red_option : Locus.goal_location -> unit Proofview.tactic
val hnf_in_concl : unit Proofview.tactic
val hnf_in_hyp : Locus.hyp_location -> unit Proofview.tactic
val hnf_option : Locus.goal_location -> unit Proofview.tactic
val simpl_in_concl : unit Proofview.tactic
val simpl_in_hyp : Locus.hyp_location -> unit Proofview.tactic
val simpl_option : Locus.goal_location -> unit Proofview.tactic
val normalise_in_concl : unit Proofview.tactic
val normalise_in_hyp : Locus.hyp_location -> unit Proofview.tactic
val normalise_option : Locus.goal_location -> unit Proofview.tactic
val normalise_vm_in_concl : unit Proofview.tactic
val unfold_in_concl :
  (Locus.occurrences * Tacred.evaluable_global_reference) list ->
  unit Proofview.tactic
val unfold_in_hyp :
  (Locus.occurrences * Tacred.evaluable_global_reference) list ->
  Locus.hyp_location -> unit Proofview.tactic
val unfold_option :
  (Locus.occurrences * Tacred.evaluable_global_reference) list ->
  Locus.goal_location -> unit Proofview.tactic
val change :
  check:bool ->
  Pattern.constr_pattern option ->
  change_arg -> Locus.clause -> unit Proofview.tactic
val pattern_option :
  (Locus.occurrences * EConstr.constr) list ->
  Locus.goal_location -> unit Proofview.tactic
val reduce : Redexpr.red_expr -> Locus.clause -> unit Proofview.tactic
val unfold_constr : Names.GlobRef.t -> unit Proofview.tactic
val clear : Names.Id.t list -> unit Proofview.tactic
val clear_body : Names.Id.t list -> unit Proofview.tactic
val unfold_body : Names.Id.t -> unit Proofview.tactic
val keep : Names.Id.t list -> unit Proofview.tactic
val apply_clear_request :
  clear_flag -> bool -> Names.Id.t option -> unit Proofview.tactic
val specialize :
  EConstr.constr Tactypes.with_bindings ->
  Tactypes.intro_pattern option -> unit Proofview.tactic
val move_hyp :
  Names.Id.t -> Names.Id.t Logic.move_location -> unit Proofview.tactic
val rename_hyp : (Names.Id.t * Names.Id.t) list -> unit Proofview.tactic
val revert : Names.Id.t list -> unit Proofview.tactic
val apply_type :
  typecheck:bool ->
  EConstr.constr -> EConstr.constr list -> unit Proofview.tactic
val bring_hyps : EConstr.named_context -> unit Proofview.tactic
val apply : EConstr.constr -> unit Proofview.tactic
val eapply : ?with_classes:bool -> EConstr.constr -> unit Proofview.tactic
val apply_with_bindings_gen :
  ?with_classes:bool ->
  advanced_flag ->
  evars_flag ->
  (clear_flag * EConstr.constr Tactypes.with_bindings CAst.t) list ->
  unit Proofview.tactic
val apply_with_delayed_bindings_gen :
  advanced_flag ->
  evars_flag ->
  (clear_flag * Tactypes.delayed_open_constr_with_bindings CAst.t) list ->
  unit Proofview.tactic
val apply_with_bindings :
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val eapply_with_bindings :
  ?with_classes:bool ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val cut_and_apply : EConstr.constr -> unit Proofview.tactic
val apply_in :
  advanced_flag ->
  evars_flag ->
  Names.Id.t ->
  (clear_flag * EConstr.constr Tactypes.with_bindings CAst.t) list ->
  Tactypes.intro_pattern option -> unit Proofview.tactic
val apply_delayed_in :
  advanced_flag ->
  evars_flag ->
  Names.Id.t ->
  (clear_flag * Tactypes.delayed_open_constr_with_bindings CAst.t) list ->
  Tactypes.intro_pattern option ->
  unit Proofview.tactic -> unit Proofview.tactic
type elim_scheme = {
  elimt : EConstr.types;
  indref : Names.GlobRef.t option;
  params : EConstr.rel_context;
  nparams : int;
  predicates : EConstr.rel_context;
  npredicates : int;
  branches : EConstr.rel_context;
  nbranches : int;
  args : EConstr.rel_context;
  nargs : int;
  indarg : EConstr.rel_declaration option;
  concl : EConstr.types;
  indarg_in_concl : bool;
  farg_in_concl : bool;
}
val compute_elim_sig : Evd.evar_map -> EConstr.types -> elim_scheme
val general_elim_clause :
  evars_flag ->
  Unification.unify_flags ->
  Names.Id.t option ->
  (Constr.metavariable * Evd.clbinding) list * EConstr.t * EConstr.types ->
  Names.Constant.t -> unit Proofview.tactic
val default_elim :
  evars_flag ->
  clear_flag ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val simplest_elim : EConstr.constr -> unit Proofview.tactic
val elim :
  evars_flag ->
  clear_flag ->
  EConstr.constr Tactypes.with_bindings ->
  EConstr.constr Tactypes.with_bindings option -> unit Proofview.tactic
val induction :
  evars_flag ->
  clear_flag ->
  EConstr.constr ->
  Tactypes.or_and_intro_pattern option ->
  EConstr.constr Tactypes.with_bindings option -> unit Proofview.tactic
val general_case_analysis :
  evars_flag ->
  clear_flag ->
  EConstr.constr Tactypes.with_bindings -> unit Proofview.tactic
val simplest_case : EConstr.constr -> unit Proofview.tactic
val destruct :
  evars_flag ->
  clear_flag ->
  EConstr.constr ->
  Tactypes.or_and_intro_pattern option ->
  EConstr.constr Tactypes.with_bindings option -> unit Proofview.tactic
val induction_destruct :
  rec_flag ->
  evars_flag ->
  (Tactypes.delayed_open_constr_with_bindings destruction_arg *
   (Tactypes.intro_pattern_naming option *
    Tactypes.or_and_intro_pattern option) *
   Locus.clause option)
  list * EConstr.constr Tactypes.with_bindings option ->
  unit Proofview.tactic
val case_type : EConstr.types -> unit Proofview.tactic
val elim_type : EConstr.types -> unit Proofview.tactic
val exfalso : unit Proofview.tactic
val constructor_tac :
  evars_flag ->
  int option ->
  int -> EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val any_constructor :
  evars_flag -> unit Proofview.tactic option -> unit Proofview.tactic
val one_constructor :
  int -> EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val left : EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val right : EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val split : EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val left_with_bindings :
  evars_flag -> EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val right_with_bindings :
  evars_flag -> EConstr.constr Tactypes.bindings -> unit Proofview.tactic
val split_with_bindings :
  evars_flag ->
  EConstr.constr Tactypes.bindings list -> unit Proofview.tactic
val split_with_delayed_bindings :
  evars_flag ->
  EConstr.constr Tactypes.bindings Tactypes.delayed_open list ->
  unit Proofview.tactic
val simplest_left : unit Proofview.tactic
val simplest_right : unit Proofview.tactic
val simplest_split : unit Proofview.tactic
val setoid_reflexivity : unit Proofview.tactic Hook.t
val reflexivity_red : bool -> unit Proofview.tactic
val reflexivity : unit Proofview.tactic
val intros_reflexivity : unit Proofview.tactic
val setoid_symmetry : unit Proofview.tactic Hook.t
val symmetry_red : bool -> unit Proofview.tactic
val symmetry : unit Proofview.tactic
val setoid_symmetry_in : (Names.Id.t -> unit Proofview.tactic) Hook.t
val intros_symmetry : Locus.clause -> unit Proofview.tactic
val setoid_transitivity :
  (EConstr.constr option -> unit Proofview.tactic) Hook.t
val transitivity_red : bool -> EConstr.constr option -> unit Proofview.tactic
val transitivity : EConstr.constr -> unit Proofview.tactic
val etransitivity : unit Proofview.tactic
val intros_transitivity : EConstr.constr option -> unit Proofview.tactic
val assert_before_replacing :
  Names.Id.t -> EConstr.types -> unit Proofview.tactic
val assert_after_replacing :
  Names.Id.t -> EConstr.types -> unit Proofview.tactic
val assert_before : Names.Name.t -> EConstr.types -> unit Proofview.tactic
val assert_after : Names.Name.t -> EConstr.types -> unit Proofview.tactic
val assert_by :
  Names.Name.t ->
  EConstr.types -> unit Proofview.tactic -> unit Proofview.tactic
val enough_by :
  Names.Name.t ->
  EConstr.types -> unit Proofview.tactic -> unit Proofview.tactic
val pose_proof : Names.Name.t -> EConstr.constr -> unit Proofview.tactic
val forward :
  bool ->
  unit Proofview.tactic option option ->
  Tactypes.intro_pattern option -> EConstr.constr -> unit Proofview.tactic
val cut : EConstr.types -> unit Proofview.tactic
val pose_tac : Names.Name.t -> EConstr.constr -> unit Proofview.tactic
val letin_tac :
  (bool * Tactypes.intro_pattern_naming) option ->
  Names.Name.t ->
  EConstr.constr ->
  EConstr.types option -> Locus.clause -> unit Proofview.tactic
val letin_pat_tac :
  evars_flag ->
  (bool * Tactypes.intro_pattern_naming) option ->
  Names.Name.t ->
  Evd.evar_map option * EConstr.constr ->
  Locus.clause -> unit Proofview.tactic
val generalize : EConstr.constr list -> unit Proofview.tactic
val generalize_gen :
  (EConstr.constr Locus.with_occurrences * Names.Name.t) list ->
  unit Proofview.tactic
val new_generalize_gen :
  ((Locus.occurrences * EConstr.constr) * Names.Name.t) list ->
  unit Proofview.tactic
val generalize_dep :
  ?with_let:bool -> EConstr.constr -> unit Proofview.tactic
val constr_eq :
  strict:bool -> EConstr.constr -> EConstr.constr -> unit Proofview.tactic
val unify :
  ?state:TransparentState.t ->
  EConstr.constr -> EConstr.constr -> unit Proofview.tactic
val abstract_generalize :
  ?generalize_vars:bool ->
  ?force_dep:bool -> Names.Id.t -> unit Proofview.tactic
val specialize_eqs : Names.Id.t -> unit Proofview.tactic
val general_rewrite_clause :
  (bool ->
   evars_flag ->
   EConstr.constr Tactypes.with_bindings ->
   Locus.clause -> unit Proofview.tactic)
  Hook.t
val subst_one :
  (bool ->
   Names.Id.t -> Names.Id.t * EConstr.constr * bool -> unit Proofview.tactic)
  Hook.t
val declare_intro_decomp_eq :
  ((int -> unit Proofview.tactic) ->
   Coqlib.coq_eq_data * EConstr.types *
   (EConstr.types * EConstr.constr * EConstr.constr) ->
   EConstr.constr * EConstr.types -> unit Proofview.tactic) ->
  unit
val with_set_strategy :
  (Conv_oracle.level * Names.GlobRef.t list) list ->
  'a Proofview.tactic -> 'a Proofview.tactic
module Simple :
  sig
    val intro : Names.Id.t -> unit Proofview.tactic
    val apply : EConstr.constr -> unit Proofview.tactic
    val eapply : EConstr.constr -> unit Proofview.tactic
    val elim : EConstr.constr -> unit Proofview.tactic
    val case : EConstr.constr -> unit Proofview.tactic
    val apply_in : Names.Id.t -> EConstr.constr -> unit Proofview.tactic
  end
val refine :
  typecheck:bool ->
  (Evd.evar_map -> Evd.evar_map * EConstr.constr) -> unit Proofview.tactic
("DEBUG:rule", [(("is_quantified_hypothesis", 1945), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1169), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Proofview")), "Goal"), "t"), 0, (0)), 100000000, 0, -1168), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1167), 0), 100000000, 0, -1166), 0), 100000000, 0, -1165), 0, (("tactics/tactics.mli", 30, 1128, 1128), ("tactics/tactics.mli", 30, 1128, 1191), 0), 0, Tag1 ("Tactics", 1)), 0); (("introduction", 1946), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1164), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1163)], (0)), 100000000, 0, -1162), 0), 100000000, 0, -1161), 0, (("tactics/tactics.mli", 34, 1225, 1225), ("tactics/tactics.mli", 34, 1225, 1276), 0), 0, Tag1 ("Tactics", 2)), 0); (("convert_concl", 1947), ((Tag1 (("cast"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1160), (Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1159), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -1158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -1157), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1156)], (0)), 100000000, 0, -1155), 0), 100000000, 0, -1154), 0), 100000000, 0, -1153), 0), 100000000, 0, -1152), 0), 100000000, 0, -1151), 0, (("tactics/tactics.mli", 35, 1277, 1277), ("tactics/tactics.mli", 35, 1277, 1369), 0), 0, Tag1 ("Tactics", 3)), 0); (("convert_hyp", 1948), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1150), (Tag1 (("reorder"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -1149), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_declaration"), 0, (0)), 100000000, 0, -1148), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1147)], (0)), 100000000, 0, -1146), 0), 100000000, 0, -1145), 0), 100000000, 0, -1144), 0), 100000000, 0, -1143), 0, (("tactics/tactics.mli", 36, 1370, 1370), ("tactics/tactics.mli", 36, 1370, 1464), 0), 0, Tag1 ("Tactics", 4)), 0); (("mutual_fix", 1949), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1142), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1141), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1138); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1139); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1140)]), 100000000, 0, -1137)], (0)), 100000000, 0, -1136), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1135), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1134)], (0)), 100000000, 0, -1133), 0), 100000000, 0, -1132), 0), 100000000, 0, -1131), 0), 100000000, 0, -1130), 0), 100000000, 0, -1129), 0, (("tactics/tactics.mli", 37, 1465, 1465), ("tactics/tactics.mli", 38, 1487, 1562), 0), 0, Tag1 ("Tactics", 5)), 0); (("fix", 1950), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1128), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1127), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1126)], (0)), 100000000, 0, -1125), 0), 100000000, 0, -1124), 0), 100000000, 0, -1123), 0, (("tactics/tactics.mli", 39, 1563, 1563), ("tactics/tactics.mli", 39, 1563, 1621), 0), 0, Tag1 ("Tactics", 6)), 0); (("mutual_cofix", 1951), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1122), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1120); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1121)]), 100000000, 0, -1119)], (0)), 100000000, 0, -1118), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -1117), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1116)], (0)), 100000000, 0, -1115), 0), 100000000, 0, -1114), 0), 100000000, 0, -1113), 0), 100000000, 0, -1112), 0, (("tactics/tactics.mli", 40, 1622, 1622), ("tactics/tactics.mli", 40, 1622, 1704), 0), 0, Tag1 ("Tactics", 7)), 0); (("cofix", 1952), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1111), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1110)], (0)), 100000000, 0, -1109), 0), 100000000, 0, -1108), 0, (("tactics/tactics.mli", 41, 1705, 1705), ("tactics/tactics.mli", 41, 1705, 1756), 0), 0, Tag1 ("Tactics", 8)), 0); (("convert", 1953), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1107), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1106), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1105)], (0)), 100000000, 0, -1104), 0), 100000000, 0, -1103), 0), 100000000, 0, -1102), 0, (("tactics/tactics.mli", 43, 1758, 1758), ("tactics/tactics.mli", 43, 1758, 1821), 0), 0, Tag1 ("Tactics", 9)), 0); (("convert_leq", 1954), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1101), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1100), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1099)], (0)), 100000000, 0, -1098), 0), 100000000, 0, -1097), 0), 100000000, 0, -1096), 0, (("tactics/tactics.mli", 44, 1822, 1822), ("tactics/tactics.mli", 44, 1822, 1885), 0), 0, Tag1 ("Tactics", 10)), 0); (("fresh_id_in_env", 1955), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -1095), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1094), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -1093), (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1092), 0), 100000000, 0, -1091), 0), 100000000, 0, -1090), 0), 100000000, 0, -1089), 0, (("tactics/tactics.mli", 48, 1922, 1922), ("tactics/tactics.mli", 48, 1922, 1975), 0), 0, Tag1 ("Tactics", 11)), 0); (("find_intro_names", 1956), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -1088), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -1087), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -1086), (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1085)], (0)), 100000000, 0, -1084), 0), 100000000, 0, -1083), 0), 100000000, 0, -1082), 0), 100000000, 0, -1081), 0, (("tactics/tactics.mli", 49, 1976, 1976), ("tactics/tactics.mli", 49, 1976, 2046), 0), 0, Tag1 ("Tactics", 12)), 0); (("intro", 1957), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1080)], (0)), 100000000, 0, -1079), 0, (("tactics/tactics.mli", 51, 2048, 2048), ("tactics/tactics.mli", 51, 2048, 2096), 0), 0, Tag1 ("Tactics", 13)), 0); (("introf", 1958), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1078)], (0)), 100000000, 0, -1077), 0, (("tactics/tactics.mli", 52, 2097, 2097), ("tactics/tactics.mli", 52, 2097, 2145), 0), 0, Tag1 ("Tactics", 14)), 0); (("intro_move", 1959), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1076)], (0)), 100000000, 0, -1075), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1074)], (0)), 100000000, 0, -1073), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1072)], (0)), 100000000, 0, -1071), 0), 100000000, 0, -1070), 0), 100000000, 0, -1069), 0, (("tactics/tactics.mli", 53, 2146, 2146), ("tactics/tactics.mli", 53, 2146, 2234), 0), 0, Tag1 ("Tactics", 15)), 0); (("intro_move_avoid", 1960), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1068)], (0)), 100000000, 0, -1067), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -1066), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1065)], (0)), 100000000, 0, -1064), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1063)], (0)), 100000000, 0, -1062), 0), 100000000, 0, -1061), 0), 100000000, 0, -1060), 0), 100000000, 0, -1059), 0, (("tactics/tactics.mli", 54, 2235, 2235), ("tactics/tactics.mli", 54, 2235, 2335), 0), 0, Tag1 ("Tactics", 16)), 0); (("intro_avoiding", 1961), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "Set"), "t"), 0, (0)), 100000000, 0, -1058), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1057)], (0)), 100000000, 0, -1056), 0), 100000000, 0, -1055), 0, (("tactics/tactics.mli", 58, 2431, 2431), ("tactics/tactics.mli", 58, 2431, 2491), 0), 0, Tag1 ("Tactics", 17)), 0); (("intro_replacing", 1962), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1054), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1053)], (0)), 100000000, 0, -1052), 0), 100000000, 0, -1051), 0, (("tactics/tactics.mli", 60, 2493, 2493), ("tactics/tactics.mli", 60, 2493, 2549), 0), 0, Tag1 ("Tactics", 18)), 0); (("intro_using", 1963), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1050), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1049)], (0)), 100000000, 0, -1048), 0), 100000000, 0, -1047), 0, (("tactics/tactics.mli", 61, 2550, 2550), ("tactics/tactics.mli", 62, 2607, 2681), 0), [(("ocaml.deprecated", (("tactics/tactics.mli", 62, 2607, 2610), ("tactics/tactics.mli", 62, 2607, 2626), 0)), ([([(Tag1 (Tag2 ("Prefer [intro_using_then] to avoid renaming issues.", (("tactics/tactics.mli", 62, 2607, 2628), ("tactics/tactics.mli", 62, 2607, 2679), 0), 0)), (("tactics/tactics.mli", 62, 2607, 2627), ("tactics/tactics.mli", 62, 2607, 2680), 0), 0, 0)], (("tactics/tactics.mli", 62, 2607, 2627), ("tactics/tactics.mli", 62, 2607, 2680), 0))]), (("tactics/tactics.mli", 62, 2607, 2607), ("tactics/tactics.mli", 62, 2607, 2681), 0))], Tag1 ("Tactics", 19)), 0); (("intro_using_then", 1964), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1046), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1045), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1044)], (0)), 100000000, 0, -1043), 0), 100000000, 0, -1042), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1041)], (0)), 100000000, 0, -1040), 0), 100000000, 0, -1039), 0), 100000000, 0, -1038), 0, (("tactics/tactics.mli", 63, 2682, 2682), ("tactics/tactics.mli", 63, 2682, 2773), 0), 0, Tag1 ("Tactics", 20)), 0); (("intro_mustbe_force", 1965), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1037), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1036)], (0)), 100000000, 0, -1035), 0), 100000000, 0, -1034), 0, (("tactics/tactics.mli", 64, 2774, 2774), ("tactics/tactics.mli", 64, 2774, 2830), 0), 0, Tag1 ("Tactics", 21)), 0); (("intros_mustbe_force", 1966), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1033)], (0)), 100000000, 0, -1032), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1031)], (0)), 100000000, 0, -1030), 0), 100000000, 0, -1029), 0, (("tactics/tactics.mli", 65, 2831, 2831), ("tactics/tactics.mli", 65, 2831, 2892), 0), 0, Tag1 ("Tactics", 22)), 0); (("intro_then", 1967), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1028), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1027)], (0)), 100000000, 0, -1026), 0), 100000000, 0, -1025), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1024)], (0)), 100000000, 0, -1023), 0), 100000000, 0, -1022), 0, (("tactics/tactics.mli", 66, 2893, 2893), ("tactics/tactics.mli", 66, 2893, 2976), 0), 0, Tag1 ("Tactics", 23)), 0); (("intros_using", 1968), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1021)], (0)), 100000000, 0, -1020), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1019)], (0)), 100000000, 0, -1018), 0), 100000000, 0, -1017), 0, (("tactics/tactics.mli", 67, 2977, 2977), ("tactics/tactics.mli", 68, 3039, 3114), 0), [(("ocaml.deprecated", (("tactics/tactics.mli", 68, 3039, 3042), ("tactics/tactics.mli", 68, 3039, 3058), 0)), ([([(Tag1 (Tag2 ("Prefer [intros_using_then] to avoid renaming issues.", (("tactics/tactics.mli", 68, 3039, 3060), ("tactics/tactics.mli", 68, 3039, 3112), 0), 0)), (("tactics/tactics.mli", 68, 3039, 3059), ("tactics/tactics.mli", 68, 3039, 3113), 0), 0, 0)], (("tactics/tactics.mli", 68, 3039, 3059), ("tactics/tactics.mli", 68, 3039, 3113), 0))]), (("tactics/tactics.mli", 68, 3039, 3039), ("tactics/tactics.mli", 68, 3039, 3114), 0))], Tag1 ("Tactics", 24)), 0); (("intros_using_then", 1969), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1016)], (0)), 100000000, 0, -1015), (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1014)], (0)), 100000000, 0, -1013), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1012)], (0)), 100000000, 0, -1011), 0), 100000000, 0, -1010), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1009)], (0)), 100000000, 0, -1008), 0), 100000000, 0, -1007), 0), 100000000, 0, -1006), 0, (("tactics/tactics.mli", 69, 3115, 3115), ("tactics/tactics.mli", 69, 3115, 3216), 0), 0, Tag1 ("Tactics", 25)), 0); (("intros_replacing", 1970), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1005)], (0)), 100000000, 0, -1004), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1003)], (0)), 100000000, 0, -1002), 0), 100000000, 0, -1001), 0, (("tactics/tactics.mli", 70, 3217, 3217), ("tactics/tactics.mli", 70, 3217, 3278), 0), 0, Tag1 ("Tactics", 26)), 0); (("intros_possibly_replacing", 1971), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1000)], (0)), 100000000, 0, -999), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -998)], (0)), 100000000, 0, -997), 0), 100000000, 0, -996), 0, (("tactics/tactics.mli", 71, 3279, 3279), ("tactics/tactics.mli", 71, 3279, 3345), 0), 0, Tag1 ("Tactics", 27)), 0); (("auto_intros_tac", 1972), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -995)], (0)), 100000000, 0, -994), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -993)], (0)), 100000000, 0, -992), 0), 100000000, 0, -991), 0, (("tactics/tactics.mli", 74, 3420, 3420), ("tactics/tactics.mli", 74, 3420, 3484), 0), 0, Tag1 ("Tactics", 28)), 0); (("intros", 1973), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -990)], (0)), 100000000, 0, -989), 0, (("tactics/tactics.mli", 76, 3486, 3486), ("tactics/tactics.mli", 76, 3486, 3534), 0), 0, Tag1 ("Tactics", 29)), 0); (("intros_until", 1974), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "quantified_hypothesis"), 0, (0)), 100000000, 0, -988), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -987)], (0)), 100000000, 0, -986), 0), 100000000, 0, -985), 0, (("tactics/tactics.mli", 78, 3536, 3536), ("tactics/tactics.mli", 78, 3536, 3609), 0), 0, Tag1 ("Tactics", 30)), 0); (("intros_clearing", 1975), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -984)], (0)), 100000000, 0, -983), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -982)], (0)), 100000000, 0, -981), 0), 100000000, 0, -980), 0, (("tactics/tactics.mli", 80, 3611, 3611), ("tactics/tactics.mli", 80, 3611, 3672), 0), 0, Tag1 ("Tactics", 31)), 0); (("try_intros_until", 1976), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -979), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -978)], (0)), 100000000, 0, -977), 0), 100000000, 0, -976), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "quantified_hypothesis"), 0, (0)), 100000000, 0, -975), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -974)], (0)), 100000000, 0, -973), 0), 100000000, 0, -972), 0), 100000000, 0, -971), 0, (("tactics/tactics.mli", 88, 4000, 4000), ("tactics/tactics.mli", 89, 4023, 4106), 0), 0, Tag1 ("Tactics", 32)), 0); Tag1 (("evars_flag", 1977), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -970)), 0, 0, 0, 0, (("tactics/tactics.mli", 91, 4108, 4108), ("tactics/tactics.mli", 91, 4108, 4130), 0), 0, 1, 0, Tag1 ("Tactics", 33)), 1, 0); Tag1 (("rec_flag", 1978), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -969)), 0, 0, 0, 0, (("tactics/tactics.mli", 92, 4187, 4187), ("tactics/tactics.mli", 92, 4187, 4207), 0), 0, 1, 0, Tag1 ("Tactics", 34)), 1, 0); Tag1 (("advanced_flag", 1979), (0, 0, 0, 1, ((Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -968)), 0, 0, 0, 0, (("tactics/tactics.mli", 93, 4266, 4266), ("tactics/tactics.mli", 93, 4266, 4291), 0), 0, 1, 0, Tag1 ("Tactics", 35)), 1, 0); Tag1 (("clear_flag", 1980), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -967)], (0)), 100000000, 0, -966)), 0, 0, 0, 0, (("tactics/tactics.mli", 94, 4337, 4337), ("tactics/tactics.mli", 94, 4337, 4366), 0), 0, 0, 0, Tag1 ("Tactics", 36)), 1, 0); Tag1 (("core_destruction_arg", 1981), ([((("a")), 100000000, 0, -963)], 1, Tag1 ([(("ElimOnConstr", 1346), ([((("a")), 100000000, 0, -963)]), 0, (("tactics/tactics.mli", 100, 4563, 4565), ("tactics/tactics.mli", 100, 4563, 4585), 0), 0, Tag1 ("Tactics", 38)); (("ElimOnIdent", 1347), ([(Tag3 (Tag1 ((Tag2 ("Names")), "lident"), 0, (0)), 100000000, 0, -964)]), 0, (("tactics/tactics.mli", 101, 4586, 4588), ("tactics/tactics.mli", 101, 4586, 4611), 0), 0, Tag1 ("Tactics", 39)); (("ElimOnAnonHyp", 1348), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -965)]), 0, (("tactics/tactics.mli", 102, 4612, 4614), ("tactics/tactics.mli", 102, 4612, 4636), 0), 0, Tag1 ("Tactics", 40))], 0), 1, 0, [25], [0], 0, 0, (("tactics/tactics.mli", 99, 4532, 4532), ("tactics/tactics.mli", 102, 4612, 4636), 0), 0, 0, 0, Tag1 ("Tactics", 37)), 1, 0); Tag1 (("destruction_arg", 1982), ([((("a")), 100000000, 0, -962)], 1, 0, 1, ((Tag2 ([(Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -960); (Tag3 ((("core_destruction_arg", 1981)), [((("a")), 100000000, 0, -962)], (0)), 100000000, 0, -961)]), 100000000, 0, -959)), [25], [0], 0, 0, (("tactics/tactics.mli", 104, 4638, 4638), ("tactics/tactics.mli", 105, 4664, 4702), 0), 0, 0, 0, Tag1 ("Tactics", 41)), 1, 0); (("onInductionArg", 1983), ((Tag1 (0, (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -958), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -957)], (0)), 100000000, 0, -956), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -955)], (0)), 100000000, 0, -954), 0), 100000000, 0, -953), 0), 100000000, 0, -952), (Tag1 (0, (Tag3 ((("destruction_arg", 1982)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -951)], (0)), 100000000, 0, -950)], (0)), 100000000, 0, -949), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -948)], (0)), 100000000, 0, -947), 0), 100000000, 0, -946), 0), 100000000, 0, -945), 0, (("tactics/tactics.mli", 107, 4704, 4704), ("tactics/tactics.mli", 109, 4792, 4857), 0), 0, Tag1 ("Tactics", 42)), 0); (("force_destruction_arg", 1984), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -944), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -943), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -942), (Tag1 (0, (Tag3 ((("destruction_arg", 1982)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr_with_bindings"), 0, (0)), 100000000, 0, -941)], (0)), 100000000, 0, -940), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -936); (Tag3 ((("destruction_arg", 1982)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -939)], (0)), 100000000, 0, -938)], (0)), 100000000, 0, -937)]), 100000000, 0, -935), 0), 100000000, 0, -934), 0), 100000000, 0, -933), 0), 100000000, 0, -932), 0), 100000000, 0, -931), 0, (("tactics/tactics.mli", 111, 4859, 4859), ("tactics/tactics.mli", 113, 4977, 5028), 0), 0, Tag1 ("Tactics", 43)), 0); (("finish_evar_resolution", 1985), ((Tag1 (Tag1 ("flags"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pretyping")), "inference_flags"), 0, (0)), 100000000, 0, -930)], (0)), 100000000, 0, -929), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -928), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -927), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -925)], (0)), 100000000, 0, -924); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -926)]), 100000000, 0, -923), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -921); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -922)]), 100000000, 0, -920), 0), 100000000, 0, -919), 0), 100000000, 0, -918), 0), 100000000, 0, -917), 0), 100000000, 0, -916), 0, (("tactics/tactics.mli", 115, 5030, 5030), ("tactics/tactics.mli", 116, 5095, 5163), 0), 0, Tag1 ("Tactics", 44)), 0); (("use_clear_hyp_by_default", 1986), ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -915), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -914), 0), 100000000, 0, -913), 0, (("tactics/tactics.mli", 120, 5235, 5235), ("tactics/tactics.mli", 120, 5235, 5278), 0), 0, Tag1 ("Tactics", 45)), 0); (("intro_patterns", 1987), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -912), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -911), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -910)], (0)), 100000000, 0, -909), 0), 100000000, 0, -908), 0), 100000000, 0, -907), 0, (("tactics/tactics.mli", 124, 5333, 5333), ("tactics/tactics.mli", 124, 5333, 5407), 0), 0, Tag1 ("Tactics", 46)), 0); (("intro_patterns_to", 1988), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -906), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -905)], (0)), 100000000, 0, -904), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -903), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -902)], (0)), 100000000, 0, -901), 0), 100000000, 0, -900), 0), 100000000, 0, -899), 0), 100000000, 0, -898), 0, (("tactics/tactics.mli", 125, 5408, 5408), ("tactics/tactics.mli", 126, 5492, 5515), 0), 0, Tag1 ("Tactics", 47)), 0); (("intro_patterns_bound_to", 1989), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -897), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -896), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -895)], (0)), 100000000, 0, -894), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -893), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -892)], (0)), 100000000, 0, -891), 0), 100000000, 0, -890), 0), 100000000, 0, -889), 0), 100000000, 0, -888), 0), 100000000, 0, -887), 0, (("tactics/tactics.mli", 127, 5516, 5516), ("tactics/tactics.mli", 128, 5613, 5636), 0), 0, Tag1 ("Tactics", 48)), 0); (("intro_pattern_to", 1990), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -886), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -885)], (0)), 100000000, 0, -884), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_expr"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr"), 0, (0)), 100000000, 0, -883)], (0)), 100000000, 0, -882), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -881)], (0)), 100000000, 0, -880), 0), 100000000, 0, -879), 0), 100000000, 0, -878), 0), 100000000, 0, -877), 0, (("tactics/tactics.mli", 129, 5637, 5637), ("tactics/tactics.mli", 130, 5744, 5767), 0), 0, Tag1 ("Tactics", 49)), 0); (("intros_patterns", 1991), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -876), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_patterns"), 0, (0)), 100000000, 0, -875), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -874)], (0)), 100000000, 0, -873), 0), 100000000, 0, -872), 0), 100000000, 0, -871), 0, (("tactics/tactics.mli", 133, 5834, 5834), ("tactics/tactics.mli", 133, 5834, 5909), 0), 0, Tag1 ("Tactics", 50)), 0); (("assumption", 1992), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -870)], (0)), 100000000, 0, -869), 0, (("tactics/tactics.mli", 137, 5939, 5939), ("tactics/tactics.mli", 137, 5939, 5983), 0), 0, Tag1 ("Tactics", 51)), 0); (("exact_no_check", 1993), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -868), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -867)], (0)), 100000000, 0, -866), 0), 100000000, 0, -865), 0, (("tactics/tactics.mli", 138, 5984, 5984), ("tactics/tactics.mli", 138, 5984, 6038), 0), 0, Tag1 ("Tactics", 52)), 0); (("vm_cast_no_check", 1994), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -864), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -863)], (0)), 100000000, 0, -862), 0), 100000000, 0, -861), 0, (("tactics/tactics.mli", 139, 6039, 6039), ("tactics/tactics.mli", 139, 6039, 6093), 0), 0, Tag1 ("Tactics", 53)), 0); (("native_cast_no_check", 1995), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -860), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -859)], (0)), 100000000, 0, -858), 0), 100000000, 0, -857), 0, (("tactics/tactics.mli", 140, 6094, 6094), ("tactics/tactics.mli", 140, 6094, 6152), 0), 0, Tag1 ("Tactics", 54)), 0); (("exact_check", 1996), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -856), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -855)], (0)), 100000000, 0, -854), 0), 100000000, 0, -853), 0, (("tactics/tactics.mli", 141, 6153, 6153), ("tactics/tactics.mli", 141, 6153, 6207), 0), 0, Tag1 ("Tactics", 55)), 0); (("exact_proof", 1997), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Constrexpr")), "constr_expr"), 0, (0)), 100000000, 0, -852), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -851)], (0)), 100000000, 0, -850), 0), 100000000, 0, -849), 0, (("tactics/tactics.mli", 142, 6208, 6208), ("tactics/tactics.mli", 142, 6208, 6278), 0), 0, Tag1 ("Tactics", 56)), 0); Tag1 (("tactic_reduction", 1998), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Reductionops")), "reduction_function"), 0, (0)), 100000000, 0, -848)), 0, 0, 0, 0, (("tactics/tactics.mli", 146, 6312, 6312), ("tactics/tactics.mli", 146, 6312, 6367), 0), 0, 0, 0, Tag1 ("Tactics", 57)), 1, 0); Tag1 (("e_tactic_reduction", 1999), (0, 0, 0, 1, ((Tag3 (Tag1 ((Tag2 ("Reductionops")), "e_reduction_function"), 0, (0)), 100000000, 0, -847)), 0, 0, 0, 0, (("tactics/tactics.mli", 147, 6368, 6368), ("tactics/tactics.mli", 147, 6368, 6427), 0), 0, 0, 0, Tag1 ("Tactics", 58)), 1, 0); Tag1 (("change_arg", 2000), (0, 0, 0, 1, ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Ltac_pretype")), "patvar_map"), 0, (0)), 100000000, 0, -846), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Environ")), "env"), 0, (0)), 100000000, 0, -845), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -844), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -842); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -843)]), 100000000, 0, -841), 0), 100000000, 0, -840), 0), 100000000, 0, -839), 0), 100000000, 0, -838)), 0, 0, 0, 0, (("tactics/tactics.mli", 149, 6429, 6429), ("tactics/tactics.mli", 149, 6429, 6497), 0), 0, 0, 0, Tag1 ("Tactics", 59)), 1, 0); (("make_change_arg", 2001), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -837), (Tag3 ((("change_arg", 2000)), 0, (0)), 100000000, 0, -836), 0), 100000000, 0, -835), 0, (("tactics/tactics.mli", 151, 6499, 6499), ("tactics/tactics.mli", 151, 6499, 6543), 0), 0, Tag1 ("Tactics", 60)), 0); (("reduct_in_hyp", 2002), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -834), (Tag1 (("reorder"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -833), (Tag1 (0, (Tag3 ((("tactic_reduction", 1998)), 0, (0)), 100000000, 0, -832), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -831), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -830)], (0)), 100000000, 0, -829), 0), 100000000, 0, -828), 0), 100000000, 0, -827), 0), 100000000, 0, -826), 0), 100000000, 0, -825), 0, (("tactics/tactics.mli", 152, 6544, 6544), ("tactics/tactics.mli", 152, 6544, 6655), 0), 0, Tag1 ("Tactics", 61)), 0); (("reduct_option", 2003), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -824), (Tag1 (0, (Tag2 ([(Tag3 ((("tactic_reduction", 1998)), 0, (0)), 100000000, 0, -822); (Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -823)]), 100000000, 0, -821), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -820), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -819)], (0)), 100000000, 0, -818), 0), 100000000, 0, -817), 0), 100000000, 0, -816), 0), 100000000, 0, -815), 0, (("tactics/tactics.mli", 153, 6656, 6656), ("tactics/tactics.mli", 153, 6656, 6764), 0), 0, Tag1 ("Tactics", 62)), 0); (("reduct_in_concl", 2004), ((Tag1 (("cast"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -814), (Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -813), (Tag1 (0, (Tag2 ([(Tag3 ((("tactic_reduction", 1998)), 0, (0)), 100000000, 0, -811); (Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -812)]), 100000000, 0, -810), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -809)], (0)), 100000000, 0, -808), 0), 100000000, 0, -807), 0), 100000000, 0, -806), 0), 100000000, 0, -805), 0, (("tactics/tactics.mli", 154, 6765, 6765), ("tactics/tactics.mli", 154, 6765, 6867), 0), 0, Tag1 ("Tactics", 63)), 0); (("e_reduct_in_concl", 2005), ((Tag1 (("cast"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -804), (Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -803), (Tag1 (0, (Tag2 ([(Tag3 ((("e_tactic_reduction", 1999)), 0, (0)), 100000000, 0, -801); (Tag3 (Tag1 ((Tag2 ("Constr")), "cast_kind"), 0, (0)), 100000000, 0, -802)]), 100000000, 0, -800), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -799)], (0)), 100000000, 0, -798), 0), 100000000, 0, -797), 0), 100000000, 0, -796), 0), 100000000, 0, -795), 0, (("tactics/tactics.mli", 155, 6868, 6868), ("tactics/tactics.mli", 155, 6868, 6974), 0), 0, Tag1 ("Tactics", 64)), 0); (("change_in_concl", 2006), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -794), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -792); (Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -793)]), 100000000, 0, -791)], (0)), 100000000, 0, -790), (Tag1 (0, (Tag3 ((("change_arg", 2000)), 0, (0)), 100000000, 0, -789), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -788)], (0)), 100000000, 0, -787), 0), 100000000, 0, -786), 0), 100000000, 0, -785), 0), 100000000, 0, -784), 0, (("tactics/tactics.mli", 156, 6975, 6975), ("tactics/tactics.mli", 156, 6975, 7089), 0), 0, Tag1 ("Tactics", 65)), 0); (("change_concl", 2007), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -783), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -782)], (0)), 100000000, 0, -781), 0), 100000000, 0, -780), 0, (("tactics/tactics.mli", 157, 7090, 7090), ("tactics/tactics.mli", 157, 7090, 7145), 0), 0, Tag1 ("Tactics", 66)), 0); (("change_in_hyp", 2008), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -779), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -777); (Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -778)]), 100000000, 0, -776)], (0)), 100000000, 0, -775), (Tag1 (0, (Tag3 ((("change_arg", 2000)), 0, (0)), 100000000, 0, -774), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -773), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -772)], (0)), 100000000, 0, -771), 0), 100000000, 0, -770), 0), 100000000, 0, -769), 0), 100000000, 0, -768), 0), 100000000, 0, -767), 0, (("tactics/tactics.mli", 158, 7146, 7146), ("tactics/tactics.mli", 159, 7239, 7300), 0), 0, Tag1 ("Tactics", 67)), 0); (("red_in_concl", 2009), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -766)], (0)), 100000000, 0, -765), 0, (("tactics/tactics.mli", 160, 7301, 7301), ("tactics/tactics.mli", 160, 7301, 7346), 0), 0, Tag1 ("Tactics", 68)), 0); (("red_in_hyp", 2010), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -764), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -763)], (0)), 100000000, 0, -762), 0), 100000000, 0, -761), 0, (("tactics/tactics.mli", 161, 7347, 7347), ("tactics/tactics.mli", 161, 7347, 7408), 0), 0, Tag1 ("Tactics", 69)), 0); (("red_option", 2011), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -760), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -759)], (0)), 100000000, 0, -758), 0), 100000000, 0, -757), 0, (("tactics/tactics.mli", 162, 7409, 7409), ("tactics/tactics.mli", 162, 7409, 7471), 0), 0, Tag1 ("Tactics", 70)), 0); (("hnf_in_concl", 2012), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -756)], (0)), 100000000, 0, -755), 0, (("tactics/tactics.mli", 163, 7472, 7472), ("tactics/tactics.mli", 163, 7472, 7517), 0), 0, Tag1 ("Tactics", 71)), 0); (("hnf_in_hyp", 2013), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -754), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -753)], (0)), 100000000, 0, -752), 0), 100000000, 0, -751), 0, (("tactics/tactics.mli", 164, 7518, 7518), ("tactics/tactics.mli", 164, 7518, 7579), 0), 0, Tag1 ("Tactics", 72)), 0); (("hnf_option", 2014), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -750), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -749)], (0)), 100000000, 0, -748), 0), 100000000, 0, -747), 0, (("tactics/tactics.mli", 165, 7580, 7580), ("tactics/tactics.mli", 165, 7580, 7642), 0), 0, Tag1 ("Tactics", 73)), 0); (("simpl_in_concl", 2015), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -746)], (0)), 100000000, 0, -745), 0, (("tactics/tactics.mli", 166, 7643, 7643), ("tactics/tactics.mli", 166, 7643, 7688), 0), 0, Tag1 ("Tactics", 74)), 0); (("simpl_in_hyp", 2016), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -744), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -743)], (0)), 100000000, 0, -742), 0), 100000000, 0, -741), 0, (("tactics/tactics.mli", 167, 7689, 7689), ("tactics/tactics.mli", 167, 7689, 7750), 0), 0, Tag1 ("Tactics", 75)), 0); (("simpl_option", 2017), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -740), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -739)], (0)), 100000000, 0, -738), 0), 100000000, 0, -737), 0, (("tactics/tactics.mli", 168, 7751, 7751), ("tactics/tactics.mli", 168, 7751, 7813), 0), 0, Tag1 ("Tactics", 76)), 0); (("normalise_in_concl", 2018), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -736)], (0)), 100000000, 0, -735), 0, (("tactics/tactics.mli", 169, 7814, 7814), ("tactics/tactics.mli", 169, 7814, 7860), 0), 0, Tag1 ("Tactics", 77)), 0); (("normalise_in_hyp", 2019), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -734), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -733)], (0)), 100000000, 0, -732), 0), 100000000, 0, -731), 0, (("tactics/tactics.mli", 170, 7861, 7861), ("tactics/tactics.mli", 170, 7861, 7922), 0), 0, Tag1 ("Tactics", 78)), 0); (("normalise_option", 2020), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -730), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -729)], (0)), 100000000, 0, -728), 0), 100000000, 0, -727), 0, (("tactics/tactics.mli", 171, 7923, 7923), ("tactics/tactics.mli", 171, 7923, 7985), 0), 0, Tag1 ("Tactics", 79)), 0); (("normalise_vm_in_concl", 2021), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -726)], (0)), 100000000, 0, -725), 0, (("tactics/tactics.mli", 172, 7986, 7986), ("tactics/tactics.mli", 172, 7986, 8035), 0), 0, Tag1 ("Tactics", 80)), 0); (("unfold_in_concl", 2022), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -723); (Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -724)]), 100000000, 0, -722)], (0)), 100000000, 0, -721), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -720)], (0)), 100000000, 0, -719), 0), 100000000, 0, -718), 0, (("tactics/tactics.mli", 173, 8036, 8036), ("tactics/tactics.mli", 174, 8060, 8141), 0), 0, Tag1 ("Tactics", 81)), 0); (("unfold_in_hyp", 2023), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -716); (Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -717)]), 100000000, 0, -715)], (0)), 100000000, 0, -714), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "hyp_location"), 0, (0)), 100000000, 0, -713), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -712)], (0)), 100000000, 0, -711), 0), 100000000, 0, -710), 0), 100000000, 0, -709), 0, (("tactics/tactics.mli", 175, 8142, 8142), ("tactics/tactics.mli", 176, 8166, 8263), 0), 0, Tag1 ("Tactics", 82)), 0); (("unfold_option", 2024), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -707); (Tag3 (Tag1 ((Tag2 ("Tacred")), "evaluable_global_reference"), 0, (0)), 100000000, 0, -708)]), 100000000, 0, -706)], (0)), 100000000, 0, -705), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -704), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -703)], (0)), 100000000, 0, -702), 0), 100000000, 0, -701), 0), 100000000, 0, -700), 0, (("tactics/tactics.mli", 177, 8264, 8264), ("tactics/tactics.mli", 178, 8288, 8386), 0), 0, Tag1 ("Tactics", 83)), 0); (("change", 2025), ((Tag1 (("check"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -699), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Pattern")), "constr_pattern"), 0, (0)), 100000000, 0, -698)], (0)), 100000000, 0, -697), (Tag1 (0, (Tag3 ((("change_arg", 2000)), 0, (0)), 100000000, 0, -696), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -695), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -694)], (0)), 100000000, 0, -693), 0), 100000000, 0, -692), 0), 100000000, 0, -691), 0), 100000000, 0, -690), 0), 100000000, 0, -689), 0, (("tactics/tactics.mli", 179, 8387, 8387), ("tactics/tactics.mli", 180, 8411, 8497), 0), 0, Tag1 ("Tactics", 84)), 0); (("pattern_option", 2026), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -687); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -688)]), 100000000, 0, -686)], (0)), 100000000, 0, -685), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "goal_location"), 0, (0)), 100000000, 0, -684), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -683)], (0)), 100000000, 0, -682), 0), 100000000, 0, -681), 0), 100000000, 0, -680), 0, (("tactics/tactics.mli", 181, 8498, 8498), ("tactics/tactics.mli", 182, 8522, 8593), 0), 0, Tag1 ("Tactics", 85)), 0); (("reduce", 2027), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Redexpr")), "red_expr"), 0, (0)), 100000000, 0, -679), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -678), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -677)], (0)), 100000000, 0, -676), 0), 100000000, 0, -675), 0), 100000000, 0, -674), 0, (("tactics/tactics.mli", 183, 8594, 8594), ("tactics/tactics.mli", 183, 8594, 8661), 0), 0, Tag1 ("Tactics", 86)), 0); (("unfold_constr", 2028), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -673), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -672)], (0)), 100000000, 0, -671), 0), 100000000, 0, -670), 0, (("tactics/tactics.mli", 184, 8662, 8662), ("tactics/tactics.mli", 184, 8662, 8720), 0), 0, Tag1 ("Tactics", 87)), 0); (("clear", 2029), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -669)], (0)), 100000000, 0, -668), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -667)], (0)), 100000000, 0, -666), 0), 100000000, 0, -665), 0, (("tactics/tactics.mli", 188, 8770, 8770), ("tactics/tactics.mli", 188, 8770, 8824), 0), 0, Tag1 ("Tactics", 88)), 0); (("clear_body", 2030), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -664)], (0)), 100000000, 0, -663), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -662)], (0)), 100000000, 0, -661), 0), 100000000, 0, -660), 0, (("tactics/tactics.mli", 189, 8825, 8825), ("tactics/tactics.mli", 189, 8825, 8879), 0), 0, Tag1 ("Tactics", 89)), 0); (("unfold_body", 2031), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -659), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -658)], (0)), 100000000, 0, -657), 0), 100000000, 0, -656), 0, (("tactics/tactics.mli", 190, 8880, 8880), ("tactics/tactics.mli", 190, 8880, 8929), 0), 0, Tag1 ("Tactics", 90)), 0); (("keep", 2032), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -655)], (0)), 100000000, 0, -654), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -653)], (0)), 100000000, 0, -652), 0), 100000000, 0, -651), 0, (("tactics/tactics.mli", 191, 8930, 8930), ("tactics/tactics.mli", 191, 8930, 8984), 0), 0, Tag1 ("Tactics", 91)), 0); (("apply_clear_request", 2033), ((Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -650), (Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -649), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -648)], (0)), 100000000, 0, -647), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -646)], (0)), 100000000, 0, -645), 0), 100000000, 0, -644), 0), 100000000, 0, -643), 0), 100000000, 0, -642), 0, (("tactics/tactics.mli", 192, 8985, 8985), ("tactics/tactics.mli", 192, 8985, 9069), 0), 0, Tag1 ("Tactics", 92)), 0); (("specialize", 2034), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -641)], (0)), 100000000, 0, -640), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern"), 0, (0)), 100000000, 0, -639)], (0)), 100000000, 0, -638), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -637)], (0)), 100000000, 0, -636), 0), 100000000, 0, -635), 0), 100000000, 0, -634), 0, (("tactics/tactics.mli", 194, 9071, 9071), ("tactics/tactics.mli", 194, 9071, 9160), 0), 0, Tag1 ("Tactics", 93)), 0); (("move_hyp", 2035), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -633), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Logic")), "move_location"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -632)], (0)), 100000000, 0, -631), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -630)], (0)), 100000000, 0, -629), 0), 100000000, 0, -628), 0), 100000000, 0, -627), 0, (("tactics/tactics.mli", 196, 9162, 9162), ("tactics/tactics.mli", 196, 9162, 9239), 0), 0, Tag1 ("Tactics", 94)), 0); (("rename_hyp", 2036), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -625); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -626)]), 100000000, 0, -624)], (0)), 100000000, 0, -623), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -622)], (0)), 100000000, 0, -621), 0), 100000000, 0, -620), 0, (("tactics/tactics.mli", 197, 9240, 9240), ("tactics/tactics.mli", 197, 9240, 9303), 0), 0, Tag1 ("Tactics", 95)), 0); (("revert", 2037), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -619)], (0)), 100000000, 0, -618), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -617)], (0)), 100000000, 0, -616), 0), 100000000, 0, -615), 0, (("tactics/tactics.mli", 199, 9305, 9305), ("tactics/tactics.mli", 199, 9305, 9359), 0), 0, Tag1 ("Tactics", 96)), 0); (("apply_type", 2038), ((Tag1 (("typecheck"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -614), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -613), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -612)], (0)), 100000000, 0, -611), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -610)], (0)), 100000000, 0, -609), 0), 100000000, 0, -608), 0), 100000000, 0, -607), 0), 100000000, 0, -606), 0, (("tactics/tactics.mli", 203, 9394, 9394), ("tactics/tactics.mli", 203, 9394, 9475), 0), 0, Tag1 ("Tactics", 97)), 0); (("bring_hyps", 2039), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "named_context"), 0, (0)), 100000000, 0, -605), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -604)], (0)), 100000000, 0, -603), 0), 100000000, 0, -602), 0, (("tactics/tactics.mli", 204, 9476, 9476), ("tactics/tactics.mli", 204, 9476, 9531), 0), 0, Tag1 ("Tactics", 98)), 0); (("apply", 2040), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -601), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -600)], (0)), 100000000, 0, -599), 0), 100000000, 0, -598), 0, (("tactics/tactics.mli", 206, 9533, 9533), ("tactics/tactics.mli", 206, 9533, 9592), 0), 0, Tag1 ("Tactics", 99)), 0); (("eapply", 2041), ((Tag1 (Tag1 ("with_classes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -597)], (0)), 100000000, 0, -596), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -595), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -594)], (0)), 100000000, 0, -593), 0), 100000000, 0, -592), 0), 100000000, 0, -591), 0, (("tactics/tactics.mli", 207, 9593, 9593), ("tactics/tactics.mli", 207, 9593, 9659), 0), 0, Tag1 ("Tactics", 100)), 0); (("apply_with_bindings_gen", 2042), ((Tag1 (Tag1 ("with_classes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -590)], (0)), 100000000, 0, -589), (Tag1 (0, (Tag3 ((("advanced_flag", 1979)), 0, (0)), 100000000, 0, -588), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -587), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -583); (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -586)], (0)), 100000000, 0, -585)], (0)), 100000000, 0, -584)]), 100000000, 0, -582)], (0)), 100000000, 0, -581), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -580)], (0)), 100000000, 0, -579), 0), 100000000, 0, -578), 0), 100000000, 0, -577), 0), 100000000, 0, -576), 0), 100000000, 0, -575), 0, (("tactics/tactics.mli", 209, 9661, 9661), ("tactics/tactics.mli", 210, 9691, 9818), 0), 0, Tag1 ("Tactics", 101)), 0); (("apply_with_delayed_bindings_gen", 2043), ((Tag1 (0, (Tag3 ((("advanced_flag", 1979)), 0, (0)), 100000000, 0, -574), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -573), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -570); (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr_with_bindings"), 0, (0)), 100000000, 0, -572)], (0)), 100000000, 0, -571)]), 100000000, 0, -569)], (0)), 100000000, 0, -568), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -567)], (0)), 100000000, 0, -566), 0), 100000000, 0, -565), 0), 100000000, 0, -564), 0), 100000000, 0, -563), 0, (("tactics/tactics.mli", 212, 9820, 9820), ("tactics/tactics.mli", 213, 9858, 9976), 0), 0, Tag1 ("Tactics", 102)), 0); (("apply_with_bindings", 2044), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -562)], (0)), 100000000, 0, -561), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -560)], (0)), 100000000, 0, -559), 0), 100000000, 0, -558), 0, (("tactics/tactics.mli", 215, 9978, 9978), ("tactics/tactics.mli", 215, 9978, 10051), 0), 0, Tag1 ("Tactics", 103)), 0); (("eapply_with_bindings", 2045), ((Tag1 (Tag1 ("with_classes"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -557)], (0)), 100000000, 0, -556), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -555)], (0)), 100000000, 0, -554), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -553)], (0)), 100000000, 0, -552), 0), 100000000, 0, -551), 0), 100000000, 0, -550), 0, (("tactics/tactics.mli", 216, 10052, 10052), ("tactics/tactics.mli", 216, 10052, 10146), 0), 0, Tag1 ("Tactics", 104)), 0); (("cut_and_apply", 2046), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -549), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -548)], (0)), 100000000, 0, -547), 0), 100000000, 0, -546), 0, (("tactics/tactics.mli", 218, 10148, 10148), ("tactics/tactics.mli", 218, 10148, 10207), 0), 0, Tag1 ("Tactics", 105)), 0); (("apply_in", 2047), ((Tag1 (0, (Tag3 ((("advanced_flag", 1979)), 0, (0)), 100000000, 0, -545), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -544), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -543), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -539); (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -542)], (0)), 100000000, 0, -541)], (0)), 100000000, 0, -540)]), 100000000, 0, -538)], (0)), 100000000, 0, -537), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern"), 0, (0)), 100000000, 0, -536)], (0)), 100000000, 0, -535), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -534)], (0)), 100000000, 0, -533), 0), 100000000, 0, -532), 0), 100000000, 0, -531), 0), 100000000, 0, -530), 0), 100000000, 0, -529), 0), 100000000, 0, -528), 0, (("tactics/tactics.mli", 220, 10209, 10209), ("tactics/tactics.mli", 223, 10320, 10369), 0), 0, Tag1 ("Tactics", 106)), 0); (("apply_delayed_in", 2048), ((Tag1 (0, (Tag3 ((("advanced_flag", 1979)), 0, (0)), 100000000, 0, -527), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -526), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -525), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -522); (Tag3 (Tag1 ((Tag2 ("CAst")), "t"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr_with_bindings"), 0, (0)), 100000000, 0, -524)], (0)), 100000000, 0, -523)]), 100000000, 0, -521)], (0)), 100000000, 0, -520), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern"), 0, (0)), 100000000, 0, -519)], (0)), 100000000, 0, -518), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -517)], (0)), 100000000, 0, -516), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -515)], (0)), 100000000, 0, -514), 0), 100000000, 0, -513), 0), 100000000, 0, -512), 0), 100000000, 0, -511), 0), 100000000, 0, -510), 0), 100000000, 0, -509), 0), 100000000, 0, -508), 0, (("tactics/tactics.mli", 225, 10371, 10371), ("tactics/tactics.mli", 228, 10503, 10577), 0), 0, Tag1 ("Tactics", 107)), 0); Tag1 (("elim_scheme", 2049), (0, 0, [[(("elimt", 1677), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -492), (("tactics/tactics.mli", 258, 11921, 11923), ("tactics/tactics.mli", 258, 11921, 11936), 0), 0, Tag1 ("Tactics", 109)); (("indref", 1678), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -494)], (0)), 100000000, 0, -493), (("tactics/tactics.mli", 259, 11937, 11939), ("tactics/tactics.mli", 259, 11937, 11964), 0), 0, Tag1 ("Tactics", 110)); (("params", 1679), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -495), (("tactics/tactics.mli", 260, 11965, 11967), ("tactics/tactics.mli", 260, 11965, 11987), 0), 0, Tag1 ("Tactics", 111)); (("nparams", 1680), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -496), (("tactics/tactics.mli", 261, 12041, 12043), ("tactics/tactics.mli", 261, 12041, 12056), 0), 0, Tag1 ("Tactics", 112)); (("predicates", 1681), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -497), (("tactics/tactics.mli", 262, 12099, 12101), ("tactics/tactics.mli", 262, 12099, 12125), 0), 0, Tag1 ("Tactics", 113)); (("npredicates", 1682), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -498), (("tactics/tactics.mli", 263, 12179, 12181), ("tactics/tactics.mli", 263, 12179, 12198), 0), 0, Tag1 ("Tactics", 114)); (("branches", 1683), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -499), (("tactics/tactics.mli", 264, 12237, 12239), ("tactics/tactics.mli", 264, 12237, 12261), 0), 0, Tag1 ("Tactics", 115)); (("nbranches", 1684), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -500), (("tactics/tactics.mli", 265, 12292, 12294), ("tactics/tactics.mli", 265, 12292, 12309), 0), 0, Tag1 ("Tactics", 116)); (("args", 1685), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_context"), 0, (0)), 100000000, 0, -501), (("tactics/tactics.mli", 266, 12348, 12350), ("tactics/tactics.mli", 266, 12348, 12368), 0), 0, Tag1 ("Tactics", 117)); (("nargs", 1686), 0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -502), (("tactics/tactics.mli", 267, 12411, 12413), ("tactics/tactics.mli", 267, 12411, 12424), 0), 0, Tag1 ("Tactics", 118)); (("indarg", 1687), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "rel_declaration"), 0, (0)), 100000000, 0, -504)], (0)), 100000000, 0, -503), (("tactics/tactics.mli", 268, 12468, 12470), ("tactics/tactics.mli", 268, 12468, 12501), 0), 0, Tag1 ("Tactics", 119)); (("concl", 1688), 0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -505), (("tactics/tactics.mli", 270, 12628, 12630), ("tactics/tactics.mli", 270, 12628, 12643), 0), 0, Tag1 ("Tactics", 120)); (("indarg_in_concl", 1689), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -506), (("tactics/tactics.mli", 272, 12772, 12774), ("tactics/tactics.mli", 272, 12772, 12796), 0), 0, Tag1 ("Tactics", 121)); (("farg_in_concl", 1690), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -507), (("tactics/tactics.mli", 273, 12853, 12855), ("tactics/tactics.mli", 273, 12853, 12875), 0), 0, Tag1 ("Tactics", 122))]], 1, 0, 0, 0, 0, 0, (("tactics/tactics.mli", 257, 11900, 11900), ("tactics/tactics.mli", 274, 12938, 12939), 0), 0, 0, 0, Tag1 ("Tactics", 108)), 1, 0); (("compute_elim_sig", 2050), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -491), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -490), (Tag3 ((("elim_scheme", 2049)), 0, (0)), 100000000, 0, -489), 0), 100000000, 0, -488), 0), 100000000, 0, -487), 0, (("tactics/tactics.mli", 276, 12941, 12941), ("tactics/tactics.mli", 276, 12941, 12996), 0), 0, Tag1 ("Tactics", 123)), 0); (("general_elim_clause", 2051), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -486), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Unification")), "unify_flags"), 0, (0)), 100000000, 0, -485), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -484)], (0)), 100000000, 0, -483), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Constr")), "metavariable"), 0, (0)), 100000000, 0, -479); (Tag3 (Tag1 ((Tag2 ("Evd")), "clbinding"), 0, (0)), 100000000, 0, -480)]), 100000000, 0, -478)], (0)), 100000000, 0, -477); (Tag3 (Tag1 ((Tag2 ("EConstr")), "t"), 0, (0)), 100000000, 0, -481); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -482)]), 100000000, 0, -476), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Constant"), "t"), 0, (0)), 100000000, 0, -475), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -474)], (0)), 100000000, 0, -473), 0), 100000000, 0, -472), 0), 100000000, 0, -471), 0), 100000000, 0, -470), 0), 100000000, 0, -469), 0), 100000000, 0, -468), 0, (("tactics/tactics.mli", 278, 12998, 12998), ("tactics/tactics.mli", 279, 13068, 13174), 0), 0, Tag1 ("Tactics", 124)), 0); (("default_elim", 2052), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -467), (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -466), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -465)], (0)), 100000000, 0, -464), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -463)], (0)), 100000000, 0, -462), 0), 100000000, 0, -461), 0), 100000000, 0, -460), 0), 100000000, 0, -459), 0, (("tactics/tactics.mli", 281, 13176, 13176), ("tactics/tactics.mli", 282, 13248, 13271), 0), 0, Tag1 ("Tactics", 125)), 0); (("simplest_elim", 2053), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -458), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -457)], (0)), 100000000, 0, -456), 0), 100000000, 0, -455), 0, (("tactics/tactics.mli", 283, 13272, 13272), ("tactics/tactics.mli", 283, 13272, 13323), 0), 0, Tag1 ("Tactics", 126)), 0); (("elim", 2054), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -454), (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -453), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -452)], (0)), 100000000, 0, -451), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -450)], (0)), 100000000, 0, -449)], (0)), 100000000, 0, -448), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -447)], (0)), 100000000, 0, -446), 0), 100000000, 0, -445), 0), 100000000, 0, -444), 0), 100000000, 0, -443), 0), 100000000, 0, -442), 0, (("tactics/tactics.mli", 284, 13324, 13324), ("tactics/tactics.mli", 285, 13335, 13441), 0), 0, Tag1 ("Tactics", 127)), 0); (("induction", 2055), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -441), (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -440), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -439), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern"), 0, (0)), 100000000, 0, -438)], (0)), 100000000, 0, -437), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -436)], (0)), 100000000, 0, -435)], (0)), 100000000, 0, -434), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -433)], (0)), 100000000, 0, -432), 0), 100000000, 0, -431), 0), 100000000, 0, -430), 0), 100000000, 0, -429), 0), 100000000, 0, -428), 0), 100000000, 0, -427), 0, (("tactics/tactics.mli", 287, 13443, 13443), ("tactics/tactics.mli", 288, 13528, 13582), 0), 0, Tag1 ("Tactics", 128)), 0); (("general_case_analysis", 2056), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -426), (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -425), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -424)], (0)), 100000000, 0, -423), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -422)], (0)), 100000000, 0, -421), 0), 100000000, 0, -420), 0), 100000000, 0, -419), 0), 100000000, 0, -418), 0, (("tactics/tactics.mli", 292, 13620, 13620), ("tactics/tactics.mli", 292, 13620, 13722), 0), 0, Tag1 ("Tactics", 129)), 0); (("simplest_case", 2057), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -417), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -416)], (0)), 100000000, 0, -415), 0), 100000000, 0, -414), 0, (("tactics/tactics.mli", 293, 13723, 13723), ("tactics/tactics.mli", 293, 13723, 13782), 0), 0, Tag1 ("Tactics", 130)), 0); (("destruct", 2058), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -413), (Tag1 (0, (Tag3 ((("clear_flag", 1980)), 0, (0)), 100000000, 0, -412), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -411), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern"), 0, (0)), 100000000, 0, -410)], (0)), 100000000, 0, -409), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -408)], (0)), 100000000, 0, -407)], (0)), 100000000, 0, -406), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -405)], (0)), 100000000, 0, -404), 0), 100000000, 0, -403), 0), 100000000, 0, -402), 0), 100000000, 0, -401), 0), 100000000, 0, -400), 0), 100000000, 0, -399), 0, (("tactics/tactics.mli", 295, 13784, 13784), ("tactics/tactics.mli", 296, 13868, 13922), 0), 0, Tag1 ("Tactics", 131)), 0); (("induction_destruct", 2059), ((Tag1 (0, (Tag3 ((("rec_flag", 1978)), 0, (0)), 100000000, 0, -398), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -397), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("destruction_arg", 1982)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open_constr_with_bindings"), 0, (0)), 100000000, 0, -386)], (0)), 100000000, 0, -385); (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_naming"), 0, (0)), 100000000, 0, -389)], (0)), 100000000, 0, -388); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "or_and_intro_pattern"), 0, (0)), 100000000, 0, -391)], (0)), 100000000, 0, -390)]), 100000000, 0, -387); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -393)], (0)), 100000000, 0, -392)]), 100000000, 0, -384)], (0)), 100000000, 0, -383); (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -396)], (0)), 100000000, 0, -395)], (0)), 100000000, 0, -394)]), 100000000, 0, -382), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -381)], (0)), 100000000, 0, -380), 0), 100000000, 0, -379), 0), 100000000, 0, -378), 0), 100000000, 0, -377), 0, (("tactics/tactics.mli", 302, 14037, 14037), ("tactics/tactics.mli", 306, 14233, 14287), 0), 0, Tag1 ("Tactics", 132)), 0); (("case_type", 2060), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -376), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -375)], (0)), 100000000, 0, -374), 0), 100000000, 0, -373), 0, (("tactics/tactics.mli", 310, 14353, 14353), ("tactics/tactics.mli", 310, 14353, 14407), 0), 0, Tag1 ("Tactics", 133)), 0); (("elim_type", 2061), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -372), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -371)], (0)), 100000000, 0, -370), 0), 100000000, 0, -369), 0, (("tactics/tactics.mli", 311, 14408, 14408), ("tactics/tactics.mli", 311, 14408, 14462), 0), 0, Tag1 ("Tactics", 134)), 0); (("exfalso", 2062), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -368)], (0)), 100000000, 0, -367), 0, (("tactics/tactics.mli", 312, 14463, 14463), ("tactics/tactics.mli", 312, 14463, 14498), 0), 0, Tag1 ("Tactics", 135)), 0); (("constructor_tac", 2063), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -366), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -365)], (0)), 100000000, 0, -364), (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -363), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -362)], (0)), 100000000, 0, -361), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -360)], (0)), 100000000, 0, -359), 0), 100000000, 0, -358), 0), 100000000, 0, -357), 0), 100000000, 0, -356), 0), 100000000, 0, -355), 0, (("tactics/tactics.mli", 316, 14534, 14534), ("tactics/tactics.mli", 317, 14596, 14638), 0), 0, Tag1 ("Tactics", 136)), 0); (("any_constructor", 2064), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -354), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -353)], (0)), 100000000, 0, -352)], (0)), 100000000, 0, -351), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -350)], (0)), 100000000, 0, -349), 0), 100000000, 0, -348), 0), 100000000, 0, -347), 0, (("tactics/tactics.mli", 318, 14639, 14639), ("tactics/tactics.mli", 318, 14639, 14733), 0), 0, Tag1 ("Tactics", 137)), 0); (("one_constructor", 2065), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -346), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -345)], (0)), 100000000, 0, -344), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -343)], (0)), 100000000, 0, -342), 0), 100000000, 0, -341), 0), 100000000, 0, -340), 0, (("tactics/tactics.mli", 319, 14734, 14734), ("tactics/tactics.mli", 319, 14734, 14809), 0), 0, Tag1 ("Tactics", 138)), 0); (("left", 2066), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -339)], (0)), 100000000, 0, -338), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -337)], (0)), 100000000, 0, -336), 0), 100000000, 0, -335), 0, (("tactics/tactics.mli", 321, 14811, 14811), ("tactics/tactics.mli", 321, 14811, 14878), 0), 0, Tag1 ("Tactics", 139)), 0); (("right", 2067), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -334)], (0)), 100000000, 0, -333), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -332)], (0)), 100000000, 0, -331), 0), 100000000, 0, -330), 0, (("tactics/tactics.mli", 322, 14879, 14879), ("tactics/tactics.mli", 322, 14879, 14946), 0), 0, Tag1 ("Tactics", 140)), 0); (("split", 2068), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -329)], (0)), 100000000, 0, -328), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -327)], (0)), 100000000, 0, -326), 0), 100000000, 0, -325), 0, (("tactics/tactics.mli", 323, 14947, 14947), ("tactics/tactics.mli", 323, 14947, 15014), 0), 0, Tag1 ("Tactics", 141)), 0); (("left_with_bindings", 2069), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -324), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -323)], (0)), 100000000, 0, -322), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -321)], (0)), 100000000, 0, -320), 0), 100000000, 0, -319), 0), 100000000, 0, -318), 0, (("tactics/tactics.mli", 325, 15016, 15016), ("tactics/tactics.mli", 325, 15016, 15096), 0), 0, Tag1 ("Tactics", 142)), 0); (("right_with_bindings", 2070), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -317), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -316)], (0)), 100000000, 0, -315), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -314)], (0)), 100000000, 0, -313), 0), 100000000, 0, -312), 0), 100000000, 0, -311), 0, (("tactics/tactics.mli", 326, 15097, 15097), ("tactics/tactics.mli", 326, 15097, 15177), 0), 0, Tag1 ("Tactics", 143)), 0); (("split_with_bindings", 2071), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -310), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -309)], (0)), 100000000, 0, -308)], (0)), 100000000, 0, -307), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -306)], (0)), 100000000, 0, -305), 0), 100000000, 0, -304), 0), 100000000, 0, -303), 0, (("tactics/tactics.mli", 327, 15178, 15178), ("tactics/tactics.mli", 327, 15178, 15263), 0), 0, Tag1 ("Tactics", 144)), 0); (("split_with_delayed_bindings", 2072), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -302), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "delayed_open"), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -301)], (0)), 100000000, 0, -300)], (0)), 100000000, 0, -299)], (0)), 100000000, 0, -298), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -297)], (0)), 100000000, 0, -296), 0), 100000000, 0, -295), 0), 100000000, 0, -294), 0, (("tactics/tactics.mli", 328, 15264, 15264), ("tactics/tactics.mli", 328, 15264, 15370), 0), 0, Tag1 ("Tactics", 145)), 0); (("simplest_left", 2073), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -293)], (0)), 100000000, 0, -292), 0, (("tactics/tactics.mli", 330, 15372, 15372), ("tactics/tactics.mli", 330, 15372, 15420), 0), 0, Tag1 ("Tactics", 146)), 0); (("simplest_right", 2074), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -291)], (0)), 100000000, 0, -290), 0, (("tactics/tactics.mli", 331, 15421, 15421), ("tactics/tactics.mli", 331, 15421, 15469), 0), 0, Tag1 ("Tactics", 147)), 0); (("simplest_split", 2075), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -289)], (0)), 100000000, 0, -288), 0, (("tactics/tactics.mli", 332, 15470, 15470), ("tactics/tactics.mli", 332, 15470, 15518), 0), 0, Tag1 ("Tactics", 148)), 0); (("setoid_reflexivity", 2076), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -287)], (0)), 100000000, 0, -286)], (0)), 100000000, 0, -285), 0, (("tactics/tactics.mli", 336, 15551, 15551), ("tactics/tactics.mli", 336, 15551, 15604), 0), 0, Tag1 ("Tactics", 149)), 0); (("reflexivity_red", 2077), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -284), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -283)], (0)), 100000000, 0, -282), 0), 100000000, 0, -281), 0, (("tactics/tactics.mli", 337, 15605, 15605), ("tactics/tactics.mli", 337, 15605, 15668), 0), 0, Tag1 ("Tactics", 150)), 0); (("reflexivity", 2078), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -280)], (0)), 100000000, 0, -279), 0, (("tactics/tactics.mli", 338, 15669, 15669), ("tactics/tactics.mli", 338, 15669, 15724), 0), 0, Tag1 ("Tactics", 151)), 0); (("intros_reflexivity", 2079), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -278)], (0)), 100000000, 0, -277), 0, (("tactics/tactics.mli", 339, 15725, 15725), ("tactics/tactics.mli", 339, 15725, 15780), 0), 0, Tag1 ("Tactics", 152)), 0); (("setoid_symmetry", 2080), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -276)], (0)), 100000000, 0, -275)], (0)), 100000000, 0, -274), 0, (("tactics/tactics.mli", 341, 15782, 15782), ("tactics/tactics.mli", 341, 15782, 15832), 0), 0, Tag1 ("Tactics", 153)), 0); (("symmetry_red", 2081), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -273), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -272)], (0)), 100000000, 0, -271), 0), 100000000, 0, -270), 0, (("tactics/tactics.mli", 342, 15833, 15833), ("tactics/tactics.mli", 342, 15833, 15896), 0), 0, Tag1 ("Tactics", 154)), 0); (("symmetry", 2082), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -269)], (0)), 100000000, 0, -268), 0, (("tactics/tactics.mli", 343, 15897, 15897), ("tactics/tactics.mli", 343, 15897, 15952), 0), 0, Tag1 ("Tactics", 155)), 0); (("setoid_symmetry_in", 2083), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -267), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -266)], (0)), 100000000, 0, -265), 0), 100000000, 0, -264)], (0)), 100000000, 0, -263), 0, (("tactics/tactics.mli", 344, 15953, 15953), ("tactics/tactics.mli", 344, 15953, 16016), 0), 0, Tag1 ("Tactics", 156)), 0); (("intros_symmetry", 2084), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -262), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -261)], (0)), 100000000, 0, -260), 0), 100000000, 0, -259), 0, (("tactics/tactics.mli", 345, 16017, 16017), ("tactics/tactics.mli", 345, 16017, 16082), 0), 0, Tag1 ("Tactics", 157)), 0); (("setoid_transitivity", 2085), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -258)], (0)), 100000000, 0, -257), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -256)], (0)), 100000000, 0, -255), 0), 100000000, 0, -254)], (0)), 100000000, 0, -253), 0, (("tactics/tactics.mli", 347, 16084, 16084), ("tactics/tactics.mli", 347, 16084, 16157), 0), 0, Tag1 ("Tactics", 158)), 0); (("transitivity_red", 2086), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -252), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -251)], (0)), 100000000, 0, -250), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -249)], (0)), 100000000, 0, -248), 0), 100000000, 0, -247), 0), 100000000, 0, -246), 0, (("tactics/tactics.mli", 348, 16158, 16158), ("tactics/tactics.mli", 348, 16158, 16238), 0), 0, Tag1 ("Tactics", 159)), 0); (("transitivity", 2087), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -245), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -244)], (0)), 100000000, 0, -243), 0), 100000000, 0, -242), 0, (("tactics/tactics.mli", 349, 16239, 16239), ("tactics/tactics.mli", 349, 16239, 16304), 0), 0, Tag1 ("Tactics", 160)), 0); (("etransitivity", 2088), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -241)], (0)), 100000000, 0, -240), 0, (("tactics/tactics.mli", 350, 16305, 16305), ("tactics/tactics.mli", 350, 16305, 16360), 0), 0, Tag1 ("Tactics", 161)), 0); (("intros_transitivity", 2089), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -239)], (0)), 100000000, 0, -238), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -237)], (0)), 100000000, 0, -236), 0), 100000000, 0, -235), 0, (("tactics/tactics.mli", 351, 16361, 16361), ("tactics/tactics.mli", 351, 16361, 16433), 0), 0, Tag1 ("Tactics", 162)), 0); (("assert_before_replacing", 2090), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -234), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -233), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -232)], (0)), 100000000, 0, -231), 0), 100000000, 0, -230), 0), 100000000, 0, -229), 0, (("tactics/tactics.mli", 355, 16461, 16461), ("tactics/tactics.mli", 355, 16461, 16528), 0), 0, Tag1 ("Tactics", 163)), 0); (("assert_after_replacing", 2091), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -228), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -227), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -226)], (0)), 100000000, 0, -225), 0), 100000000, 0, -224), 0), 100000000, 0, -223), 0, (("tactics/tactics.mli", 356, 16529, 16529), ("tactics/tactics.mli", 356, 16529, 16596), 0), 0, Tag1 ("Tactics", 164)), 0); (("assert_before", 2092), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -222), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -221), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -220)], (0)), 100000000, 0, -219), 0), 100000000, 0, -218), 0), 100000000, 0, -217), 0, (("tactics/tactics.mli", 357, 16597, 16597), ("tactics/tactics.mli", 357, 16597, 16657), 0), 0, Tag1 ("Tactics", 165)), 0); (("assert_after", 2093), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -216), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -215), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -214)], (0)), 100000000, 0, -213), 0), 100000000, 0, -212), 0), 100000000, 0, -211), 0, (("tactics/tactics.mli", 358, 16658, 16658), ("tactics/tactics.mli", 358, 16658, 16718), 0), 0, Tag1 ("Tactics", 166)), 0); (("assert_by", 2094), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -210), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -209), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -208)], (0)), 100000000, 0, -207), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -206)], (0)), 100000000, 0, -205), 0), 100000000, 0, -204), 0), 100000000, 0, -203), 0), 100000000, 0, -202), 0, (("tactics/tactics.mli", 363, 16854, 16854), ("tactics/tactics.mli", 364, 16915, 16938), 0), 0, Tag1 ("Tactics", 167)), 0); (("enough_by", 2095), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -201), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -200), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -199)], (0)), 100000000, 0, -198), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -197)], (0)), 100000000, 0, -196), 0), 100000000, 0, -195), 0), 100000000, 0, -194), 0), 100000000, 0, -193), 0, (("tactics/tactics.mli", 365, 16939, 16939), ("tactics/tactics.mli", 366, 17000, 17023), 0), 0, Tag1 ("Tactics", 168)), 0); (("pose_proof", 2096), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -192), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -191), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -190)], (0)), 100000000, 0, -189), 0), 100000000, 0, -188), 0), 100000000, 0, -187), 0, (("tactics/tactics.mli", 367, 17024, 17024), ("tactics/tactics.mli", 368, 17061, 17084), 0), 0, Tag1 ("Tactics", 169)), 0); (("forward", 2097), ((Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -186), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -185)], (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183)], (0)), 100000000, 0, -182), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern"), 0, (0)), 100000000, 0, -181)], (0)), 100000000, 0, -180), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -179), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -178)], (0)), 100000000, 0, -177), 0), 100000000, 0, -176), 0), 100000000, 0, -175), 0), 100000000, 0, -174), 0), 100000000, 0, -173), 0, (("tactics/tactics.mli", 372, 17164, 17164), ("tactics/tactics.mli", 373, 17227, 17284), 0), 0, Tag1 ("Tactics", 170)), 0); (("cut", 2098), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -172), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -171)], (0)), 100000000, 0, -170), 0), 100000000, 0, -169), 0, (("tactics/tactics.mli", 377, 17350, 17350), ("tactics/tactics.mli", 377, 17350, 17397), 0), 0, Tag1 ("Tactics", 171)), 0); (("pose_tac", 2099), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -168), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -167), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("tactics/tactics.mli", 381, 17450, 17450), ("tactics/tactics.mli", 381, 17450, 17506), 0), 0, Tag1 ("Tactics", 172)), 0); (("letin_tac", 2100), ((Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_naming"), 0, (0)), 100000000, 0, -162)]), 100000000, 0, -160)], (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -158), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -157), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -156)], (0)), 100000000, 0, -155), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -154), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -153)], (0)), 100000000, 0, -152), 0), 100000000, 0, -151), 0), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0), 100000000, 0, -147), 0, (("tactics/tactics.mli", 383, 17508, 17508), ("tactics/tactics.mli", 384, 17564, 17633), 0), 0, Tag1 ("Tactics", 173)), 0); (("letin_pat_tac", 2101), ((Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -144); (Tag3 (Tag1 ((Tag2 ("Tactypes")), "intro_pattern_naming"), 0, (0)), 100000000, 0, -145)]), 100000000, 0, -143)], (0)), 100000000, 0, -142), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -141), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -139)], (0)), 100000000, 0, -138); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -140)]), 100000000, 0, -137), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -136), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -135)], (0)), 100000000, 0, -134), 0), 100000000, 0, -133), 0), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0), 100000000, 0, -129), 0, (("tactics/tactics.mli", 388, 17706, 17706), ("tactics/tactics.mli", 389, 17780, 17853), 0), 0, Tag1 ("Tactics", 174)), 0); (("generalize", 2102), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -128)], (0)), 100000000, 0, -127), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("tactics/tactics.mli", 393, 17888, 17888), ("tactics/tactics.mli", 393, 17888, 17946), 0), 0, Tag1 ("Tactics", 175)), 0); (("generalize_gen", 2103), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "with_occurrences"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -122)], (0)), 100000000, 0, -121); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -123)]), 100000000, 0, -120)], (0)), 100000000, 0, -119), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -118)], (0)), 100000000, 0, -117), 0), 100000000, 0, -116), 0, (("tactics/tactics.mli", 394, 17947, 17947), ("tactics/tactics.mli", 394, 17947, 18039), 0), 0, Tag1 ("Tactics", 176)), 0); (("new_generalize_gen", 2104), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Locus")), "occurrences"), 0, (0)), 100000000, 0, -113); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -114)]), 100000000, 0, -112); (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Name"), "t"), 0, (0)), 100000000, 0, -115)]), 100000000, 0, -111)], (0)), 100000000, 0, -110), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108), 0), 100000000, 0, -107), 0, (("tactics/tactics.mli", 396, 18041, 18041), ("tactics/tactics.mli", 396, 18041, 18130), 0), 0, Tag1 ("Tactics", 177)), 0); (("generalize_dep", 2105), ((Tag1 (Tag1 ("with_let"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -104), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0), 100000000, 0, -101), 0), 100000000, 0, -100), 0, (("tactics/tactics.mli", 398, 18132, 18132), ("tactics/tactics.mli", 398, 18132, 18235), 0), 0, Tag1 ("Tactics", 178)), 0); (("constr_eq", 2106), ((Tag1 (("strict"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -98), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -97), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0), 100000000, 0, -94), 0), 100000000, 0, -93), 0), 100000000, 0, -92), 0, (("tactics/tactics.mli", 405, 18435, 18435), ("tactics/tactics.mli", 405, 18435, 18507), 0), 0, Tag1 ("Tactics", 179)), 0); (("unify", 2107), ((Tag1 (Tag1 ("state"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 ((Tag2 ("TransparentState")), "t"), 0, (0)), 100000000, 0, -91)], (0)), 100000000, 0, -90), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -89), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -88), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -87)], (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0), 100000000, 0, -84), 0), 100000000, 0, -83), 0, (("tactics/tactics.mli", 407, 18509, 18509), ("tactics/tactics.mli", 407, 18509, 18601), 0), 0, Tag1 ("Tactics", 180)), 0); (("abstract_generalize", 2108), ((Tag1 (Tag1 ("generalize_vars"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81), (Tag1 (Tag1 ("force_dep"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -80)], (0)), 100000000, 0, -79), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -78), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -77)], (0)), 100000000, 0, -76), 0), 100000000, 0, -75), 0), 100000000, 0, -74), 0), 100000000, 0, -73), 0, (("tactics/tactics.mli", 409, 18603, 18603), ("tactics/tactics.mli", 409, 18603, 18702), 0), 0, Tag1 ("Tactics", 181)), 0); (("specialize_eqs", 2109), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -72), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("tactics/tactics.mli", 410, 18703, 18703), ("tactics/tactics.mli", 410, 18703, 18753), 0), 0, Tag1 ("Tactics", 182)), 0); (("general_rewrite_clause", 2110), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("evars_flag", 1977)), 0, (0)), 100000000, 0, -67), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Tactypes")), "with_bindings"), [(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -66)], (0)), 100000000, 0, -65), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Locus")), "clause"), 0, (0)), 100000000, 0, -64), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -63)], (0)), 100000000, 0, -62), 0), 100000000, 0, -61), 0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0, (("tactics/tactics.mli", 412, 18755, 18755), ("tactics/tactics.mli", 413, 18784, 18872), 0), 0, Tag1 ("Tactics", 183)), 0); (("subst_one", 2111), ((Tag3 (Tag1 ((Tag2 ("Hook")), "t"), [(Tag1 (0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -56), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -55), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -52); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -53); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -54)]), 100000000, 0, -51), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0), 100000000, 0, -48), 0), 100000000, 0, -47), 0), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0, (("tactics/tactics.mli", 415, 18874, 18874), ("tactics/tactics.mli", 416, 18890, 18962), 0), 0, Tag1 ("Tactics", 184)), 0); (("declare_intro_decomp_eq", 2112), ((Tag1 (0, (Tag1 (0, (Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -44), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42), 0), 100000000, 0, -41), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Coqlib")), "coq_eq_data"), 0, (0)), 100000000, 0, -35); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -36); (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -38); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -39); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -40)]), 100000000, 0, -37)]), 100000000, 0, -34), (Tag1 (0, (Tag2 ([(Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -32); (Tag3 (Tag1 ((Tag2 ("EConstr")), "types"), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -30)], (0)), 100000000, 0, -29), 0), 100000000, 0, -28), 0), 100000000, 0, -27), 0), 100000000, 0, -26), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -25), 0), 100000000, 0, -24), 0, (("tactics/tactics.mli", 418, 18964, 18964), ("tactics/tactics.mli", 421, 19092, 19143), 0), 0, Tag1 ("Tactics", 185)), 0); (("with_set_strategy", 2113), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Conv_oracle")), "level"), 0, (0)), 100000000, 0, -21); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "GlobRef"), "t"), 0, (0)), 100000000, 0, -23)], (0)), 100000000, 0, -22)]), 100000000, 0, -20)], (0)), 100000000, 0, -19), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -18), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [((("a")), 100000000, 0, -17)], (0)), 100000000, 0, -16), 0), 100000000, 0, -15), 0), 100000000, 0, -14), 0, (("tactics/tactics.mli", 425, 19250, 19250), ("tactics/tactics.mli", 427, 19327, 19371), 0), 0, Tag1 ("Tactics", 186)), 0); Tag3 (("Simple", 2114), 0, (Tag1 ([(("intro", 2117), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1195), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1194)], (0)), 100000000, 0, -1193), 0), 100000000, 0, -1192), 0, (("tactics/tactics.mli", 434, 19494, 19496), ("tactics/tactics.mli", 434, 19494, 19547), 0), 0, Tag1 ("Tactics", 187)), 0); (("apply", 2118), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1191), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1190)], (0)), 100000000, 0, -1189), 0), 100000000, 0, -1188), 0, (("tactics/tactics.mli", 435, 19548, 19550), ("tactics/tactics.mli", 435, 19548, 19594), 0), 0, Tag1 ("Tactics", 188)), 0); (("eapply", 2119), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1187), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1186)], (0)), 100000000, 0, -1185), 0), 100000000, 0, -1184), 0, (("tactics/tactics.mli", 436, 19595, 19597), ("tactics/tactics.mli", 436, 19595, 19641), 0), 0, Tag1 ("Tactics", 189)), 0); (("elim", 2120), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1183), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1182)], (0)), 100000000, 0, -1181), 0), 100000000, 0, -1180), 0, (("tactics/tactics.mli", 437, 19642, 19644), ("tactics/tactics.mli", 437, 19642, 19688), 0), 0, Tag1 ("Tactics", 190)), 0); (("case", 2121), ((Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1179), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1178)], (0)), 100000000, 0, -1177), 0), 100000000, 0, -1176), 0, (("tactics/tactics.mli", 438, 19689, 19691), ("tactics/tactics.mli", 438, 19689, 19735), 0), 0, Tag1 ("Tactics", 191)), 0); (("apply_in", 2122), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Names")), "Id"), "t"), 0, (0)), 100000000, 0, -1175), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -1174), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -1173)], (0)), 100000000, 0, -1172), 0), 100000000, 0, -1171), 0), 100000000, 0, -1170), 0, (("tactics/tactics.mli", 439, 19736, 19738), ("tactics/tactics.mli", 439, 19736, 19792), 0), 0, Tag1 ("Tactics", 192)), 0)]), 0, (("tactics/tactics.mli", 431, 19416, 19416), ("tactics/tactics.mli", 441, 19794, 19797), 0), Tag1 ("Tactics", 193)), 0, 0); (("refine", 2115), ((Tag1 (("typecheck"), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -13), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -12), (Tag2 ([(Tag3 (Tag1 ((Tag2 ("Evd")), "evar_map"), 0, (0)), 100000000, 0, -10); (Tag3 (Tag1 ((Tag2 ("EConstr")), "constr"), 0, (0)), 100000000, 0, -11)]), 100000000, 0, -9), 0), 100000000, 0, -8), (Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -7)], (0)), 100000000, 0, -6), 0), 100000000, 0, -5), 0), 100000000, 0, -4), 0, (("tactics/tactics.mli", 445, 19859, 19859), ("tactics/tactics.mli", 445, 19859, 19946), 0), 0, Tag1 ("Tactics", 194)), 0); (("reduce_after_refine", 2116), ((Tag3 (Tag1 ((Tag2 ("Proofview")), "tactic"), [(Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -3)], (0)), 100000000, 0, -2), 0, (("tactics/tactics.mli", 449, 20064, 20064), ("tactics/tactics.mli", 449, 20064, 20111), 0), 0, Tag1 ("Tactics", 195)), 0)], "Tactics", [("Tactics", ("7\154?u\169\241\190R\245\187\153\020GE\029\215")); ("Z", ("\253\196\2168\027\199O\134\220\218\031'\1484\233o")); ("Vmvalues", (",8\236\232\209\245%\153\136\237\208@G}\197\017")); ("Vmemitcodes", ("wCd\138\165\158DD\241gH\236.\210\197\247")); ("Vmbytecodes", ("\025\021\151\137Dx\149W\236+[\143f\208\160\016")); ("Values", ("\215\173\011'\168;\170\245\187k\145_\006#\240\182")); ("Util", ("t\188\174\159@v=\136w\1880\153\232\"\255H")); ("Unix", (":B72R\011\005Sj\189)\011\239PH\254")); ("UnivSubst", ("\190qu\031mc\130\181\003G]\132\"\219m)")); ("UnivProblem", ("6'\161\018\181\001.\253\000\141a6\171\1727\155")); ("UnivNames", ("%\151_\209%+JM$n\001\232\194n\178N")); ("Univ", ("c\029n\183W>\138>\227\165\148(JTJ\227")); ("Unification", ("\017\027\157=\255\1914L\020\213h\154.\219\005\170")); ("Uint63", ("\204\244\226e\029S\188_.\161\238\137\136\138\236\192")); ("UState", ("SD\203\215|\136\n\251\239\208\148\215C\n\167\005")); ("UGraph", ("\156J\234h\004Y\179>M\137\192 \129\191J,")); ("Type_errors", ("7\157\162-\214M\206\196\228\191\005v\134\177\144\134")); ("TransparentState", ("\131\027{\137\195\003'\143o\025\246\180\139_;\145")); ("Tactypes", ("\143E\135*\195\151\144H\151M\011($\017\159\203")); ("Tacred", ("\133d\143\1310z\030\237\232\002\001\025\147\140\215:")); ("Summary", ("\148G\135\226\024L3\246\021\028U\146\164`\253\250")); ("Store", ("/dT\252\145\179pq\216{\181\206\190K+U")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Random", ("\020\005Xq\171\026\218\152X\135\254\023\133zK\200")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Digest", ("\023\005\031\245,\198tnG\154\179u\005\160\228\188")); ("Stdlib__Complex", ("\230N\233\014\221\199\177\014\200\251\226l\017$\015\142")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Bigarray", ("|\145\154\248\018\173\141\251\0003\184\221\224\208\140\007")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Sorts", ("\200\193Q\202.\000\190}\174\000@\030\163g\202\230")); ("Section", ("\245\207\b\021\142v=\155#w\246}\"4b\006")); ("Safe_typing", (")\250?\164\145\132\241\127\186\152h+\145\"\237l")); ("SList", ("\157\219\146R\2413\134\140 %\180\234\132\238j\212")); ("Rtree", ("\237\188\192\r\017#\226\164>+T\200\247\241\169\022")); ("Retroknowledge", ("\175\0164\136\025:\183\216\017\209\176\218\188R\023\023")); ("Reductionops", ("\179\023P\218\146Uh\014IS\196C\031q~#")); ("Redexpr", ("\181\250o\134\007\001\242+$\149)\204\226\"\0240")); ("Range", ("\218\130\001r\237\r\144\171\164\021l\155\196\143sg")); ("Proofview_monad", ("\218\196\189S\147\216\129\221\231\224v\228O\024*\239")); ("Proofview", ("\245\140U\027\236\199\199&\242\156\199YG\250tA")); ("Primred", ("\158G\192\182\224\196\144*\174y_E\165\012\137C")); ("Pretyping", ("\151\160\191\149\149Ff\195\171g\189\156\r\166n\189")); ("Pretype_errors", ("\155\229\201\176\163\234\203C\127\227\141\174j\199\200H")); ("Predicate", ("a\165$o\234\192\245\231md7\233@\t\179\203")); ("Pp", ("\196\149\221o\"\162\237B\159\160\208\154G\200-\228")); ("Pattern", ("\195C\140Wb=\022\222\208\227^K\003\020\215X")); ("Parray", ("'xl\181\245\012}\163\218\003\141\183\245o\236n")); ("Opaqueproof", ("R\001\162C\200\178s\134O\204>Q\222%\130Q")); ("NumTok", ("vd\023^\251\244B\166\145'\156\196-0\027\169")); ("Notation_term", ("5\002\017\217b\193nc>\239\239\237\244\031\173?")); ("Nativevalues", ("8:\007\025e\226c,\001\171\146#l\210\171\152")); ("Nativelib", ("V\239\205Y1\147E:,\176\196Hy\1483|")); ("Nativecode", ("\190\185\255\006m\012\210\163\138Rz\247\15283\183")); ("Names", ("P\246\241\184\239\225f\018\211=,\180\156\237\132F")); ("Namegen", ("\187\222\224T\255\020\1808-\212*\164\131\177\157x")); ("Monad", ("\244\171T\157\194p\187\160\149\195{\132\222\020\253\148")); ("Mod_subst", ("O\175\2252UD\135\221\154U\161/\231\150\236\n")); ("Ltac_pretype", ("\224\"\167\018i:U\172>\188\128$\r\252\020T")); ("Logic_monad", ("\130\157\160Q\163vQ\137\184\2242\209\128\024\220i")); ("Logic", ("\214\234\234\223\014\197\147\165\158f.$\163\164\245Z")); ("Locus", ("_\002\003W\246\181\225\242Uf\139\226\176\174\192I")); ("Loc", ("\026\163i<\000\002\235\026\158\131\187\179\019\0300a")); ("Libnames", ("fp\0255\167\162\209\153\137\161\169#\246\193\003\198")); ("Int", ("\015x\147\142S(\206:\188\"}\208\\\206\014\n")); ("Hook", ("\183\194\223\003\155\169',\187\240a;E\b\1396")); ("Hashset", ("k\007\158\254\000@\159\r\223\239\202\203F\251-\204")); ("Hashcons", ("\"\244y]\225\153\184M-\246\236\n\241\187\239\016")); ("Gramlib__Stream", ("\248\\H\205_76\253\136\146\200\031\165\021=t")); ("Gramlib", ("\154\143\210e\021i\246\176\224\194\220\217\007\145\139A")); ("Glob_term", ("\165=a\227\160\153.\021_$\232\209T\236\153O")); ("GlobEnv", ("(\152\019ok\006R\183\193\145\137\133<\171\005\231")); ("Genredexpr", ("rz\204\143\007`VgI\195P\168sO\198\012")); ("Genlambda", ("\170}\024\241\141\222\136S\169\219\2212i\134KI")); ("Geninterp", ("2S\151\191\189\159\004\188;\224d\199|U\004\028")); ("Genintern", ("\152Ac\019=n\235\197\141\224T\162\192\148eg")); ("Genarg", ("\1434\015\001\152\196\005s\156\136\195\185\247\b3\t")); ("Ftactic", ("K\172\205\128\241\162\160\201\202\1561o\180L\206:")); ("Float64", ("\219\005\019\195\215\135G\180\0027\026\026\030\198\165\193")); ("Exninfo", ("\234y\199N7\247\202\207\2051\153\214?\193\178\151")); ("Evd", ("\211\205p\193\216\129r\006\239oN\142ar\196\175")); ("Evarutil", ("\005\175\132e\164O\223svi \252\232\138\022\137")); ("Evarsolve", ("\000&\228\016}j\199\t\229\173\127\024\219\199\184\178")); ("Evardefine", ("\178\167R\199\158\242\001Y\215<\151\020\206\153\227\019")); ("Evar_kinds", ("\023L\186\132\218}\254\221\185\198\220\200h\003{\021")); ("Evar", ("\211\220k\204\216\154$\194\172\000\246w\209\t`\223")); ("Esubst", ("\228q\127\209\224p}\152\212B\198\030\n[\130\151")); ("Environ", ("\171b\1579\229<\003Z\147IL\225X\254\182\204")); ("Entries", ("\172\201\198\221Ap\027_{\174\141C\021\";p")); ("EConstr", ("\201aW\156\157;N\004\201V\208\006L\166\211)")); ("Dyn", ("\131z`\205v\2306\007x\027&K.?;\169")); ("Declarations", ("\239\137n\019\030w$\182\166z^{\b\206\163\175")); ("DAst", ("\224/\200)\007\184ni\134\b\139\204\241\005w\212")); ("Coqlib", ("'\226\164\143\129\221\158\224\247\247\160\190~\171\191\198")); ("Cooking", ("\019\218\179\016\0257\132\194\226|P\015\149,.\181")); ("Conversion", ("\158\150&\195M\tv\127|\029\158RRK\211A")); ("Conv_oracle", ("\149\214\252\230:&\015\145\149My<\185\141\240\186")); ("Context", ("\245 \254C:.B\171\131\207Bz\249\1523\154")); ("Constrexpr", ("p'r\245\184chL\183\249\"\213]\1741\237")); ("Constr", ("q8Wv\220\207\200U\132\252r\191\211F\211\214")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("CUnix", ("\140Zl\153\167\011J\015\005|th\247OTu")); ("CSig", ("\167\147!w\140v\022\011u&\016\1997\025\165\t")); ("CSet", ("\147a\030\243p\rj\143\021\168\004\152\177\136\175\193")); ("CPrimitives", ("\007\129v\027\244\128\227\180\b\224\129\1582\237\175\182")); ("CMap", ("\251\001\168\164\179\229b\204e\150\139\026d\227\168\134")); ("CList", ("A\nI\231LQ\150(\218t+t<]\021\005")); ("CEphemeron", ("\204I\179-\206(x4\173\229\250\001PkH\151")); ("CDebug", ("^4\210p7\239!3\138\138\213?\239`\250\157")); ("CClosure", ("\167\b\022\241V-\r\253\b\002\000j]\223%\142")); ("CAst", ("q\180Q\14938Y%\202icZU>\006\152")); ("CArray", ("\208\184\225B\128\004A\242\152j\188j\016\177}\150")); ("AcyclicGraph", ("\205\254\228\229\130\159\004\n\191^\193\203M\015\236F"))], [(0)])
val reduce_after_refine : unit Proofview.tactic

val extension_ignored : (Uloc.t * string) Fault.info
val extension_traversed : (Uloc.t * string) Fault.info
val opened_first_class : (Uloc.t * string option) Fault.info
val included_first_class : Uloc.t Fault.info
val applied_structure : (Uloc.t * Module.Partial.t) Fault.info
val included : (Uloc.t * Module.sty * [ `Abstract | `Functor ]) Fault.info
val opened : (Uloc.t * Module.sty * [ `Abstract | `Functor ]) Fault.info
val applied_unknown : (Uloc.t * Module.Partial.t) Fault.info
val unknown_approximated : (Uloc.t * Module.level * Name.t) Fault.info
val nonexisting_submodule :
  (Uloc.t * Paths.S.t * Module.level * Name.t) Fault.info
val ambiguous : (Uloc.t * Name.t * Module.Divergence.t) Fault.info
val module_conflict : (Namespaced.t * Pkg.t list) Fault.info
val local_module_conflict : (Namespaced.t * Pkg.t list) Fault.info
val concordant_approximation : Pkg.t Fault.info
val discordant_approximation :
  (Pkg.t * Namespaced.t list * Namespaced.t list) Fault.info
val syntaxerr : Syntaxerr.error Fault.info
val lexerr : (string * Lexer.error) Fault.info
val unknown_file_format : (string * string) Fault.info
val future_version :
  (string * (int * int * int) * (int * int * int)) Fault.info
val wrong_file_kind : (string * string * string) Fault.info
val parsing_error : (string * string) Fault.info
val schematic_errors :
  ("DEBUG:rule", [(("extension_ignored", 535), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -108); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -109)]), 100000000, 0, -107)], (0)), 100000000, 0, -106), 0, (("lib/standard_faults.mli", 5, 57, 57), ("lib/standard_faults.mli", 5, 57, 111), 0), 0, Tag1 ("Standard_faults", 0)), 0); (("extension_traversed", 536), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -104); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -105)]), 100000000, 0, -103)], (0)), 100000000, 0, -102), 0, (("lib/standard_faults.mli", 6, 112, 112), ("lib/standard_faults.mli", 6, 112, 168), 0), 0, Tag1 ("Standard_faults", 1)), 0); (("opened_first_class", 537), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -99); (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100)]), 100000000, 0, -98)], (0)), 100000000, 0, -97), 0, (("lib/standard_faults.mli", 9, 207, 207), ("lib/standard_faults.mli", 9, 207, 269), 0), 0, Tag1 ("Standard_faults", 2)), 0); (("included_first_class", 538), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -96)], (0)), 100000000, 0, -95), 0, (("lib/standard_faults.mli", 10, 270, 270), ("lib/standard_faults.mli", 10, 270, 314), 0), 0, Tag1 ("Standard_faults", 3)), 0); (("applied_structure", 539), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -93); (Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Partial"), "t"), 0, (0)), 100000000, 0, -94)]), 100000000, 0, -92)], (0)), 100000000, 0, -91), 0, (("lib/standard_faults.mli", 13, 341, 341), ("lib/standard_faults.mli", 13, 341, 405), 0), 0, Tag1 ("Standard_faults", 6)), 0); (("included", 540), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -87); (Tag3 (Tag1 ((Tag2 ("Module")), "sty"), 0, (0)), 100000000, 0, -88); (Tag8 (([("Abstract", (0)); ("Functor", (0))], (0, 100000000, 0, -90), 1, 0, 0)), 100000000, 0, -89)]), 100000000, 0, -86)], (0)), 100000000, 0, -85), 0, (("lib/standard_faults.mli", 14, 406, 406), ("lib/standard_faults.mli", 14, 406, 482), 0), 0, Tag1 ("Standard_faults", 7)), 0); (("opened", 541), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -81); (Tag3 (Tag1 ((Tag2 ("Module")), "sty"), 0, (0)), 100000000, 0, -82); (Tag8 (([("Abstract", (0)); ("Functor", (0))], (0, 100000000, 0, -84), 1, 0, 0)), 100000000, 0, -83)]), 100000000, 0, -80)], (0)), 100000000, 0, -79), 0, (("lib/standard_faults.mli", 15, 483, 483), ("lib/standard_faults.mli", 15, 483, 557), 0), 0, Tag1 ("Standard_faults", 8)), 0); (("applied_unknown", 542), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -77); (Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Partial"), "t"), 0, (0)), 100000000, 0, -78)]), 100000000, 0, -76)], (0)), 100000000, 0, -75), 0, (("lib/standard_faults.mli", 16, 558, 558), ("lib/standard_faults.mli", 16, 558, 620), 0), 0, Tag1 ("Standard_faults", 9)), 0); (("unknown_approximated", 543), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -72); (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -73); (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -74)]), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0, (("lib/standard_faults.mli", 17, 621, 621), ("lib/standard_faults.mli", 17, 621, 693), 0), 0, Tag1 ("Standard_faults", 10)), 0); (("nonexisting_submodule", 544), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -66); (Tag3 (Tag1 (Tag1 ((Tag2 ("Paths")), "S"), "t"), 0, (0)), 100000000, 0, -67); (Tag3 (Tag1 ((Tag2 ("Module")), "level"), 0, (0)), 100000000, 0, -68); (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -69)]), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0, (("lib/standard_faults.mli", 18, 694, 694), ("lib/standard_faults.mli", 19, 721, 779), 0), 0, Tag1 ("Standard_faults", 11)), 0); (("ambiguous", 545), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Uloc")), "t"), 0, (0)), 100000000, 0, -61); (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -62); (Tag3 (Tag1 (Tag1 ((Tag2 ("Module")), "Divergence"), "t"), 0, (0)), 100000000, 0, -63)]), 100000000, 0, -60)], (0)), 100000000, 0, -59), 0, (("lib/standard_faults.mli", 21, 781, 781), ("lib/standard_faults.mli", 21, 781, 848), 0), 0, Tag1 ("Standard_faults", 12)), 0); (("module_conflict", 546), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -56); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57)]), 100000000, 0, -55)], (0)), 100000000, 0, -54), 0, (("lib/standard_faults.mli", 27, 958, 958), ("lib/standard_faults.mli", 27, 958, 1019), 0), 0, Tag1 ("Standard_faults", 13)), 0); (("local_module_conflict", 547), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -51); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -53)], (0)), 100000000, 0, -52)]), 100000000, 0, -50)], (0)), 100000000, 0, -49), 0, (("lib/standard_faults.mli", 31, 1110, 1110), ("lib/standard_faults.mli", 31, 1110, 1177), 0), 0, Tag1 ("Standard_faults", 14)), 0); (("concordant_approximation", 548), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -48)], (0)), 100000000, 0, -47), 0, (("lib/standard_faults.mli", 35, 1220, 1220), ("lib/standard_faults.mli", 35, 1220, 1267), 0), 0, Tag1 ("Standard_faults", 15)), 0); (("discordant_approximation", 549), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 (Tag1 ((Tag2 ("Pkg")), "t"), 0, (0)), 100000000, 0, -42); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -44)], (0)), 100000000, 0, -43); (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 ((Tag2 ("Namespaced")), "t"), 0, (0)), 100000000, 0, -46)], (0)), 100000000, 0, -45)]), 100000000, 0, -41)], (0)), 100000000, 0, -40), 0, (("lib/standard_faults.mli", 36, 1268, 1268), ("lib/standard_faults.mli", 37, 1299, 1361), 0), 0, Tag1 ("Standard_faults", 16)), 0); (("syntaxerr", 550), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag3 (Tag1 ((Tag2 ("Syntaxerr")), "error"), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0, (("lib/standard_faults.mli", 38, 1362, 1362), ("lib/standard_faults.mli", 38, 1362, 1404), 0), 0, Tag1 ("Standard_faults", 17)), 0); (("lexerr", 551), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -36); (Tag3 (Tag1 ((Tag2 ("Lexer")), "error"), 0, (0)), 100000000, 0, -37)]), 100000000, 0, -35)], (0)), 100000000, 0, -34), 0, (("lib/standard_faults.mli", 39, 1405, 1405), ("lib/standard_faults.mli", 39, 1405, 1453), 0), 0, Tag1 ("Standard_faults", 18)), 0); (("unknown_file_format", 552), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -32); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -33)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), 0, (("lib/standard_faults.mli", 43, 1504, 1504), ("lib/standard_faults.mli", 43, 1504, 1560), 0), 0, Tag1 ("Standard_faults", 19)), 0); (("future_version", 553), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -21); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -23); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -24); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -25)]), 100000000, 0, -22); (Tag2 ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -27); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -28); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -29)]), 100000000, 0, -26)]), 100000000, 0, -20)], (0)), 100000000, 0, -19), 0, (("lib/standard_faults.mli", 44, 1561, 1561), ("lib/standard_faults.mli", 45, 1582, 1644), 0), 0, Tag1 ("Standard_faults", 20)), 0); (("wrong_file_kind", 554), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -16); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -17); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -18)]), 100000000, 0, -15)], (0)), 100000000, 0, -14), 0, (("lib/standard_faults.mli", 46, 1645, 1645), ("lib/standard_faults.mli", 46, 1645, 1706), 0), 0, Tag1 ("Standard_faults", 21)), 0); (("parsing_error", 555), ((Tag3 (Tag1 ((Tag2 ("Fault")), "info"), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -12); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)]), 100000000, 0, -11)], (0)), 100000000, 0, -10), 0, (("lib/standard_faults.mli", 47, 1707, 1707), ("lib/standard_faults.mli", 47, 1707, 1757), 0), 0, Tag1 ("Standard_faults", 22)), 0); (("schematic_errors", 556), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Fault")), "Policy"), "t"), 0, (0)), 100000000, 0, -9), (Tag1 (0, (Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -6); (Tag3 (Tag1 ((Tag2 ("Name")), "t"), 0, (0)), 100000000, 0, -7); (Tag3 (Tag1 (Tag1 ((Tag2 ("Schematic")), "Ext"), "error"), 0, (0)), 100000000, 0, -8)]), 100000000, 0, -5), (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/standard_faults.mli", 49, 1759, 1759), ("lib/standard_faults.mli", 50, 1781, 1846), 0), 0, Tag1 ("Standard_faults", 24)), 0)], "Standard_faults", [("Standard_faults", ("\148\214\166\240\002e\005\025b\252&9\031\155\246\025")); ("Warnings", ("e\016\015Z\137R2!\023\161\135\210\195\204:\023")); ("Unitname", ("\155n\201\211\249\229\028$\220J\172\018<\249\171\158")); ("Uloc", ("\172\208h 6@\178[\156\249\206\172%\133\167\239")); ("Syntaxerr", ("\219y W\156\199S\188\018+\196\144>\187\159f")); ("Support", ("YA;\029\006a\255\202R\137\181\133\184\209)\005")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Schematic", ("\180\179\011\178\017I\241^\235\149h\161k\b\209\142")); ("Pp", ("\167zCQ\134\167\215\2517\247\158\219\250\223.\197")); ("Pkg", ("SneaP\023\210\210\240\218\128bA\te\239")); ("Paths", ("\000\152\242H\139l\222\245\245Ndb\202P^\175")); ("Parsetree", ("\255\184\178E\179\201?\171v\020\r*dO\170\242")); ("Parser", ("7'\1782\253\248\214\163]8\227\231&\145\183;")); ("Namespaced", ("%\208\253;3\161W$\236\1838K\195z\1493")); ("Name", ("4? \167\131n\184\000\214\031\017\027\153\002]^")); ("Module", ("2_s\200\188\137\247\158>\168\195\023\195\n\011V")); ("Modname", ("v\160\183\003\212\232\177\007\228-\002\145i\230\255\248")); ("Longident", ("\248/\208\t\\\026\n\184\162GD\164)\226\248\226")); ("Location", ("\178\182H\005\029\193C\000\227\194\178qz\1489:")); ("Loc", ("ax\213\152\006\175?\212%\0014\238\021S\218=")); ("Lexer", ("d\166[g\003\193p\201\147\190pL\152^\136A")); ("Id", ("w\207`(\179n\181\161\155\252\243\195\006\139NO")); ("Fault", ("\232\144\144(K\139\181-h!\017\212@?\127\199")); ("Docstrings", ("\216\171\176\031*\203\162\186%\175\201qq\189\139U")); ("CamlinternalMenhirLib", ("\171m\238\135\252\210\222v\200\202\178\241L\143\025\153")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Asttypes", ("/\236U\160\174\204\175\251\243\169^\173\218\181\179\216"))], [(0)])
Fault.Policy.t -> string * Name.t * Schematic.Ext.error -> unit
